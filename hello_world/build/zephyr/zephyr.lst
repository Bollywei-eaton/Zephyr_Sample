
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	40 07 00 24 59 13 00 08 d3 2b 00 08 2d 13 00 08     @..$Y....+..-...
 8000010:	2d 13 00 08 2d 13 00 08 2d 13 00 08 00 00 00 00     -...-...-.......
	...
 800002c:	bd 0f 00 08 2d 13 00 08 00 00 00 00 69 0f 00 08     ....-.......i...
 800003c:	21 1f 00 08                                         !...

08000040 <_irq_vector_table>:
 8000040:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000050:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000060:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000070:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000080:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000090:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80000a0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80000b0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80000c0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80000d0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80000e0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80000f0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000100:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000110:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000120:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000130:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000140:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000150:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000160:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000170:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000180:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000190:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80001a0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80001b0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80001c0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80001d0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80001e0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 80001f0:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000200:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000210:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000220:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000230:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000240:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000250:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000260:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000270:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000280:	61 10 00 08 61 10 00 08 61 10 00 08 61 10 00 08     a...a...a...a...
 8000290:	61 10 00 08 61 10 00 08                             a...a...

Disassembly of section text:

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b974 	b.w	8000598 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002cc:	9e08      	ldr	r6, [sp, #32]
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	4688      	mov	r8, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14d      	bne.n	8000374 <__udivmoddi4+0xac>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4694      	mov	ip, r2
 80002dc:	d968      	bls.n	80003b0 <__udivmoddi4+0xe8>
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	b152      	cbz	r2, 80002fa <__udivmoddi4+0x32>
 80002e4:	fa01 f302 	lsl.w	r3, r1, r2
 80002e8:	f1c2 0120 	rsb	r1, r2, #32
 80002ec:	fa20 f101 	lsr.w	r1, r0, r1
 80002f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f4:	ea41 0803 	orr.w	r8, r1, r3
 80002f8:	4094      	lsls	r4, r2
 80002fa:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002fe:	0c21      	lsrs	r1, r4, #16
 8000300:	fbb8 fef5 	udiv	lr, r8, r5
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	fb05 831e 	mls	r3, r5, lr, r8
 800030c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000310:	fb0e f107 	mul.w	r1, lr, r7
 8000314:	4299      	cmp	r1, r3
 8000316:	d90b      	bls.n	8000330 <__udivmoddi4+0x68>
 8000318:	eb1c 0303 	adds.w	r3, ip, r3
 800031c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000320:	f080 811e 	bcs.w	8000560 <__udivmoddi4+0x298>
 8000324:	4299      	cmp	r1, r3
 8000326:	f240 811b 	bls.w	8000560 <__udivmoddi4+0x298>
 800032a:	f1ae 0e02 	sub.w	lr, lr, #2
 800032e:	4463      	add	r3, ip
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f5 	udiv	r0, r3, r5
 8000338:	fb05 3310 	mls	r3, r5, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 f707 	mul.w	r7, r0, r7
 8000344:	42a7      	cmp	r7, r4
 8000346:	d90a      	bls.n	800035e <__udivmoddi4+0x96>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000350:	f080 8108 	bcs.w	8000564 <__udivmoddi4+0x29c>
 8000354:	42a7      	cmp	r7, r4
 8000356:	f240 8105 	bls.w	8000564 <__udivmoddi4+0x29c>
 800035a:	4464      	add	r4, ip
 800035c:	3802      	subs	r0, #2
 800035e:	1be4      	subs	r4, r4, r7
 8000360:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000364:	2100      	movs	r1, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa8>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0xc2>
 8000378:	2e00      	cmp	r6, #0
 800037a:	f000 80ee 	beq.w	800055a <__udivmoddi4+0x292>
 800037e:	2100      	movs	r1, #0
 8000380:	e9c6 0500 	strd	r0, r5, [r6]
 8000384:	4608      	mov	r0, r1
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d14a      	bne.n	8000428 <__udivmoddi4+0x160>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xd4>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80f9 	bhi.w	800058e <__udivmoddi4+0x2c6>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0303 	sbc.w	r3, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	4698      	mov	r8, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d0e2      	beq.n	8000370 <__udivmoddi4+0xa8>
 80003aa:	e9c6 4800 	strd	r4, r8, [r6]
 80003ae:	e7df      	b.n	8000370 <__udivmoddi4+0xa8>
 80003b0:	b902      	cbnz	r2, 80003b4 <__udivmoddi4+0xec>
 80003b2:	deff      	udf	#255	; 0xff
 80003b4:	fab2 f282 	clz	r2, r2
 80003b8:	2a00      	cmp	r2, #0
 80003ba:	f040 8091 	bne.w	80004e0 <__udivmoddi4+0x218>
 80003be:	eba1 050c 	sub.w	r5, r1, ip
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb5 f3f7 	udiv	r3, r5, r7
 80003d0:	fb07 5013 	mls	r0, r7, r3, r5
 80003d4:	0c25      	lsrs	r5, r4, #16
 80003d6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003da:	fb0e f003 	mul.w	r0, lr, r3
 80003de:	42a8      	cmp	r0, r5
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x12c>
 80003e2:	eb1c 0505 	adds.w	r5, ip, r5
 80003e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x12a>
 80003ec:	42a8      	cmp	r0, r5
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 80003f2:	4643      	mov	r3, r8
 80003f4:	1a2d      	subs	r5, r5, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb5 f0f7 	udiv	r0, r5, r7
 80003fc:	fb07 5510 	mls	r5, r7, r0, r5
 8000400:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x156>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 35ff 	add.w	r5, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x154>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2ca>
 800041c:	4628      	mov	r0, r5
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000426:	e79e      	b.n	8000366 <__udivmoddi4+0x9e>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa20 f407 	lsr.w	r4, r0, r7
 800043a:	fa05 f301 	lsl.w	r3, r5, r1
 800043e:	431c      	orrs	r4, r3
 8000440:	40fd      	lsrs	r5, r7
 8000442:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000446:	fa00 f301 	lsl.w	r3, r0, r1
 800044a:	fbb5 f8f9 	udiv	r8, r5, r9
 800044e:	0c20      	lsrs	r0, r4, #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fb09 5518 	mls	r5, r9, r8, r5
 8000458:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800045c:	fb08 f00e 	mul.w	r0, r8, lr
 8000460:	42a8      	cmp	r0, r5
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000468:	eb1c 0505 	adds.w	r5, ip, r5
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2bc>
 8000474:	42a8      	cmp	r0, r5
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2bc>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4465      	add	r5, ip
 8000480:	1a2d      	subs	r5, r5, r0
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb5 f0f9 	udiv	r0, r5, r9
 8000488:	fb09 5510 	mls	r5, r9, r0, r5
 800048c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000490:	fb00 fe0e 	mul.w	lr, r0, lr
 8000494:	45ae      	cmp	lr, r5
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1e2>
 8000498:	eb1c 0505 	adds.w	r5, ip, r5
 800049c:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2b4>
 80004a2:	45ae      	cmp	lr, r5
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2b4>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4465      	add	r5, ip
 80004aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ae:	fba0 9402 	umull	r9, r4, r0, r2
 80004b2:	eba5 050e 	sub.w	r5, r5, lr
 80004b6:	42a5      	cmp	r5, r4
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46a6      	mov	lr, r4
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x2a4>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x2a0>
 80004c0:	b15e      	cbz	r6, 80004da <__udivmoddi4+0x212>
 80004c2:	ebb3 0208 	subs.w	r2, r3, r8
 80004c6:	eb65 050e 	sbc.w	r5, r5, lr
 80004ca:	fa05 f707 	lsl.w	r7, r5, r7
 80004ce:	fa22 f301 	lsr.w	r3, r2, r1
 80004d2:	40cd      	lsrs	r5, r1
 80004d4:	431f      	orrs	r7, r3
 80004d6:	e9c6 7500 	strd	r7, r5, [r6]
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f103 	lsr.w	r1, r0, r3
 80004e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ec:	fa25 f303 	lsr.w	r3, r5, r3
 80004f0:	4095      	lsls	r5, r2
 80004f2:	430d      	orrs	r5, r1
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb3 f1f7 	udiv	r1, r3, r7
 8000500:	fb07 3011 	mls	r0, r7, r1, r3
 8000504:	0c2b      	lsrs	r3, r5, #16
 8000506:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800050a:	fb01 f00e 	mul.w	r0, r1, lr
 800050e:	4298      	cmp	r0, r3
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x260>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f101 38ff 	add.w	r8, r1, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b8>
 8000520:	4298      	cmp	r0, r3
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b8>
 8000524:	3902      	subs	r1, #2
 8000526:	4463      	add	r3, ip
 8000528:	1a1b      	subs	r3, r3, r0
 800052a:	b2ad      	uxth	r5, r5
 800052c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000530:	fb07 3310 	mls	r3, r7, r0, r3
 8000534:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000538:	fb00 f30e 	mul.w	r3, r0, lr
 800053c:	42ab      	cmp	r3, r5
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x28a>
 8000540:	eb1c 0505 	adds.w	r5, ip, r5
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2b0>
 800054a:	42ab      	cmp	r3, r5
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2b0>
 800054e:	3802      	subs	r0, #2
 8000550:	4465      	add	r5, ip
 8000552:	1aed      	subs	r5, r5, r3
 8000554:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0x104>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e707      	b.n	8000370 <__udivmoddi4+0xa8>
 8000560:	4686      	mov	lr, r0
 8000562:	e6e5      	b.n	8000330 <__udivmoddi4+0x68>
 8000564:	4618      	mov	r0, r3
 8000566:	e6fa      	b.n	800035e <__udivmoddi4+0x96>
 8000568:	454b      	cmp	r3, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f8>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000574:	3801      	subs	r0, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f8>
 8000578:	4640      	mov	r0, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x28a>
 800057c:	4620      	mov	r0, r4
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1e2>
 8000580:	4641      	mov	r1, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x260>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b8>
 8000588:	3b02      	subs	r3, #2
 800058a:	4465      	add	r5, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x12c>
 800058e:	4608      	mov	r0, r1
 8000590:	e709      	b.n	80003a6 <__udivmoddi4+0xde>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x156>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:

#include <zephyr/kernel.h>

int main(void)
{
	printk("Hello World! %s\n", CONFIG_BOARD);
 800059c:	4903      	ldr	r1, [pc, #12]	; (80005ac <main+0x10>)
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <main+0x14>)
{
 80005a0:	b508      	push	{r3, lr}
	printk("Hello World! %s\n", CONFIG_BOARD);
 80005a2:	f002 fa96 	bl	8002ad2 <printk>
	return 0;
}
 80005a6:	2000      	movs	r0, #0
 80005a8:	bd08      	pop	{r3, pc}
 80005aa:	bf00      	nop
 80005ac:	08003cd6 	.word	0x08003cd6
 80005b0:	08003ce4 	.word	0x08003ce4

080005b4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <char_out+0x8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4718      	bx	r3
 80005ba:	bf00      	nop
 80005bc:	24000000 	.word	0x24000000

080005c0 <__printk_hook_install>:
	_char_out = fn;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <__printk_hook_install+0x8>)
 80005c2:	6018      	str	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	24000000 	.word	0x24000000

080005cc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80005cc:	b507      	push	{r0, r1, r2, lr}
 80005ce:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 80005d0:	2100      	movs	r1, #0
 80005d2:	4602      	mov	r2, r0
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <vprintk+0x18>)
 80005d6:	9100      	str	r1, [sp, #0]
 80005d8:	f000 f806 	bl	80005e8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80005dc:	b003      	add	sp, #12
 80005de:	f85d fb04 	ldr.w	pc, [sp], #4
 80005e2:	bf00      	nop
 80005e4:	080005b5 	.word	0x080005b5

080005e8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 80005e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005ec:	468b      	mov	fp, r1
 80005ee:	b091      	sub	sp, #68	; 0x44
 80005f0:	4692      	mov	sl, r2
 80005f2:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80005f4:	2500      	movs	r5, #0
{
 80005f6:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80005f8:	f89a 0000 	ldrb.w	r0, [sl]
 80005fc:	b908      	cbnz	r0, 8000602 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80005fe:	4628      	mov	r0, r5
 8000600:	e364      	b.n	8000ccc <z_cbvprintf_impl+0x6e4>
		if (*fp != '%') {
 8000602:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000604:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
 8000608:	d007      	beq.n	800061a <z_cbvprintf_impl+0x32>
			OUTC('%');
 800060a:	4659      	mov	r1, fp
 800060c:	9b02      	ldr	r3, [sp, #8]
 800060e:	4798      	blx	r3
 8000610:	2800      	cmp	r0, #0
 8000612:	f2c0 835b 	blt.w	8000ccc <z_cbvprintf_impl+0x6e4>
 8000616:	3501      	adds	r5, #1
			break;
 8000618:	e212      	b.n	8000a40 <z_cbvprintf_impl+0x458>
		} state = {
 800061a:	2218      	movs	r2, #24
 800061c:	2100      	movs	r1, #0
 800061e:	a80a      	add	r0, sp, #40	; 0x28
 8000620:	f002 faf0 	bl	8002c04 <memset>
	if (*sp == '%') {
 8000624:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000628:	2b25      	cmp	r3, #37	; 0x25
 800062a:	d078      	beq.n	800071e <z_cbvprintf_impl+0x136>
 800062c:	2200      	movs	r2, #0
 800062e:	4610      	mov	r0, r2
 8000630:	4696      	mov	lr, r2
 8000632:	4694      	mov	ip, r2
 8000634:	4616      	mov	r6, r2
 8000636:	4639      	mov	r1, r7
		switch (*sp) {
 8000638:	f817 3b01 	ldrb.w	r3, [r7], #1
 800063c:	2b2b      	cmp	r3, #43	; 0x2b
 800063e:	f000 809d 	beq.w	800077c <z_cbvprintf_impl+0x194>
 8000642:	f200 8094 	bhi.w	800076e <z_cbvprintf_impl+0x186>
 8000646:	2b20      	cmp	r3, #32
 8000648:	f000 809b 	beq.w	8000782 <z_cbvprintf_impl+0x19a>
 800064c:	2b23      	cmp	r3, #35	; 0x23
 800064e:	f000 809b 	beq.w	8000788 <z_cbvprintf_impl+0x1a0>
 8000652:	b12e      	cbz	r6, 8000660 <z_cbvprintf_impl+0x78>
 8000654:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8000658:	f046 0604 	orr.w	r6, r6, #4
 800065c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000660:	f1bc 0f00 	cmp.w	ip, #0
 8000664:	d005      	beq.n	8000672 <z_cbvprintf_impl+0x8a>
 8000666:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 800066a:	f046 0608 	orr.w	r6, r6, #8
 800066e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000672:	f1be 0f00 	cmp.w	lr, #0
 8000676:	d005      	beq.n	8000684 <z_cbvprintf_impl+0x9c>
 8000678:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 800067c:	f046 0610 	orr.w	r6, r6, #16
 8000680:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000684:	b128      	cbz	r0, 8000692 <z_cbvprintf_impl+0xaa>
 8000686:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 800068a:	f040 0020 	orr.w	r0, r0, #32
 800068e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8000692:	b12a      	cbz	r2, 80006a0 <z_cbvprintf_impl+0xb8>
 8000694:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800069c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 80006a0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80006a4:	f002 0044 	and.w	r0, r2, #68	; 0x44
 80006a8:	2844      	cmp	r0, #68	; 0x44
 80006aa:	d103      	bne.n	80006b4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 80006ac:	f36f 1286 	bfc	r2, #6, #1
 80006b0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 80006b4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 80006b8:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 80006ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006be:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 80006c2:	d17b      	bne.n	80007bc <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
 80006c4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
 80006c8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 80006ca:	f042 0201 	orr.w	r2, r2, #1
 80006ce:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 80006d2:	781a      	ldrb	r2, [r3, #0]
 80006d4:	2a2e      	cmp	r2, #46	; 0x2e
 80006d6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80006da:	bf0c      	ite	eq
 80006dc:	2101      	moveq	r1, #1
 80006de:	2100      	movne	r1, #0
 80006e0:	f361 0241 	bfi	r2, r1, #1, #1
 80006e4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 80006e8:	d174      	bne.n	80007d4 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
 80006ea:	785a      	ldrb	r2, [r3, #1]
 80006ec:	2a2a      	cmp	r2, #42	; 0x2a
 80006ee:	d06a      	beq.n	80007c6 <z_cbvprintf_impl+0x1de>
	++sp;
 80006f0:	3301      	adds	r3, #1
	size_t val = 0;
 80006f2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 80006f4:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 80006f6:	4618      	mov	r0, r3
 80006f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80006fc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 8000700:	2f09      	cmp	r7, #9
 8000702:	f240 808e 	bls.w	8000822 <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000706:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 800070a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 800070c:	f3c2 0040 	ubfx	r0, r2, #1, #1
 8000710:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 8000714:	f361 0241 	bfi	r2, r1, #1, #1
 8000718:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 800071c:	e05a      	b.n	80007d4 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
 800071e:	f10a 0702 	add.w	r7, sl, #2
 8000722:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 8000726:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800072a:	07d9      	lsls	r1, r3, #31
 800072c:	f140 8149 	bpl.w	80009c2 <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
 8000730:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 8000734:	f1b9 0f00 	cmp.w	r9, #0
 8000738:	da07      	bge.n	800074a <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
 800073a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
 800073e:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
 8000742:	f042 0204 	orr.w	r2, r2, #4
 8000746:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
 800074a:	075a      	lsls	r2, r3, #29
 800074c:	f140 8142 	bpl.w	80009d4 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
 8000750:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 8000754:	f1b8 0f00 	cmp.w	r8, #0
 8000758:	f280 8141 	bge.w	80009de <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
 800075c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000760:	f36f 0341 	bfc	r3, #1, #1
 8000764:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 8000768:	f04f 38ff 	mov.w	r8, #4294967295
 800076c:	e137      	b.n	80009de <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
 800076e:	2b2d      	cmp	r3, #45	; 0x2d
 8000770:	d00c      	beq.n	800078c <z_cbvprintf_impl+0x1a4>
 8000772:	2b30      	cmp	r3, #48	; 0x30
 8000774:	f47f af6d 	bne.w	8000652 <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
 8000778:	2201      	movs	r2, #1
	} while (loop);
 800077a:	e75c      	b.n	8000636 <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
 800077c:	f04f 0c01 	mov.w	ip, #1
 8000780:	e759      	b.n	8000636 <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
 8000782:	f04f 0e01 	mov.w	lr, #1
 8000786:	e756      	b.n	8000636 <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
 8000788:	2001      	movs	r0, #1
 800078a:	e754      	b.n	8000636 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
 800078c:	2601      	movs	r6, #1
 800078e:	e752      	b.n	8000636 <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
 8000790:	fb0c 0202 	mla	r2, ip, r2, r0
 8000794:	4633      	mov	r3, r6
 8000796:	3a30      	subs	r2, #48	; 0x30
 8000798:	461e      	mov	r6, r3
 800079a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800079e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 80007a2:	2f09      	cmp	r7, #9
 80007a4:	d9f4      	bls.n	8000790 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
 80007a6:	4299      	cmp	r1, r3
 80007a8:	d093      	beq.n	80006d2 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 80007aa:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 80007ae:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 80007b0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 80007b2:	f362 0141 	bfi	r1, r2, #1, #1
 80007b6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80007ba:	e78a      	b.n	80006d2 <z_cbvprintf_impl+0xea>
 80007bc:	460b      	mov	r3, r1
	size_t val = 0;
 80007be:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80007c0:	f04f 0c0a 	mov.w	ip, #10
 80007c4:	e7e8      	b.n	8000798 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
 80007c6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 80007ca:	3302      	adds	r3, #2
		conv->prec_star = true;
 80007cc:	f042 0204 	orr.w	r2, r2, #4
 80007d0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
 80007d4:	461f      	mov	r7, r3
 80007d6:	f817 2b01 	ldrb.w	r2, [r7], #1
 80007da:	2a6c      	cmp	r2, #108	; 0x6c
 80007dc:	d041      	beq.n	8000862 <z_cbvprintf_impl+0x27a>
 80007de:	d825      	bhi.n	800082c <z_cbvprintf_impl+0x244>
 80007e0:	2a68      	cmp	r2, #104	; 0x68
 80007e2:	d02b      	beq.n	800083c <z_cbvprintf_impl+0x254>
 80007e4:	2a6a      	cmp	r2, #106	; 0x6a
 80007e6:	d046      	beq.n	8000876 <z_cbvprintf_impl+0x28e>
 80007e8:	2a4c      	cmp	r2, #76	; 0x4c
 80007ea:	d04c      	beq.n	8000886 <z_cbvprintf_impl+0x29e>
 80007ec:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 80007ee:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 80007f2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
 80007f6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 80007f8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 80007fc:	f200 80d9 	bhi.w	80009b2 <z_cbvprintf_impl+0x3ca>
 8000800:	2a57      	cmp	r2, #87	; 0x57
 8000802:	d84d      	bhi.n	80008a0 <z_cbvprintf_impl+0x2b8>
 8000804:	2a41      	cmp	r2, #65	; 0x41
 8000806:	d003      	beq.n	8000810 <z_cbvprintf_impl+0x228>
 8000808:	3a45      	subs	r2, #69	; 0x45
 800080a:	2a02      	cmp	r2, #2
 800080c:	f200 80d1 	bhi.w	80009b2 <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 8000810:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000814:	2204      	movs	r2, #4
 8000816:	f362 0302 	bfi	r3, r2, #0, #3
 800081a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 800081e:	2301      	movs	r3, #1
			break;
 8000820:	e09e      	b.n	8000960 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
 8000822:	fb06 2101 	mla	r1, r6, r1, r2
 8000826:	4603      	mov	r3, r0
 8000828:	3930      	subs	r1, #48	; 0x30
 800082a:	e764      	b.n	80006f6 <z_cbvprintf_impl+0x10e>
	switch (*sp) {
 800082c:	2a74      	cmp	r2, #116	; 0x74
 800082e:	d026      	beq.n	800087e <z_cbvprintf_impl+0x296>
 8000830:	2a7a      	cmp	r2, #122	; 0x7a
 8000832:	d1db      	bne.n	80007ec <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
 8000834:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000838:	2206      	movs	r2, #6
 800083a:	e00d      	b.n	8000858 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
 800083c:	785a      	ldrb	r2, [r3, #1]
 800083e:	2a68      	cmp	r2, #104	; 0x68
 8000840:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8000844:	d106      	bne.n	8000854 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
 8000846:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000848:	f361 02c6 	bfi	r2, r1, #3, #4
			++sp;
 800084c:	1c9f      	adds	r7, r3, #2
			conv->length_mod = LENGTH_LL;
 800084e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 8000852:	e7cc      	b.n	80007ee <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
 8000854:	4613      	mov	r3, r2
 8000856:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 8000858:	f362 03c6 	bfi	r3, r2, #3, #4
 800085c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 8000860:	e7c5      	b.n	80007ee <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
 8000862:	785a      	ldrb	r2, [r3, #1]
 8000864:	2a6c      	cmp	r2, #108	; 0x6c
 8000866:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800086a:	d101      	bne.n	8000870 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
 800086c:	2104      	movs	r1, #4
 800086e:	e7eb      	b.n	8000848 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
 8000870:	4613      	mov	r3, r2
 8000872:	2203      	movs	r2, #3
 8000874:	e7f0      	b.n	8000858 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
 8000876:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800087a:	2205      	movs	r2, #5
 800087c:	e7ec      	b.n	8000858 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
 800087e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000882:	2207      	movs	r2, #7
 8000884:	e7e8      	b.n	8000858 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
 8000886:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800088a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800088e:	f023 0302 	bic.w	r3, r3, #2
 8000892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000896:	f043 0302 	orr.w	r3, r3, #2
 800089a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 800089e:	e7a6      	b.n	80007ee <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
 80008a0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 80008a4:	2920      	cmp	r1, #32
 80008a6:	f200 8084 	bhi.w	80009b2 <z_cbvprintf_impl+0x3ca>
 80008aa:	a001      	add	r0, pc, #4	; (adr r0, 80008b0 <z_cbvprintf_impl+0x2c8>)
 80008ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80008b0:	08000975 	.word	0x08000975
 80008b4:	080009b3 	.word	0x080009b3
 80008b8:	080009b3 	.word	0x080009b3
 80008bc:	080009b3 	.word	0x080009b3
 80008c0:	080009b3 	.word	0x080009b3
 80008c4:	080009b3 	.word	0x080009b3
 80008c8:	080009b3 	.word	0x080009b3
 80008cc:	080009b3 	.word	0x080009b3
 80008d0:	080009b3 	.word	0x080009b3
 80008d4:	08000811 	.word	0x08000811
 80008d8:	080009b3 	.word	0x080009b3
 80008dc:	08000975 	.word	0x08000975
 80008e0:	08000935 	.word	0x08000935
 80008e4:	08000811 	.word	0x08000811
 80008e8:	08000811 	.word	0x08000811
 80008ec:	08000811 	.word	0x08000811
 80008f0:	080009b3 	.word	0x080009b3
 80008f4:	08000935 	.word	0x08000935
 80008f8:	080009b3 	.word	0x080009b3
 80008fc:	080009b3 	.word	0x080009b3
 8000900:	080009b3 	.word	0x080009b3
 8000904:	080009b3 	.word	0x080009b3
 8000908:	0800097d 	.word	0x0800097d
 800090c:	08000975 	.word	0x08000975
 8000910:	08000999 	.word	0x08000999
 8000914:	080009b3 	.word	0x080009b3
 8000918:	080009b3 	.word	0x080009b3
 800091c:	08000999 	.word	0x08000999
 8000920:	080009b3 	.word	0x080009b3
 8000924:	08000975 	.word	0x08000975
 8000928:	080009b3 	.word	0x080009b3
 800092c:	080009b3 	.word	0x080009b3
 8000930:	08000975 	.word	0x08000975
		conv->specifier_cat = SPECIFIER_SINT;
 8000934:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8000938:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 800093a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 800093e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000942:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8000944:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 8000948:	bf02      	ittt	eq
 800094a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 800094e:	f041 0101 	orreq.w	r1, r1, #1
 8000952:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 8000956:	2a63      	cmp	r2, #99	; 0x63
 8000958:	d131      	bne.n	80009be <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 800095a:	3b00      	subs	r3, #0
 800095c:	bf18      	it	ne
 800095e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8000960:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000964:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8000968:	430b      	orrs	r3, r1
 800096a:	f363 0241 	bfi	r2, r3, #1, #1
 800096e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 8000972:	e6d8      	b.n	8000726 <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 8000974:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8000978:	2002      	movs	r0, #2
 800097a:	e7de      	b.n	800093a <z_cbvprintf_impl+0x352>
		if (conv->length_mod == LENGTH_UPPER_L) {
 800097c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8000980:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000984:	2103      	movs	r1, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000986:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 800098a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800098e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 8000990:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000994:	4143      	adcs	r3, r0
 8000996:	e7e3      	b.n	8000960 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 8000998:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800099c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 800099e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 80009a2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 80009a6:	bf14      	ite	ne
 80009a8:	2301      	movne	r3, #1
 80009aa:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
 80009ac:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 80009b0:	e7d6      	b.n	8000960 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
 80009b2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 80009be:	2300      	movs	r3, #0
 80009c0:	e7ce      	b.n	8000960 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
 80009c2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 80009c6:	2a00      	cmp	r2, #0
			width = conv->width_value;
 80009c8:	bfb4      	ite	lt
 80009ca:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
 80009ce:	f04f 39ff 	movge.w	r9, #4294967295
 80009d2:	e6ba      	b.n	800074a <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
 80009d4:	079b      	lsls	r3, r3, #30
 80009d6:	f57f aec7 	bpl.w	8000768 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
 80009da:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
 80009de:	2300      	movs	r3, #0
			= (enum length_mod_enum)conv->length_mod;
 80009e0:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_pre_exp = 0;
 80009e4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 80009e8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
 80009ec:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		enum specifier_cat_enum specifier_cat
 80009f0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d135      	bne.n	8000a64 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
 80009f8:	1ecb      	subs	r3, r1, #3
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d822      	bhi.n	8000a44 <z_cbvprintf_impl+0x45c>
 80009fe:	e8df f003 	tbb	[pc, r3]
 8000a02:	0903      	.short	0x0903
 8000a04:	2109      	.short	0x2109
 8000a06:	21          	.byte	0x21
 8000a07:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8000a08:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 8000a0c:	17da      	asrs	r2, r3, #31
 8000a0e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 8000a12:	e006      	b.n	8000a22 <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
 8000a14:	3407      	adds	r4, #7
 8000a16:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8000a1a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000a1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 8000a22:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8000a26:	f013 0603 	ands.w	r6, r3, #3
 8000a2a:	d059      	beq.n	8000ae0 <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4652      	mov	r2, sl
 8000a30:	4659      	mov	r1, fp
 8000a32:	9802      	ldr	r0, [sp, #8]
 8000a34:	f002 f8aa 	bl	8002b8c <outs>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	f2c0 8147 	blt.w	8000ccc <z_cbvprintf_impl+0x6e4>
 8000a3e:	4405      	add	r5, r0
			continue;
 8000a40:	46ba      	mov	sl, r7
 8000a42:	e5d9      	b.n	80005f8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000a44:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000a48:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000a4a:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000a4e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000a52:	d102      	bne.n	8000a5a <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
 8000a54:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
 8000a58:	e7d8      	b.n	8000a0c <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
 8000a5a:	2902      	cmp	r1, #2
 8000a5c:	d1e1      	bne.n	8000a22 <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
 8000a5e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8000a62:	e7d3      	b.n	8000a0c <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d129      	bne.n	8000abc <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
 8000a68:	1ecb      	subs	r3, r1, #3
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d813      	bhi.n	8000a96 <z_cbvprintf_impl+0x4ae>
 8000a6e:	e8df f003 	tbb	[pc, r3]
 8000a72:	0a03      	.short	0x0a03
 8000a74:	120a      	.short	0x120a
 8000a76:	12          	.byte	0x12
 8000a77:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8000a78:	6822      	ldr	r2, [r4, #0]
 8000a7a:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 8000a7c:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8000a7e:	920a      	str	r2, [sp, #40]	; 0x28
 8000a80:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 8000a82:	4604      	mov	r4, r0
 8000a84:	e7cd      	b.n	8000a22 <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
 8000a86:	1de0      	adds	r0, r4, #7
 8000a88:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 8000a8c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8000a90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 8000a94:	e7f5      	b.n	8000a82 <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
 8000a96:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000a9a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8000a9c:	930a      	str	r3, [sp, #40]	; 0x28
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 8000aa4:	d105      	bne.n	8000ab2 <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
 8000aa6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 8000aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8000aac:	2300      	movs	r3, #0
 8000aae:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ab0:	e7b7      	b.n	8000a22 <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
 8000ab2:	2902      	cmp	r1, #2
 8000ab4:	d1b5      	bne.n	8000a22 <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
 8000ab6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8000aba:	e7f6      	b.n	8000aaa <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d109      	bne.n	8000ad4 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
 8000ac0:	1de3      	adds	r3, r4, #7
 8000ac2:	f023 0307 	bic.w	r3, r3, #7
 8000ac6:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 8000aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ace:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000ad2:	e7a6      	b.n	8000a22 <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000ad4:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8000ad6:	bf04      	itt	eq
 8000ad8:	f854 3b04 	ldreq.w	r3, [r4], #4
 8000adc:	930a      	streq	r3, [sp, #40]	; 0x28
 8000ade:	e7a0      	b.n	8000a22 <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
 8000ae0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000ae4:	2878      	cmp	r0, #120	; 0x78
 8000ae6:	d8ab      	bhi.n	8000a40 <z_cbvprintf_impl+0x458>
 8000ae8:	2862      	cmp	r0, #98	; 0x62
 8000aea:	d822      	bhi.n	8000b32 <z_cbvprintf_impl+0x54a>
 8000aec:	2825      	cmp	r0, #37	; 0x25
 8000aee:	f43f ad8c 	beq.w	800060a <z_cbvprintf_impl+0x22>
 8000af2:	2858      	cmp	r0, #88	; 0x58
 8000af4:	d1a4      	bne.n	8000a40 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000af6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000afa:	aa0c      	add	r2, sp, #48	; 0x30
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	ab04      	add	r3, sp, #16
 8000b00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000b04:	f001 fffc 	bl	8002b00 <encode_uint>
 8000b08:	4682      	mov	sl, r0
			if (precision >= 0) {
 8000b0a:	f1b8 0f00 	cmp.w	r8, #0
 8000b0e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8000b12:	db0c      	blt.n	8000b2e <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
 8000b14:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8000b18:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 8000b1c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000b20:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8000b22:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 8000b26:	d902      	bls.n	8000b2e <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
 8000b28:	eba8 0303 	sub.w	r3, r8, r3
 8000b2c:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8000b2e:	4680      	mov	r8, r0
 8000b30:	e03e      	b.n	8000bb0 <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
 8000b32:	3863      	subs	r0, #99	; 0x63
 8000b34:	2815      	cmp	r0, #21
 8000b36:	d883      	bhi.n	8000a40 <z_cbvprintf_impl+0x458>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <z_cbvprintf_impl+0x558>)
 8000b3a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000bc1 	.word	0x08000bc1
 8000b44:	08000c25 	.word	0x08000c25
 8000b48:	08000a41 	.word	0x08000a41
 8000b4c:	08000a41 	.word	0x08000a41
 8000b50:	08000a41 	.word	0x08000a41
 8000b54:	08000a41 	.word	0x08000a41
 8000b58:	08000c25 	.word	0x08000c25
 8000b5c:	08000a41 	.word	0x08000a41
 8000b60:	08000a41 	.word	0x08000a41
 8000b64:	08000a41 	.word	0x08000a41
 8000b68:	08000a41 	.word	0x08000a41
 8000b6c:	08000c81 	.word	0x08000c81
 8000b70:	08000c4f 	.word	0x08000c4f
 8000b74:	08000c53 	.word	0x08000c53
 8000b78:	08000a41 	.word	0x08000a41
 8000b7c:	08000a41 	.word	0x08000a41
 8000b80:	08000b99 	.word	0x08000b99
 8000b84:	08000a41 	.word	0x08000a41
 8000b88:	08000c4f 	.word	0x08000c4f
 8000b8c:	08000a41 	.word	0x08000a41
 8000b90:	08000a41 	.word	0x08000a41
 8000b94:	08000c4f 	.word	0x08000c4f
			if (precision >= 0) {
 8000b98:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8000b9c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 8000ba0:	db0a      	blt.n	8000bb8 <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
 8000ba2:	4641      	mov	r1, r8
 8000ba4:	4650      	mov	r0, sl
 8000ba6:	f002 f839 	bl	8002c1c <strnlen>
			bpe = bps + len;
 8000baa:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
 8000bae:	2600      	movs	r6, #0
		if (bps == NULL) {
 8000bb0:	f1ba 0f00 	cmp.w	sl, #0
 8000bb4:	d10c      	bne.n	8000bd0 <z_cbvprintf_impl+0x5e8>
 8000bb6:	e743      	b.n	8000a40 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
 8000bb8:	4650      	mov	r0, sl
 8000bba:	f002 f811 	bl	8002be0 <strlen>
 8000bbe:	e7f4      	b.n	8000baa <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			break;
 8000bc2:	2600      	movs	r6, #0
			bps = buf;
 8000bc4:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
 8000bc8:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000bcc:	f88d 3010 	strb.w	r3, [sp, #16]
		size_t nj_len = (bpe - bps);
 8000bd0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 8000bd4:	b106      	cbz	r6, 8000bd8 <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
 8000bd6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8000bd8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000bdc:	06d0      	lsls	r0, r2, #27
 8000bde:	d569      	bpl.n	8000cb4 <z_cbvprintf_impl+0x6cc>
			nj_len += 2U;
 8000be0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 8000be2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 8000be4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 8000be6:	bf48      	it	mi
 8000be8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 8000bea:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8000bec:	bf48      	it	mi
 8000bee:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8000bf0:	f1b9 0f00 	cmp.w	r9, #0
 8000bf4:	dd77      	ble.n	8000ce6 <z_cbvprintf_impl+0x6fe>
			if (!conv->flag_dash) {
 8000bf6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8000bfa:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 8000bfe:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000c02:	9303      	str	r3, [sp, #12]
 8000c04:	0753      	lsls	r3, r2, #29
 8000c06:	d46e      	bmi.n	8000ce6 <z_cbvprintf_impl+0x6fe>
				if (conv->flag_zero) {
 8000c08:	0650      	lsls	r0, r2, #25
 8000c0a:	d562      	bpl.n	8000cd2 <z_cbvprintf_impl+0x6ea>
					if (sign != 0) {
 8000c0c:	b146      	cbz	r6, 8000c20 <z_cbvprintf_impl+0x638>
						OUTC(sign);
 8000c0e:	4659      	mov	r1, fp
 8000c10:	4630      	mov	r0, r6
 8000c12:	9b02      	ldr	r3, [sp, #8]
 8000c14:	4798      	blx	r3
 8000c16:	2800      	cmp	r0, #0
 8000c18:	db58      	blt.n	8000ccc <z_cbvprintf_impl+0x6e4>
						sign = 0;
 8000c1a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8000c1c:	3501      	adds	r5, #1
						sign = 0;
 8000c1e:	461e      	mov	r6, r3
					pad = '0';
 8000c20:	2330      	movs	r3, #48	; 0x30
 8000c22:	e057      	b.n	8000cd4 <z_cbvprintf_impl+0x6ec>
			if (conv->flag_plus) {
 8000c24:	071e      	lsls	r6, r3, #28
 8000c26:	d410      	bmi.n	8000c4a <z_cbvprintf_impl+0x662>
				sign = ' ';
 8000c28:	f013 0610 	ands.w	r6, r3, #16
 8000c2c:	bf18      	it	ne
 8000c2e:	2620      	movne	r6, #32
			sint = value->sint;
 8000c30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f6bf af5e 	bge.w	8000af6 <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
 8000c3a:	4252      	negs	r2, r2
				sign = '-';
 8000c3c:	f04f 062d 	mov.w	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 8000c40:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c44:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000c48:	e755      	b.n	8000af6 <z_cbvprintf_impl+0x50e>
				sign = '+';
 8000c4a:	262b      	movs	r6, #43	; 0x2b
 8000c4c:	e7f0      	b.n	8000c30 <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
 8000c4e:	2600      	movs	r6, #0
 8000c50:	e751      	b.n	8000af6 <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
 8000c52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000c54:	b340      	cbz	r0, 8000ca8 <z_cbvprintf_impl+0x6c0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c56:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000c5a:	aa0c      	add	r2, sp, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
		char sign = 0;
 8000c5e:	2600      	movs	r6, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	ab04      	add	r3, sp, #16
 8000c64:	f001 ff4c 	bl	8002b00 <encode_uint>
				conv->altform_0c = true;
 8000c68:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c6c:	4682      	mov	sl, r0
				conv->altform_0c = true;
 8000c6e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000c72:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
 8000c7e:	e744      	b.n	8000b0a <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
 8000c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8000c82:	2907      	cmp	r1, #7
 8000c84:	f63f aedc 	bhi.w	8000a40 <z_cbvprintf_impl+0x458>
 8000c88:	e8df f001 	tbb	[pc, r1]
 8000c8c:	0c06040c 	.word	0x0c06040c
 8000c90:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8000c94:	701d      	strb	r5, [r3, #0]
		break;
 8000c96:	e6d3      	b.n	8000a40 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
 8000c98:	801d      	strh	r5, [r3, #0]
		break;
 8000c9a:	e6d1      	b.n	8000a40 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
 8000c9c:	17ea      	asrs	r2, r5, #31
 8000c9e:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8000ca2:	e6cd      	b.n	8000a40 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000ca4:	601d      	str	r5, [r3, #0]
		break;
 8000ca6:	e6cb      	b.n	8000a40 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
 8000ca8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000d70 <z_cbvprintf_impl+0x788>
 8000cac:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000cae:	f10a 0805 	add.w	r8, sl, #5
 8000cb2:	e78d      	b.n	8000bd0 <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
 8000cb4:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8000cb6:	bf48      	it	mi
 8000cb8:	3301      	addmi	r3, #1
 8000cba:	e792      	b.n	8000be2 <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	9303      	str	r3, [sp, #12]
 8000cc0:	4659      	mov	r1, fp
 8000cc2:	9b02      	ldr	r3, [sp, #8]
 8000cc4:	4798      	blx	r3
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	9b03      	ldr	r3, [sp, #12]
 8000cca:	da04      	bge.n	8000cd6 <z_cbvprintf_impl+0x6ee>
#undef OUTS
#undef OUTC
}
 8000ccc:	b011      	add	sp, #68	; 0x44
 8000cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000cd2:	2320      	movs	r3, #32
 8000cd4:	444d      	add	r5, r9
 8000cd6:	464a      	mov	r2, r9
 8000cd8:	eba5 0109 	sub.w	r1, r5, r9
				while (width-- > 0) {
 8000cdc:	f109 39ff 	add.w	r9, r9, #4294967295
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	dceb      	bgt.n	8000cbc <z_cbvprintf_impl+0x6d4>
 8000ce4:	460d      	mov	r5, r1
		if (sign != 0) {
 8000ce6:	b136      	cbz	r6, 8000cf6 <z_cbvprintf_impl+0x70e>
			OUTC(sign);
 8000ce8:	4659      	mov	r1, fp
 8000cea:	4630      	mov	r0, r6
 8000cec:	9b02      	ldr	r3, [sp, #8]
 8000cee:	4798      	blx	r3
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	dbeb      	blt.n	8000ccc <z_cbvprintf_impl+0x6e4>
 8000cf4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000cf6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000cfa:	06d9      	lsls	r1, r3, #27
 8000cfc:	d401      	bmi.n	8000d02 <z_cbvprintf_impl+0x71a>
 8000cfe:	071a      	lsls	r2, r3, #28
 8000d00:	d506      	bpl.n	8000d10 <z_cbvprintf_impl+0x728>
				OUTC('0');
 8000d02:	4659      	mov	r1, fp
 8000d04:	2030      	movs	r0, #48	; 0x30
 8000d06:	9b02      	ldr	r3, [sp, #8]
 8000d08:	4798      	blx	r3
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	dbde      	blt.n	8000ccc <z_cbvprintf_impl+0x6e4>
 8000d0e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000d10:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000d14:	06db      	lsls	r3, r3, #27
 8000d16:	d507      	bpl.n	8000d28 <z_cbvprintf_impl+0x740>
				OUTC(conv->specifier);
 8000d18:	4659      	mov	r1, fp
 8000d1a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000d1e:	9b02      	ldr	r3, [sp, #8]
 8000d20:	4798      	blx	r3
 8000d22:	2800      	cmp	r0, #0
 8000d24:	dbd2      	blt.n	8000ccc <z_cbvprintf_impl+0x6e4>
 8000d26:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000d28:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8000d2a:	442e      	add	r6, r5
 8000d2c:	1b73      	subs	r3, r6, r5
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	dc16      	bgt.n	8000d60 <z_cbvprintf_impl+0x778>
			OUTS(bps, bpe);
 8000d32:	4643      	mov	r3, r8
 8000d34:	4652      	mov	r2, sl
 8000d36:	4659      	mov	r1, fp
 8000d38:	9802      	ldr	r0, [sp, #8]
 8000d3a:	f001 ff27 	bl	8002b8c <outs>
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	dbc4      	blt.n	8000ccc <z_cbvprintf_impl+0x6e4>
 8000d42:	4405      	add	r5, r0
		while (width > 0) {
 8000d44:	44a9      	add	r9, r5
 8000d46:	eba9 0305 	sub.w	r3, r9, r5
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f77f ae78 	ble.w	8000a40 <z_cbvprintf_impl+0x458>
			OUTC(' ');
 8000d50:	4659      	mov	r1, fp
 8000d52:	2020      	movs	r0, #32
 8000d54:	9b02      	ldr	r3, [sp, #8]
 8000d56:	4798      	blx	r3
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	dbb7      	blt.n	8000ccc <z_cbvprintf_impl+0x6e4>
 8000d5c:	3501      	adds	r5, #1
			--width;
 8000d5e:	e7f2      	b.n	8000d46 <z_cbvprintf_impl+0x75e>
				OUTC('0');
 8000d60:	4659      	mov	r1, fp
 8000d62:	2030      	movs	r0, #48	; 0x30
 8000d64:	9b02      	ldr	r3, [sp, #8]
 8000d66:	4798      	blx	r3
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	dbaf      	blt.n	8000ccc <z_cbvprintf_impl+0x6e4>
 8000d6c:	3501      	adds	r5, #1
 8000d6e:	e7dd      	b.n	8000d2c <z_cbvprintf_impl+0x744>
 8000d70:	08003d06 	.word	0x08003d06

08000d74 <stm32h7_init>:
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int stm32h7_init(void)
{
 8000d74:	b5f0      	push	{r4, r5, r6, r7, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000d76:	f04f 0310 	mov.w	r3, #16
 8000d7a:	f3ef 8011 	mrs	r0, BASEPRI
 8000d7e:	f383 8812 	msr	BASEPRI_MAX, r3
 8000d82:	f3bf 8f6f 	isb	sy
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d86:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <stm32h7_init+0xe4>)
 8000d88:	695a      	ldr	r2, [r3, #20]
 8000d8a:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000d8e:	d111      	bne.n	8000db4 <stm32h7_init+0x40>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d94:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d98:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000da0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000daa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000db0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	SCB_EnableICache();

	if (IS_ENABLED(CONFIG_DCACHE)) {
		if (!(SCB->CCR & SCB_CCR_DC_Msk)) {
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <stm32h7_init+0xe4>)
 8000db6:	6953      	ldr	r3, [r2, #20]
 8000db8:	03d9      	lsls	r1, r3, #15
 8000dba:	d427      	bmi.n	8000e0c <stm32h7_init+0x98>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000dbc:	6953      	ldr	r3, [r2, #20]
 8000dbe:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000dc2:	d123      	bne.n	8000e0c <stm32h7_init+0x98>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000dc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc8:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dcc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dd0:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dd4:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dd8:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000ddc:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dde:	ea03 0705 	and.w	r7, r3, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000de2:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000de4:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000de8:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dea:	f8c2 6260 	str.w	r6, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000dee:	d2f9      	bcs.n	8000de4 <stm32h7_init+0x70>
    } while(sets-- != 0U);
 8000df0:	3b20      	subs	r3, #32
 8000df2:	f113 0f20 	cmn.w	r3, #32
 8000df6:	d1f2      	bne.n	8000dde <stm32h7_init+0x6a>
 8000df8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000dfc:	6953      	ldr	r3, [r2, #20]
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e02:	6153      	str	r3, [r2, #20]
 8000e04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e08:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000e0c:	f380 8811 	msr	BASEPRI, r0
 8000e10:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 64 MHz from HSI */
	SystemCoreClock = 64000000;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <stm32h7_init+0xe8>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <stm32h7_init+0xec>)
 8000e18:	601a      	str	r2, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <stm32h7_init+0xf0>)
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	f022 0207 	bic.w	r2, r2, #7
 8000e22:	f042 0202 	orr.w	r2, r2, #2
 8000e26:	60da      	str	r2, [r3, #12]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e2e:	619a      	str	r2, [r3, #24]
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8000e30:	699a      	ldr	r2, [r3, #24]
 8000e32:	0492      	lsls	r2, r2, #18
 8000e34:	d5fc      	bpl.n	8000e30 <stm32h7_init+0xbc>
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <stm32h7_init+0xf4>)
 8000e38:	681a      	ldr	r2, [r3, #0]
	 * 2.2.9: Reading from AXI SRAM may lead to data read corruption
	 * Workaround: Set the READ_ISS_OVERRIDE bit in the AXI_TARG7_FN_MOD
	 * register.
	 * Applicable only to RevY (REV_ID 0x1003)
	 */
	if (LL_DBGMCU_GetRevisionID() == 0x1003) {
 8000e3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8000e3e:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
 8000e42:	d106      	bne.n	8000e52 <stm32h7_init+0xde>
		MODIFY_REG(GPV->AXI_TARG7_FN_MOD, 0x1, 0x1);
 8000e44:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <stm32h7_init+0xf8>)
 8000e46:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	}

	return 0;
}
 8000e52:	2000      	movs	r0, #0
 8000e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	24000034 	.word	0x24000034
 8000e60:	03d09000 	.word	0x03d09000
 8000e64:	58024800 	.word	0x58024800
 8000e68:	5c001000 	.word	0x5c001000
 8000e6c:	51008000 	.word	0x51008000

08000e70 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000e70:	4901      	ldr	r1, [pc, #4]	; (8000e78 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000e72:	2210      	movs	r2, #16
	str	r2, [r1]
 8000e74:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000e76:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000e78:	e000ed10 	.word	0xe000ed10

08000e7c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000e7c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000e7e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000e80:	f380 8811 	msr	BASEPRI, r0
	isb
 8000e84:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 8000e88:	f3bf 8f4f 	dsb	sy
 8000e8c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000e8e:	b662      	cpsie	i
	isb
 8000e90:	f3bf 8f6f 	isb	sy

	bx	lr
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000e98:	b203      	sxth	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db08      	blt.n	8000eb0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f000 001f 	and.w	r0, r0, #31
 8000ea4:	095b      	lsrs	r3, r3, #5
 8000ea6:	fa02 f000 	lsl.w	r0, r2, r0
 8000eaa:	4a02      	ldr	r2, [pc, #8]	; (8000eb4 <arch_irq_enable+0x1c>)
 8000eac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000eb8:	b203      	sxth	r3, r0
		prio += _IRQ_PRIO_OFFSET;
 8000eba:	3101      	adds	r1, #1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000ec2:	b2c9      	uxtb	r1, r1
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	db06      	blt.n	8000ed4 <z_arm_irq_priority_set+0x1c>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000eca:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000ece:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8000ed2:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	f000 000f 	and.w	r0, r0, #15
 8000ed8:	4b01      	ldr	r3, [pc, #4]	; (8000ee0 <z_arm_irq_priority_set+0x28>)
 8000eda:	5419      	strb	r1, [r3, r0]
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed14 	.word	0xe000ed14

08000ee4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000ee4:	bf30      	wfi
    b z_SysNmiOnReset
 8000ee6:	f7ff bffd 	b.w	8000ee4 <z_SysNmiOnReset>
 8000eea:	bf00      	nop

08000eec <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000eec:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8000eee:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000ef0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <z_arm_prep_c+0x44>)
 8000ef6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000efc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8000f00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f04:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000f0c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8000f10:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000f14:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8000f18:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000f1c:	f001 f964 	bl	80021e8 <z_bss_zero>
	z_data_copy();
 8000f20:	f001 fc88 	bl	8002834 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000f24:	f000 fa0c 	bl	8001340 <z_arm_interrupt_init>
	z_cstart();
 8000f28:	f001 f9ba 	bl	80022a0 <z_cstart>
 8000f2c:	08000000 	.word	0x08000000
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000f34:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000f36:	490a      	ldr	r1, [pc, #40]	; (8000f60 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000f38:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000f3a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 8000f3c:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 8000f3e:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000f40:	4908      	ldr	r1, [pc, #32]	; (8000f64 <arch_swap+0x30>)
 8000f42:	684b      	ldr	r3, [r1, #4]
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	604b      	str	r3, [r1, #4]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f383 8811 	msr	BASEPRI, r3
 8000f50:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000f54:	6893      	ldr	r3, [r2, #8]
}
 8000f56:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	240002f0 	.word	0x240002f0
 8000f60:	08003cb4 	.word	0x08003cb4
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000f68:	4912      	ldr	r1, [pc, #72]	; (8000fb4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000f6a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000f6c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8000f70:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000f72:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000f76:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000f7a:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8000f7c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000f80:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000f84:	4f0c      	ldr	r7, [pc, #48]	; (8000fb8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000f86:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000f8a:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
 8000f8c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000f8e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000f90:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8000f92:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000f94:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000f96:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8000f9a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8000f9c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8000f9e:	f000 fa13 	bl	80013c8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8000fa2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000fa6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8000faa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000fae:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8000fb2:	4770      	bx	lr
    ldr r1, =_kernel
 8000fb4:	240002f0 	.word	0x240002f0
    ldr v4, =_SCS_ICSR
 8000fb8:	e000ed04 	.word	0xe000ed04

08000fbc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8000fbc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000fc0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000fc2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000fc6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000fca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000fcc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000fd0:	2902      	cmp	r1, #2
    beq _oops
 8000fd2:	d0ff      	beq.n	8000fd4 <_oops>

08000fd4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000fd4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8000fd6:	f001 fdf4 	bl	8002bc2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8000fda:	bd01      	pop	{r0, pc}

08000fdc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000fdc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000fe0:	3a20      	subs	r2, #32
	iframe->a2 = (uint32_t)p1;
 8000fe2:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <arch_new_thread+0x28>)
	iframe->a2 = (uint32_t)p1;
 8000fe6:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
 8000fe8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 8000fea:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 8000fee:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
 8000ff0:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 8000ff2:	6191      	str	r1, [r2, #24]
	iframe->a4 = (uint32_t)p3;
 8000ff4:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000ff6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ffa:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000ffc:	2300      	movs	r3, #0
	thread->callee_saved.psp = (uint32_t)iframe;
 8000ffe:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8001000:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001002:	4770      	bx	lr
 8001004:	08002aed 	.word	0x08002aed

08001008 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8001008:	4a09      	ldr	r2, [pc, #36]	; (8001030 <z_check_thread_stack_fail+0x28>)
{
 800100a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 800100c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 800100e:	b170      	cbz	r0, 800102e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8001010:	f113 0f16 	cmn.w	r3, #22
 8001014:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001016:	d005      	beq.n	8001024 <z_check_thread_stack_fail+0x1c>
 8001018:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 800101c:	429a      	cmp	r2, r3
 800101e:	d805      	bhi.n	800102c <z_check_thread_stack_fail+0x24>
 8001020:	4283      	cmp	r3, r0
 8001022:	d203      	bcs.n	800102c <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8001024:	4281      	cmp	r1, r0
 8001026:	bf28      	it	cs
 8001028:	2000      	movcs	r0, #0
 800102a:	4770      	bx	lr
 800102c:	2000      	movs	r0, #0
}
 800102e:	4770      	bx	lr
 8001030:	240002f0 	.word	0x240002f0

08001034 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8001034:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <arch_switch_to_main_thread+0x28>)
{
 8001038:	460d      	mov	r5, r1
 800103a:	4614      	mov	r4, r2
	_current = main_thread;
 800103c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800103e:	f000 f9c3 	bl	80013c8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8001042:	4620      	mov	r0, r4
 8001044:	f385 8809 	msr	PSP, r5
 8001048:	2100      	movs	r1, #0
 800104a:	b663      	cpsie	if
 800104c:	f381 8811 	msr	BASEPRI, r1
 8001050:	f3bf 8f6f 	isb	sy
 8001054:	2200      	movs	r2, #0
 8001056:	2300      	movs	r3, #0
 8001058:	f001 fd48 	bl	8002aec <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 800105c:	240002f0 	.word	0x240002f0

08001060 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001060:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8001062:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001066:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 800106a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800106e:	4904      	ldr	r1, [pc, #16]	; (8001080 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001070:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001072:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001074:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001076:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 800107a:	4902      	ldr	r1, [pc, #8]	; (8001084 <_isr_wrapper+0x24>)
	bx r1
 800107c:	4708      	bx	r1
 800107e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001080:	0800355c 	.word	0x0800355c
	ldr r1, =z_arm_int_exit
 8001084:	08001089 	.word	0x08001089

08001088 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800108a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 800108c:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
 800108e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001090:	d003      	beq.n	800109a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001092:	4903      	ldr	r1, [pc, #12]	; (80010a0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001098:	600a      	str	r2, [r1, #0]

0800109a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800109a:	4770      	bx	lr
	ldr r3, =_kernel
 800109c:	240002f0 	.word	0x240002f0
	ldr r1, =_SCS_ICSR
 80010a0:	e000ed04 	.word	0xe000ed04

080010a4 <mem_manage_fault>:
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <mem_manage_fault+0x9c>)
{
 80010a6:	b570      	push	{r4, r5, r6, lr}
 80010a8:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80010aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 80010ac:	4606      	mov	r6, r0
		reason = K_ERR_ARM_MEM_STACKING;
 80010ae:	f012 0f10 	tst.w	r2, #16
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80010b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_STACKING;
 80010b4:	bf14      	ite	ne
 80010b6:	2411      	movne	r4, #17
 80010b8:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
 80010ba:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80010be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
 80010c0:	bf18      	it	ne
 80010c2:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80010c4:	0792      	lsls	r2, r2, #30
 80010c6:	d50a      	bpl.n	80010de <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 80010c8:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80010ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010cc:	0614      	lsls	r4, r2, #24
 80010ce:	d534      	bpl.n	800113a <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 80010d0:	b119      	cbz	r1, 80010da <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80010d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 80010da:	2413      	movs	r4, #19
 80010dc:	e001      	b.n	80010e2 <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
 80010de:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <mem_manage_fault+0x9c>)
 80010e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 80010e6:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80010ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 80010ec:	bf18      	it	ne
 80010ee:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 80010f0:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80010f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 80010f6:	bf18      	it	ne
 80010f8:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80010fa:	06d2      	lsls	r2, r2, #27
 80010fc:	d402      	bmi.n	8001104 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001100:	079b      	lsls	r3, r3, #30
 8001102:	d50a      	bpl.n	800111a <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <mem_manage_fault+0x9c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	0519      	lsls	r1, r3, #20
 800110a:	d506      	bpl.n	800111a <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 800110c:	4631      	mov	r1, r6
 800110e:	f7ff ff7b 	bl	8001008 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
 8001112:	b110      	cbz	r0, 800111a <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001114:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
 8001118:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <mem_manage_fault+0x9c>)
 800111c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800111e:	0692      	lsls	r2, r2, #26
 8001120:	d503      	bpl.n	800112a <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8001122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001124:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800112a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
 800112c:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800112e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001134:	2300      	movs	r3, #0
 8001136:	702b      	strb	r3, [r5, #0]
}
 8001138:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 800113a:	f06f 0015 	mvn.w	r0, #21
 800113e:	e7cc      	b.n	80010da <mem_manage_fault+0x36>
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <usage_fault.constprop.0+0x50>)
 8001146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_DIV_0;
 8001148:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800114c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_DIV_0;
 800114e:	bf14      	ite	ne
 8001150:	201e      	movne	r0, #30
 8001152:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8001154:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8001158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 800115a:	bf18      	it	ne
 800115c:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 800115e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8001164:	bf18      	it	ne
 8001166:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8001168:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800116c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 800116e:	bf18      	it	ne
 8001170:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8001172:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8001178:	bf18      	it	ne
 800117a:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 800117c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001182:	ea6f 4202 	mvn.w	r2, r2, lsl #16

	return reason;
}
 8001186:	bf18      	it	ne
 8001188:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800118a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <bus_fault.constprop.0+0x64>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800119a:	4602      	mov	r2, r0
 800119c:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800119e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80011a0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_STACKING;
 80011a2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80011a6:	bf14      	ite	ne
 80011a8:	2017      	movne	r0, #23
 80011aa:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
 80011ac:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80011b0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
 80011b2:	bf18      	it	ne
 80011b4:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80011b6:	05a4      	lsls	r4, r4, #22
 80011b8:	d509      	bpl.n	80011ce <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
 80011ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80011bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011be:	0400      	lsls	r0, r0, #16
 80011c0:	d504      	bpl.n	80011cc <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 80011c2:	b11a      	cbz	r2, 80011cc <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80011c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 80011cc:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <bus_fault.constprop.0+0x64>)
 80011d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 80011d2:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80011d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 80011d8:	bf18      	it	ne
 80011da:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80011dc:	05d2      	lsls	r2, r2, #23
 80011de:	d40b      	bmi.n	80011f8 <bus_fault.constprop.0+0x60>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80011e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
 80011e2:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80011e6:	bf18      	it	ne
 80011e8:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80011ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ec:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80011f2:	2300      	movs	r3, #0
 80011f4:	700b      	strb	r3, [r1, #0]
}
 80011f6:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 80011f8:	201b      	movs	r0, #27
 80011fa:	e7f6      	b.n	80011ea <bus_fault.constprop.0+0x52>
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <z_arm_fault>:
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <z_arm_fault+0x118>)
{
 8001202:	b570      	push	{r4, r5, r6, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001204:	685b      	ldr	r3, [r3, #4]
{
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	460d      	mov	r5, r1
 800120a:	2600      	movs	r6, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800120c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001210:	f386 8811 	msr	BASEPRI, r6
 8001214:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001218:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 800121c:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8001220:	d111      	bne.n	8001246 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8001222:	f002 010c 	and.w	r1, r2, #12
 8001226:	2908      	cmp	r1, #8
 8001228:	d00d      	beq.n	8001246 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 800122a:	0714      	lsls	r4, r2, #28
 800122c:	d401      	bmi.n	8001232 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 800122e:	4605      	mov	r5, r0
			*nested_exc = true;
 8001230:	2601      	movs	r6, #1
	*recoverable = false;
 8001232:	2200      	movs	r2, #0
	switch (fault) {
 8001234:	3b03      	subs	r3, #3
	*recoverable = false;
 8001236:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 800123a:	2b03      	cmp	r3, #3
 800123c:	d809      	bhi.n	8001252 <z_arm_fault+0x52>
 800123e:	e8df f003 	tbb	[pc, r3]
 8001242:	5d04      	.short	0x5d04
 8001244:	5a61      	.short	0x5a61
		return NULL;
 8001246:	4635      	mov	r5, r6
 8001248:	e7f3      	b.n	8001232 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800124a:	4b33      	ldr	r3, [pc, #204]	; (8001318 <z_arm_fault+0x118>)
 800124c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124e:	0791      	lsls	r1, r2, #30
 8001250:	d501      	bpl.n	8001256 <z_arm_fault+0x56>
	switch (fault) {
 8001252:	2400      	movs	r4, #0
 8001254:	e028      	b.n	80012a8 <z_arm_fault+0xa8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8001256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001258:	2a00      	cmp	r2, #0
 800125a:	dbfa      	blt.n	8001252 <z_arm_fault+0x52>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800125c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125e:	0052      	lsls	r2, r2, #1
 8001260:	d5f7      	bpl.n	8001252 <z_arm_fault+0x52>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8001262:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8001264:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8001266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800126a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800126c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001270:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8001274:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8001276:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 800127a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800127e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001280:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001284:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001288:	f64d 7202 	movw	r2, #57090	; 0xdf02
 800128c:	4291      	cmp	r1, r2
 800128e:	d00a      	beq.n	80012a6 <z_arm_fault+0xa6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 8001290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	b302      	cbz	r2, 80012d8 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001296:	f10d 0207 	add.w	r2, sp, #7
 800129a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800129c:	4628      	mov	r0, r5
 800129e:	f7ff ff01 	bl	80010a4 <mem_manage_fault>
		reason = usage_fault(esf);
 80012a2:	4604      	mov	r4, r0
		break;
 80012a4:	e000      	b.n	80012a8 <z_arm_fault+0xa8>
			reason = esf->basic.r0;
 80012a6:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80012a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012ac:	b993      	cbnz	r3, 80012d4 <z_arm_fault+0xd4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80012ae:	2220      	movs	r2, #32
 80012b0:	4629      	mov	r1, r5
 80012b2:	a802      	add	r0, sp, #8
 80012b4:	f001 fc9b 	bl	8002bee <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80012b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012ba:	b33e      	cbz	r6, 800130c <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80012bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80012c0:	b922      	cbnz	r2, 80012cc <z_arm_fault+0xcc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80012c2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80012c6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80012ca:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 80012cc:	a902      	add	r1, sp, #8
 80012ce:	4620      	mov	r0, r4
 80012d0:	f001 fc75 	bl	8002bbe <z_arm_fatal_error>
}
 80012d4:	b00a      	add	sp, #40	; 0x28
 80012d6:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 80012d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012da:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 80012de:	d005      	beq.n	80012ec <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
 80012e0:	f10d 0107 	add.w	r1, sp, #7
 80012e4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80012e6:	f7ff ff57 	bl	8001198 <bus_fault.constprop.0>
 80012ea:	e7da      	b.n	80012a2 <z_arm_fault+0xa2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0ad      	beq.n	8001252 <z_arm_fault+0x52>
		reason = usage_fault(esf);
 80012f6:	f7ff ff25 	bl	8001144 <usage_fault.constprop.0>
 80012fa:	e7d2      	b.n	80012a2 <z_arm_fault+0xa2>
		reason = mem_manage_fault(esf, 0, recoverable);
 80012fc:	f10d 0207 	add.w	r2, sp, #7
 8001300:	2100      	movs	r1, #0
 8001302:	e7cb      	b.n	800129c <z_arm_fault+0x9c>
		reason = bus_fault(esf, 0, recoverable);
 8001304:	f10d 0107 	add.w	r1, sp, #7
 8001308:	2000      	movs	r0, #0
 800130a:	e7ec      	b.n	80012e6 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800130c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	e7d9      	b.n	80012ca <z_arm_fault+0xca>
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800131c:	4a02      	ldr	r2, [pc, #8]	; (8001328 <z_arm_fault_init+0xc>)
 800131e:	6953      	ldr	r3, [r2, #20]
 8001320:	f043 0310 	orr.w	r3, r3, #16
 8001324:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 800132c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001330:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001334:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8001336:	4672      	mov	r2, lr
	bl z_arm_fault
 8001338:	f7ff ff62 	bl	8001200 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 800133c:	bd01      	pop	{r0, pc}
 800133e:	bf00      	nop

08001340 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001340:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <z_arm_interrupt_init+0x14>)
 8001344:	2110      	movs	r1, #16
 8001346:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8001348:	3301      	adds	r3, #1
 800134a:	2b96      	cmp	r3, #150	; 0x96
 800134c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8001350:	d1f9      	bne.n	8001346 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100

08001358 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001358:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800135a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800135e:	4808      	ldr	r0, [pc, #32]	; (8001380 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8001360:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 8001364:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001366:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800136a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800136e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001370:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8001372:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8001376:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800137a:	f7ff fdb7 	bl	8000eec <z_arm_prep_c>
 800137e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001380:	24000900 	.word	0x24000900

08001384 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <z_impl_k_thread_abort+0x24>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4283      	cmp	r3, r0
 800138a:	d10b      	bne.n	80013a4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800138c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8001390:	b143      	cbz	r3, 80013a4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <z_impl_k_thread_abort+0x28>)
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800139a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 800139c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 80013a4:	f001 b9e6 	b.w	8002774 <z_thread_abort>
 80013a8:	240002f0 	.word	0x240002f0
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <z_arm_configure_static_mpu_regions+0xc>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	4a02      	ldr	r2, [pc, #8]	; (80013c0 <z_arm_configure_static_mpu_regions+0x10>)
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <z_arm_configure_static_mpu_regions+0x14>)
 80013b8:	f000 b86e 	b.w	8001498 <arm_core_mpu_configure_static_mpu_regions>
 80013bc:	24080000 	.word	0x24080000
 80013c0:	24000000 	.word	0x24000000
 80013c4:	08003b0c 	.word	0x08003b0c

080013c8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80013c8:	6e42      	ldr	r2, [r0, #100]	; 0x64
	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80013ca:	2140      	movs	r1, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 80013ce:	3a40      	subs	r2, #64	; 0x40

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80013d0:	4618      	mov	r0, r3
	dynamic_regions[region_num].start = guard_start;
 80013d2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 80013d6:	e9c3 1201 	strd	r1, r2, [r3, #4]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80013da:	2101      	movs	r1, #1
 80013dc:	f000 b866 	b.w	80014ac <arm_core_mpu_configure_dynamic_mpu_regions>
 80013e0:	240001a0 	.word	0x240001a0
 80013e4:	150b0000 	.word	0x150b0000

080013e8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80013ea:	2600      	movs	r6, #0
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 80013ec:	4f1e      	ldr	r7, [pc, #120]	; (8001468 <mpu_configure_regions+0x80>)
 80013ee:	428e      	cmp	r6, r1
 80013f0:	db01      	blt.n	80013f6 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80013f2:	4610      	mov	r0, r2
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 80013f6:	6844      	ldr	r4, [r0, #4]
 80013f8:	b39c      	cbz	r4, 8001462 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
 80013fa:	b153      	cbz	r3, 8001412 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80013fc:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8001400:	ea14 0f0c 	tst.w	r4, ip
 8001404:	d118      	bne.n	8001438 <mpu_configure_regions+0x50>
		&&
 8001406:	2c1f      	cmp	r4, #31
 8001408:	d916      	bls.n	8001438 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 800140a:	6805      	ldr	r5, [r0, #0]
		&&
 800140c:	ea1c 0f05 	tst.w	ip, r5
 8001410:	d112      	bne.n	8001438 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8001412:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8001414:	b2d2      	uxtb	r2, r2
	region_conf.base = new_region->start;
 8001416:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8001418:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if (size <= 32U) {
 800141c:	d90f      	bls.n	800143e <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
 800141e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8001422:	d80e      	bhi.n	8001442 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8001424:	3c01      	subs	r4, #1
 8001426:	fab4 f484 	clz	r4, r4
 800142a:	f1c4 041f 	rsb	r4, r4, #31
 800142e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8001430:	2a0f      	cmp	r2, #15
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8001432:	ea4c 0404 	orr.w	r4, ip, r4
 8001436:	d906      	bls.n	8001446 <mpu_configure_regions+0x5e>
			return -EINVAL;
 8001438:	f06f 0215 	mvn.w	r2, #21
 800143c:	e7d9      	b.n	80013f2 <mpu_configure_regions+0xa>
		return REGION_32B;
 800143e:	2408      	movs	r4, #8
 8001440:	e7f6      	b.n	8001430 <mpu_configure_regions+0x48>
		return REGION_4G;
 8001442:	243e      	movs	r4, #62	; 0x3e
 8001444:	e7f4      	b.n	8001430 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001446:	f025 051f 	bic.w	r5, r5, #31
 800144a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800144e:	f044 0401 	orr.w	r4, r4, #1
				| MPU_RBAR_VALID_Msk | index;
 8001452:	4315      	orrs	r5, r2
		reg_index++;
 8001454:	3201      	adds	r2, #1
 8001456:	f045 0510 	orr.w	r5, r5, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800145a:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800145e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8001462:	3601      	adds	r6, #1
 8001464:	300c      	adds	r0, #12
 8001466:	e7c2      	b.n	80013ee <mpu_configure_regions+0x6>
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <arm_core_mpu_enable+0x14>)
 800146e:	2205      	movs	r2, #5
 8001470:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8001474:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001478:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001484:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <arm_core_mpu_disable+0x10>)
 800148a:	2200      	movs	r2, #0
 800148c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8001498:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 800149a:	4c03      	ldr	r4, [pc, #12]	; (80014a8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 800149c:	2301      	movs	r3, #1
 800149e:	7822      	ldrb	r2, [r4, #0]
 80014a0:	f7ff ffa2 	bl	80013e8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80014a4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 80014a6:	bd10      	pop	{r4, pc}
 80014a8:	24000320 	.word	0x24000320

080014ac <arm_core_mpu_configure_dynamic_mpu_regions>:

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 80014ae:	b508      	push	{r3, lr}
 80014b0:	2300      	movs	r3, #0
 80014b2:	7812      	ldrb	r2, [r2, #0]
 80014b4:	f7ff ff98 	bl	80013e8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80014b8:	f110 0f16 	cmn.w	r0, #22
 80014bc:	d002      	beq.n	80014c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80014be:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80014c0:	280f      	cmp	r0, #15
 80014c2:	dd00      	ble.n	80014c6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 80014c4:	bd08      	pop	{r3, pc}
 80014c6:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
 80014ca:	3001      	adds	r0, #1
  MPU->RASR = 0U;
 80014cc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80014d0:	e7f6      	b.n	80014c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 80014d2:	bf00      	nop
 80014d4:	24000320 	.word	0x24000320
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80014dc:	4914      	ldr	r1, [pc, #80]	; (8001530 <z_arm_mpu_init+0x54>)
 80014de:	6808      	ldr	r0, [r1, #0]
 80014e0:	2810      	cmp	r0, #16
{
 80014e2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80014e4:	d821      	bhi.n	800152a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80014e6:	f7ff ffcd 	bl	8001484 <arm_core_mpu_disable>
 80014ea:	4c12      	ldr	r4, [pc, #72]	; (8001534 <z_arm_mpu_init+0x58>)
 80014ec:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80014ee:	2200      	movs	r2, #0
 80014f0:	4290      	cmp	r0, r2
 80014f2:	f101 010c 	add.w	r1, r1, #12
 80014f6:	d105      	bne.n	8001504 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <z_arm_mpu_init+0x5c>)
 80014fa:	7018      	strb	r0, [r3, #0]
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80014fc:	2000      	movs	r0, #0
	arm_core_mpu_enable();
 80014fe:	f7ff ffb5 	bl	800146c <arm_core_mpu_enable>
}
 8001502:	bd10      	pop	{r4, pc}
 8001504:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001508:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 800150c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8001510:	4313      	orrs	r3, r2
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8001512:	3201      	adds	r2, #1
 8001514:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001518:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800151c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8001528:	e7e2      	b.n	80014f0 <z_arm_mpu_init+0x14>
		return -1;
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
 800152e:	e7e8      	b.n	8001502 <z_arm_mpu_init+0x26>
 8001530:	08003ac8 	.word	0x08003ac8
 8001534:	e000ed00 	.word	0xe000ed00
 8001538:	24000320 	.word	0x24000320

0800153c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 800153c:	4b01      	ldr	r3, [pc, #4]	; (8001544 <__stdout_hook_install+0x8>)
 800153e:	6018      	str	r0, [r3, #0]
}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	24000004 	.word	0x24000004

08001548 <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param *exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 8001548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800154c:	4605      	mov	r5, r0
 800154e:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 8001550:	f04f 0801 	mov.w	r8, #1
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1U : 0U);
 8001554:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
		if (stm32_exti_is_pending(line) != 0) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8001558:	4f0e      	ldr	r7, [pc, #56]	; (8001594 <stm32_exti_isr+0x4c>)
		line = range->start + i;
 800155a:	782b      	ldrb	r3, [r5, #0]
 800155c:	fa53 f084 	uxtab	r0, r3, r4
	if (line < 32) {
 8001560:	281f      	cmp	r0, #31
 8001562:	dc0f      	bgt.n	8001584 <stm32_exti_isr+0x3c>
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 8001564:	fa08 f300 	lsl.w	r3, r8, r0
 8001568:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
		if (stm32_exti_is_pending(line) != 0) {
 800156c:	ea33 0202 	bics.w	r2, r3, r2
 8001570:	d108      	bne.n	8001584 <stm32_exti_isr+0x3c>
  *         @arg @ref LL_EXTI_LINE_21
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001572:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
			if (!data->cb[line].cb) {
 8001576:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 800157a:	b11b      	cbz	r3, 8001584 <stm32_exti_isr+0x3c>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800157c:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 8001580:	6851      	ldr	r1, [r2, #4]
 8001582:	4798      	blx	r3
	for (uint8_t i = 0; i <= range->len; i++) {
 8001584:	3401      	adds	r4, #1
 8001586:	786a      	ldrb	r2, [r5, #1]
 8001588:	b2e3      	uxtb	r3, r4
 800158a:	429a      	cmp	r2, r3
 800158c:	d2e5      	bcs.n	800155a <stm32_exti_isr+0x12>
		}
	}
}
 800158e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001592:	bf00      	nop
 8001594:	240001ac 	.word	0x240001ac

08001598 <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <stm32_fill_irq_table+0x14>)
 800159a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800159e:	2300      	movs	r3, #0
 80015a0:	3301      	adds	r3, #1
		exti_irq_table[start + i] = irqn;
 80015a2:	f820 2b02 	strh.w	r2, [r0], #2
	for (int i = 0; i < len; i++) {
 80015a6:	4299      	cmp	r1, r3
 80015a8:	dcfa      	bgt.n	80015a0 <stm32_fill_irq_table+0x8>
	}
}
 80015aa:	4770      	bx	lr
 80015ac:	24000040 	.word	0x24000040

080015b0 <stm32_exti_enable>:
	irqnum = exti_irq_table[line];
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <stm32_exti_enable+0x24>)
{
 80015b2:	4602      	mov	r2, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 80015b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015b8:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 80015ba:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
	LL_EXTI_EnableIT_0_31(BIT((uint32_t)line));
 80015be:	2301      	movs	r3, #1
 80015c0:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 80015c4:	4093      	lsls	r3, r2
 80015c6:	4323      	orrs	r3, r4
 80015c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80015cc:	bc10      	pop	{r4}
	irq_enable(irqnum);
 80015ce:	f7ff bc63 	b.w	8000e98 <arch_irq_enable>
 80015d2:	bf00      	nop
 80015d4:	24000040 	.word	0x24000040

080015d8 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if ((data->cb[line].cb == cb) && (data->cb[line].data == arg)) {
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <stm32_exti_set_callback+0x30>)
{
 80015da:	b530      	push	{r4, r5, lr}
 80015dc:	4604      	mov	r4, r0
	if ((data->cb[line].cb == cb) && (data->cb[line].data == arg)) {
 80015de:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80015e2:	4288      	cmp	r0, r1
 80015e4:	d104      	bne.n	80015f0 <stm32_exti_set_callback+0x18>
 80015e6:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80015ea:	686d      	ldr	r5, [r5, #4]
 80015ec:	4295      	cmp	r5, r2
 80015ee:	d006      	beq.n	80015fe <stm32_exti_set_callback+0x26>
		return 0;
	}

	/* if callback already exists/maybe-running return busy */
	if (data->cb[line].cb != NULL) {
 80015f0:	b938      	cbnz	r0, 8001602 <stm32_exti_set_callback+0x2a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80015f2:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 80015f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80015fa:	605a      	str	r2, [r3, #4]

	return 0;
}
 80015fc:	bd30      	pop	{r4, r5, pc}
		return 0;
 80015fe:	2000      	movs	r0, #0
 8001600:	e7fc      	b.n	80015fc <stm32_exti_set_callback+0x24>
		return -EBUSY;
 8001602:	f06f 000f 	mvn.w	r0, #15
 8001606:	e7f9      	b.n	80015fc <stm32_exti_set_callback+0x24>
 8001608:	240001ac 	.word	0x240001ac

0800160c <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <stm32_exti_unset_callback+0x10>)
 800160e:	2200      	movs	r2, #0
 8001610:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8001614:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001618:	605a      	str	r2, [r3, #4]
}
 800161a:	4770      	bx	lr
 800161c:	240001ac 	.word	0x240001ac

08001620 <get_pllsrc_frequency>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <get_pllsrc_frequency+0x14>)
		return STM32_HSE_FREQ;
	case LL_RCC_PLLSOURCE_NONE:
	default:
		return 0;
	}
}
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <get_pllsrc_frequency+0x18>)
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	f003 0303 	and.w	r3, r3, #3
		return STM32_HSE_FREQ;
 800162a:	2b02      	cmp	r3, #2
}
 800162c:	bf18      	it	ne
 800162e:	2000      	movne	r0, #0
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	58024400 	.word	0x58024400
 8001638:	007a1200 	.word	0x007a1200

0800163c <stm32_clock_control_configure>:
}

static inline int stm32_clock_control_configure(const struct device *dev,
						clock_control_subsys_t sub_system,
						void *data)
{
 800163c:	b530      	push	{r4, r5, lr}
	int err;

	ARG_UNUSED(dev);
	ARG_UNUSED(data);

	err = enabled_clock(pclken->bus);
 800163e:	680b      	ldr	r3, [r1, #0]
	    ((src_clk == STM32_SRC_LSI) && IS_ENABLED(STM32_LSI_ENABLED)) ||
 8001640:	2b10      	cmp	r3, #16
 8001642:	d824      	bhi.n	800168e <stm32_clock_control_configure+0x52>
 8001644:	4813      	ldr	r0, [pc, #76]	; (8001694 <stm32_clock_control_configure+0x58>)
 8001646:	40d8      	lsrs	r0, r3
 8001648:	43c0      	mvns	r0, r0
 800164a:	f010 0001 	ands.w	r0, r0, #1
 800164e:	d11e      	bne.n	800168e <stm32_clock_control_configure+0x52>
		return err;
	}

	z_stm32_hsem_lock(CFG_HW_RCC_SEMID, HSEM_LOCK_DEFAULT_RETRY);

	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8001650:	684a      	ldr	r2, [r1, #4]
 8001652:	b2d3      	uxtb	r3, r2
		       STM32_CLOCK_MASK_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8001654:	f3c2 3542 	ubfx	r5, r2, #13, #3
 8001658:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 800165c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8001660:	fa05 f202 	lsl.w	r2, r5, r2
 8001664:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	*(volatile uint32_t *)addr = temp | mask;
}

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;
 8001668:	681c      	ldr	r4, [r3, #0]

	*(volatile uint32_t *)addr = temp & ~mask;
 800166a:	ea24 0202 	bic.w	r2, r4, r2
 800166e:	601a      	str	r2, [r3, #0]
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8001670:	6849      	ldr	r1, [r1, #4]
 8001672:	b2cb      	uxtb	r3, r1
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8001674:	f3c1 4202 	ubfx	r2, r1, #16, #3
 8001678:	f3c1 2104 	ubfx	r1, r1, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 800167c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8001680:	408a      	lsls	r2, r1
 8001682:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 8001686:	681c      	ldr	r4, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 8001688:	4322      	orrs	r2, r4
 800168a:	601a      	str	r2, [r3, #0]

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	return 0;
}
 800168c:	bd30      	pop	{r4, r5, pc}
	return -ENOTSUP;
 800168e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001692:	e7fb      	b.n	800168c <stm32_clock_control_configure+0x50>
 8001694:	0001340e 	.word	0x0001340e

08001698 <get_hclk_frequency>:
{
 8001698:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <get_hclk_frequency+0x24>)
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	f002 0238 	and.w	r2, r2, #56	; 0x38
	switch (LL_RCC_GetSysClkSource()) {
 80016a2:	2a10      	cmp	r2, #16
 80016a4:	d006      	beq.n	80016b4 <get_hclk_frequency+0x1c>
 80016a6:	2a18      	cmp	r2, #24
 80016a8:	d106      	bne.n	80016b8 <get_hclk_frequency+0x20>
		sysclk = get_pllout_frequency(get_pllsrc_frequency(),
 80016aa:	f7ff ffb9 	bl	8001620 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 80016ae:	4350      	muls	r0, r2
 80016b0:	0840      	lsrs	r0, r0, #1
}
 80016b2:	bd08      	pop	{r3, pc}
	switch (LL_RCC_GetSysClkSource()) {
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <get_hclk_frequency+0x28>)
 80016b6:	e7fc      	b.n	80016b2 <get_hclk_frequency+0x1a>
	uint32_t sysclk = 0;
 80016b8:	2000      	movs	r0, #0
	return get_bus_clock(sysclk, STM32_HPRE);
 80016ba:	e7fa      	b.n	80016b2 <get_hclk_frequency+0x1a>
 80016bc:	58024400 	.word	0x58024400
 80016c0:	007a1200 	.word	0x007a1200

080016c4 <stm32_clock_control_get_subsys_rate>:
	uint32_t apb3_clock = get_bus_clock(ahb_clock, STM32_D1PPRE);
	uint32_t apb4_clock = get_bus_clock(ahb_clock, STM32_D3PPRE);

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80016c4:	680b      	ldr	r3, [r1, #0]
 80016c6:	2b10      	cmp	r3, #16
{
 80016c8:	b510      	push	{r4, lr}
 80016ca:	4614      	mov	r4, r2
	switch (pclken->bus) {
 80016cc:	d82a      	bhi.n	8001724 <stm32_clock_control_get_subsys_rate+0x60>
 80016ce:	b913      	cbnz	r3, 80016d6 <stm32_clock_control_get_subsys_rate+0x12>
 80016d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80016d4:	e03e      	b.n	8001754 <stm32_clock_control_get_subsys_rate+0x90>
 80016d6:	3b01      	subs	r3, #1
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d8f9      	bhi.n	80016d0 <stm32_clock_control_get_subsys_rate+0xc>
 80016dc:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <stm32_clock_control_get_subsys_rate+0x20>)
 80016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	08001761 	.word	0x08001761
 80016e8:	0800176d 	.word	0x0800176d
 80016ec:	08001761 	.word	0x08001761
 80016f0:	080016d1 	.word	0x080016d1
 80016f4:	080016d1 	.word	0x080016d1
 80016f8:	080016d1 	.word	0x080016d1
 80016fc:	080016d1 	.word	0x080016d1
 8001700:	080016d1 	.word	0x080016d1
 8001704:	080016d1 	.word	0x080016d1
 8001708:	0800174d 	.word	0x0800174d
 800170c:	08001751 	.word	0x08001751
 8001710:	08001757 	.word	0x08001757
 8001714:	0800175d 	.word	0x0800175d
 8001718:	080016d1 	.word	0x080016d1
 800171c:	080016d1 	.word	0x080016d1
 8001720:	08001745 	.word	0x08001745
 8001724:	2bd4      	cmp	r3, #212	; 0xd4
 8001726:	d008      	beq.n	800173a <stm32_clock_control_get_subsys_rate+0x76>
 8001728:	3bd8      	subs	r3, #216	; 0xd8
 800172a:	2b1c      	cmp	r3, #28
 800172c:	d8d0      	bhi.n	80016d0 <stm32_clock_control_get_subsys_rate+0xc>
 800172e:	2201      	movs	r2, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	f013 3f11 	tst.w	r3, #286331153	; 0x11111111
 8001738:	d0ca      	beq.n	80016d0 <stm32_clock_control_get_subsys_rate+0xc>
	uint32_t ahb_clock = get_bus_clock(SystemCoreClock, STM32_HPRE);
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <stm32_clock_control_get_subsys_rate+0xb4>)
 800173c:	681b      	ldr	r3, [r3, #0]
		*rate = STM32_LSI_FREQ;
		break;
#endif /* STM32_LSI_ENABLED */
#if defined(STM32_HSI48_ENABLED)
	case STM32_SRC_HSI48:
		*rate = STM32_HSI48_FREQ;
 800173e:	6023      	str	r3, [r4, #0]
#endif /* STM32_PLL3_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 8001740:	2000      	movs	r0, #0
		break;
 8001742:	e007      	b.n	8001754 <stm32_clock_control_get_subsys_rate+0x90>
		*rate = get_hclk_frequency();
 8001744:	f7ff ffa8 	bl	8001698 <get_hclk_frequency>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 8001748:	6020      	str	r0, [r4, #0]
 800174a:	e7f9      	b.n	8001740 <stm32_clock_control_get_subsys_rate+0x7c>
		*rate = STM32_HSE_FREQ;
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <stm32_clock_control_get_subsys_rate+0xb8>)
 800174e:	e7f6      	b.n	800173e <stm32_clock_control_get_subsys_rate+0x7a>
		*rate = STM32_LSE_FREQ;
 8001750:	2000      	movs	r0, #0
 8001752:	6020      	str	r0, [r4, #0]
}
 8001754:	bd10      	pop	{r4, pc}
		*rate = STM32_LSI_FREQ;
 8001756:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800175a:	e7f0      	b.n	800173e <stm32_clock_control_get_subsys_rate+0x7a>
		*rate = STM32_HSI48_FREQ;
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <stm32_clock_control_get_subsys_rate+0xbc>)
 800175e:	e7ee      	b.n	800173e <stm32_clock_control_get_subsys_rate+0x7a>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 8001760:	f7ff ff5e 	bl	8001620 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8001764:	2318      	movs	r3, #24
 8001766:	4358      	muls	r0, r3
 8001768:	0840      	lsrs	r0, r0, #1
 800176a:	e7ed      	b.n	8001748 <stm32_clock_control_get_subsys_rate+0x84>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 800176c:	f7ff ff58 	bl	8001620 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8001770:	2318      	movs	r3, #24
 8001772:	4358      	muls	r0, r3
 8001774:	0880      	lsrs	r0, r0, #2
 8001776:	e7e7      	b.n	8001748 <stm32_clock_control_get_subsys_rate+0x84>
 8001778:	24000034 	.word	0x24000034
 800177c:	007a1200 	.word	0x007a1200
 8001780:	02dc6c00 	.word	0x02dc6c00

08001784 <stm32_clock_control_init>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8001784:	4b71      	ldr	r3, [pc, #452]	; (800194c <stm32_clock_control_init+0x1c8>)
	return 0;
}

#if defined(CONFIG_CPU_CORTEX_M7)
static int stm32_clock_control_init(const struct device *dev)
{
 8001786:	b513      	push	{r0, r1, r4, lr}
 8001788:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800178c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001790:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8001794:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001798:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800179c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800179e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017a6:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017ae:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	0394      	lsls	r4, r2, #14
 80017b4:	d5fc      	bpl.n	80017b0 <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80017b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	675a      	str	r2, [r3, #116]	; 0x74
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <stm32_clock_control_init+0x1c8>)
 80017c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80017c2:	0790      	lsls	r0, r2, #30
 80017c4:	d5fc      	bpl.n	80017c0 <stm32_clock_control_init+0x3c>
  SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017cc:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == (RCC_CR_HSI48RDY)) ? 1UL : 0UL);
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	0491      	lsls	r1, r2, #18
 80017d2:	d5fc      	bpl.n	80017ce <stm32_clock_control_init+0x4a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	f002 0238 	and.w	r2, r2, #56	; 0x38
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 80017da:	2a18      	cmp	r2, #24
 80017dc:	d117      	bne.n	800180e <stm32_clock_control_init+0x8a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	0752      	lsls	r2, r2, #29
 80017e2:	d407      	bmi.n	80017f4 <stm32_clock_control_init+0x70>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80017ec:	4a57      	ldr	r2, [pc, #348]	; (800194c <stm32_clock_control_init+0x1c8>)
 80017ee:	6813      	ldr	r3, [r2, #0]
 80017f0:	075c      	lsls	r4, r3, #29
 80017f2:	d5fc      	bpl.n	80017ee <stm32_clock_control_init+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017f4:	4b55      	ldr	r3, [pc, #340]	; (800194c <stm32_clock_control_init+0x1c8>)
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	f022 0207 	bic.w	r2, r2, #7
 80017fc:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017fe:	691a      	ldr	r2, [r3, #16]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001800:	f012 0f38 	tst.w	r2, #56	; 0x38
 8001804:	d1fb      	bne.n	80017fe <stm32_clock_control_init+0x7a>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 8001806:	699a      	ldr	r2, [r3, #24]
 8001808:	f022 020f 	bic.w	r2, r2, #15
 800180c:	619a      	str	r2, [r3, #24]
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800180e:	4b4f      	ldr	r3, [pc, #316]	; (800194c <stm32_clock_control_init+0x1c8>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001816:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 8001818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800181a:	f022 0203 	bic.w	r2, r2, #3
 800181e:	f042 0202 	orr.w	r2, r2, #2
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 8001824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001826:	f422 727c 	bic.w	r2, r2, #1008	; 0x3f0
 800182a:	f042 0210 	orr.w	r2, r2, #16
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 8001830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001832:	f022 020c 	bic.w	r2, r2, #12
 8001836:	f042 0208 	orr.w	r2, r2, #8
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 800183c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183e:	f022 0202 	bic.w	r2, r2, #2
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N - 1UL) << RCC_PLL1DIVR_N1_Pos);
 8001844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001846:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	f042 0217 	orr.w	r2, r2, #23
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 8001854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P - 1UL) << RCC_PLL1DIVR_P1_Pos);
 800185c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800185e:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 8001862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001866:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 8001868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q - 1UL) << RCC_PLL1DIVR_Q1_Pos);
 8001870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001872:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001876:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN);
 800187c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R - 1UL) << RCC_PLL1DIVR_R1_Pos);
 8001884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001886:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800188a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN);
 8001890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001892:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800189e:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY)) ? 1UL : 0UL);
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	0190      	lsls	r0, r2, #6
 80018a4:	d5fc      	bpl.n	80018a0 <stm32_clock_control_init+0x11c>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 80018a6:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <stm32_clock_control_init+0x1cc>)
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	f022 0207 	bic.w	r2, r2, #7
 80018ae:	f042 0202 	orr.w	r2, r2, #2
 80018b2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80018ba:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	0491      	lsls	r1, r2, #18
 80018c0:	d5fc      	bpl.n	80018bc <stm32_clock_control_init+0x138>

	/* Configure Voltage scale to comply with the desired system frequency */
	prepare_regulator_voltage_scale();

	/* Current hclk value */
	old_hclk_freq = get_hclk_frequency();
 80018c2:	f7ff fee9 	bl	8001698 <get_hclk_frequency>
 80018c6:	4604      	mov	r4, r0
				      STM32_HPRE);

	/* Set flash latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq increases, set flash latency before any clock setting */
	if (new_hclk_freq > old_hclk_freq) {
 80018c8:	4822      	ldr	r0, [pc, #136]	; (8001954 <stm32_clock_control_init+0x1d0>)
 80018ca:	4284      	cmp	r4, r0
 80018cc:	d201      	bcs.n	80018d2 <stm32_clock_control_init+0x14e>
		LL_SetFlashLatency(new_hclk_freq);
 80018ce:	f000 fbd7 	bl	8002080 <LL_SetFlashLatency>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <stm32_clock_control_init+0x1c8>)
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80018da:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	f022 020f 	bic.w	r2, r2, #15
 80018e2:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018ea:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018f2:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018fa:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 80018fc:	6a1a      	ldr	r2, [r3, #32]
 80018fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001902:	621a      	str	r2, [r3, #32]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	f022 0207 	bic.w	r2, r2, #7
 800190a:	f042 0203 	orr.w	r2, r2, #3
 800190e:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	f002 0238 	and.w	r2, r2, #56	; 0x38

	/* Set up sys clock */
	if (IS_ENABLED(STM32_SYSCLK_SRC_PLL)) {
		/* Set PLL1 as System Clock Source */
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
		while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 8001916:	2a18      	cmp	r2, #24
 8001918:	d1fa      	bne.n	8001910 <stm32_clock_control_init+0x18c>
	}

	/* Set FLASH latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq not increased, set flash latency after all clock setting */
	if (new_hclk_freq <= old_hclk_freq) {
 800191a:	480e      	ldr	r0, [pc, #56]	; (8001954 <stm32_clock_control_init+0x1d0>)
 800191c:	4284      	cmp	r4, r0
 800191e:	d301      	bcc.n	8001924 <stm32_clock_control_init+0x1a0>
		LL_SetFlashLatency(new_hclk_freq);
 8001920:	f000 fbae 	bl	8002080 <LL_SetFlashLatency>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <stm32_clock_control_init+0x1cc>)
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	f022 0207 	bic.w	r2, r2, #7
 800192c:	f042 0202 	orr.w	r2, r2, #2
 8001930:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001938:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 800193a:	699a      	ldr	r2, [r3, #24]
 800193c:	0492      	lsls	r2, r2, #18
 800193e:	d5fc      	bpl.n	800193a <stm32_clock_control_init+0x1b6>
	optimize_regulator_voltage_scale(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	/* Update CMSIS variable */
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <stm32_clock_control_init+0x1d4>)

	return r;
}
 8001942:	2000      	movs	r0, #0
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8001944:	4a03      	ldr	r2, [pc, #12]	; (8001954 <stm32_clock_control_init+0x1d0>)
 8001946:	601a      	str	r2, [r3, #0]
}
 8001948:	b002      	add	sp, #8
 800194a:	bd10      	pop	{r4, pc}
 800194c:	58024400 	.word	0x58024400
 8001950:	58024800 	.word	0x58024800
 8001954:	05b8d800 	.word	0x05b8d800
 8001958:	24000034 	.word	0x24000034

0800195c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
 800195c:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 800195e:	4807      	ldr	r0, [pc, #28]	; (800197c <uart_console_init+0x20>)
 8001960:	f001 fc3c 	bl	80031dc <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 8001964:	b138      	cbz	r0, 8001976 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <uart_console_init+0x24>)
 8001968:	f7ff fde8 	bl	800153c <__stdout_hook_install>
	__printk_hook_install(console_out);
 800196c:	4804      	ldr	r0, [pc, #16]	; (8001980 <uart_console_init+0x24>)
 800196e:	f7fe fe27 	bl	80005c0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8001972:	2000      	movs	r0, #0
}
 8001974:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8001976:	f06f 0012 	mvn.w	r0, #18
 800197a:	e7fb      	b.n	8001974 <uart_console_init+0x18>
 800197c:	08003544 	.word	0x08003544
 8001980:	08001985 	.word	0x08001985

08001984 <console_out>:
	if ('\n' == c) {
 8001984:	280a      	cmp	r0, #10
{
 8001986:	b538      	push	{r3, r4, r5, lr}
 8001988:	4604      	mov	r4, r0
 800198a:	4d07      	ldr	r5, [pc, #28]	; (80019a8 <console_out+0x24>)
	if ('\n' == c) {
 800198c:	d104      	bne.n	8001998 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 800198e:	68ab      	ldr	r3, [r5, #8]
 8001990:	210d      	movs	r1, #13
 8001992:	4628      	mov	r0, r5
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4798      	blx	r3
 8001998:	68ab      	ldr	r3, [r5, #8]
 800199a:	b2e1      	uxtb	r1, r4
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <console_out+0x24>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4798      	blx	r3
}
 80019a2:	4620      	mov	r0, r4
 80019a4:	bd38      	pop	{r3, r4, r5, pc}
 80019a6:	bf00      	nop
 80019a8:	08003544 	.word	0x08003544

080019ac <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 80019ac:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 80019ae:	6903      	ldr	r3, [r0, #16]
{
 80019b0:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 80019b2:	6058      	str	r0, [r3, #4]
 80019b4:	4d08      	ldr	r5, [pc, #32]	; (80019d8 <gpio_stm32_init+0x2c>)
 80019b6:	4628      	mov	r0, r5
 80019b8:	f001 fc10 	bl	80031dc <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 80019bc:	b140      	cbz	r0, 80019d0 <gpio_stm32_init+0x24>
					(clock_control_subsys_t)&cfg->pclken);
 80019be:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 80019c0:	4628      	mov	r0, r5
 80019c2:	68ab      	ldr	r3, [r5, #8]
 80019c4:	310c      	adds	r1, #12
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 80019ca:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 80019ce:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 80019d0:	f06f 0012 	mvn.w	r0, #18
 80019d4:	e7fb      	b.n	80019ce <gpio_stm32_init+0x22>
 80019d6:	bf00      	nop
 80019d8:	080033f4 	.word	0x080033f4

080019dc <gpio_stm32_pin_interrupt_configure>:
{
 80019dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019de:	460c      	mov	r4, r1
 80019e0:	4611      	mov	r1, r2
 80019e2:	461e      	mov	r6, r3
	const struct gpio_stm32_config *cfg = dev->config;
 80019e4:	6847      	ldr	r7, [r0, #4]
	if (mode == GPIO_INT_MODE_DISABLED) {
 80019e6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
	struct gpio_stm32_data *data = dev->data;
 80019ea:	6902      	ldr	r2, [r0, #16]
	if (mode == GPIO_INT_MODE_DISABLED) {
 80019ec:	d127      	bne.n	8001a3e <gpio_stm32_pin_interrupt_configure+0x62>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80019ee:	f004 0203 	and.w	r2, r4, #3
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U)) >> (POSITION_VAL(Line >> 16U) & 31U));
 80019f2:	493b      	ldr	r1, [pc, #236]	; (8001ae0 <gpio_stm32_pin_interrupt_configure+0x104>)
 80019f4:	3204      	adds	r2, #4
 80019f6:	0093      	lsls	r3, r2, #2
 80019f8:	220f      	movs	r2, #15
 80019fa:	409a      	lsls	r2, r3
 80019fc:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
 8001a00:	f002 0303 	and.w	r3, r2, #3
 8001a04:	3302      	adds	r3, #2
 8001a06:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001a0a:	0c13      	lsrs	r3, r2, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	ea01 4212 	and.w	r2, r1, r2, lsr #16
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d109      	bne.n	8001a3a <gpio_stm32_pin_interrupt_configure+0x5e>
			stm32_exti_disable(pin);
 8001a26:	4620      	mov	r0, r4
 8001a28:	f001 f94a 	bl	8002cc0 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff fded 	bl	800160c <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001a32:	2100      	movs	r1, #0
 8001a34:	4620      	mov	r0, r4
 8001a36:	f001 f951 	bl	8002cdc <stm32_exti_trigger>
	int err = 0;
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	e043      	b.n	8001ac6 <gpio_stm32_pin_interrupt_configure+0xea>
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001a3e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001a42:	d047      	beq.n	8001ad4 <gpio_stm32_pin_interrupt_configure+0xf8>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8001a44:	4927      	ldr	r1, [pc, #156]	; (8001ae4 <gpio_stm32_pin_interrupt_configure+0x108>)
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff fdc6 	bl	80015d8 <stm32_exti_set_callback>
 8001a4c:	4605      	mov	r5, r0
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	d143      	bne.n	8001ada <gpio_stm32_pin_interrupt_configure+0xfe>
	struct stm32_pclken pclken = {
 8001a52:	4a25      	ldr	r2, [pc, #148]	; (8001ae8 <gpio_stm32_pin_interrupt_configure+0x10c>)
 8001a54:	466b      	mov	r3, sp
	gpio_stm32_enable_int(cfg->port, pin);
 8001a56:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 8001a58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a60:	4822      	ldr	r0, [pc, #136]	; (8001aec <gpio_stm32_pin_interrupt_configure+0x110>)
 8001a62:	4619      	mov	r1, r3
 8001a64:	6882      	ldr	r2, [r0, #8]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	4790      	blx	r2
	if (ret != 0) {
 8001a6a:	b9d8      	cbnz	r0, 8001aa4 <gpio_stm32_pin_interrupt_configure+0xc8>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001a6c:	f004 0303 	and.w	r3, r4, #3
 8001a70:	3304      	adds	r3, #4
 8001a72:	009a      	lsls	r2, r3, #2
 8001a74:	230f      	movs	r3, #15
 8001a76:	4093      	lsls	r3, r2
 8001a78:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << ((POSITION_VAL(Line >> 16U)) & 31U));
 8001a7c:	f003 0203 	and.w	r2, r3, #3
 8001a80:	0c19      	lsrs	r1, r3, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	fa91 f1a1 	rbit	r1, r1
 8001a86:	0092      	lsls	r2, r2, #2
  return __builtin_clz(value);
 8001a88:	fab1 f181 	clz	r1, r1
 8001a8c:	f102 42b0 	add.w	r2, r2, #1476395008	; 0x58000000
 8001a90:	f001 011f 	and.w	r1, r1, #31
 8001a94:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8001a98:	408f      	lsls	r7, r1
 8001a9a:	ea20 4313 	bic.w	r3, r0, r3, lsr #16
 8001a9e:	431f      	orrs	r7, r3
 8001aa0:	f8c2 7408 	str.w	r7, [r2, #1032]	; 0x408
	switch (trig) {
 8001aa4:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
 8001aa8:	d010      	beq.n	8001acc <gpio_stm32_pin_interrupt_configure+0xf0>
 8001aaa:	f1b6 6fc0 	cmp.w	r6, #100663296	; 0x6000000
 8001aae:	d00f      	beq.n	8001ad0 <gpio_stm32_pin_interrupt_configure+0xf4>
 8001ab0:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8001ab4:	bf14      	ite	ne
 8001ab6:	2100      	movne	r1, #0
 8001ab8:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 8001aba:	4620      	mov	r0, r4
 8001abc:	f001 f90e 	bl	8002cdc <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff fd75 	bl	80015b0 <stm32_exti_enable>
}
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	b003      	add	sp, #12
 8001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8001acc:	2101      	movs	r1, #1
 8001ace:	e7f4      	b.n	8001aba <gpio_stm32_pin_interrupt_configure+0xde>
		edge = STM32_EXTI_TRIG_BOTH;
 8001ad0:	2103      	movs	r1, #3
 8001ad2:	e7f2      	b.n	8001aba <gpio_stm32_pin_interrupt_configure+0xde>
		err = -ENOTSUP;
 8001ad4:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8001ad8:	e7f5      	b.n	8001ac6 <gpio_stm32_pin_interrupt_configure+0xea>
		err = -EBUSY;
 8001ada:	f06f 050f 	mvn.w	r5, #15
	return err;
 8001ade:	e7f2      	b.n	8001ac6 <gpio_stm32_pin_interrupt_configure+0xea>
 8001ae0:	58000400 	.word	0x58000400
 8001ae4:	08002f4b 	.word	0x08002f4b
 8001ae8:	08003ac0 	.word	0x08003ac0
 8001aec:	080033f4 	.word	0x080033f4

08001af0 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8001af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001af4:	4604      	mov	r4, r0
 8001af6:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8001afa:	2500      	movs	r5, #0
	port_device = gpio_ports[STM32_PORT(pin)];
 8001afc:	4f1c      	ldr	r7, [pc, #112]	; (8001b70 <pinctrl_configure_pins+0x80>)
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8001afe:	42b4      	cmp	r4, r6
 8001b00:	d101      	bne.n	8001b06 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8001b02:	2000      	movs	r0, #0
 8001b04:	e014      	b.n	8001b30 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8001b06:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001b08:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001b0a:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001b0e:	d411      	bmi.n	8001b34 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8001b10:	6865      	ldr	r5, [r4, #4]
 8001b12:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001b16:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8001b1a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8001b1e:	280a      	cmp	r0, #10
 8001b20:	d823      	bhi.n	8001b6a <pinctrl_configure_pins+0x7a>
	port_device = gpio_ports[STM32_PORT(pin)];
 8001b22:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001b26:	f1b8 0f00 	cmp.w	r8, #0
 8001b2a:	d10d      	bne.n	8001b48 <pinctrl_configure_pins+0x58>
		return -ENODEV;
 8001b2c:	f06f 0012 	mvn.w	r0, #18
}
 8001b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001b34:	f1b9 0f10 	cmp.w	r9, #16
 8001b38:	d004      	beq.n	8001b44 <pinctrl_configure_pins+0x54>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 8001b3a:	f1b9 0f11 	cmp.w	r9, #17
 8001b3e:	d1ea      	bne.n	8001b16 <pinctrl_configure_pins+0x26>
			pin_cgf = pins[i].pincfg;
 8001b40:	6865      	ldr	r5, [r4, #4]
 8001b42:	e7e8      	b.n	8001b16 <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8001b44:	2530      	movs	r5, #48	; 0x30
 8001b46:	e7e6      	b.n	8001b16 <pinctrl_configure_pins+0x26>
 8001b48:	4640      	mov	r0, r8
 8001b4a:	f001 fb47 	bl	80031dc <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d0ec      	beq.n	8001b2c <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8001b52:	464b      	mov	r3, r9
 8001b54:	462a      	mov	r2, r5
 8001b56:	f00a 010f 	and.w	r1, sl, #15
 8001b5a:	4640      	mov	r0, r8
 8001b5c:	f001 fa08 	bl	8002f70 <gpio_stm32_configure>
		if (ret < 0) {
 8001b60:	2800      	cmp	r0, #0
 8001b62:	f104 0408 	add.w	r4, r4, #8
 8001b66:	daca      	bge.n	8001afe <pinctrl_configure_pins+0xe>
 8001b68:	e7e2      	b.n	8001b30 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8001b6a:	f06f 0015 	mvn.w	r0, #21
 8001b6e:	e7df      	b.n	8001b30 <pinctrl_configure_pins+0x40>
 8001b70:	08003c18 	.word	0x08003c18

08001b74 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8001b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b76:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = dev->config;
 8001b78:	6844      	ldr	r4, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8001b7a:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8001b7c:	4869      	ldr	r0, [pc, #420]	; (8001d24 <uart_stm32_init+0x1b0>)
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	f001 fb2c 	bl	80031dc <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8001b84:	b920      	cbnz	r0, 8001b90 <uart_stm32_init+0x1c>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
 8001b86:	f06f 0512 	mvn.w	r5, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	b003      	add	sp, #12
 8001b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	6861      	ldr	r1, [r4, #4]
 8001b94:	6883      	ldr	r3, [r0, #8]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4798      	blx	r3
	if (err != 0) {
 8001b9a:	4605      	mov	r5, r0
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d1f4      	bne.n	8001b8a <uart_stm32_init+0x16>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8001ba0:	4601      	mov	r1, r0
 8001ba2:	aa01      	add	r2, sp, #4
 8001ba4:	69e0      	ldr	r0, [r4, #28]
 8001ba6:	f001 f9fb 	bl	8002fa0 <pinctrl_lookup_state>
	if (ret < 0) {
 8001baa:	2800      	cmp	r0, #0
 8001bac:	f2c0 80b8 	blt.w	8001d20 <uart_stm32_init+0x1ac>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8001bb0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8001bb2:	462a      	mov	r2, r5
 8001bb4:	7919      	ldrb	r1, [r3, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	f7ff ff9a 	bl	8001af0 <pinctrl_configure_pins>
	if (err < 0) {
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	f2c0 80af 	blt.w	8001d20 <uart_stm32_init+0x1ac>
	LL_USART_Disable(config->usart);
 8001bc2:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001bc4:	6813      	ldr	r3, [r2, #0]
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]
	if (!device_is_ready(data->reset.dev)) {
 8001bcc:	68b8      	ldr	r0, [r7, #8]
 8001bce:	f001 fb05 	bl	80031dc <z_device_is_ready>
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	d0d7      	beq.n	8001b86 <uart_stm32_init+0x12>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 8001bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
	if (api->line_toggle == NULL) {
 8001bda:	6883      	ldr	r3, [r0, #8]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	b103      	cbz	r3, 8001be2 <uart_stm32_init+0x6e>
	return api->line_toggle(dev, id);
 8001be0:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 8001be2:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001be4:	e851 3f00 	ldrex	r3, [r1]
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8001be8:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bec:	e841 3200 	strex	r2, r3, [r1]
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d1f7      	bne.n	8001be4 <uart_stm32_init+0x70>
	if (config->parity == 2) {
 8001bf4:	6923      	ldr	r3, [r4, #16]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	f000 808a 	beq.w	8001d10 <uart_stm32_init+0x19c>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	bf0a      	itet	eq
 8001c00:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 8001c04:	2000      	movne	r0, #0
 8001c06:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
	LL_USART_ConfigCharacter(config->usart,
 8001c0a:	6821      	ldr	r1, [r4, #0]
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8001c0c:	4302      	orrs	r2, r0
 8001c0e:	680b      	ldr	r3, [r1, #0]
 8001c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c14:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001c1c:	684b      	ldr	r3, [r1, #4]
 8001c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c22:	604b      	str	r3, [r1, #4]
	if (config->hw_flow_control) {
 8001c24:	7b23      	ldrb	r3, [r4, #12]
 8001c26:	b12b      	cbz	r3, 8001c34 <uart_stm32_init+0xc0>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8001c28:	6873      	ldr	r3, [r6, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001c2c:	6893      	ldr	r3, [r2, #8]
 8001c2e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c32:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8001c34:	6839      	ldr	r1, [r7, #0]
 8001c36:	4630      	mov	r0, r6
 8001c38:	f001 fa32 	bl	80030a0 <uart_stm32_set_baudrate>
	if (config->single_wire) {
 8001c3c:	7d23      	ldrb	r3, [r4, #20]
 8001c3e:	b123      	cbz	r3, 8001c4a <uart_stm32_init+0xd6>
		LL_USART_EnableHalfDuplex(config->usart);
 8001c40:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8001c42:	6893      	ldr	r3, [r2, #8]
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6093      	str	r3, [r2, #8]
	if (config->tx_rx_swap) {
 8001c4a:	7d63      	ldrb	r3, [r4, #21]
 8001c4c:	b123      	cbz	r3, 8001c58 <uart_stm32_init+0xe4>
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
 8001c4e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 8001c50:	6853      	ldr	r3, [r2, #4]
 8001c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c56:	6053      	str	r3, [r2, #4]
	if (config->rx_invert) {
 8001c58:	7da3      	ldrb	r3, [r4, #22]
 8001c5a:	b123      	cbz	r3, 8001c66 <uart_stm32_init+0xf2>
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
 8001c5c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 8001c5e:	6853      	ldr	r3, [r2, #4]
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6053      	str	r3, [r2, #4]
	if (config->tx_invert) {
 8001c66:	7de3      	ldrb	r3, [r4, #23]
 8001c68:	b123      	cbz	r3, 8001c74 <uart_stm32_init+0x100>
		LL_USART_SetTXPinLevel(config->usart, LL_USART_TXPIN_LEVEL_INVERTED);
 8001c6a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 8001c6c:	6853      	ldr	r3, [r2, #4]
 8001c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c72:	6053      	str	r3, [r2, #4]
	if (config->de_enable) {
 8001c74:	7e23      	ldrb	r3, [r4, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03d      	beq.n	8001cf6 <uart_stm32_init+0x182>
		if (!IS_UART_DRIVER_ENABLE_INSTANCE(config->usart)) {
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	4a2a      	ldr	r2, [pc, #168]	; (8001d28 <uart_stm32_init+0x1b4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01e      	beq.n	8001cc0 <uart_stm32_init+0x14c>
 8001c82:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01a      	beq.n	8001cc0 <uart_stm32_init+0x14c>
 8001c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d016      	beq.n	8001cc0 <uart_stm32_init+0x14c>
 8001c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d012      	beq.n	8001cc0 <uart_stm32_init+0x14c>
 8001c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00e      	beq.n	8001cc0 <uart_stm32_init+0x14c>
 8001ca2:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00a      	beq.n	8001cc0 <uart_stm32_init+0x14c>
 8001caa:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d006      	beq.n	8001cc0 <uart_stm32_init+0x14c>
 8001cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d002      	beq.n	8001cc0 <uart_stm32_init+0x14c>
 8001cba:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <uart_stm32_init+0x1b8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d12c      	bne.n	8001d1a <uart_stm32_init+0x1a6>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cc6:	609a      	str	r2, [r3, #8]
		LL_USART_SetDEAssertionTime(config->usart, config->de_assert_time);
 8001cc8:	6822      	ldr	r2, [r4, #0]
 8001cca:	7e61      	ldrb	r1, [r4, #25]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8001cd2:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001cd6:	6013      	str	r3, [r2, #0]
		LL_USART_SetDEDeassertionTime(config->usart, config->de_deassert_time);
 8001cd8:	6822      	ldr	r2, [r4, #0]
 8001cda:	7ea1      	ldrb	r1, [r4, #26]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
 8001cdc:	6813      	ldr	r3, [r2, #0]
 8001cde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001ce6:	6013      	str	r3, [r2, #0]
		if (config->de_invert) {
 8001ce8:	7ee3      	ldrb	r3, [r4, #27]
 8001cea:	b123      	cbz	r3, 8001cf6 <uart_stm32_init+0x182>
			LL_USART_SetDESignalPolarity(config->usart, LL_USART_DE_POLARITY_LOW);
 8001cec:	6822      	ldr	r2, [r4, #0]
  *         @arg @ref LL_USART_DE_POLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
 8001cee:	6893      	ldr	r3, [r2, #8]
 8001cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf4:	6093      	str	r3, [r2, #8]
	LL_USART_Enable(config->usart);
 8001cf6:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001cf8:	6813      	ldr	r3, [r2, #0]
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]
	while (!(LL_USART_IsActiveFlag_TEACK(config->usart))) {
 8001d00:	6823      	ldr	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	0291      	lsls	r1, r2, #10
 8001d06:	d5fc      	bpl.n	8001d02 <uart_stm32_init+0x18e>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	0252      	lsls	r2, r2, #9
 8001d0c:	d5fc      	bpl.n	8001d08 <uart_stm32_init+0x194>
 8001d0e:	e73c      	b.n	8001b8a <uart_stm32_init+0x16>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001d10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8001d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d18:	e777      	b.n	8001c0a <uart_stm32_init+0x96>
			return -EINVAL;
 8001d1a:	f06f 0515 	mvn.w	r5, #21
 8001d1e:	e734      	b.n	8001b8a <uart_stm32_init+0x16>
	if (err < 0) {
 8001d20:	4605      	mov	r5, r0
 8001d22:	e732      	b.n	8001b8a <uart_stm32_init+0x16>
 8001d24:	080033f4 	.word	0x080033f4
 8001d28:	40011000 	.word	0x40011000
 8001d2c:	58000c00 	.word	0x58000c00

08001d30 <uart_stm32_configure>:
{
 8001d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8001d34:	790b      	ldrb	r3, [r1, #4]
{
 8001d36:	460c      	mov	r4, r1
	const struct uart_stm32_config *config = dev->config;
 8001d38:	6845      	ldr	r5, [r0, #4]
	switch (parity) {
 8001d3a:	2b01      	cmp	r3, #1
	struct uart_stm32_data *data = dev->data;
 8001d3c:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8001d3e:	d01c      	beq.n	8001d7a <uart_stm32_configure+0x4a>
		return LL_USART_PARITY_NONE;
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	bf0c      	ite	eq
 8001d44:	f44f 6e80 	moveq.w	lr, #1024	; 0x400
 8001d48:	f04f 0e00 	movne.w	lr, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001d4c:	f894 9005 	ldrb.w	r9, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8001d50:	79a1      	ldrb	r1, [r4, #6]
 8001d52:	f1b9 0f02 	cmp.w	r9, #2
 8001d56:	bf96      	itet	ls
 8001d58:	4a52      	ldrls	r2, [pc, #328]	; (8001ea4 <uart_stm32_configure+0x174>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001d5a:	f44f 5200 	movhi.w	r2, #8192	; 0x2000
 8001d5e:	f832 2019 	ldrhls.w	r2, [r2, r9, lsl #1]
	switch (db) {
 8001d62:	2902      	cmp	r1, #2
 8001d64:	d00c      	beq.n	8001d80 <uart_stm32_configure+0x50>
 8001d66:	2904      	cmp	r1, #4
 8001d68:	f000 8096 	beq.w	8001e98 <uart_stm32_configure+0x168>
			return LL_USART_DATAWIDTH_8B;
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf14      	ite	ne
 8001d70:	f44f 5c80 	movne.w	ip, #4096	; 0x1000
 8001d74:	f04f 0c00 	moveq.w	ip, #0
 8001d78:	e008      	b.n	8001d8c <uart_stm32_configure+0x5c>
	switch (parity) {
 8001d7a:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8001d7e:	e7e5      	b.n	8001d4c <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	f04f 5c80 	moveq.w	ip, #268435456	; 0x10000000
 8001d88:	f04f 0c00 	movne.w	ip, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8001d8c:	f894 8007 	ldrb.w	r8, [r4, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001d90:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8001d94:	f1b8 0f01 	cmp.w	r8, #1
 8001d98:	bf14      	ite	ne
 8001d9a:	2700      	movne	r7, #0
 8001d9c:	f44f 7740 	moveq.w	r7, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001da0:	f1ba 0f01 	cmp.w	sl, #1
 8001da4:	d97b      	bls.n	8001e9e <uart_stm32_configure+0x16e>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8001da6:	b10b      	cbz	r3, 8001dac <uart_stm32_configure+0x7c>
 8001da8:	2904      	cmp	r1, #4
 8001daa:	d078      	beq.n	8001e9e <uart_stm32_configure+0x16e>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001dac:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8001db0:	d075      	beq.n	8001e9e <uart_stm32_configure+0x16e>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001db2:	2901      	cmp	r1, #1
 8001db4:	d973      	bls.n	8001e9e <uart_stm32_configure+0x16e>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8001db6:	2904      	cmp	r1, #4
 8001db8:	d071      	beq.n	8001e9e <uart_stm32_configure+0x16e>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001dba:	682b      	ldr	r3, [r5, #0]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8001dbc:	f1b8 0f00 	cmp.w	r8, #0
 8001dc0:	d024      	beq.n	8001e0c <uart_stm32_configure+0xdc>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001dc2:	4939      	ldr	r1, [pc, #228]	; (8001ea8 <uart_stm32_configure+0x178>)
 8001dc4:	428b      	cmp	r3, r1
 8001dc6:	d01e      	beq.n	8001e06 <uart_stm32_configure+0xd6>
 8001dc8:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 8001dcc:	428b      	cmp	r3, r1
 8001dce:	d01a      	beq.n	8001e06 <uart_stm32_configure+0xd6>
 8001dd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001dd4:	428b      	cmp	r3, r1
 8001dd6:	d016      	beq.n	8001e06 <uart_stm32_configure+0xd6>
 8001dd8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001ddc:	428b      	cmp	r3, r1
 8001dde:	d012      	beq.n	8001e06 <uart_stm32_configure+0xd6>
 8001de0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001de4:	428b      	cmp	r3, r1
 8001de6:	d00e      	beq.n	8001e06 <uart_stm32_configure+0xd6>
 8001de8:	f501 4144 	add.w	r1, r1, #50176	; 0xc400
 8001dec:	428b      	cmp	r3, r1
 8001dee:	d00a      	beq.n	8001e06 <uart_stm32_configure+0xd6>
 8001df0:	f5a1 411c 	sub.w	r1, r1, #39936	; 0x9c00
 8001df4:	428b      	cmp	r3, r1
 8001df6:	d006      	beq.n	8001e06 <uart_stm32_configure+0xd6>
 8001df8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	d002      	beq.n	8001e06 <uart_stm32_configure+0xd6>
 8001e00:	492a      	ldr	r1, [pc, #168]	; (8001eac <uart_stm32_configure+0x17c>)
 8001e02:	428b      	cmp	r3, r1
 8001e04:	d14b      	bne.n	8001e9e <uart_stm32_configure+0x16e>
 8001e06:	f1b8 0f01 	cmp.w	r8, #1
 8001e0a:	d148      	bne.n	8001e9e <uart_stm32_configure+0x16e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	f021 0101 	bic.w	r1, r1, #1
 8001e12:	6019      	str	r1, [r3, #0]
	return LL_USART_GetParity(config->usart);
 8001e14:	6841      	ldr	r1, [r0, #4]
 8001e16:	6809      	ldr	r1, [r1, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8001e18:	680b      	ldr	r3, [r1, #0]
 8001e1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8001e1e:	459e      	cmp	lr, r3
 8001e20:	d005      	beq.n	8001e2e <uart_stm32_configure+0xfe>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001e22:	680b      	ldr	r3, [r1, #0]
 8001e24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e28:	ea43 030e 	orr.w	r3, r3, lr
 8001e2c:	600b      	str	r3, [r1, #0]
	return LL_USART_GetStopBitsLength(config->usart);
 8001e2e:	6843      	ldr	r3, [r0, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8001e38:	428a      	cmp	r2, r1
 8001e3a:	d004      	beq.n	8001e46 <uart_stm32_configure+0x116>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001e42:	4311      	orrs	r1, r2
 8001e44:	6059      	str	r1, [r3, #4]
	return LL_USART_GetDataWidth(config->usart);
 8001e46:	6843      	ldr	r3, [r0, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8001e50:	4594      	cmp	ip, r2
 8001e52:	d005      	beq.n	8001e60 <uart_stm32_configure+0x130>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 8001e5a:	ea42 020c 	orr.w	r2, r2, ip
 8001e5e:	601a      	str	r2, [r3, #0]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8001e60:	6843      	ldr	r3, [r0, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8001e64:	6893      	ldr	r3, [r2, #8]
 8001e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8001e6a:	429f      	cmp	r7, r3
 8001e6c:	d004      	beq.n	8001e78 <uart_stm32_configure+0x148>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001e6e:	6893      	ldr	r3, [r2, #8]
 8001e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e74:	433b      	orrs	r3, r7
 8001e76:	6093      	str	r3, [r2, #8]
	if (cfg->baudrate != data->baud_rate) {
 8001e78:	6821      	ldr	r1, [r4, #0]
 8001e7a:	6833      	ldr	r3, [r6, #0]
 8001e7c:	4299      	cmp	r1, r3
 8001e7e:	d003      	beq.n	8001e88 <uart_stm32_configure+0x158>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8001e80:	f001 f90e 	bl	80030a0 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8001e88:	682a      	ldr	r2, [r5, #0]
	return 0;
 8001e8a:	2000      	movs	r0, #0
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001e8c:	6813      	ldr	r3, [r2, #0]
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6013      	str	r3, [r2, #0]
};
 8001e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 8001e98:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8001e9c:	e776      	b.n	8001d8c <uart_stm32_configure+0x5c>
		return -ENOTSUP;
 8001e9e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001ea2:	e7f7      	b.n	8001e94 <uart_stm32_configure+0x164>
 8001ea4:	08003cd0 	.word	0x08003cd0
 8001ea8:	40011000 	.word	0x40011000
 8001eac:	58000c00 	.word	0x58000c00

08001eb0 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8001eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8001eb4:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8001eb6:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001eb8:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001eba:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001ebc:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <elapsed+0x34>)
 8001ec2:	4909      	ldr	r1, [pc, #36]	; (8001ee8 <elapsed+0x38>)
 8001ec4:	d101      	bne.n	8001eca <elapsed+0x1a>
	    || (val1 < val2)) {
 8001ec6:	4282      	cmp	r2, r0
 8001ec8:	d206      	bcs.n	8001ed8 <elapsed+0x28>
		overflow_cyc += last_load;
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	680c      	ldr	r4, [r1, #0]
 8001ece:	4422      	add	r2, r4
 8001ed0:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8001ed2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001ed6:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	680a      	ldr	r2, [r1, #0]
 8001edc:	4413      	add	r3, r2
}
 8001ede:	1a18      	subs	r0, r3, r0
 8001ee0:	bd10      	pop	{r4, pc}
 8001ee2:	bf00      	nop
 8001ee4:	240002e8 	.word	0x240002e8
 8001ee8:	240002e4 	.word	0x240002e4

08001eec <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <sys_clock_driver_init+0x28>)
 8001eee:	2210      	movs	r2, #16
static int sys_clock_driver_init(void)
{

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 8001ef6:	f242 527f 	movw	r2, #9599	; 0x257f
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <sys_clock_driver_init+0x2c>)
 8001efc:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <sys_clock_driver_init+0x30>)
 8001f00:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8001f02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f06:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001f08:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	f042 0207 	orr.w	r2, r2, #7
 8001f10:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00
 8001f18:	240002e4 	.word	0x240002e4
 8001f1c:	240002e8 	.word	0x240002e8

08001f20 <sys_clock_isr>:
{
 8001f20:	b508      	push	{r3, lr}
	elapsed();
 8001f22:	f7ff ffc5 	bl	8001eb0 <elapsed>
	cycle_count += overflow_cyc;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <sys_clock_isr+0x38>)
 8001f28:	4a0c      	ldr	r2, [pc, #48]	; (8001f5c <sys_clock_isr+0x3c>)
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	6811      	ldr	r1, [r2, #0]
 8001f2e:	4408      	add	r0, r1
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001f30:	f44f 5116 	mov.w	r1, #9600	; 0x2580
	cycle_count += overflow_cyc;
 8001f34:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <sys_clock_isr+0x40>)
 8001f3c:	6813      	ldr	r3, [r2, #0]
 8001f3e:	1ac0      	subs	r0, r0, r3
 8001f40:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8001f44:	fb01 3300 	mla	r3, r1, r0, r3
 8001f48:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8001f4a:	f000 fd4f 	bl	80029ec <sys_clock_announce>
}
 8001f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001f52:	f7ff b899 	b.w	8001088 <z_arm_exc_exit>
 8001f56:	bf00      	nop
 8001f58:	240002e8 	.word	0x240002e8
 8001f5c:	240002e0 	.word	0x240002e0
 8001f60:	240002dc 	.word	0x240002dc

08001f64 <sys_clock_set_timeout>:
{
 8001f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f66:	4c32      	ldr	r4, [pc, #200]	; (8002030 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8001f68:	b159      	cbz	r1, 8001f82 <sys_clock_set_timeout+0x1e>
 8001f6a:	1c42      	adds	r2, r0, #1
 8001f6c:	d109      	bne.n	8001f82 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001f6e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001f72:	6913      	ldr	r3, [r2, #16]
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8001f7a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f7e:	6023      	str	r3, [r4, #0]
}
 8001f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001f82:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8001f84:	6826      	ldr	r6, [r4, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001f86:	d023      	beq.n	8001fd0 <sys_clock_set_timeout+0x6c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001f88:	2801      	cmp	r0, #1
 8001f8a:	dd24      	ble.n	8001fd6 <sys_clock_set_timeout+0x72>
 8001f8c:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8001f90:	4298      	cmp	r0, r3
 8001f92:	dc22      	bgt.n	8001fda <sys_clock_set_timeout+0x76>
 8001f94:	1e47      	subs	r7, r0, #1
	__asm__ volatile(
 8001f96:	f04f 0310 	mov.w	r3, #16
 8001f9a:	f3ef 8511 	mrs	r5, BASEPRI
 8001f9e:	f383 8812 	msr	BASEPRI_MAX, r3
 8001fa2:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001fa6:	f7ff ff83 	bl	8001eb0 <elapsed>
	val1 = SysTick->VAL;
 8001faa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
 8001fae:	4921      	ldr	r1, [pc, #132]	; (8002034 <sys_clock_set_timeout+0xd0>)
	overflow_cyc = 0U;
 8001fb0:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8001fb2:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8001fb6:	680b      	ldr	r3, [r1, #0]
 8001fb8:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8001fba:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <sys_clock_set_timeout+0xd4>)
 8001fbc:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <sys_clock_set_timeout+0xd8>)
	cycle_count += pending;
 8001fc0:	6008      	str	r0, [r1, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001fc2:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8001fc4:	1a83      	subs	r3, r0, r2
 8001fc6:	d50a      	bpl.n	8001fde <sys_clock_set_timeout+0x7a>
		delay = MAX(delay, MIN_DELAY);
 8001fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 8001fcc:	6023      	str	r3, [r4, #0]
 8001fce:	e019      	b.n	8002004 <sys_clock_set_timeout+0xa0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8001fd0:	f240 60d2 	movw	r0, #1746	; 0x6d2
 8001fd4:	e7de      	b.n	8001f94 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001fd6:	2700      	movs	r7, #0
 8001fd8:	e7dd      	b.n	8001f96 <sys_clock_set_timeout+0x32>
 8001fda:	461f      	mov	r7, r3
 8001fdc:	e7db      	b.n	8001f96 <sys_clock_set_timeout+0x32>
		delay = ticks * CYC_PER_TICK;
 8001fde:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
		delay -= unannounced;
 8001fe2:	1a12      	subs	r2, r2, r0
		delay += unannounced;
 8001fe4:	fb0e 3307 	mla	r3, lr, r7, r3
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
 8001fe8:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 8001fec:	333f      	adds	r3, #63	; 0x3f
 8001fee:	fbb3 f3fe 	udiv	r3, r3, lr
		delay -= unannounced;
 8001ff2:	fb0e 2303 	mla	r3, lr, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffa:	d9e5      	bls.n	8001fc8 <sys_clock_set_timeout+0x64>
		if (delay > MAX_CYCLES) {
 8001ffc:	4a10      	ldr	r2, [pc, #64]	; (8002040 <sys_clock_set_timeout+0xdc>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d9e4      	bls.n	8001fcc <sys_clock_set_timeout+0x68>
			last_load = MAX_CYCLES;
 8002002:	6022      	str	r2, [r4, #0]
	val2 = SysTick->VAL;
 8002004:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8002008:	6824      	ldr	r4, [r4, #0]
	val2 = SysTick->VAL;
 800200a:	6993      	ldr	r3, [r2, #24]
	SysTick->LOAD = last_load - 1;
 800200c:	3c01      	subs	r4, #1
	if (val1 < val2) {
 800200e:	459c      	cmp	ip, r3
	SysTick->LOAD = last_load - 1;
 8002010:	6154      	str	r4, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002012:	f04f 0400 	mov.w	r4, #0
		cycle_count += (val1 + (last_load_ - val2));
 8002016:	bf38      	it	cc
 8002018:	44b4      	addcc	ip, r6
	SysTick->VAL = 0; /* resets timer to last_load */
 800201a:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 800201c:	ebac 0c03 	sub.w	ip, ip, r3
 8002020:	4460      	add	r0, ip
 8002022:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8002024:	f385 8811 	msr	BASEPRI, r5
 8002028:	f3bf 8f6f 	isb	sy
 800202c:	e7a8      	b.n	8001f80 <sys_clock_set_timeout+0x1c>
 800202e:	bf00      	nop
 8002030:	240002e4 	.word	0x240002e4
 8002034:	240002e0 	.word	0x240002e0
 8002038:	240002e8 	.word	0x240002e8
 800203c:	240002dc 	.word	0x240002dc
 8002040:	00ffc300 	.word	0x00ffc300

08002044 <sys_clock_elapsed>:
{
 8002044:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002046:	f04f 0310 	mov.w	r3, #16
 800204a:	f3ef 8411 	mrs	r4, BASEPRI
 800204e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002052:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8002056:	f7ff ff2b 	bl	8001eb0 <elapsed>
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <sys_clock_elapsed+0x34>)
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <sys_clock_elapsed+0x38>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	4403      	add	r3, r0
	__asm__ volatile(
 8002066:	f384 8811 	msr	BASEPRI, r4
 800206a:	f3bf 8f6f 	isb	sy
}
 800206e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002072:	fbb3 f0f0 	udiv	r0, r3, r0
 8002076:	bd10      	pop	{r4, pc}
 8002078:	240002e0 	.word	0x240002e0
 800207c:	240002dc 	.word	0x240002dc

08002080 <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */



  /* Frequency cannot be equal to 0 */
  if (HCLK_Frequency == 0U)
 8002080:	b320      	cbz	r0, 80020cc <LL_SetFlashLatency+0x4c>
  return (uint32_t)(READ_BIT(PWR->D3CR, PWR_D3CR_VOS));
 8002082:	4a2a      	ldr	r2, [pc, #168]	; (800212c <LL_SetFlashLatency+0xac>)
 8002084:	6993      	ldr	r3, [r2, #24]
 8002086:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
    {
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
#endif /* STM32H7_DEV_ID == 0x480UL */
#else
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800208a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800208e:	d11f      	bne.n	80020d0 <LL_SetFlashLatency+0x50>
    {
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <LL_SetFlashLatency+0xb0>)
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <LL_SetFlashLatency+0xb4>)
 8002094:	4403      	add	r3, r0
 8002096:	4293      	cmp	r3, r2
 8002098:	d942      	bls.n	8002120 <LL_SetFlashLatency+0xa0>
#endif /* STM32H7_DEV_ID == 0x480UL || STM32H7_DEV_ID == 0x483UL */
      {
        /* 140 < HCLK <= 210 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY1_FREQ))
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <LL_SetFlashLatency+0xb8>)
 800209c:	4a27      	ldr	r2, [pc, #156]	; (800213c <LL_SetFlashLatency+0xbc>)
 800209e:	4403      	add	r3, r0
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d93f      	bls.n	8002124 <LL_SetFlashLatency+0xa4>
      {
        /* 70 < HCLK <= 140 => 1WS (2 CPU cycles) */
        latency = LL_FLASH_LATENCY_1;
      }
      else if(HCLK_Frequency <= UTILS_SCALE1_LATENCY0_FREQ)
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <LL_SetFlashLatency+0xc0>)
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
      {
        /* 45 < HCLK <= 90 => 1WS (2 CPU cycles) */
        latency = LL_FLASH_LATENCY_1;
      }
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 80020a6:	4298      	cmp	r0, r3
 80020a8:	d810      	bhi.n	80020cc <LL_SetFlashLatency+0x4c>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80020aa:	2300      	movs	r3, #0
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80020ac:	4925      	ldr	r1, [pc, #148]	; (8002144 <LL_SetFlashLatency+0xc4>)
 80020ae:	680a      	ldr	r2, [r1, #0]
 80020b0:	f022 020f 	bic.w	r2, r2, #15
 80020b4:	431a      	orrs	r2, r3
 80020b6:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80020b8:	680a      	ldr	r2, [r1, #0]
 80020ba:	f002 020f 	and.w	r2, r2, #15
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 80020be:	4293      	cmp	r3, r2
 80020c0:	d032      	beq.n	8002128 <LL_SetFlashLatency+0xa8>
 80020c2:	680a      	ldr	r2, [r1, #0]
 80020c4:	f002 020f 	and.w	r2, r2, #15
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d02d      	beq.n	8002128 <LL_SetFlashLatency+0xa8>
    status = ERROR;
 80020cc:	2001      	movs	r0, #1
 80020ce:	4770      	bx	lr
 80020d0:	6993      	ldr	r3, [r2, #24]
 80020d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80020d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020da:	d10e      	bne.n	80020fa <LL_SetFlashLatency+0x7a>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY3_FREQ))
 80020dc:	4a1a      	ldr	r2, [pc, #104]	; (8002148 <LL_SetFlashLatency+0xc8>)
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <LL_SetFlashLatency+0xcc>)
 80020e0:	4402      	add	r2, r0
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d91a      	bls.n	800211c <LL_SetFlashLatency+0x9c>
      else if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY2_FREQ))
 80020e6:	4a1a      	ldr	r2, [pc, #104]	; (8002150 <LL_SetFlashLatency+0xd0>)
 80020e8:	4402      	add	r2, r0
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d918      	bls.n	8002120 <LL_SetFlashLatency+0xa0>
      else if((HCLK_Frequency > UTILS_SCALE2_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY1_FREQ))
 80020ee:	4a19      	ldr	r2, [pc, #100]	; (8002154 <LL_SetFlashLatency+0xd4>)
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
 80020f0:	4402      	add	r2, r0
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d916      	bls.n	8002124 <LL_SetFlashLatency+0xa4>
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 80020f6:	3301      	adds	r3, #1
 80020f8:	e7d5      	b.n	80020a6 <LL_SetFlashLatency+0x26>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY4_FREQ))
 80020fa:	4a17      	ldr	r2, [pc, #92]	; (8002158 <LL_SetFlashLatency+0xd8>)
 80020fc:	4b17      	ldr	r3, [pc, #92]	; (800215c <LL_SetFlashLatency+0xdc>)
 80020fe:	4402      	add	r2, r0
 8002100:	429a      	cmp	r2, r3
 8002102:	d909      	bls.n	8002118 <LL_SetFlashLatency+0x98>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY3_FREQ))
 8002104:	4a16      	ldr	r2, [pc, #88]	; (8002160 <LL_SetFlashLatency+0xe0>)
 8002106:	4402      	add	r2, r0
 8002108:	429a      	cmp	r2, r3
 800210a:	d907      	bls.n	800211c <LL_SetFlashLatency+0x9c>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY2_FREQ))
 800210c:	4a15      	ldr	r2, [pc, #84]	; (8002164 <LL_SetFlashLatency+0xe4>)
 800210e:	4402      	add	r2, r0
 8002110:	429a      	cmp	r2, r3
 8002112:	d905      	bls.n	8002120 <LL_SetFlashLatency+0xa0>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <LL_SetFlashLatency+0xe8>)
 8002116:	e7eb      	b.n	80020f0 <LL_SetFlashLatency+0x70>
        latency = LL_FLASH_LATENCY_4;
 8002118:	2304      	movs	r3, #4
 800211a:	e7c7      	b.n	80020ac <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_3;
 800211c:	2303      	movs	r3, #3
 800211e:	e7c5      	b.n	80020ac <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_2;
 8002120:	2302      	movs	r3, #2
 8002122:	e7c3      	b.n	80020ac <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_1;
 8002124:	2301      	movs	r3, #1
 8002126:	e7c1      	b.n	80020ac <LL_SetFlashLatency+0x2c>
 8002128:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800212a:	4770      	bx	lr
 800212c:	58024800 	.word	0x58024800
 8002130:	f7a7c4ff 	.word	0xf7a7c4ff
 8002134:	05f5e0ff 	.word	0x05f5e0ff
 8002138:	fbd3e27f 	.word	0xfbd3e27f
 800213c:	042c1d7f 	.word	0x042c1d7f
 8002140:	042c1d80 	.word	0x042c1d80
 8002144:	52002000 	.word	0x52002000
 8002148:	f62a4cbf 	.word	0xf62a4cbf
 800214c:	03473bbf 	.word	0x03473bbf
 8002150:	f971887f 	.word	0xf971887f
 8002154:	fcb8c43f 	.word	0xfcb8c43f
 8002158:	f5456aff 	.word	0xf5456aff
 800215c:	02aea53f 	.word	0x02aea53f
 8002160:	f7f4103f 	.word	0xf7f4103f
 8002164:	faa2b57f 	.word	0xfaa2b57f
 8002168:	fd515abf 	.word	0xfd515abf

0800216c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800216c:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <z_sys_init_run_level+0x44>)
{
 800216e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002170:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002174:	3001      	adds	r0, #1
 8002176:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800217a:	42a6      	cmp	r6, r4
 800217c:	d800      	bhi.n	8002180 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
 800217e:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
 8002180:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
 8002184:	b195      	cbz	r5, 80021ac <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
 8002186:	b153      	cbz	r3, 800219e <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
 8002188:	4628      	mov	r0, r5
 800218a:	4798      	blx	r3
				if (rc != 0) {
 800218c:	b138      	cbz	r0, 800219e <z_sys_init_run_level+0x32>
					if (rc < 0) {
 800218e:	2800      	cmp	r0, #0
					dev->state->init_res = rc;
 8002190:	68eb      	ldr	r3, [r5, #12]
 8002192:	bfb8      	it	lt
 8002194:	4240      	neglt	r0, r0
 8002196:	28ff      	cmp	r0, #255	; 0xff
 8002198:	bfa8      	it	ge
 800219a:	20ff      	movge	r0, #255	; 0xff
 800219c:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 800219e:	68ea      	ldr	r2, [r5, #12]
 80021a0:	7853      	ldrb	r3, [r2, #1]
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80021a8:	3408      	adds	r4, #8
 80021aa:	e7e6      	b.n	800217a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
 80021ac:	4798      	blx	r3
 80021ae:	e7fb      	b.n	80021a8 <z_sys_init_run_level+0x3c>
 80021b0:	08003cb8 	.word	0x08003cb8

080021b4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 80021b4:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 80021b6:	2003      	movs	r0, #3
{
 80021b8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <bg_thread_main+0x2c>)
 80021bc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 80021be:	f7ff ffd5 	bl	800216c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 80021c2:	f000 fc7d 	bl	8002ac0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 80021c6:	2004      	movs	r0, #4
 80021c8:	f7ff ffd0 	bl	800216c <z_sys_init_run_level>

	z_init_static_threads();
 80021cc:	f000 f902 	bl	80023d4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
 80021d0:	f7fe f9e4 	bl	800059c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 80021d4:	4a03      	ldr	r2, [pc, #12]	; (80021e4 <bg_thread_main+0x30>)
 80021d6:	7b13      	ldrb	r3, [r2, #12]
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 80021de:	bd08      	pop	{r3, pc}
 80021e0:	24000321 	.word	0x24000321
 80021e4:	24000100 	.word	0x24000100

080021e8 <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 80021e8:	4806      	ldr	r0, [pc, #24]	; (8002204 <z_bss_zero+0x1c>)
 80021ea:	2100      	movs	r1, #0
 80021ec:	4a06      	ldr	r2, [pc, #24]	; (8002208 <z_bss_zero+0x20>)
{
 80021ee:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 80021f0:	1a12      	subs	r2, r2, r0
 80021f2:	f001 f825 	bl	8003240 <z_early_memset>
		       - (uintptr_t) &__dtcm_bss_start);
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <z_bss_zero+0x24>)
	z_early_memset(&__dtcm_bss_start, 0,
 80021f8:	4a05      	ldr	r2, [pc, #20]	; (8002210 <z_bss_zero+0x28>)
 80021fa:	2100      	movs	r1, #0
 80021fc:	1a12      	subs	r2, r2, r0
 80021fe:	f001 f81f 	bl	8003240 <z_early_memset>
}
 8002202:	bd08      	pop	{r3, pc}
 8002204:	24000080 	.word	0x24000080
 8002208:	24000324 	.word	0x24000324
 800220c:	20000000 	.word	0x20000000
 8002210:	20000000 	.word	0x20000000

08002214 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 8002214:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 8002216:	2300      	movs	r3, #0
{
 8002218:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 800221a:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
 800221c:	4e1a      	ldr	r6, [pc, #104]	; (8002288 <z_init_cpu+0x74>)
	z_setup_new_thread(thread, stack,
 800221e:	9301      	str	r3, [sp, #4]
{
 8002220:	4604      	mov	r4, r0
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002222:	4d1a      	ldr	r5, [pc, #104]	; (800228c <z_init_cpu+0x78>)
	struct k_thread *thread = &z_idle_threads[i];
 8002224:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
 8002228:	4919      	ldr	r1, [pc, #100]	; (8002290 <z_init_cpu+0x7c>)
 800222a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800222e:	220f      	movs	r2, #15
 8002230:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8002234:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
 8002236:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800223a:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 800223e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <z_init_cpu+0x80>)
 8002244:	fb00 1104 	mla	r1, r0, r4, r1
 8002248:	4630      	mov	r0, r6
 800224a:	9500      	str	r5, [sp, #0]
 800224c:	f000 f890 	bl	8002370 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002250:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8002252:	4811      	ldr	r0, [pc, #68]	; (8002298 <z_init_cpu+0x84>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
	_kernel.cpus[id].id = id;
 8002258:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 800225a:	60ee      	str	r6, [r5, #12]
 800225c:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800225e:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8002262:	fb03 0404 	mla	r4, r3, r4, r0
 8002266:	441c      	add	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <z_init_cpu+0x88>)
	_kernel.cpus[id].irq_stack =
 800226a:	606c      	str	r4, [r5, #4]
 800226c:	f3bf 8f5b 	dmb	ish
 8002270:	e853 2f00 	ldrex	r2, [r3]
 8002274:	3201      	adds	r2, #1
 8002276:	e843 2100 	strex	r1, r2, [r3]
 800227a:	2900      	cmp	r1, #0
 800227c:	d1f8      	bne.n	8002270 <z_init_cpu+0x5c>
 800227e:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
 8002282:	b006      	add	sp, #24
 8002284:	bd70      	pop	{r4, r5, r6, pc}
 8002286:	bf00      	nop
 8002288:	24000080 	.word	0x24000080
 800228c:	240002f0 	.word	0x240002f0
 8002290:	24000780 	.word	0x24000780
 8002294:	08003249 	.word	0x08003249
 8002298:	24000900 	.word	0x24000900
 800229c:	240002ec 	.word	0x240002ec

080022a0 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 80022a0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 80022a2:	2000      	movs	r0, #0
{
 80022a4:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 80022a6:	f7ff ff61 	bl	800216c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <z_cstart+0xb4>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80022ac:	f383 8808 	msr	MSP, r3
 80022b0:	4d29      	ldr	r5, [pc, #164]	; (8002358 <z_cstart+0xb8>)
 80022b2:	2400      	movs	r4, #0
 80022b4:	23f0      	movs	r3, #240	; 0xf0

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 80022b6:	4e29      	ldr	r6, [pc, #164]	; (800235c <z_cstart+0xbc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80022b8:	4f29      	ldr	r7, [pc, #164]	; (8002360 <z_cstart+0xc0>)
 80022ba:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 80022be:	77ec      	strb	r4, [r5, #31]
 80022c0:	762c      	strb	r4, [r5, #24]
 80022c2:	766c      	strb	r4, [r5, #25]
 80022c4:	76ac      	strb	r4, [r5, #26]
 80022c6:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80022ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80022cc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80022d0:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 80022d2:	f7ff f823 	bl	800131c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 80022d6:	f7fe fdcb 	bl	8000e70 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80022e0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 80022e2:	f7ff f8fb 	bl	80014dc <z_arm_mpu_init>
	_kernel.ready_q.cache = &z_main_thread;
 80022e6:	4d1f      	ldr	r5, [pc, #124]	; (8002364 <z_cstart+0xc4>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 80022e8:	f7ff f862 	bl	80013b0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 80022ec:	f240 1301 	movw	r3, #257	; 0x101
	dummy_thread->resource_pool = NULL;
 80022f0:	9422      	str	r4, [sp, #136]	; 0x88
	dummy_thread->base.user_options = K_ESSENTIAL;
 80022f2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 80022f6:	ab06      	add	r3, sp, #24
 80022f8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 80022fa:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 80022fe:	f000 ff6c 	bl	80031da <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff ff32 	bl	800216c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8002308:	2002      	movs	r0, #2
 800230a:	f7ff ff2f 	bl	800216c <z_sys_init_run_level>
	z_sched_init();
 800230e:	f000 fa23 	bl	8002758 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <z_cstart+0xc8>)
	_kernel.ready_q.cache = &z_main_thread;
 8002314:	6175      	str	r5, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800231a:	9305      	str	r3, [sp, #20]
 800231c:	2301      	movs	r3, #1
 800231e:	4913      	ldr	r1, [pc, #76]	; (800236c <z_cstart+0xcc>)
 8002320:	4628      	mov	r0, r5
 8002322:	9400      	str	r4, [sp, #0]
 8002324:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8002328:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800232c:	463b      	mov	r3, r7
 800232e:	f000 f81f 	bl	8002370 <z_setup_new_thread>
 8002332:	7b6a      	ldrb	r2, [r5, #13]
 8002334:	4606      	mov	r6, r0
	z_ready_thread(&z_main_thread);
 8002336:	4628      	mov	r0, r5
 8002338:	f022 0204 	bic.w	r2, r2, #4
 800233c:	736a      	strb	r2, [r5, #13]
 800233e:	f000 ffbd 	bl	80032bc <z_ready_thread>
	z_init_cpu(0);
 8002342:	4620      	mov	r0, r4
 8002344:	f7ff ff66 	bl	8002214 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8002348:	463a      	mov	r2, r7
 800234a:	4631      	mov	r1, r6
 800234c:	4628      	mov	r0, r5
 800234e:	f7fe fe71 	bl	8001034 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8002352:	bf00      	nop
 8002354:	24001140 	.word	0x24001140
 8002358:	e000ed00 	.word	0xe000ed00
 800235c:	240002f0 	.word	0x240002f0
 8002360:	080021b5 	.word	0x080021b5
 8002364:	24000100 	.word	0x24000100
 8002368:	08003e3c 	.word	0x08003e3c
 800236c:	24000340 	.word	0x24000340

08002370 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002370:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8002374:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002376:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 800237a:	460f      	mov	r7, r1
 800237c:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
 800237e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002380:	2604      	movs	r6, #4

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8002382:	3740      	adds	r7, #64	; 0x40
 8002384:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8002386:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002388:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800238a:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800238c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800238e:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8002392:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 8002396:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002398:	f106 0840 	add.w	r8, r6, #64	; 0x40
	thread_base->pended_on = NULL;
 800239c:	6085      	str	r5, [r0, #8]
	stack_ptr = (char *)stack + stack_obj_size;
 800239e:	4488      	add	r8, r1

	thread_base->sched_locked = 0U;
 80023a0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 80023a2:	66c5      	str	r5, [r0, #108]	; 0x6c
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 80023a4:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 80023a8:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80023ac:	9202      	str	r2, [sp, #8]
 80023ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80023b0:	9201      	str	r2, [sp, #4]
 80023b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80023b4:	9200      	str	r2, [sp, #0]
 80023b6:	4642      	mov	r2, r8
 80023b8:	f7fe fe10 	bl	8000fdc <arch_new_thread>
	if (!_current) {
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 80023be:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	b103      	cbz	r3, 80023c6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 80023c6:	4640      	mov	r0, r8
 80023c8:	6723      	str	r3, [r4, #112]	; 0x70
 80023ca:	b004      	add	sp, #16
 80023cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023d0:	240002f0 	.word	0x240002f0

080023d4 <z_init_static_threads>:
{
 80023d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d6:	4c21      	ldr	r4, [pc, #132]	; (800245c <z_init_static_threads+0x88>)
 80023d8:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 80023da:	4d21      	ldr	r5, [pc, #132]	; (8002460 <z_init_static_threads+0x8c>)
 80023dc:	4626      	mov	r6, r4
 80023de:	342c      	adds	r4, #44	; 0x2c
 80023e0:	42ae      	cmp	r6, r5
 80023e2:	d30b      	bcc.n	80023fc <z_init_static_threads+0x28>
	_FOREACH_STATIC_THREAD(thread_data) {
 80023e4:	4c1d      	ldr	r4, [pc, #116]	; (800245c <z_init_static_threads+0x88>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 80023e6:	260a      	movs	r6, #10

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80023e8:	4f1e      	ldr	r7, [pc, #120]	; (8002464 <z_init_static_threads+0x90>)
	k_sched_lock();
 80023ea:	f000 f8a5 	bl	8002538 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80023ee:	42ac      	cmp	r4, r5
 80023f0:	d320      	bcc.n	8002434 <z_init_static_threads+0x60>
}
 80023f2:	b007      	add	sp, #28
 80023f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80023f8:	f000 b992 	b.w	8002720 <k_sched_unlock>
		z_setup_new_thread(
 80023fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002400:	9305      	str	r3, [sp, #20]
 8002402:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8002406:	9304      	str	r3, [sp, #16]
 8002408:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800240c:	9303      	str	r3, [sp, #12]
 800240e:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8002412:	9302      	str	r3, [sp, #8]
 8002414:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800241e:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
 8002428:	f7ff ffa2 	bl	8002370 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800242c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8002430:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8002432:	e7d3      	b.n	80023dc <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002434:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002436:	1c53      	adds	r3, r2, #1
 8002438:	d009      	beq.n	800244e <z_init_static_threads+0x7a>
					    K_MSEC(thread_data->init_delay));
 800243a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			schedule_new_thread(thread_data->init_thread,
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002444:	ea52 0103 	orrs.w	r1, r2, r3
 8002448:	d103      	bne.n	8002452 <z_init_static_threads+0x7e>
	z_sched_start(thread);
 800244a:	f000 f94b 	bl	80026e4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800244e:	342c      	adds	r4, #44	; 0x2c
 8002450:	e7cd      	b.n	80023ee <z_init_static_threads+0x1a>
 8002452:	4639      	mov	r1, r7
 8002454:	3018      	adds	r0, #24
 8002456:	f000 fa57 	bl	8002908 <z_add_timeout>
 800245a:	e7f8      	b.n	800244e <z_init_static_threads+0x7a>
 800245c:	08003a0c 	.word	0x08003a0c
 8002460:	08003a0c 	.word	0x08003a0c
 8002464:	08003321 	.word	0x08003321

08002468 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
 8002468:	89c3      	ldrh	r3, [r0, #14]
 800246a:	2b7f      	cmp	r3, #127	; 0x7f
 800246c:	d812      	bhi.n	8002494 <sliceable+0x2c>
	int ret = slice_ticks;
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <sliceable+0x30>)
 8002470:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
 8002472:	b163      	cbz	r3, 800248e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <sliceable+0x34>)
 8002476:	f990 200e 	ldrsb.w	r2, [r0, #14]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	db09      	blt.n	8002494 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
 8002480:	7b43      	ldrb	r3, [r0, #13]
 8002482:	06db      	lsls	r3, r3, #27
 8002484:	d106      	bne.n	8002494 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <sliceable+0x38>)
 8002488:	1ac3      	subs	r3, r0, r3
 800248a:	bf18      	it	ne
 800248c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
 800248e:	f003 0001 	and.w	r0, r3, #1
 8002492:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
 8002494:	2300      	movs	r3, #0
 8002496:	e7fa      	b.n	800248e <sliceable+0x26>
 8002498:	24000318 	.word	0x24000318
 800249c:	24000314 	.word	0x24000314
 80024a0:	24000080 	.word	0x24000080

080024a4 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <slice_timeout+0x14>)

	slice_expired[cpu] = true;
 80024a6:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 80024a8:	1ac0      	subs	r0, r0, r3
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <slice_timeout+0x18>)
 80024ac:	10c0      	asrs	r0, r0, #3
 80024ae:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <slice_timeout+0x1c>)
 80024b2:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	24000180 	.word	0x24000180
 80024bc:	aaaaaaab 	.word	0xaaaaaaab
 80024c0:	24000322 	.word	0x24000322

080024c4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
	int cpu = _current_cpu->id;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <z_reset_time_slice+0x3c>)
{
 80024c6:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
 80024c8:	7c1e      	ldrb	r6, [r3, #16]
{
 80024ca:	4605      	mov	r5, r0

	z_abort_timeout(&slice_timeouts[cpu]);
 80024cc:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <z_reset_time_slice+0x40>)
 80024ce:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 80024d2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80024d6:	4620      	mov	r0, r4
 80024d8:	f000 ff26 	bl	8003328 <z_abort_timeout>
	slice_expired[cpu] = false;
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <z_reset_time_slice+0x44>)
 80024de:	2200      	movs	r2, #0
	if (sliceable(curr)) {
 80024e0:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
 80024e2:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
 80024e4:	f7ff ffc0 	bl	8002468 <sliceable>
 80024e8:	b148      	cbz	r0, 80024fe <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80024ec:	4620      	mov	r0, r4
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	3a01      	subs	r2, #1
	}
}
 80024f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80024f8:	17d3      	asrs	r3, r2, #31
 80024fa:	f000 ba05 	b.w	8002908 <z_add_timeout>
}
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	240002f0 	.word	0x240002f0
 8002504:	24000180 	.word	0x24000180
 8002508:	24000322 	.word	0x24000322
 800250c:	24000318 	.word	0x24000318
 8002510:	080024a5 	.word	0x080024a5

08002514 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002514:	b949      	cbnz	r1, 800252a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002516:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 800251a:	b930      	cbnz	r0, 800252a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	429a      	cmp	r2, r3
 8002524:	d001      	beq.n	800252a <z_reschedule+0x16>
	ret = arch_swap(key);
 8002526:	f7fe bd05 	b.w	8000f34 <arch_swap>
 800252a:	f381 8811 	msr	BASEPRI, r1
 800252e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
 8002532:	4770      	bx	lr
 8002534:	240002f0 	.word	0x240002f0

08002538 <k_sched_lock>:
	__asm__ volatile(
 8002538:	f04f 0310 	mov.w	r3, #16
 800253c:	f3ef 8111 	mrs	r1, BASEPRI
 8002540:	f383 8812 	msr	BASEPRI_MAX, r3
 8002544:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <k_sched_lock+0x24>)
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	7bd3      	ldrb	r3, [r2, #15]
 800254e:	3b01      	subs	r3, #1
 8002550:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8002552:	f381 8811 	msr	BASEPRI, r1
 8002556:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800255a:	4770      	bx	lr
 800255c:	240002f0 	.word	0x240002f0

08002560 <update_cache>:
{
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 8002564:	480c      	ldr	r0, [pc, #48]	; (8002598 <update_cache+0x38>)
 8002566:	f000 fea3 	bl	80032b0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800256a:	4d0c      	ldr	r5, [pc, #48]	; (800259c <update_cache+0x3c>)
 800256c:	4604      	mov	r4, r0
 800256e:	b900      	cbnz	r0, 8002572 <update_cache+0x12>
 8002570:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8002572:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8002574:	b94a      	cbnz	r2, 800258a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 8002576:	7b5a      	ldrb	r2, [r3, #13]
 8002578:	06d2      	lsls	r2, r2, #27
 800257a:	d106      	bne.n	800258a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800257c:	69a2      	ldr	r2, [r4, #24]
 800257e:	b922      	cbnz	r2, 800258a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8002580:	89da      	ldrh	r2, [r3, #14]
 8002582:	2a7f      	cmp	r2, #127	; 0x7f
 8002584:	d901      	bls.n	800258a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 8002586:	616b      	str	r3, [r5, #20]
}
 8002588:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 800258a:	429c      	cmp	r4, r3
 800258c:	d002      	beq.n	8002594 <update_cache+0x34>
			z_reset_time_slice(thread);
 800258e:	4620      	mov	r0, r4
 8002590:	f7ff ff98 	bl	80024c4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8002594:	616c      	str	r4, [r5, #20]
}
 8002596:	e7f7      	b.n	8002588 <update_cache+0x28>
 8002598:	24000308 	.word	0x24000308
 800259c:	240002f0 	.word	0x240002f0

080025a0 <move_thread_to_end_of_prio_q>:
{
 80025a0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 80025a2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 80025a6:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 80025a8:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 80025aa:	2a00      	cmp	r2, #0
 80025ac:	da04      	bge.n	80025b8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80025ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 80025b4:	f000 fe54 	bl	8003260 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80025b8:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 80025ba:	4a16      	ldr	r2, [pc, #88]	; (8002614 <move_thread_to_end_of_prio_q+0x74>)
 80025bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025c0:	4610      	mov	r0, r2
 80025c2:	734b      	strb	r3, [r1, #13]
 80025c4:	f850 3f18 	ldr.w	r3, [r0, #24]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80025c8:	4283      	cmp	r3, r0
 80025ca:	d01c      	beq.n	8002606 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80025cc:	b1db      	cbz	r3, 8002606 <move_thread_to_end_of_prio_q+0x66>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 80025ce:	69d6      	ldr	r6, [r2, #28]
	int32_t b1 = thread_1->base.prio;
 80025d0:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 80025d4:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
 80025d8:	42a5      	cmp	r5, r4
 80025da:	d00f      	beq.n	80025fc <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 80025dc:	1b64      	subs	r4, r4, r5
		if (z_sched_prio_cmp(thread, t) > 0) {
 80025de:	2c00      	cmp	r4, #0
 80025e0:	dd0c      	ble.n	80025fc <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80025e2:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 80025e4:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 80025e8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80025ea:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 80025ec:	6890      	ldr	r0, [r2, #8]
 80025ee:	1a43      	subs	r3, r0, r1
 80025f0:	4258      	negs	r0, r3
}
 80025f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80025f6:	4158      	adcs	r0, r3
 80025f8:	f7ff bfb2 	b.w	8002560 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80025fc:	42b3      	cmp	r3, r6
 80025fe:	d002      	beq.n	8002606 <move_thread_to_end_of_prio_q+0x66>
 8002600:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e6      	bne.n	80025d4 <move_thread_to_end_of_prio_q+0x34>
	sys_dnode_t *const tail = list->tail;
 8002606:	69d3      	ldr	r3, [r2, #28]
	node->prev = tail;
 8002608:	e9c1 0300 	strd	r0, r3, [r1]
	tail->next = node;
 800260c:	6019      	str	r1, [r3, #0]
	list->tail = node;
 800260e:	61d1      	str	r1, [r2, #28]
}
 8002610:	e7ec      	b.n	80025ec <move_thread_to_end_of_prio_q+0x4c>
 8002612:	bf00      	nop
 8002614:	240002f0 	.word	0x240002f0

08002618 <z_time_slice>:
{
 8002618:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800261a:	f04f 0310 	mov.w	r3, #16
 800261e:	f3ef 8511 	mrs	r5, BASEPRI
 8002622:	f383 8812 	msr	BASEPRI_MAX, r3
 8002626:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <z_time_slice+0x54>)
	if (pending_current == curr) {
 800262c:	4a10      	ldr	r2, [pc, #64]	; (8002670 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
 800262e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
 8002630:	6810      	ldr	r0, [r2, #0]
 8002632:	42a0      	cmp	r0, r4
 8002634:	d106      	bne.n	8002644 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
 8002636:	f7ff ff45 	bl	80024c4 <z_reset_time_slice>
	__asm__ volatile(
 800263a:	f385 8811 	msr	BASEPRI, r5
 800263e:	f3bf 8f6f 	isb	sy
}
 8002642:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8002644:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 8002646:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
 8002648:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <z_time_slice+0x5c>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f3      	beq.n	800263a <z_time_slice+0x22>
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff ff08 	bl	8002468 <sliceable>
 8002658:	2800      	cmp	r0, #0
 800265a:	d0ee      	beq.n	800263a <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
 800265c:	7b63      	ldrb	r3, [r4, #13]
 800265e:	06db      	lsls	r3, r3, #27
 8002660:	d102      	bne.n	8002668 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
 8002662:	4620      	mov	r0, r4
 8002664:	f7ff ff9c 	bl	80025a0 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
 8002668:	4620      	mov	r0, r4
 800266a:	e7e4      	b.n	8002636 <z_time_slice+0x1e>
 800266c:	240002f0 	.word	0x240002f0
 8002670:	24000310 	.word	0x24000310
 8002674:	24000322 	.word	0x24000322

08002678 <ready_thread>:
{
 8002678:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800267a:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800267e:	7b43      	ldrb	r3, [r0, #13]
 8002680:	2a00      	cmp	r2, #0
 8002682:	db2b      	blt.n	80026dc <ready_thread+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8002684:	06da      	lsls	r2, r3, #27
 8002686:	d129      	bne.n	80026dc <ready_thread+0x64>
 8002688:	6982      	ldr	r2, [r0, #24]
 800268a:	bb3a      	cbnz	r2, 80026dc <ready_thread+0x64>
	return list->head == list;
 800268c:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800268e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002692:	4611      	mov	r1, r2
 8002694:	7343      	strb	r3, [r0, #13]
 8002696:	f851 3f18 	ldr.w	r3, [r1, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800269a:	428b      	cmp	r3, r1
 800269c:	d018      	beq.n	80026d0 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800269e:	b1bb      	cbz	r3, 80026d0 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
 80026a0:	69d6      	ldr	r6, [r2, #28]
	int32_t b1 = thread_1->base.prio;
 80026a2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 80026a6:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
 80026aa:	42a5      	cmp	r5, r4
 80026ac:	d00b      	beq.n	80026c6 <ready_thread+0x4e>
		return b2 - b1;
 80026ae:	1b64      	subs	r4, r4, r5
		if (z_sched_prio_cmp(thread, t) > 0) {
 80026b0:	2c00      	cmp	r4, #0
 80026b2:	dd08      	ble.n	80026c6 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 80026b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80026b6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 80026ba:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80026bc:	6058      	str	r0, [r3, #4]
		update_cache(0);
 80026be:	2000      	movs	r0, #0
}
 80026c0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80026c2:	f7ff bf4d 	b.w	8002560 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80026c6:	429e      	cmp	r6, r3
 80026c8:	d002      	beq.n	80026d0 <ready_thread+0x58>
 80026ca:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ea      	bne.n	80026a6 <ready_thread+0x2e>
	sys_dnode_t *const tail = list->tail;
 80026d0:	69d3      	ldr	r3, [r2, #28]
	node->prev = tail;
 80026d2:	e9c0 1300 	strd	r1, r3, [r0]
	tail->next = node;
 80026d6:	6018      	str	r0, [r3, #0]
	list->tail = node;
 80026d8:	61d0      	str	r0, [r2, #28]
}
 80026da:	e7f0      	b.n	80026be <ready_thread+0x46>
}
 80026dc:	bc70      	pop	{r4, r5, r6}
 80026de:	4770      	bx	lr
 80026e0:	240002f0 	.word	0x240002f0

080026e4 <z_sched_start>:
{
 80026e4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80026e6:	f04f 0210 	mov.w	r2, #16
 80026ea:	f3ef 8411 	mrs	r4, BASEPRI
 80026ee:	f382 8812 	msr	BASEPRI_MAX, r2
 80026f2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80026f6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80026f8:	0751      	lsls	r1, r2, #29
 80026fa:	d404      	bmi.n	8002706 <z_sched_start+0x22>
	__asm__ volatile(
 80026fc:	f384 8811 	msr	BASEPRI, r4
 8002700:	f3bf 8f6f 	isb	sy
}
 8002704:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002706:	f022 0204 	bic.w	r2, r2, #4
 800270a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 800270c:	f7ff ffb4 	bl	8002678 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8002710:	4621      	mov	r1, r4
 8002712:	4802      	ldr	r0, [pc, #8]	; (800271c <z_sched_start+0x38>)
}
 8002714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8002718:	f7ff befc 	b.w	8002514 <z_reschedule>
 800271c:	24000322 	.word	0x24000322

08002720 <k_sched_unlock>:
{
 8002720:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002722:	f04f 0310 	mov.w	r3, #16
 8002726:	f3ef 8411 	mrs	r4, BASEPRI
 800272a:	f383 8812 	msr	BASEPRI_MAX, r3
 800272e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <k_sched_unlock+0x34>)
		update_cache(0);
 8002734:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	7bd3      	ldrb	r3, [r2, #15]
 800273a:	3301      	adds	r3, #1
 800273c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800273e:	f7ff ff0f 	bl	8002560 <update_cache>
	__asm__ volatile(
 8002742:	f384 8811 	msr	BASEPRI, r4
 8002746:	f3bf 8f6f 	isb	sy
}
 800274a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 800274e:	f000 bda5 	b.w	800329c <z_reschedule_unlocked>
 8002752:	bf00      	nop
 8002754:	240002f0 	.word	0x240002f0

08002758 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8002758:	4b02      	ldr	r3, [pc, #8]	; (8002764 <z_sched_init+0xc>)
 800275a:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
 800275e:	e9c3 2206 	strd	r2, r2, [r3, #24]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
 8002762:	4770      	bx	lr
 8002764:	240002f0 	.word	0x240002f0

08002768 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8002768:	4b01      	ldr	r3, [pc, #4]	; (8002770 <z_impl_z_current_get+0x8>)
 800276a:	6898      	ldr	r0, [r3, #8]
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	240002f0 	.word	0x240002f0

08002774 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8002774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002778:	4604      	mov	r4, r0
	__asm__ volatile(
 800277a:	f04f 0310 	mov.w	r3, #16
 800277e:	f3ef 8611 	mrs	r6, BASEPRI
 8002782:	f383 8812 	msr	BASEPRI_MAX, r3
 8002786:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 800278a:	7b03      	ldrb	r3, [r0, #12]
 800278c:	07d9      	lsls	r1, r3, #31
 800278e:	d50b      	bpl.n	80027a8 <z_thread_abort+0x34>
	__asm__ volatile(
 8002790:	f386 8811 	msr	BASEPRI, r6
 8002794:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8002798:	4040      	eors	r0, r0
 800279a:	f380 8811 	msr	BASEPRI, r0
 800279e:	f04f 0004 	mov.w	r0, #4
 80027a2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 80027a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 80027a8:	7b43      	ldrb	r3, [r0, #13]
 80027aa:	071a      	lsls	r2, r3, #28
 80027ac:	d504      	bpl.n	80027b8 <z_thread_abort+0x44>
 80027ae:	f386 8811 	msr	BASEPRI, r6
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	e7f5      	b.n	80027a4 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80027b8:	f023 0220 	bic.w	r2, r3, #32
 80027bc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 80027c0:	09d2      	lsrs	r2, r2, #7
 80027c2:	d120      	bne.n	8002806 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80027c4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 80027c6:	68a3      	ldr	r3, [r4, #8]
 80027c8:	b113      	cbz	r3, 80027d0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f000 fd50 	bl	8003270 <unpend_thread_no_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80027d0:	f104 0758 	add.w	r7, r4, #88	; 0x58
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80027d4:	f04f 0800 	mov.w	r8, #0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80027d8:	f104 0018 	add.w	r0, r4, #24
 80027dc:	f000 fda4 	bl	8003328 <z_abort_timeout>
	return list->head == list;
 80027e0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80027e2:	42bd      	cmp	r5, r7
 80027e4:	d000      	beq.n	80027e8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80027e6:	b9b5      	cbnz	r5, 8002816 <z_thread_abort+0xa2>
		update_cache(1);
 80027e8:	2001      	movs	r0, #1
 80027ea:	f7ff feb9 	bl	8002560 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <z_thread_abort+0xbc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	42a3      	cmp	r3, r4
 80027f4:	d1db      	bne.n	80027ae <z_thread_abort+0x3a>
 80027f6:	f3ef 8305 	mrs	r3, IPSR
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1d7      	bne.n	80027ae <z_thread_abort+0x3a>
 80027fe:	4630      	mov	r0, r6
 8002800:	f7fe fb98 	bl	8000f34 <arch_swap>
	return ret;
 8002804:	e7d3      	b.n	80027ae <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002806:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800280a:	f043 0308 	orr.w	r3, r3, #8
 800280e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002810:	f000 fd26 	bl	8003260 <sys_dlist_remove>
}
 8002814:	e7d7      	b.n	80027c6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8002816:	4628      	mov	r0, r5
 8002818:	f000 fd2a 	bl	8003270 <unpend_thread_no_timeout>
 800281c:	f105 0018 	add.w	r0, r5, #24
 8002820:	f000 fd82 	bl	8003328 <z_abort_timeout>
		ready_thread(thread);
 8002824:	4628      	mov	r0, r5
 8002826:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 800282a:	f7ff ff25 	bl	8002678 <ready_thread>
 800282e:	e7d7      	b.n	80027e0 <z_thread_abort+0x6c>
 8002830:	240002f0 	.word	0x240002f0

08002834 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8002834:	4809      	ldr	r0, [pc, #36]	; (800285c <z_data_copy+0x28>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <z_data_copy+0x2c>)
 8002838:	490a      	ldr	r1, [pc, #40]	; (8002864 <z_data_copy+0x30>)
 800283a:	1a12      	subs	r2, r2, r0
{
 800283c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 800283e:	f000 fd01 	bl	8003244 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <z_data_copy+0x34>)
 8002844:	4909      	ldr	r1, [pc, #36]	; (800286c <z_data_copy+0x38>)
 8002846:	480a      	ldr	r0, [pc, #40]	; (8002870 <z_data_copy+0x3c>)
 8002848:	f000 fcfc 	bl	8003244 <z_early_memcpy>
	z_early_memcpy(&__itcm_start, &__itcm_load_start,
		       (uintptr_t) &__itcm_size);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
		       __dtcm_data_end - __dtcm_data_start);
 800284c:	4809      	ldr	r0, [pc, #36]	; (8002874 <z_data_copy+0x40>)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <z_data_copy+0x44>)
 8002850:	490a      	ldr	r1, [pc, #40]	; (800287c <z_data_copy+0x48>)
 8002852:	1a12      	subs	r2, r2, r0
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8002854:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 8002858:	f000 bcf4 	b.w	8003244 <z_early_memcpy>
 800285c:	24000000 	.word	0x24000000
 8002860:	2400007e 	.word	0x2400007e
 8002864:	08003e74 	.word	0x08003e74
 8002868:	00000000 	.word	0x00000000
 800286c:	08003e74 	.word	0x08003e74
 8002870:	24000000 	.word	0x24000000
 8002874:	20000000 	.word	0x20000000
 8002878:	20000000 	.word	0x20000000
 800287c:	08003ef2 	.word	0x08003ef2

08002880 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <elapsed+0x10>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	b90b      	cbnz	r3, 800288a <elapsed+0xa>
 8002886:	f7ff bbdd 	b.w	8002044 <sys_clock_elapsed>
}
 800288a:	2000      	movs	r0, #0
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2400031c 	.word	0x2400031c

08002894 <next_timeout>:
	return list->head == list;
 8002894:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <next_timeout+0x38>)

static int32_t next_timeout(void)
{
 8002896:	b510      	push	{r4, lr}
 8002898:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800289a:	429c      	cmp	r4, r3
 800289c:	bf08      	it	eq
 800289e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 80028a0:	f7ff ffee 	bl	8002880 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 80028a4:	b174      	cbz	r4, 80028c4 <next_timeout+0x30>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 80028a6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80028aa:	1a1b      	subs	r3, r3, r0
 80028ac:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 80028b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028b4:	f170 0200 	sbcs.w	r2, r0, #0
 80028b8:	da04      	bge.n	80028c4 <next_timeout+0x30>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 80028ba:	2800      	cmp	r0, #0
 80028bc:	bfac      	ite	ge
 80028be:	4618      	movge	r0, r3
 80028c0:	2000      	movlt	r0, #0
	}

	return ret;
}
 80028c2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 80028c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
 80028c8:	e7fb      	b.n	80028c2 <next_timeout+0x2e>
 80028ca:	bf00      	nop
 80028cc:	24000038 	.word	0x24000038

080028d0 <remove_timeout>:
{
 80028d0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80028d2:	b170      	cbz	r0, 80028f2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <remove_timeout+0x34>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4298      	cmp	r0, r3
 80028da:	d00a      	beq.n	80028f2 <remove_timeout+0x22>
 80028dc:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 80028de:	b143      	cbz	r3, 80028f2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80028e0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80028e4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80028e8:	1912      	adds	r2, r2, r4
 80028ea:	eb41 0105 	adc.w	r1, r1, r5
 80028ee:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 80028f2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 80028f6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80028f8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80028fa:	2300      	movs	r3, #0
	node->prev = NULL;
 80028fc:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002900:	bd30      	pop	{r4, r5, pc}
 8002902:	bf00      	nop
 8002904:	24000038 	.word	0x24000038

08002908 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	bf08      	it	eq
 800290e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8002912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002914:	4604      	mov	r4, r0
 8002916:	461f      	mov	r7, r3
 8002918:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800291a:	d062      	beq.n	80029e2 <z_add_timeout+0xda>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800291c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 800291e:	f04f 0310 	mov.w	r3, #16
 8002922:	f3ef 8611 	mrs	r6, BASEPRI
 8002926:	f383 8812 	msr	BASEPRI_MAX, r3
 800292a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800292e:	f06f 0201 	mvn.w	r2, #1
 8002932:	f04f 3cff 	mov.w	ip, #4294967295
 8002936:	1b53      	subs	r3, r2, r5
 8002938:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800293c:	2b00      	cmp	r3, #0
 800293e:	db1b      	blt.n	8002978 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <z_add_timeout+0xdc>)
 8002942:	e9d3 1300 	ldrd	r1, r3, [r3]
 8002946:	1a52      	subs	r2, r2, r1
 8002948:	eb6c 0303 	sbc.w	r3, ip, r3
 800294c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 800294e:	eb63 0307 	sbc.w	r3, r3, r7
 8002952:	2d01      	cmp	r5, #1
 8002954:	f173 0200 	sbcs.w	r2, r3, #0
 8002958:	bfbc      	itt	lt
 800295a:	2501      	movlt	r5, #1
 800295c:	2300      	movlt	r3, #0
 800295e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 8002962:	4821      	ldr	r0, [pc, #132]	; (80029e8 <z_add_timeout+0xe0>)
	sys_dnode_t *const tail = list->tail;
 8002964:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002968:	4283      	cmp	r3, r0
 800296a:	d118      	bne.n	800299e <z_add_timeout+0x96>
	node->prev = tail;
 800296c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8002970:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8002974:	6044      	str	r4, [r0, #4]
}
 8002976:	e026      	b.n	80029c6 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8002978:	f7ff ff82 	bl	8002880 <elapsed>
 800297c:	3501      	adds	r5, #1
 800297e:	f147 0700 	adc.w	r7, r7, #0
 8002982:	182d      	adds	r5, r5, r0
 8002984:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 8002988:	e9c4 5704 	strd	r5, r7, [r4, #16]
 800298c:	e7e9      	b.n	8002962 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 800298e:	1a52      	subs	r2, r2, r1
 8002990:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8002994:	459c      	cmp	ip, r3
 8002996:	e9c4 2504 	strd	r2, r5, [r4, #16]
 800299a:	d0e7      	beq.n	800296c <z_add_timeout+0x64>
 800299c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0e4      	beq.n	800296c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 80029a2:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 80029a6:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 80029aa:	428a      	cmp	r2, r1
 80029ac:	eb75 0e07 	sbcs.w	lr, r5, r7
 80029b0:	daed      	bge.n	800298e <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 80029b2:	1a8a      	subs	r2, r1, r2
 80029b4:	eb67 0505 	sbc.w	r5, r7, r5
 80029b8:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 80029bc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80029be:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80029c2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80029c4:	605c      	str	r4, [r3, #4]
	return list->head == list;
 80029c6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80029c8:	4283      	cmp	r3, r0
 80029ca:	d006      	beq.n	80029da <z_add_timeout+0xd2>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80029cc:	429c      	cmp	r4, r3
 80029ce:	d104      	bne.n	80029da <z_add_timeout+0xd2>
			sys_clock_set_timeout(next_timeout(), false);
 80029d0:	f7ff ff60 	bl	8002894 <next_timeout>
 80029d4:	2100      	movs	r1, #0
 80029d6:	f7ff fac5 	bl	8001f64 <sys_clock_set_timeout>
	__asm__ volatile(
 80029da:	f386 8811 	msr	BASEPRI, r6
 80029de:	f3bf 8f6f 	isb	sy
		}
	}
}
 80029e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029e4:	24000198 	.word	0x24000198
 80029e8:	24000038 	.word	0x24000038

080029ec <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
 80029ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
 80029f0:	f04f 0310 	mov.w	r3, #16
 80029f4:	f3ef 8811 	mrs	r8, BASEPRI
 80029f8:	f383 8812 	msr	BASEPRI_MAX, r3
 80029fc:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8002a00:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8002ab4 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8002a04:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002ab8 <sys_clock_announce+0xcc>
 8002a08:	4d2c      	ldr	r5, [pc, #176]	; (8002abc <sys_clock_announce+0xd0>)
 8002a0a:	f8c9 0000 	str.w	r0, [r9]
 8002a0e:	f8da 0000 	ldr.w	r0, [sl]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002a12:	4550      	cmp	r0, sl
 8002a14:	d034      	beq.n	8002a80 <sys_clock_announce+0x94>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
 8002a16:	2600      	movs	r6, #0
 8002a18:	2700      	movs	r7, #0
	     (t != NULL) && (t->dticks <= announce_remaining);
 8002a1a:	f8d9 2000 	ldr.w	r2, [r9]
		curr_tick += dt;
 8002a1e:	e9d5 1c00 	ldrd	r1, ip, [r5]
	for (t = first();
 8002a22:	b368      	cbz	r0, 8002a80 <sys_clock_announce+0x94>
	     (t != NULL) && (t->dticks <= announce_remaining);
 8002a24:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 8002a28:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 8002a2c:	42a2      	cmp	r2, r4
 8002a2e:	eb7e 0b03 	sbcs.w	fp, lr, r3
 8002a32:	da05      	bge.n	8002a40 <sys_clock_announce+0x54>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 8002a34:	1aa4      	subs	r4, r4, r2
 8002a36:	eb63 030e 	sbc.w	r3, r3, lr
 8002a3a:	e9c0 4304 	strd	r4, r3, [r0, #16]
 8002a3e:	e01f      	b.n	8002a80 <sys_clock_announce+0x94>
		curr_tick += dt;
 8002a40:	1861      	adds	r1, r4, r1
 8002a42:	eb4c 73e4 	adc.w	r3, ip, r4, asr #31
		t->dticks = 0;
 8002a46:	e9c0 6704 	strd	r6, r7, [r0, #16]
		curr_tick += dt;
 8002a4a:	e9c5 1300 	strd	r1, r3, [r5]
		remove_timeout(t);
 8002a4e:	f7ff ff3f 	bl	80028d0 <remove_timeout>
	__asm__ volatile(
 8002a52:	f388 8811 	msr	BASEPRI, r8
 8002a56:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002a5a:	6883      	ldr	r3, [r0, #8]
 8002a5c:	4798      	blx	r3
	__asm__ volatile(
 8002a5e:	f04f 0310 	mov.w	r3, #16
 8002a62:	f3ef 8811 	mrs	r8, BASEPRI
 8002a66:	f383 8812 	msr	BASEPRI_MAX, r3
 8002a6a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8002a6e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
 8002a72:	f8da 0000 	ldr.w	r0, [sl]
 8002a76:	1b1b      	subs	r3, r3, r4
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002a78:	4550      	cmp	r0, sl
 8002a7a:	f8c9 3000 	str.w	r3, [r9]
 8002a7e:	d1cc      	bne.n	8002a1a <sys_clock_announce+0x2e>
	}

	curr_tick += announce_remaining;
 8002a80:	f8d9 1000 	ldr.w	r1, [r9]
	announce_remaining = 0;
 8002a84:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8002a86:	e9d5 3200 	ldrd	r3, r2, [r5]
	announce_remaining = 0;
 8002a8a:	f8c9 4000 	str.w	r4, [r9]
	curr_tick += announce_remaining;
 8002a8e:	185b      	adds	r3, r3, r1
 8002a90:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8002a94:	e9c5 3200 	strd	r3, r2, [r5]

	sys_clock_set_timeout(next_timeout(), false);
 8002a98:	f7ff fefc 	bl	8002894 <next_timeout>
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	f7ff fa61 	bl	8001f64 <sys_clock_set_timeout>
	__asm__ volatile(
 8002aa2:	f388 8811 	msr	BASEPRI, r8
 8002aa6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
 8002aaa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
 8002aae:	f7ff bdb3 	b.w	8002618 <z_time_slice>
 8002ab2:	bf00      	nop
 8002ab4:	24000038 	.word	0x24000038
 8002ab8:	2400031c 	.word	0x2400031c
 8002abc:	24000198 	.word	0x24000198

08002ac0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8002ac0:	4801      	ldr	r0, [pc, #4]	; (8002ac8 <boot_banner+0x8>)
 8002ac2:	f000 b806 	b.w	8002ad2 <printk>
 8002ac6:	bf00      	nop
 8002ac8:	08003e44 	.word	0x08003e44

08002acc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8002acc:	4770      	bx	lr

08002ace <arch_printk_char_out>:
}
 8002ace:	2000      	movs	r0, #0
 8002ad0:	4770      	bx	lr

08002ad2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 8002ad2:	b40f      	push	{r0, r1, r2, r3}
 8002ad4:	b507      	push	{r0, r1, r2, lr}
 8002ad6:	a904      	add	r1, sp, #16
 8002ad8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8002adc:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 8002ade:	f7fd fd75 	bl	80005cc <vprintk>

	va_end(ap);
}
 8002ae2:	b003      	add	sp, #12
 8002ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ae8:	b004      	add	sp, #16
 8002aea:	4770      	bx	lr

08002aec <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8002aec:	4604      	mov	r4, r0
 8002aee:	4608      	mov	r0, r1
 8002af0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8002af2:	461a      	mov	r2, r3
{
 8002af4:	b508      	push	{r3, lr}
	entry(p1, p2, p3);
 8002af6:	47a0      	blx	r4
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
 8002af8:	f7ff fe36 	bl	8002768 <z_impl_z_current_get>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
 8002afc:	f7fe fc42 	bl	8001384 <z_impl_k_thread_abort>

08002b00 <encode_uint>:
{
 8002b00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b04:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
 8002b06:	78d3      	ldrb	r3, [r2, #3]
{
 8002b08:	4680      	mov	r8, r0
 8002b0a:	460f      	mov	r7, r1
	switch (specifier) {
 8002b0c:	2b6f      	cmp	r3, #111	; 0x6f
{
 8002b0e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8002b10:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8002b14:	d029      	beq.n	8002b6a <encode_uint+0x6a>
 8002b16:	d824      	bhi.n	8002b62 <encode_uint+0x62>
		return 16;
 8002b18:	2b58      	cmp	r3, #88	; 0x58
 8002b1a:	bf14      	ite	ne
 8002b1c:	260a      	movne	r6, #10
 8002b1e:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 8002b20:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8002b24:	4632      	mov	r2, r6
 8002b26:	2300      	movs	r3, #0
 8002b28:	4640      	mov	r0, r8
 8002b2a:	4639      	mov	r1, r7
 8002b2c:	f7fd fbb4 	bl	8000298 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002b30:	2a09      	cmp	r2, #9
 8002b32:	b2d4      	uxtb	r4, r2
 8002b34:	d81e      	bhi.n	8002b74 <encode_uint+0x74>
 8002b36:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8002b38:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002b3a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8002b3c:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002b40:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8002b44:	d301      	bcc.n	8002b4a <encode_uint+0x4a>
 8002b46:	45d1      	cmp	r9, sl
 8002b48:	d811      	bhi.n	8002b6e <encode_uint+0x6e>
	if (conv->flag_hash) {
 8002b4a:	782b      	ldrb	r3, [r5, #0]
 8002b4c:	069b      	lsls	r3, r3, #26
 8002b4e:	d505      	bpl.n	8002b5c <encode_uint+0x5c>
		if (radix == 8) {
 8002b50:	2e08      	cmp	r6, #8
 8002b52:	d115      	bne.n	8002b80 <encode_uint+0x80>
			conv->altform_0 = true;
 8002b54:	78ab      	ldrb	r3, [r5, #2]
 8002b56:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8002b5a:	70ab      	strb	r3, [r5, #2]
}
 8002b5c:	4648      	mov	r0, r9
 8002b5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8002b62:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8002b66:	2b70      	cmp	r3, #112	; 0x70
 8002b68:	e7d7      	b.n	8002b1a <encode_uint+0x1a>
	switch (specifier) {
 8002b6a:	2608      	movs	r6, #8
 8002b6c:	e7d8      	b.n	8002b20 <encode_uint+0x20>
		value /= radix;
 8002b6e:	4680      	mov	r8, r0
 8002b70:	460f      	mov	r7, r1
 8002b72:	e7d7      	b.n	8002b24 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002b74:	f1bb 0f19 	cmp.w	fp, #25
 8002b78:	bf94      	ite	ls
 8002b7a:	3437      	addls	r4, #55	; 0x37
 8002b7c:	3457      	addhi	r4, #87	; 0x57
 8002b7e:	e7db      	b.n	8002b38 <encode_uint+0x38>
		} else if (radix == 16) {
 8002b80:	2e10      	cmp	r6, #16
 8002b82:	d1eb      	bne.n	8002b5c <encode_uint+0x5c>
			conv->altform_0c = true;
 8002b84:	78ab      	ldrb	r3, [r5, #2]
 8002b86:	f043 0310 	orr.w	r3, r3, #16
 8002b8a:	e7e6      	b.n	8002b5a <encode_uint+0x5a>

08002b8c <outs>:
{
 8002b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b90:	4607      	mov	r7, r0
 8002b92:	4688      	mov	r8, r1
 8002b94:	4615      	mov	r5, r2
 8002b96:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002b98:	4614      	mov	r4, r2
 8002b9a:	42b4      	cmp	r4, r6
 8002b9c:	eba4 0005 	sub.w	r0, r4, r5
 8002ba0:	d302      	bcc.n	8002ba8 <outs+0x1c>
 8002ba2:	b93e      	cbnz	r6, 8002bb4 <outs+0x28>
 8002ba4:	7823      	ldrb	r3, [r4, #0]
 8002ba6:	b12b      	cbz	r3, 8002bb4 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8002ba8:	4641      	mov	r1, r8
 8002baa:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002bae:	47b8      	blx	r7
		if (rc < 0) {
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	daf2      	bge.n	8002b9a <outs+0xe>
}
 8002bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bb8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8002bb8:	4770      	bx	lr

08002bba <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8002bba:	2000      	movs	r0, #0
 8002bbc:	4770      	bx	lr

08002bbe <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002bbe:	f000 bb24 	b.w	800320a <z_fatal_error>

08002bc2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8002bc2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002bc4:	6800      	ldr	r0, [r0, #0]
 8002bc6:	f000 bb20 	b.w	800320a <z_fatal_error>

08002bca <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002bca:	2100      	movs	r1, #0
 8002bcc:	2001      	movs	r0, #1
 8002bce:	f7ff bff6 	b.w	8002bbe <z_arm_fatal_error>

08002bd2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8002bd2:	b508      	push	{r3, lr}
	handler();
 8002bd4:	f7fe f986 	bl	8000ee4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002bdc:	f7fe ba54 	b.w	8001088 <z_arm_exc_exit>

08002be0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8002be0:	4603      	mov	r3, r0
	size_t n = 0;
 8002be2:	2000      	movs	r0, #0

	while (*s != '\0') {
 8002be4:	5c1a      	ldrb	r2, [r3, r0]
 8002be6:	b902      	cbnz	r2, 8002bea <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8002be8:	4770      	bx	lr
		n++;
 8002bea:	3001      	adds	r0, #1
 8002bec:	e7fa      	b.n	8002be4 <strlen+0x4>

08002bee <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002bee:	1e43      	subs	r3, r0, #1
 8002bf0:	440a      	add	r2, r1
{
 8002bf2:	b510      	push	{r4, lr}
	while (n > 0) {
 8002bf4:	4291      	cmp	r1, r2
 8002bf6:	d100      	bne.n	8002bfa <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002bf8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8002bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002c02:	e7f7      	b.n	8002bf4 <memcpy+0x6>

08002c04 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002c04:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8002c06:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8002c08:	4603      	mov	r3, r0
	while (n > 0) {
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d100      	bne.n	8002c10 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002c0e:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8002c10:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002c14:	e7f9      	b.n	8002c0a <memset+0x6>

08002c16 <_stdout_hook_default>:
}
 8002c16:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1a:	4770      	bx	lr

08002c1c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8002c1c:	4603      	mov	r3, r0
	size_t n = 0;
 8002c1e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8002c20:	5c1a      	ldrb	r2, [r3, r0]
 8002c22:	b10a      	cbz	r2, 8002c28 <strnlen+0xc>
 8002c24:	4288      	cmp	r0, r1
 8002c26:	d100      	bne.n	8002c2a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8002c28:	4770      	bx	lr
		n++;
 8002c2a:	3001      	adds	r0, #1
 8002c2c:	e7f8      	b.n	8002c20 <strnlen+0x4>

08002c2e <stm32_exti_init>:
{
 8002c2e:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 8002c30:	2206      	movs	r2, #6
 8002c32:	2101      	movs	r1, #1
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7fe fcaf 	bl	8001598 <stm32_fill_irq_table>
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2006      	movs	r0, #6
 8002c3e:	4611      	mov	r1, r2
 8002c40:	f7fe f93a 	bl	8000eb8 <z_arm_irq_priority_set>
 8002c44:	2101      	movs	r1, #1
 8002c46:	2207      	movs	r2, #7
 8002c48:	4608      	mov	r0, r1
 8002c4a:	f7fe fca5 	bl	8001598 <stm32_fill_irq_table>
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2007      	movs	r0, #7
 8002c52:	4611      	mov	r1, r2
 8002c54:	f7fe f930 	bl	8000eb8 <z_arm_irq_priority_set>
 8002c58:	2208      	movs	r2, #8
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f7fe fc9b 	bl	8001598 <stm32_fill_irq_table>
 8002c62:	2200      	movs	r2, #0
 8002c64:	2008      	movs	r0, #8
 8002c66:	4611      	mov	r1, r2
 8002c68:	f7fe f926 	bl	8000eb8 <z_arm_irq_priority_set>
 8002c6c:	2209      	movs	r2, #9
 8002c6e:	2101      	movs	r1, #1
 8002c70:	2003      	movs	r0, #3
 8002c72:	f7fe fc91 	bl	8001598 <stm32_fill_irq_table>
 8002c76:	2200      	movs	r2, #0
 8002c78:	2009      	movs	r0, #9
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	f7fe f91c 	bl	8000eb8 <z_arm_irq_priority_set>
 8002c80:	220a      	movs	r2, #10
 8002c82:	2101      	movs	r1, #1
 8002c84:	2004      	movs	r0, #4
 8002c86:	f7fe fc87 	bl	8001598 <stm32_fill_irq_table>
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	200a      	movs	r0, #10
 8002c8e:	4611      	mov	r1, r2
 8002c90:	f7fe f912 	bl	8000eb8 <z_arm_irq_priority_set>
 8002c94:	2105      	movs	r1, #5
 8002c96:	2217      	movs	r2, #23
 8002c98:	4608      	mov	r0, r1
 8002c9a:	f7fe fc7d 	bl	8001598 <stm32_fill_irq_table>
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2017      	movs	r0, #23
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	f7fe f908 	bl	8000eb8 <z_arm_irq_priority_set>
 8002ca8:	2228      	movs	r2, #40	; 0x28
 8002caa:	2106      	movs	r1, #6
 8002cac:	200a      	movs	r0, #10
 8002cae:	f7fe fc73 	bl	8001598 <stm32_fill_irq_table>
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2028      	movs	r0, #40	; 0x28
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	f7fe f8fe 	bl	8000eb8 <z_arm_irq_priority_set>
}
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	bd08      	pop	{r3, pc}

08002cc0 <stm32_exti_disable>:
	if (line < 32) {
 8002cc0:	281f      	cmp	r0, #31
 8002cc2:	dc0a      	bgt.n	8002cda <stm32_exti_disable+0x1a>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
		LL_EXTI_DisableIT_0_31(BIT((uint32_t)line));
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8002cce:	fa02 f000 	lsl.w	r0, r2, r0
 8002cd2:	ea23 0000 	bic.w	r0, r3, r0
 8002cd6:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
}
 8002cda:	4770      	bx	lr

08002cdc <stm32_exti_trigger>:
	switch (trigger) {
 8002cdc:	2903      	cmp	r1, #3
 8002cde:	d810      	bhi.n	8002d02 <stm32_exti_trigger+0x26>
 8002ce0:	e8df f001 	tbb	[pc, r1]
 8002ce4:	26191002 	.word	0x26191002
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
		LL_EXTI_DisableRisingTrig_0_31(BIT((uint32_t)line));
 8002cec:	2201      	movs	r2, #1
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	fa02 f000 	lsl.w	r0, r2, r0
 8002cf4:	ea21 0100 	bic.w	r1, r1, r0
 8002cf8:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002d00:	6058      	str	r0, [r3, #4]
}
 8002d02:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 8002d04:	2301      	movs	r3, #1
 8002d06:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4302      	orrs	r2, r0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e7f1      	b.n	8002cfa <stm32_exti_trigger+0x1e>
		LL_EXTI_EnableFallingTrig_0_31(BIT((uint32_t)line));
 8002d16:	2301      	movs	r3, #1
 8002d18:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	4302      	orrs	r2, r0
 8002d24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	ea22 0000 	bic.w	r0, r2, r0
 8002d2c:	6018      	str	r0, [r3, #0]
}
 8002d2e:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 8002d30:	2301      	movs	r3, #1
 8002d32:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4302      	orrs	r2, r0
 8002d3e:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	4310      	orrs	r0, r2
 8002d44:	e7dc      	b.n	8002d00 <stm32_exti_trigger+0x24>

08002d46 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8002d46:	680b      	ldr	r3, [r1, #0]
 8002d48:	f1a3 02d4 	sub.w	r2, r3, #212	; 0xd4
 8002d4c:	2a20      	cmp	r2, #32
 8002d4e:	d809      	bhi.n	8002d64 <stm32_clock_control_on+0x1e>
	sys_set_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 8002d50:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8002d54:	6849      	ldr	r1, [r1, #4]
	return 0;
 8002d56:	2000      	movs	r0, #0
	sys_set_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 8002d58:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 8002d5c:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]
	return 0;
 8002d62:	4770      	bx	lr
		return -ENOTSUP;
 8002d64:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8002d68:	4770      	bx	lr

08002d6a <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8002d6a:	680b      	ldr	r3, [r1, #0]
 8002d6c:	f1a3 02d4 	sub.w	r2, r3, #212	; 0xd4
 8002d70:	2a20      	cmp	r2, #32
 8002d72:	d80a      	bhi.n	8002d8a <stm32_clock_control_off+0x20>
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 8002d74:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
	*(volatile uint32_t *)addr = temp & ~mask;
 8002d78:	6849      	ldr	r1, [r1, #4]
	return 0;
 8002d7a:	2000      	movs	r0, #0
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 8002d7c:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 8002d80:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 8002d82:	ea22 0201 	bic.w	r2, r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
	return 0;
 8002d88:	4770      	bx	lr
		return -ENOTSUP;
 8002d8a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8002d8e:	4770      	bx	lr

08002d90 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002d90:	6843      	ldr	r3, [r0, #4]
}
 8002d92:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002d94:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002d96:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002d98:	600b      	str	r3, [r1, #0]
}
 8002d9a:	4770      	bx	lr

08002d9c <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002d9c:	6843      	ldr	r3, [r0, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002da0:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002da2:	4042      	eors	r2, r0
 8002da4:	400a      	ands	r2, r1
 8002da6:	4042      	eors	r2, r0
}
 8002da8:	2000      	movs	r0, #0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002daa:	615a      	str	r2, [r3, #20]
 8002dac:	4770      	bx	lr

08002dae <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002dae:	6843      	ldr	r3, [r0, #4]
}
 8002db0:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002db2:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8002db4:	6199      	str	r1, [r3, #24]
}
 8002db6:	4770      	bx	lr

08002db8 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002db8:	6843      	ldr	r3, [r0, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8002dba:	0409      	lsls	r1, r1, #16
}
 8002dbc:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	6199      	str	r1, [r3, #24]
}
 8002dc2:	4770      	bx	lr

08002dc4 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002dc4:	6843      	ldr	r3, [r0, #4]
}
 8002dc6:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002dc8:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002dca:	6953      	ldr	r3, [r2, #20]
 8002dcc:	404b      	eors	r3, r1
 8002dce:	6153      	str	r3, [r2, #20]
}
 8002dd0:	4770      	bx	lr

08002dd2 <gpio_stm32_manage_callback>:
{
 8002dd2:	b530      	push	{r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8002dd4:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8002dd6:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8002dd8:	b310      	cbz	r0, 8002e20 <gpio_stm32_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002dda:	2400      	movs	r4, #0
 8002ddc:	4281      	cmp	r1, r0
 8002dde:	d11b      	bne.n	8002e18 <gpio_stm32_manage_callback+0x46>
	return node->next;
 8002de0:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8002de2:	b95c      	cbnz	r4, 8002dfc <gpio_stm32_manage_callback+0x2a>
 8002de4:	68dc      	ldr	r4, [r3, #12]
	list->head = node;
 8002de6:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8002de8:	42a1      	cmp	r1, r4
 8002dea:	d100      	bne.n	8002dee <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8002dec:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8002dee:	2000      	movs	r0, #0
 8002df0:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 8002df2:	b94a      	cbnz	r2, 8002e08 <gpio_stm32_manage_callback+0x36>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8002df4:	2000      	movs	r0, #0
}
 8002df6:	bd30      	pop	{r4, r5, pc}
 8002df8:	4628      	mov	r0, r5
 8002dfa:	e7ef      	b.n	8002ddc <gpio_stm32_manage_callback+0xa>
 8002dfc:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8002dfe:	68d8      	ldr	r0, [r3, #12]
 8002e00:	4281      	cmp	r1, r0
	list->tail = node;
 8002e02:	bf08      	it	eq
 8002e04:	60dc      	streq	r4, [r3, #12]
}
 8002e06:	e7f2      	b.n	8002dee <gpio_stm32_manage_callback+0x1c>
	return list->head;
 8002e08:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8002e0a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8002e0c:	68d8      	ldr	r0, [r3, #12]
	list->head = node;
 8002e0e:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d1ef      	bne.n	8002df4 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8002e14:	60d9      	str	r1, [r3, #12]
	return gpio_manage_callback(&data->cb, callback, set);
 8002e16:	e7ee      	b.n	8002df6 <gpio_stm32_manage_callback+0x24>
	return node->next;
 8002e18:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	2d00      	cmp	r5, #0
 8002e1e:	d1eb      	bne.n	8002df8 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8002e20:	2a00      	cmp	r2, #0
 8002e22:	d1f1      	bne.n	8002e08 <gpio_stm32_manage_callback+0x36>
				return -EINVAL;
 8002e24:	f06f 0015 	mvn.w	r0, #21
 8002e28:	e7e5      	b.n	8002df6 <gpio_stm32_manage_callback+0x24>

08002e2a <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8002e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002e2e:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8002e30:	2001      	movs	r0, #1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002e32:	f3c2 1680 	ubfx	r6, r2, #6, #1
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002e36:	f3c2 1cc1 	ubfx	ip, r2, #7, #2
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e3a:	6867      	ldr	r7, [r4, #4]
	pinval = 1 << pin;
 8002e3c:	4088      	lsls	r0, r1
 8002e3e:	408e      	lsls	r6, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8002e40:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8002e44:	ea27 0700 	bic.w	r7, r7, r0
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002e48:	f3c2 2241 	ubfx	r2, r2, #9, #2
	if (mode == STM32_MODER_ALT_MODE) {
 8002e4c:	2d20      	cmp	r5, #32
 8002e4e:	ea46 0607 	orr.w	r6, r6, r7
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002e52:	fa00 f701 	lsl.w	r7, r0, r1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e56:	6066      	str	r6, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002e58:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 8002e5c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8002e60:	fb07 fc0c 	mul.w	ip, r7, ip
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002e64:	fb07 f202 	mul.w	r2, r7, r2
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002e68:	ea6f 060e 	mvn.w	r6, lr
 8002e6c:	ea28 080e 	bic.w	r8, r8, lr
 8002e70:	ea4c 0c08 	orr.w	ip, ip, r8
 8002e74:	f8c4 c008 	str.w	ip, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002e78:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8002e7c:	ea2c 0c0e 	bic.w	ip, ip, lr
 8002e80:	ea42 020c 	orr.w	r2, r2, ip
 8002e84:	60e2      	str	r2, [r4, #12]
 8002e86:	d10d      	bne.n	8002ea4 <gpio_stm32_configure_raw.isra.0+0x7a>
		if (pin < 8) {
 8002e88:	2907      	cmp	r1, #7
 8002e8a:	dc13      	bgt.n	8002eb4 <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002e8c:	fa07 f201 	lsl.w	r2, r7, r1
 8002e90:	6a20      	ldr	r0, [r4, #32]
 8002e92:	fa02 f101 	lsl.w	r1, r2, r1
 8002e96:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
 8002e9a:	4359      	muls	r1, r3
 8002e9c:	ea20 0202 	bic.w	r2, r0, r2
 8002ea0:	4311      	orrs	r1, r2
 8002ea2:	6221      	str	r1, [r4, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002ea4:	6823      	ldr	r3, [r4, #0]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8002ea6:	092d      	lsrs	r5, r5, #4
 8002ea8:	401e      	ands	r6, r3
 8002eaa:	437d      	muls	r5, r7
 8002eac:	4335      	orrs	r5, r6
 8002eae:	6025      	str	r5, [r4, #0]
}
 8002eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002eb4:	0a02      	lsrs	r2, r0, #8
 8002eb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002eb8:	4352      	muls	r2, r2
 8002eba:	4352      	muls	r2, r2
 8002ebc:	ebc2 1002 	rsb	r0, r2, r2, lsl #4
 8002ec0:	4353      	muls	r3, r2
 8002ec2:	ea21 0100 	bic.w	r1, r1, r0
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002eca:	e7eb      	b.n	8002ea4 <gpio_stm32_configure_raw.isra.0+0x7a>

08002ecc <gpio_stm32_config>:
{
 8002ecc:	b538      	push	{r3, r4, r5, lr}
 8002ece:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 8002ed0:	0390      	lsls	r0, r2, #14
{
 8002ed2:	460d      	mov	r5, r1
 8002ed4:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8002ed6:	d519      	bpl.n	8002f0c <gpio_stm32_config+0x40>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8002ed8:	0791      	lsls	r1, r2, #30
 8002eda:	d510      	bpl.n	8002efe <gpio_stm32_config+0x32>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8002edc:	075a      	lsls	r2, r3, #29
 8002ede:	d531      	bpl.n	8002f44 <gpio_stm32_config+0x78>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8002ee0:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8002ee2:	06d8      	lsls	r0, r3, #27
 8002ee4:	d50d      	bpl.n	8002f02 <gpio_stm32_config+0x36>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8002eea:	0319      	lsls	r1, r3, #12
 8002eec:	d41f      	bmi.n	8002f2e <gpio_stm32_config+0x62>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8002eee:	0358      	lsls	r0, r3, #13
 8002ef0:	d516      	bpl.n	8002f20 <gpio_stm32_config+0x54>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	40a9      	lsls	r1, r5
 8002ef8:	f7ff ff5e 	bl	8002db8 <gpio_stm32_port_clear_bits_raw>
 8002efc:	e010      	b.n	8002f20 <gpio_stm32_config+0x54>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8002efe:	2210      	movs	r2, #16
 8002f00:	e7ef      	b.n	8002ee2 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002f02:	0699      	lsls	r1, r3, #26
 8002f04:	d5f1      	bpl.n	8002eea <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002f06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8002f0a:	e7ee      	b.n	8002eea <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8002f0c:	03d0      	lsls	r0, r2, #15
 8002f0e:	d514      	bpl.n	8002f3a <gpio_stm32_config+0x6e>
		if ((flags & GPIO_PULL_UP) != 0) {
 8002f10:	06d1      	lsls	r1, r2, #27
 8002f12:	d414      	bmi.n	8002f3e <gpio_stm32_config+0x72>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8002f14:	f012 0f20 	tst.w	r2, #32
 8002f18:	bf14      	ite	ne
 8002f1a:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8002f1e:	2200      	moveq	r2, #0
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8002f20:	6860      	ldr	r0, [r4, #4]
 8002f22:	2300      	movs	r3, #0
 8002f24:	4629      	mov	r1, r5
 8002f26:	f7ff ff80 	bl	8002e2a <gpio_stm32_configure_raw.isra.0>
	return 0;
 8002f2a:	2000      	movs	r0, #0
}
 8002f2c:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002f2e:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002f30:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002f32:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002f34:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 8002f36:	618b      	str	r3, [r1, #24]
	return 0;
 8002f38:	e7f2      	b.n	8002f20 <gpio_stm32_config+0x54>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8002f3a:	2230      	movs	r2, #48	; 0x30
 8002f3c:	e7f0      	b.n	8002f20 <gpio_stm32_config+0x54>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f42:	e7ed      	b.n	8002f20 <gpio_stm32_config+0x54>
				return -ENOTSUP;
 8002f44:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002f48:	e7f0      	b.n	8002f2c <gpio_stm32_config+0x60>

08002f4a <gpio_stm32_isr>:
{
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002f50:	b169      	cbz	r1, 8002f6e <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8002f52:	2501      	movs	r5, #1
 8002f54:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8002f56:	680c      	ldr	r4, [r1, #0]
 8002f58:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8002f5a:	688a      	ldr	r2, [r1, #8]
 8002f5c:	402a      	ands	r2, r5
 8002f5e:	d002      	beq.n	8002f66 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8002f60:	684b      	ldr	r3, [r1, #4]
 8002f62:	4630      	mov	r0, r6
 8002f64:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002f66:	b114      	cbz	r4, 8002f6e <gpio_stm32_isr+0x24>
 8002f68:	4621      	mov	r1, r4
 8002f6a:	6824      	ldr	r4, [r4, #0]
 8002f6c:	e7f5      	b.n	8002f5a <gpio_stm32_isr+0x10>
}
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}

08002f70 <gpio_stm32_configure>:
{
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	461f      	mov	r7, r3
 8002f74:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8002f76:	6840      	ldr	r0, [r0, #4]
{
 8002f78:	460e      	mov	r6, r1
 8002f7a:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8002f7c:	f7ff ff55 	bl	8002e2a <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 8002f80:	2f11      	cmp	r7, #17
 8002f82:	d107      	bne.n	8002f94 <gpio_stm32_configure+0x24>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002f84:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 8002f86:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002f88:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 8002f8c:	d504      	bpl.n	8002f98 <gpio_stm32_configure+0x28>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002f8e:	6863      	ldr	r3, [r4, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8002f92:	6199      	str	r1, [r3, #24]
}
 8002f94:	2000      	movs	r0, #0
 8002f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7ff ff0d 	bl	8002db8 <gpio_stm32_port_clear_bits_raw>
 8002f9e:	e7f9      	b.n	8002f94 <gpio_stm32_configure+0x24>

08002fa0 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8002fa0:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8002fa2:	6803      	ldr	r3, [r0, #0]
	while (*state < &config->states[config->state_cnt]) {
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 8002fa4:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 8002fa6:	7905      	ldrb	r5, [r0, #4]
 8002fa8:	6804      	ldr	r4, [r0, #0]
 8002faa:	6813      	ldr	r3, [r2, #0]
 8002fac:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8002fb0:	42a3      	cmp	r3, r4
 8002fb2:	d302      	bcc.n	8002fba <pinctrl_lookup_state+0x1a>
	}

	return -ENOENT;
 8002fb4:	f06f 0001 	mvn.w	r0, #1
}
 8002fb8:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8002fba:	795c      	ldrb	r4, [r3, #5]
 8002fbc:	428c      	cmp	r4, r1
 8002fbe:	d001      	beq.n	8002fc4 <pinctrl_lookup_state+0x24>
		(*state)++;
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	e7ef      	b.n	8002fa4 <pinctrl_lookup_state+0x4>
			return 0;
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	e7f7      	b.n	8002fb8 <pinctrl_lookup_state+0x18>

08002fc8 <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 8002fc8:	6843      	ldr	r3, [r0, #4]
 8002fca:	f3c1 104b 	ubfx	r0, r1, #5, #12
 8002fce:	f001 011f 	and.w	r1, r1, #31
 8002fd2:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
 8002fd4:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	fa03 f101 	lsl.w	r1, r3, r1
 8002fdc:	4201      	tst	r1, r0
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 8002fde:	f04f 0000 	mov.w	r0, #0
	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 8002fe2:	bf08      	it	eq
 8002fe4:	2300      	moveq	r3, #0
 8002fe6:	7013      	strb	r3, [r2, #0]
}
 8002fe8:	4770      	bx	lr

08002fea <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 8002fea:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 8002fec:	6843      	ldr	r3, [r0, #4]
 8002fee:	f3c1 104b 	ubfx	r0, r1, #5, #12
 8002ff2:	f001 011f 	and.w	r1, r1, #31
 8002ff6:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 8002ff8:	2301      	movs	r3, #1
	uint32_t temp = *(volatile uint32_t *)addr;
 8002ffa:	5884      	ldr	r4, [r0, r2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 8002ffc:	fa03 f101 	lsl.w	r1, r3, r1
 8003000:	4321      	orrs	r1, r4
 8003002:	5081      	str	r1, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 8003004:	2000      	movs	r0, #0
 8003006:	bd10      	pop	{r4, pc}

08003008 <reset_stm32_line_deassert>:

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 8003008:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 800300a:	6843      	ldr	r3, [r0, #4]
 800300c:	f3c1 144b 	ubfx	r4, r1, #5, #12
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 8003010:	2201      	movs	r2, #1
 8003012:	f001 011f 	and.w	r1, r1, #31
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	fa02 f101 	lsl.w	r1, r2, r1
	uint32_t temp = *(volatile uint32_t *)addr;
 800301c:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 800301e:	ea23 0101 	bic.w	r1, r3, r1
 8003022:	5021      	str	r1, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 8003024:	2000      	movs	r0, #0
 8003026:	bd10      	pop	{r4, pc}

08003028 <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4604      	mov	r4, r0
 800302c:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 800302e:	f7ff ffdc 	bl	8002fea <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 8003032:	4629      	mov	r1, r5
 8003034:	4620      	mov	r0, r4
 8003036:	f7ff ffe7 	bl	8003008 <reset_stm32_line_deassert>

	return 0;
}
 800303a:	2000      	movs	r0, #0
 800303c:	bd38      	pop	{r3, r4, r5, pc}

0800303e <uart_stm32_err_check>:
	const struct uart_stm32_config *config = dev->config;
 800303e:	6842      	ldr	r2, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8003040:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003042:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8003044:	69d9      	ldr	r1, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003046:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 800304a:	07c9      	lsls	r1, r1, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800304c:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_PARITY;
 800304e:	bf48      	it	mi
 8003050:	f040 0002 	orrmi.w	r0, r0, #2
 8003054:	0789      	lsls	r1, r1, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003056:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_FRAMING;
 8003058:	bf48      	it	mi
 800305a:	f040 0004 	orrmi.w	r0, r0, #4
 800305e:	0749      	lsls	r1, r1, #29
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 8003060:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_NOISE;
 8003062:	bf48      	it	mi
 8003064:	f040 0020 	orrmi.w	r0, r0, #32
 8003068:	05c9      	lsls	r1, r1, #23
 800306a:	d504      	bpl.n	8003076 <uart_stm32_err_check+0x38>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 800306c:	f44f 7180 	mov.w	r1, #256	; 0x100
		err |= UART_BREAK;
 8003070:	f040 0008 	orr.w	r0, r0, #8
 8003074:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 8003076:	07c1      	lsls	r1, r0, #31
 8003078:	d502      	bpl.n	8003080 <uart_stm32_err_check+0x42>
		LL_USART_ClearFlag_ORE(config->usart);
 800307a:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800307c:	2108      	movs	r1, #8
 800307e:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8003080:	0783      	lsls	r3, r0, #30
 8003082:	d502      	bpl.n	800308a <uart_stm32_err_check+0x4c>
		LL_USART_ClearFlag_PE(config->usart);
 8003084:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8003086:	2101      	movs	r1, #1
 8003088:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 800308a:	0741      	lsls	r1, r0, #29
 800308c:	d502      	bpl.n	8003094 <uart_stm32_err_check+0x56>
		LL_USART_ClearFlag_FE(config->usart);
 800308e:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003090:	2102      	movs	r1, #2
 8003092:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_NOISE) {
 8003094:	0683      	lsls	r3, r0, #26
 8003096:	d502      	bpl.n	800309e <uart_stm32_err_check+0x60>
		LL_USART_ClearFlag_NE(config->usart);
 8003098:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800309a:	2204      	movs	r2, #4
 800309c:	621a      	str	r2, [r3, #32]
}
 800309e:	4770      	bx	lr

080030a0 <uart_stm32_set_baudrate>:
{
 80030a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 80030a2:	6903      	ldr	r3, [r0, #16]
{
 80030a4:	460c      	mov	r4, r1
	const struct uart_stm32_config *config = dev->config;
 80030a6:	6845      	ldr	r5, [r0, #4]
		if (clock_control_get_rate(data->clock,
 80030a8:	6858      	ldr	r0, [r3, #4]
					   (clock_control_subsys_t)&config->pclken[0],
 80030aa:	6869      	ldr	r1, [r5, #4]
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80030ac:	6883      	ldr	r3, [r0, #8]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	b18b      	cbz	r3, 80030d6 <uart_stm32_set_baudrate+0x36>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80030b2:	aa01      	add	r2, sp, #4
 80030b4:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 80030b6:	2800      	cmp	r0, #0
 80030b8:	db0d      	blt.n	80030d6 <uart_stm32_set_baudrate+0x36>
		LL_USART_SetOverSampling(config->usart,
 80030ba:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80030bc:	6813      	ldr	r3, [r2, #0]
 80030be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030c2:	6013      	str	r3, [r2, #0]
  else if (BaudRate == 0U)
 80030c4:	b13c      	cbz	r4, 80030d6 <uart_stm32_set_baudrate+0x36>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80030c6:	9b01      	ldr	r3, [sp, #4]
		LL_USART_SetBaudRate(config->usart,
 80030c8:	682a      	ldr	r2, [r5, #0]
 80030ca:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 80030ce:	fbb3 f3f4 	udiv	r3, r3, r4
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	60d3      	str	r3, [r2, #12]
}
 80030d6:	b003      	add	sp, #12
 80030d8:	bd30      	pop	{r4, r5, pc}

080030da <uart_stm32_poll_out>:
{
 80030da:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 80030dc:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80030de:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80030e0:	69d3      	ldr	r3, [r2, #28]
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	d5fc      	bpl.n	80030e0 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 80030e6:	f04f 0210 	mov.w	r2, #16
 80030ea:	f3ef 8311 	mrs	r3, BASEPRI
 80030ee:	f382 8812 	msr	BASEPRI_MAX, r2
 80030f2:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80030f6:	6802      	ldr	r2, [r0, #0]
 80030f8:	69d4      	ldr	r4, [r2, #28]
 80030fa:	0624      	lsls	r4, r4, #24
 80030fc:	d404      	bmi.n	8003108 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8003106:	e7ea      	b.n	80030de <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8003108:	6291      	str	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
}
 8003112:	bd10      	pop	{r4, pc}

08003114 <uart_stm32_poll_in>:
	const struct uart_stm32_config *config = dev->config;
 8003114:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8003116:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003118:	69d0      	ldr	r0, [r2, #28]
 800311a:	0700      	lsls	r0, r0, #28
 800311c:	d501      	bpl.n	8003122 <uart_stm32_poll_in+0xe>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800311e:	2008      	movs	r0, #8
 8003120:	6210      	str	r0, [r2, #32]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 8003122:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	0692      	lsls	r2, r2, #26
 8003128:	d503      	bpl.n	8003132 <uart_stm32_poll_in+0x1e>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return 0;
 800312c:	2000      	movs	r0, #0
 800312e:	700b      	strb	r3, [r1, #0]
 8003130:	4770      	bx	lr
		return -1;
 8003132:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003136:	4770      	bx	lr

08003138 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8003138:	6903      	ldr	r3, [r0, #16]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 800313e:	6843      	ldr	r3, [r0, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8003148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314c:	d035      	beq.n	80031ba <uart_stm32_config_get+0x82>
		return UART_CFG_PARITY_NONE;
 800314e:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8003152:	f1dc 0300 	rsbs	r3, ip, #0
 8003156:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800315a:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 800315c:	6843      	ldr	r3, [r0, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316a:	d028      	beq.n	80031be <uart_stm32_config_get+0x86>
 800316c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003170:	d027      	beq.n	80031c2 <uart_stm32_config_get+0x8a>
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf14      	ite	ne
 8003176:	2303      	movne	r3, #3
 8003178:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800317a:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 800317c:	6843      	ldr	r3, [r0, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8003180:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003182:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8003184:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (db) {
 800318c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003190:	d019      	beq.n	80031c6 <uart_stm32_config_get+0x8e>
 8003192:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003196:	d11b      	bne.n	80031d0 <uart_stm32_config_get+0x98>
			return UART_CFG_DATA_BITS_6;
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2302      	moveq	r3, #2
 800319e:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80031a0:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 80031a2:	6843      	ldr	r3, [r0, #4]
}
 80031a4:	2000      	movs	r0, #0
	return LL_USART_GetHWFlowCtrl(config->usart);
 80031a6:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80031ae:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80031b2:	4253      	negs	r3, r2
 80031b4:	4153      	adcs	r3, r2
 80031b6:	71cb      	strb	r3, [r1, #7]
}
 80031b8:	4770      	bx	lr
	switch (parity) {
 80031ba:	2302      	movs	r3, #2
 80031bc:	e7cd      	b.n	800315a <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 80031be:	2300      	movs	r3, #0
 80031c0:	e7db      	b.n	800317a <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 80031c2:	2302      	movs	r3, #2
 80031c4:	e7d9      	b.n	800317a <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_9;
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2303      	movne	r3, #3
 80031cc:	2304      	moveq	r3, #4
 80031ce:	e7e7      	b.n	80031a0 <uart_stm32_config_get+0x68>
			return UART_CFG_DATA_BITS_8;
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf14      	ite	ne
 80031d4:	2302      	movne	r3, #2
 80031d6:	2303      	moveq	r3, #3
 80031d8:	e7e2      	b.n	80031a0 <uart_stm32_config_get+0x68>

080031da <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
 80031da:	4770      	bx	lr

080031dc <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 80031dc:	b140      	cbz	r0, 80031f0 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 80031de:	68c3      	ldr	r3, [r0, #12]
 80031e0:	7858      	ldrb	r0, [r3, #1]
 80031e2:	f010 0001 	ands.w	r0, r0, #1
 80031e6:	bf1e      	ittt	ne
 80031e8:	7818      	ldrbne	r0, [r3, #0]
 80031ea:	fab0 f080 	clzne	r0, r0
 80031ee:	0940      	lsrne	r0, r0, #5
}
 80031f0:	4770      	bx	lr

080031f2 <arch_system_halt>:
	__asm__ volatile(
 80031f2:	f04f 0210 	mov.w	r2, #16
 80031f6:	f3ef 8311 	mrs	r3, BASEPRI
 80031fa:	f382 8812 	msr	BASEPRI_MAX, r2
 80031fe:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8003202:	e7fe      	b.n	8003202 <arch_system_halt+0x10>

08003204 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8003204:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8003206:	f7ff fff4 	bl	80031f2 <arch_system_halt>

0800320a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800320a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320c:	4605      	mov	r5, r0
 800320e:	460e      	mov	r6, r1
 8003210:	f04f 0310 	mov.w	r3, #16
 8003214:	f3ef 8711 	mrs	r7, BASEPRI
 8003218:	f383 8812 	msr	BASEPRI_MAX, r3
 800321c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8003220:	f7ff faa2 	bl	8002768 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8003224:	4631      	mov	r1, r6
 8003226:	4604      	mov	r4, r0
 8003228:	4628      	mov	r0, r5
 800322a:	f7ff ffeb 	bl	8003204 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800322e:	f387 8811 	msr	BASEPRI, r7
 8003232:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8003236:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8003238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800323c:	f7fe b8a2 	b.w	8001384 <z_impl_k_thread_abort>

08003240 <z_early_memset>:
	(void) memset(dst, c, n);
 8003240:	f7ff bce0 	b.w	8002c04 <memset>

08003244 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8003244:	f7ff bcd3 	b.w	8002bee <memcpy>

08003248 <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8003248:	b508      	push	{r3, lr}
	__asm__ volatile(
 800324a:	f04f 0210 	mov.w	r2, #16
 800324e:	f3ef 8311 	mrs	r3, BASEPRI
 8003252:	f382 8812 	msr	BASEPRI_MAX, r2
 8003256:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800325a:	f7fd fe0f 	bl	8000e7c <arch_cpu_idle>
 800325e:	e7f4      	b.n	800324a <idle+0x2>

08003260 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8003260:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8003264:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8003266:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8003268:	2300      	movs	r3, #0
	node->prev = NULL;
 800326a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 800326e:	4770      	bx	lr

08003270 <unpend_thread_no_timeout>:
{
 8003270:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003272:	f7ff fff5 	bl	8003260 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8003276:	7b43      	ldrb	r3, [r0, #13]
 8003278:	f023 0302 	bic.w	r3, r3, #2
 800327c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 800327e:	2300      	movs	r3, #0
 8003280:	6083      	str	r3, [r0, #8]
}
 8003282:	bd08      	pop	{r3, pc}

08003284 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8003284:	4603      	mov	r3, r0
 8003286:	b920      	cbnz	r0, 8003292 <z_reschedule_irqlock+0xe>
 8003288:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 800328c:	b90a      	cbnz	r2, 8003292 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 800328e:	f7fd be51 	b.w	8000f34 <arch_swap>
	__asm__ volatile(
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
}
 800329a:	4770      	bx	lr

0800329c <z_reschedule_unlocked>:
	__asm__ volatile(
 800329c:	f04f 0310 	mov.w	r3, #16
 80032a0:	f3ef 8011 	mrs	r0, BASEPRI
 80032a4:	f383 8812 	msr	BASEPRI_MAX, r3
 80032a8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80032ac:	f7ff bfea 	b.w	8003284 <z_reschedule_irqlock>

080032b0 <z_priq_dumb_best>:
{
 80032b0:	4603      	mov	r3, r0
	return list->head == list;
 80032b2:	6800      	ldr	r0, [r0, #0]
}
 80032b4:	4283      	cmp	r3, r0
 80032b6:	bf08      	it	eq
 80032b8:	2000      	moveq	r0, #0
 80032ba:	4770      	bx	lr

080032bc <z_ready_thread>:
{
 80032bc:	b510      	push	{r4, lr}
 80032be:	f04f 0310 	mov.w	r3, #16
 80032c2:	f3ef 8411 	mrs	r4, BASEPRI
 80032c6:	f383 8812 	msr	BASEPRI_MAX, r3
 80032ca:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 80032ce:	f7ff f9d3 	bl	8002678 <ready_thread>
	__asm__ volatile(
 80032d2:	f384 8811 	msr	BASEPRI, r4
 80032d6:	f3bf 8f6f 	isb	sy
}
 80032da:	bd10      	pop	{r4, pc}

080032dc <z_sched_wake_thread>:
{
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	4604      	mov	r4, r0
	__asm__ volatile(
 80032e0:	f04f 0310 	mov.w	r3, #16
 80032e4:	f3ef 8511 	mrs	r5, BASEPRI
 80032e8:	f383 8812 	msr	BASEPRI_MAX, r3
 80032ec:	f3bf 8f6f 	isb	sy
		if (!killed) {
 80032f0:	7b43      	ldrb	r3, [r0, #13]
 80032f2:	f013 0f28 	tst.w	r3, #40	; 0x28
 80032f6:	d10b      	bne.n	8003310 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
 80032f8:	6883      	ldr	r3, [r0, #8]
 80032fa:	b10b      	cbz	r3, 8003300 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
 80032fc:	f7ff ffb8 	bl	8003270 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8003300:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
 8003302:	b951      	cbnz	r1, 800331a <z_sched_wake_thread+0x3e>
 8003304:	f023 0304 	bic.w	r3, r3, #4
			ready_thread(thread);
 8003308:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800330a:	7363      	strb	r3, [r4, #13]
 800330c:	f7ff f9b4 	bl	8002678 <ready_thread>
	__asm__ volatile(
 8003310:	f385 8811 	msr	BASEPRI, r5
 8003314:	f3bf 8f6f 	isb	sy
}
 8003318:	bd38      	pop	{r3, r4, r5, pc}
 800331a:	f023 0314 	bic.w	r3, r3, #20
 800331e:	e7f3      	b.n	8003308 <z_sched_wake_thread+0x2c>

08003320 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
 8003320:	2101      	movs	r1, #1
 8003322:	3818      	subs	r0, #24
 8003324:	f7ff bfda 	b.w	80032dc <z_sched_wake_thread>

08003328 <z_abort_timeout>:
{
 8003328:	b510      	push	{r4, lr}
	__asm__ volatile(
 800332a:	f04f 0210 	mov.w	r2, #16
 800332e:	f3ef 8411 	mrs	r4, BASEPRI
 8003332:	f382 8812 	msr	BASEPRI_MAX, r2
 8003336:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 800333a:	6803      	ldr	r3, [r0, #0]
 800333c:	b13b      	cbz	r3, 800334e <z_abort_timeout+0x26>
			remove_timeout(to);
 800333e:	f7ff fac7 	bl	80028d0 <remove_timeout>
			ret = 0;
 8003342:	2000      	movs	r0, #0
	__asm__ volatile(
 8003344:	f384 8811 	msr	BASEPRI, r4
 8003348:	f3bf 8f6f 	isb	sy
}
 800334c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 800334e:	f06f 0015 	mvn.w	r0, #21
 8003352:	e7f7      	b.n	8003344 <z_abort_timeout+0x1c>
