
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	c0 10 00 24 e9 13 00 08 c3 2e 00 08 bd 13 00 08     ...$............
 8000010:	bd 13 00 08 bd 13 00 08 bd 13 00 08 00 00 00 00     ................
	...
 800002c:	4d 10 00 08 bd 13 00 08 00 00 00 00 f9 0f 00 08     M...............
 800003c:	b1 1f 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000050:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000060:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000070:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000080:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000090:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80000a0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80000b0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80000c0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80000d0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80000e0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80000f0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000100:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000110:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000120:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000130:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000140:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000150:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000160:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000170:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000180:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000190:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80001a0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80001b0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80001c0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80001d0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80001e0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 80001f0:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000200:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000210:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000220:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000230:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000240:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000250:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000260:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000270:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000280:	f1 10 00 08 f1 10 00 08 f1 10 00 08 f1 10 00 08     ................
 8000290:	f1 10 00 08 f1 10 00 08                             ........

Disassembly of section text:

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b974 	b.w	8000598 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002cc:	9e08      	ldr	r6, [sp, #32]
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
 80002d2:	4688      	mov	r8, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14d      	bne.n	8000374 <__udivmoddi4+0xac>
 80002d8:	428a      	cmp	r2, r1
 80002da:	4694      	mov	ip, r2
 80002dc:	d968      	bls.n	80003b0 <__udivmoddi4+0xe8>
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	b152      	cbz	r2, 80002fa <__udivmoddi4+0x32>
 80002e4:	fa01 f302 	lsl.w	r3, r1, r2
 80002e8:	f1c2 0120 	rsb	r1, r2, #32
 80002ec:	fa20 f101 	lsr.w	r1, r0, r1
 80002f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f4:	ea41 0803 	orr.w	r8, r1, r3
 80002f8:	4094      	lsls	r4, r2
 80002fa:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002fe:	0c21      	lsrs	r1, r4, #16
 8000300:	fbb8 fef5 	udiv	lr, r8, r5
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	fb05 831e 	mls	r3, r5, lr, r8
 800030c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000310:	fb0e f107 	mul.w	r1, lr, r7
 8000314:	4299      	cmp	r1, r3
 8000316:	d90b      	bls.n	8000330 <__udivmoddi4+0x68>
 8000318:	eb1c 0303 	adds.w	r3, ip, r3
 800031c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000320:	f080 811e 	bcs.w	8000560 <__udivmoddi4+0x298>
 8000324:	4299      	cmp	r1, r3
 8000326:	f240 811b 	bls.w	8000560 <__udivmoddi4+0x298>
 800032a:	f1ae 0e02 	sub.w	lr, lr, #2
 800032e:	4463      	add	r3, ip
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f5 	udiv	r0, r3, r5
 8000338:	fb05 3310 	mls	r3, r5, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 f707 	mul.w	r7, r0, r7
 8000344:	42a7      	cmp	r7, r4
 8000346:	d90a      	bls.n	800035e <__udivmoddi4+0x96>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000350:	f080 8108 	bcs.w	8000564 <__udivmoddi4+0x29c>
 8000354:	42a7      	cmp	r7, r4
 8000356:	f240 8105 	bls.w	8000564 <__udivmoddi4+0x29c>
 800035a:	4464      	add	r4, ip
 800035c:	3802      	subs	r0, #2
 800035e:	1be4      	subs	r4, r4, r7
 8000360:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000364:	2100      	movs	r1, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa8>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0xc2>
 8000378:	2e00      	cmp	r6, #0
 800037a:	f000 80ee 	beq.w	800055a <__udivmoddi4+0x292>
 800037e:	2100      	movs	r1, #0
 8000380:	e9c6 0500 	strd	r0, r5, [r6]
 8000384:	4608      	mov	r0, r1
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d14a      	bne.n	8000428 <__udivmoddi4+0x160>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xd4>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80f9 	bhi.w	800058e <__udivmoddi4+0x2c6>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0303 	sbc.w	r3, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	4698      	mov	r8, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d0e2      	beq.n	8000370 <__udivmoddi4+0xa8>
 80003aa:	e9c6 4800 	strd	r4, r8, [r6]
 80003ae:	e7df      	b.n	8000370 <__udivmoddi4+0xa8>
 80003b0:	b902      	cbnz	r2, 80003b4 <__udivmoddi4+0xec>
 80003b2:	deff      	udf	#255	; 0xff
 80003b4:	fab2 f282 	clz	r2, r2
 80003b8:	2a00      	cmp	r2, #0
 80003ba:	f040 8091 	bne.w	80004e0 <__udivmoddi4+0x218>
 80003be:	eba1 050c 	sub.w	r5, r1, ip
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb5 f3f7 	udiv	r3, r5, r7
 80003d0:	fb07 5013 	mls	r0, r7, r3, r5
 80003d4:	0c25      	lsrs	r5, r4, #16
 80003d6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003da:	fb0e f003 	mul.w	r0, lr, r3
 80003de:	42a8      	cmp	r0, r5
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x12c>
 80003e2:	eb1c 0505 	adds.w	r5, ip, r5
 80003e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x12a>
 80003ec:	42a8      	cmp	r0, r5
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 80003f2:	4643      	mov	r3, r8
 80003f4:	1a2d      	subs	r5, r5, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb5 f0f7 	udiv	r0, r5, r7
 80003fc:	fb07 5510 	mls	r5, r7, r0, r5
 8000400:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x156>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 35ff 	add.w	r5, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x154>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2ca>
 800041c:	4628      	mov	r0, r5
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000426:	e79e      	b.n	8000366 <__udivmoddi4+0x9e>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa20 f407 	lsr.w	r4, r0, r7
 800043a:	fa05 f301 	lsl.w	r3, r5, r1
 800043e:	431c      	orrs	r4, r3
 8000440:	40fd      	lsrs	r5, r7
 8000442:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000446:	fa00 f301 	lsl.w	r3, r0, r1
 800044a:	fbb5 f8f9 	udiv	r8, r5, r9
 800044e:	0c20      	lsrs	r0, r4, #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fb09 5518 	mls	r5, r9, r8, r5
 8000458:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800045c:	fb08 f00e 	mul.w	r0, r8, lr
 8000460:	42a8      	cmp	r0, r5
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000468:	eb1c 0505 	adds.w	r5, ip, r5
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2bc>
 8000474:	42a8      	cmp	r0, r5
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2bc>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4465      	add	r5, ip
 8000480:	1a2d      	subs	r5, r5, r0
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb5 f0f9 	udiv	r0, r5, r9
 8000488:	fb09 5510 	mls	r5, r9, r0, r5
 800048c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000490:	fb00 fe0e 	mul.w	lr, r0, lr
 8000494:	45ae      	cmp	lr, r5
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1e2>
 8000498:	eb1c 0505 	adds.w	r5, ip, r5
 800049c:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2b4>
 80004a2:	45ae      	cmp	lr, r5
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2b4>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4465      	add	r5, ip
 80004aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ae:	fba0 9402 	umull	r9, r4, r0, r2
 80004b2:	eba5 050e 	sub.w	r5, r5, lr
 80004b6:	42a5      	cmp	r5, r4
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46a6      	mov	lr, r4
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x2a4>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x2a0>
 80004c0:	b15e      	cbz	r6, 80004da <__udivmoddi4+0x212>
 80004c2:	ebb3 0208 	subs.w	r2, r3, r8
 80004c6:	eb65 050e 	sbc.w	r5, r5, lr
 80004ca:	fa05 f707 	lsl.w	r7, r5, r7
 80004ce:	fa22 f301 	lsr.w	r3, r2, r1
 80004d2:	40cd      	lsrs	r5, r1
 80004d4:	431f      	orrs	r7, r3
 80004d6:	e9c6 7500 	strd	r7, r5, [r6]
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f103 	lsr.w	r1, r0, r3
 80004e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ec:	fa25 f303 	lsr.w	r3, r5, r3
 80004f0:	4095      	lsls	r5, r2
 80004f2:	430d      	orrs	r5, r1
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb3 f1f7 	udiv	r1, r3, r7
 8000500:	fb07 3011 	mls	r0, r7, r1, r3
 8000504:	0c2b      	lsrs	r3, r5, #16
 8000506:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800050a:	fb01 f00e 	mul.w	r0, r1, lr
 800050e:	4298      	cmp	r0, r3
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x260>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f101 38ff 	add.w	r8, r1, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b8>
 8000520:	4298      	cmp	r0, r3
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b8>
 8000524:	3902      	subs	r1, #2
 8000526:	4463      	add	r3, ip
 8000528:	1a1b      	subs	r3, r3, r0
 800052a:	b2ad      	uxth	r5, r5
 800052c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000530:	fb07 3310 	mls	r3, r7, r0, r3
 8000534:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000538:	fb00 f30e 	mul.w	r3, r0, lr
 800053c:	42ab      	cmp	r3, r5
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x28a>
 8000540:	eb1c 0505 	adds.w	r5, ip, r5
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2b0>
 800054a:	42ab      	cmp	r3, r5
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2b0>
 800054e:	3802      	subs	r0, #2
 8000550:	4465      	add	r5, ip
 8000552:	1aed      	subs	r5, r5, r3
 8000554:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0x104>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e707      	b.n	8000370 <__udivmoddi4+0xa8>
 8000560:	4686      	mov	lr, r0
 8000562:	e6e5      	b.n	8000330 <__udivmoddi4+0x68>
 8000564:	4618      	mov	r0, r3
 8000566:	e6fa      	b.n	800035e <__udivmoddi4+0x96>
 8000568:	454b      	cmp	r3, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f8>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000574:	3801      	subs	r0, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f8>
 8000578:	4640      	mov	r0, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x28a>
 800057c:	4620      	mov	r0, r4
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1e2>
 8000580:	4641      	mov	r1, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x260>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b8>
 8000588:	3b02      	subs	r3, #2
 800058a:	4465      	add	r5, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x12c>
 800058e:	4608      	mov	r0, r1
 8000590:	e709      	b.n	80003a6 <__udivmoddi4+0xde>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x156>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <hello_world>:
#define HELLO_WORLD_STACKSIZE 1024
static struct k_thread hello_world_thread;
#define SOFT_TIMER_PRIORITY 7

void hello_world(void)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
	int num = 0;

	printk("hello_world task is running\n");
 800059e:	4808      	ldr	r0, [pc, #32]	; (80005c0 <hello_world+0x24>)
 80005a0:	f002 fc0f 	bl	8002dc2 <printk>

	while (1) {
		printk("hello world! %d\n", num++);
 80005a4:	4d07      	ldr	r5, [pc, #28]	; (80005c4 <hello_world+0x28>)
	int num = 0;
 80005a6:	2100      	movs	r1, #0
		printk("hello world! %d\n", num++);
 80005a8:	4628      	mov	r0, r5
 80005aa:	1c4c      	adds	r4, r1, #1
 80005ac:	f002 fc09 	bl	8002dc2 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 80005b0:	2100      	movs	r1, #0
 80005b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80005b6:	f002 fa1d 	bl	80029f4 <z_impl_k_sleep>
 80005ba:	4621      	mov	r1, r4
 80005bc:	e7f4      	b.n	80005a8 <hello_world+0xc>
 80005be:	bf00      	nop
 80005c0:	08004002 	.word	0x08004002
 80005c4:	0800401f 	.word	0x0800401f

080005c8 <task2>:
void task2(void)
{
	printk("task2 is running\n");
	
	while (1) {
		printk("Heart beat!\n");
 80005c8:	4c06      	ldr	r4, [pc, #24]	; (80005e4 <task2+0x1c>)
	printk("task2 is running\n");
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <task2+0x20>)
{
 80005cc:	b508      	push	{r3, lr}
	printk("task2 is running\n");
 80005ce:	f002 fbf8 	bl	8002dc2 <printk>
		printk("Heart beat!\n");
 80005d2:	4620      	mov	r0, r4
 80005d4:	f002 fbf5 	bl	8002dc2 <printk>
 80005d8:	2100      	movs	r1, #0
 80005da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80005de:	f002 fa09 	bl	80029f4 <z_impl_k_sleep>
 80005e2:	e7f6      	b.n	80005d2 <task2+0xa>
 80005e4:	08004042 	.word	0x08004042
 80005e8:	08004030 	.word	0x08004030

080005ec <main>:
{
 80005ec:	b510      	push	{r4, lr}
	printk("Hello World! %s\n", CONFIG_BOARD);
 80005ee:	490f      	ldr	r1, [pc, #60]	; (800062c <main+0x40>)
{
 80005f0:	b088      	sub	sp, #32
	printk("Hello World! %s\n", CONFIG_BOARD);
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <main+0x44>)
 80005f4:	f002 fbe5 	bl	8002dc2 <printk>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2300      	movs	r3, #0
 80005fc:	2400      	movs	r4, #0
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <main+0x48>)
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <main+0x4c>)
 8000602:	9400      	str	r4, [sp, #0]
 8000604:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000608:	f06f 0308 	mvn.w	r3, #8
 800060c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000610:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8000614:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <main+0x50>)
 800061a:	f001 ff23 	bl	8002464 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
 800061e:	4908      	ldr	r1, [pc, #32]	; (8000640 <main+0x54>)
 8000620:	f002 ff8a 	bl	8003538 <z_impl_k_thread_name_set>
}
 8000624:	4620      	mov	r0, r4
 8000626:	b008      	add	sp, #32
 8000628:	bd10      	pop	{r4, pc}
 800062a:	bf00      	nop
 800062c:	0800404f 	.word	0x0800404f
 8000630:	0800405d 	.word	0x0800405d
 8000634:	24000440 	.word	0x24000440
 8000638:	24000100 	.word	0x24000100
 800063c:	0800059d 	.word	0x0800059d
 8000640:	0800406e 	.word	0x0800406e

08000644 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <char_out+0x8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4718      	bx	r3
 800064a:	bf00      	nop
 800064c:	24000000 	.word	0x24000000

08000650 <__printk_hook_install>:
	_char_out = fn;
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <__printk_hook_install+0x8>)
 8000652:	6018      	str	r0, [r3, #0]
}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	24000000 	.word	0x24000000

0800065c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 800065c:	b507      	push	{r0, r1, r2, lr}
 800065e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 8000660:	2100      	movs	r1, #0
 8000662:	4602      	mov	r2, r0
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <vprintk+0x18>)
 8000666:	9100      	str	r1, [sp, #0]
 8000668:	f000 f806 	bl	8000678 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 800066c:	b003      	add	sp, #12
 800066e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000672:	bf00      	nop
 8000674:	08000645 	.word	0x08000645

08000678 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8000678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800067c:	468b      	mov	fp, r1
 800067e:	b091      	sub	sp, #68	; 0x44
 8000680:	4692      	mov	sl, r2
 8000682:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000684:	2500      	movs	r5, #0
{
 8000686:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000688:	f89a 0000 	ldrb.w	r0, [sl]
 800068c:	b908      	cbnz	r0, 8000692 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 800068e:	4628      	mov	r0, r5
 8000690:	e364      	b.n	8000d5c <z_cbvprintf_impl+0x6e4>
		if (*fp != '%') {
 8000692:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000694:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
 8000698:	d007      	beq.n	80006aa <z_cbvprintf_impl+0x32>
			OUTC('%');
 800069a:	4659      	mov	r1, fp
 800069c:	9b02      	ldr	r3, [sp, #8]
 800069e:	4798      	blx	r3
 80006a0:	2800      	cmp	r0, #0
 80006a2:	f2c0 835b 	blt.w	8000d5c <z_cbvprintf_impl+0x6e4>
 80006a6:	3501      	adds	r5, #1
			break;
 80006a8:	e212      	b.n	8000ad0 <z_cbvprintf_impl+0x458>
		} state = {
 80006aa:	2218      	movs	r2, #24
 80006ac:	2100      	movs	r1, #0
 80006ae:	a80a      	add	r0, sp, #40	; 0x28
 80006b0:	f002 fc20 	bl	8002ef4 <memset>
	if (*sp == '%') {
 80006b4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80006b8:	2b25      	cmp	r3, #37	; 0x25
 80006ba:	d078      	beq.n	80007ae <z_cbvprintf_impl+0x136>
 80006bc:	2200      	movs	r2, #0
 80006be:	4610      	mov	r0, r2
 80006c0:	4696      	mov	lr, r2
 80006c2:	4694      	mov	ip, r2
 80006c4:	4616      	mov	r6, r2
 80006c6:	4639      	mov	r1, r7
		switch (*sp) {
 80006c8:	f817 3b01 	ldrb.w	r3, [r7], #1
 80006cc:	2b2b      	cmp	r3, #43	; 0x2b
 80006ce:	f000 809d 	beq.w	800080c <z_cbvprintf_impl+0x194>
 80006d2:	f200 8094 	bhi.w	80007fe <z_cbvprintf_impl+0x186>
 80006d6:	2b20      	cmp	r3, #32
 80006d8:	f000 809b 	beq.w	8000812 <z_cbvprintf_impl+0x19a>
 80006dc:	2b23      	cmp	r3, #35	; 0x23
 80006de:	f000 809b 	beq.w	8000818 <z_cbvprintf_impl+0x1a0>
 80006e2:	b12e      	cbz	r6, 80006f0 <z_cbvprintf_impl+0x78>
 80006e4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80006e8:	f046 0604 	orr.w	r6, r6, #4
 80006ec:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80006f0:	f1bc 0f00 	cmp.w	ip, #0
 80006f4:	d005      	beq.n	8000702 <z_cbvprintf_impl+0x8a>
 80006f6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80006fa:	f046 0608 	orr.w	r6, r6, #8
 80006fe:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000702:	f1be 0f00 	cmp.w	lr, #0
 8000706:	d005      	beq.n	8000714 <z_cbvprintf_impl+0x9c>
 8000708:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 800070c:	f046 0610 	orr.w	r6, r6, #16
 8000710:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000714:	b128      	cbz	r0, 8000722 <z_cbvprintf_impl+0xaa>
 8000716:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 800071a:	f040 0020 	orr.w	r0, r0, #32
 800071e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8000722:	b12a      	cbz	r2, 8000730 <z_cbvprintf_impl+0xb8>
 8000724:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800072c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 8000730:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000734:	f002 0044 	and.w	r0, r2, #68	; 0x44
 8000738:	2844      	cmp	r0, #68	; 0x44
 800073a:	d103      	bne.n	8000744 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 800073c:	f36f 1286 	bfc	r2, #6, #1
 8000740:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 8000744:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 8000748:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 800074a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800074e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 8000752:	d17b      	bne.n	800084c <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
 8000754:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
 8000758:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 800075a:	f042 0201 	orr.w	r2, r2, #1
 800075e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	2a2e      	cmp	r2, #46	; 0x2e
 8000766:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800076a:	bf0c      	ite	eq
 800076c:	2101      	moveq	r1, #1
 800076e:	2100      	movne	r1, #0
 8000770:	f361 0241 	bfi	r2, r1, #1, #1
 8000774:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 8000778:	d174      	bne.n	8000864 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
 800077a:	785a      	ldrb	r2, [r3, #1]
 800077c:	2a2a      	cmp	r2, #42	; 0x2a
 800077e:	d06a      	beq.n	8000856 <z_cbvprintf_impl+0x1de>
	++sp;
 8000780:	3301      	adds	r3, #1
	size_t val = 0;
 8000782:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 8000784:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000786:	4618      	mov	r0, r3
 8000788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800078c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 8000790:	2f09      	cmp	r7, #9
 8000792:	f240 808e 	bls.w	80008b2 <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000796:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 800079a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 800079c:	f3c2 0040 	ubfx	r0, r2, #1, #1
 80007a0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 80007a4:	f361 0241 	bfi	r2, r1, #1, #1
 80007a8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 80007ac:	e05a      	b.n	8000864 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
 80007ae:	f10a 0702 	add.w	r7, sl, #2
 80007b2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 80007b6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80007ba:	07d9      	lsls	r1, r3, #31
 80007bc:	f140 8149 	bpl.w	8000a52 <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
 80007c0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 80007c4:	f1b9 0f00 	cmp.w	r9, #0
 80007c8:	da07      	bge.n	80007da <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
 80007ca:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
 80007ce:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
 80007d2:	f042 0204 	orr.w	r2, r2, #4
 80007d6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
 80007da:	075a      	lsls	r2, r3, #29
 80007dc:	f140 8142 	bpl.w	8000a64 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
 80007e0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 80007e4:	f1b8 0f00 	cmp.w	r8, #0
 80007e8:	f280 8141 	bge.w	8000a6e <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
 80007ec:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80007f0:	f36f 0341 	bfc	r3, #1, #1
 80007f4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 80007f8:	f04f 38ff 	mov.w	r8, #4294967295
 80007fc:	e137      	b.n	8000a6e <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
 80007fe:	2b2d      	cmp	r3, #45	; 0x2d
 8000800:	d00c      	beq.n	800081c <z_cbvprintf_impl+0x1a4>
 8000802:	2b30      	cmp	r3, #48	; 0x30
 8000804:	f47f af6d 	bne.w	80006e2 <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
 8000808:	2201      	movs	r2, #1
	} while (loop);
 800080a:	e75c      	b.n	80006c6 <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
 800080c:	f04f 0c01 	mov.w	ip, #1
 8000810:	e759      	b.n	80006c6 <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
 8000812:	f04f 0e01 	mov.w	lr, #1
 8000816:	e756      	b.n	80006c6 <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
 8000818:	2001      	movs	r0, #1
 800081a:	e754      	b.n	80006c6 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
 800081c:	2601      	movs	r6, #1
 800081e:	e752      	b.n	80006c6 <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
 8000820:	fb0c 0202 	mla	r2, ip, r2, r0
 8000824:	4633      	mov	r3, r6
 8000826:	3a30      	subs	r2, #48	; 0x30
 8000828:	461e      	mov	r6, r3
 800082a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800082e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 8000832:	2f09      	cmp	r7, #9
 8000834:	d9f4      	bls.n	8000820 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
 8000836:	4299      	cmp	r1, r3
 8000838:	d093      	beq.n	8000762 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 800083a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 800083e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 8000840:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 8000842:	f362 0141 	bfi	r1, r2, #1, #1
 8000846:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 800084a:	e78a      	b.n	8000762 <z_cbvprintf_impl+0xea>
 800084c:	460b      	mov	r3, r1
	size_t val = 0;
 800084e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000850:	f04f 0c0a 	mov.w	ip, #10
 8000854:	e7e8      	b.n	8000828 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
 8000856:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 800085a:	3302      	adds	r3, #2
		conv->prec_star = true;
 800085c:	f042 0204 	orr.w	r2, r2, #4
 8000860:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
 8000864:	461f      	mov	r7, r3
 8000866:	f817 2b01 	ldrb.w	r2, [r7], #1
 800086a:	2a6c      	cmp	r2, #108	; 0x6c
 800086c:	d041      	beq.n	80008f2 <z_cbvprintf_impl+0x27a>
 800086e:	d825      	bhi.n	80008bc <z_cbvprintf_impl+0x244>
 8000870:	2a68      	cmp	r2, #104	; 0x68
 8000872:	d02b      	beq.n	80008cc <z_cbvprintf_impl+0x254>
 8000874:	2a6a      	cmp	r2, #106	; 0x6a
 8000876:	d046      	beq.n	8000906 <z_cbvprintf_impl+0x28e>
 8000878:	2a4c      	cmp	r2, #76	; 0x4c
 800087a:	d04c      	beq.n	8000916 <z_cbvprintf_impl+0x29e>
 800087c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 800087e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000882:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
 8000886:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8000888:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 800088c:	f200 80d9 	bhi.w	8000a42 <z_cbvprintf_impl+0x3ca>
 8000890:	2a57      	cmp	r2, #87	; 0x57
 8000892:	d84d      	bhi.n	8000930 <z_cbvprintf_impl+0x2b8>
 8000894:	2a41      	cmp	r2, #65	; 0x41
 8000896:	d003      	beq.n	80008a0 <z_cbvprintf_impl+0x228>
 8000898:	3a45      	subs	r2, #69	; 0x45
 800089a:	2a02      	cmp	r2, #2
 800089c:	f200 80d1 	bhi.w	8000a42 <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 80008a0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 80008a4:	2204      	movs	r2, #4
 80008a6:	f362 0302 	bfi	r3, r2, #0, #3
 80008aa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 80008ae:	2301      	movs	r3, #1
			break;
 80008b0:	e09e      	b.n	80009f0 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
 80008b2:	fb06 2101 	mla	r1, r6, r1, r2
 80008b6:	4603      	mov	r3, r0
 80008b8:	3930      	subs	r1, #48	; 0x30
 80008ba:	e764      	b.n	8000786 <z_cbvprintf_impl+0x10e>
	switch (*sp) {
 80008bc:	2a74      	cmp	r2, #116	; 0x74
 80008be:	d026      	beq.n	800090e <z_cbvprintf_impl+0x296>
 80008c0:	2a7a      	cmp	r2, #122	; 0x7a
 80008c2:	d1db      	bne.n	800087c <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
 80008c4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80008c8:	2206      	movs	r2, #6
 80008ca:	e00d      	b.n	80008e8 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
 80008cc:	785a      	ldrb	r2, [r3, #1]
 80008ce:	2a68      	cmp	r2, #104	; 0x68
 80008d0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80008d4:	d106      	bne.n	80008e4 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
 80008d6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 80008d8:	f361 02c6 	bfi	r2, r1, #3, #4
			++sp;
 80008dc:	1c9f      	adds	r7, r3, #2
			conv->length_mod = LENGTH_LL;
 80008de:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 80008e2:	e7cc      	b.n	800087e <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
 80008e4:	4613      	mov	r3, r2
 80008e6:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 80008e8:	f362 03c6 	bfi	r3, r2, #3, #4
 80008ec:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 80008f0:	e7c5      	b.n	800087e <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
 80008f2:	785a      	ldrb	r2, [r3, #1]
 80008f4:	2a6c      	cmp	r2, #108	; 0x6c
 80008f6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80008fa:	d101      	bne.n	8000900 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
 80008fc:	2104      	movs	r1, #4
 80008fe:	e7eb      	b.n	80008d8 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
 8000900:	4613      	mov	r3, r2
 8000902:	2203      	movs	r2, #3
 8000904:	e7f0      	b.n	80008e8 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
 8000906:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800090a:	2205      	movs	r2, #5
 800090c:	e7ec      	b.n	80008e8 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
 800090e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000912:	2207      	movs	r2, #7
 8000914:	e7e8      	b.n	80008e8 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
 8000916:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800091a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800091e:	f023 0302 	bic.w	r3, r3, #2
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 800092e:	e7a6      	b.n	800087e <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
 8000930:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 8000934:	2920      	cmp	r1, #32
 8000936:	f200 8084 	bhi.w	8000a42 <z_cbvprintf_impl+0x3ca>
 800093a:	a001      	add	r0, pc, #4	; (adr r0, 8000940 <z_cbvprintf_impl+0x2c8>)
 800093c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8000940:	08000a05 	.word	0x08000a05
 8000944:	08000a43 	.word	0x08000a43
 8000948:	08000a43 	.word	0x08000a43
 800094c:	08000a43 	.word	0x08000a43
 8000950:	08000a43 	.word	0x08000a43
 8000954:	08000a43 	.word	0x08000a43
 8000958:	08000a43 	.word	0x08000a43
 800095c:	08000a43 	.word	0x08000a43
 8000960:	08000a43 	.word	0x08000a43
 8000964:	080008a1 	.word	0x080008a1
 8000968:	08000a43 	.word	0x08000a43
 800096c:	08000a05 	.word	0x08000a05
 8000970:	080009c5 	.word	0x080009c5
 8000974:	080008a1 	.word	0x080008a1
 8000978:	080008a1 	.word	0x080008a1
 800097c:	080008a1 	.word	0x080008a1
 8000980:	08000a43 	.word	0x08000a43
 8000984:	080009c5 	.word	0x080009c5
 8000988:	08000a43 	.word	0x08000a43
 800098c:	08000a43 	.word	0x08000a43
 8000990:	08000a43 	.word	0x08000a43
 8000994:	08000a43 	.word	0x08000a43
 8000998:	08000a0d 	.word	0x08000a0d
 800099c:	08000a05 	.word	0x08000a05
 80009a0:	08000a29 	.word	0x08000a29
 80009a4:	08000a43 	.word	0x08000a43
 80009a8:	08000a43 	.word	0x08000a43
 80009ac:	08000a29 	.word	0x08000a29
 80009b0:	08000a43 	.word	0x08000a43
 80009b4:	08000a05 	.word	0x08000a05
 80009b8:	08000a43 	.word	0x08000a43
 80009bc:	08000a43 	.word	0x08000a43
 80009c0:	08000a05 	.word	0x08000a05
		conv->specifier_cat = SPECIFIER_SINT;
 80009c4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80009c8:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 80009ca:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 80009ce:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80009d2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 80009d4:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 80009d8:	bf02      	ittt	eq
 80009da:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 80009de:	f041 0101 	orreq.w	r1, r1, #1
 80009e2:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 80009e6:	2a63      	cmp	r2, #99	; 0x63
 80009e8:	d131      	bne.n	8000a4e <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80009ea:	3b00      	subs	r3, #0
 80009ec:	bf18      	it	ne
 80009ee:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 80009f0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80009f4:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80009f8:	430b      	orrs	r3, r1
 80009fa:	f363 0241 	bfi	r2, r3, #1, #1
 80009fe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 8000a02:	e6d8      	b.n	80007b6 <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 8000a04:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8000a08:	2002      	movs	r0, #2
 8000a0a:	e7de      	b.n	80009ca <z_cbvprintf_impl+0x352>
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000a0c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8000a10:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000a14:	2103      	movs	r1, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000a16:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 8000a1a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000a1e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 8000a20:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000a24:	4143      	adcs	r3, r0
 8000a26:	e7e3      	b.n	80009f0 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 8000a28:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000a2c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 8000a2e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8000a32:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 8000a36:	bf14      	ite	ne
 8000a38:	2301      	movne	r3, #1
 8000a3a:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
 8000a3c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 8000a40:	e7d6      	b.n	80009f0 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
 8000a42:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e7ce      	b.n	80009f0 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
 8000a52:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 8000a56:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000a58:	bfb4      	ite	lt
 8000a5a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
 8000a5e:	f04f 39ff 	movge.w	r9, #4294967295
 8000a62:	e6ba      	b.n	80007da <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
 8000a64:	079b      	lsls	r3, r3, #30
 8000a66:	f57f aec7 	bpl.w	80007f8 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
 8000a6a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
 8000a6e:	2300      	movs	r3, #0
			= (enum length_mod_enum)conv->length_mod;
 8000a70:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_pre_exp = 0;
 8000a74:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000a78:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
 8000a7c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		enum specifier_cat_enum specifier_cat
 8000a80:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d135      	bne.n	8000af4 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
 8000a88:	1ecb      	subs	r3, r1, #3
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	d822      	bhi.n	8000ad4 <z_cbvprintf_impl+0x45c>
 8000a8e:	e8df f003 	tbb	[pc, r3]
 8000a92:	0903      	.short	0x0903
 8000a94:	2109      	.short	0x2109
 8000a96:	21          	.byte	0x21
 8000a97:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8000a98:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 8000a9c:	17da      	asrs	r2, r3, #31
 8000a9e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 8000aa2:	e006      	b.n	8000ab2 <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
 8000aa4:	3407      	adds	r4, #7
 8000aa6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8000aaa:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000aae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 8000ab2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8000ab6:	f013 0603 	ands.w	r6, r3, #3
 8000aba:	d059      	beq.n	8000b70 <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
 8000abc:	463b      	mov	r3, r7
 8000abe:	4652      	mov	r2, sl
 8000ac0:	4659      	mov	r1, fp
 8000ac2:	9802      	ldr	r0, [sp, #8]
 8000ac4:	f002 f9da 	bl	8002e7c <outs>
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	f2c0 8147 	blt.w	8000d5c <z_cbvprintf_impl+0x6e4>
 8000ace:	4405      	add	r5, r0
			continue;
 8000ad0:	46ba      	mov	sl, r7
 8000ad2:	e5d9      	b.n	8000688 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000ad4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000ad8:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000ada:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8000ade:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000ae2:	d102      	bne.n	8000aea <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
 8000ae4:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
 8000ae8:	e7d8      	b.n	8000a9c <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
 8000aea:	2902      	cmp	r1, #2
 8000aec:	d1e1      	bne.n	8000ab2 <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
 8000aee:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8000af2:	e7d3      	b.n	8000a9c <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d129      	bne.n	8000b4c <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
 8000af8:	1ecb      	subs	r3, r1, #3
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d813      	bhi.n	8000b26 <z_cbvprintf_impl+0x4ae>
 8000afe:	e8df f003 	tbb	[pc, r3]
 8000b02:	0a03      	.short	0x0a03
 8000b04:	120a      	.short	0x120a
 8000b06:	12          	.byte	0x12
 8000b07:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8000b08:	6822      	ldr	r2, [r4, #0]
 8000b0a:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 8000b0c:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8000b0e:	920a      	str	r2, [sp, #40]	; 0x28
 8000b10:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 8000b12:	4604      	mov	r4, r0
 8000b14:	e7cd      	b.n	8000ab2 <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
 8000b16:	1de0      	adds	r0, r4, #7
 8000b18:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 8000b1c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8000b20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 8000b24:	e7f5      	b.n	8000b12 <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
 8000b26:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000b2a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8000b2c:	930a      	str	r3, [sp, #40]	; 0x28
 8000b2e:	f04f 0300 	mov.w	r3, #0
 8000b32:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 8000b34:	d105      	bne.n	8000b42 <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
 8000b36:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 8000b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b40:	e7b7      	b.n	8000ab2 <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
 8000b42:	2902      	cmp	r1, #2
 8000b44:	d1b5      	bne.n	8000ab2 <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
 8000b46:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8000b4a:	e7f6      	b.n	8000b3a <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	d109      	bne.n	8000b64 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
 8000b50:	1de3      	adds	r3, r4, #7
 8000b52:	f023 0307 	bic.w	r3, r3, #7
 8000b56:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 8000b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000b62:	e7a6      	b.n	8000ab2 <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000b64:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8000b66:	bf04      	itt	eq
 8000b68:	f854 3b04 	ldreq.w	r3, [r4], #4
 8000b6c:	930a      	streq	r3, [sp, #40]	; 0x28
 8000b6e:	e7a0      	b.n	8000ab2 <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
 8000b70:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000b74:	2878      	cmp	r0, #120	; 0x78
 8000b76:	d8ab      	bhi.n	8000ad0 <z_cbvprintf_impl+0x458>
 8000b78:	2862      	cmp	r0, #98	; 0x62
 8000b7a:	d822      	bhi.n	8000bc2 <z_cbvprintf_impl+0x54a>
 8000b7c:	2825      	cmp	r0, #37	; 0x25
 8000b7e:	f43f ad8c 	beq.w	800069a <z_cbvprintf_impl+0x22>
 8000b82:	2858      	cmp	r0, #88	; 0x58
 8000b84:	d1a4      	bne.n	8000ad0 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000b86:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000b8a:	aa0c      	add	r2, sp, #48	; 0x30
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	ab04      	add	r3, sp, #16
 8000b90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000b94:	f002 f92c 	bl	8002df0 <encode_uint>
 8000b98:	4682      	mov	sl, r0
			if (precision >= 0) {
 8000b9a:	f1b8 0f00 	cmp.w	r8, #0
 8000b9e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8000ba2:	db0c      	blt.n	8000bbe <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
 8000ba4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8000ba8:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 8000bac:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000bb0:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8000bb2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 8000bb6:	d902      	bls.n	8000bbe <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
 8000bb8:	eba8 0303 	sub.w	r3, r8, r3
 8000bbc:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8000bbe:	4680      	mov	r8, r0
 8000bc0:	e03e      	b.n	8000c40 <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
 8000bc2:	3863      	subs	r0, #99	; 0x63
 8000bc4:	2815      	cmp	r0, #21
 8000bc6:	d883      	bhi.n	8000ad0 <z_cbvprintf_impl+0x458>
 8000bc8:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <z_cbvprintf_impl+0x558>)
 8000bca:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000bce:	bf00      	nop
 8000bd0:	08000c51 	.word	0x08000c51
 8000bd4:	08000cb5 	.word	0x08000cb5
 8000bd8:	08000ad1 	.word	0x08000ad1
 8000bdc:	08000ad1 	.word	0x08000ad1
 8000be0:	08000ad1 	.word	0x08000ad1
 8000be4:	08000ad1 	.word	0x08000ad1
 8000be8:	08000cb5 	.word	0x08000cb5
 8000bec:	08000ad1 	.word	0x08000ad1
 8000bf0:	08000ad1 	.word	0x08000ad1
 8000bf4:	08000ad1 	.word	0x08000ad1
 8000bf8:	08000ad1 	.word	0x08000ad1
 8000bfc:	08000d11 	.word	0x08000d11
 8000c00:	08000cdf 	.word	0x08000cdf
 8000c04:	08000ce3 	.word	0x08000ce3
 8000c08:	08000ad1 	.word	0x08000ad1
 8000c0c:	08000ad1 	.word	0x08000ad1
 8000c10:	08000c29 	.word	0x08000c29
 8000c14:	08000ad1 	.word	0x08000ad1
 8000c18:	08000cdf 	.word	0x08000cdf
 8000c1c:	08000ad1 	.word	0x08000ad1
 8000c20:	08000ad1 	.word	0x08000ad1
 8000c24:	08000cdf 	.word	0x08000cdf
			if (precision >= 0) {
 8000c28:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8000c2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 8000c30:	db0a      	blt.n	8000c48 <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
 8000c32:	4641      	mov	r1, r8
 8000c34:	4650      	mov	r0, sl
 8000c36:	f002 f969 	bl	8002f0c <strnlen>
			bpe = bps + len;
 8000c3a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
 8000c3e:	2600      	movs	r6, #0
		if (bps == NULL) {
 8000c40:	f1ba 0f00 	cmp.w	sl, #0
 8000c44:	d10c      	bne.n	8000c60 <z_cbvprintf_impl+0x5e8>
 8000c46:	e743      	b.n	8000ad0 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
 8000c48:	4650      	mov	r0, sl
 8000c4a:	f002 f941 	bl	8002ed0 <strlen>
 8000c4e:	e7f4      	b.n	8000c3a <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			break;
 8000c52:	2600      	movs	r6, #0
			bps = buf;
 8000c54:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
 8000c58:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000c5c:	f88d 3010 	strb.w	r3, [sp, #16]
		size_t nj_len = (bpe - bps);
 8000c60:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 8000c64:	b106      	cbz	r6, 8000c68 <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
 8000c66:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8000c68:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000c6c:	06d0      	lsls	r0, r2, #27
 8000c6e:	d569      	bpl.n	8000d44 <z_cbvprintf_impl+0x6cc>
			nj_len += 2U;
 8000c70:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 8000c72:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 8000c74:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 8000c76:	bf48      	it	mi
 8000c78:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 8000c7a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8000c7c:	bf48      	it	mi
 8000c7e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8000c80:	f1b9 0f00 	cmp.w	r9, #0
 8000c84:	dd77      	ble.n	8000d76 <z_cbvprintf_impl+0x6fe>
			if (!conv->flag_dash) {
 8000c86:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8000c8a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 8000c8e:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000c92:	9303      	str	r3, [sp, #12]
 8000c94:	0753      	lsls	r3, r2, #29
 8000c96:	d46e      	bmi.n	8000d76 <z_cbvprintf_impl+0x6fe>
				if (conv->flag_zero) {
 8000c98:	0650      	lsls	r0, r2, #25
 8000c9a:	d562      	bpl.n	8000d62 <z_cbvprintf_impl+0x6ea>
					if (sign != 0) {
 8000c9c:	b146      	cbz	r6, 8000cb0 <z_cbvprintf_impl+0x638>
						OUTC(sign);
 8000c9e:	4659      	mov	r1, fp
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	9b02      	ldr	r3, [sp, #8]
 8000ca4:	4798      	blx	r3
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	db58      	blt.n	8000d5c <z_cbvprintf_impl+0x6e4>
						sign = 0;
 8000caa:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8000cac:	3501      	adds	r5, #1
						sign = 0;
 8000cae:	461e      	mov	r6, r3
					pad = '0';
 8000cb0:	2330      	movs	r3, #48	; 0x30
 8000cb2:	e057      	b.n	8000d64 <z_cbvprintf_impl+0x6ec>
			if (conv->flag_plus) {
 8000cb4:	071e      	lsls	r6, r3, #28
 8000cb6:	d410      	bmi.n	8000cda <z_cbvprintf_impl+0x662>
				sign = ' ';
 8000cb8:	f013 0610 	ands.w	r6, r3, #16
 8000cbc:	bf18      	it	ne
 8000cbe:	2620      	movne	r6, #32
			sint = value->sint;
 8000cc0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f6bf af5e 	bge.w	8000b86 <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
 8000cca:	4252      	negs	r2, r2
				sign = '-';
 8000ccc:	f04f 062d 	mov.w	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 8000cd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000cd8:	e755      	b.n	8000b86 <z_cbvprintf_impl+0x50e>
				sign = '+';
 8000cda:	262b      	movs	r6, #43	; 0x2b
 8000cdc:	e7f0      	b.n	8000cc0 <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
 8000cde:	2600      	movs	r6, #0
 8000ce0:	e751      	b.n	8000b86 <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
 8000ce2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000ce4:	b340      	cbz	r0, 8000d38 <z_cbvprintf_impl+0x6c0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000ce6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000cea:	aa0c      	add	r2, sp, #48	; 0x30
 8000cec:	2100      	movs	r1, #0
		char sign = 0;
 8000cee:	2600      	movs	r6, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	ab04      	add	r3, sp, #16
 8000cf4:	f002 f87c 	bl	8002df0 <encode_uint>
				conv->altform_0c = true;
 8000cf8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000cfc:	4682      	mov	sl, r0
				conv->altform_0c = true;
 8000cfe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000d02:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
 8000d0e:	e744      	b.n	8000b9a <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
 8000d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8000d12:	2907      	cmp	r1, #7
 8000d14:	f63f aedc 	bhi.w	8000ad0 <z_cbvprintf_impl+0x458>
 8000d18:	e8df f001 	tbb	[pc, r1]
 8000d1c:	0c06040c 	.word	0x0c06040c
 8000d20:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8000d24:	701d      	strb	r5, [r3, #0]
		break;
 8000d26:	e6d3      	b.n	8000ad0 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
 8000d28:	801d      	strh	r5, [r3, #0]
		break;
 8000d2a:	e6d1      	b.n	8000ad0 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
 8000d2c:	17ea      	asrs	r2, r5, #31
 8000d2e:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 8000d32:	e6cd      	b.n	8000ad0 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000d34:	601d      	str	r5, [r3, #0]
		break;
 8000d36:	e6cb      	b.n	8000ad0 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
 8000d38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000e00 <z_cbvprintf_impl+0x788>
 8000d3c:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000d3e:	f10a 0805 	add.w	r8, sl, #5
 8000d42:	e78d      	b.n	8000c60 <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
 8000d44:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8000d46:	bf48      	it	mi
 8000d48:	3301      	addmi	r3, #1
 8000d4a:	e792      	b.n	8000c72 <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	9303      	str	r3, [sp, #12]
 8000d50:	4659      	mov	r1, fp
 8000d52:	9b02      	ldr	r3, [sp, #8]
 8000d54:	4798      	blx	r3
 8000d56:	2800      	cmp	r0, #0
 8000d58:	9b03      	ldr	r3, [sp, #12]
 8000d5a:	da04      	bge.n	8000d66 <z_cbvprintf_impl+0x6ee>
#undef OUTS
#undef OUTC
}
 8000d5c:	b011      	add	sp, #68	; 0x44
 8000d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000d62:	2320      	movs	r3, #32
 8000d64:	444d      	add	r5, r9
 8000d66:	464a      	mov	r2, r9
 8000d68:	eba5 0109 	sub.w	r1, r5, r9
				while (width-- > 0) {
 8000d6c:	f109 39ff 	add.w	r9, r9, #4294967295
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	dceb      	bgt.n	8000d4c <z_cbvprintf_impl+0x6d4>
 8000d74:	460d      	mov	r5, r1
		if (sign != 0) {
 8000d76:	b136      	cbz	r6, 8000d86 <z_cbvprintf_impl+0x70e>
			OUTC(sign);
 8000d78:	4659      	mov	r1, fp
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	9b02      	ldr	r3, [sp, #8]
 8000d7e:	4798      	blx	r3
 8000d80:	2800      	cmp	r0, #0
 8000d82:	dbeb      	blt.n	8000d5c <z_cbvprintf_impl+0x6e4>
 8000d84:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000d86:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000d8a:	06d9      	lsls	r1, r3, #27
 8000d8c:	d401      	bmi.n	8000d92 <z_cbvprintf_impl+0x71a>
 8000d8e:	071a      	lsls	r2, r3, #28
 8000d90:	d506      	bpl.n	8000da0 <z_cbvprintf_impl+0x728>
				OUTC('0');
 8000d92:	4659      	mov	r1, fp
 8000d94:	2030      	movs	r0, #48	; 0x30
 8000d96:	9b02      	ldr	r3, [sp, #8]
 8000d98:	4798      	blx	r3
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	dbde      	blt.n	8000d5c <z_cbvprintf_impl+0x6e4>
 8000d9e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000da0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000da4:	06db      	lsls	r3, r3, #27
 8000da6:	d507      	bpl.n	8000db8 <z_cbvprintf_impl+0x740>
				OUTC(conv->specifier);
 8000da8:	4659      	mov	r1, fp
 8000daa:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000dae:	9b02      	ldr	r3, [sp, #8]
 8000db0:	4798      	blx	r3
 8000db2:	2800      	cmp	r0, #0
 8000db4:	dbd2      	blt.n	8000d5c <z_cbvprintf_impl+0x6e4>
 8000db6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000db8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8000dba:	442e      	add	r6, r5
 8000dbc:	1b73      	subs	r3, r6, r5
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	dc16      	bgt.n	8000df0 <z_cbvprintf_impl+0x778>
			OUTS(bps, bpe);
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	4652      	mov	r2, sl
 8000dc6:	4659      	mov	r1, fp
 8000dc8:	9802      	ldr	r0, [sp, #8]
 8000dca:	f002 f857 	bl	8002e7c <outs>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	dbc4      	blt.n	8000d5c <z_cbvprintf_impl+0x6e4>
 8000dd2:	4405      	add	r5, r0
		while (width > 0) {
 8000dd4:	44a9      	add	r9, r5
 8000dd6:	eba9 0305 	sub.w	r3, r9, r5
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f77f ae78 	ble.w	8000ad0 <z_cbvprintf_impl+0x458>
			OUTC(' ');
 8000de0:	4659      	mov	r1, fp
 8000de2:	2020      	movs	r0, #32
 8000de4:	9b02      	ldr	r3, [sp, #8]
 8000de6:	4798      	blx	r3
 8000de8:	2800      	cmp	r0, #0
 8000dea:	dbb7      	blt.n	8000d5c <z_cbvprintf_impl+0x6e4>
 8000dec:	3501      	adds	r5, #1
			--width;
 8000dee:	e7f2      	b.n	8000dd6 <z_cbvprintf_impl+0x75e>
				OUTC('0');
 8000df0:	4659      	mov	r1, fp
 8000df2:	2030      	movs	r0, #48	; 0x30
 8000df4:	9b02      	ldr	r3, [sp, #8]
 8000df6:	4798      	blx	r3
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	dbaf      	blt.n	8000d5c <z_cbvprintf_impl+0x6e4>
 8000dfc:	3501      	adds	r5, #1
 8000dfe:	e7dd      	b.n	8000dbc <z_cbvprintf_impl+0x744>
 8000e00:	08004093 	.word	0x08004093

08000e04 <stm32h7_init>:
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int stm32h7_init(void)
{
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000e06:	f04f 0310 	mov.w	r3, #16
 8000e0a:	f3ef 8011 	mrs	r0, BASEPRI
 8000e0e:	f383 8812 	msr	BASEPRI_MAX, r3
 8000e12:	f3bf 8f6f 	isb	sy
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e16:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <stm32h7_init+0xe4>)
 8000e18:	695a      	ldr	r2, [r3, #20]
 8000e1a:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000e1e:	d111      	bne.n	8000e44 <stm32h7_init+0x40>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e24:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e28:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e30:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000e3a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e40:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	SCB_EnableICache();

	if (IS_ENABLED(CONFIG_DCACHE)) {
		if (!(SCB->CCR & SCB_CCR_DC_Msk)) {
 8000e44:	4a28      	ldr	r2, [pc, #160]	; (8000ee8 <stm32h7_init+0xe4>)
 8000e46:	6953      	ldr	r3, [r2, #20]
 8000e48:	03d9      	lsls	r1, r3, #15
 8000e4a:	d427      	bmi.n	8000e9c <stm32h7_init+0x98>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e4c:	6953      	ldr	r3, [r2, #20]
 8000e4e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000e52:	d123      	bne.n	8000e9c <stm32h7_init+0x98>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e58:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e5c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e60:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e64:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e68:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000e6c:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e6e:	ea03 0705 	and.w	r7, r3, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e72:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e74:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e78:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e7a:	f8c2 6260 	str.w	r6, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000e7e:	d2f9      	bcs.n	8000e74 <stm32h7_init+0x70>
    } while(sets-- != 0U);
 8000e80:	3b20      	subs	r3, #32
 8000e82:	f113 0f20 	cmn.w	r3, #32
 8000e86:	d1f2      	bne.n	8000e6e <stm32h7_init+0x6a>
 8000e88:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e8c:	6953      	ldr	r3, [r2, #20]
 8000e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e92:	6153      	str	r3, [r2, #20]
 8000e94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e98:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000e9c:	f380 8811 	msr	BASEPRI, r0
 8000ea0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 64 MHz from HSI */
	SystemCoreClock = 64000000;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <stm32h7_init+0xe8>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <stm32h7_init+0xec>)
 8000ea8:	601a      	str	r2, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <stm32h7_init+0xf0>)
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	f022 0207 	bic.w	r2, r2, #7
 8000eb2:	f042 0202 	orr.w	r2, r2, #2
 8000eb6:	60da      	str	r2, [r3, #12]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8000eb8:	699a      	ldr	r2, [r3, #24]
 8000eba:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000ebe:	619a      	str	r2, [r3, #24]
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	0492      	lsls	r2, r2, #18
 8000ec4:	d5fc      	bpl.n	8000ec0 <stm32h7_init+0xbc>
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <stm32h7_init+0xf4>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
	 * 2.2.9: Reading from AXI SRAM may lead to data read corruption
	 * Workaround: Set the READ_ISS_OVERRIDE bit in the AXI_TARG7_FN_MOD
	 * register.
	 * Applicable only to RevY (REV_ID 0x1003)
	 */
	if (LL_DBGMCU_GetRevisionID() == 0x1003) {
 8000eca:	f241 0303 	movw	r3, #4099	; 0x1003
 8000ece:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
 8000ed2:	d106      	bne.n	8000ee2 <stm32h7_init+0xde>
		MODIFY_REG(GPV->AXI_TARG7_FN_MOD, 0x1, 0x1);
 8000ed4:	4a09      	ldr	r2, [pc, #36]	; (8000efc <stm32h7_init+0xf8>)
 8000ed6:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	}

	return 0;
}
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00
 8000eec:	24000034 	.word	0x24000034
 8000ef0:	03d09000 	.word	0x03d09000
 8000ef4:	58024800 	.word	0x58024800
 8000ef8:	5c001000 	.word	0x5c001000
 8000efc:	51008000 	.word	0x51008000

08000f00 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000f00:	4901      	ldr	r1, [pc, #4]	; (8000f08 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000f02:	2210      	movs	r2, #16
	str	r2, [r1]
 8000f04:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000f06:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000f08:	e000ed10 	.word	0xe000ed10

08000f0c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000f0c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000f0e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000f10:	f380 8811 	msr	BASEPRI, r0
	isb
 8000f14:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 8000f18:	f3bf 8f4f 	dsb	sy
 8000f1c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000f1e:	b662      	cpsie	i
	isb
 8000f20:	f3bf 8f6f 	isb	sy

	bx	lr
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000f28:	b203      	sxth	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db08      	blt.n	8000f40 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f000 001f 	and.w	r0, r0, #31
 8000f34:	095b      	lsrs	r3, r3, #5
 8000f36:	fa02 f000 	lsl.w	r0, r2, r0
 8000f3a:	4a02      	ldr	r2, [pc, #8]	; (8000f44 <arch_irq_enable+0x1c>)
 8000f3c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000f48:	b203      	sxth	r3, r0
		prio += _IRQ_PRIO_OFFSET;
 8000f4a:	3101      	adds	r1, #1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000f52:	b2c9      	uxtb	r1, r1
  if ((int32_t)(IRQn) >= 0)
 8000f54:	db06      	blt.n	8000f64 <z_arm_irq_priority_set+0x1c>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f5a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000f5e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8000f62:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	f000 000f 	and.w	r0, r0, #15
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <z_arm_irq_priority_set+0x28>)
 8000f6a:	5419      	strb	r1, [r3, r0]
}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed14 	.word	0xe000ed14

08000f74 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000f74:	bf30      	wfi
    b z_SysNmiOnReset
 8000f76:	f7ff bffd 	b.w	8000f74 <z_SysNmiOnReset>
 8000f7a:	bf00      	nop

08000f7c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8000f7e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000f80:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <z_arm_prep_c+0x44>)
 8000f86:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f8c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8000f90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f94:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000f9c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000fa4:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000fac:	f001 f964 	bl	8002278 <z_bss_zero>
	z_data_copy();
 8000fb0:	f001 fd9e 	bl	8002af0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000fb4:	f000 fa0c 	bl	80013d0 <z_arm_interrupt_init>
	z_cstart();
 8000fb8:	f001 f9ba 	bl	8002330 <z_cstart>
 8000fbc:	08000000 	.word	0x08000000
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000fc6:	490a      	ldr	r1, [pc, #40]	; (8000ff0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000fc8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000fca:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 8000fcc:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 8000fce:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000fd0:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <arch_swap+0x30>)
 8000fd2:	684b      	ldr	r3, [r1, #4]
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	604b      	str	r3, [r1, #4]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f383 8811 	msr	BASEPRI, r3
 8000fe0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000fe4:	6893      	ldr	r3, [r2, #8]
}
 8000fe6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	240003f0 	.word	0x240003f0
 8000ff0:	08003fe0 	.word	0x08003fe0
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000ff8:	4912      	ldr	r1, [pc, #72]	; (8001044 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000ffa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000ffc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8001000:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8001002:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8001006:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800100a:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 800100c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8001010:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8001014:	4f0c      	ldr	r7, [pc, #48]	; (8001048 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8001016:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 800101a:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
 800101c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800101e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8001020:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8001022:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8001024:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8001026:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 800102a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 800102c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800102e:	f000 fa13 	bl	8001458 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8001032:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8001036:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 800103a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 800103e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8001042:	4770      	bx	lr
    ldr r1, =_kernel
 8001044:	240003f0 	.word	0x240003f0
    ldr v4, =_SCS_ICSR
 8001048:	e000ed04 	.word	0xe000ed04

0800104c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 800104c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8001050:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8001052:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8001056:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800105a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 800105c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8001060:	2902      	cmp	r1, #2
    beq _oops
 8001062:	d0ff      	beq.n	8001064 <_oops>

08001064 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8001064:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8001066:	f001 ff24 	bl	8002eb2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 800106a:	bd01      	pop	{r0, pc}

0800106c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 800106c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8001070:	3a20      	subs	r2, #32
	iframe->a2 = (uint32_t)p1;
 8001072:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 8001074:	4907      	ldr	r1, [pc, #28]	; (8001094 <arch_new_thread+0x28>)
	iframe->a2 = (uint32_t)p1;
 8001076:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
 8001078:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 800107a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 800107e:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
 8001080:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 8001082:	6191      	str	r1, [r2, #24]
	iframe->a4 = (uint32_t)p3;
 8001084:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8001086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800108a:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 800108c:	2300      	movs	r3, #0
	thread->callee_saved.psp = (uint32_t)iframe;
 800108e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8001090:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001092:	4770      	bx	lr
 8001094:	08002ddd 	.word	0x08002ddd

08001098 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8001098:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <z_check_thread_stack_fail+0x28>)
{
 800109a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 800109c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 800109e:	b170      	cbz	r0, 80010be <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80010a0:	f113 0f16 	cmn.w	r3, #22
 80010a4:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80010a6:	d005      	beq.n	80010b4 <z_check_thread_stack_fail+0x1c>
 80010a8:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d805      	bhi.n	80010bc <z_check_thread_stack_fail+0x24>
 80010b0:	4283      	cmp	r3, r0
 80010b2:	d203      	bcs.n	80010bc <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 80010b4:	4281      	cmp	r1, r0
 80010b6:	bf28      	it	cs
 80010b8:	2000      	movcs	r0, #0
 80010ba:	4770      	bx	lr
 80010bc:	2000      	movs	r0, #0
}
 80010be:	4770      	bx	lr
 80010c0:	240003f0 	.word	0x240003f0

080010c4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80010c4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <arch_switch_to_main_thread+0x28>)
{
 80010c8:	460d      	mov	r5, r1
 80010ca:	4614      	mov	r4, r2
	_current = main_thread;
 80010cc:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80010ce:	f000 f9c3 	bl	8001458 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80010d2:	4620      	mov	r0, r4
 80010d4:	f385 8809 	msr	PSP, r5
 80010d8:	2100      	movs	r1, #0
 80010da:	b663      	cpsie	if
 80010dc:	f381 8811 	msr	BASEPRI, r1
 80010e0:	f3bf 8f6f 	isb	sy
 80010e4:	2200      	movs	r2, #0
 80010e6:	2300      	movs	r3, #0
 80010e8:	f001 fe78 	bl	8002ddc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80010ec:	240003f0 	.word	0x240003f0

080010f0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80010f0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80010f2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80010f6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80010fa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80010fe:	4904      	ldr	r1, [pc, #16]	; (8001110 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001100:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001102:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001104:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001106:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 800110a:	4902      	ldr	r1, [pc, #8]	; (8001114 <_isr_wrapper+0x24>)
	bx r1
 800110c:	4708      	bx	r1
 800110e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001110:	0800385c 	.word	0x0800385c
	ldr r1, =z_arm_int_exit
 8001114:	08001119 	.word	0x08001119

08001118 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800111a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 800111c:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
 800111e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001120:	d003      	beq.n	800112a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001122:	4903      	ldr	r1, [pc, #12]	; (8001130 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001128:	600a      	str	r2, [r1, #0]

0800112a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800112a:	4770      	bx	lr
	ldr r3, =_kernel
 800112c:	240003f0 	.word	0x240003f0
	ldr r1, =_SCS_ICSR
 8001130:	e000ed04 	.word	0xe000ed04

08001134 <mem_manage_fault>:
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <mem_manage_fault+0x9c>)
{
 8001136:	b570      	push	{r4, r5, r6, lr}
 8001138:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800113a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 800113c:	4606      	mov	r6, r0
		reason = K_ERR_ARM_MEM_STACKING;
 800113e:	f012 0f10 	tst.w	r2, #16
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_STACKING;
 8001144:	bf14      	ite	ne
 8001146:	2411      	movne	r4, #17
 8001148:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
 800114a:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800114e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
 8001150:	bf18      	it	ne
 8001152:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001154:	0792      	lsls	r2, r2, #30
 8001156:	d50a      	bpl.n	800116e <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 8001158:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800115a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800115c:	0614      	lsls	r4, r2, #24
 800115e:	d534      	bpl.n	80011ca <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 8001160:	b119      	cbz	r1, 800116a <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 800116a:	2413      	movs	r4, #19
 800116c:	e001      	b.n	8001172 <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
 800116e:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <mem_manage_fault+0x9c>)
 8001174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8001176:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800117a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 800117c:	bf18      	it	ne
 800117e:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 8001180:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 8001186:	bf18      	it	ne
 8001188:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800118a:	06d2      	lsls	r2, r2, #27
 800118c:	d402      	bmi.n	8001194 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8001190:	079b      	lsls	r3, r3, #30
 8001192:	d50a      	bpl.n	80011aa <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <mem_manage_fault+0x9c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	0519      	lsls	r1, r3, #20
 800119a:	d506      	bpl.n	80011aa <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 800119c:	4631      	mov	r1, r6
 800119e:	f7ff ff7b 	bl	8001098 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
 80011a2:	b110      	cbz	r0, 80011aa <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80011a4:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
 80011a8:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <mem_manage_fault+0x9c>)
 80011ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ae:	0692      	lsls	r2, r2, #26
 80011b0:	d503      	bpl.n	80011ba <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 80011b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80011ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
 80011bc:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80011be:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80011c4:	2300      	movs	r3, #0
 80011c6:	702b      	strb	r3, [r5, #0]
}
 80011c8:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 80011ca:	f06f 0015 	mvn.w	r0, #21
 80011ce:	e7cc      	b.n	800116a <mem_manage_fault+0x36>
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <usage_fault.constprop.0+0x50>)
 80011d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_DIV_0;
 80011d8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 80011dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_DIV_0;
 80011de:	bf14      	ite	ne
 80011e0:	201e      	movne	r0, #30
 80011e2:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 80011e4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 80011e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 80011ea:	bf18      	it	ne
 80011ec:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 80011ee:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 80011f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 80011f4:	bf18      	it	ne
 80011f6:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 80011f8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 80011fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 80011fe:	bf18      	it	ne
 8001200:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8001202:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8001208:	bf18      	it	ne
 800120a:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 800120c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001212:	ea6f 4202 	mvn.w	r2, r2, lsl #16

	return reason;
}
 8001216:	bf18      	it	ne
 8001218:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800121a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <bus_fault.constprop.0+0x64>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 800122a:	4602      	mov	r2, r0
 800122c:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800122e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8001230:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_STACKING;
 8001232:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001236:	bf14      	ite	ne
 8001238:	2017      	movne	r0, #23
 800123a:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
 800123c:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8001240:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8001242:	bf18      	it	ne
 8001244:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8001246:	05a4      	lsls	r4, r4, #22
 8001248:	d509      	bpl.n	800125e <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
 800124a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800124c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800124e:	0400      	lsls	r0, r0, #16
 8001250:	d504      	bpl.n	800125c <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 8001252:	b11a      	cbz	r2, 800125c <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8001254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 800125c:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <bus_fault.constprop.0+0x64>)
 8001260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8001262:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8001266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8001268:	bf18      	it	ne
 800126a:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800126c:	05d2      	lsls	r2, r2, #23
 800126e:	d40b      	bmi.n	8001288 <bus_fault.constprop.0+0x60>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8001270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
 8001272:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001276:	bf18      	it	ne
 8001278:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800127a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800127c:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8001282:	2300      	movs	r3, #0
 8001284:	700b      	strb	r3, [r1, #0]
}
 8001286:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 8001288:	201b      	movs	r0, #27
 800128a:	e7f6      	b.n	800127a <bus_fault.constprop.0+0x52>
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <z_arm_fault>:
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001290:	4b45      	ldr	r3, [pc, #276]	; (80013a8 <z_arm_fault+0x118>)
{
 8001292:	b570      	push	{r4, r5, r6, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001294:	685b      	ldr	r3, [r3, #4]
{
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	460d      	mov	r5, r1
 800129a:	2600      	movs	r6, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800129c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012a0:	f386 8811 	msr	BASEPRI, r6
 80012a4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80012a8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 80012ac:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 80012b0:	d111      	bne.n	80012d6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80012b2:	f002 010c 	and.w	r1, r2, #12
 80012b6:	2908      	cmp	r1, #8
 80012b8:	d00d      	beq.n	80012d6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80012ba:	0714      	lsls	r4, r2, #28
 80012bc:	d401      	bmi.n	80012c2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 80012be:	4605      	mov	r5, r0
			*nested_exc = true;
 80012c0:	2601      	movs	r6, #1
	*recoverable = false;
 80012c2:	2200      	movs	r2, #0
	switch (fault) {
 80012c4:	3b03      	subs	r3, #3
	*recoverable = false;
 80012c6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d809      	bhi.n	80012e2 <z_arm_fault+0x52>
 80012ce:	e8df f003 	tbb	[pc, r3]
 80012d2:	5d04      	.short	0x5d04
 80012d4:	5a61      	.short	0x5a61
		return NULL;
 80012d6:	4635      	mov	r5, r6
 80012d8:	e7f3      	b.n	80012c2 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <z_arm_fault+0x118>)
 80012dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012de:	0791      	lsls	r1, r2, #30
 80012e0:	d501      	bpl.n	80012e6 <z_arm_fault+0x56>
	switch (fault) {
 80012e2:	2400      	movs	r4, #0
 80012e4:	e028      	b.n	8001338 <z_arm_fault+0xa8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80012e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e8:	2a00      	cmp	r2, #0
 80012ea:	dbfa      	blt.n	80012e2 <z_arm_fault+0x52>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80012ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ee:	0052      	lsls	r2, r2, #1
 80012f0:	d5f7      	bpl.n	80012e2 <z_arm_fault+0x52>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80012f2:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80012f4:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80012f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012fa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001300:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8001304:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8001306:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 800130a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800130e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001310:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8001318:	f64d 7202 	movw	r2, #57090	; 0xdf02
 800131c:	4291      	cmp	r1, r2
 800131e:	d00a      	beq.n	8001336 <z_arm_fault+0xa6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 8001320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	b302      	cbz	r2, 8001368 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
 8001326:	f10d 0207 	add.w	r2, sp, #7
 800132a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800132c:	4628      	mov	r0, r5
 800132e:	f7ff ff01 	bl	8001134 <mem_manage_fault>
		reason = usage_fault(esf);
 8001332:	4604      	mov	r4, r0
		break;
 8001334:	e000      	b.n	8001338 <z_arm_fault+0xa8>
			reason = esf->basic.r0;
 8001336:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8001338:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800133c:	b993      	cbnz	r3, 8001364 <z_arm_fault+0xd4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800133e:	2220      	movs	r2, #32
 8001340:	4629      	mov	r1, r5
 8001342:	a802      	add	r0, sp, #8
 8001344:	f001 fdcb 	bl	8002ede <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8001348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800134a:	b33e      	cbz	r6, 800139c <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800134c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001350:	b922      	cbnz	r2, 800135c <z_arm_fault+0xcc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8001352:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8001356:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800135a:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 800135c:	a902      	add	r1, sp, #8
 800135e:	4620      	mov	r0, r4
 8001360:	f001 fda5 	bl	8002eae <z_arm_fatal_error>
}
 8001364:	b00a      	add	sp, #40	; 0x28
 8001366:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8001368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800136a:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 800136e:	d005      	beq.n	800137c <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
 8001370:	f10d 0107 	add.w	r1, sp, #7
 8001374:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8001376:	f7ff ff57 	bl	8001228 <bus_fault.constprop.0>
 800137a:	e7da      	b.n	8001332 <z_arm_fault+0xa2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	0c1b      	lsrs	r3, r3, #16
 8001380:	041b      	lsls	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0ad      	beq.n	80012e2 <z_arm_fault+0x52>
		reason = usage_fault(esf);
 8001386:	f7ff ff25 	bl	80011d4 <usage_fault.constprop.0>
 800138a:	e7d2      	b.n	8001332 <z_arm_fault+0xa2>
		reason = mem_manage_fault(esf, 0, recoverable);
 800138c:	f10d 0207 	add.w	r2, sp, #7
 8001390:	2100      	movs	r1, #0
 8001392:	e7cb      	b.n	800132c <z_arm_fault+0x9c>
		reason = bus_fault(esf, 0, recoverable);
 8001394:	f10d 0107 	add.w	r1, sp, #7
 8001398:	2000      	movs	r0, #0
 800139a:	e7ec      	b.n	8001376 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800139c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	e7d9      	b.n	800135a <z_arm_fault+0xca>
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80013ac:	4a02      	ldr	r2, [pc, #8]	; (80013b8 <z_arm_fault_init+0xc>)
 80013ae:	6953      	ldr	r3, [r2, #20]
 80013b0:	f043 0310 	orr.w	r3, r3, #16
 80013b4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80013bc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80013c0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80013c4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80013c6:	4672      	mov	r2, lr
	bl z_arm_fault
 80013c8:	f7ff ff62 	bl	8001290 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80013cc:	bd01      	pop	{r0, pc}
 80013ce:	bf00      	nop

080013d0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80013d0:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	4804      	ldr	r0, [pc, #16]	; (80013e4 <z_arm_interrupt_init+0x14>)
 80013d4:	2110      	movs	r1, #16
 80013d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80013d8:	3301      	adds	r3, #1
 80013da:	2b96      	cmp	r3, #150	; 0x96
 80013dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80013e0:	d1f9      	bne.n	80013d6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80013e8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80013ea:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80013ee:	4808      	ldr	r0, [pc, #32]	; (8001410 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80013f0:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 80013f4:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80013f6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80013fa:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80013fe:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8001400:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8001402:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8001406:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800140a:	f7ff fdb7 	bl	8000f7c <z_arm_prep_c>
 800140e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8001410:	24001280 	.word	0x24001280

08001414 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <z_impl_k_thread_abort+0x24>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4283      	cmp	r3, r0
 800141a:	d10b      	bne.n	8001434 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800141c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8001420:	b143      	cbz	r3, 8001434 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <z_impl_k_thread_abort+0x28>)
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800142a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 800142c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800142e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 8001434:	f001 bafc 	b.w	8002a30 <z_thread_abort>
 8001438:	240003f0 	.word	0x240003f0
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8001440:	4b02      	ldr	r3, [pc, #8]	; (800144c <z_arm_configure_static_mpu_regions+0xc>)
 8001442:	2101      	movs	r1, #1
 8001444:	4a02      	ldr	r2, [pc, #8]	; (8001450 <z_arm_configure_static_mpu_regions+0x10>)
 8001446:	4803      	ldr	r0, [pc, #12]	; (8001454 <z_arm_configure_static_mpu_regions+0x14>)
 8001448:	f000 b86e 	b.w	8001528 <arm_core_mpu_configure_static_mpu_regions>
 800144c:	24080000 	.word	0x24080000
 8001450:	24000000 	.word	0x24000000
 8001454:	08003e38 	.word	0x08003e38

08001458 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8001458:	6e42      	ldr	r2, [r0, #100]	; 0x64
	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 800145a:	2140      	movs	r1, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 800145e:	3a40      	subs	r2, #64	; 0x40

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8001460:	4618      	mov	r0, r3
	dynamic_regions[region_num].start = guard_start;
 8001462:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8001464:	4a03      	ldr	r2, [pc, #12]	; (8001474 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8001466:	e9c3 1201 	strd	r1, r2, [r3, #4]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 800146a:	2101      	movs	r1, #1
 800146c:	f000 b866 	b.w	800153c <arm_core_mpu_configure_dynamic_mpu_regions>
 8001470:	240002a0 	.word	0x240002a0
 8001474:	150b0000 	.word	0x150b0000

08001478 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 800147a:	2600      	movs	r6, #0
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 800147c:	4f1e      	ldr	r7, [pc, #120]	; (80014f8 <mpu_configure_regions+0x80>)
 800147e:	428e      	cmp	r6, r1
 8001480:	db01      	blt.n	8001486 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8001482:	4610      	mov	r0, r2
 8001484:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 8001486:	6844      	ldr	r4, [r0, #4]
 8001488:	b39c      	cbz	r4, 80014f2 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
 800148a:	b153      	cbz	r3, 80014a2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 800148c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8001490:	ea14 0f0c 	tst.w	r4, ip
 8001494:	d118      	bne.n	80014c8 <mpu_configure_regions+0x50>
		&&
 8001496:	2c1f      	cmp	r4, #31
 8001498:	d916      	bls.n	80014c8 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 800149a:	6805      	ldr	r5, [r0, #0]
		&&
 800149c:	ea1c 0f05 	tst.w	ip, r5
 80014a0:	d112      	bne.n	80014c8 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80014a2:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80014a4:	b2d2      	uxtb	r2, r2
	region_conf.base = new_region->start;
 80014a6:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80014a8:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if (size <= 32U) {
 80014ac:	d90f      	bls.n	80014ce <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
 80014ae:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80014b2:	d80e      	bhi.n	80014d2 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80014b4:	3c01      	subs	r4, #1
 80014b6:	fab4 f484 	clz	r4, r4
 80014ba:	f1c4 041f 	rsb	r4, r4, #31
 80014be:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80014c0:	2a0f      	cmp	r2, #15
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80014c2:	ea4c 0404 	orr.w	r4, ip, r4
 80014c6:	d906      	bls.n	80014d6 <mpu_configure_regions+0x5e>
			return -EINVAL;
 80014c8:	f06f 0215 	mvn.w	r2, #21
 80014cc:	e7d9      	b.n	8001482 <mpu_configure_regions+0xa>
		return REGION_32B;
 80014ce:	2408      	movs	r4, #8
 80014d0:	e7f6      	b.n	80014c0 <mpu_configure_regions+0x48>
		return REGION_4G;
 80014d2:	243e      	movs	r4, #62	; 0x3e
 80014d4:	e7f4      	b.n	80014c0 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80014d6:	f025 051f 	bic.w	r5, r5, #31
 80014da:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80014de:	f044 0401 	orr.w	r4, r4, #1
				| MPU_RBAR_VALID_Msk | index;
 80014e2:	4315      	orrs	r5, r2
		reg_index++;
 80014e4:	3201      	adds	r2, #1
 80014e6:	f045 0510 	orr.w	r5, r5, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80014ea:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80014ee:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 80014f2:	3601      	adds	r6, #1
 80014f4:	300c      	adds	r0, #12
 80014f6:	e7c2      	b.n	800147e <mpu_configure_regions+0x6>
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <arm_core_mpu_enable+0x14>)
 80014fe:	2205      	movs	r2, #5
 8001500:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8001504:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001508:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001514:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001518:	4b02      	ldr	r3, [pc, #8]	; (8001524 <arm_core_mpu_disable+0x10>)
 800151a:	2200      	movs	r2, #0
 800151c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8001528:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 800152a:	4c03      	ldr	r4, [pc, #12]	; (8001538 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 800152c:	2301      	movs	r3, #1
 800152e:	7822      	ldrb	r2, [r4, #0]
 8001530:	f7ff ffa2 	bl	8001478 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8001534:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8001536:	bd10      	pop	{r4, pc}
 8001538:	24000420 	.word	0x24000420

0800153c <arm_core_mpu_configure_dynamic_mpu_regions>:

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800153c:	4a09      	ldr	r2, [pc, #36]	; (8001564 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 800153e:	b508      	push	{r3, lr}
 8001540:	2300      	movs	r3, #0
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	f7ff ff98 	bl	8001478 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001548:	f110 0f16 	cmn.w	r0, #22
 800154c:	d002      	beq.n	8001554 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800154e:	4a06      	ldr	r2, [pc, #24]	; (8001568 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8001550:	280f      	cmp	r0, #15
 8001552:	dd00      	ble.n	8001556 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8001554:	bd08      	pop	{r3, pc}
 8001556:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
 800155a:	3001      	adds	r0, #1
  MPU->RASR = 0U;
 800155c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8001560:	e7f6      	b.n	8001550 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 8001562:	bf00      	nop
 8001564:	24000420 	.word	0x24000420
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800156c:	4914      	ldr	r1, [pc, #80]	; (80015c0 <z_arm_mpu_init+0x54>)
 800156e:	6808      	ldr	r0, [r1, #0]
 8001570:	2810      	cmp	r0, #16
{
 8001572:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8001574:	d821      	bhi.n	80015ba <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8001576:	f7ff ffcd 	bl	8001514 <arm_core_mpu_disable>
 800157a:	4c12      	ldr	r4, [pc, #72]	; (80015c4 <z_arm_mpu_init+0x58>)
 800157c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800157e:	2200      	movs	r2, #0
 8001580:	4290      	cmp	r0, r2
 8001582:	f101 010c 	add.w	r1, r1, #12
 8001586:	d105      	bne.n	8001594 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <z_arm_mpu_init+0x5c>)
 800158a:	7018      	strb	r0, [r3, #0]
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 800158c:	2000      	movs	r0, #0
	arm_core_mpu_enable();
 800158e:	f7ff ffb5 	bl	80014fc <arm_core_mpu_enable>
}
 8001592:	bd10      	pop	{r4, pc}
 8001594:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001598:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 800159c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80015a0:	4313      	orrs	r3, r2
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80015a2:	3201      	adds	r2, #1
 80015a4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80015a8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80015ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 80015b8:	e7e2      	b.n	8001580 <z_arm_mpu_init+0x14>
		return -1;
 80015ba:	f04f 30ff 	mov.w	r0, #4294967295
 80015be:	e7e8      	b.n	8001592 <z_arm_mpu_init+0x26>
 80015c0:	08003df4 	.word	0x08003df4
 80015c4:	e000ed00 	.word	0xe000ed00
 80015c8:	24000420 	.word	0x24000420

080015cc <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 80015cc:	4b01      	ldr	r3, [pc, #4]	; (80015d4 <__stdout_hook_install+0x8>)
 80015ce:	6018      	str	r0, [r3, #0]
}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	24000004 	.word	0x24000004

080015d8 <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param *exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 80015d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015dc:	4605      	mov	r5, r0
 80015de:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 80015e0:	f04f 0801 	mov.w	r8, #1
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1U : 0U);
 80015e4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
		if (stm32_exti_is_pending(line) != 0) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 80015e8:	4f0e      	ldr	r7, [pc, #56]	; (8001624 <stm32_exti_isr+0x4c>)
		line = range->start + i;
 80015ea:	782b      	ldrb	r3, [r5, #0]
 80015ec:	fa53 f084 	uxtab	r0, r3, r4
	if (line < 32) {
 80015f0:	281f      	cmp	r0, #31
 80015f2:	dc0f      	bgt.n	8001614 <stm32_exti_isr+0x3c>
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 80015f4:	fa08 f300 	lsl.w	r3, r8, r0
 80015f8:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
		if (stm32_exti_is_pending(line) != 0) {
 80015fc:	ea33 0202 	bics.w	r2, r3, r2
 8001600:	d108      	bne.n	8001614 <stm32_exti_isr+0x3c>
  *         @arg @ref LL_EXTI_LINE_21
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001602:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
			if (!data->cb[line].cb) {
 8001606:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 800160a:	b11b      	cbz	r3, 8001614 <stm32_exti_isr+0x3c>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800160c:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 8001610:	6851      	ldr	r1, [r2, #4]
 8001612:	4798      	blx	r3
	for (uint8_t i = 0; i <= range->len; i++) {
 8001614:	3401      	adds	r4, #1
 8001616:	786a      	ldrb	r2, [r5, #1]
 8001618:	b2e3      	uxtb	r3, r4
 800161a:	429a      	cmp	r2, r3
 800161c:	d2e5      	bcs.n	80015ea <stm32_exti_isr+0x12>
		}
	}
}
 800161e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001622:	bf00      	nop
 8001624:	240002ac 	.word	0x240002ac

08001628 <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <stm32_fill_irq_table+0x14>)
 800162a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800162e:	2300      	movs	r3, #0
 8001630:	3301      	adds	r3, #1
		exti_irq_table[start + i] = irqn;
 8001632:	f820 2b02 	strh.w	r2, [r0], #2
	for (int i = 0; i < len; i++) {
 8001636:	4299      	cmp	r1, r3
 8001638:	dcfa      	bgt.n	8001630 <stm32_fill_irq_table+0x8>
	}
}
 800163a:	4770      	bx	lr
 800163c:	24000040 	.word	0x24000040

08001640 <stm32_exti_enable>:
	irqnum = exti_irq_table[line];
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <stm32_exti_enable+0x24>)
{
 8001642:	4602      	mov	r2, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001648:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 800164a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
	LL_EXTI_EnableIT_0_31(BIT((uint32_t)line));
 800164e:	2301      	movs	r3, #1
 8001650:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 8001654:	4093      	lsls	r3, r2
 8001656:	4323      	orrs	r3, r4
 8001658:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800165c:	bc10      	pop	{r4}
	irq_enable(irqnum);
 800165e:	f7ff bc63 	b.w	8000f28 <arch_irq_enable>
 8001662:	bf00      	nop
 8001664:	24000040 	.word	0x24000040

08001668 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if ((data->cb[line].cb == cb) && (data->cb[line].data == arg)) {
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <stm32_exti_set_callback+0x30>)
{
 800166a:	b530      	push	{r4, r5, lr}
 800166c:	4604      	mov	r4, r0
	if ((data->cb[line].cb == cb) && (data->cb[line].data == arg)) {
 800166e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8001672:	4288      	cmp	r0, r1
 8001674:	d104      	bne.n	8001680 <stm32_exti_set_callback+0x18>
 8001676:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800167a:	686d      	ldr	r5, [r5, #4]
 800167c:	4295      	cmp	r5, r2
 800167e:	d006      	beq.n	800168e <stm32_exti_set_callback+0x26>
		return 0;
	}

	/* if callback already exists/maybe-running return busy */
	if (data->cb[line].cb != NULL) {
 8001680:	b938      	cbnz	r0, 8001692 <stm32_exti_set_callback+0x2a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8001682:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8001686:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800168a:	605a      	str	r2, [r3, #4]

	return 0;
}
 800168c:	bd30      	pop	{r4, r5, pc}
		return 0;
 800168e:	2000      	movs	r0, #0
 8001690:	e7fc      	b.n	800168c <stm32_exti_set_callback+0x24>
		return -EBUSY;
 8001692:	f06f 000f 	mvn.w	r0, #15
 8001696:	e7f9      	b.n	800168c <stm32_exti_set_callback+0x24>
 8001698:	240002ac 	.word	0x240002ac

0800169c <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <stm32_exti_unset_callback+0x10>)
 800169e:	2200      	movs	r2, #0
 80016a0:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80016a4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80016a8:	605a      	str	r2, [r3, #4]
}
 80016aa:	4770      	bx	lr
 80016ac:	240002ac 	.word	0x240002ac

080016b0 <get_pllsrc_frequency>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <get_pllsrc_frequency+0x14>)
		return STM32_HSE_FREQ;
	case LL_RCC_PLLSOURCE_NONE:
	default:
		return 0;
	}
}
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <get_pllsrc_frequency+0x18>)
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	f003 0303 	and.w	r3, r3, #3
		return STM32_HSE_FREQ;
 80016ba:	2b02      	cmp	r3, #2
}
 80016bc:	bf18      	it	ne
 80016be:	2000      	movne	r0, #0
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	58024400 	.word	0x58024400
 80016c8:	007a1200 	.word	0x007a1200

080016cc <stm32_clock_control_configure>:
}

static inline int stm32_clock_control_configure(const struct device *dev,
						clock_control_subsys_t sub_system,
						void *data)
{
 80016cc:	b530      	push	{r4, r5, lr}
	int err;

	ARG_UNUSED(dev);
	ARG_UNUSED(data);

	err = enabled_clock(pclken->bus);
 80016ce:	680b      	ldr	r3, [r1, #0]
	    ((src_clk == STM32_SRC_LSI) && IS_ENABLED(STM32_LSI_ENABLED)) ||
 80016d0:	2b10      	cmp	r3, #16
 80016d2:	d824      	bhi.n	800171e <stm32_clock_control_configure+0x52>
 80016d4:	4813      	ldr	r0, [pc, #76]	; (8001724 <stm32_clock_control_configure+0x58>)
 80016d6:	40d8      	lsrs	r0, r3
 80016d8:	43c0      	mvns	r0, r0
 80016da:	f010 0001 	ands.w	r0, r0, #1
 80016de:	d11e      	bne.n	800171e <stm32_clock_control_configure+0x52>
		return err;
	}

	z_stm32_hsem_lock(CFG_HW_RCC_SEMID, HSEM_LOCK_DEFAULT_RETRY);

	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 80016e0:	684a      	ldr	r2, [r1, #4]
 80016e2:	b2d3      	uxtb	r3, r2
		       STM32_CLOCK_MASK_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 80016e4:	f3c2 3542 	ubfx	r5, r2, #13, #3
 80016e8:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 80016ec:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80016f0:	fa05 f202 	lsl.w	r2, r5, r2
 80016f4:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	*(volatile uint32_t *)addr = temp | mask;
}

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;
 80016f8:	681c      	ldr	r4, [r3, #0]

	*(volatile uint32_t *)addr = temp & ~mask;
 80016fa:	ea24 0202 	bic.w	r2, r4, r2
 80016fe:	601a      	str	r2, [r3, #0]
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 8001700:	6849      	ldr	r1, [r1, #4]
 8001702:	b2cb      	uxtb	r3, r1
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 8001704:	f3c1 4202 	ubfx	r2, r1, #16, #3
 8001708:	f3c1 2104 	ubfx	r1, r1, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 800170c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8001710:	408a      	lsls	r2, r1
 8001712:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 8001716:	681c      	ldr	r4, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 8001718:	4322      	orrs	r2, r4
 800171a:	601a      	str	r2, [r3, #0]

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	return 0;
}
 800171c:	bd30      	pop	{r4, r5, pc}
	return -ENOTSUP;
 800171e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001722:	e7fb      	b.n	800171c <stm32_clock_control_configure+0x50>
 8001724:	0001340e 	.word	0x0001340e

08001728 <get_hclk_frequency>:
{
 8001728:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <get_hclk_frequency+0x24>)
 800172c:	691a      	ldr	r2, [r3, #16]
 800172e:	f002 0238 	and.w	r2, r2, #56	; 0x38
	switch (LL_RCC_GetSysClkSource()) {
 8001732:	2a10      	cmp	r2, #16
 8001734:	d006      	beq.n	8001744 <get_hclk_frequency+0x1c>
 8001736:	2a18      	cmp	r2, #24
 8001738:	d106      	bne.n	8001748 <get_hclk_frequency+0x20>
		sysclk = get_pllout_frequency(get_pllsrc_frequency(),
 800173a:	f7ff ffb9 	bl	80016b0 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 800173e:	4350      	muls	r0, r2
 8001740:	0840      	lsrs	r0, r0, #1
}
 8001742:	bd08      	pop	{r3, pc}
	switch (LL_RCC_GetSysClkSource()) {
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <get_hclk_frequency+0x28>)
 8001746:	e7fc      	b.n	8001742 <get_hclk_frequency+0x1a>
	uint32_t sysclk = 0;
 8001748:	2000      	movs	r0, #0
	return get_bus_clock(sysclk, STM32_HPRE);
 800174a:	e7fa      	b.n	8001742 <get_hclk_frequency+0x1a>
 800174c:	58024400 	.word	0x58024400
 8001750:	007a1200 	.word	0x007a1200

08001754 <stm32_clock_control_get_subsys_rate>:
	uint32_t apb3_clock = get_bus_clock(ahb_clock, STM32_D1PPRE);
	uint32_t apb4_clock = get_bus_clock(ahb_clock, STM32_D3PPRE);

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001754:	680b      	ldr	r3, [r1, #0]
 8001756:	2b10      	cmp	r3, #16
{
 8001758:	b510      	push	{r4, lr}
 800175a:	4614      	mov	r4, r2
	switch (pclken->bus) {
 800175c:	d82a      	bhi.n	80017b4 <stm32_clock_control_get_subsys_rate+0x60>
 800175e:	b913      	cbnz	r3, 8001766 <stm32_clock_control_get_subsys_rate+0x12>
 8001760:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001764:	e03e      	b.n	80017e4 <stm32_clock_control_get_subsys_rate+0x90>
 8001766:	3b01      	subs	r3, #1
 8001768:	2b0f      	cmp	r3, #15
 800176a:	d8f9      	bhi.n	8001760 <stm32_clock_control_get_subsys_rate+0xc>
 800176c:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <stm32_clock_control_get_subsys_rate+0x20>)
 800176e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001772:	bf00      	nop
 8001774:	080017f1 	.word	0x080017f1
 8001778:	080017fd 	.word	0x080017fd
 800177c:	080017f1 	.word	0x080017f1
 8001780:	08001761 	.word	0x08001761
 8001784:	08001761 	.word	0x08001761
 8001788:	08001761 	.word	0x08001761
 800178c:	08001761 	.word	0x08001761
 8001790:	08001761 	.word	0x08001761
 8001794:	08001761 	.word	0x08001761
 8001798:	080017dd 	.word	0x080017dd
 800179c:	080017e1 	.word	0x080017e1
 80017a0:	080017e7 	.word	0x080017e7
 80017a4:	080017ed 	.word	0x080017ed
 80017a8:	08001761 	.word	0x08001761
 80017ac:	08001761 	.word	0x08001761
 80017b0:	080017d5 	.word	0x080017d5
 80017b4:	2bd4      	cmp	r3, #212	; 0xd4
 80017b6:	d008      	beq.n	80017ca <stm32_clock_control_get_subsys_rate+0x76>
 80017b8:	3bd8      	subs	r3, #216	; 0xd8
 80017ba:	2b1c      	cmp	r3, #28
 80017bc:	d8d0      	bhi.n	8001760 <stm32_clock_control_get_subsys_rate+0xc>
 80017be:	2201      	movs	r2, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	f013 3f11 	tst.w	r3, #286331153	; 0x11111111
 80017c8:	d0ca      	beq.n	8001760 <stm32_clock_control_get_subsys_rate+0xc>
	uint32_t ahb_clock = get_bus_clock(SystemCoreClock, STM32_HPRE);
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <stm32_clock_control_get_subsys_rate+0xb4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
		*rate = STM32_LSI_FREQ;
		break;
#endif /* STM32_LSI_ENABLED */
#if defined(STM32_HSI48_ENABLED)
	case STM32_SRC_HSI48:
		*rate = STM32_HSI48_FREQ;
 80017ce:	6023      	str	r3, [r4, #0]
#endif /* STM32_PLL3_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 80017d0:	2000      	movs	r0, #0
		break;
 80017d2:	e007      	b.n	80017e4 <stm32_clock_control_get_subsys_rate+0x90>
		*rate = get_hclk_frequency();
 80017d4:	f7ff ffa8 	bl	8001728 <get_hclk_frequency>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 80017d8:	6020      	str	r0, [r4, #0]
 80017da:	e7f9      	b.n	80017d0 <stm32_clock_control_get_subsys_rate+0x7c>
		*rate = STM32_HSE_FREQ;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <stm32_clock_control_get_subsys_rate+0xb8>)
 80017de:	e7f6      	b.n	80017ce <stm32_clock_control_get_subsys_rate+0x7a>
		*rate = STM32_LSE_FREQ;
 80017e0:	2000      	movs	r0, #0
 80017e2:	6020      	str	r0, [r4, #0]
}
 80017e4:	bd10      	pop	{r4, pc}
		*rate = STM32_LSI_FREQ;
 80017e6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80017ea:	e7f0      	b.n	80017ce <stm32_clock_control_get_subsys_rate+0x7a>
		*rate = STM32_HSI48_FREQ;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <stm32_clock_control_get_subsys_rate+0xbc>)
 80017ee:	e7ee      	b.n	80017ce <stm32_clock_control_get_subsys_rate+0x7a>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 80017f0:	f7ff ff5e 	bl	80016b0 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 80017f4:	2318      	movs	r3, #24
 80017f6:	4358      	muls	r0, r3
 80017f8:	0840      	lsrs	r0, r0, #1
 80017fa:	e7ed      	b.n	80017d8 <stm32_clock_control_get_subsys_rate+0x84>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 80017fc:	f7ff ff58 	bl	80016b0 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 8001800:	2318      	movs	r3, #24
 8001802:	4358      	muls	r0, r3
 8001804:	0880      	lsrs	r0, r0, #2
 8001806:	e7e7      	b.n	80017d8 <stm32_clock_control_get_subsys_rate+0x84>
 8001808:	24000034 	.word	0x24000034
 800180c:	007a1200 	.word	0x007a1200
 8001810:	02dc6c00 	.word	0x02dc6c00

08001814 <stm32_clock_control_init>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8001814:	4b71      	ldr	r3, [pc, #452]	; (80019dc <stm32_clock_control_init+0x1c8>)
	return 0;
}

#if defined(CONFIG_CPU_CORTEX_M7)
static int stm32_clock_control_init(const struct device *dev)
{
 8001816:	b513      	push	{r0, r1, r4, lr}
 8001818:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800181c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001820:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8001824:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001828:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800182c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800182e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001836:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800183e:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	0394      	lsls	r4, r2, #14
 8001844:	d5fc      	bpl.n	8001840 <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001846:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001848:	f042 0201 	orr.w	r2, r2, #1
 800184c:	675a      	str	r2, [r3, #116]	; 0x74
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800184e:	4b63      	ldr	r3, [pc, #396]	; (80019dc <stm32_clock_control_init+0x1c8>)
 8001850:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001852:	0790      	lsls	r0, r2, #30
 8001854:	d5fc      	bpl.n	8001850 <stm32_clock_control_init+0x3c>
  SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800185c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == (RCC_CR_HSI48RDY)) ? 1UL : 0UL);
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	0491      	lsls	r1, r2, #18
 8001862:	d5fc      	bpl.n	800185e <stm32_clock_control_init+0x4a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	f002 0238 	and.w	r2, r2, #56	; 0x38
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 800186a:	2a18      	cmp	r2, #24
 800186c:	d117      	bne.n	800189e <stm32_clock_control_init+0x8a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	0752      	lsls	r2, r2, #29
 8001872:	d407      	bmi.n	8001884 <stm32_clock_control_init+0x70>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800187c:	4a57      	ldr	r2, [pc, #348]	; (80019dc <stm32_clock_control_init+0x1c8>)
 800187e:	6813      	ldr	r3, [r2, #0]
 8001880:	075c      	lsls	r4, r3, #29
 8001882:	d5fc      	bpl.n	800187e <stm32_clock_control_init+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001884:	4b55      	ldr	r3, [pc, #340]	; (80019dc <stm32_clock_control_init+0x1c8>)
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	f022 0207 	bic.w	r2, r2, #7
 800188c:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800188e:	691a      	ldr	r2, [r3, #16]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001890:	f012 0f38 	tst.w	r2, #56	; 0x38
 8001894:	d1fb      	bne.n	800188e <stm32_clock_control_init+0x7a>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 8001896:	699a      	ldr	r2, [r3, #24]
 8001898:	f022 020f 	bic.w	r2, r2, #15
 800189c:	619a      	str	r2, [r3, #24]
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800189e:	4b4f      	ldr	r3, [pc, #316]	; (80019dc <stm32_clock_control_init+0x1c8>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80018a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 80018a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018aa:	f022 0203 	bic.w	r2, r2, #3
 80018ae:	f042 0202 	orr.w	r2, r2, #2
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 80018b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b6:	f422 727c 	bic.w	r2, r2, #1008	; 0x3f0
 80018ba:	f042 0210 	orr.w	r2, r2, #16
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 80018c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c2:	f022 020c 	bic.w	r2, r2, #12
 80018c6:	f042 0208 	orr.w	r2, r2, #8
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 80018cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ce:	f022 0202 	bic.w	r2, r2, #2
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N - 1UL) << RCC_PLL1DIVR_N1_Pos);
 80018d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	f042 0217 	orr.w	r2, r2, #23
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 80018e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P - 1UL) << RCC_PLL1DIVR_P1_Pos);
 80018ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ee:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 80018f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 80018f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q - 1UL) << RCC_PLL1DIVR_Q1_Pos);
 8001900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001902:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001906:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN);
 800190c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R - 1UL) << RCC_PLL1DIVR_R1_Pos);
 8001914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001916:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800191a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800191e:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN);
 8001920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001922:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800192e:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY)) ? 1UL : 0UL);
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	0190      	lsls	r0, r2, #6
 8001934:	d5fc      	bpl.n	8001930 <stm32_clock_control_init+0x11c>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <stm32_clock_control_init+0x1cc>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	f022 0207 	bic.w	r2, r2, #7
 800193e:	f042 0202 	orr.w	r2, r2, #2
 8001942:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8001944:	699a      	ldr	r2, [r3, #24]
 8001946:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800194a:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 800194c:	699a      	ldr	r2, [r3, #24]
 800194e:	0491      	lsls	r1, r2, #18
 8001950:	d5fc      	bpl.n	800194c <stm32_clock_control_init+0x138>

	/* Configure Voltage scale to comply with the desired system frequency */
	prepare_regulator_voltage_scale();

	/* Current hclk value */
	old_hclk_freq = get_hclk_frequency();
 8001952:	f7ff fee9 	bl	8001728 <get_hclk_frequency>
 8001956:	4604      	mov	r4, r0
				      STM32_HPRE);

	/* Set flash latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq increases, set flash latency before any clock setting */
	if (new_hclk_freq > old_hclk_freq) {
 8001958:	4822      	ldr	r0, [pc, #136]	; (80019e4 <stm32_clock_control_init+0x1d0>)
 800195a:	4284      	cmp	r4, r0
 800195c:	d201      	bcs.n	8001962 <stm32_clock_control_init+0x14e>
		LL_SetFlashLatency(new_hclk_freq);
 800195e:	f000 fbd7 	bl	8002110 <LL_SetFlashLatency>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <stm32_clock_control_init+0x1c8>)
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800196a:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 800196c:	699a      	ldr	r2, [r3, #24]
 800196e:	f022 020f 	bic.w	r2, r2, #15
 8001972:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800197a:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 800197c:	69da      	ldr	r2, [r3, #28]
 800197e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001982:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 8001984:	699a      	ldr	r2, [r3, #24]
 8001986:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800198a:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 800198c:	6a1a      	ldr	r2, [r3, #32]
 800198e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001992:	621a      	str	r2, [r3, #32]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	f022 0207 	bic.w	r2, r2, #7
 800199a:	f042 0203 	orr.w	r2, r2, #3
 800199e:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	f002 0238 	and.w	r2, r2, #56	; 0x38

	/* Set up sys clock */
	if (IS_ENABLED(STM32_SYSCLK_SRC_PLL)) {
		/* Set PLL1 as System Clock Source */
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
		while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 80019a6:	2a18      	cmp	r2, #24
 80019a8:	d1fa      	bne.n	80019a0 <stm32_clock_control_init+0x18c>
	}

	/* Set FLASH latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq not increased, set flash latency after all clock setting */
	if (new_hclk_freq <= old_hclk_freq) {
 80019aa:	480e      	ldr	r0, [pc, #56]	; (80019e4 <stm32_clock_control_init+0x1d0>)
 80019ac:	4284      	cmp	r4, r0
 80019ae:	d301      	bcc.n	80019b4 <stm32_clock_control_init+0x1a0>
		LL_SetFlashLatency(new_hclk_freq);
 80019b0:	f000 fbae 	bl	8002110 <LL_SetFlashLatency>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <stm32_clock_control_init+0x1cc>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	f022 0207 	bic.w	r2, r2, #7
 80019bc:	f042 0202 	orr.w	r2, r2, #2
 80019c0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 80019c2:	699a      	ldr	r2, [r3, #24]
 80019c4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80019c8:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	0492      	lsls	r2, r2, #18
 80019ce:	d5fc      	bpl.n	80019ca <stm32_clock_control_init+0x1b6>
	optimize_regulator_voltage_scale(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	/* Update CMSIS variable */
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <stm32_clock_control_init+0x1d4>)

	return r;
}
 80019d2:	2000      	movs	r0, #0
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 80019d4:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <stm32_clock_control_init+0x1d0>)
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	b002      	add	sp, #8
 80019da:	bd10      	pop	{r4, pc}
 80019dc:	58024400 	.word	0x58024400
 80019e0:	58024800 	.word	0x58024800
 80019e4:	05b8d800 	.word	0x05b8d800
 80019e8:	24000034 	.word	0x24000034

080019ec <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
 80019ec:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <uart_console_init+0x20>)
 80019f0:	f001 fd6c 	bl	80034cc <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 80019f4:	b138      	cbz	r0, 8001a06 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <uart_console_init+0x24>)
 80019f8:	f7ff fde8 	bl	80015cc <__stdout_hook_install>
	__printk_hook_install(console_out);
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <uart_console_init+0x24>)
 80019fe:	f7fe fe27 	bl	8000650 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8001a02:	2000      	movs	r0, #0
}
 8001a04:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8001a06:	f06f 0012 	mvn.w	r0, #18
 8001a0a:	e7fb      	b.n	8001a04 <uart_console_init+0x18>
 8001a0c:	08003844 	.word	0x08003844
 8001a10:	08001a15 	.word	0x08001a15

08001a14 <console_out>:
	if ('\n' == c) {
 8001a14:	280a      	cmp	r0, #10
{
 8001a16:	b538      	push	{r3, r4, r5, lr}
 8001a18:	4604      	mov	r4, r0
 8001a1a:	4d07      	ldr	r5, [pc, #28]	; (8001a38 <console_out+0x24>)
	if ('\n' == c) {
 8001a1c:	d104      	bne.n	8001a28 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8001a1e:	68ab      	ldr	r3, [r5, #8]
 8001a20:	210d      	movs	r1, #13
 8001a22:	4628      	mov	r0, r5
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4798      	blx	r3
 8001a28:	68ab      	ldr	r3, [r5, #8]
 8001a2a:	b2e1      	uxtb	r1, r4
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <console_out+0x24>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4798      	blx	r3
}
 8001a32:	4620      	mov	r0, r4
 8001a34:	bd38      	pop	{r3, r4, r5, pc}
 8001a36:	bf00      	nop
 8001a38:	08003844 	.word	0x08003844

08001a3c <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8001a3c:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8001a3e:	6903      	ldr	r3, [r0, #16]
{
 8001a40:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8001a42:	6058      	str	r0, [r3, #4]
 8001a44:	4d08      	ldr	r5, [pc, #32]	; (8001a68 <gpio_stm32_init+0x2c>)
 8001a46:	4628      	mov	r0, r5
 8001a48:	f001 fd40 	bl	80034cc <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8001a4c:	b140      	cbz	r0, 8001a60 <gpio_stm32_init+0x24>
					(clock_control_subsys_t)&cfg->pclken);
 8001a4e:	6861      	ldr	r1, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8001a50:	4628      	mov	r0, r5
 8001a52:	68ab      	ldr	r3, [r5, #8]
 8001a54:	310c      	adds	r1, #12
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 8001a5a:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8001a5e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8001a60:	f06f 0012 	mvn.w	r0, #18
 8001a64:	e7fb      	b.n	8001a5e <gpio_stm32_init+0x22>
 8001a66:	bf00      	nop
 8001a68:	080036f4 	.word	0x080036f4

08001a6c <gpio_stm32_pin_interrupt_configure>:
{
 8001a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a6e:	460c      	mov	r4, r1
 8001a70:	4611      	mov	r1, r2
 8001a72:	461e      	mov	r6, r3
	const struct gpio_stm32_config *cfg = dev->config;
 8001a74:	6847      	ldr	r7, [r0, #4]
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001a76:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
	struct gpio_stm32_data *data = dev->data;
 8001a7a:	6902      	ldr	r2, [r0, #16]
	if (mode == GPIO_INT_MODE_DISABLED) {
 8001a7c:	d127      	bne.n	8001ace <gpio_stm32_pin_interrupt_configure+0x62>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001a7e:	f004 0203 	and.w	r2, r4, #3
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U)) >> (POSITION_VAL(Line >> 16U) & 31U));
 8001a82:	493b      	ldr	r1, [pc, #236]	; (8001b70 <gpio_stm32_pin_interrupt_configure+0x104>)
 8001a84:	3204      	adds	r2, #4
 8001a86:	0093      	lsls	r3, r2, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
 8001a90:	f002 0303 	and.w	r3, r2, #3
 8001a94:	3302      	adds	r3, #2
 8001a96:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001a9a:	0c13      	lsrs	r3, r2, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	ea01 4212 	and.w	r2, r1, r2, lsr #16
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d109      	bne.n	8001aca <gpio_stm32_pin_interrupt_configure+0x5e>
			stm32_exti_disable(pin);
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f001 fa7a 	bl	8002fb0 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001abc:	4620      	mov	r0, r4
 8001abe:	f7ff fded 	bl	800169c <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f001 fa81 	bl	8002fcc <stm32_exti_trigger>
	int err = 0;
 8001aca:	2500      	movs	r5, #0
 8001acc:	e043      	b.n	8001b56 <gpio_stm32_pin_interrupt_configure+0xea>
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001ace:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001ad2:	d047      	beq.n	8001b64 <gpio_stm32_pin_interrupt_configure+0xf8>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8001ad4:	4927      	ldr	r1, [pc, #156]	; (8001b74 <gpio_stm32_pin_interrupt_configure+0x108>)
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff fdc6 	bl	8001668 <stm32_exti_set_callback>
 8001adc:	4605      	mov	r5, r0
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	d143      	bne.n	8001b6a <gpio_stm32_pin_interrupt_configure+0xfe>
	struct stm32_pclken pclken = {
 8001ae2:	4a25      	ldr	r2, [pc, #148]	; (8001b78 <gpio_stm32_pin_interrupt_configure+0x10c>)
 8001ae4:	466b      	mov	r3, sp
	gpio_stm32_enable_int(cfg->port, pin);
 8001ae6:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 8001ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aec:	e883 0003 	stmia.w	r3, {r0, r1}
 8001af0:	4822      	ldr	r0, [pc, #136]	; (8001b7c <gpio_stm32_pin_interrupt_configure+0x110>)
 8001af2:	4619      	mov	r1, r3
 8001af4:	6882      	ldr	r2, [r0, #8]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	4790      	blx	r2
	if (ret != 0) {
 8001afa:	b9d8      	cbnz	r0, 8001b34 <gpio_stm32_pin_interrupt_configure+0xc8>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001afc:	f004 0303 	and.w	r3, r4, #3
 8001b00:	3304      	adds	r3, #4
 8001b02:	009a      	lsls	r2, r3, #2
 8001b04:	230f      	movs	r3, #15
 8001b06:	4093      	lsls	r3, r2
 8001b08:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << ((POSITION_VAL(Line >> 16U)) & 31U));
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	0c19      	lsrs	r1, r3, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	fa91 f1a1 	rbit	r1, r1
 8001b16:	0092      	lsls	r2, r2, #2
  return __builtin_clz(value);
 8001b18:	fab1 f181 	clz	r1, r1
 8001b1c:	f102 42b0 	add.w	r2, r2, #1476395008	; 0x58000000
 8001b20:	f001 011f 	and.w	r1, r1, #31
 8001b24:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8001b28:	408f      	lsls	r7, r1
 8001b2a:	ea20 4313 	bic.w	r3, r0, r3, lsr #16
 8001b2e:	431f      	orrs	r7, r3
 8001b30:	f8c2 7408 	str.w	r7, [r2, #1032]	; 0x408
	switch (trig) {
 8001b34:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
 8001b38:	d010      	beq.n	8001b5c <gpio_stm32_pin_interrupt_configure+0xf0>
 8001b3a:	f1b6 6fc0 	cmp.w	r6, #100663296	; 0x6000000
 8001b3e:	d00f      	beq.n	8001b60 <gpio_stm32_pin_interrupt_configure+0xf4>
 8001b40:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8001b44:	bf14      	ite	ne
 8001b46:	2100      	movne	r1, #0
 8001b48:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f001 fa3e 	bl	8002fcc <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8001b50:	4620      	mov	r0, r4
 8001b52:	f7ff fd75 	bl	8001640 <stm32_exti_enable>
}
 8001b56:	4628      	mov	r0, r5
 8001b58:	b003      	add	sp, #12
 8001b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	e7f4      	b.n	8001b4a <gpio_stm32_pin_interrupt_configure+0xde>
		edge = STM32_EXTI_TRIG_BOTH;
 8001b60:	2103      	movs	r1, #3
 8001b62:	e7f2      	b.n	8001b4a <gpio_stm32_pin_interrupt_configure+0xde>
		err = -ENOTSUP;
 8001b64:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8001b68:	e7f5      	b.n	8001b56 <gpio_stm32_pin_interrupt_configure+0xea>
		err = -EBUSY;
 8001b6a:	f06f 050f 	mvn.w	r5, #15
	return err;
 8001b6e:	e7f2      	b.n	8001b56 <gpio_stm32_pin_interrupt_configure+0xea>
 8001b70:	58000400 	.word	0x58000400
 8001b74:	0800323b 	.word	0x0800323b
 8001b78:	08003dec 	.word	0x08003dec
 8001b7c:	080036f4 	.word	0x080036f4

08001b80 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8001b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b84:	4604      	mov	r4, r0
 8001b86:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 8001b8a:	2500      	movs	r5, #0
	port_device = gpio_ports[STM32_PORT(pin)];
 8001b8c:	4f1c      	ldr	r7, [pc, #112]	; (8001c00 <pinctrl_configure_pins+0x80>)
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8001b8e:	42b4      	cmp	r4, r6
 8001b90:	d101      	bne.n	8001b96 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8001b92:	2000      	movs	r0, #0
 8001b94:	e014      	b.n	8001bc0 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8001b96:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001b98:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001b9a:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8001b9e:	d411      	bmi.n	8001bc4 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8001ba0:	6865      	ldr	r5, [r4, #4]
 8001ba2:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001ba6:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8001baa:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8001bae:	280a      	cmp	r0, #10
 8001bb0:	d823      	bhi.n	8001bfa <pinctrl_configure_pins+0x7a>
	port_device = gpio_ports[STM32_PORT(pin)];
 8001bb2:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001bb6:	f1b8 0f00 	cmp.w	r8, #0
 8001bba:	d10d      	bne.n	8001bd8 <pinctrl_configure_pins+0x58>
		return -ENODEV;
 8001bbc:	f06f 0012 	mvn.w	r0, #18
}
 8001bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8001bc4:	f1b9 0f10 	cmp.w	r9, #16
 8001bc8:	d004      	beq.n	8001bd4 <pinctrl_configure_pins+0x54>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 8001bca:	f1b9 0f11 	cmp.w	r9, #17
 8001bce:	d1ea      	bne.n	8001ba6 <pinctrl_configure_pins+0x26>
			pin_cgf = pins[i].pincfg;
 8001bd0:	6865      	ldr	r5, [r4, #4]
 8001bd2:	e7e8      	b.n	8001ba6 <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 8001bd4:	2530      	movs	r5, #48	; 0x30
 8001bd6:	e7e6      	b.n	8001ba6 <pinctrl_configure_pins+0x26>
 8001bd8:	4640      	mov	r0, r8
 8001bda:	f001 fc77 	bl	80034cc <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d0ec      	beq.n	8001bbc <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 8001be2:	464b      	mov	r3, r9
 8001be4:	462a      	mov	r2, r5
 8001be6:	f00a 010f 	and.w	r1, sl, #15
 8001bea:	4640      	mov	r0, r8
 8001bec:	f001 fb38 	bl	8003260 <gpio_stm32_configure>
		if (ret < 0) {
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	f104 0408 	add.w	r4, r4, #8
 8001bf6:	daca      	bge.n	8001b8e <pinctrl_configure_pins+0xe>
 8001bf8:	e7e2      	b.n	8001bc0 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8001bfa:	f06f 0015 	mvn.w	r0, #21
 8001bfe:	e7df      	b.n	8001bc0 <pinctrl_configure_pins+0x40>
 8001c00:	08003f44 	.word	0x08003f44

08001c04 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8001c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c06:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = dev->config;
 8001c08:	6844      	ldr	r4, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8001c0a:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 8001c0c:	4869      	ldr	r0, [pc, #420]	; (8001db4 <uart_stm32_init+0x1b0>)
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	f001 fc5c 	bl	80034cc <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8001c14:	b920      	cbnz	r0, 8001c20 <uart_stm32_init+0x1c>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
 8001c16:	f06f 0512 	mvn.w	r5, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	b003      	add	sp, #12
 8001c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	6861      	ldr	r1, [r4, #4]
 8001c24:	6883      	ldr	r3, [r0, #8]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4798      	blx	r3
	if (err != 0) {
 8001c2a:	4605      	mov	r5, r0
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d1f4      	bne.n	8001c1a <uart_stm32_init+0x16>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8001c30:	4601      	mov	r1, r0
 8001c32:	aa01      	add	r2, sp, #4
 8001c34:	69e0      	ldr	r0, [r4, #28]
 8001c36:	f001 fb2b 	bl	8003290 <pinctrl_lookup_state>
	if (ret < 0) {
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	f2c0 80b8 	blt.w	8001db0 <uart_stm32_init+0x1ac>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8001c40:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8001c42:	462a      	mov	r2, r5
 8001c44:	7919      	ldrb	r1, [r3, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	f7ff ff9a 	bl	8001b80 <pinctrl_configure_pins>
	if (err < 0) {
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	f2c0 80af 	blt.w	8001db0 <uart_stm32_init+0x1ac>
	LL_USART_Disable(config->usart);
 8001c52:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]
	if (!device_is_ready(data->reset.dev)) {
 8001c5c:	68b8      	ldr	r0, [r7, #8]
 8001c5e:	f001 fc35 	bl	80034cc <z_device_is_ready>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d0d7      	beq.n	8001c16 <uart_stm32_init+0x12>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 8001c66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
	if (api->line_toggle == NULL) {
 8001c6a:	6883      	ldr	r3, [r0, #8]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	b103      	cbz	r3, 8001c72 <uart_stm32_init+0x6e>
	return api->line_toggle(dev, id);
 8001c70:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 8001c72:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c74:	e851 3f00 	ldrex	r3, [r1]
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8001c78:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c7c:	e841 3200 	strex	r2, r3, [r1]
 8001c80:	2a00      	cmp	r2, #0
 8001c82:	d1f7      	bne.n	8001c74 <uart_stm32_init+0x70>
	if (config->parity == 2) {
 8001c84:	6923      	ldr	r3, [r4, #16]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	f000 808a 	beq.w	8001da0 <uart_stm32_init+0x19c>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	bf0a      	itet	eq
 8001c90:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 8001c94:	2000      	movne	r0, #0
 8001c96:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
	LL_USART_ConfigCharacter(config->usart,
 8001c9a:	6821      	ldr	r1, [r4, #0]
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8001c9c:	4302      	orrs	r2, r0
 8001c9e:	680b      	ldr	r3, [r1, #0]
 8001ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001cac:	684b      	ldr	r3, [r1, #4]
 8001cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cb2:	604b      	str	r3, [r1, #4]
	if (config->hw_flow_control) {
 8001cb4:	7b23      	ldrb	r3, [r4, #12]
 8001cb6:	b12b      	cbz	r3, 8001cc4 <uart_stm32_init+0xc0>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8001cb8:	6873      	ldr	r3, [r6, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001cbc:	6893      	ldr	r3, [r2, #8]
 8001cbe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001cc2:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8001cc4:	6839      	ldr	r1, [r7, #0]
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	f001 fb62 	bl	8003390 <uart_stm32_set_baudrate>
	if (config->single_wire) {
 8001ccc:	7d23      	ldrb	r3, [r4, #20]
 8001cce:	b123      	cbz	r3, 8001cda <uart_stm32_init+0xd6>
		LL_USART_EnableHalfDuplex(config->usart);
 8001cd0:	6822      	ldr	r2, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8001cd2:	6893      	ldr	r3, [r2, #8]
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
 8001cd8:	6093      	str	r3, [r2, #8]
	if (config->tx_rx_swap) {
 8001cda:	7d63      	ldrb	r3, [r4, #21]
 8001cdc:	b123      	cbz	r3, 8001ce8 <uart_stm32_init+0xe4>
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
 8001cde:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 8001ce0:	6853      	ldr	r3, [r2, #4]
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce6:	6053      	str	r3, [r2, #4]
	if (config->rx_invert) {
 8001ce8:	7da3      	ldrb	r3, [r4, #22]
 8001cea:	b123      	cbz	r3, 8001cf6 <uart_stm32_init+0xf2>
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
 8001cec:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 8001cee:	6853      	ldr	r3, [r2, #4]
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6053      	str	r3, [r2, #4]
	if (config->tx_invert) {
 8001cf6:	7de3      	ldrb	r3, [r4, #23]
 8001cf8:	b123      	cbz	r3, 8001d04 <uart_stm32_init+0x100>
		LL_USART_SetTXPinLevel(config->usart, LL_USART_TXPIN_LEVEL_INVERTED);
 8001cfa:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 8001cfc:	6853      	ldr	r3, [r2, #4]
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6053      	str	r3, [r2, #4]
	if (config->de_enable) {
 8001d04:	7e23      	ldrb	r3, [r4, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d03d      	beq.n	8001d86 <uart_stm32_init+0x182>
		if (!IS_UART_DRIVER_ENABLE_INSTANCE(config->usart)) {
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	4a2a      	ldr	r2, [pc, #168]	; (8001db8 <uart_stm32_init+0x1b4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01e      	beq.n	8001d50 <uart_stm32_init+0x14c>
 8001d12:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01a      	beq.n	8001d50 <uart_stm32_init+0x14c>
 8001d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d016      	beq.n	8001d50 <uart_stm32_init+0x14c>
 8001d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d012      	beq.n	8001d50 <uart_stm32_init+0x14c>
 8001d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00e      	beq.n	8001d50 <uart_stm32_init+0x14c>
 8001d32:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00a      	beq.n	8001d50 <uart_stm32_init+0x14c>
 8001d3a:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d006      	beq.n	8001d50 <uart_stm32_init+0x14c>
 8001d42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d002      	beq.n	8001d50 <uart_stm32_init+0x14c>
 8001d4a:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <uart_stm32_init+0x1b8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d12c      	bne.n	8001daa <uart_stm32_init+0x1a6>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d56:	609a      	str	r2, [r3, #8]
		LL_USART_SetDEAssertionTime(config->usart, config->de_assert_time);
 8001d58:	6822      	ldr	r2, [r4, #0]
 8001d5a:	7e61      	ldrb	r1, [r4, #25]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
 8001d5c:	6813      	ldr	r3, [r2, #0]
 8001d5e:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8001d62:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001d66:	6013      	str	r3, [r2, #0]
		LL_USART_SetDEDeassertionTime(config->usart, config->de_deassert_time);
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	7ea1      	ldrb	r1, [r4, #26]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
 8001d6c:	6813      	ldr	r3, [r2, #0]
 8001d6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001d76:	6013      	str	r3, [r2, #0]
		if (config->de_invert) {
 8001d78:	7ee3      	ldrb	r3, [r4, #27]
 8001d7a:	b123      	cbz	r3, 8001d86 <uart_stm32_init+0x182>
			LL_USART_SetDESignalPolarity(config->usart, LL_USART_DE_POLARITY_LOW);
 8001d7c:	6822      	ldr	r2, [r4, #0]
  *         @arg @ref LL_USART_DE_POLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
 8001d7e:	6893      	ldr	r3, [r2, #8]
 8001d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d84:	6093      	str	r3, [r2, #8]
	LL_USART_Enable(config->usart);
 8001d86:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001d88:	6813      	ldr	r3, [r2, #0]
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]
	while (!(LL_USART_IsActiveFlag_TEACK(config->usart))) {
 8001d90:	6823      	ldr	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001d92:	69da      	ldr	r2, [r3, #28]
 8001d94:	0291      	lsls	r1, r2, #10
 8001d96:	d5fc      	bpl.n	8001d92 <uart_stm32_init+0x18e>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	0252      	lsls	r2, r2, #9
 8001d9c:	d5fc      	bpl.n	8001d98 <uart_stm32_init+0x194>
 8001d9e:	e73c      	b.n	8001c1a <uart_stm32_init+0x16>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001da0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8001da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da8:	e777      	b.n	8001c9a <uart_stm32_init+0x96>
			return -EINVAL;
 8001daa:	f06f 0515 	mvn.w	r5, #21
 8001dae:	e734      	b.n	8001c1a <uart_stm32_init+0x16>
	if (err < 0) {
 8001db0:	4605      	mov	r5, r0
 8001db2:	e732      	b.n	8001c1a <uart_stm32_init+0x16>
 8001db4:	080036f4 	.word	0x080036f4
 8001db8:	40011000 	.word	0x40011000
 8001dbc:	58000c00 	.word	0x58000c00

08001dc0 <uart_stm32_configure>:
{
 8001dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8001dc4:	790b      	ldrb	r3, [r1, #4]
{
 8001dc6:	460c      	mov	r4, r1
	const struct uart_stm32_config *config = dev->config;
 8001dc8:	6845      	ldr	r5, [r0, #4]
	switch (parity) {
 8001dca:	2b01      	cmp	r3, #1
	struct uart_stm32_data *data = dev->data;
 8001dcc:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8001dce:	d01c      	beq.n	8001e0a <uart_stm32_configure+0x4a>
		return LL_USART_PARITY_NONE;
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	bf0c      	ite	eq
 8001dd4:	f44f 6e80 	moveq.w	lr, #1024	; 0x400
 8001dd8:	f04f 0e00 	movne.w	lr, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001ddc:	f894 9005 	ldrb.w	r9, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8001de0:	79a1      	ldrb	r1, [r4, #6]
 8001de2:	f1b9 0f02 	cmp.w	r9, #2
 8001de6:	bf96      	itet	ls
 8001de8:	4a52      	ldrls	r2, [pc, #328]	; (8001f34 <uart_stm32_configure+0x174>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001dea:	f44f 5200 	movhi.w	r2, #8192	; 0x2000
 8001dee:	f832 2019 	ldrhls.w	r2, [r2, r9, lsl #1]
	switch (db) {
 8001df2:	2902      	cmp	r1, #2
 8001df4:	d00c      	beq.n	8001e10 <uart_stm32_configure+0x50>
 8001df6:	2904      	cmp	r1, #4
 8001df8:	f000 8096 	beq.w	8001f28 <uart_stm32_configure+0x168>
			return LL_USART_DATAWIDTH_8B;
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf14      	ite	ne
 8001e00:	f44f 5c80 	movne.w	ip, #4096	; 0x1000
 8001e04:	f04f 0c00 	moveq.w	ip, #0
 8001e08:	e008      	b.n	8001e1c <uart_stm32_configure+0x5c>
	switch (parity) {
 8001e0a:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8001e0e:	e7e5      	b.n	8001ddc <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf0c      	ite	eq
 8001e14:	f04f 5c80 	moveq.w	ip, #268435456	; 0x10000000
 8001e18:	f04f 0c00 	movne.w	ip, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8001e1c:	f894 8007 	ldrb.w	r8, [r4, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001e20:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8001e24:	f1b8 0f01 	cmp.w	r8, #1
 8001e28:	bf14      	ite	ne
 8001e2a:	2700      	movne	r7, #0
 8001e2c:	f44f 7740 	moveq.w	r7, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8001e30:	f1ba 0f01 	cmp.w	sl, #1
 8001e34:	d97b      	bls.n	8001f2e <uart_stm32_configure+0x16e>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8001e36:	b10b      	cbz	r3, 8001e3c <uart_stm32_configure+0x7c>
 8001e38:	2904      	cmp	r1, #4
 8001e3a:	d078      	beq.n	8001f2e <uart_stm32_configure+0x16e>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8001e3c:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8001e40:	d075      	beq.n	8001f2e <uart_stm32_configure+0x16e>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8001e42:	2901      	cmp	r1, #1
 8001e44:	d973      	bls.n	8001f2e <uart_stm32_configure+0x16e>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8001e46:	2904      	cmp	r1, #4
 8001e48:	d071      	beq.n	8001f2e <uart_stm32_configure+0x16e>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001e4a:	682b      	ldr	r3, [r5, #0]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8001e4c:	f1b8 0f00 	cmp.w	r8, #0
 8001e50:	d024      	beq.n	8001e9c <uart_stm32_configure+0xdc>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8001e52:	4939      	ldr	r1, [pc, #228]	; (8001f38 <uart_stm32_configure+0x178>)
 8001e54:	428b      	cmp	r3, r1
 8001e56:	d01e      	beq.n	8001e96 <uart_stm32_configure+0xd6>
 8001e58:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 8001e5c:	428b      	cmp	r3, r1
 8001e5e:	d01a      	beq.n	8001e96 <uart_stm32_configure+0xd6>
 8001e60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d016      	beq.n	8001e96 <uart_stm32_configure+0xd6>
 8001e68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001e6c:	428b      	cmp	r3, r1
 8001e6e:	d012      	beq.n	8001e96 <uart_stm32_configure+0xd6>
 8001e70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001e74:	428b      	cmp	r3, r1
 8001e76:	d00e      	beq.n	8001e96 <uart_stm32_configure+0xd6>
 8001e78:	f501 4144 	add.w	r1, r1, #50176	; 0xc400
 8001e7c:	428b      	cmp	r3, r1
 8001e7e:	d00a      	beq.n	8001e96 <uart_stm32_configure+0xd6>
 8001e80:	f5a1 411c 	sub.w	r1, r1, #39936	; 0x9c00
 8001e84:	428b      	cmp	r3, r1
 8001e86:	d006      	beq.n	8001e96 <uart_stm32_configure+0xd6>
 8001e88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001e8c:	428b      	cmp	r3, r1
 8001e8e:	d002      	beq.n	8001e96 <uart_stm32_configure+0xd6>
 8001e90:	492a      	ldr	r1, [pc, #168]	; (8001f3c <uart_stm32_configure+0x17c>)
 8001e92:	428b      	cmp	r3, r1
 8001e94:	d14b      	bne.n	8001f2e <uart_stm32_configure+0x16e>
 8001e96:	f1b8 0f01 	cmp.w	r8, #1
 8001e9a:	d148      	bne.n	8001f2e <uart_stm32_configure+0x16e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001e9c:	6819      	ldr	r1, [r3, #0]
 8001e9e:	f021 0101 	bic.w	r1, r1, #1
 8001ea2:	6019      	str	r1, [r3, #0]
	return LL_USART_GetParity(config->usart);
 8001ea4:	6841      	ldr	r1, [r0, #4]
 8001ea6:	6809      	ldr	r1, [r1, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8001ea8:	680b      	ldr	r3, [r1, #0]
 8001eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8001eae:	459e      	cmp	lr, r3
 8001eb0:	d005      	beq.n	8001ebe <uart_stm32_configure+0xfe>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001eb2:	680b      	ldr	r3, [r1, #0]
 8001eb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb8:	ea43 030e 	orr.w	r3, r3, lr
 8001ebc:	600b      	str	r3, [r1, #0]
	return LL_USART_GetStopBitsLength(config->usart);
 8001ebe:	6843      	ldr	r3, [r0, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8001ec8:	428a      	cmp	r2, r1
 8001eca:	d004      	beq.n	8001ed6 <uart_stm32_configure+0x116>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001ed2:	4311      	orrs	r1, r2
 8001ed4:	6059      	str	r1, [r3, #4]
	return LL_USART_GetDataWidth(config->usart);
 8001ed6:	6843      	ldr	r3, [r0, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8001ee0:	4594      	cmp	ip, r2
 8001ee2:	d005      	beq.n	8001ef0 <uart_stm32_configure+0x130>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 8001eea:	ea42 020c 	orr.w	r2, r2, ip
 8001eee:	601a      	str	r2, [r3, #0]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8001ef0:	6843      	ldr	r3, [r0, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8001ef4:	6893      	ldr	r3, [r2, #8]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8001efa:	429f      	cmp	r7, r3
 8001efc:	d004      	beq.n	8001f08 <uart_stm32_configure+0x148>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001efe:	6893      	ldr	r3, [r2, #8]
 8001f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f04:	433b      	orrs	r3, r7
 8001f06:	6093      	str	r3, [r2, #8]
	if (cfg->baudrate != data->baud_rate) {
 8001f08:	6821      	ldr	r1, [r4, #0]
 8001f0a:	6833      	ldr	r3, [r6, #0]
 8001f0c:	4299      	cmp	r1, r3
 8001f0e:	d003      	beq.n	8001f18 <uart_stm32_configure+0x158>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8001f10:	f001 fa3e 	bl	8003390 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8001f18:	682a      	ldr	r2, [r5, #0]
	return 0;
 8001f1a:	2000      	movs	r0, #0
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f1c:	6813      	ldr	r3, [r2, #0]
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6013      	str	r3, [r2, #0]
};
 8001f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 8001f28:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8001f2c:	e776      	b.n	8001e1c <uart_stm32_configure+0x5c>
		return -ENOTSUP;
 8001f2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8001f32:	e7f7      	b.n	8001f24 <uart_stm32_configure+0x164>
 8001f34:	08003ffc 	.word	0x08003ffc
 8001f38:	40011000 	.word	0x40011000
 8001f3c:	58000c00 	.word	0x58000c00

08001f40 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8001f40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8001f44:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8001f46:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8001f48:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8001f4a:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001f4c:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <elapsed+0x34>)
 8001f52:	4909      	ldr	r1, [pc, #36]	; (8001f78 <elapsed+0x38>)
 8001f54:	d101      	bne.n	8001f5a <elapsed+0x1a>
	    || (val1 < val2)) {
 8001f56:	4282      	cmp	r2, r0
 8001f58:	d206      	bcs.n	8001f68 <elapsed+0x28>
		overflow_cyc += last_load;
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	680c      	ldr	r4, [r1, #0]
 8001f5e:	4422      	add	r2, r4
 8001f60:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8001f62:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001f66:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	680a      	ldr	r2, [r1, #0]
 8001f6c:	4413      	add	r3, r2
}
 8001f6e:	1a18      	subs	r0, r3, r0
 8001f70:	bd10      	pop	{r4, pc}
 8001f72:	bf00      	nop
 8001f74:	240003e8 	.word	0x240003e8
 8001f78:	240003e4 	.word	0x240003e4

08001f7c <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <sys_clock_driver_init+0x28>)
 8001f7e:	2210      	movs	r2, #16
static int sys_clock_driver_init(void)
{

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 8001f80:	2000      	movs	r0, #0
 8001f82:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 8001f86:	f242 527f 	movw	r2, #9599	; 0x257f
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <sys_clock_driver_init+0x2c>)
 8001f8c:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <sys_clock_driver_init+0x30>)
 8001f90:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8001f92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f96:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001f98:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	f042 0207 	orr.w	r2, r2, #7
 8001fa0:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00
 8001fa8:	240003e4 	.word	0x240003e4
 8001fac:	240003e8 	.word	0x240003e8

08001fb0 <sys_clock_isr>:
{
 8001fb0:	b508      	push	{r3, lr}
	elapsed();
 8001fb2:	f7ff ffc5 	bl	8001f40 <elapsed>
	cycle_count += overflow_cyc;
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <sys_clock_isr+0x38>)
 8001fb8:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <sys_clock_isr+0x3c>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	6811      	ldr	r1, [r2, #0]
 8001fbe:	4408      	add	r0, r1
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001fc0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
	cycle_count += overflow_cyc;
 8001fc4:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <sys_clock_isr+0x40>)
 8001fcc:	6813      	ldr	r3, [r2, #0]
 8001fce:	1ac0      	subs	r0, r0, r3
 8001fd0:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8001fd4:	fb01 3300 	mla	r3, r1, r0, r3
 8001fd8:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8001fda:	f000 fe65 	bl	8002ca8 <sys_clock_announce>
}
 8001fde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8001fe2:	f7ff b899 	b.w	8001118 <z_arm_exc_exit>
 8001fe6:	bf00      	nop
 8001fe8:	240003e8 	.word	0x240003e8
 8001fec:	240003e0 	.word	0x240003e0
 8001ff0:	240003dc 	.word	0x240003dc

08001ff4 <sys_clock_set_timeout>:
{
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	4c32      	ldr	r4, [pc, #200]	; (80020c0 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8001ff8:	b159      	cbz	r1, 8002012 <sys_clock_set_timeout+0x1e>
 8001ffa:	1c42      	adds	r2, r0, #1
 8001ffc:	d109      	bne.n	8002012 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8001ffe:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002002:	6913      	ldr	r3, [r2, #16]
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800200a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800200e:	6023      	str	r3, [r4, #0]
}
 8002010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8002012:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8002014:	6826      	ldr	r6, [r4, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8002016:	d023      	beq.n	8002060 <sys_clock_set_timeout+0x6c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002018:	2801      	cmp	r0, #1
 800201a:	dd24      	ble.n	8002066 <sys_clock_set_timeout+0x72>
 800201c:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8002020:	4298      	cmp	r0, r3
 8002022:	dc22      	bgt.n	800206a <sys_clock_set_timeout+0x76>
 8002024:	1e47      	subs	r7, r0, #1
	__asm__ volatile(
 8002026:	f04f 0310 	mov.w	r3, #16
 800202a:	f3ef 8511 	mrs	r5, BASEPRI
 800202e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002032:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8002036:	f7ff ff83 	bl	8001f40 <elapsed>
	val1 = SysTick->VAL;
 800203a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
 800203e:	4921      	ldr	r1, [pc, #132]	; (80020c4 <sys_clock_set_timeout+0xd0>)
	overflow_cyc = 0U;
 8002040:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 8002042:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 8002046:	680b      	ldr	r3, [r1, #0]
 8002048:	4418      	add	r0, r3
	overflow_cyc = 0U;
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <sys_clock_set_timeout+0xd4>)
 800204c:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <sys_clock_set_timeout+0xd8>)
	cycle_count += pending;
 8002050:	6008      	str	r0, [r1, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8002052:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8002054:	1a83      	subs	r3, r0, r2
 8002056:	d50a      	bpl.n	800206e <sys_clock_set_timeout+0x7a>
		delay = MAX(delay, MIN_DELAY);
 8002058:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 800205c:	6023      	str	r3, [r4, #0]
 800205e:	e019      	b.n	8002094 <sys_clock_set_timeout+0xa0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8002060:	f240 60d2 	movw	r0, #1746	; 0x6d2
 8002064:	e7de      	b.n	8002024 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002066:	2700      	movs	r7, #0
 8002068:	e7dd      	b.n	8002026 <sys_clock_set_timeout+0x32>
 800206a:	461f      	mov	r7, r3
 800206c:	e7db      	b.n	8002026 <sys_clock_set_timeout+0x32>
		delay = ticks * CYC_PER_TICK;
 800206e:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
		delay -= unannounced;
 8002072:	1a12      	subs	r2, r2, r0
		delay += unannounced;
 8002074:	fb0e 3307 	mla	r3, lr, r7, r3
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
 8002078:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 800207c:	333f      	adds	r3, #63	; 0x3f
 800207e:	fbb3 f3fe 	udiv	r3, r3, lr
		delay -= unannounced;
 8002082:	fb0e 2303 	mla	r3, lr, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8002086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208a:	d9e5      	bls.n	8002058 <sys_clock_set_timeout+0x64>
		if (delay > MAX_CYCLES) {
 800208c:	4a10      	ldr	r2, [pc, #64]	; (80020d0 <sys_clock_set_timeout+0xdc>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d9e4      	bls.n	800205c <sys_clock_set_timeout+0x68>
			last_load = MAX_CYCLES;
 8002092:	6022      	str	r2, [r4, #0]
	val2 = SysTick->VAL;
 8002094:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 8002098:	6824      	ldr	r4, [r4, #0]
	val2 = SysTick->VAL;
 800209a:	6993      	ldr	r3, [r2, #24]
	SysTick->LOAD = last_load - 1;
 800209c:	3c01      	subs	r4, #1
	if (val1 < val2) {
 800209e:	459c      	cmp	ip, r3
	SysTick->LOAD = last_load - 1;
 80020a0:	6154      	str	r4, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80020a2:	f04f 0400 	mov.w	r4, #0
		cycle_count += (val1 + (last_load_ - val2));
 80020a6:	bf38      	it	cc
 80020a8:	44b4      	addcc	ip, r6
	SysTick->VAL = 0; /* resets timer to last_load */
 80020aa:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 80020ac:	ebac 0c03 	sub.w	ip, ip, r3
 80020b0:	4460      	add	r0, ip
 80020b2:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 80020b4:	f385 8811 	msr	BASEPRI, r5
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	e7a8      	b.n	8002010 <sys_clock_set_timeout+0x1c>
 80020be:	bf00      	nop
 80020c0:	240003e4 	.word	0x240003e4
 80020c4:	240003e0 	.word	0x240003e0
 80020c8:	240003e8 	.word	0x240003e8
 80020cc:	240003dc 	.word	0x240003dc
 80020d0:	00ffc300 	.word	0x00ffc300

080020d4 <sys_clock_elapsed>:
{
 80020d4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80020d6:	f04f 0310 	mov.w	r3, #16
 80020da:	f3ef 8411 	mrs	r4, BASEPRI
 80020de:	f383 8812 	msr	BASEPRI_MAX, r3
 80020e2:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 80020e6:	f7ff ff2b 	bl	8001f40 <elapsed>
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <sys_clock_elapsed+0x34>)
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <sys_clock_elapsed+0x38>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	4403      	add	r3, r0
	__asm__ volatile(
 80020f6:	f384 8811 	msr	BASEPRI, r4
 80020fa:	f3bf 8f6f 	isb	sy
}
 80020fe:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002102:	fbb3 f0f0 	udiv	r0, r3, r0
 8002106:	bd10      	pop	{r4, pc}
 8002108:	240003e0 	.word	0x240003e0
 800210c:	240003dc 	.word	0x240003dc

08002110 <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */



  /* Frequency cannot be equal to 0 */
  if (HCLK_Frequency == 0U)
 8002110:	b320      	cbz	r0, 800215c <LL_SetFlashLatency+0x4c>
  return (uint32_t)(READ_BIT(PWR->D3CR, PWR_D3CR_VOS));
 8002112:	4a2a      	ldr	r2, [pc, #168]	; (80021bc <LL_SetFlashLatency+0xac>)
 8002114:	6993      	ldr	r3, [r2, #24]
 8002116:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
    {
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
#endif /* STM32H7_DEV_ID == 0x480UL */
#else
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800211a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800211e:	d11f      	bne.n	8002160 <LL_SetFlashLatency+0x50>
    {
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <LL_SetFlashLatency+0xb0>)
 8002122:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <LL_SetFlashLatency+0xb4>)
 8002124:	4403      	add	r3, r0
 8002126:	4293      	cmp	r3, r2
 8002128:	d942      	bls.n	80021b0 <LL_SetFlashLatency+0xa0>
#endif /* STM32H7_DEV_ID == 0x480UL || STM32H7_DEV_ID == 0x483UL */
      {
        /* 140 < HCLK <= 210 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY1_FREQ))
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <LL_SetFlashLatency+0xb8>)
 800212c:	4a27      	ldr	r2, [pc, #156]	; (80021cc <LL_SetFlashLatency+0xbc>)
 800212e:	4403      	add	r3, r0
 8002130:	4293      	cmp	r3, r2
 8002132:	d93f      	bls.n	80021b4 <LL_SetFlashLatency+0xa4>
      {
        /* 70 < HCLK <= 140 => 1WS (2 CPU cycles) */
        latency = LL_FLASH_LATENCY_1;
      }
      else if(HCLK_Frequency <= UTILS_SCALE1_LATENCY0_FREQ)
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <LL_SetFlashLatency+0xc0>)
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
      {
        /* 45 < HCLK <= 90 => 1WS (2 CPU cycles) */
        latency = LL_FLASH_LATENCY_1;
      }
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 8002136:	4298      	cmp	r0, r3
 8002138:	d810      	bhi.n	800215c <LL_SetFlashLatency+0x4c>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800213a:	2300      	movs	r3, #0
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800213c:	4925      	ldr	r1, [pc, #148]	; (80021d4 <LL_SetFlashLatency+0xc4>)
 800213e:	680a      	ldr	r2, [r1, #0]
 8002140:	f022 020f 	bic.w	r2, r2, #15
 8002144:	431a      	orrs	r2, r3
 8002146:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002148:	680a      	ldr	r2, [r1, #0]
 800214a:	f002 020f 	and.w	r2, r2, #15
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 800214e:	4293      	cmp	r3, r2
 8002150:	d032      	beq.n	80021b8 <LL_SetFlashLatency+0xa8>
 8002152:	680a      	ldr	r2, [r1, #0]
 8002154:	f002 020f 	and.w	r2, r2, #15
 8002158:	4293      	cmp	r3, r2
 800215a:	d02d      	beq.n	80021b8 <LL_SetFlashLatency+0xa8>
    status = ERROR;
 800215c:	2001      	movs	r0, #1
 800215e:	4770      	bx	lr
 8002160:	6993      	ldr	r3, [r2, #24]
 8002162:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8002166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800216a:	d10e      	bne.n	800218a <LL_SetFlashLatency+0x7a>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY3_FREQ))
 800216c:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <LL_SetFlashLatency+0xc8>)
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <LL_SetFlashLatency+0xcc>)
 8002170:	4402      	add	r2, r0
 8002172:	429a      	cmp	r2, r3
 8002174:	d91a      	bls.n	80021ac <LL_SetFlashLatency+0x9c>
      else if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY2_FREQ))
 8002176:	4a1a      	ldr	r2, [pc, #104]	; (80021e0 <LL_SetFlashLatency+0xd0>)
 8002178:	4402      	add	r2, r0
 800217a:	429a      	cmp	r2, r3
 800217c:	d918      	bls.n	80021b0 <LL_SetFlashLatency+0xa0>
      else if((HCLK_Frequency > UTILS_SCALE2_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY1_FREQ))
 800217e:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <LL_SetFlashLatency+0xd4>)
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
 8002180:	4402      	add	r2, r0
 8002182:	429a      	cmp	r2, r3
 8002184:	d916      	bls.n	80021b4 <LL_SetFlashLatency+0xa4>
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 8002186:	3301      	adds	r3, #1
 8002188:	e7d5      	b.n	8002136 <LL_SetFlashLatency+0x26>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY4_FREQ))
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <LL_SetFlashLatency+0xd8>)
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <LL_SetFlashLatency+0xdc>)
 800218e:	4402      	add	r2, r0
 8002190:	429a      	cmp	r2, r3
 8002192:	d909      	bls.n	80021a8 <LL_SetFlashLatency+0x98>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY3_FREQ))
 8002194:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <LL_SetFlashLatency+0xe0>)
 8002196:	4402      	add	r2, r0
 8002198:	429a      	cmp	r2, r3
 800219a:	d907      	bls.n	80021ac <LL_SetFlashLatency+0x9c>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY2_FREQ))
 800219c:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <LL_SetFlashLatency+0xe4>)
 800219e:	4402      	add	r2, r0
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d905      	bls.n	80021b0 <LL_SetFlashLatency+0xa0>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <LL_SetFlashLatency+0xe8>)
 80021a6:	e7eb      	b.n	8002180 <LL_SetFlashLatency+0x70>
        latency = LL_FLASH_LATENCY_4;
 80021a8:	2304      	movs	r3, #4
 80021aa:	e7c7      	b.n	800213c <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_3;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e7c5      	b.n	800213c <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_2;
 80021b0:	2302      	movs	r3, #2
 80021b2:	e7c3      	b.n	800213c <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_1;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e7c1      	b.n	800213c <LL_SetFlashLatency+0x2c>
 80021b8:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80021ba:	4770      	bx	lr
 80021bc:	58024800 	.word	0x58024800
 80021c0:	f7a7c4ff 	.word	0xf7a7c4ff
 80021c4:	05f5e0ff 	.word	0x05f5e0ff
 80021c8:	fbd3e27f 	.word	0xfbd3e27f
 80021cc:	042c1d7f 	.word	0x042c1d7f
 80021d0:	042c1d80 	.word	0x042c1d80
 80021d4:	52002000 	.word	0x52002000
 80021d8:	f62a4cbf 	.word	0xf62a4cbf
 80021dc:	03473bbf 	.word	0x03473bbf
 80021e0:	f971887f 	.word	0xf971887f
 80021e4:	fcb8c43f 	.word	0xfcb8c43f
 80021e8:	f5456aff 	.word	0xf5456aff
 80021ec:	02aea53f 	.word	0x02aea53f
 80021f0:	f7f4103f 	.word	0xf7f4103f
 80021f4:	faa2b57f 	.word	0xfaa2b57f
 80021f8:	fd515abf 	.word	0xfd515abf

080021fc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80021fc:	4b10      	ldr	r3, [pc, #64]	; (8002240 <z_sys_init_run_level+0x44>)
{
 80021fe:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002200:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002204:	3001      	adds	r0, #1
 8002206:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800220a:	42a6      	cmp	r6, r4
 800220c:	d800      	bhi.n	8002210 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
 800220e:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
 8002210:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
 8002214:	b195      	cbz	r5, 800223c <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
 8002216:	b153      	cbz	r3, 800222e <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
 8002218:	4628      	mov	r0, r5
 800221a:	4798      	blx	r3
				if (rc != 0) {
 800221c:	b138      	cbz	r0, 800222e <z_sys_init_run_level+0x32>
					if (rc < 0) {
 800221e:	2800      	cmp	r0, #0
					dev->state->init_res = rc;
 8002220:	68eb      	ldr	r3, [r5, #12]
 8002222:	bfb8      	it	lt
 8002224:	4240      	neglt	r0, r0
 8002226:	28ff      	cmp	r0, #255	; 0xff
 8002228:	bfa8      	it	ge
 800222a:	20ff      	movge	r0, #255	; 0xff
 800222c:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 800222e:	68ea      	ldr	r2, [r5, #12]
 8002230:	7853      	ldrb	r3, [r2, #1]
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8002238:	3408      	adds	r4, #8
 800223a:	e7e6      	b.n	800220a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
 800223c:	4798      	blx	r3
 800223e:	e7fb      	b.n	8002238 <z_sys_init_run_level+0x3c>
 8002240:	08003fe4 	.word	0x08003fe4

08002244 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8002244:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8002246:	2003      	movs	r0, #3
{
 8002248:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <bg_thread_main+0x2c>)
 800224c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 800224e:	f7ff ffd5 	bl	80021fc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8002252:	f000 fdad 	bl	8002db0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 8002256:	2004      	movs	r0, #4
 8002258:	f7ff ffd0 	bl	80021fc <z_sys_init_run_level>

	z_init_static_threads();
 800225c:	f000 f92e 	bl	80024bc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
 8002260:	f7fe f9c4 	bl	80005ec <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8002264:	4a03      	ldr	r2, [pc, #12]	; (8002274 <bg_thread_main+0x30>)
 8002266:	7b13      	ldrb	r3, [r2, #12]
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800226e:	bd08      	pop	{r3, pc}
 8002270:	24000421 	.word	0x24000421
 8002274:	24000200 	.word	0x24000200

08002278 <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8002278:	4806      	ldr	r0, [pc, #24]	; (8002294 <z_bss_zero+0x1c>)
 800227a:	2100      	movs	r1, #0
 800227c:	4a06      	ldr	r2, [pc, #24]	; (8002298 <z_bss_zero+0x20>)
{
 800227e:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 8002280:	1a12      	subs	r2, r2, r0
 8002282:	f001 f955 	bl	8003530 <z_early_memset>
		       - (uintptr_t) &__dtcm_bss_start);
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <z_bss_zero+0x24>)
	z_early_memset(&__dtcm_bss_start, 0,
 8002288:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <z_bss_zero+0x28>)
 800228a:	2100      	movs	r1, #0
 800228c:	1a12      	subs	r2, r2, r0
 800228e:	f001 f94f 	bl	8003530 <z_early_memset>
}
 8002292:	bd08      	pop	{r3, pc}
 8002294:	24000080 	.word	0x24000080
 8002298:	24000424 	.word	0x24000424
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000000 	.word	0x20000000

080022a4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 80022a4:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 80022a6:	2300      	movs	r3, #0
{
 80022a8:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 80022aa:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
 80022ac:	4e1a      	ldr	r6, [pc, #104]	; (8002318 <z_init_cpu+0x74>)
	z_setup_new_thread(thread, stack,
 80022ae:	9301      	str	r3, [sp, #4]
{
 80022b0:	4604      	mov	r4, r0
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 80022b2:	4d1a      	ldr	r5, [pc, #104]	; (800231c <z_init_cpu+0x78>)
	struct k_thread *thread = &z_idle_threads[i];
 80022b4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
 80022b8:	4919      	ldr	r1, [pc, #100]	; (8002320 <z_init_cpu+0x7c>)
 80022ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80022be:	220f      	movs	r2, #15
 80022c0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 80022c4:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
 80022c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 80022ca:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 80022ce:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <z_init_cpu+0x80>)
 80022d4:	fb00 1104 	mla	r1, r0, r4, r1
 80022d8:	4630      	mov	r0, r6
 80022da:	9500      	str	r5, [sp, #0]
 80022dc:	f000 f890 	bl	8002400 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80022e0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 80022e2:	4811      	ldr	r0, [pc, #68]	; (8002328 <z_init_cpu+0x84>)
 80022e4:	f023 0304 	bic.w	r3, r3, #4
	_kernel.cpus[id].id = id;
 80022e8:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 80022ea:	60ee      	str	r6, [r5, #12]
 80022ec:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 80022ee:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80022f2:	fb03 0404 	mla	r4, r3, r4, r0
 80022f6:	441c      	add	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <z_init_cpu+0x88>)
	_kernel.cpus[id].irq_stack =
 80022fa:	606c      	str	r4, [r5, #4]
 80022fc:	f3bf 8f5b 	dmb	ish
 8002300:	e853 2f00 	ldrex	r2, [r3]
 8002304:	3201      	adds	r2, #1
 8002306:	e843 2100 	strex	r1, r2, [r3]
 800230a:	2900      	cmp	r1, #0
 800230c:	d1f8      	bne.n	8002300 <z_init_cpu+0x5c>
 800230e:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
 8002312:	b006      	add	sp, #24
 8002314:	bd70      	pop	{r4, r5, r6, pc}
 8002316:	bf00      	nop
 8002318:	24000180 	.word	0x24000180
 800231c:	240003f0 	.word	0x240003f0
 8002320:	24001100 	.word	0x24001100
 8002324:	0800353f 	.word	0x0800353f
 8002328:	24001280 	.word	0x24001280
 800232c:	240003ec 	.word	0x240003ec

08002330 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 8002330:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8002332:	2000      	movs	r0, #0
{
 8002334:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8002336:	f7ff ff61 	bl	80021fc <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <z_cstart+0xb4>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800233c:	f383 8808 	msr	MSP, r3
 8002340:	4d29      	ldr	r5, [pc, #164]	; (80023e8 <z_cstart+0xb8>)
 8002342:	2400      	movs	r4, #0
 8002344:	23f0      	movs	r3, #240	; 0xf0

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8002346:	4e29      	ldr	r6, [pc, #164]	; (80023ec <z_cstart+0xbc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002348:	4f29      	ldr	r7, [pc, #164]	; (80023f0 <z_cstart+0xc0>)
 800234a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800234e:	77ec      	strb	r4, [r5, #31]
 8002350:	762c      	strb	r4, [r5, #24]
 8002352:	766c      	strb	r4, [r5, #25]
 8002354:	76ac      	strb	r4, [r5, #26]
 8002356:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800235a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800235c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002360:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8002362:	f7ff f823 	bl	80013ac <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8002366:	f7fe fdcb 	bl	8000f00 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002370:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8002372:	f7ff f8fb 	bl	800156c <z_arm_mpu_init>
	_kernel.ready_q.cache = &z_main_thread;
 8002376:	4d1f      	ldr	r5, [pc, #124]	; (80023f4 <z_cstart+0xc4>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8002378:	f7ff f862 	bl	8001440 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800237c:	f240 1301 	movw	r3, #257	; 0x101
	dummy_thread->resource_pool = NULL;
 8002380:	9422      	str	r4, [sp, #136]	; 0x88
	dummy_thread->base.user_options = K_ESSENTIAL;
 8002382:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8002386:	ab06      	add	r3, sp, #24
 8002388:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 800238a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800238e:	f001 f89c 	bl	80034ca <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 8002392:	2001      	movs	r0, #1
 8002394:	f7ff ff32 	bl	80021fc <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 8002398:	2002      	movs	r0, #2
 800239a:	f7ff ff2f 	bl	80021fc <z_sys_init_run_level>
	z_sched_init();
 800239e:	f000 fa99 	bl	80028d4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <z_cstart+0xc8>)
	_kernel.ready_q.cache = &z_main_thread;
 80023a4:	6175      	str	r5, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80023a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023aa:	9305      	str	r3, [sp, #20]
 80023ac:	2301      	movs	r3, #1
 80023ae:	4913      	ldr	r1, [pc, #76]	; (80023fc <z_cstart+0xcc>)
 80023b0:	4628      	mov	r0, r5
 80023b2:	9400      	str	r4, [sp, #0]
 80023b4:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80023b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80023bc:	463b      	mov	r3, r7
 80023be:	f000 f81f 	bl	8002400 <z_setup_new_thread>
 80023c2:	7b6a      	ldrb	r2, [r5, #13]
 80023c4:	4606      	mov	r6, r0
	z_ready_thread(&z_main_thread);
 80023c6:	4628      	mov	r0, r5
 80023c8:	f022 0204 	bic.w	r2, r2, #4
 80023cc:	736a      	strb	r2, [r5, #13]
 80023ce:	f001 f8f0 	bl	80035b2 <z_ready_thread>
	z_init_cpu(0);
 80023d2:	4620      	mov	r0, r4
 80023d4:	f7ff ff66 	bl	80022a4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 80023d8:	463a      	mov	r2, r7
 80023da:	4631      	mov	r1, r6
 80023dc:	4628      	mov	r0, r5
 80023de:	f7fe fe71 	bl	80010c4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 80023e2:	bf00      	nop
 80023e4:	24001ac0 	.word	0x24001ac0
 80023e8:	e000ed00 	.word	0xe000ed00
 80023ec:	240003f0 	.word	0x240003f0
 80023f0:	08002245 	.word	0x08002245
 80023f4:	24000200 	.word	0x24000200
 80023f8:	080041c9 	.word	0x080041c9
 80023fc:	24000cc0 	.word	0x24000cc0

08002400 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002400:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 8002404:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8002406:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 800240a:	460f      	mov	r7, r1
 800240c:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
 800240e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002410:	2604      	movs	r6, #4

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8002412:	3740      	adds	r7, #64	; 0x40
 8002414:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8002416:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002418:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800241a:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800241c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800241e:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8002422:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 8002426:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002428:	f106 0840 	add.w	r8, r6, #64	; 0x40
	thread_base->pended_on = NULL;
 800242c:	6085      	str	r5, [r0, #8]
	stack_ptr = (char *)stack + stack_obj_size;
 800242e:	4488      	add	r8, r1

	thread_base->sched_locked = 0U;
 8002430:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8002432:	66c5      	str	r5, [r0, #108]	; 0x6c
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8002434:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8002438:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800243c:	9202      	str	r2, [sp, #8]
 800243e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002440:	9201      	str	r2, [sp, #4]
 8002442:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002444:	9200      	str	r2, [sp, #0]
 8002446:	4642      	mov	r2, r8
 8002448:	f7fe fe10 	bl	800106c <arch_new_thread>
	if (!_current) {
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 800244e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	b103      	cbz	r3, 8002456 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 8002456:	4640      	mov	r0, r8
 8002458:	6723      	str	r3, [r4, #112]	; 0x70
 800245a:	b004      	add	sp, #16
 800245c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002460:	240003f0 	.word	0x240003f0

08002464 <z_impl_k_thread_create>:
{
 8002464:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8002466:	2700      	movs	r7, #0
{
 8002468:	b087      	sub	sp, #28
 800246a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800246c:	9705      	str	r7, [sp, #20]
 800246e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002470:	9704      	str	r7, [sp, #16]
 8002472:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8002474:	9703      	str	r7, [sp, #12]
 8002476:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002478:	9702      	str	r7, [sp, #8]
 800247a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800247c:	9701      	str	r7, [sp, #4]
 800247e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
{
 8002480:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8002484:	9700      	str	r7, [sp, #0]
 8002486:	f7ff ffbb 	bl	8002400 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800248a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800248e:	bf08      	it	eq
 8002490:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 8002494:	d005      	beq.n	80024a2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002496:	ea55 0306 	orrs.w	r3, r5, r6
 800249a:	d105      	bne.n	80024a8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 800249c:	4620      	mov	r0, r4
 800249e:	f000 f995 	bl	80027cc <z_sched_start>
}
 80024a2:	4620      	mov	r0, r4
 80024a4:	b007      	add	sp, #28
 80024a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80024a8:	4632      	mov	r2, r6
 80024aa:	462b      	mov	r3, r5
 80024ac:	4902      	ldr	r1, [pc, #8]	; (80024b8 <z_impl_k_thread_create+0x54>)
 80024ae:	f104 0018 	add.w	r0, r4, #24
 80024b2:	f000 fb87 	bl	8002bc4 <z_add_timeout>
 80024b6:	e7f4      	b.n	80024a2 <z_impl_k_thread_create+0x3e>
 80024b8:	08003617 	.word	0x08003617

080024bc <z_init_static_threads>:
{
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024be:	4c21      	ldr	r4, [pc, #132]	; (8002544 <z_init_static_threads+0x88>)
 80024c0:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 80024c2:	4d21      	ldr	r5, [pc, #132]	; (8002548 <z_init_static_threads+0x8c>)
 80024c4:	4626      	mov	r6, r4
 80024c6:	342c      	adds	r4, #44	; 0x2c
 80024c8:	42ae      	cmp	r6, r5
 80024ca:	d30b      	bcc.n	80024e4 <z_init_static_threads+0x28>
	_FOREACH_STATIC_THREAD(thread_data) {
 80024cc:	4c1d      	ldr	r4, [pc, #116]	; (8002544 <z_init_static_threads+0x88>)
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 80024ce:	260a      	movs	r6, #10
 80024d0:	4f1e      	ldr	r7, [pc, #120]	; (800254c <z_init_static_threads+0x90>)
	k_sched_lock();
 80024d2:	f000 f8a5 	bl	8002620 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80024d6:	42ac      	cmp	r4, r5
 80024d8:	d320      	bcc.n	800251c <z_init_static_threads+0x60>
}
 80024da:	b007      	add	sp, #28
 80024dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80024e0:	f000 b9dc 	b.w	800289c <k_sched_unlock>
		z_setup_new_thread(
 80024e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80024e8:	9305      	str	r3, [sp, #20]
 80024ea:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80024ee:	9304      	str	r3, [sp, #16]
 80024f0:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80024f4:	9303      	str	r3, [sp, #12]
 80024f6:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80024fa:	9302      	str	r3, [sp, #8]
 80024fc:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8002506:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
 8002510:	f7ff ff76 	bl	8002400 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8002514:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8002518:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800251a:	e7d3      	b.n	80024c4 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800251c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800251e:	1c53      	adds	r3, r2, #1
 8002520:	d009      	beq.n	8002536 <z_init_static_threads+0x7a>
					    K_MSEC(thread_data->init_delay));
 8002522:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			schedule_new_thread(thread_data->init_thread,
 8002526:	6820      	ldr	r0, [r4, #0]
 8002528:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800252c:	ea52 0103 	orrs.w	r1, r2, r3
 8002530:	d103      	bne.n	800253a <z_init_static_threads+0x7e>
	z_sched_start(thread);
 8002532:	f000 f94b 	bl	80027cc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002536:	342c      	adds	r4, #44	; 0x2c
 8002538:	e7cd      	b.n	80024d6 <z_init_static_threads+0x1a>
 800253a:	4639      	mov	r1, r7
 800253c:	3018      	adds	r0, #24
 800253e:	f000 fb41 	bl	8002bc4 <z_add_timeout>
 8002542:	e7f8      	b.n	8002536 <z_init_static_threads+0x7a>
 8002544:	08003d0c 	.word	0x08003d0c
 8002548:	08003d38 	.word	0x08003d38
 800254c:	08003617 	.word	0x08003617

08002550 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
 8002550:	89c3      	ldrh	r3, [r0, #14]
 8002552:	2b7f      	cmp	r3, #127	; 0x7f
 8002554:	d812      	bhi.n	800257c <sliceable+0x2c>
	int ret = slice_ticks;
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <sliceable+0x30>)
 8002558:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
 800255a:	b163      	cbz	r3, 8002576 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <sliceable+0x34>)
 800255e:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	db09      	blt.n	800257c <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
 8002568:	7b43      	ldrb	r3, [r0, #13]
 800256a:	06db      	lsls	r3, r3, #27
 800256c:	d106      	bne.n	800257c <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <sliceable+0x38>)
 8002570:	1ac3      	subs	r3, r0, r3
 8002572:	bf18      	it	ne
 8002574:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
 8002576:	f003 0001 	and.w	r0, r3, #1
 800257a:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
 800257c:	2300      	movs	r3, #0
 800257e:	e7fa      	b.n	8002576 <sliceable+0x26>
 8002580:	24000418 	.word	0x24000418
 8002584:	24000414 	.word	0x24000414
 8002588:	24000180 	.word	0x24000180

0800258c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <slice_timeout+0x14>)

	slice_expired[cpu] = true;
 800258e:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 8002590:	1ac0      	subs	r0, r0, r3
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <slice_timeout+0x18>)
 8002594:	10c0      	asrs	r0, r0, #3
 8002596:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <slice_timeout+0x1c>)
 800259a:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	24000280 	.word	0x24000280
 80025a4:	aaaaaaab 	.word	0xaaaaaaab
 80025a8:	24000422 	.word	0x24000422

080025ac <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
	int cpu = _current_cpu->id;
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <z_reset_time_slice+0x3c>)
{
 80025ae:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
 80025b0:	7c1e      	ldrb	r6, [r3, #16]
{
 80025b2:	4605      	mov	r5, r0

	z_abort_timeout(&slice_timeouts[cpu]);
 80025b4:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <z_reset_time_slice+0x40>)
 80025b6:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 80025ba:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80025be:	4620      	mov	r0, r4
 80025c0:	f001 f82d 	bl	800361e <z_abort_timeout>
	slice_expired[cpu] = false;
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <z_reset_time_slice+0x44>)
 80025c6:	2200      	movs	r2, #0
	if (sliceable(curr)) {
 80025c8:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
 80025ca:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
 80025cc:	f7ff ffc0 	bl	8002550 <sliceable>
 80025d0:	b148      	cbz	r0, 80025e6 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80025d4:	4620      	mov	r0, r4
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	3a01      	subs	r2, #1
	}
}
 80025dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80025e0:	17d3      	asrs	r3, r2, #31
 80025e2:	f000 baef 	b.w	8002bc4 <z_add_timeout>
}
 80025e6:	bd70      	pop	{r4, r5, r6, pc}
 80025e8:	240003f0 	.word	0x240003f0
 80025ec:	24000280 	.word	0x24000280
 80025f0:	24000422 	.word	0x24000422
 80025f4:	24000418 	.word	0x24000418
 80025f8:	0800258d 	.word	0x0800258d

080025fc <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80025fc:	b949      	cbnz	r1, 8002612 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025fe:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 8002602:	b930      	cbnz	r0, 8002612 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <z_reschedule+0x16>
	ret = arch_swap(key);
 800260e:	f7fe bcd9 	b.w	8000fc4 <arch_swap>
 8002612:	f381 8811 	msr	BASEPRI, r1
 8002616:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
 800261a:	4770      	bx	lr
 800261c:	240003f0 	.word	0x240003f0

08002620 <k_sched_lock>:
	__asm__ volatile(
 8002620:	f04f 0310 	mov.w	r3, #16
 8002624:	f3ef 8111 	mrs	r1, BASEPRI
 8002628:	f383 8812 	msr	BASEPRI_MAX, r3
 800262c:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <k_sched_lock+0x24>)
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	7bd3      	ldrb	r3, [r2, #15]
 8002636:	3b01      	subs	r3, #1
 8002638:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800263a:	f381 8811 	msr	BASEPRI, r1
 800263e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8002642:	4770      	bx	lr
 8002644:	240003f0 	.word	0x240003f0

08002648 <update_cache>:
{
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <update_cache+0x38>)
 800264e:	f000 ffaa 	bl	80035a6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8002652:	4d0c      	ldr	r5, [pc, #48]	; (8002684 <update_cache+0x3c>)
 8002654:	4604      	mov	r4, r0
 8002656:	b900      	cbnz	r0, 800265a <update_cache+0x12>
 8002658:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 800265a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 800265c:	b94a      	cbnz	r2, 8002672 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 800265e:	7b5a      	ldrb	r2, [r3, #13]
 8002660:	06d2      	lsls	r2, r2, #27
 8002662:	d106      	bne.n	8002672 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8002664:	69a2      	ldr	r2, [r4, #24]
 8002666:	b922      	cbnz	r2, 8002672 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8002668:	89da      	ldrh	r2, [r3, #14]
 800266a:	2a7f      	cmp	r2, #127	; 0x7f
 800266c:	d901      	bls.n	8002672 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 800266e:	616b      	str	r3, [r5, #20]
}
 8002670:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8002672:	429c      	cmp	r4, r3
 8002674:	d002      	beq.n	800267c <update_cache+0x34>
			z_reset_time_slice(thread);
 8002676:	4620      	mov	r0, r4
 8002678:	f7ff ff98 	bl	80025ac <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800267c:	616c      	str	r4, [r5, #20]
}
 800267e:	e7f7      	b.n	8002670 <update_cache+0x28>
 8002680:	24000408 	.word	0x24000408
 8002684:	240003f0 	.word	0x240003f0

08002688 <move_thread_to_end_of_prio_q>:
{
 8002688:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800268a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 800268e:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 8002690:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8002692:	2a00      	cmp	r2, #0
 8002694:	da04      	bge.n	80026a0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800269a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 800269c:	f000 ff5b 	bl	8003556 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80026a0:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 80026a2:	4a16      	ldr	r2, [pc, #88]	; (80026fc <move_thread_to_end_of_prio_q+0x74>)
 80026a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026a8:	4610      	mov	r0, r2
 80026aa:	734b      	strb	r3, [r1, #13]
 80026ac:	f850 3f18 	ldr.w	r3, [r0, #24]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80026b0:	4283      	cmp	r3, r0
 80026b2:	d01c      	beq.n	80026ee <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80026b4:	b1db      	cbz	r3, 80026ee <move_thread_to_end_of_prio_q+0x66>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 80026b6:	69d6      	ldr	r6, [r2, #28]
	int32_t b1 = thread_1->base.prio;
 80026b8:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 80026bc:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
 80026c0:	42a5      	cmp	r5, r4
 80026c2:	d00f      	beq.n	80026e4 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 80026c4:	1b64      	subs	r4, r4, r5
		if (z_sched_prio_cmp(thread, t) > 0) {
 80026c6:	2c00      	cmp	r4, #0
 80026c8:	dd0c      	ble.n	80026e4 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80026ca:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 80026cc:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 80026d0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80026d2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 80026d4:	6890      	ldr	r0, [r2, #8]
 80026d6:	1a43      	subs	r3, r0, r1
 80026d8:	4258      	negs	r0, r3
}
 80026da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80026de:	4158      	adcs	r0, r3
 80026e0:	f7ff bfb2 	b.w	8002648 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80026e4:	42b3      	cmp	r3, r6
 80026e6:	d002      	beq.n	80026ee <move_thread_to_end_of_prio_q+0x66>
 80026e8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e6      	bne.n	80026bc <move_thread_to_end_of_prio_q+0x34>
	sys_dnode_t *const tail = list->tail;
 80026ee:	69d3      	ldr	r3, [r2, #28]
	node->prev = tail;
 80026f0:	e9c1 0300 	strd	r0, r3, [r1]
	tail->next = node;
 80026f4:	6019      	str	r1, [r3, #0]
	list->tail = node;
 80026f6:	61d1      	str	r1, [r2, #28]
}
 80026f8:	e7ec      	b.n	80026d4 <move_thread_to_end_of_prio_q+0x4c>
 80026fa:	bf00      	nop
 80026fc:	240003f0 	.word	0x240003f0

08002700 <z_time_slice>:
{
 8002700:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8002702:	f04f 0310 	mov.w	r3, #16
 8002706:	f3ef 8511 	mrs	r5, BASEPRI
 800270a:	f383 8812 	msr	BASEPRI_MAX, r3
 800270e:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <z_time_slice+0x54>)
	if (pending_current == curr) {
 8002714:	4a10      	ldr	r2, [pc, #64]	; (8002758 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
 8002716:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
 8002718:	6810      	ldr	r0, [r2, #0]
 800271a:	42a0      	cmp	r0, r4
 800271c:	d106      	bne.n	800272c <z_time_slice+0x2c>
		z_reset_time_slice(curr);
 800271e:	f7ff ff45 	bl	80025ac <z_reset_time_slice>
	__asm__ volatile(
 8002722:	f385 8811 	msr	BASEPRI, r5
 8002726:	f3bf 8f6f 	isb	sy
}
 800272a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 800272c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 800272e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
 8002730:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <z_time_slice+0x5c>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f3      	beq.n	8002722 <z_time_slice+0x22>
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff ff08 	bl	8002550 <sliceable>
 8002740:	2800      	cmp	r0, #0
 8002742:	d0ee      	beq.n	8002722 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
 8002744:	7b63      	ldrb	r3, [r4, #13]
 8002746:	06db      	lsls	r3, r3, #27
 8002748:	d102      	bne.n	8002750 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
 800274a:	4620      	mov	r0, r4
 800274c:	f7ff ff9c 	bl	8002688 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
 8002750:	4620      	mov	r0, r4
 8002752:	e7e4      	b.n	800271e <z_time_slice+0x1e>
 8002754:	240003f0 	.word	0x240003f0
 8002758:	24000410 	.word	0x24000410
 800275c:	24000422 	.word	0x24000422

08002760 <ready_thread>:
{
 8002760:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8002762:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8002766:	7b43      	ldrb	r3, [r0, #13]
 8002768:	2a00      	cmp	r2, #0
 800276a:	db2b      	blt.n	80027c4 <ready_thread+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800276c:	06da      	lsls	r2, r3, #27
 800276e:	d129      	bne.n	80027c4 <ready_thread+0x64>
 8002770:	6982      	ldr	r2, [r0, #24]
 8002772:	bb3a      	cbnz	r2, 80027c4 <ready_thread+0x64>
	return list->head == list;
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8002776:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800277a:	4611      	mov	r1, r2
 800277c:	7343      	strb	r3, [r0, #13]
 800277e:	f851 3f18 	ldr.w	r3, [r1, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002782:	428b      	cmp	r3, r1
 8002784:	d018      	beq.n	80027b8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002786:	b1bb      	cbz	r3, 80027b8 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
 8002788:	69d6      	ldr	r6, [r2, #28]
	int32_t b1 = thread_1->base.prio;
 800278a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800278e:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
 8002792:	42a5      	cmp	r5, r4
 8002794:	d00b      	beq.n	80027ae <ready_thread+0x4e>
		return b2 - b1;
 8002796:	1b64      	subs	r4, r4, r5
		if (z_sched_prio_cmp(thread, t) > 0) {
 8002798:	2c00      	cmp	r4, #0
 800279a:	dd08      	ble.n	80027ae <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 800279c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800279e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 80027a2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80027a4:	6058      	str	r0, [r3, #4]
		update_cache(0);
 80027a6:	2000      	movs	r0, #0
}
 80027a8:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80027aa:	f7ff bf4d 	b.w	8002648 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80027ae:	429e      	cmp	r6, r3
 80027b0:	d002      	beq.n	80027b8 <ready_thread+0x58>
 80027b2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ea      	bne.n	800278e <ready_thread+0x2e>
	sys_dnode_t *const tail = list->tail;
 80027b8:	69d3      	ldr	r3, [r2, #28]
	node->prev = tail;
 80027ba:	e9c0 1300 	strd	r1, r3, [r0]
	tail->next = node;
 80027be:	6018      	str	r0, [r3, #0]
	list->tail = node;
 80027c0:	61d0      	str	r0, [r2, #28]
}
 80027c2:	e7f0      	b.n	80027a6 <ready_thread+0x46>
}
 80027c4:	bc70      	pop	{r4, r5, r6}
 80027c6:	4770      	bx	lr
 80027c8:	240003f0 	.word	0x240003f0

080027cc <z_sched_start>:
{
 80027cc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80027ce:	f04f 0210 	mov.w	r2, #16
 80027d2:	f3ef 8411 	mrs	r4, BASEPRI
 80027d6:	f382 8812 	msr	BASEPRI_MAX, r2
 80027da:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80027de:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80027e0:	0751      	lsls	r1, r2, #29
 80027e2:	d404      	bmi.n	80027ee <z_sched_start+0x22>
	__asm__ volatile(
 80027e4:	f384 8811 	msr	BASEPRI, r4
 80027e8:	f3bf 8f6f 	isb	sy
}
 80027ec:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80027ee:	f022 0204 	bic.w	r2, r2, #4
 80027f2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80027f4:	f7ff ffb4 	bl	8002760 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80027f8:	4621      	mov	r1, r4
 80027fa:	4802      	ldr	r0, [pc, #8]	; (8002804 <z_sched_start+0x38>)
}
 80027fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8002800:	f7ff befc 	b.w	80025fc <z_reschedule>
 8002804:	24000422 	.word	0x24000422

08002808 <unready_thread>:
{
 8002808:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800280a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 800280e:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 8002810:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8002812:	2a00      	cmp	r2, #0
 8002814:	da04      	bge.n	8002820 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800281a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800281c:	f000 fe9b 	bl	8003556 <sys_dlist_remove>
	update_cache(thread == _current);
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <unready_thread+0x2c>)
 8002822:	6898      	ldr	r0, [r3, #8]
 8002824:	1a43      	subs	r3, r0, r1
 8002826:	4258      	negs	r0, r3
 8002828:	4158      	adcs	r0, r3
}
 800282a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800282e:	f7ff bf0b 	b.w	8002648 <update_cache>
 8002832:	bf00      	nop
 8002834:	240003f0 	.word	0x240003f0

08002838 <z_impl_k_thread_suspend>:
{
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800283c:	3018      	adds	r0, #24
 800283e:	f000 feee 	bl	800361e <z_abort_timeout>
	__asm__ volatile(
 8002842:	f04f 0310 	mov.w	r3, #16
 8002846:	f3ef 8611 	mrs	r6, BASEPRI
 800284a:	f383 8812 	msr	BASEPRI_MAX, r3
 800284e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8002852:	f994 200d 	ldrsb.w	r2, [r4, #13]
 8002856:	7b63      	ldrb	r3, [r4, #13]
 8002858:	2a00      	cmp	r2, #0
 800285a:	da05      	bge.n	8002868 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800285c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002860:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002862:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002864:	f000 fe77 	bl	8003556 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002868:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 800286a:	4d0b      	ldr	r5, [pc, #44]	; (8002898 <z_impl_k_thread_suspend+0x60>)
 800286c:	f043 0310 	orr.w	r3, r3, #16
 8002870:	68a8      	ldr	r0, [r5, #8]
 8002872:	7363      	strb	r3, [r4, #13]
 8002874:	1b03      	subs	r3, r0, r4
 8002876:	4258      	negs	r0, r3
 8002878:	4158      	adcs	r0, r3
 800287a:	f7ff fee5 	bl	8002648 <update_cache>
	__asm__ volatile(
 800287e:	f386 8811 	msr	BASEPRI, r6
 8002882:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8002886:	68ab      	ldr	r3, [r5, #8]
 8002888:	42a3      	cmp	r3, r4
 800288a:	d103      	bne.n	8002894 <z_impl_k_thread_suspend+0x5c>
}
 800288c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8002890:	f000 be7f 	b.w	8003592 <z_reschedule_unlocked>
}
 8002894:	bd70      	pop	{r4, r5, r6, pc}
 8002896:	bf00      	nop
 8002898:	240003f0 	.word	0x240003f0

0800289c <k_sched_unlock>:
{
 800289c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800289e:	f04f 0310 	mov.w	r3, #16
 80028a2:	f3ef 8411 	mrs	r4, BASEPRI
 80028a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80028aa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <k_sched_unlock+0x34>)
		update_cache(0);
 80028b0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	7bd3      	ldrb	r3, [r2, #15]
 80028b6:	3301      	adds	r3, #1
 80028b8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80028ba:	f7ff fec5 	bl	8002648 <update_cache>
	__asm__ volatile(
 80028be:	f384 8811 	msr	BASEPRI, r4
 80028c2:	f3bf 8f6f 	isb	sy
}
 80028c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 80028ca:	f000 be62 	b.w	8003592 <z_reschedule_unlocked>
 80028ce:	bf00      	nop
 80028d0:	240003f0 	.word	0x240003f0

080028d4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80028d4:	4b02      	ldr	r3, [pc, #8]	; (80028e0 <z_sched_init+0xc>)
 80028d6:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
 80028da:	e9c3 2206 	strd	r2, r2, [r3, #24]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
 80028de:	4770      	bx	lr
 80028e0:	240003f0 	.word	0x240003f0

080028e4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80028e6:	f04f 0310 	mov.w	r3, #16
 80028ea:	f3ef 8511 	mrs	r5, BASEPRI
 80028ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80028f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 80028f6:	491a      	ldr	r1, [pc, #104]	; (8002960 <z_impl_k_yield+0x7c>)
 80028f8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80028fa:	7b43      	ldrb	r3, [r0, #13]
 80028fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002900:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002902:	f000 fe28 	bl	8003556 <sys_dlist_remove>
	}
	queue_thread(_current);
 8002906:	688b      	ldr	r3, [r1, #8]
	return list->head == list;
 8002908:	4608      	mov	r0, r1
	thread->base.thread_state |= _THREAD_QUEUED;
 800290a:	7b5a      	ldrb	r2, [r3, #13]
 800290c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002910:	735a      	strb	r2, [r3, #13]
 8002912:	f850 2f18 	ldr.w	r2, [r0, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002916:	4282      	cmp	r2, r0
 8002918:	d01c      	beq.n	8002954 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800291a:	b1da      	cbz	r2, 8002954 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 800291c:	69cf      	ldr	r7, [r1, #28]
	int32_t b1 = thread_1->base.prio;
 800291e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8002922:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 8002926:	42a6      	cmp	r6, r4
 8002928:	d00f      	beq.n	800294a <z_impl_k_yield+0x66>
		return b2 - b1;
 800292a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800292c:	2c00      	cmp	r4, #0
 800292e:	dd0c      	ble.n	800294a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 8002930:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8002932:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8002936:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8002938:	6053      	str	r3, [r2, #4]
	update_cache(1);
 800293a:	2001      	movs	r0, #1
 800293c:	f7ff fe84 	bl	8002648 <update_cache>
 8002940:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8002942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002946:	f7fe bb3d 	b.w	8000fc4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 800294a:	42ba      	cmp	r2, r7
 800294c:	d002      	beq.n	8002954 <z_impl_k_yield+0x70>
 800294e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002950:	2a00      	cmp	r2, #0
 8002952:	d1e6      	bne.n	8002922 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8002954:	69ca      	ldr	r2, [r1, #28]
	node->prev = tail;
 8002956:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 800295a:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800295c:	61cb      	str	r3, [r1, #28]
}
 800295e:	e7ec      	b.n	800293a <z_impl_k_yield+0x56>
 8002960:	240003f0 	.word	0x240003f0

08002964 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8002964:	ea50 0301 	orrs.w	r3, r0, r1
{
 8002968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296c:	4605      	mov	r5, r0
 800296e:	460e      	mov	r6, r1
	if (ticks == 0) {
 8002970:	d103      	bne.n	800297a <z_tick_sleep+0x16>
	z_impl_k_yield();
 8002972:	f7ff ffb7 	bl	80028e4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 8002976:	2000      	movs	r0, #0
 8002978:	e033      	b.n	80029e2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 800297a:	f06f 0401 	mvn.w	r4, #1
 800297e:	f04f 33ff 	mov.w	r3, #4294967295
 8002982:	1a24      	subs	r4, r4, r0
 8002984:	eb63 0301 	sbc.w	r3, r3, r1
 8002988:	2c01      	cmp	r4, #1
 800298a:	f173 0300 	sbcs.w	r3, r3, #0
 800298e:	da02      	bge.n	8002996 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8002990:	f000 fe5b 	bl	800364a <sys_clock_tick_get_32>
 8002994:	182c      	adds	r4, r5, r0
 8002996:	f04f 0310 	mov.w	r3, #16
 800299a:	f3ef 8811 	mrs	r8, BASEPRI
 800299e:	f383 8812 	msr	BASEPRI_MAX, r3
 80029a2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 80029a6:	4f10      	ldr	r7, [pc, #64]	; (80029e8 <z_tick_sleep+0x84>)
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <z_tick_sleep+0x88>)
 80029aa:	68b8      	ldr	r0, [r7, #8]
 80029ac:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 80029ae:	f7ff ff2b 	bl	8002808 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80029b2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80029b4:	462a      	mov	r2, r5
 80029b6:	490e      	ldr	r1, [pc, #56]	; (80029f0 <z_tick_sleep+0x8c>)
 80029b8:	4633      	mov	r3, r6
 80029ba:	3018      	adds	r0, #24
 80029bc:	f000 f902 	bl	8002bc4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	4640      	mov	r0, r8
 80029c4:	7b53      	ldrb	r3, [r2, #13]
 80029c6:	f043 0310 	orr.w	r3, r3, #16
 80029ca:	7353      	strb	r3, [r2, #13]
 80029cc:	f7fe fafa 	bl	8000fc4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80029d0:	f000 fe3b 	bl	800364a <sys_clock_tick_get_32>
 80029d4:	1a20      	subs	r0, r4, r0
 80029d6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 80029da:	2801      	cmp	r0, #1
 80029dc:	f173 0300 	sbcs.w	r3, r3, #0
 80029e0:	dbc9      	blt.n	8002976 <z_tick_sleep+0x12>
}
 80029e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029e6:	bf00      	nop
 80029e8:	240003f0 	.word	0x240003f0
 80029ec:	24000410 	.word	0x24000410
 80029f0:	08003617 	.word	0x08003617

080029f4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80029f4:	f1b1 3fff 	cmp.w	r1, #4294967295
 80029f8:	bf08      	it	eq
 80029fa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 80029fe:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002a00:	d106      	bne.n	8002a10 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <z_impl_k_sleep+0x2c>)
 8002a04:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8002a06:	f7ff ff17 	bl	8002838 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8002a0a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8002a0e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8002a10:	f7ff ffa8 	bl	8002964 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8002a14:	220a      	movs	r2, #10
 8002a16:	2300      	movs	r3, #0
 8002a18:	17c1      	asrs	r1, r0, #31
 8002a1a:	f7fd fc3d 	bl	8000298 <__aeabi_uldivmod>
	return ret;
 8002a1e:	e7f6      	b.n	8002a0e <z_impl_k_sleep+0x1a>
 8002a20:	240003f0 	.word	0x240003f0

08002a24 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8002a24:	4b01      	ldr	r3, [pc, #4]	; (8002a2c <z_impl_z_current_get+0x8>)
 8002a26:	6898      	ldr	r0, [r3, #8]
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	240003f0 	.word	0x240003f0

08002a30 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8002a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a34:	4604      	mov	r4, r0
 8002a36:	f04f 0310 	mov.w	r3, #16
 8002a3a:	f3ef 8611 	mrs	r6, BASEPRI
 8002a3e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002a42:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 8002a46:	7b03      	ldrb	r3, [r0, #12]
 8002a48:	07d9      	lsls	r1, r3, #31
 8002a4a:	d50b      	bpl.n	8002a64 <z_thread_abort+0x34>
	__asm__ volatile(
 8002a4c:	f386 8811 	msr	BASEPRI, r6
 8002a50:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8002a54:	4040      	eors	r0, r0
 8002a56:	f380 8811 	msr	BASEPRI, r0
 8002a5a:	f04f 0004 	mov.w	r0, #4
 8002a5e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8002a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8002a64:	7b43      	ldrb	r3, [r0, #13]
 8002a66:	071a      	lsls	r2, r3, #28
 8002a68:	d504      	bpl.n	8002a74 <z_thread_abort+0x44>
 8002a6a:	f386 8811 	msr	BASEPRI, r6
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	e7f5      	b.n	8002a60 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002a74:	f023 0220 	bic.w	r2, r3, #32
 8002a78:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8002a7c:	09d2      	lsrs	r2, r2, #7
 8002a7e:	d120      	bne.n	8002ac2 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8002a80:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8002a82:	68a3      	ldr	r3, [r4, #8]
 8002a84:	b113      	cbz	r3, 8002a8c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 8002a86:	4620      	mov	r0, r4
 8002a88:	f000 fd6d 	bl	8003566 <unpend_thread_no_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8002a8c:	f104 0758 	add.w	r7, r4, #88	; 0x58
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8002a90:	f04f 0800 	mov.w	r8, #0
	return z_abort_timeout(&thread->base.timeout);
 8002a94:	f104 0018 	add.w	r0, r4, #24
 8002a98:	f000 fdc1 	bl	800361e <z_abort_timeout>
	return list->head == list;
 8002a9c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002a9e:	42bd      	cmp	r5, r7
 8002aa0:	d000      	beq.n	8002aa4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8002aa2:	b9b5      	cbnz	r5, 8002ad2 <z_thread_abort+0xa2>
		update_cache(1);
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f7ff fdcf 	bl	8002648 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <z_thread_abort+0xbc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	42a3      	cmp	r3, r4
 8002ab0:	d1db      	bne.n	8002a6a <z_thread_abort+0x3a>
 8002ab2:	f3ef 8305 	mrs	r3, IPSR
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1d7      	bne.n	8002a6a <z_thread_abort+0x3a>
 8002aba:	4630      	mov	r0, r6
 8002abc:	f7fe fa82 	bl	8000fc4 <arch_swap>
	return ret;
 8002ac0:	e7d3      	b.n	8002a6a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8002ac2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8002ac6:	f043 0308 	orr.w	r3, r3, #8
 8002aca:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8002acc:	f000 fd43 	bl	8003556 <sys_dlist_remove>
}
 8002ad0:	e7d7      	b.n	8002a82 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	f000 fd47 	bl	8003566 <unpend_thread_no_timeout>
 8002ad8:	f105 0018 	add.w	r0, r5, #24
 8002adc:	f000 fd9f 	bl	800361e <z_abort_timeout>
		ready_thread(thread);
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 8002ae6:	f7ff fe3b 	bl	8002760 <ready_thread>
 8002aea:	e7d7      	b.n	8002a9c <z_thread_abort+0x6c>
 8002aec:	240003f0 	.word	0x240003f0

08002af0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <z_data_copy+0x28>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <z_data_copy+0x2c>)
 8002af4:	490a      	ldr	r1, [pc, #40]	; (8002b20 <z_data_copy+0x30>)
 8002af6:	1a12      	subs	r2, r2, r0
{
 8002af8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8002afa:	f000 fd1b 	bl	8003534 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8002afe:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <z_data_copy+0x34>)
 8002b00:	4909      	ldr	r1, [pc, #36]	; (8002b28 <z_data_copy+0x38>)
 8002b02:	480a      	ldr	r0, [pc, #40]	; (8002b2c <z_data_copy+0x3c>)
 8002b04:	f000 fd16 	bl	8003534 <z_early_memcpy>
	z_early_memcpy(&__itcm_start, &__itcm_load_start,
		       (uintptr_t) &__itcm_size);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
		       __dtcm_data_end - __dtcm_data_start);
 8002b08:	4809      	ldr	r0, [pc, #36]	; (8002b30 <z_data_copy+0x40>)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <z_data_copy+0x44>)
 8002b0c:	490a      	ldr	r1, [pc, #40]	; (8002b38 <z_data_copy+0x48>)
 8002b0e:	1a12      	subs	r2, r2, r0
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8002b10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 8002b14:	f000 bd0e 	b.w	8003534 <z_early_memcpy>
 8002b18:	24000000 	.word	0x24000000
 8002b1c:	2400007e 	.word	0x2400007e
 8002b20:	08004200 	.word	0x08004200
 8002b24:	00000000 	.word	0x00000000
 8002b28:	08004200 	.word	0x08004200
 8002b2c:	24000000 	.word	0x24000000
 8002b30:	20000000 	.word	0x20000000
 8002b34:	20000000 	.word	0x20000000
 8002b38:	0800427e 	.word	0x0800427e

08002b3c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <elapsed+0x10>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b90b      	cbnz	r3, 8002b46 <elapsed+0xa>
 8002b42:	f7ff bac7 	b.w	80020d4 <sys_clock_elapsed>
}
 8002b46:	2000      	movs	r0, #0
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	2400041c 	.word	0x2400041c

08002b50 <next_timeout>:
	return list->head == list;
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <next_timeout+0x38>)

static int32_t next_timeout(void)
{
 8002b52:	b510      	push	{r4, lr}
 8002b54:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002b56:	429c      	cmp	r4, r3
 8002b58:	bf08      	it	eq
 8002b5a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8002b5c:	f7ff ffee 	bl	8002b3c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 8002b60:	b174      	cbz	r4, 8002b80 <next_timeout+0x30>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8002b62:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002b66:	1a1b      	subs	r3, r3, r0
 8002b68:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 8002b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b70:	f170 0200 	sbcs.w	r2, r0, #0
 8002b74:	da04      	bge.n	8002b80 <next_timeout+0x30>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 8002b76:	2800      	cmp	r0, #0
 8002b78:	bfac      	ite	ge
 8002b7a:	4618      	movge	r0, r3
 8002b7c:	2000      	movlt	r0, #0
	}

	return ret;
}
 8002b7e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 8002b80:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
 8002b84:	e7fb      	b.n	8002b7e <next_timeout+0x2e>
 8002b86:	bf00      	nop
 8002b88:	24000038 	.word	0x24000038

08002b8c <remove_timeout>:
{
 8002b8c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002b8e:	b170      	cbz	r0, 8002bae <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <remove_timeout+0x34>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4298      	cmp	r0, r3
 8002b96:	d00a      	beq.n	8002bae <remove_timeout+0x22>
 8002b98:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 8002b9a:	b143      	cbz	r3, 8002bae <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8002b9c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8002ba0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8002ba4:	1912      	adds	r2, r2, r4
 8002ba6:	eb41 0105 	adc.w	r1, r1, r5
 8002baa:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8002bae:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 8002bb2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8002bb4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002bb6:	2300      	movs	r3, #0
	node->prev = NULL;
 8002bb8:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002bbc:	bd30      	pop	{r4, r5, pc}
 8002bbe:	bf00      	nop
 8002bc0:	24000038 	.word	0x24000038

08002bc4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	bf08      	it	eq
 8002bca:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8002bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	461f      	mov	r7, r3
 8002bd4:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002bd6:	d062      	beq.n	8002c9e <z_add_timeout+0xda>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8002bd8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8002bda:	f04f 0310 	mov.w	r3, #16
 8002bde:	f3ef 8611 	mrs	r6, BASEPRI
 8002be2:	f383 8812 	msr	BASEPRI_MAX, r3
 8002be6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8002bea:	f06f 0201 	mvn.w	r2, #1
 8002bee:	f04f 3cff 	mov.w	ip, #4294967295
 8002bf2:	1b53      	subs	r3, r2, r5
 8002bf4:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	db1b      	blt.n	8002c34 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8002bfc:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <z_add_timeout+0xdc>)
 8002bfe:	e9d3 1300 	ldrd	r1, r3, [r3]
 8002c02:	1a52      	subs	r2, r2, r1
 8002c04:	eb6c 0303 	sbc.w	r3, ip, r3
 8002c08:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 8002c0a:	eb63 0307 	sbc.w	r3, r3, r7
 8002c0e:	2d01      	cmp	r5, #1
 8002c10:	f173 0200 	sbcs.w	r2, r3, #0
 8002c14:	bfbc      	itt	lt
 8002c16:	2501      	movlt	r5, #1
 8002c18:	2300      	movlt	r3, #0
 8002c1a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 8002c1e:	4821      	ldr	r0, [pc, #132]	; (8002ca4 <z_add_timeout+0xe0>)
	sys_dnode_t *const tail = list->tail;
 8002c20:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002c24:	4283      	cmp	r3, r0
 8002c26:	d118      	bne.n	8002c5a <z_add_timeout+0x96>
	node->prev = tail;
 8002c28:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8002c2c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8002c30:	6044      	str	r4, [r0, #4]
}
 8002c32:	e026      	b.n	8002c82 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8002c34:	f7ff ff82 	bl	8002b3c <elapsed>
 8002c38:	3501      	adds	r5, #1
 8002c3a:	f147 0700 	adc.w	r7, r7, #0
 8002c3e:	182d      	adds	r5, r5, r0
 8002c40:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 8002c44:	e9c4 5704 	strd	r5, r7, [r4, #16]
 8002c48:	e7e9      	b.n	8002c1e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 8002c4a:	1a52      	subs	r2, r2, r1
 8002c4c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8002c50:	459c      	cmp	ip, r3
 8002c52:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8002c56:	d0e7      	beq.n	8002c28 <z_add_timeout+0x64>
 8002c58:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0e4      	beq.n	8002c28 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 8002c5e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 8002c62:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 8002c66:	428a      	cmp	r2, r1
 8002c68:	eb75 0e07 	sbcs.w	lr, r5, r7
 8002c6c:	daed      	bge.n	8002c4a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 8002c6e:	1a8a      	subs	r2, r1, r2
 8002c70:	eb67 0505 	sbc.w	r5, r7, r5
 8002c74:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8002c78:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8002c7a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8002c7e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8002c80:	605c      	str	r4, [r3, #4]
	return list->head == list;
 8002c82:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002c84:	4283      	cmp	r3, r0
 8002c86:	d006      	beq.n	8002c96 <z_add_timeout+0xd2>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8002c88:	429c      	cmp	r4, r3
 8002c8a:	d104      	bne.n	8002c96 <z_add_timeout+0xd2>
			sys_clock_set_timeout(next_timeout(), false);
 8002c8c:	f7ff ff60 	bl	8002b50 <next_timeout>
 8002c90:	2100      	movs	r1, #0
 8002c92:	f7ff f9af 	bl	8001ff4 <sys_clock_set_timeout>
	__asm__ volatile(
 8002c96:	f386 8811 	msr	BASEPRI, r6
 8002c9a:	f3bf 8f6f 	isb	sy
		}
	}
}
 8002c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ca0:	24000298 	.word	0x24000298
 8002ca4:	24000038 	.word	0x24000038

08002ca8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
 8002ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
 8002cac:	f04f 0310 	mov.w	r3, #16
 8002cb0:	f3ef 8811 	mrs	r8, BASEPRI
 8002cb4:	f383 8812 	msr	BASEPRI_MAX, r3
 8002cb8:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8002cbc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8002d70 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8002cc0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002d74 <sys_clock_announce+0xcc>
 8002cc4:	4d2c      	ldr	r5, [pc, #176]	; (8002d78 <sys_clock_announce+0xd0>)
 8002cc6:	f8c9 0000 	str.w	r0, [r9]
 8002cca:	f8da 0000 	ldr.w	r0, [sl]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002cce:	4550      	cmp	r0, sl
 8002cd0:	d034      	beq.n	8002d3c <sys_clock_announce+0x94>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
 8002cd2:	2600      	movs	r6, #0
 8002cd4:	2700      	movs	r7, #0
	     (t != NULL) && (t->dticks <= announce_remaining);
 8002cd6:	f8d9 2000 	ldr.w	r2, [r9]
		curr_tick += dt;
 8002cda:	e9d5 1c00 	ldrd	r1, ip, [r5]
	for (t = first();
 8002cde:	b368      	cbz	r0, 8002d3c <sys_clock_announce+0x94>
	     (t != NULL) && (t->dticks <= announce_remaining);
 8002ce0:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 8002ce4:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 8002ce8:	42a2      	cmp	r2, r4
 8002cea:	eb7e 0b03 	sbcs.w	fp, lr, r3
 8002cee:	da05      	bge.n	8002cfc <sys_clock_announce+0x54>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 8002cf0:	1aa4      	subs	r4, r4, r2
 8002cf2:	eb63 030e 	sbc.w	r3, r3, lr
 8002cf6:	e9c0 4304 	strd	r4, r3, [r0, #16]
 8002cfa:	e01f      	b.n	8002d3c <sys_clock_announce+0x94>
		curr_tick += dt;
 8002cfc:	1861      	adds	r1, r4, r1
 8002cfe:	eb4c 73e4 	adc.w	r3, ip, r4, asr #31
		t->dticks = 0;
 8002d02:	e9c0 6704 	strd	r6, r7, [r0, #16]
		curr_tick += dt;
 8002d06:	e9c5 1300 	strd	r1, r3, [r5]
		remove_timeout(t);
 8002d0a:	f7ff ff3f 	bl	8002b8c <remove_timeout>
	__asm__ volatile(
 8002d0e:	f388 8811 	msr	BASEPRI, r8
 8002d12:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002d16:	6883      	ldr	r3, [r0, #8]
 8002d18:	4798      	blx	r3
	__asm__ volatile(
 8002d1a:	f04f 0310 	mov.w	r3, #16
 8002d1e:	f3ef 8811 	mrs	r8, BASEPRI
 8002d22:	f383 8812 	msr	BASEPRI_MAX, r3
 8002d26:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8002d2a:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
 8002d2e:	f8da 0000 	ldr.w	r0, [sl]
 8002d32:	1b1b      	subs	r3, r3, r4
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002d34:	4550      	cmp	r0, sl
 8002d36:	f8c9 3000 	str.w	r3, [r9]
 8002d3a:	d1cc      	bne.n	8002cd6 <sys_clock_announce+0x2e>
	}

	curr_tick += announce_remaining;
 8002d3c:	f8d9 1000 	ldr.w	r1, [r9]
	announce_remaining = 0;
 8002d40:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8002d42:	e9d5 3200 	ldrd	r3, r2, [r5]
	announce_remaining = 0;
 8002d46:	f8c9 4000 	str.w	r4, [r9]
	curr_tick += announce_remaining;
 8002d4a:	185b      	adds	r3, r3, r1
 8002d4c:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8002d50:	e9c5 3200 	strd	r3, r2, [r5]

	sys_clock_set_timeout(next_timeout(), false);
 8002d54:	f7ff fefc 	bl	8002b50 <next_timeout>
 8002d58:	4621      	mov	r1, r4
 8002d5a:	f7ff f94b 	bl	8001ff4 <sys_clock_set_timeout>
	__asm__ volatile(
 8002d5e:	f388 8811 	msr	BASEPRI, r8
 8002d62:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
 8002d66:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
 8002d6a:	f7ff bcc9 	b.w	8002700 <z_time_slice>
 8002d6e:	bf00      	nop
 8002d70:	24000038 	.word	0x24000038
 8002d74:	2400041c 	.word	0x2400041c
 8002d78:	24000298 	.word	0x24000298

08002d7c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8002d7c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002d7e:	f04f 0310 	mov.w	r3, #16
 8002d82:	f3ef 8411 	mrs	r4, BASEPRI
 8002d86:	f383 8812 	msr	BASEPRI_MAX, r3
 8002d8a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 8002d8e:	f7ff fed5 	bl	8002b3c <elapsed>
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <sys_clock_tick_get+0x30>)
 8002d94:	4601      	mov	r1, r0
 8002d96:	e9d3 0300 	ldrd	r0, r3, [r3]
 8002d9a:	1808      	adds	r0, r1, r0
 8002d9c:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
 8002da0:	f384 8811 	msr	BASEPRI, r4
 8002da4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	bf00      	nop
 8002dac:	24000298 	.word	0x24000298

08002db0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8002db0:	4801      	ldr	r0, [pc, #4]	; (8002db8 <boot_banner+0x8>)
 8002db2:	f000 b806 	b.w	8002dc2 <printk>
 8002db6:	bf00      	nop
 8002db8:	080041d1 	.word	0x080041d1

08002dbc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8002dbc:	4770      	bx	lr

08002dbe <arch_printk_char_out>:
}
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	4770      	bx	lr

08002dc2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 8002dc2:	b40f      	push	{r0, r1, r2, r3}
 8002dc4:	b507      	push	{r0, r1, r2, lr}
 8002dc6:	a904      	add	r1, sp, #16
 8002dc8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 8002dcc:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 8002dce:	f7fd fc45 	bl	800065c <vprintk>

	va_end(ap);
}
 8002dd2:	b003      	add	sp, #12
 8002dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dd8:	b004      	add	sp, #16
 8002dda:	4770      	bx	lr

08002ddc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8002ddc:	4604      	mov	r4, r0
 8002dde:	4608      	mov	r0, r1
 8002de0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8002de2:	461a      	mov	r2, r3
{
 8002de4:	b508      	push	{r3, lr}
	entry(p1, p2, p3);
 8002de6:	47a0      	blx	r4
	return z_impl_z_current_get();
 8002de8:	f7ff fe1c 	bl	8002a24 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8002dec:	f7fe fb12 	bl	8001414 <z_impl_k_thread_abort>

08002df0 <encode_uint>:
{
 8002df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df4:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
 8002df6:	78d3      	ldrb	r3, [r2, #3]
{
 8002df8:	4680      	mov	r8, r0
 8002dfa:	460f      	mov	r7, r1
	switch (specifier) {
 8002dfc:	2b6f      	cmp	r3, #111	; 0x6f
{
 8002dfe:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8002e00:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 8002e04:	d029      	beq.n	8002e5a <encode_uint+0x6a>
 8002e06:	d824      	bhi.n	8002e52 <encode_uint+0x62>
		return 16;
 8002e08:	2b58      	cmp	r3, #88	; 0x58
 8002e0a:	bf14      	ite	ne
 8002e0c:	260a      	movne	r6, #10
 8002e0e:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 8002e10:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 8002e14:	4632      	mov	r2, r6
 8002e16:	2300      	movs	r3, #0
 8002e18:	4640      	mov	r0, r8
 8002e1a:	4639      	mov	r1, r7
 8002e1c:	f7fd fa3c 	bl	8000298 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002e20:	2a09      	cmp	r2, #9
 8002e22:	b2d4      	uxtb	r4, r2
 8002e24:	d81e      	bhi.n	8002e64 <encode_uint+0x74>
 8002e26:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8002e28:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002e2a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8002e2c:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002e30:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8002e34:	d301      	bcc.n	8002e3a <encode_uint+0x4a>
 8002e36:	45d1      	cmp	r9, sl
 8002e38:	d811      	bhi.n	8002e5e <encode_uint+0x6e>
	if (conv->flag_hash) {
 8002e3a:	782b      	ldrb	r3, [r5, #0]
 8002e3c:	069b      	lsls	r3, r3, #26
 8002e3e:	d505      	bpl.n	8002e4c <encode_uint+0x5c>
		if (radix == 8) {
 8002e40:	2e08      	cmp	r6, #8
 8002e42:	d115      	bne.n	8002e70 <encode_uint+0x80>
			conv->altform_0 = true;
 8002e44:	78ab      	ldrb	r3, [r5, #2]
 8002e46:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 8002e4a:	70ab      	strb	r3, [r5, #2]
}
 8002e4c:	4648      	mov	r0, r9
 8002e4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8002e52:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8002e56:	2b70      	cmp	r3, #112	; 0x70
 8002e58:	e7d7      	b.n	8002e0a <encode_uint+0x1a>
	switch (specifier) {
 8002e5a:	2608      	movs	r6, #8
 8002e5c:	e7d8      	b.n	8002e10 <encode_uint+0x20>
		value /= radix;
 8002e5e:	4680      	mov	r8, r0
 8002e60:	460f      	mov	r7, r1
 8002e62:	e7d7      	b.n	8002e14 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002e64:	f1bb 0f19 	cmp.w	fp, #25
 8002e68:	bf94      	ite	ls
 8002e6a:	3437      	addls	r4, #55	; 0x37
 8002e6c:	3457      	addhi	r4, #87	; 0x57
 8002e6e:	e7db      	b.n	8002e28 <encode_uint+0x38>
		} else if (radix == 16) {
 8002e70:	2e10      	cmp	r6, #16
 8002e72:	d1eb      	bne.n	8002e4c <encode_uint+0x5c>
			conv->altform_0c = true;
 8002e74:	78ab      	ldrb	r3, [r5, #2]
 8002e76:	f043 0310 	orr.w	r3, r3, #16
 8002e7a:	e7e6      	b.n	8002e4a <encode_uint+0x5a>

08002e7c <outs>:
{
 8002e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e80:	4607      	mov	r7, r0
 8002e82:	4688      	mov	r8, r1
 8002e84:	4615      	mov	r5, r2
 8002e86:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002e88:	4614      	mov	r4, r2
 8002e8a:	42b4      	cmp	r4, r6
 8002e8c:	eba4 0005 	sub.w	r0, r4, r5
 8002e90:	d302      	bcc.n	8002e98 <outs+0x1c>
 8002e92:	b93e      	cbnz	r6, 8002ea4 <outs+0x28>
 8002e94:	7823      	ldrb	r3, [r4, #0]
 8002e96:	b12b      	cbz	r3, 8002ea4 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8002e98:	4641      	mov	r1, r8
 8002e9a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002e9e:	47b8      	blx	r7
		if (rc < 0) {
 8002ea0:	2800      	cmp	r0, #0
 8002ea2:	daf2      	bge.n	8002e8a <outs+0xe>
}
 8002ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002ea8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8002ea8:	4770      	bx	lr

08002eaa <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8002eaa:	2000      	movs	r0, #0
 8002eac:	4770      	bx	lr

08002eae <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002eae:	f000 bb24 	b.w	80034fa <z_fatal_error>

08002eb2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8002eb2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002eb4:	6800      	ldr	r0, [r0, #0]
 8002eb6:	f000 bb20 	b.w	80034fa <z_fatal_error>

08002eba <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002eba:	2100      	movs	r1, #0
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f7ff bff6 	b.w	8002eae <z_arm_fatal_error>

08002ec2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8002ec2:	b508      	push	{r3, lr}
	handler();
 8002ec4:	f7fe f856 	bl	8000f74 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002ecc:	f7fe b924 	b.w	8001118 <z_arm_exc_exit>

08002ed0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8002ed0:	4603      	mov	r3, r0
	size_t n = 0;
 8002ed2:	2000      	movs	r0, #0

	while (*s != '\0') {
 8002ed4:	5c1a      	ldrb	r2, [r3, r0]
 8002ed6:	b902      	cbnz	r2, 8002eda <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8002ed8:	4770      	bx	lr
		n++;
 8002eda:	3001      	adds	r0, #1
 8002edc:	e7fa      	b.n	8002ed4 <strlen+0x4>

08002ede <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002ede:	1e43      	subs	r3, r0, #1
 8002ee0:	440a      	add	r2, r1
{
 8002ee2:	b510      	push	{r4, lr}
	while (n > 0) {
 8002ee4:	4291      	cmp	r1, r2
 8002ee6:	d100      	bne.n	8002eea <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002ee8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8002eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002eee:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002ef2:	e7f7      	b.n	8002ee4 <memcpy+0x6>

08002ef4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002ef4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8002ef6:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8002ef8:	4603      	mov	r3, r0
	while (n > 0) {
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d100      	bne.n	8002f00 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002efe:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8002f00:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002f04:	e7f9      	b.n	8002efa <memset+0x6>

08002f06 <_stdout_hook_default>:
}
 8002f06:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0a:	4770      	bx	lr

08002f0c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8002f0c:	4603      	mov	r3, r0
	size_t n = 0;
 8002f0e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8002f10:	5c1a      	ldrb	r2, [r3, r0]
 8002f12:	b10a      	cbz	r2, 8002f18 <strnlen+0xc>
 8002f14:	4288      	cmp	r0, r1
 8002f16:	d100      	bne.n	8002f1a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8002f18:	4770      	bx	lr
		n++;
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	e7f8      	b.n	8002f10 <strnlen+0x4>

08002f1e <stm32_exti_init>:
{
 8002f1e:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 8002f20:	2206      	movs	r2, #6
 8002f22:	2101      	movs	r1, #1
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fe fb7f 	bl	8001628 <stm32_fill_irq_table>
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2006      	movs	r0, #6
 8002f2e:	4611      	mov	r1, r2
 8002f30:	f7fe f80a 	bl	8000f48 <z_arm_irq_priority_set>
 8002f34:	2101      	movs	r1, #1
 8002f36:	2207      	movs	r2, #7
 8002f38:	4608      	mov	r0, r1
 8002f3a:	f7fe fb75 	bl	8001628 <stm32_fill_irq_table>
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2007      	movs	r0, #7
 8002f42:	4611      	mov	r1, r2
 8002f44:	f7fe f800 	bl	8000f48 <z_arm_irq_priority_set>
 8002f48:	2208      	movs	r2, #8
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	2002      	movs	r0, #2
 8002f4e:	f7fe fb6b 	bl	8001628 <stm32_fill_irq_table>
 8002f52:	2200      	movs	r2, #0
 8002f54:	2008      	movs	r0, #8
 8002f56:	4611      	mov	r1, r2
 8002f58:	f7fd fff6 	bl	8000f48 <z_arm_irq_priority_set>
 8002f5c:	2209      	movs	r2, #9
 8002f5e:	2101      	movs	r1, #1
 8002f60:	2003      	movs	r0, #3
 8002f62:	f7fe fb61 	bl	8001628 <stm32_fill_irq_table>
 8002f66:	2200      	movs	r2, #0
 8002f68:	2009      	movs	r0, #9
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	f7fd ffec 	bl	8000f48 <z_arm_irq_priority_set>
 8002f70:	220a      	movs	r2, #10
 8002f72:	2101      	movs	r1, #1
 8002f74:	2004      	movs	r0, #4
 8002f76:	f7fe fb57 	bl	8001628 <stm32_fill_irq_table>
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	200a      	movs	r0, #10
 8002f7e:	4611      	mov	r1, r2
 8002f80:	f7fd ffe2 	bl	8000f48 <z_arm_irq_priority_set>
 8002f84:	2105      	movs	r1, #5
 8002f86:	2217      	movs	r2, #23
 8002f88:	4608      	mov	r0, r1
 8002f8a:	f7fe fb4d 	bl	8001628 <stm32_fill_irq_table>
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2017      	movs	r0, #23
 8002f92:	4611      	mov	r1, r2
 8002f94:	f7fd ffd8 	bl	8000f48 <z_arm_irq_priority_set>
 8002f98:	2228      	movs	r2, #40	; 0x28
 8002f9a:	2106      	movs	r1, #6
 8002f9c:	200a      	movs	r0, #10
 8002f9e:	f7fe fb43 	bl	8001628 <stm32_fill_irq_table>
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2028      	movs	r0, #40	; 0x28
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	f7fd ffce 	bl	8000f48 <z_arm_irq_priority_set>
}
 8002fac:	2000      	movs	r0, #0
 8002fae:	bd08      	pop	{r3, pc}

08002fb0 <stm32_exti_disable>:
	if (line < 32) {
 8002fb0:	281f      	cmp	r0, #31
 8002fb2:	dc0a      	bgt.n	8002fca <stm32_exti_disable+0x1a>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
		LL_EXTI_DisableIT_0_31(BIT((uint32_t)line));
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8002fbe:	fa02 f000 	lsl.w	r0, r2, r0
 8002fc2:	ea23 0000 	bic.w	r0, r3, r0
 8002fc6:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
}
 8002fca:	4770      	bx	lr

08002fcc <stm32_exti_trigger>:
	switch (trigger) {
 8002fcc:	2903      	cmp	r1, #3
 8002fce:	d810      	bhi.n	8002ff2 <stm32_exti_trigger+0x26>
 8002fd0:	e8df f001 	tbb	[pc, r1]
 8002fd4:	26191002 	.word	0x26191002
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
		LL_EXTI_DisableRisingTrig_0_31(BIT((uint32_t)line));
 8002fdc:	2201      	movs	r2, #1
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	fa02 f000 	lsl.w	r0, r2, r0
 8002fe4:	ea21 0100 	bic.w	r1, r1, r0
 8002fe8:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002ff0:	6058      	str	r0, [r3, #4]
}
 8002ff2:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4302      	orrs	r2, r0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e7f1      	b.n	8002fea <stm32_exti_trigger+0x1e>
		LL_EXTI_EnableFallingTrig_0_31(BIT((uint32_t)line));
 8003006:	2301      	movs	r3, #1
 8003008:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800300c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4302      	orrs	r2, r0
 8003014:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	ea22 0000 	bic.w	r0, r2, r0
 800301c:	6018      	str	r0, [r3, #0]
}
 800301e:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 8003020:	2301      	movs	r3, #1
 8003022:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4302      	orrs	r2, r0
 800302e:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4310      	orrs	r0, r2
 8003034:	e7dc      	b.n	8002ff0 <stm32_exti_trigger+0x24>

08003036 <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8003036:	680b      	ldr	r3, [r1, #0]
 8003038:	f1a3 02d4 	sub.w	r2, r3, #212	; 0xd4
 800303c:	2a20      	cmp	r2, #32
 800303e:	d809      	bhi.n	8003054 <stm32_clock_control_on+0x1e>
	sys_set_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 8003040:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8003044:	6849      	ldr	r1, [r1, #4]
	return 0;
 8003046:	2000      	movs	r0, #0
	sys_set_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 8003048:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 800304c:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
	return 0;
 8003052:	4770      	bx	lr
		return -ENOTSUP;
 8003054:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003058:	4770      	bx	lr

0800305a <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 800305a:	680b      	ldr	r3, [r1, #0]
 800305c:	f1a3 02d4 	sub.w	r2, r3, #212	; 0xd4
 8003060:	2a20      	cmp	r2, #32
 8003062:	d80a      	bhi.n	800307a <stm32_clock_control_off+0x20>
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 8003064:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
	*(volatile uint32_t *)addr = temp & ~mask;
 8003068:	6849      	ldr	r1, [r1, #4]
	return 0;
 800306a:	2000      	movs	r0, #0
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 800306c:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 8003070:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 8003072:	ea22 0201 	bic.w	r2, r2, r1
 8003076:	601a      	str	r2, [r3, #0]
	return 0;
 8003078:	4770      	bx	lr
		return -ENOTSUP;
 800307a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800307e:	4770      	bx	lr

08003080 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003080:	6843      	ldr	r3, [r0, #4]
}
 8003082:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003084:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8003086:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8003088:	600b      	str	r3, [r1, #0]
}
 800308a:	4770      	bx	lr

0800308c <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800308c:	6843      	ldr	r3, [r0, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8003090:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8003092:	4042      	eors	r2, r0
 8003094:	400a      	ands	r2, r1
 8003096:	4042      	eors	r2, r0
}
 8003098:	2000      	movs	r0, #0
  WRITE_REG(GPIOx->ODR, PortValue);
 800309a:	615a      	str	r2, [r3, #20]
 800309c:	4770      	bx	lr

0800309e <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800309e:	6843      	ldr	r3, [r0, #4]
}
 80030a0:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80030a2:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 80030a4:	6199      	str	r1, [r3, #24]
}
 80030a6:	4770      	bx	lr

080030a8 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80030a8:	6843      	ldr	r3, [r0, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80030aa:	0409      	lsls	r1, r1, #16
}
 80030ac:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	6199      	str	r1, [r3, #24]
}
 80030b2:	4770      	bx	lr

080030b4 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80030b4:	6843      	ldr	r3, [r0, #4]
}
 80030b6:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80030b8:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 80030ba:	6953      	ldr	r3, [r2, #20]
 80030bc:	404b      	eors	r3, r1
 80030be:	6153      	str	r3, [r2, #20]
}
 80030c0:	4770      	bx	lr

080030c2 <gpio_stm32_manage_callback>:
{
 80030c2:	b530      	push	{r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 80030c4:	6903      	ldr	r3, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 80030c6:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 80030c8:	b310      	cbz	r0, 8003110 <gpio_stm32_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80030ca:	2400      	movs	r4, #0
 80030cc:	4281      	cmp	r1, r0
 80030ce:	d11b      	bne.n	8003108 <gpio_stm32_manage_callback+0x46>
	return node->next;
 80030d0:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 80030d2:	b95c      	cbnz	r4, 80030ec <gpio_stm32_manage_callback+0x2a>
 80030d4:	68dc      	ldr	r4, [r3, #12]
	list->head = node;
 80030d6:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 80030d8:	42a1      	cmp	r1, r4
 80030da:	d100      	bne.n	80030de <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 80030dc:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 80030de:	2000      	movs	r0, #0
 80030e0:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 80030e2:	b94a      	cbnz	r2, 80030f8 <gpio_stm32_manage_callback+0x36>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 80030e4:	2000      	movs	r0, #0
}
 80030e6:	bd30      	pop	{r4, r5, pc}
 80030e8:	4628      	mov	r0, r5
 80030ea:	e7ef      	b.n	80030cc <gpio_stm32_manage_callback+0xa>
 80030ec:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 80030ee:	68d8      	ldr	r0, [r3, #12]
 80030f0:	4281      	cmp	r1, r0
	list->tail = node;
 80030f2:	bf08      	it	eq
 80030f4:	60dc      	streq	r4, [r3, #12]
}
 80030f6:	e7f2      	b.n	80030de <gpio_stm32_manage_callback+0x1c>
	return list->head;
 80030f8:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 80030fa:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 80030fc:	68d8      	ldr	r0, [r3, #12]
	list->head = node;
 80030fe:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8003100:	2800      	cmp	r0, #0
 8003102:	d1ef      	bne.n	80030e4 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8003104:	60d9      	str	r1, [r3, #12]
	return gpio_manage_callback(&data->cb, callback, set);
 8003106:	e7ee      	b.n	80030e6 <gpio_stm32_manage_callback+0x24>
	return node->next;
 8003108:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800310a:	4604      	mov	r4, r0
 800310c:	2d00      	cmp	r5, #0
 800310e:	d1eb      	bne.n	80030e8 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8003110:	2a00      	cmp	r2, #0
 8003112:	d1f1      	bne.n	80030f8 <gpio_stm32_manage_callback+0x36>
				return -EINVAL;
 8003114:	f06f 0015 	mvn.w	r0, #21
 8003118:	e7e5      	b.n	80030e6 <gpio_stm32_manage_callback+0x24>

0800311a <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 800311a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800311e:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8003120:	2001      	movs	r0, #1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8003122:	f3c2 1680 	ubfx	r6, r2, #6, #1
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8003126:	f3c2 1cc1 	ubfx	ip, r2, #7, #2
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800312a:	6867      	ldr	r7, [r4, #4]
	pinval = 1 << pin;
 800312c:	4088      	lsls	r0, r1
 800312e:	408e      	lsls	r6, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8003130:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8003134:	ea27 0700 	bic.w	r7, r7, r0
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8003138:	f3c2 2241 	ubfx	r2, r2, #9, #2
	if (mode == STM32_MODER_ALT_MODE) {
 800313c:	2d20      	cmp	r5, #32
 800313e:	ea46 0607 	orr.w	r6, r6, r7
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003142:	fa00 f701 	lsl.w	r7, r0, r1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003146:	6066      	str	r6, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003148:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 800314c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8003150:	fb07 fc0c 	mul.w	ip, r7, ip
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003154:	fb07 f202 	mul.w	r2, r7, r2
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003158:	ea6f 060e 	mvn.w	r6, lr
 800315c:	ea28 080e 	bic.w	r8, r8, lr
 8003160:	ea4c 0c08 	orr.w	ip, ip, r8
 8003164:	f8c4 c008 	str.w	ip, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8003168:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800316c:	ea2c 0c0e 	bic.w	ip, ip, lr
 8003170:	ea42 020c 	orr.w	r2, r2, ip
 8003174:	60e2      	str	r2, [r4, #12]
 8003176:	d10d      	bne.n	8003194 <gpio_stm32_configure_raw.isra.0+0x7a>
		if (pin < 8) {
 8003178:	2907      	cmp	r1, #7
 800317a:	dc13      	bgt.n	80031a4 <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800317c:	fa07 f201 	lsl.w	r2, r7, r1
 8003180:	6a20      	ldr	r0, [r4, #32]
 8003182:	fa02 f101 	lsl.w	r1, r2, r1
 8003186:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
 800318a:	4359      	muls	r1, r3
 800318c:	ea20 0202 	bic.w	r2, r0, r2
 8003190:	4311      	orrs	r1, r2
 8003192:	6221      	str	r1, [r4, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003194:	6823      	ldr	r3, [r4, #0]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8003196:	092d      	lsrs	r5, r5, #4
 8003198:	401e      	ands	r6, r3
 800319a:	437d      	muls	r5, r7
 800319c:	4335      	orrs	r5, r6
 800319e:	6025      	str	r5, [r4, #0]
}
 80031a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80031a4:	0a02      	lsrs	r2, r0, #8
 80031a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80031a8:	4352      	muls	r2, r2
 80031aa:	4352      	muls	r2, r2
 80031ac:	ebc2 1002 	rsb	r0, r2, r2, lsl #4
 80031b0:	4353      	muls	r3, r2
 80031b2:	ea21 0100 	bic.w	r1, r1, r0
 80031b6:	430b      	orrs	r3, r1
 80031b8:	6263      	str	r3, [r4, #36]	; 0x24
}
 80031ba:	e7eb      	b.n	8003194 <gpio_stm32_configure_raw.isra.0+0x7a>

080031bc <gpio_stm32_config>:
{
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 80031c0:	0390      	lsls	r0, r2, #14
{
 80031c2:	460d      	mov	r5, r1
 80031c4:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 80031c6:	d519      	bpl.n	80031fc <gpio_stm32_config+0x40>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80031c8:	0791      	lsls	r1, r2, #30
 80031ca:	d510      	bpl.n	80031ee <gpio_stm32_config+0x32>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80031cc:	075a      	lsls	r2, r3, #29
 80031ce:	d531      	bpl.n	8003234 <gpio_stm32_config+0x78>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80031d0:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 80031d2:	06d8      	lsls	r0, r3, #27
 80031d4:	d50d      	bpl.n	80031f2 <gpio_stm32_config+0x36>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80031d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80031da:	0319      	lsls	r1, r3, #12
 80031dc:	d41f      	bmi.n	800321e <gpio_stm32_config+0x62>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 80031de:	0358      	lsls	r0, r3, #13
 80031e0:	d516      	bpl.n	8003210 <gpio_stm32_config+0x54>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 80031e2:	2101      	movs	r1, #1
 80031e4:	4620      	mov	r0, r4
 80031e6:	40a9      	lsls	r1, r5
 80031e8:	f7ff ff5e 	bl	80030a8 <gpio_stm32_port_clear_bits_raw>
 80031ec:	e010      	b.n	8003210 <gpio_stm32_config+0x54>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80031ee:	2210      	movs	r2, #16
 80031f0:	e7ef      	b.n	80031d2 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80031f2:	0699      	lsls	r1, r3, #26
 80031f4:	d5f1      	bpl.n	80031da <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80031f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 80031fa:	e7ee      	b.n	80031da <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 80031fc:	03d0      	lsls	r0, r2, #15
 80031fe:	d514      	bpl.n	800322a <gpio_stm32_config+0x6e>
		if ((flags & GPIO_PULL_UP) != 0) {
 8003200:	06d1      	lsls	r1, r2, #27
 8003202:	d414      	bmi.n	800322e <gpio_stm32_config+0x72>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8003204:	f012 0f20 	tst.w	r2, #32
 8003208:	bf14      	ite	ne
 800320a:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800320e:	2200      	moveq	r2, #0
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8003210:	6860      	ldr	r0, [r4, #4]
 8003212:	2300      	movs	r3, #0
 8003214:	4629      	mov	r1, r5
 8003216:	f7ff ff80 	bl	800311a <gpio_stm32_configure_raw.isra.0>
	return 0;
 800321a:	2000      	movs	r0, #0
}
 800321c:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800321e:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003220:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003222:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003224:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 8003226:	618b      	str	r3, [r1, #24]
	return 0;
 8003228:	e7f2      	b.n	8003210 <gpio_stm32_config+0x54>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800322a:	2230      	movs	r2, #48	; 0x30
 800322c:	e7f0      	b.n	8003210 <gpio_stm32_config+0x54>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800322e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003232:	e7ed      	b.n	8003210 <gpio_stm32_config+0x54>
				return -ENOTSUP;
 8003234:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003238:	e7f0      	b.n	800321c <gpio_stm32_config+0x60>

0800323a <gpio_stm32_isr>:
{
 800323a:	460b      	mov	r3, r1
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003240:	b169      	cbz	r1, 800325e <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8003242:	2501      	movs	r5, #1
 8003244:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8003246:	680c      	ldr	r4, [r1, #0]
 8003248:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 800324a:	688a      	ldr	r2, [r1, #8]
 800324c:	402a      	ands	r2, r5
 800324e:	d002      	beq.n	8003256 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8003250:	684b      	ldr	r3, [r1, #4]
 8003252:	4630      	mov	r0, r6
 8003254:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003256:	b114      	cbz	r4, 800325e <gpio_stm32_isr+0x24>
 8003258:	4621      	mov	r1, r4
 800325a:	6824      	ldr	r4, [r4, #0]
 800325c:	e7f5      	b.n	800324a <gpio_stm32_isr+0x10>
}
 800325e:	bd70      	pop	{r4, r5, r6, pc}

08003260 <gpio_stm32_configure>:
{
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003262:	461f      	mov	r7, r3
 8003264:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8003266:	6840      	ldr	r0, [r0, #4]
{
 8003268:	460e      	mov	r6, r1
 800326a:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 800326c:	f7ff ff55 	bl	800311a <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 8003270:	2f11      	cmp	r7, #17
 8003272:	d107      	bne.n	8003284 <gpio_stm32_configure+0x24>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003274:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 8003276:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003278:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 800327c:	d504      	bpl.n	8003288 <gpio_stm32_configure+0x28>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8003282:	6199      	str	r1, [r3, #24]
}
 8003284:	2000      	movs	r0, #0
 8003286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8003288:	4620      	mov	r0, r4
 800328a:	f7ff ff0d 	bl	80030a8 <gpio_stm32_port_clear_bits_raw>
 800328e:	e7f9      	b.n	8003284 <gpio_stm32_configure+0x24>

08003290 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8003290:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8003292:	6803      	ldr	r3, [r0, #0]
	while (*state < &config->states[config->state_cnt]) {
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 8003294:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 8003296:	7905      	ldrb	r5, [r0, #4]
 8003298:	6804      	ldr	r4, [r0, #0]
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80032a0:	42a3      	cmp	r3, r4
 80032a2:	d302      	bcc.n	80032aa <pinctrl_lookup_state+0x1a>
	}

	return -ENOENT;
 80032a4:	f06f 0001 	mvn.w	r0, #1
}
 80032a8:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 80032aa:	795c      	ldrb	r4, [r3, #5]
 80032ac:	428c      	cmp	r4, r1
 80032ae:	d001      	beq.n	80032b4 <pinctrl_lookup_state+0x24>
		(*state)++;
 80032b0:	3308      	adds	r3, #8
 80032b2:	e7ef      	b.n	8003294 <pinctrl_lookup_state+0x4>
			return 0;
 80032b4:	2000      	movs	r0, #0
 80032b6:	e7f7      	b.n	80032a8 <pinctrl_lookup_state+0x18>

080032b8 <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80032b8:	6843      	ldr	r3, [r0, #4]
 80032ba:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80032be:	f001 011f 	and.w	r1, r1, #31
 80032c2:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
 80032c4:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 80032c6:	2301      	movs	r3, #1
 80032c8:	fa03 f101 	lsl.w	r1, r3, r1
 80032cc:	4201      	tst	r1, r0
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 80032ce:	f04f 0000 	mov.w	r0, #0
	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80032d2:	bf08      	it	eq
 80032d4:	2300      	moveq	r3, #0
 80032d6:	7013      	strb	r3, [r2, #0]
}
 80032d8:	4770      	bx	lr

080032da <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 80032da:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80032dc:	6843      	ldr	r3, [r0, #4]
 80032de:	f3c1 104b 	ubfx	r0, r1, #5, #12
 80032e2:	f001 011f 	and.w	r1, r1, #31
 80032e6:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 80032e8:	2301      	movs	r3, #1
	uint32_t temp = *(volatile uint32_t *)addr;
 80032ea:	5884      	ldr	r4, [r0, r2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 80032ec:	fa03 f101 	lsl.w	r1, r3, r1
 80032f0:	4321      	orrs	r1, r4
 80032f2:	5081      	str	r1, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 80032f4:	2000      	movs	r0, #0
 80032f6:	bd10      	pop	{r4, pc}

080032f8 <reset_stm32_line_deassert>:

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 80032f8:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 80032fa:	6843      	ldr	r3, [r0, #4]
 80032fc:	f3c1 144b 	ubfx	r4, r1, #5, #12
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 8003300:	2201      	movs	r2, #1
 8003302:	f001 011f 	and.w	r1, r1, #31
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	fa02 f101 	lsl.w	r1, r2, r1
	uint32_t temp = *(volatile uint32_t *)addr;
 800330c:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 800330e:	ea23 0101 	bic.w	r1, r3, r1
 8003312:	5021      	str	r1, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 8003314:	2000      	movs	r0, #0
 8003316:	bd10      	pop	{r4, pc}

08003318 <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 800331e:	f7ff ffdc 	bl	80032da <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 8003322:	4629      	mov	r1, r5
 8003324:	4620      	mov	r0, r4
 8003326:	f7ff ffe7 	bl	80032f8 <reset_stm32_line_deassert>

	return 0;
}
 800332a:	2000      	movs	r0, #0
 800332c:	bd38      	pop	{r3, r4, r5, pc}

0800332e <uart_stm32_err_check>:
	const struct uart_stm32_config *config = dev->config;
 800332e:	6842      	ldr	r2, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8003330:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003332:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8003334:	69d9      	ldr	r1, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003336:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 800333a:	07c9      	lsls	r1, r1, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800333c:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_PARITY;
 800333e:	bf48      	it	mi
 8003340:	f040 0002 	orrmi.w	r0, r0, #2
 8003344:	0789      	lsls	r1, r1, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003346:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_FRAMING;
 8003348:	bf48      	it	mi
 800334a:	f040 0004 	orrmi.w	r0, r0, #4
 800334e:	0749      	lsls	r1, r1, #29
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 8003350:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_NOISE;
 8003352:	bf48      	it	mi
 8003354:	f040 0020 	orrmi.w	r0, r0, #32
 8003358:	05c9      	lsls	r1, r1, #23
 800335a:	d504      	bpl.n	8003366 <uart_stm32_err_check+0x38>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 800335c:	f44f 7180 	mov.w	r1, #256	; 0x100
		err |= UART_BREAK;
 8003360:	f040 0008 	orr.w	r0, r0, #8
 8003364:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 8003366:	07c1      	lsls	r1, r0, #31
 8003368:	d502      	bpl.n	8003370 <uart_stm32_err_check+0x42>
		LL_USART_ClearFlag_ORE(config->usart);
 800336a:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800336c:	2108      	movs	r1, #8
 800336e:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8003370:	0783      	lsls	r3, r0, #30
 8003372:	d502      	bpl.n	800337a <uart_stm32_err_check+0x4c>
		LL_USART_ClearFlag_PE(config->usart);
 8003374:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8003376:	2101      	movs	r1, #1
 8003378:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 800337a:	0741      	lsls	r1, r0, #29
 800337c:	d502      	bpl.n	8003384 <uart_stm32_err_check+0x56>
		LL_USART_ClearFlag_FE(config->usart);
 800337e:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8003380:	2102      	movs	r1, #2
 8003382:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_NOISE) {
 8003384:	0683      	lsls	r3, r0, #26
 8003386:	d502      	bpl.n	800338e <uart_stm32_err_check+0x60>
		LL_USART_ClearFlag_NE(config->usart);
 8003388:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800338a:	2204      	movs	r2, #4
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	4770      	bx	lr

08003390 <uart_stm32_set_baudrate>:
{
 8003390:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 8003392:	6903      	ldr	r3, [r0, #16]
{
 8003394:	460c      	mov	r4, r1
	const struct uart_stm32_config *config = dev->config;
 8003396:	6845      	ldr	r5, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8003398:	6858      	ldr	r0, [r3, #4]
					   (clock_control_subsys_t)&config->pclken[0],
 800339a:	6869      	ldr	r1, [r5, #4]
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800339c:	6883      	ldr	r3, [r0, #8]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	b18b      	cbz	r3, 80033c6 <uart_stm32_set_baudrate+0x36>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80033a2:	aa01      	add	r2, sp, #4
 80033a4:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 80033a6:	2800      	cmp	r0, #0
 80033a8:	db0d      	blt.n	80033c6 <uart_stm32_set_baudrate+0x36>
		LL_USART_SetOverSampling(config->usart,
 80033aa:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80033ac:	6813      	ldr	r3, [r2, #0]
 80033ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033b2:	6013      	str	r3, [r2, #0]
  else if (BaudRate == 0U)
 80033b4:	b13c      	cbz	r4, 80033c6 <uart_stm32_set_baudrate+0x36>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80033b6:	9b01      	ldr	r3, [sp, #4]
		LL_USART_SetBaudRate(config->usart,
 80033b8:	682a      	ldr	r2, [r5, #0]
 80033ba:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 80033be:	fbb3 f3f4 	udiv	r3, r3, r4
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	60d3      	str	r3, [r2, #12]
}
 80033c6:	b003      	add	sp, #12
 80033c8:	bd30      	pop	{r4, r5, pc}

080033ca <uart_stm32_poll_out>:
{
 80033ca:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 80033cc:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80033ce:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80033d0:	69d3      	ldr	r3, [r2, #28]
 80033d2:	061b      	lsls	r3, r3, #24
 80033d4:	d5fc      	bpl.n	80033d0 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 80033d6:	f04f 0210 	mov.w	r2, #16
 80033da:	f3ef 8311 	mrs	r3, BASEPRI
 80033de:	f382 8812 	msr	BASEPRI_MAX, r2
 80033e2:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80033e6:	6802      	ldr	r2, [r0, #0]
 80033e8:	69d4      	ldr	r4, [r2, #28]
 80033ea:	0624      	lsls	r4, r4, #24
 80033ec:	d404      	bmi.n	80033f8 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80033f6:	e7ea      	b.n	80033ce <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80033f8:	6291      	str	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
}
 8003402:	bd10      	pop	{r4, pc}

08003404 <uart_stm32_poll_in>:
	const struct uart_stm32_config *config = dev->config;
 8003404:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8003406:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003408:	69d0      	ldr	r0, [r2, #28]
 800340a:	0700      	lsls	r0, r0, #28
 800340c:	d501      	bpl.n	8003412 <uart_stm32_poll_in+0xe>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800340e:	2008      	movs	r0, #8
 8003410:	6210      	str	r0, [r2, #32]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 8003412:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	0692      	lsls	r2, r2, #26
 8003418:	d503      	bpl.n	8003422 <uart_stm32_poll_in+0x1e>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return 0;
 800341c:	2000      	movs	r0, #0
 800341e:	700b      	strb	r3, [r1, #0]
 8003420:	4770      	bx	lr
		return -1;
 8003422:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003426:	4770      	bx	lr

08003428 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8003428:	6903      	ldr	r3, [r0, #16]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 800342e:	6843      	ldr	r3, [r0, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8003438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343c:	d035      	beq.n	80034aa <uart_stm32_config_get+0x82>
		return UART_CFG_PARITY_NONE;
 800343e:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 8003442:	f1dc 0300 	rsbs	r3, ip, #0
 8003446:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800344a:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 800344c:	6843      	ldr	r3, [r0, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345a:	d028      	beq.n	80034ae <uart_stm32_config_get+0x86>
 800345c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003460:	d027      	beq.n	80034b2 <uart_stm32_config_get+0x8a>
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2303      	movne	r3, #3
 8003468:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800346a:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 800346c:	6843      	ldr	r3, [r0, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8003470:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003472:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8003474:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (db) {
 800347c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003480:	d019      	beq.n	80034b6 <uart_stm32_config_get+0x8e>
 8003482:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003486:	d11b      	bne.n	80034c0 <uart_stm32_config_get+0x98>
			return UART_CFG_DATA_BITS_6;
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2302      	moveq	r3, #2
 800348e:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8003490:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8003492:	6843      	ldr	r3, [r0, #4]
}
 8003494:	2000      	movs	r0, #0
	return LL_USART_GetHWFlowCtrl(config->usart);
 8003496:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800349e:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80034a2:	4253      	negs	r3, r2
 80034a4:	4153      	adcs	r3, r2
 80034a6:	71cb      	strb	r3, [r1, #7]
}
 80034a8:	4770      	bx	lr
	switch (parity) {
 80034aa:	2302      	movs	r3, #2
 80034ac:	e7cd      	b.n	800344a <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e7db      	b.n	800346a <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 80034b2:	2302      	movs	r3, #2
 80034b4:	e7d9      	b.n	800346a <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_9;
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2303      	movne	r3, #3
 80034bc:	2304      	moveq	r3, #4
 80034be:	e7e7      	b.n	8003490 <uart_stm32_config_get+0x68>
			return UART_CFG_DATA_BITS_8;
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2302      	movne	r3, #2
 80034c6:	2303      	moveq	r3, #3
 80034c8:	e7e2      	b.n	8003490 <uart_stm32_config_get+0x68>

080034ca <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
 80034ca:	4770      	bx	lr

080034cc <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 80034cc:	b140      	cbz	r0, 80034e0 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 80034ce:	68c3      	ldr	r3, [r0, #12]
 80034d0:	7858      	ldrb	r0, [r3, #1]
 80034d2:	f010 0001 	ands.w	r0, r0, #1
 80034d6:	bf1e      	ittt	ne
 80034d8:	7818      	ldrbne	r0, [r3, #0]
 80034da:	fab0 f080 	clzne	r0, r0
 80034de:	0940      	lsrne	r0, r0, #5
}
 80034e0:	4770      	bx	lr

080034e2 <arch_system_halt>:
	__asm__ volatile(
 80034e2:	f04f 0210 	mov.w	r2, #16
 80034e6:	f3ef 8311 	mrs	r3, BASEPRI
 80034ea:	f382 8812 	msr	BASEPRI_MAX, r2
 80034ee:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 80034f2:	e7fe      	b.n	80034f2 <arch_system_halt+0x10>

080034f4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80034f4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 80034f6:	f7ff fff4 	bl	80034e2 <arch_system_halt>

080034fa <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80034fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fc:	4605      	mov	r5, r0
 80034fe:	460e      	mov	r6, r1
 8003500:	f04f 0310 	mov.w	r3, #16
 8003504:	f3ef 8711 	mrs	r7, BASEPRI
 8003508:	f383 8812 	msr	BASEPRI_MAX, r3
 800350c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8003510:	f7ff fa88 	bl	8002a24 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8003514:	4631      	mov	r1, r6
 8003516:	4604      	mov	r4, r0
 8003518:	4628      	mov	r0, r5
 800351a:	f7ff ffeb 	bl	80034f4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800351e:	f387 8811 	msr	BASEPRI, r7
 8003522:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8003526:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8003528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800352c:	f7fd bf72 	b.w	8001414 <z_impl_k_thread_abort>

08003530 <z_early_memset>:
	(void) memset(dst, c, n);
 8003530:	f7ff bce0 	b.w	8002ef4 <memset>

08003534 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8003534:	f7ff bcd3 	b.w	8002ede <memcpy>

08003538 <z_impl_k_thread_name_set>:
}
 8003538:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800353c:	4770      	bx	lr

0800353e <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800353e:	b508      	push	{r3, lr}
	__asm__ volatile(
 8003540:	f04f 0210 	mov.w	r2, #16
 8003544:	f3ef 8311 	mrs	r3, BASEPRI
 8003548:	f382 8812 	msr	BASEPRI_MAX, r2
 800354c:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8003550:	f7fd fcdc 	bl	8000f0c <arch_cpu_idle>
 8003554:	e7f4      	b.n	8003540 <idle+0x2>

08003556 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8003556:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800355a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800355c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800355e:	2300      	movs	r3, #0
	node->prev = NULL;
 8003560:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8003564:	4770      	bx	lr

08003566 <unpend_thread_no_timeout>:
{
 8003566:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8003568:	f7ff fff5 	bl	8003556 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800356c:	7b43      	ldrb	r3, [r0, #13]
 800356e:	f023 0302 	bic.w	r3, r3, #2
 8003572:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8003574:	2300      	movs	r3, #0
 8003576:	6083      	str	r3, [r0, #8]
}
 8003578:	bd08      	pop	{r3, pc}

0800357a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800357a:	4603      	mov	r3, r0
 800357c:	b920      	cbnz	r0, 8003588 <z_reschedule_irqlock+0xe>
 800357e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8003582:	b90a      	cbnz	r2, 8003588 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8003584:	f7fd bd1e 	b.w	8000fc4 <arch_swap>
	__asm__ volatile(
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
}
 8003590:	4770      	bx	lr

08003592 <z_reschedule_unlocked>:
	__asm__ volatile(
 8003592:	f04f 0310 	mov.w	r3, #16
 8003596:	f3ef 8011 	mrs	r0, BASEPRI
 800359a:	f383 8812 	msr	BASEPRI_MAX, r3
 800359e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80035a2:	f7ff bfea 	b.w	800357a <z_reschedule_irqlock>

080035a6 <z_priq_dumb_best>:
{
 80035a6:	4603      	mov	r3, r0
	return list->head == list;
 80035a8:	6800      	ldr	r0, [r0, #0]
}
 80035aa:	4283      	cmp	r3, r0
 80035ac:	bf08      	it	eq
 80035ae:	2000      	moveq	r0, #0
 80035b0:	4770      	bx	lr

080035b2 <z_ready_thread>:
{
 80035b2:	b510      	push	{r4, lr}
 80035b4:	f04f 0310 	mov.w	r3, #16
 80035b8:	f3ef 8411 	mrs	r4, BASEPRI
 80035bc:	f383 8812 	msr	BASEPRI_MAX, r3
 80035c0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 80035c4:	f7ff f8cc 	bl	8002760 <ready_thread>
	__asm__ volatile(
 80035c8:	f384 8811 	msr	BASEPRI, r4
 80035cc:	f3bf 8f6f 	isb	sy
}
 80035d0:	bd10      	pop	{r4, pc}

080035d2 <z_sched_wake_thread>:
{
 80035d2:	b538      	push	{r3, r4, r5, lr}
 80035d4:	4604      	mov	r4, r0
	__asm__ volatile(
 80035d6:	f04f 0310 	mov.w	r3, #16
 80035da:	f3ef 8511 	mrs	r5, BASEPRI
 80035de:	f383 8812 	msr	BASEPRI_MAX, r3
 80035e2:	f3bf 8f6f 	isb	sy
		if (!killed) {
 80035e6:	7b43      	ldrb	r3, [r0, #13]
 80035e8:	f013 0f28 	tst.w	r3, #40	; 0x28
 80035ec:	d10b      	bne.n	8003606 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
 80035ee:	6883      	ldr	r3, [r0, #8]
 80035f0:	b10b      	cbz	r3, 80035f6 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
 80035f2:	f7ff ffb8 	bl	8003566 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80035f6:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
 80035f8:	b951      	cbnz	r1, 8003610 <z_sched_wake_thread+0x3e>
 80035fa:	f023 0304 	bic.w	r3, r3, #4
			ready_thread(thread);
 80035fe:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8003600:	7363      	strb	r3, [r4, #13]
 8003602:	f7ff f8ad 	bl	8002760 <ready_thread>
	__asm__ volatile(
 8003606:	f385 8811 	msr	BASEPRI, r5
 800360a:	f3bf 8f6f 	isb	sy
}
 800360e:	bd38      	pop	{r3, r4, r5, pc}
 8003610:	f023 0314 	bic.w	r3, r3, #20
 8003614:	e7f3      	b.n	80035fe <z_sched_wake_thread+0x2c>

08003616 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
 8003616:	2101      	movs	r1, #1
 8003618:	3818      	subs	r0, #24
 800361a:	f7ff bfda 	b.w	80035d2 <z_sched_wake_thread>

0800361e <z_abort_timeout>:
{
 800361e:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003620:	f04f 0210 	mov.w	r2, #16
 8003624:	f3ef 8411 	mrs	r4, BASEPRI
 8003628:	f382 8812 	msr	BASEPRI_MAX, r2
 800362c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8003630:	6803      	ldr	r3, [r0, #0]
 8003632:	b13b      	cbz	r3, 8003644 <z_abort_timeout+0x26>
			remove_timeout(to);
 8003634:	f7ff faaa 	bl	8002b8c <remove_timeout>
			ret = 0;
 8003638:	2000      	movs	r0, #0
	__asm__ volatile(
 800363a:	f384 8811 	msr	BASEPRI, r4
 800363e:	f3bf 8f6f 	isb	sy
}
 8003642:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8003644:	f06f 0015 	mvn.w	r0, #21
 8003648:	e7f7      	b.n	800363a <z_abort_timeout+0x1c>

0800364a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 800364a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 800364c:	f7ff fb96 	bl	8002d7c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 8003650:	bd08      	pop	{r3, pc}
	...
