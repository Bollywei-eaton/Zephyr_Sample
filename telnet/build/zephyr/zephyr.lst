
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 55 00 24 9d 3e 00 08 49 49 01 08 71 3e 00 08     .U.$.>..II..q>..
 8000010:	71 3e 00 08 71 3e 00 08 71 3e 00 08 00 00 00 00     q>..q>..q>......
	...
 800002c:	f9 3a 00 08 71 3e 00 08 00 00 00 00 a1 3a 00 08     .:..q>.......:..
 800003c:	25 03 01 08                                         %...

08000040 <_irq_vector_table>:
 8000040:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000050:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000060:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000070:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000080:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000090:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80000a0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80000b0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80000c0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80000d0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80000e0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80000f0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000100:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000110:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000120:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000130:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000140:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000150:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000160:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000170:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000180:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000190:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80001a0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80001b0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80001c0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80001d0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80001e0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 80001f0:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000200:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000210:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000220:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000230:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000240:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000250:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000260:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000270:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000280:	a5 3b 00 08 a5 3b 00 08 a5 3b 00 08 a5 3b 00 08     .;...;...;...;..
 8000290:	a5 3b 00 08 a5 3b 00 08                             .;...;..

Disassembly of section text:

08000298 <__aeabi_frsub>:
 8000298:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800029c:	e002      	b.n	80002a4 <__addsf3>
 800029e:	bf00      	nop

080002a0 <__aeabi_fsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002a4 <__addsf3>:
 80002a4:	0042      	lsls	r2, r0, #1
 80002a6:	bf1f      	itttt	ne
 80002a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ac:	ea92 0f03 	teqne	r2, r3
 80002b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002b8:	d06a      	beq.n	8000390 <__addsf3+0xec>
 80002ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002c2:	bfc1      	itttt	gt
 80002c4:	18d2      	addgt	r2, r2, r3
 80002c6:	4041      	eorgt	r1, r0
 80002c8:	4048      	eorgt	r0, r1
 80002ca:	4041      	eorgt	r1, r0
 80002cc:	bfb8      	it	lt
 80002ce:	425b      	neglt	r3, r3
 80002d0:	2b19      	cmp	r3, #25
 80002d2:	bf88      	it	hi
 80002d4:	4770      	bxhi	lr
 80002d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002e2:	bf18      	it	ne
 80002e4:	4240      	negne	r0, r0
 80002e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002f2:	bf18      	it	ne
 80002f4:	4249      	negne	r1, r1
 80002f6:	ea92 0f03 	teq	r2, r3
 80002fa:	d03f      	beq.n	800037c <__addsf3+0xd8>
 80002fc:	f1a2 0201 	sub.w	r2, r2, #1
 8000300:	fa41 fc03 	asr.w	ip, r1, r3
 8000304:	eb10 000c 	adds.w	r0, r0, ip
 8000308:	f1c3 0320 	rsb	r3, r3, #32
 800030c:	fa01 f103 	lsl.w	r1, r1, r3
 8000310:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000314:	d502      	bpl.n	800031c <__addsf3+0x78>
 8000316:	4249      	negs	r1, r1
 8000318:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800031c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000320:	d313      	bcc.n	800034a <__addsf3+0xa6>
 8000322:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000326:	d306      	bcc.n	8000336 <__addsf3+0x92>
 8000328:	0840      	lsrs	r0, r0, #1
 800032a:	ea4f 0131 	mov.w	r1, r1, rrx
 800032e:	f102 0201 	add.w	r2, r2, #1
 8000332:	2afe      	cmp	r2, #254	; 0xfe
 8000334:	d251      	bcs.n	80003da <__addsf3+0x136>
 8000336:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800033a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800033e:	bf08      	it	eq
 8000340:	f020 0001 	biceq.w	r0, r0, #1
 8000344:	ea40 0003 	orr.w	r0, r0, r3
 8000348:	4770      	bx	lr
 800034a:	0049      	lsls	r1, r1, #1
 800034c:	eb40 0000 	adc.w	r0, r0, r0
 8000350:	3a01      	subs	r2, #1
 8000352:	bf28      	it	cs
 8000354:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000358:	d2ed      	bcs.n	8000336 <__addsf3+0x92>
 800035a:	fab0 fc80 	clz	ip, r0
 800035e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000362:	ebb2 020c 	subs.w	r2, r2, ip
 8000366:	fa00 f00c 	lsl.w	r0, r0, ip
 800036a:	bfaa      	itet	ge
 800036c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000370:	4252      	neglt	r2, r2
 8000372:	4318      	orrge	r0, r3
 8000374:	bfbc      	itt	lt
 8000376:	40d0      	lsrlt	r0, r2
 8000378:	4318      	orrlt	r0, r3
 800037a:	4770      	bx	lr
 800037c:	f092 0f00 	teq	r2, #0
 8000380:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000384:	bf06      	itte	eq
 8000386:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800038a:	3201      	addeq	r2, #1
 800038c:	3b01      	subne	r3, #1
 800038e:	e7b5      	b.n	80002fc <__addsf3+0x58>
 8000390:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000394:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000398:	bf18      	it	ne
 800039a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800039e:	d021      	beq.n	80003e4 <__addsf3+0x140>
 80003a0:	ea92 0f03 	teq	r2, r3
 80003a4:	d004      	beq.n	80003b0 <__addsf3+0x10c>
 80003a6:	f092 0f00 	teq	r2, #0
 80003aa:	bf08      	it	eq
 80003ac:	4608      	moveq	r0, r1
 80003ae:	4770      	bx	lr
 80003b0:	ea90 0f01 	teq	r0, r1
 80003b4:	bf1c      	itt	ne
 80003b6:	2000      	movne	r0, #0
 80003b8:	4770      	bxne	lr
 80003ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003be:	d104      	bne.n	80003ca <__addsf3+0x126>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	bf28      	it	cs
 80003c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003c8:	4770      	bx	lr
 80003ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ce:	bf3c      	itt	cc
 80003d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003d4:	4770      	bxcc	lr
 80003d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003e2:	4770      	bx	lr
 80003e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003e8:	bf16      	itet	ne
 80003ea:	4608      	movne	r0, r1
 80003ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003f0:	4601      	movne	r1, r0
 80003f2:	0242      	lsls	r2, r0, #9
 80003f4:	bf06      	itte	eq
 80003f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003fa:	ea90 0f01 	teqeq	r0, r1
 80003fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000402:	4770      	bx	lr

08000404 <__aeabi_ui2f>:
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	e004      	b.n	8000414 <__aeabi_i2f+0x8>
 800040a:	bf00      	nop

0800040c <__aeabi_i2f>:
 800040c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000410:	bf48      	it	mi
 8000412:	4240      	negmi	r0, r0
 8000414:	ea5f 0c00 	movs.w	ip, r0
 8000418:	bf08      	it	eq
 800041a:	4770      	bxeq	lr
 800041c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000420:	4601      	mov	r1, r0
 8000422:	f04f 0000 	mov.w	r0, #0
 8000426:	e01c      	b.n	8000462 <__aeabi_l2f+0x2a>

08000428 <__aeabi_ul2f>:
 8000428:	ea50 0201 	orrs.w	r2, r0, r1
 800042c:	bf08      	it	eq
 800042e:	4770      	bxeq	lr
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e00a      	b.n	800044c <__aeabi_l2f+0x14>
 8000436:	bf00      	nop

08000438 <__aeabi_l2f>:
 8000438:	ea50 0201 	orrs.w	r2, r0, r1
 800043c:	bf08      	it	eq
 800043e:	4770      	bxeq	lr
 8000440:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000444:	d502      	bpl.n	800044c <__aeabi_l2f+0x14>
 8000446:	4240      	negs	r0, r0
 8000448:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800044c:	ea5f 0c01 	movs.w	ip, r1
 8000450:	bf02      	ittt	eq
 8000452:	4684      	moveq	ip, r0
 8000454:	4601      	moveq	r1, r0
 8000456:	2000      	moveq	r0, #0
 8000458:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800045c:	bf08      	it	eq
 800045e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000462:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000466:	fabc f28c 	clz	r2, ip
 800046a:	3a08      	subs	r2, #8
 800046c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000470:	db10      	blt.n	8000494 <__aeabi_l2f+0x5c>
 8000472:	fa01 fc02 	lsl.w	ip, r1, r2
 8000476:	4463      	add	r3, ip
 8000478:	fa00 fc02 	lsl.w	ip, r0, r2
 800047c:	f1c2 0220 	rsb	r2, r2, #32
 8000480:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	eb43 0002 	adc.w	r0, r3, r2
 800048c:	bf08      	it	eq
 800048e:	f020 0001 	biceq.w	r0, r0, #1
 8000492:	4770      	bx	lr
 8000494:	f102 0220 	add.w	r2, r2, #32
 8000498:	fa01 fc02 	lsl.w	ip, r1, r2
 800049c:	f1c2 0220 	rsb	r2, r2, #32
 80004a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004a4:	fa21 f202 	lsr.w	r2, r1, r2
 80004a8:	eb43 0002 	adc.w	r0, r3, r2
 80004ac:	bf08      	it	eq
 80004ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004b2:	4770      	bx	lr

080004b4 <__aeabi_fmul>:
 80004b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004bc:	bf1e      	ittt	ne
 80004be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004c2:	ea92 0f0c 	teqne	r2, ip
 80004c6:	ea93 0f0c 	teqne	r3, ip
 80004ca:	d06f      	beq.n	80005ac <__aeabi_fmul+0xf8>
 80004cc:	441a      	add	r2, r3
 80004ce:	ea80 0c01 	eor.w	ip, r0, r1
 80004d2:	0240      	lsls	r0, r0, #9
 80004d4:	bf18      	it	ne
 80004d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004da:	d01e      	beq.n	800051a <__aeabi_fmul+0x66>
 80004dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004e8:	fba0 3101 	umull	r3, r1, r0, r1
 80004ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004f4:	bf3e      	ittt	cc
 80004f6:	0049      	lslcc	r1, r1, #1
 80004f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004fc:	005b      	lslcc	r3, r3, #1
 80004fe:	ea40 0001 	orr.w	r0, r0, r1
 8000502:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000506:	2afd      	cmp	r2, #253	; 0xfd
 8000508:	d81d      	bhi.n	8000546 <__aeabi_fmul+0x92>
 800050a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800050e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000512:	bf08      	it	eq
 8000514:	f020 0001 	biceq.w	r0, r0, #1
 8000518:	4770      	bx	lr
 800051a:	f090 0f00 	teq	r0, #0
 800051e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000522:	bf08      	it	eq
 8000524:	0249      	lsleq	r1, r1, #9
 8000526:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800052a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800052e:	3a7f      	subs	r2, #127	; 0x7f
 8000530:	bfc2      	ittt	gt
 8000532:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000536:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800053a:	4770      	bxgt	lr
 800053c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000540:	f04f 0300 	mov.w	r3, #0
 8000544:	3a01      	subs	r2, #1
 8000546:	dc5d      	bgt.n	8000604 <__aeabi_fmul+0x150>
 8000548:	f112 0f19 	cmn.w	r2, #25
 800054c:	bfdc      	itt	le
 800054e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000552:	4770      	bxle	lr
 8000554:	f1c2 0200 	rsb	r2, r2, #0
 8000558:	0041      	lsls	r1, r0, #1
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	f1c2 0220 	rsb	r2, r2, #32
 8000562:	fa00 fc02 	lsl.w	ip, r0, r2
 8000566:	ea5f 0031 	movs.w	r0, r1, rrx
 800056a:	f140 0000 	adc.w	r0, r0, #0
 800056e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000572:	bf08      	it	eq
 8000574:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000578:	4770      	bx	lr
 800057a:	f092 0f00 	teq	r2, #0
 800057e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000582:	bf02      	ittt	eq
 8000584:	0040      	lsleq	r0, r0, #1
 8000586:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800058a:	3a01      	subeq	r2, #1
 800058c:	d0f9      	beq.n	8000582 <__aeabi_fmul+0xce>
 800058e:	ea40 000c 	orr.w	r0, r0, ip
 8000592:	f093 0f00 	teq	r3, #0
 8000596:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800059a:	bf02      	ittt	eq
 800059c:	0049      	lsleq	r1, r1, #1
 800059e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005a2:	3b01      	subeq	r3, #1
 80005a4:	d0f9      	beq.n	800059a <__aeabi_fmul+0xe6>
 80005a6:	ea41 010c 	orr.w	r1, r1, ip
 80005aa:	e78f      	b.n	80004cc <__aeabi_fmul+0x18>
 80005ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005b0:	ea92 0f0c 	teq	r2, ip
 80005b4:	bf18      	it	ne
 80005b6:	ea93 0f0c 	teqne	r3, ip
 80005ba:	d00a      	beq.n	80005d2 <__aeabi_fmul+0x11e>
 80005bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005c0:	bf18      	it	ne
 80005c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005c6:	d1d8      	bne.n	800057a <__aeabi_fmul+0xc6>
 80005c8:	ea80 0001 	eor.w	r0, r0, r1
 80005cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005d0:	4770      	bx	lr
 80005d2:	f090 0f00 	teq	r0, #0
 80005d6:	bf17      	itett	ne
 80005d8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005dc:	4608      	moveq	r0, r1
 80005de:	f091 0f00 	teqne	r1, #0
 80005e2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005e6:	d014      	beq.n	8000612 <__aeabi_fmul+0x15e>
 80005e8:	ea92 0f0c 	teq	r2, ip
 80005ec:	d101      	bne.n	80005f2 <__aeabi_fmul+0x13e>
 80005ee:	0242      	lsls	r2, r0, #9
 80005f0:	d10f      	bne.n	8000612 <__aeabi_fmul+0x15e>
 80005f2:	ea93 0f0c 	teq	r3, ip
 80005f6:	d103      	bne.n	8000600 <__aeabi_fmul+0x14c>
 80005f8:	024b      	lsls	r3, r1, #9
 80005fa:	bf18      	it	ne
 80005fc:	4608      	movne	r0, r1
 80005fe:	d108      	bne.n	8000612 <__aeabi_fmul+0x15e>
 8000600:	ea80 0001 	eor.w	r0, r0, r1
 8000604:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000608:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800060c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000610:	4770      	bx	lr
 8000612:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000616:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800061a:	4770      	bx	lr

0800061c <__aeabi_fdiv>:
 800061c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000620:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000624:	bf1e      	ittt	ne
 8000626:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800062a:	ea92 0f0c 	teqne	r2, ip
 800062e:	ea93 0f0c 	teqne	r3, ip
 8000632:	d069      	beq.n	8000708 <__aeabi_fdiv+0xec>
 8000634:	eba2 0203 	sub.w	r2, r2, r3
 8000638:	ea80 0c01 	eor.w	ip, r0, r1
 800063c:	0249      	lsls	r1, r1, #9
 800063e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000642:	d037      	beq.n	80006b4 <__aeabi_fdiv+0x98>
 8000644:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000648:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800064c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000650:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000654:	428b      	cmp	r3, r1
 8000656:	bf38      	it	cc
 8000658:	005b      	lslcc	r3, r3, #1
 800065a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800065e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000662:	428b      	cmp	r3, r1
 8000664:	bf24      	itt	cs
 8000666:	1a5b      	subcs	r3, r3, r1
 8000668:	ea40 000c 	orrcs.w	r0, r0, ip
 800066c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000670:	bf24      	itt	cs
 8000672:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000676:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800067a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800067e:	bf24      	itt	cs
 8000680:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000684:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000688:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800068c:	bf24      	itt	cs
 800068e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000692:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	bf18      	it	ne
 800069a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800069e:	d1e0      	bne.n	8000662 <__aeabi_fdiv+0x46>
 80006a0:	2afd      	cmp	r2, #253	; 0xfd
 80006a2:	f63f af50 	bhi.w	8000546 <__aeabi_fmul+0x92>
 80006a6:	428b      	cmp	r3, r1
 80006a8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ac:	bf08      	it	eq
 80006ae:	f020 0001 	biceq.w	r0, r0, #1
 80006b2:	4770      	bx	lr
 80006b4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006b8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006bc:	327f      	adds	r2, #127	; 0x7f
 80006be:	bfc2      	ittt	gt
 80006c0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006c4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006c8:	4770      	bxgt	lr
 80006ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	3a01      	subs	r2, #1
 80006d4:	e737      	b.n	8000546 <__aeabi_fmul+0x92>
 80006d6:	f092 0f00 	teq	r2, #0
 80006da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80006de:	bf02      	ittt	eq
 80006e0:	0040      	lsleq	r0, r0, #1
 80006e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006e6:	3a01      	subeq	r2, #1
 80006e8:	d0f9      	beq.n	80006de <__aeabi_fdiv+0xc2>
 80006ea:	ea40 000c 	orr.w	r0, r0, ip
 80006ee:	f093 0f00 	teq	r3, #0
 80006f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006f6:	bf02      	ittt	eq
 80006f8:	0049      	lsleq	r1, r1, #1
 80006fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006fe:	3b01      	subeq	r3, #1
 8000700:	d0f9      	beq.n	80006f6 <__aeabi_fdiv+0xda>
 8000702:	ea41 010c 	orr.w	r1, r1, ip
 8000706:	e795      	b.n	8000634 <__aeabi_fdiv+0x18>
 8000708:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800070c:	ea92 0f0c 	teq	r2, ip
 8000710:	d108      	bne.n	8000724 <__aeabi_fdiv+0x108>
 8000712:	0242      	lsls	r2, r0, #9
 8000714:	f47f af7d 	bne.w	8000612 <__aeabi_fmul+0x15e>
 8000718:	ea93 0f0c 	teq	r3, ip
 800071c:	f47f af70 	bne.w	8000600 <__aeabi_fmul+0x14c>
 8000720:	4608      	mov	r0, r1
 8000722:	e776      	b.n	8000612 <__aeabi_fmul+0x15e>
 8000724:	ea93 0f0c 	teq	r3, ip
 8000728:	d104      	bne.n	8000734 <__aeabi_fdiv+0x118>
 800072a:	024b      	lsls	r3, r1, #9
 800072c:	f43f af4c 	beq.w	80005c8 <__aeabi_fmul+0x114>
 8000730:	4608      	mov	r0, r1
 8000732:	e76e      	b.n	8000612 <__aeabi_fmul+0x15e>
 8000734:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000738:	bf18      	it	ne
 800073a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800073e:	d1ca      	bne.n	80006d6 <__aeabi_fdiv+0xba>
 8000740:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000744:	f47f af5c 	bne.w	8000600 <__aeabi_fmul+0x14c>
 8000748:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800074c:	f47f af3c 	bne.w	80005c8 <__aeabi_fmul+0x114>
 8000750:	e75f      	b.n	8000612 <__aeabi_fmul+0x15e>
 8000752:	bf00      	nop

08000754 <__aeabi_f2uiz>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	d20e      	bcs.n	8000776 <__aeabi_f2uiz+0x22>
 8000758:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800075c:	d30b      	bcc.n	8000776 <__aeabi_f2uiz+0x22>
 800075e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000762:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000766:	d409      	bmi.n	800077c <__aeabi_f2uiz+0x28>
 8000768:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800076c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000770:	fa23 f002 	lsr.w	r0, r3, r2
 8000774:	4770      	bx	lr
 8000776:	f04f 0000 	mov.w	r0, #0
 800077a:	4770      	bx	lr
 800077c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000780:	d101      	bne.n	8000786 <__aeabi_f2uiz+0x32>
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	d102      	bne.n	800078c <__aeabi_f2uiz+0x38>
 8000786:	f04f 30ff 	mov.w	r0, #4294967295
 800078a:	4770      	bx	lr
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop

08000794 <__aeabi_ldivmod>:
 8000794:	b97b      	cbnz	r3, 80007b6 <__aeabi_ldivmod+0x22>
 8000796:	b972      	cbnz	r2, 80007b6 <__aeabi_ldivmod+0x22>
 8000798:	2900      	cmp	r1, #0
 800079a:	bfbe      	ittt	lt
 800079c:	2000      	movlt	r0, #0
 800079e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007a2:	e006      	blt.n	80007b2 <__aeabi_ldivmod+0x1e>
 80007a4:	bf08      	it	eq
 80007a6:	2800      	cmpeq	r0, #0
 80007a8:	bf1c      	itt	ne
 80007aa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ae:	f04f 30ff 	movne.w	r0, #4294967295
 80007b2:	f000 b9bf 	b.w	8000b34 <__aeabi_idiv0>
 80007b6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007ba:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007be:	2900      	cmp	r1, #0
 80007c0:	db09      	blt.n	80007d6 <__aeabi_ldivmod+0x42>
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	db1a      	blt.n	80007fc <__aeabi_ldivmod+0x68>
 80007c6:	f000 f84d 	bl	8000864 <__udivmoddi4>
 80007ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d2:	b004      	add	sp, #16
 80007d4:	4770      	bx	lr
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db1b      	blt.n	8000818 <__aeabi_ldivmod+0x84>
 80007e0:	f000 f840 	bl	8000864 <__udivmoddi4>
 80007e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ec:	b004      	add	sp, #16
 80007ee:	4240      	negs	r0, r0
 80007f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f4:	4252      	negs	r2, r2
 80007f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007fa:	4770      	bx	lr
 80007fc:	4252      	negs	r2, r2
 80007fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000802:	f000 f82f 	bl	8000864 <__udivmoddi4>
 8000806:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080e:	b004      	add	sp, #16
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	4770      	bx	lr
 8000818:	4252      	negs	r2, r2
 800081a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081e:	f000 f821 	bl	8000864 <__udivmoddi4>
 8000822:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082a:	b004      	add	sp, #16
 800082c:	4252      	negs	r2, r2
 800082e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000832:	4770      	bx	lr

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b974 	b.w	8000b34 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9e08      	ldr	r6, [sp, #32]
 800086a:	460d      	mov	r5, r1
 800086c:	4604      	mov	r4, r0
 800086e:	4688      	mov	r8, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14d      	bne.n	8000910 <__udivmoddi4+0xac>
 8000874:	428a      	cmp	r2, r1
 8000876:	4694      	mov	ip, r2
 8000878:	d968      	bls.n	800094c <__udivmoddi4+0xe8>
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	b152      	cbz	r2, 8000896 <__udivmoddi4+0x32>
 8000880:	fa01 f302 	lsl.w	r3, r1, r2
 8000884:	f1c2 0120 	rsb	r1, r2, #32
 8000888:	fa20 f101 	lsr.w	r1, r0, r1
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	ea41 0803 	orr.w	r8, r1, r3
 8000894:	4094      	lsls	r4, r2
 8000896:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800089a:	0c21      	lsrs	r1, r4, #16
 800089c:	fbb8 fef5 	udiv	lr, r8, r5
 80008a0:	fa1f f78c 	uxth.w	r7, ip
 80008a4:	fb05 831e 	mls	r3, r5, lr, r8
 80008a8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ac:	fb0e f107 	mul.w	r1, lr, r7
 80008b0:	4299      	cmp	r1, r3
 80008b2:	d90b      	bls.n	80008cc <__udivmoddi4+0x68>
 80008b4:	eb1c 0303 	adds.w	r3, ip, r3
 80008b8:	f10e 30ff 	add.w	r0, lr, #4294967295
 80008bc:	f080 811e 	bcs.w	8000afc <__udivmoddi4+0x298>
 80008c0:	4299      	cmp	r1, r3
 80008c2:	f240 811b 	bls.w	8000afc <__udivmoddi4+0x298>
 80008c6:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a5b      	subs	r3, r3, r1
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb3 f0f5 	udiv	r0, r3, r5
 80008d4:	fb05 3310 	mls	r3, r5, r0, r3
 80008d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008dc:	fb00 f707 	mul.w	r7, r0, r7
 80008e0:	42a7      	cmp	r7, r4
 80008e2:	d90a      	bls.n	80008fa <__udivmoddi4+0x96>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ec:	f080 8108 	bcs.w	8000b00 <__udivmoddi4+0x29c>
 80008f0:	42a7      	cmp	r7, r4
 80008f2:	f240 8105 	bls.w	8000b00 <__udivmoddi4+0x29c>
 80008f6:	4464      	add	r4, ip
 80008f8:	3802      	subs	r0, #2
 80008fa:	1be4      	subs	r4, r4, r7
 80008fc:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000900:	2100      	movs	r1, #0
 8000902:	b11e      	cbz	r6, 800090c <__udivmoddi4+0xa8>
 8000904:	40d4      	lsrs	r4, r2
 8000906:	2300      	movs	r3, #0
 8000908:	e9c6 4300 	strd	r4, r3, [r6]
 800090c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000910:	428b      	cmp	r3, r1
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0xc2>
 8000914:	2e00      	cmp	r6, #0
 8000916:	f000 80ee 	beq.w	8000af6 <__udivmoddi4+0x292>
 800091a:	2100      	movs	r1, #0
 800091c:	e9c6 0500 	strd	r0, r5, [r6]
 8000920:	4608      	mov	r0, r1
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	fab3 f183 	clz	r1, r3
 800092a:	2900      	cmp	r1, #0
 800092c:	d14a      	bne.n	80009c4 <__udivmoddi4+0x160>
 800092e:	42ab      	cmp	r3, r5
 8000930:	d302      	bcc.n	8000938 <__udivmoddi4+0xd4>
 8000932:	4282      	cmp	r2, r0
 8000934:	f200 80f9 	bhi.w	8000b2a <__udivmoddi4+0x2c6>
 8000938:	1a84      	subs	r4, r0, r2
 800093a:	eb65 0303 	sbc.w	r3, r5, r3
 800093e:	2001      	movs	r0, #1
 8000940:	4698      	mov	r8, r3
 8000942:	2e00      	cmp	r6, #0
 8000944:	d0e2      	beq.n	800090c <__udivmoddi4+0xa8>
 8000946:	e9c6 4800 	strd	r4, r8, [r6]
 800094a:	e7df      	b.n	800090c <__udivmoddi4+0xa8>
 800094c:	b902      	cbnz	r2, 8000950 <__udivmoddi4+0xec>
 800094e:	deff      	udf	#255	; 0xff
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	2a00      	cmp	r2, #0
 8000956:	f040 8091 	bne.w	8000a7c <__udivmoddi4+0x218>
 800095a:	eba1 050c 	sub.w	r5, r1, ip
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2101      	movs	r1, #1
 8000968:	fbb5 f3f7 	udiv	r3, r5, r7
 800096c:	fb07 5013 	mls	r0, r7, r3, r5
 8000970:	0c25      	lsrs	r5, r4, #16
 8000972:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000976:	fb0e f003 	mul.w	r0, lr, r3
 800097a:	42a8      	cmp	r0, r5
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x12c>
 800097e:	eb1c 0505 	adds.w	r5, ip, r5
 8000982:	f103 38ff 	add.w	r8, r3, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x12a>
 8000988:	42a8      	cmp	r0, r5
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2c0>
 800098e:	4643      	mov	r3, r8
 8000990:	1a2d      	subs	r5, r5, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb5 f0f7 	udiv	r0, r5, r7
 8000998:	fb07 5510 	mls	r5, r7, r0, r5
 800099c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x156>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 35ff 	add.w	r5, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x154>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2ca>
 80009b8:	4628      	mov	r0, r5
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009c2:	e79e      	b.n	8000902 <__udivmoddi4+0x9e>
 80009c4:	f1c1 0720 	rsb	r7, r1, #32
 80009c8:	408b      	lsls	r3, r1
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa20 f407 	lsr.w	r4, r0, r7
 80009d6:	fa05 f301 	lsl.w	r3, r5, r1
 80009da:	431c      	orrs	r4, r3
 80009dc:	40fd      	lsrs	r5, r7
 80009de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e2:	fa00 f301 	lsl.w	r3, r0, r1
 80009e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80009ea:	0c20      	lsrs	r0, r4, #16
 80009ec:	fa1f fe8c 	uxth.w	lr, ip
 80009f0:	fb09 5518 	mls	r5, r9, r8, r5
 80009f4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80009f8:	fb08 f00e 	mul.w	r0, r8, lr
 80009fc:	42a8      	cmp	r0, r5
 80009fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b8>
 8000a04:	eb1c 0505 	adds.w	r5, ip, r5
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2bc>
 8000a10:	42a8      	cmp	r0, r5
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2bc>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4465      	add	r5, ip
 8000a1c:	1a2d      	subs	r5, r5, r0
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb5 f0f9 	udiv	r0, r5, r9
 8000a24:	fb09 5510 	mls	r5, r9, r0, r5
 8000a28:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000a2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a30:	45ae      	cmp	lr, r5
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1e2>
 8000a34:	eb1c 0505 	adds.w	r5, ip, r5
 8000a38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2b4>
 8000a3e:	45ae      	cmp	lr, r5
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2b4>
 8000a42:	3802      	subs	r0, #2
 8000a44:	4465      	add	r5, ip
 8000a46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a4e:	eba5 050e 	sub.w	r5, r5, lr
 8000a52:	42a5      	cmp	r5, r4
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46a6      	mov	lr, r4
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x2a4>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x2a0>
 8000a5c:	b15e      	cbz	r6, 8000a76 <__udivmoddi4+0x212>
 8000a5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a62:	eb65 050e 	sbc.w	r5, r5, lr
 8000a66:	fa05 f707 	lsl.w	r7, r5, r7
 8000a6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000a6e:	40cd      	lsrs	r5, r1
 8000a70:	431f      	orrs	r7, r3
 8000a72:	e9c6 7500 	strd	r7, r5, [r6]
 8000a76:	2100      	movs	r1, #0
 8000a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7c:	f1c2 0320 	rsb	r3, r2, #32
 8000a80:	fa20 f103 	lsr.w	r1, r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa25 f303 	lsr.w	r3, r5, r3
 8000a8c:	4095      	lsls	r5, r2
 8000a8e:	430d      	orrs	r5, r1
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a9c:	fb07 3011 	mls	r0, r7, r1, r3
 8000aa0:	0c2b      	lsrs	r3, r5, #16
 8000aa2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000aa6:	fb01 f00e 	mul.w	r0, r1, lr
 8000aaa:	4298      	cmp	r0, r3
 8000aac:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x260>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b8>
 8000abc:	4298      	cmp	r0, r3
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b8>
 8000ac0:	3902      	subs	r1, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1a1b      	subs	r3, r3, r0
 8000ac6:	b2ad      	uxth	r5, r5
 8000ac8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000acc:	fb07 3310 	mls	r3, r7, r0, r3
 8000ad0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ad4:	fb00 f30e 	mul.w	r3, r0, lr
 8000ad8:	42ab      	cmp	r3, r5
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x28a>
 8000adc:	eb1c 0505 	adds.w	r5, ip, r5
 8000ae0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ae6:	42ab      	cmp	r3, r5
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000aea:	3802      	subs	r0, #2
 8000aec:	4465      	add	r5, ip
 8000aee:	1aed      	subs	r5, r5, r3
 8000af0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0x104>
 8000af6:	4631      	mov	r1, r6
 8000af8:	4630      	mov	r0, r6
 8000afa:	e707      	b.n	800090c <__udivmoddi4+0xa8>
 8000afc:	4686      	mov	lr, r0
 8000afe:	e6e5      	b.n	80008cc <__udivmoddi4+0x68>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6fa      	b.n	80008fa <__udivmoddi4+0x96>
 8000b04:	454b      	cmp	r3, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f8>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f8>
 8000b14:	4640      	mov	r0, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x28a>
 8000b18:	4620      	mov	r0, r4
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1e2>
 8000b1c:	4641      	mov	r1, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b8>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	4465      	add	r5, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x12c>
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e709      	b.n	8000942 <__udivmoddi4+0xde>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x156>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <main>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int main(void)
{
 8000b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct net_if *iface = net_if_get_default();
 8000b3a:	f004 faef 	bl	800511c <net_if_get_default>
				  uint32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <main+0x50>)
 8000b40:	4604      	mov	r4, r0
 8000b42:	4812      	ldr	r0, [pc, #72]	; (8000b8c <main+0x54>)
 8000b44:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <main+0x58>)
 8000b48:	6083      	str	r3, [r0, #8]
	net_mgmt_add_event_callback(&mgmt_cb);
 8000b4a:	f005 feb3 	bl	80068b4 <net_mgmt_add_event_callback>
	net_dhcpv4_start(iface);
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f017 f815 	bl	8017b7e <net_dhcpv4_start>
		union { uintptr_t x; void * val; } parm2 = { .val = dst };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_NET_ADDR_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_pton(family, src, dst);
 8000b54:	490f      	ldr	r1, [pc, #60]	; (8000b94 <main+0x5c>)
 8000b56:	466a      	mov	r2, sp
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f015 fb33 	bl	80161c4 <z_impl_net_addr_pton>
	if (net_addr_pton(AF_INET6, CONFIG_NET_CONFIG_MY_IPV6_ADDR, &addr)) {
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b970      	cbnz	r0, 8000b80 <main+0x48>
	net_if_ipv6_addr_add(iface, &addr, NET_ADDR_MANUAL, 0);
 8000b62:	2203      	movs	r2, #3
 8000b64:	4669      	mov	r1, sp
 8000b66:	4620      	mov	r0, r4
 8000b68:	f004 fcde 	bl	8005528 <net_if_ipv6_addr_add>
 8000b6c:	490a      	ldr	r1, [pc, #40]	; (8000b98 <main+0x60>)
 8000b6e:	466a      	mov	r2, sp
 8000b70:	2002      	movs	r0, #2
 8000b72:	f015 fb27 	bl	80161c4 <z_impl_net_addr_pton>
	if (net_addr_pton(AF_INET6, MCAST_IP6ADDR, &addr)) {
 8000b76:	b918      	cbnz	r0, 8000b80 <main+0x48>
	net_if_ipv6_maddr_add(iface, &addr);
 8000b78:	4669      	mov	r1, sp
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f004 ffca 	bl	8005b14 <net_if_ipv6_maddr_add>

	setup_dhcpv4(iface);

	setup_ipv6(iface);
	return 0;
}
 8000b80:	2000      	movs	r0, #0
 8000b82:	b004      	add	sp, #16
 8000b84:	bd10      	pop	{r4, pc}
 8000b86:	bf00      	nop
 8000b88:	08012fb7 	.word	0x08012fb7
 8000b8c:	24001d38 	.word	0x24001d38
 8000b90:	e0040001 	.word	0xe0040001
 8000b94:	0801ffee 	.word	0x0801ffee
 8000b98:	0801db8e 	.word	0x0801db8e

08000b9c <getopt>:
/*
 * getopt --
 *	Parse argc/argv argument vector.
 */
int getopt(int nargc, char *const nargv[], const char *ostr)
{
 8000b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	460e      	mov	r6, r1
 8000ba4:	4615      	mov	r5, r2
	struct getopt_state *state;
	char *oli; /* option letter list index */

	/* get getopt state of the current thread */
	state = getopt_state_get();
 8000ba6:	f000 f88f 	bl	8000cc8 <getopt_state_get>

	if (state->optreset || *state->place == 0) { /* update scanning pointer */
 8000baa:	68c3      	ldr	r3, [r0, #12]
	state = getopt_state_get();
 8000bac:	4604      	mov	r4, r0
	if (state->optreset || *state->place == 0) { /* update scanning pointer */
 8000bae:	b91b      	cbnz	r3, 8000bb8 <getopt+0x1c>
 8000bb0:	6943      	ldr	r3, [r0, #20]
 8000bb2:	781a      	ldrb	r2, [r3, #0]
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d13f      	bne.n	8000c38 <getopt+0x9c>
		state->optreset = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60e3      	str	r3, [r4, #12]
		state->place = nargv[state->optind];
 8000bbc:	6863      	ldr	r3, [r4, #4]
		if (state->optind >= nargc || *state->place++ != '-') {
 8000bbe:	42bb      	cmp	r3, r7
		state->place = nargv[state->optind];
 8000bc0:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
		if (state->optind >= nargc || *state->place++ != '-') {
 8000bc4:	db08      	blt.n	8000bd8 <getopt+0x3c>
		}
		state->optopt = *state->place++;
		if (state->optopt == '-' && *state->place == 0) {
			/* "--" => end of options */
			++state->optind;
			state->place = EMSG;
 8000bc6:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <getopt+0xf4>)
 8000bc8:	6163      	str	r3, [r4, #20]
			z_getopt_global_state_update(state);
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f000 f862 	bl	8000c94 <z_getopt_global_state_update>
			return -1;
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
		state->place = EMSG;
		++state->optind;
	}
	z_getopt_global_state_update(state);
	return state->optopt;	/* return option letter */
}
 8000bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (state->optind >= nargc || *state->place++ != '-') {
 8000bd8:	1c51      	adds	r1, r2, #1
 8000bda:	6161      	str	r1, [r4, #20]
 8000bdc:	f892 8000 	ldrb.w	r8, [r2]
 8000be0:	f1b8 0f2d 	cmp.w	r8, #45	; 0x2d
 8000be4:	d1ef      	bne.n	8000bc6 <getopt+0x2a>
		state->optopt = *state->place++;
 8000be6:	1c91      	adds	r1, r2, #2
 8000be8:	6161      	str	r1, [r4, #20]
 8000bea:	7851      	ldrb	r1, [r2, #1]
		if (state->optopt == '-' && *state->place == 0) {
 8000bec:	292d      	cmp	r1, #45	; 0x2d
		state->optopt = *state->place++;
 8000bee:	60a1      	str	r1, [r4, #8]
		if (state->optopt == '-' && *state->place == 0) {
 8000bf0:	d104      	bne.n	8000bfc <getopt+0x60>
 8000bf2:	7892      	ldrb	r2, [r2, #2]
 8000bf4:	b96a      	cbnz	r2, 8000c12 <getopt+0x76>
			++state->optind;
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	6063      	str	r3, [r4, #4]
 8000bfa:	e7e4      	b.n	8000bc6 <getopt+0x2a>
		if (state->optopt == 0) {
 8000bfc:	b949      	cbnz	r1, 8000c12 <getopt+0x76>
			state->place = EMSG;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <getopt+0xf4>)
			if (strchr(ostr, '-') == NULL) {
 8000c00:	4641      	mov	r1, r8
 8000c02:	4628      	mov	r0, r5
			state->place = EMSG;
 8000c04:	6163      	str	r3, [r4, #20]
			if (strchr(ostr, '-') == NULL) {
 8000c06:	f013 ffcf 	bl	8014ba8 <strchr>
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d0dd      	beq.n	8000bca <getopt+0x2e>
			state->optopt = '-';
 8000c0e:	f8c4 8008 	str.w	r8, [r4, #8]
	oli = strchr(ostr, state->optopt);
 8000c12:	68a1      	ldr	r1, [r4, #8]
 8000c14:	4628      	mov	r0, r5
 8000c16:	f013 ffc7 	bl	8014ba8 <strchr>
	if (state->optopt == ':' || oli == NULL) {
 8000c1a:	68a3      	ldr	r3, [r4, #8]
 8000c1c:	2b3a      	cmp	r3, #58	; 0x3a
 8000c1e:	6963      	ldr	r3, [r4, #20]
 8000c20:	d000      	beq.n	8000c24 <getopt+0x88>
 8000c22:	b970      	cbnz	r0, 8000c42 <getopt+0xa6>
		if (*state->place == 0) {
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b913      	cbnz	r3, 8000c2e <getopt+0x92>
			++state->optind;
 8000c28:	6863      	ldr	r3, [r4, #4]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	6063      	str	r3, [r4, #4]
		z_getopt_global_state_update(state);
 8000c2e:	4620      	mov	r0, r4
			z_getopt_global_state_update(state);
 8000c30:	f000 f830 	bl	8000c94 <z_getopt_global_state_update>
			return BADCH;
 8000c34:	203f      	movs	r0, #63	; 0x3f
 8000c36:	e7cd      	b.n	8000bd4 <getopt+0x38>
		state->optopt = *state->place++;
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	6142      	str	r2, [r0, #20]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	6083      	str	r3, [r0, #8]
 8000c40:	e7e7      	b.n	8000c12 <getopt+0x76>
	if (oli[1] != ':') {
 8000c42:	7842      	ldrb	r2, [r0, #1]
 8000c44:	2a3a      	cmp	r2, #58	; 0x3a
 8000c46:	d00b      	beq.n	8000c60 <getopt+0xc4>
		state->optarg = NULL;
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6122      	str	r2, [r4, #16]
		if (*state->place == 0) {
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b913      	cbnz	r3, 8000c56 <getopt+0xba>
		++state->optind;
 8000c50:	6863      	ldr	r3, [r4, #4]
 8000c52:	3301      	adds	r3, #1
 8000c54:	6063      	str	r3, [r4, #4]
	z_getopt_global_state_update(state);
 8000c56:	4620      	mov	r0, r4
 8000c58:	f000 f81c 	bl	8000c94 <z_getopt_global_state_update>
	return state->optopt;	/* return option letter */
 8000c5c:	68a0      	ldr	r0, [r4, #8]
 8000c5e:	e7b9      	b.n	8000bd4 <getopt+0x38>
		if (*state->place) {
 8000c60:	7819      	ldrb	r1, [r3, #0]
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <getopt+0xf4>)
 8000c64:	b111      	cbz	r1, 8000c6c <getopt+0xd0>
			state->optarg = nargv[state->optind];
 8000c66:	6123      	str	r3, [r4, #16]
		state->place = EMSG;
 8000c68:	6162      	str	r2, [r4, #20]
 8000c6a:	e7f1      	b.n	8000c50 <getopt+0xb4>
			++state->optind;
 8000c6c:	6863      	ldr	r3, [r4, #4]
 8000c6e:	3301      	adds	r3, #1
		} else if (nargc > ++state->optind) {
 8000c70:	429f      	cmp	r7, r3
 8000c72:	6063      	str	r3, [r4, #4]
 8000c74:	dd02      	ble.n	8000c7c <getopt+0xe0>
			state->optarg = nargv[state->optind];
 8000c76:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8000c7a:	e7f4      	b.n	8000c66 <getopt+0xca>
			state->place = EMSG;
 8000c7c:	6162      	str	r2, [r4, #20]
				z_getopt_global_state_update(state);
 8000c7e:	4620      	mov	r0, r4
			if (*ostr == ':') {
 8000c80:	782d      	ldrb	r5, [r5, #0]
 8000c82:	2d3a      	cmp	r5, #58	; 0x3a
 8000c84:	d1d4      	bne.n	8000c30 <getopt+0x94>
				z_getopt_global_state_update(state);
 8000c86:	f000 f805 	bl	8000c94 <z_getopt_global_state_update>
				return BADARG;
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	e7a2      	b.n	8000bd4 <getopt+0x38>
 8000c8e:	bf00      	nop
 8000c90:	0801ffee 	.word	0x0801ffee

08000c94 <z_getopt_global_state_update>:
/* This function is not thread safe. All threads using getopt are calling
 * this function.
 */
void z_getopt_global_state_update(struct getopt_state *state)
{
	opterr = state->opterr;
 8000c94:	6802      	ldr	r2, [r0, #0]
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <z_getopt_global_state_update+0x20>)
 8000c98:	601a      	str	r2, [r3, #0]
	optind = state->optind;
 8000c9a:	6842      	ldr	r2, [r0, #4]
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <z_getopt_global_state_update+0x24>)
 8000c9e:	601a      	str	r2, [r3, #0]
	optopt = state->optopt;
 8000ca0:	6882      	ldr	r2, [r0, #8]
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <z_getopt_global_state_update+0x28>)
 8000ca4:	601a      	str	r2, [r3, #0]
	optreset = state->optreset;
 8000ca6:	68c2      	ldr	r2, [r0, #12]
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <z_getopt_global_state_update+0x2c>)
 8000caa:	601a      	str	r2, [r3, #0]
	optarg = state->optarg;
 8000cac:	6902      	ldr	r2, [r0, #16]
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <z_getopt_global_state_update+0x30>)
 8000cb0:	601a      	str	r2, [r3, #0]
}
 8000cb2:	4770      	bx	lr
 8000cb4:	24000858 	.word	0x24000858
 8000cb8:	2400085c 	.word	0x2400085c
 8000cbc:	24001d48 	.word	0x24001d48
 8000cc0:	24001d4c 	.word	0x24001d4c
 8000cc4:	24001d44 	.word	0x24001d44

08000cc8 <getopt_state_get>:
		}
	}
#endif
	/* If not a shell thread return a common pointer */
	return &m_getopt_common_state;
}
 8000cc8:	4800      	ldr	r0, [pc, #0]	; (8000ccc <getopt_state_get+0x4>)
 8000cca:	4770      	bx	lr
 8000ccc:	24000840 	.word	0x24000840

08000cd0 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 8000cd0:	4b01      	ldr	r3, [pc, #4]	; (8000cd8 <char_out+0x8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4718      	bx	r3
 8000cd6:	bf00      	nop
 8000cd8:	24000860 	.word	0x24000860

08000cdc <__printk_hook_install>:
	_char_out = fn;
 8000cdc:	4b01      	ldr	r3, [pc, #4]	; (8000ce4 <__printk_hook_install+0x8>)
 8000cde:	6018      	str	r0, [r3, #0]
}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	24000860 	.word	0x24000860

08000ce8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 8000ce8:	b507      	push	{r0, r1, r2, lr}
 8000cea:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 8000cec:	2100      	movs	r1, #0
 8000cee:	4602      	mov	r2, r0
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <vprintk+0x18>)
 8000cf2:	9100      	str	r1, [sp, #0]
 8000cf4:	f000 f81c 	bl	8000d30 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8000cf8:	b003      	add	sp, #12
 8000cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cfe:	bf00      	nop
 8000d00:	08000cd1 	.word	0x08000cd1

08000d04 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8000d04:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
 8000d06:	2500      	movs	r5, #0
{
 8000d08:	b087      	sub	sp, #28
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	9500      	str	r5, [sp, #0]
	struct str_context ctx = { str, size, 0 };
 8000d0e:	9505      	str	r5, [sp, #20]
 8000d10:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8000d14:	a903      	add	r1, sp, #12
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <vsnprintk+0x28>)
 8000d18:	f000 f80a 	bl	8000d30 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
 8000d1c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 8000d20:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8000d22:	bfb8      	it	lt
 8000d24:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 8000d26:	b007      	add	sp, #28
 8000d28:	bd30      	pop	{r4, r5, pc}
 8000d2a:	bf00      	nop
 8000d2c:	0801305b 	.word	0x0801305b

08000d30 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 8000d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d34:	468b      	mov	fp, r1
 8000d36:	b091      	sub	sp, #68	; 0x44
 8000d38:	4692      	mov	sl, r2
 8000d3a:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000d3c:	2500      	movs	r5, #0
{
 8000d3e:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000d40:	f89a 0000 	ldrb.w	r0, [sl]
 8000d44:	b908      	cbnz	r0, 8000d4a <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000d46:	4628      	mov	r0, r5
 8000d48:	e364      	b.n	8001414 <z_cbvprintf_impl+0x6e4>
		if (*fp != '%') {
 8000d4a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8000d4c:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
 8000d50:	d007      	beq.n	8000d62 <z_cbvprintf_impl+0x32>
			OUTC('%');
 8000d52:	4659      	mov	r1, fp
 8000d54:	9b02      	ldr	r3, [sp, #8]
 8000d56:	4798      	blx	r3
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	f2c0 835b 	blt.w	8001414 <z_cbvprintf_impl+0x6e4>
 8000d5e:	3501      	adds	r5, #1
			break;
 8000d60:	e212      	b.n	8001188 <z_cbvprintf_impl+0x458>
		} state = {
 8000d62:	2218      	movs	r2, #24
 8000d64:	2100      	movs	r1, #0
 8000d66:	a80a      	add	r0, sp, #40	; 0x28
 8000d68:	f013 ff90 	bl	8014c8c <memset>
	if (*sp == '%') {
 8000d6c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000d70:	2b25      	cmp	r3, #37	; 0x25
 8000d72:	d078      	beq.n	8000e66 <z_cbvprintf_impl+0x136>
 8000d74:	2200      	movs	r2, #0
 8000d76:	4610      	mov	r0, r2
 8000d78:	4696      	mov	lr, r2
 8000d7a:	4694      	mov	ip, r2
 8000d7c:	4616      	mov	r6, r2
 8000d7e:	4639      	mov	r1, r7
		switch (*sp) {
 8000d80:	f817 3b01 	ldrb.w	r3, [r7], #1
 8000d84:	2b2b      	cmp	r3, #43	; 0x2b
 8000d86:	f000 809d 	beq.w	8000ec4 <z_cbvprintf_impl+0x194>
 8000d8a:	f200 8094 	bhi.w	8000eb6 <z_cbvprintf_impl+0x186>
 8000d8e:	2b20      	cmp	r3, #32
 8000d90:	f000 809b 	beq.w	8000eca <z_cbvprintf_impl+0x19a>
 8000d94:	2b23      	cmp	r3, #35	; 0x23
 8000d96:	f000 809b 	beq.w	8000ed0 <z_cbvprintf_impl+0x1a0>
 8000d9a:	b12e      	cbz	r6, 8000da8 <z_cbvprintf_impl+0x78>
 8000d9c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8000da0:	f046 0604 	orr.w	r6, r6, #4
 8000da4:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000da8:	f1bc 0f00 	cmp.w	ip, #0
 8000dac:	d005      	beq.n	8000dba <z_cbvprintf_impl+0x8a>
 8000dae:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8000db2:	f046 0608 	orr.w	r6, r6, #8
 8000db6:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000dba:	f1be 0f00 	cmp.w	lr, #0
 8000dbe:	d005      	beq.n	8000dcc <z_cbvprintf_impl+0x9c>
 8000dc0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8000dc4:	f046 0610 	orr.w	r6, r6, #16
 8000dc8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8000dcc:	b128      	cbz	r0, 8000dda <z_cbvprintf_impl+0xaa>
 8000dce:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8000dd2:	f040 0020 	orr.w	r0, r0, #32
 8000dd6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8000dda:	b12a      	cbz	r2, 8000de8 <z_cbvprintf_impl+0xb8>
 8000ddc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000de4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 8000de8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000dec:	f002 0044 	and.w	r0, r2, #68	; 0x44
 8000df0:	2844      	cmp	r0, #68	; 0x44
 8000df2:	d103      	bne.n	8000dfc <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 8000df4:	f36f 1286 	bfc	r2, #6, #1
 8000df8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
 8000dfc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 8000e00:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 8000e02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e06:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 8000e0a:	d17b      	bne.n	8000f04 <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
 8000e0c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
 8000e10:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 8000e12:	f042 0201 	orr.w	r2, r2, #1
 8000e16:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 8000e1a:	781a      	ldrb	r2, [r3, #0]
 8000e1c:	2a2e      	cmp	r2, #46	; 0x2e
 8000e1e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8000e22:	bf0c      	ite	eq
 8000e24:	2101      	moveq	r1, #1
 8000e26:	2100      	movne	r1, #0
 8000e28:	f361 0241 	bfi	r2, r1, #1, #1
 8000e2c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 8000e30:	d174      	bne.n	8000f1c <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
 8000e32:	785a      	ldrb	r2, [r3, #1]
 8000e34:	2a2a      	cmp	r2, #42	; 0x2a
 8000e36:	d06a      	beq.n	8000f0e <z_cbvprintf_impl+0x1de>
	++sp;
 8000e38:	3301      	adds	r3, #1
	size_t val = 0;
 8000e3a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 8000e3c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e44:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 8000e48:	2f09      	cmp	r7, #9
 8000e4a:	f240 808e 	bls.w	8000f6a <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000e4e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
 8000e52:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 8000e54:	f3c2 0040 	ubfx	r0, r2, #1, #1
 8000e58:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
 8000e5c:	f361 0241 	bfi	r2, r1, #1, #1
 8000e60:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 8000e64:	e05a      	b.n	8000f1c <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
 8000e66:	f10a 0702 	add.w	r7, sl, #2
 8000e6a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
 8000e6e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000e72:	07d9      	lsls	r1, r3, #31
 8000e74:	f140 8149 	bpl.w	800110a <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
 8000e78:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
 8000e7c:	f1b9 0f00 	cmp.w	r9, #0
 8000e80:	da07      	bge.n	8000e92 <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
 8000e82:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
 8000e86:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
 8000e8a:	f042 0204 	orr.w	r2, r2, #4
 8000e8e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
 8000e92:	075a      	lsls	r2, r3, #29
 8000e94:	f140 8142 	bpl.w	800111c <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
 8000e98:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 8000e9c:	f1b8 0f00 	cmp.w	r8, #0
 8000ea0:	f280 8141 	bge.w	8001126 <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
 8000ea4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000ea8:	f36f 0341 	bfc	r3, #1, #1
 8000eac:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 8000eb0:	f04f 38ff 	mov.w	r8, #4294967295
 8000eb4:	e137      	b.n	8001126 <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
 8000eb6:	2b2d      	cmp	r3, #45	; 0x2d
 8000eb8:	d00c      	beq.n	8000ed4 <z_cbvprintf_impl+0x1a4>
 8000eba:	2b30      	cmp	r3, #48	; 0x30
 8000ebc:	f47f af6d 	bne.w	8000d9a <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
 8000ec0:	2201      	movs	r2, #1
	} while (loop);
 8000ec2:	e75c      	b.n	8000d7e <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
 8000ec4:	f04f 0c01 	mov.w	ip, #1
 8000ec8:	e759      	b.n	8000d7e <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
 8000eca:	f04f 0e01 	mov.w	lr, #1
 8000ece:	e756      	b.n	8000d7e <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	e754      	b.n	8000d7e <z_cbvprintf_impl+0x4e>
		switch (*sp) {
 8000ed4:	2601      	movs	r6, #1
 8000ed6:	e752      	b.n	8000d7e <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
 8000ed8:	fb0c 0202 	mla	r2, ip, r2, r0
 8000edc:	4633      	mov	r3, r6
 8000ede:	3a30      	subs	r2, #48	; 0x30
 8000ee0:	461e      	mov	r6, r3
 8000ee2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000ee6:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
 8000eea:	2f09      	cmp	r7, #9
 8000eec:	d9f4      	bls.n	8000ed8 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d093      	beq.n	8000e1a <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 8000ef2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
 8000ef6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 8000ef8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 8000efa:	f362 0141 	bfi	r1, r2, #1, #1
 8000efe:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8000f02:	e78a      	b.n	8000e1a <z_cbvprintf_impl+0xea>
 8000f04:	460b      	mov	r3, r1
	size_t val = 0;
 8000f06:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 8000f08:	f04f 0c0a 	mov.w	ip, #10
 8000f0c:	e7e8      	b.n	8000ee0 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
 8000f0e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
 8000f12:	3302      	adds	r3, #2
		conv->prec_star = true;
 8000f14:	f042 0204 	orr.w	r2, r2, #4
 8000f18:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
 8000f1c:	461f      	mov	r7, r3
 8000f1e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8000f22:	2a6c      	cmp	r2, #108	; 0x6c
 8000f24:	d041      	beq.n	8000faa <z_cbvprintf_impl+0x27a>
 8000f26:	d825      	bhi.n	8000f74 <z_cbvprintf_impl+0x244>
 8000f28:	2a68      	cmp	r2, #104	; 0x68
 8000f2a:	d02b      	beq.n	8000f84 <z_cbvprintf_impl+0x254>
 8000f2c:	2a6a      	cmp	r2, #106	; 0x6a
 8000f2e:	d046      	beq.n	8000fbe <z_cbvprintf_impl+0x28e>
 8000f30:	2a4c      	cmp	r2, #76	; 0x4c
 8000f32:	d04c      	beq.n	8000fce <z_cbvprintf_impl+0x29e>
 8000f34:	461f      	mov	r7, r3
	conv->specifier = *sp++;
 8000f36:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000f3a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
 8000f3e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8000f40:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 8000f44:	f200 80d9 	bhi.w	80010fa <z_cbvprintf_impl+0x3ca>
 8000f48:	2a57      	cmp	r2, #87	; 0x57
 8000f4a:	d84d      	bhi.n	8000fe8 <z_cbvprintf_impl+0x2b8>
 8000f4c:	2a41      	cmp	r2, #65	; 0x41
 8000f4e:	d003      	beq.n	8000f58 <z_cbvprintf_impl+0x228>
 8000f50:	3a45      	subs	r2, #69	; 0x45
 8000f52:	2a02      	cmp	r2, #2
 8000f54:	f200 80d1 	bhi.w	80010fa <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
 8000f58:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	f362 0302 	bfi	r3, r2, #0, #3
 8000f62:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
 8000f66:	2301      	movs	r3, #1
			break;
 8000f68:	e09e      	b.n	80010a8 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
 8000f6a:	fb06 2101 	mla	r1, r6, r1, r2
 8000f6e:	4603      	mov	r3, r0
 8000f70:	3930      	subs	r1, #48	; 0x30
 8000f72:	e764      	b.n	8000e3e <z_cbvprintf_impl+0x10e>
	switch (*sp) {
 8000f74:	2a74      	cmp	r2, #116	; 0x74
 8000f76:	d026      	beq.n	8000fc6 <z_cbvprintf_impl+0x296>
 8000f78:	2a7a      	cmp	r2, #122	; 0x7a
 8000f7a:	d1db      	bne.n	8000f34 <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
 8000f7c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000f80:	2206      	movs	r2, #6
 8000f82:	e00d      	b.n	8000fa0 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
 8000f84:	785a      	ldrb	r2, [r3, #1]
 8000f86:	2a68      	cmp	r2, #104	; 0x68
 8000f88:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8000f8c:	d106      	bne.n	8000f9c <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
 8000f8e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000f90:	f361 02c6 	bfi	r2, r1, #3, #4
			++sp;
 8000f94:	1c9f      	adds	r7, r3, #2
			conv->length_mod = LENGTH_LL;
 8000f96:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
 8000f9a:	e7cc      	b.n	8000f36 <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
 8000fa0:	f362 03c6 	bfi	r3, r2, #3, #4
 8000fa4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 8000fa8:	e7c5      	b.n	8000f36 <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
 8000faa:	785a      	ldrb	r2, [r3, #1]
 8000fac:	2a6c      	cmp	r2, #108	; 0x6c
 8000fae:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8000fb2:	d101      	bne.n	8000fb8 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	e7eb      	b.n	8000f90 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
 8000fb8:	4613      	mov	r3, r2
 8000fba:	2203      	movs	r2, #3
 8000fbc:	e7f0      	b.n	8000fa0 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
 8000fbe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	e7ec      	b.n	8000fa0 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
 8000fc6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000fca:	2207      	movs	r2, #7
 8000fcc:	e7e8      	b.n	8000fa0 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
 8000fce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8000fd2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000fd6:	f023 0302 	bic.w	r3, r3, #2
 8000fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
 8000fe6:	e7a6      	b.n	8000f36 <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
 8000fe8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
 8000fec:	2920      	cmp	r1, #32
 8000fee:	f200 8084 	bhi.w	80010fa <z_cbvprintf_impl+0x3ca>
 8000ff2:	a001      	add	r0, pc, #4	; (adr r0, 8000ff8 <z_cbvprintf_impl+0x2c8>)
 8000ff4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8000ff8:	080010bd 	.word	0x080010bd
 8000ffc:	080010fb 	.word	0x080010fb
 8001000:	080010fb 	.word	0x080010fb
 8001004:	080010fb 	.word	0x080010fb
 8001008:	080010fb 	.word	0x080010fb
 800100c:	080010fb 	.word	0x080010fb
 8001010:	080010fb 	.word	0x080010fb
 8001014:	080010fb 	.word	0x080010fb
 8001018:	080010fb 	.word	0x080010fb
 800101c:	08000f59 	.word	0x08000f59
 8001020:	080010fb 	.word	0x080010fb
 8001024:	080010bd 	.word	0x080010bd
 8001028:	0800107d 	.word	0x0800107d
 800102c:	08000f59 	.word	0x08000f59
 8001030:	08000f59 	.word	0x08000f59
 8001034:	08000f59 	.word	0x08000f59
 8001038:	080010fb 	.word	0x080010fb
 800103c:	0800107d 	.word	0x0800107d
 8001040:	080010fb 	.word	0x080010fb
 8001044:	080010fb 	.word	0x080010fb
 8001048:	080010fb 	.word	0x080010fb
 800104c:	080010fb 	.word	0x080010fb
 8001050:	080010c5 	.word	0x080010c5
 8001054:	080010bd 	.word	0x080010bd
 8001058:	080010e1 	.word	0x080010e1
 800105c:	080010fb 	.word	0x080010fb
 8001060:	080010fb 	.word	0x080010fb
 8001064:	080010e1 	.word	0x080010e1
 8001068:	080010fb 	.word	0x080010fb
 800106c:	080010bd 	.word	0x080010bd
 8001070:	080010fb 	.word	0x080010fb
 8001074:	080010fb 	.word	0x080010fb
 8001078:	080010bd 	.word	0x080010bd
		conv->specifier_cat = SPECIFIER_SINT;
 800107c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8001080:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001082:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 8001086:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 800108a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 800108c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
 8001090:	bf02      	ittt	eq
 8001092:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
 8001096:	f041 0101 	orreq.w	r1, r1, #1
 800109a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 800109e:	2a63      	cmp	r2, #99	; 0x63
 80010a0:	d131      	bne.n	8001106 <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80010a2:	3b00      	subs	r3, #0
 80010a4:	bf18      	it	ne
 80010a6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 80010a8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80010ac:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80010b0:	430b      	orrs	r3, r1
 80010b2:	f363 0241 	bfi	r2, r3, #1, #1
 80010b6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 80010ba:	e6d8      	b.n	8000e6e <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
 80010bc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80010c0:	2002      	movs	r0, #2
 80010c2:	e7de      	b.n	8001082 <z_cbvprintf_impl+0x352>
		if (conv->length_mod == LENGTH_UPPER_L) {
 80010c4:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 80010c8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80010cc:	2103      	movs	r1, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80010ce:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
 80010d2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 80010d6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
 80010d8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 80010dc:	4143      	adcs	r3, r0
 80010de:	e7e3      	b.n	80010a8 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 80010e0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80010e4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
 80010e6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 80010ea:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 80010ee:	bf14      	ite	ne
 80010f0:	2301      	movne	r3, #1
 80010f2:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
 80010f4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 80010f8:	e7d6      	b.n	80010a8 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
 80010fa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
 8001106:	2300      	movs	r3, #0
 8001108:	e7ce      	b.n	80010a8 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
 800110a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 800110e:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8001110:	bfb4      	ite	lt
 8001112:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
 8001116:	f04f 39ff 	movge.w	r9, #4294967295
 800111a:	e6ba      	b.n	8000e92 <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
 800111c:	079b      	lsls	r3, r3, #30
 800111e:	f57f aec7 	bpl.w	8000eb0 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
 8001122:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
 8001126:	2300      	movs	r3, #0
			= (enum length_mod_enum)conv->length_mod;
 8001128:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_pre_exp = 0;
 800112c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 8001130:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
 8001134:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		enum specifier_cat_enum specifier_cat
 8001138:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 800113c:	2b01      	cmp	r3, #1
 800113e:	d135      	bne.n	80011ac <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
 8001140:	1ecb      	subs	r3, r1, #3
 8001142:	2b04      	cmp	r3, #4
 8001144:	d822      	bhi.n	800118c <z_cbvprintf_impl+0x45c>
 8001146:	e8df f003 	tbb	[pc, r3]
 800114a:	0903      	.short	0x0903
 800114c:	2109      	.short	0x2109
 800114e:	21          	.byte	0x21
 800114f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8001150:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 8001154:	17da      	asrs	r2, r3, #31
 8001156:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 800115a:	e006      	b.n	800116a <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
 800115c:	3407      	adds	r4, #7
 800115e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8001162:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8001166:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 800116a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800116e:	f013 0603 	ands.w	r6, r3, #3
 8001172:	d059      	beq.n	8001228 <z_cbvprintf_impl+0x4f8>
			OUTS(sp, fp);
 8001174:	463b      	mov	r3, r7
 8001176:	4652      	mov	r2, sl
 8001178:	4659      	mov	r1, fp
 800117a:	9802      	ldr	r0, [sp, #8]
 800117c:	f012 fab2 	bl	80136e4 <outs>
 8001180:	2800      	cmp	r0, #0
 8001182:	f2c0 8147 	blt.w	8001414 <z_cbvprintf_impl+0x6e4>
 8001186:	4405      	add	r5, r0
			continue;
 8001188:	46ba      	mov	sl, r7
 800118a:	e5d9      	b.n	8000d40 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 800118c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8001190:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8001192:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8001196:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 800119a:	d102      	bne.n	80011a2 <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
 800119c:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
 80011a0:	e7d8      	b.n	8001154 <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
 80011a2:	2902      	cmp	r1, #2
 80011a4:	d1e1      	bne.n	800116a <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
 80011a6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80011aa:	e7d3      	b.n	8001154 <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d129      	bne.n	8001204 <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
 80011b0:	1ecb      	subs	r3, r1, #3
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d813      	bhi.n	80011de <z_cbvprintf_impl+0x4ae>
 80011b6:	e8df f003 	tbb	[pc, r3]
 80011ba:	0a03      	.short	0x0a03
 80011bc:	120a      	.short	0x120a
 80011be:	12          	.byte	0x12
 80011bf:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 80011c4:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 80011c6:	920a      	str	r2, [sp, #40]	; 0x28
 80011c8:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
 80011ca:	4604      	mov	r4, r0
 80011cc:	e7cd      	b.n	800116a <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
 80011ce:	1de0      	adds	r0, r4, #7
 80011d0:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 80011d4:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 80011d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 80011dc:	e7f5      	b.n	80011ca <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
 80011de:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 80011e2:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 80011e4:	930a      	str	r3, [sp, #40]	; 0x28
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 80011ec:	d105      	bne.n	80011fa <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
 80011ee:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
 80011f2:	930a      	str	r3, [sp, #40]	; 0x28
 80011f4:	2300      	movs	r3, #0
 80011f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80011f8:	e7b7      	b.n	800116a <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
 80011fa:	2902      	cmp	r1, #2
 80011fc:	d1b5      	bne.n	800116a <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
 80011fe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8001202:	e7f6      	b.n	80011f2 <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
 8001204:	2b04      	cmp	r3, #4
 8001206:	d109      	bne.n	800121c <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
 8001208:	1de3      	adds	r3, r4, #7
 800120a:	f023 0307 	bic.w	r3, r3, #7
 800120e:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800121a:	e7a6      	b.n	800116a <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
 800121c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 800121e:	bf04      	itt	eq
 8001220:	f854 3b04 	ldreq.w	r3, [r4], #4
 8001224:	930a      	streq	r3, [sp, #40]	; 0x28
 8001226:	e7a0      	b.n	800116a <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
 8001228:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800122c:	2878      	cmp	r0, #120	; 0x78
 800122e:	d8ab      	bhi.n	8001188 <z_cbvprintf_impl+0x458>
 8001230:	2862      	cmp	r0, #98	; 0x62
 8001232:	d822      	bhi.n	800127a <z_cbvprintf_impl+0x54a>
 8001234:	2825      	cmp	r0, #37	; 0x25
 8001236:	f43f ad8c 	beq.w	8000d52 <z_cbvprintf_impl+0x22>
 800123a:	2858      	cmp	r0, #88	; 0x58
 800123c:	d1a4      	bne.n	8001188 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
 800123e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8001242:	aa0c      	add	r2, sp, #48	; 0x30
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	ab04      	add	r3, sp, #16
 8001248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800124c:	f012 fa04 	bl	8013658 <encode_uint>
 8001250:	4682      	mov	sl, r0
			if (precision >= 0) {
 8001252:	f1b8 0f00 	cmp.w	r8, #0
 8001256:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 800125a:	db0c      	blt.n	8001276 <z_cbvprintf_impl+0x546>
				conv->flag_zero = false;
 800125c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8001260:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
 8001264:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8001268:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 800126a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 800126e:	d902      	bls.n	8001276 <z_cbvprintf_impl+0x546>
					conv->pad0_value = precision - (int)len;
 8001270:	eba8 0303 	sub.w	r3, r8, r3
 8001274:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8001276:	4680      	mov	r8, r0
 8001278:	e03e      	b.n	80012f8 <z_cbvprintf_impl+0x5c8>
		switch (conv->specifier) {
 800127a:	3863      	subs	r0, #99	; 0x63
 800127c:	2815      	cmp	r0, #21
 800127e:	d883      	bhi.n	8001188 <z_cbvprintf_impl+0x458>
 8001280:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <z_cbvprintf_impl+0x558>)
 8001282:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8001286:	bf00      	nop
 8001288:	08001309 	.word	0x08001309
 800128c:	0800136d 	.word	0x0800136d
 8001290:	08001189 	.word	0x08001189
 8001294:	08001189 	.word	0x08001189
 8001298:	08001189 	.word	0x08001189
 800129c:	08001189 	.word	0x08001189
 80012a0:	0800136d 	.word	0x0800136d
 80012a4:	08001189 	.word	0x08001189
 80012a8:	08001189 	.word	0x08001189
 80012ac:	08001189 	.word	0x08001189
 80012b0:	08001189 	.word	0x08001189
 80012b4:	080013c9 	.word	0x080013c9
 80012b8:	08001397 	.word	0x08001397
 80012bc:	0800139b 	.word	0x0800139b
 80012c0:	08001189 	.word	0x08001189
 80012c4:	08001189 	.word	0x08001189
 80012c8:	080012e1 	.word	0x080012e1
 80012cc:	08001189 	.word	0x08001189
 80012d0:	08001397 	.word	0x08001397
 80012d4:	08001189 	.word	0x08001189
 80012d8:	08001189 	.word	0x08001189
 80012dc:	08001397 	.word	0x08001397
			if (precision >= 0) {
 80012e0:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 80012e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
 80012e8:	db0a      	blt.n	8001300 <z_cbvprintf_impl+0x5d0>
				len = strnlen(bps, precision);
 80012ea:	4641      	mov	r1, r8
 80012ec:	4650      	mov	r0, sl
 80012ee:	f013 fcf5 	bl	8014cdc <strnlen>
			bpe = bps + len;
 80012f2:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
 80012f6:	2600      	movs	r6, #0
		if (bps == NULL) {
 80012f8:	f1ba 0f00 	cmp.w	sl, #0
 80012fc:	d10c      	bne.n	8001318 <z_cbvprintf_impl+0x5e8>
 80012fe:	e743      	b.n	8001188 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
 8001300:	4650      	mov	r0, sl
 8001302:	f013 fc6b 	bl	8014bdc <strlen>
 8001306:	e7f4      	b.n	80012f2 <z_cbvprintf_impl+0x5c2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8001308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			break;
 800130a:	2600      	movs	r6, #0
			bps = buf;
 800130c:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
 8001310:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8001314:	f88d 3010 	strb.w	r3, [sp, #16]
		size_t nj_len = (bpe - bps);
 8001318:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
 800131c:	b106      	cbz	r6, 8001320 <z_cbvprintf_impl+0x5f0>
			nj_len += 1U;
 800131e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8001320:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8001324:	06d0      	lsls	r0, r2, #27
 8001326:	d569      	bpl.n	80013fc <z_cbvprintf_impl+0x6cc>
			nj_len += 2U;
 8001328:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 800132a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 800132c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 800132e:	bf48      	it	mi
 8001330:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 8001332:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8001334:	bf48      	it	mi
 8001336:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8001338:	f1b9 0f00 	cmp.w	r9, #0
 800133c:	dd77      	ble.n	800142e <z_cbvprintf_impl+0x6fe>
			if (!conv->flag_dash) {
 800133e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8001342:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
 8001346:	f3c2 0380 	ubfx	r3, r2, #2, #1
 800134a:	9303      	str	r3, [sp, #12]
 800134c:	0753      	lsls	r3, r2, #29
 800134e:	d46e      	bmi.n	800142e <z_cbvprintf_impl+0x6fe>
				if (conv->flag_zero) {
 8001350:	0650      	lsls	r0, r2, #25
 8001352:	d562      	bpl.n	800141a <z_cbvprintf_impl+0x6ea>
					if (sign != 0) {
 8001354:	b146      	cbz	r6, 8001368 <z_cbvprintf_impl+0x638>
						OUTC(sign);
 8001356:	4659      	mov	r1, fp
 8001358:	4630      	mov	r0, r6
 800135a:	9b02      	ldr	r3, [sp, #8]
 800135c:	4798      	blx	r3
 800135e:	2800      	cmp	r0, #0
 8001360:	db58      	blt.n	8001414 <z_cbvprintf_impl+0x6e4>
						sign = 0;
 8001362:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8001364:	3501      	adds	r5, #1
						sign = 0;
 8001366:	461e      	mov	r6, r3
					pad = '0';
 8001368:	2330      	movs	r3, #48	; 0x30
 800136a:	e057      	b.n	800141c <z_cbvprintf_impl+0x6ec>
			if (conv->flag_plus) {
 800136c:	071e      	lsls	r6, r3, #28
 800136e:	d410      	bmi.n	8001392 <z_cbvprintf_impl+0x662>
				sign = ' ';
 8001370:	f013 0610 	ands.w	r6, r3, #16
 8001374:	bf18      	it	ne
 8001376:	2620      	movne	r6, #32
			sint = value->sint;
 8001378:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 800137c:	2b00      	cmp	r3, #0
 800137e:	f6bf af5e 	bge.w	800123e <z_cbvprintf_impl+0x50e>
				value->uint = (uint_value_type)-sint;
 8001382:	4252      	negs	r2, r2
				sign = '-';
 8001384:	f04f 062d 	mov.w	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 8001388:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800138c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001390:	e755      	b.n	800123e <z_cbvprintf_impl+0x50e>
				sign = '+';
 8001392:	262b      	movs	r6, #43	; 0x2b
 8001394:	e7f0      	b.n	8001378 <z_cbvprintf_impl+0x648>
		switch (conv->specifier) {
 8001396:	2600      	movs	r6, #0
 8001398:	e751      	b.n	800123e <z_cbvprintf_impl+0x50e>
			if (value->ptr != NULL) {
 800139a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800139c:	b340      	cbz	r0, 80013f0 <z_cbvprintf_impl+0x6c0>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 800139e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80013a2:	aa0c      	add	r2, sp, #48	; 0x30
 80013a4:	2100      	movs	r1, #0
		char sign = 0;
 80013a6:	2600      	movs	r6, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	ab04      	add	r3, sp, #16
 80013ac:	f012 f954 	bl	8013658 <encode_uint>
				conv->altform_0c = true;
 80013b0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80013b4:	4682      	mov	sl, r0
				conv->altform_0c = true;
 80013b6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80013ba:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
 80013c6:	e744      	b.n	8001252 <z_cbvprintf_impl+0x522>
				store_count(conv, value->ptr, count);
 80013c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 80013ca:	2907      	cmp	r1, #7
 80013cc:	f63f aedc 	bhi.w	8001188 <z_cbvprintf_impl+0x458>
 80013d0:	e8df f001 	tbb	[pc, r1]
 80013d4:	0c06040c 	.word	0x0c06040c
 80013d8:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 80013dc:	701d      	strb	r5, [r3, #0]
		break;
 80013de:	e6d3      	b.n	8001188 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
 80013e0:	801d      	strh	r5, [r3, #0]
		break;
 80013e2:	e6d1      	b.n	8001188 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
 80013e4:	17ea      	asrs	r2, r5, #31
 80013e6:	e9c3 5200 	strd	r5, r2, [r3]
		break;
 80013ea:	e6cd      	b.n	8001188 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 80013ec:	601d      	str	r5, [r3, #0]
		break;
 80013ee:	e6cb      	b.n	8001188 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
 80013f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80014b8 <z_cbvprintf_impl+0x788>
 80013f4:	4606      	mov	r6, r0
			bpe = bps + 5;
 80013f6:	f10a 0805 	add.w	r8, sl, #5
 80013fa:	e78d      	b.n	8001318 <z_cbvprintf_impl+0x5e8>
		} else if (conv->altform_0) {
 80013fc:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 80013fe:	bf48      	it	mi
 8001400:	3301      	addmi	r3, #1
 8001402:	e792      	b.n	800132a <z_cbvprintf_impl+0x5fa>
					OUTC(pad);
 8001404:	4618      	mov	r0, r3
 8001406:	9303      	str	r3, [sp, #12]
 8001408:	4659      	mov	r1, fp
 800140a:	9b02      	ldr	r3, [sp, #8]
 800140c:	4798      	blx	r3
 800140e:	2800      	cmp	r0, #0
 8001410:	9b03      	ldr	r3, [sp, #12]
 8001412:	da04      	bge.n	800141e <z_cbvprintf_impl+0x6ee>
#undef OUTS
#undef OUTC
}
 8001414:	b011      	add	sp, #68	; 0x44
 8001416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 800141a:	2320      	movs	r3, #32
 800141c:	444d      	add	r5, r9
 800141e:	464a      	mov	r2, r9
 8001420:	eba5 0109 	sub.w	r1, r5, r9
				while (width-- > 0) {
 8001424:	f109 39ff 	add.w	r9, r9, #4294967295
 8001428:	2a00      	cmp	r2, #0
 800142a:	dceb      	bgt.n	8001404 <z_cbvprintf_impl+0x6d4>
 800142c:	460d      	mov	r5, r1
		if (sign != 0) {
 800142e:	b136      	cbz	r6, 800143e <z_cbvprintf_impl+0x70e>
			OUTC(sign);
 8001430:	4659      	mov	r1, fp
 8001432:	4630      	mov	r0, r6
 8001434:	9b02      	ldr	r3, [sp, #8]
 8001436:	4798      	blx	r3
 8001438:	2800      	cmp	r0, #0
 800143a:	dbeb      	blt.n	8001414 <z_cbvprintf_impl+0x6e4>
 800143c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 800143e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8001442:	06d9      	lsls	r1, r3, #27
 8001444:	d401      	bmi.n	800144a <z_cbvprintf_impl+0x71a>
 8001446:	071a      	lsls	r2, r3, #28
 8001448:	d506      	bpl.n	8001458 <z_cbvprintf_impl+0x728>
				OUTC('0');
 800144a:	4659      	mov	r1, fp
 800144c:	2030      	movs	r0, #48	; 0x30
 800144e:	9b02      	ldr	r3, [sp, #8]
 8001450:	4798      	blx	r3
 8001452:	2800      	cmp	r0, #0
 8001454:	dbde      	blt.n	8001414 <z_cbvprintf_impl+0x6e4>
 8001456:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8001458:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800145c:	06db      	lsls	r3, r3, #27
 800145e:	d507      	bpl.n	8001470 <z_cbvprintf_impl+0x740>
				OUTC(conv->specifier);
 8001460:	4659      	mov	r1, fp
 8001462:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8001466:	9b02      	ldr	r3, [sp, #8]
 8001468:	4798      	blx	r3
 800146a:	2800      	cmp	r0, #0
 800146c:	dbd2      	blt.n	8001414 <z_cbvprintf_impl+0x6e4>
 800146e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8001470:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8001472:	442e      	add	r6, r5
 8001474:	1b73      	subs	r3, r6, r5
 8001476:	2b00      	cmp	r3, #0
 8001478:	dc16      	bgt.n	80014a8 <z_cbvprintf_impl+0x778>
			OUTS(bps, bpe);
 800147a:	4643      	mov	r3, r8
 800147c:	4652      	mov	r2, sl
 800147e:	4659      	mov	r1, fp
 8001480:	9802      	ldr	r0, [sp, #8]
 8001482:	f012 f92f 	bl	80136e4 <outs>
 8001486:	2800      	cmp	r0, #0
 8001488:	dbc4      	blt.n	8001414 <z_cbvprintf_impl+0x6e4>
 800148a:	4405      	add	r5, r0
		while (width > 0) {
 800148c:	44a9      	add	r9, r5
 800148e:	eba9 0305 	sub.w	r3, r9, r5
 8001492:	2b00      	cmp	r3, #0
 8001494:	f77f ae78 	ble.w	8001188 <z_cbvprintf_impl+0x458>
			OUTC(' ');
 8001498:	4659      	mov	r1, fp
 800149a:	2020      	movs	r0, #32
 800149c:	9b02      	ldr	r3, [sp, #8]
 800149e:	4798      	blx	r3
 80014a0:	2800      	cmp	r0, #0
 80014a2:	dbb7      	blt.n	8001414 <z_cbvprintf_impl+0x6e4>
 80014a4:	3501      	adds	r5, #1
			--width;
 80014a6:	e7f2      	b.n	800148e <z_cbvprintf_impl+0x75e>
				OUTC('0');
 80014a8:	4659      	mov	r1, fp
 80014aa:	2030      	movs	r0, #48	; 0x30
 80014ac:	9b02      	ldr	r3, [sp, #8]
 80014ae:	4798      	blx	r3
 80014b0:	2800      	cmp	r0, #0
 80014b2:	dbaf      	blt.n	8001414 <z_cbvprintf_impl+0x6e4>
 80014b4:	3501      	adds	r5, #1
 80014b6:	e7dd      	b.n	8001474 <z_cbvprintf_impl+0x744>
 80014b8:	0801dbc0 	.word	0x0801dbc0

080014bc <stm32h7_init>:
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int stm32h7_init(void)
{
 80014bc:	b5f0      	push	{r4, r5, r6, r7, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 80014be:	f04f 0310 	mov.w	r3, #16
 80014c2:	f3ef 8011 	mrs	r0, BASEPRI
 80014c6:	f383 8812 	msr	BASEPRI_MAX, r3
 80014ca:	f3bf 8f6f 	isb	sy
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014ce:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <stm32h7_init+0xe4>)
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80014d6:	d111      	bne.n	80014fc <stm32h7_init+0x40>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014dc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014e0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014e8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014f2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014f8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	SCB_EnableICache();

	if (IS_ENABLED(CONFIG_DCACHE)) {
		if (!(SCB->CCR & SCB_CCR_DC_Msk)) {
 80014fc:	4a28      	ldr	r2, [pc, #160]	; (80015a0 <stm32h7_init+0xe4>)
 80014fe:	6953      	ldr	r3, [r2, #20]
 8001500:	03d9      	lsls	r1, r3, #15
 8001502:	d427      	bmi.n	8001554 <stm32h7_init+0x98>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001504:	6953      	ldr	r3, [r2, #20]
 8001506:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800150a:	d123      	bne.n	8001554 <stm32h7_init+0x98>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800150c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001510:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001514:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001518:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800151c:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001520:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001524:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001526:	ea03 0705 	and.w	r7, r3, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800152a:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800152c:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001530:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001532:	f8c2 6260 	str.w	r6, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001536:	d2f9      	bcs.n	800152c <stm32h7_init+0x70>
    } while(sets-- != 0U);
 8001538:	3b20      	subs	r3, #32
 800153a:	f113 0f20 	cmn.w	r3, #32
 800153e:	d1f2      	bne.n	8001526 <stm32h7_init+0x6a>
 8001540:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001544:	6953      	ldr	r3, [r2, #20]
 8001546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154a:	6153      	str	r3, [r2, #20]
 800154c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001550:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8001554:	f380 8811 	msr	BASEPRI, r0
 8001558:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 64 MHz from HSI */
	SystemCoreClock = 64000000;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <stm32h7_init+0xe8>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <stm32h7_init+0xec>)
 8001560:	601a      	str	r2, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <stm32h7_init+0xf0>)
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	f022 0207 	bic.w	r2, r2, #7
 800156a:	f042 0202 	orr.w	r2, r2, #2
 800156e:	60da      	str	r2, [r3, #12]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8001570:	699a      	ldr	r2, [r3, #24]
 8001572:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001576:	619a      	str	r2, [r3, #24]
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8001578:	699a      	ldr	r2, [r3, #24]
 800157a:	0492      	lsls	r2, r2, #18
 800157c:	d5fc      	bpl.n	8001578 <stm32h7_init+0xbc>
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <stm32h7_init+0xf4>)
 8001580:	681a      	ldr	r2, [r3, #0]
	 * 2.2.9: Reading from AXI SRAM may lead to data read corruption
	 * Workaround: Set the READ_ISS_OVERRIDE bit in the AXI_TARG7_FN_MOD
	 * register.
	 * Applicable only to RevY (REV_ID 0x1003)
	 */
	if (LL_DBGMCU_GetRevisionID() == 0x1003) {
 8001582:	f241 0303 	movw	r3, #4099	; 0x1003
 8001586:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
 800158a:	d106      	bne.n	800159a <stm32h7_init+0xde>
		MODIFY_REG(GPV->AXI_TARG7_FN_MOD, 0x1, 0x1);
 800158c:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <stm32h7_init+0xf8>)
 800158e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	}

	return 0;
}
 800159a:	2000      	movs	r0, #0
 800159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	2400100c 	.word	0x2400100c
 80015a8:	03d09000 	.word	0x03d09000
 80015ac:	58024800 	.word	0x58024800
 80015b0:	5c001000 	.word	0x5c001000
 80015b4:	51008000 	.word	0x51008000

080015b8 <cmd_kernel_version>:
#define THREAD_MAX_NAM_LEN 10
#endif

static int cmd_kernel_version(const struct shell *sh,
			      size_t argc, char **argv)
{
 80015b8:	b513      	push	{r0, r1, r4, lr}
 80015ba:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
 80015bc:	f01a f91e 	bl	801b7fc <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(sh, "Zephyr version %d.%d.%d",
 80015c0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <cmd_kernel_version+0x28>)
 80015c6:	2108      	movs	r1, #8
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	0e03      	lsrs	r3, r0, #24
 80015d2:	4620      	mov	r0, r4
 80015d4:	f012 fb12 	bl	8013bfc <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
 80015d8:	2000      	movs	r0, #0
 80015da:	b002      	add	sp, #8
 80015dc:	bd10      	pop	{r4, pc}
 80015de:	bf00      	nop
 80015e0:	0801dbf3 	.word	0x0801dbf3

080015e4 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *sh,
			     size_t argc, char **argv)
{
 80015e4:	b510      	push	{r4, lr}
 80015e6:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
 80015e8:	f01a fc0e 	bl	801be08 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 80015ec:	220a      	movs	r2, #10
 80015ee:	2300      	movs	r3, #0
 80015f0:	f7ff f920 	bl	8000834 <__aeabi_uldivmod>
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(sh, "Uptime: %u ms", k_uptime_get_32());
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <cmd_kernel_uptime+0x20>)
 80015f6:	4603      	mov	r3, r0
 80015f8:	2108      	movs	r1, #8
 80015fa:	4620      	mov	r0, r4
 80015fc:	f012 fafe 	bl	8013bfc <shell_fprintf>
	return 0;
}
 8001600:	2000      	movs	r0, #0
 8001602:	bd10      	pop	{r4, pc}
 8001604:	0801dc0c 	.word	0x0801dc0c

08001608 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *sh,
			      size_t argc, char **argv)
{
 8001608:	b510      	push	{r4, lr}
 800160a:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(sh, "Scheduler: %u since last call", sys_clock_elapsed());
 800160c:	f00e ff1c 	bl	8010448 <sys_clock_elapsed>
 8001610:	4a08      	ldr	r2, [pc, #32]	; (8001634 <cmd_kernel_threads+0x2c>)
 8001612:	4603      	mov	r3, r0
 8001614:	2108      	movs	r1, #8
 8001616:	4620      	mov	r0, r4
 8001618:	f012 faf0 	bl	8013bfc <shell_fprintf>
	shell_print(sh, "Threads:");
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <cmd_kernel_threads+0x30>)
 800161e:	4620      	mov	r0, r4
 8001620:	2108      	movs	r1, #8
 8001622:	f012 faeb 	bl	8013bfc <shell_fprintf>

#ifdef CONFIG_SMP
	k_thread_foreach_unlocked(shell_tdata_dump, (void *)sh);
#else
	k_thread_foreach(shell_tdata_dump, (void *)sh);
 8001626:	4621      	mov	r1, r4
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <cmd_kernel_threads+0x34>)
 800162a:	f010 f9db 	bl	80119e4 <k_thread_foreach>
#endif
	return 0;
}
 800162e:	2000      	movs	r0, #0
 8001630:	bd10      	pop	{r4, pc}
 8001632:	bf00      	nop
 8001634:	0801dc1b 	.word	0x0801dc1b
 8001638:	0801dc3a 	.word	0x0801dc3a
 800163c:	08001641 	.word	0x08001641

08001640 <shell_tdata_dump>:
{
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	b08f      	sub	sp, #60	; 0x3c
 8001644:	4604      	mov	r4, r0
 8001646:	460d      	mov	r5, r1
	size_t size = thread->stack_info.size;
 8001648:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
	tname = k_thread_name_get(thread);
 800164c:	f01a f8c1 	bl	801b7d2 <k_thread_name_get>
 8001650:	4606      	mov	r6, r0
	return z_impl_z_current_get();
 8001652:	f011 f9d1 	bl	80129f8 <z_impl_z_current_get>
	shell_print(sh, "%s%p %-10s",
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <shell_tdata_dump+0xa8>)
 8001658:	4a24      	ldr	r2, [pc, #144]	; (80016ec <shell_tdata_dump+0xac>)
 800165a:	2108      	movs	r1, #8
 800165c:	2e00      	cmp	r6, #0
 800165e:	bf08      	it	eq
 8001660:	461e      	moveq	r6, r3
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <shell_tdata_dump+0xb0>)
 8001664:	e9cd 4600 	strd	r4, r6, [sp]
 8001668:	4284      	cmp	r4, r0
 800166a:	bf18      	it	ne
 800166c:	4613      	movne	r3, r2
 800166e:	4628      	mov	r0, r5
 8001670:	4a20      	ldr	r2, [pc, #128]	; (80016f4 <shell_tdata_dump+0xb4>)
 8001672:	f012 fac3 	bl	8013bfc <shell_fprintf>
	shell_print(sh, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
 8001676:	4628      	mov	r0, r5
 8001678:	2108      	movs	r1, #8
 800167a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 800167e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001682:	f994 300e 	ldrsb.w	r3, [r4, #14]
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <shell_tdata_dump+0xb8>)
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	7b23      	ldrb	r3, [r4, #12]
 800168c:	f012 fab6 	bl	8013bfc <shell_fprintf>
	shell_print(sh, "\tstate: %s, entry: %p",
 8001690:	a906      	add	r1, sp, #24
 8001692:	2220      	movs	r2, #32
 8001694:	4620      	mov	r0, r4
 8001696:	f010 f9ed 	bl	8011a74 <k_thread_state_str>
 800169a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800169c:	4603      	mov	r3, r0
 800169e:	2108      	movs	r1, #8
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	4628      	mov	r0, r5
 80016a4:	4a15      	ldr	r2, [pc, #84]	; (80016fc <shell_tdata_dump+0xbc>)
 80016a6:	f012 faa9 	bl	8013bfc <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
 80016aa:	a905      	add	r1, sp, #20
 80016ac:	4620      	mov	r0, r4
 80016ae:	f01a f8a0 	bl	801b7f2 <z_impl_k_thread_stack_space_get>
	if (ret) {
 80016b2:	4603      	mov	r3, r0
 80016b4:	b130      	cbz	r0, 80016c4 <shell_tdata_dump+0x84>
		shell_print(sh,
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <shell_tdata_dump+0xc0>)
 80016b8:	2108      	movs	r1, #8
 80016ba:	4628      	mov	r0, r5
 80016bc:	f012 fa9e 	bl	8013bfc <shell_fprintf>
}
 80016c0:	b00f      	add	sp, #60	; 0x3c
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
 80016c4:	9a05      	ldr	r2, [sp, #20]
 80016c6:	2364      	movs	r3, #100	; 0x64
		shell_print(sh,
 80016c8:	4628      	mov	r0, r5
		pcnt = ((size - unused) * 100U) / size;
 80016ca:	1ab9      	subs	r1, r7, r2
 80016cc:	434b      	muls	r3, r1
 80016ce:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(sh,
 80016d2:	e9cd 2100 	strd	r2, r1, [sp]
 80016d6:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <shell_tdata_dump+0xc4>)
 80016dc:	463b      	mov	r3, r7
 80016de:	2108      	movs	r1, #8
 80016e0:	f012 fa8c 	bl	8013bfc <shell_fprintf>
}
 80016e4:	e7ec      	b.n	80016c0 <shell_tdata_dump+0x80>
 80016e6:	bf00      	nop
 80016e8:	0801dc46 	.word	0x0801dc46
 80016ec:	080204cd 	.word	0x080204cd
 80016f0:	0801dc44 	.word	0x0801dc44
 80016f4:	0801dc49 	.word	0x0801dc49
 80016f8:	0801dc55 	.word	0x0801dc55
 80016fc:	0801dc81 	.word	0x0801dc81
 8001700:	0801dc98 	.word	0x0801dc98
 8001704:	0801dcc5 	.word	0x0801dcc5

08001708 <cmd_kernel_stacks>:
K_KERNEL_STACK_ARRAY_DECLARE(z_interrupt_stacks, CONFIG_MP_MAX_NUM_CPUS,
			     CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *sh,
			     size_t argc, char **argv)
{
 8001708:	b530      	push	{r4, r5, lr}
 800170a:	b093      	sub	sp, #76	; 0x4c
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	char pad[THREAD_MAX_NAM_LEN] = { 0 };
 800170c:	2100      	movs	r1, #0
 800170e:	221c      	movs	r2, #28
{
 8001710:	4604      	mov	r4, r0
	char pad[THREAD_MAX_NAM_LEN] = { 0 };
 8001712:	a80b      	add	r0, sp, #44	; 0x2c
 8001714:	910a      	str	r1, [sp, #40]	; 0x28
 8001716:	f013 fab9 	bl	8014c8c <memset>

	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
 800171a:	481b      	ldr	r0, [pc, #108]	; (8001788 <cmd_kernel_stacks+0x80>)
 800171c:	f013 fa5e 	bl	8014bdc <strlen>
 8001720:	f1c0 0020 	rsb	r0, r0, #32
 8001724:	2801      	cmp	r0, #1
 8001726:	d92c      	bls.n	8001782 <cmd_kernel_stacks+0x7a>
 8001728:	4817      	ldr	r0, [pc, #92]	; (8001788 <cmd_kernel_stacks+0x80>)
 800172a:	f013 fa57 	bl	8014bdc <strlen>
 800172e:	f1c0 0220 	rsb	r2, r0, #32
 8001732:	ad0a      	add	r5, sp, #40	; 0x28
 8001734:	2120      	movs	r1, #32
 8001736:	4628      	mov	r0, r5
 8001738:	f013 faa8 	bl	8014c8c <memset>

#ifdef CONFIG_SMP
	k_thread_foreach_unlocked(shell_stack_dump, (void *)sh);
#else
	k_thread_foreach(shell_stack_dump, (void *)sh);
 800173c:	4621      	mov	r1, r4
 800173e:	4813      	ldr	r0, [pc, #76]	; (800178c <cmd_kernel_stacks+0x84>)
 8001740:	f010 f950 	bl	80119e4 <k_thread_foreach>

	for (int i = 0; i < num_cpus; i++) {
		size_t unused;
		const uint8_t *buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size_t size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);
		int err = z_stack_space_get(buf, size, &unused);
 8001744:	aa09      	add	r2, sp, #36	; 0x24
 8001746:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174a:	4811      	ldr	r0, [pc, #68]	; (8001790 <cmd_kernel_stacks+0x88>)
 800174c:	f01a f845 	bl	801b7da <z_stack_space_get>

		(void)err;
		__ASSERT_NO_MSG(err == 0);

		shell_print(sh,
 8001750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001752:	2364      	movs	r3, #100	; 0x64
 8001754:	9501      	str	r5, [sp, #4]
 8001756:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
 800175a:	2500      	movs	r5, #0
 800175c:	4620      	mov	r0, r4
 800175e:	434b      	muls	r3, r1
 8001760:	9500      	str	r5, [sp, #0]
 8001762:	0adb      	lsrs	r3, r3, #11
 8001764:	9306      	str	r3, [sp, #24]
 8001766:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800176a:	e9cd 1304 	strd	r1, r3, [sp, #16]
 800176e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001772:	2108      	movs	r1, #8
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <cmd_kernel_stacks+0x8c>)
 8001776:	4a08      	ldr	r2, [pc, #32]	; (8001798 <cmd_kernel_stacks+0x90>)
 8001778:	f012 fa40 	bl	8013bfc <shell_fprintf>
			    &z_interrupt_stacks[i], i, pad, size, unused, size - unused, size,
			    ((size - unused) * 100U) / size);
	}

	return 0;
}
 800177c:	4628      	mov	r0, r5
 800177e:	b013      	add	sp, #76	; 0x4c
 8001780:	bd30      	pop	{r4, r5, pc}
	memset(pad, ' ', MAX((THREAD_MAX_NAM_LEN - strlen("IRQ 00")), 1));
 8001782:	2201      	movs	r2, #1
 8001784:	e7d5      	b.n	8001732 <cmd_kernel_stacks+0x2a>
 8001786:	bf00      	nop
 8001788:	0801dcfc 	.word	0x0801dcfc
 800178c:	080017f9 	.word	0x080017f9
 8001790:	24005780 	.word	0x24005780
 8001794:	24005740 	.word	0x24005740
 8001798:	0801dd03 	.word	0x0801dd03

0800179c <cmd_kernel_cycles>:
{
 800179c:	b510      	push	{r4, lr}
 800179e:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 80017a0:	f00e fe70 	bl	8010484 <sys_clock_cycle_get_32>
	shell_print(sh, "cycles: %u hw cycles", k_cycle_get_32());
 80017a4:	4a03      	ldr	r2, [pc, #12]	; (80017b4 <cmd_kernel_cycles+0x18>)
 80017a6:	4603      	mov	r3, r0
 80017a8:	2108      	movs	r1, #8
 80017aa:	4620      	mov	r0, r4
 80017ac:	f012 fa26 	bl	8013bfc <shell_fprintf>
}
 80017b0:	2000      	movs	r0, #0
 80017b2:	bd10      	pop	{r4, pc}
 80017b4:	0801dd4c 	.word	0x0801dd4c

080017b8 <cmd_kernel_sleep>:
}
#endif

static int cmd_kernel_sleep(const struct shell *sh,
			    size_t argc, char **argv)
{
 80017b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80017ba:	4613      	mov	r3, r2
	ARG_UNUSED(sh);
	ARG_UNUSED(argc);

	uint32_t ms;
	int err = 0;
 80017bc:	2200      	movs	r2, #0
{
 80017be:	4605      	mov	r5, r0

	ms = shell_strtoul(argv[1], 10, &err);
 80017c0:	210a      	movs	r1, #10
	int err = 0;
 80017c2:	9201      	str	r2, [sp, #4]
	ms = shell_strtoul(argv[1], 10, &err);
 80017c4:	aa01      	add	r2, sp, #4
 80017c6:	6858      	ldr	r0, [r3, #4]
 80017c8:	f012 fc7b 	bl	80140c2 <shell_strtoul>

	if (!err) {
 80017cc:	9c01      	ldr	r4, [sp, #4]
 80017ce:	b94c      	cbnz	r4, 80017e4 <cmd_kernel_sleep+0x2c>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 80017d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 80017d4:	210a      	movs	r1, #10
 80017d6:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 80017da:	f011 f8f5 	bl	80129c8 <z_impl_k_sleep>
		shell_error(sh, "Unable to parse input (err %d)", err);
		return err;
	}

	return 0;
}
 80017de:	4620      	mov	r0, r4
 80017e0:	b003      	add	sp, #12
 80017e2:	bd30      	pop	{r4, r5, pc}
		shell_error(sh, "Unable to parse input (err %d)", err);
 80017e4:	4623      	mov	r3, r4
 80017e6:	4a03      	ldr	r2, [pc, #12]	; (80017f4 <cmd_kernel_sleep+0x3c>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	4628      	mov	r0, r5
 80017ec:	f012 fa06 	bl	8013bfc <shell_fprintf>
		return err;
 80017f0:	9c01      	ldr	r4, [sp, #4]
 80017f2:	e7f4      	b.n	80017de <cmd_kernel_sleep+0x26>
 80017f4:	0801dd62 	.word	0x0801dd62

080017f8 <shell_stack_dump>:
{
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	4604      	mov	r4, r0
 80017fc:	b089      	sub	sp, #36	; 0x24
 80017fe:	460d      	mov	r5, r1
	size_t size = thread->stack_info.size;
 8001800:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
 8001804:	a907      	add	r1, sp, #28
 8001806:	f019 fff4 	bl	801b7f2 <z_impl_k_thread_stack_space_get>
	if (ret) {
 800180a:	4603      	mov	r3, r0
 800180c:	b130      	cbz	r0, 800181c <shell_stack_dump+0x24>
		shell_print(sh,
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <shell_stack_dump+0x58>)
 8001810:	2108      	movs	r1, #8
 8001812:	4628      	mov	r0, r5
 8001814:	f012 f9f2 	bl	8013bfc <shell_fprintf>
}
 8001818:	b009      	add	sp, #36	; 0x24
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
 800181c:	4620      	mov	r0, r4
 800181e:	f019 ffd8 	bl	801b7d2 <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
 8001822:	9907      	ldr	r1, [sp, #28]
 8001824:	2364      	movs	r3, #100	; 0x64
	shell_print(
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
 8001828:	1a77      	subs	r7, r6, r1
	shell_print(
 800182a:	2800      	cmp	r0, #0
 800182c:	bf18      	it	ne
 800182e:	4602      	movne	r2, r0
 8001830:	4628      	mov	r0, r5
	pcnt = ((size - unused) * 100U) / size;
 8001832:	437b      	muls	r3, r7
 8001834:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print(
 8001838:	e9cd 1702 	strd	r1, r7, [sp, #8]
 800183c:	e9cd 6304 	strd	r6, r3, [sp, #16]
 8001840:	e9cd 2600 	strd	r2, r6, [sp]
 8001844:	4623      	mov	r3, r4
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <shell_stack_dump+0x60>)
 8001848:	2108      	movs	r1, #8
 800184a:	f012 f9d7 	bl	8013bfc <shell_fprintf>
 800184e:	e7e3      	b.n	8001818 <shell_stack_dump+0x20>
 8001850:	0801dc98 	.word	0x0801dc98
 8001854:	0801dc46 	.word	0x0801dc46
 8001858:	0801dd82 	.word	0x0801dd82

0800185c <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
 800185c:	b538      	push	{r3, r4, r5, lr}
	const char *name = dev->name;
 800185e:	6804      	ldr	r4, [r0, #0]
{
 8001860:	4603      	mov	r3, r0
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->sh, SHELL_NORMAL, "  requires: %s\n",
 8001862:	680d      	ldr	r5, [r1, #0]
	if ((name == NULL) || (name[0] == 0)) {
 8001864:	b10c      	cbz	r4, 800186a <cmd_device_list_visitor+0xe>
 8001866:	7822      	ldrb	r2, [r4, #0]
 8001868:	b92a      	cbnz	r2, 8001876 <cmd_device_list_visitor+0x1a>
	shell_fprintf(ctx->sh, SHELL_NORMAL, "  requires: %s\n",
 800186a:	684c      	ldr	r4, [r1, #4]
		snprintf(buf, len, "[%p]", dev);
 800186c:	4a06      	ldr	r2, [pc, #24]	; (8001888 <cmd_device_list_visitor+0x2c>)
 800186e:	6889      	ldr	r1, [r1, #8]
 8001870:	4620      	mov	r0, r4
 8001872:	f002 fc37 	bl	80040e4 <snprintf>
	shell_fprintf(ctx->sh, SHELL_NORMAL, "  requires: %s\n",
 8001876:	4628      	mov	r0, r5
 8001878:	4623      	mov	r3, r4
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <cmd_device_list_visitor+0x30>)
 800187c:	2108      	movs	r1, #8
 800187e:	f012 f9bd 	bl	8013bfc <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
 8001882:	2000      	movs	r0, #0
 8001884:	bd38      	pop	{r3, r4, r5, pc}
 8001886:	bf00      	nop
 8001888:	0801de64 	.word	0x0801de64
 800188c:	0801de69 	.word	0x0801de69

08001890 <cmd_device_list>:

static int cmd_device_list(const struct shell *sh,
			   size_t argc, char **argv)
{
 8001890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001894:	b08a      	sub	sp, #40	; 0x28
 8001896:	4605      	mov	r5, r0
		snprintf(buf, len, "[%p]", dev);
 8001898:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800191c <cmd_device_list+0x8c>
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
 800189c:	a801      	add	r0, sp, #4
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
 800189e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8001920 <cmd_device_list+0x90>
	size_t devcnt = z_device_get_all_static(&devlist);
 80018a2:	f00f ff35 	bl	8011710 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
 80018a6:	2318      	movs	r3, #24
 80018a8:	9e01      	ldr	r6, [sp, #4]
	shell_fprintf(sh, SHELL_NORMAL, "devices:\n");
 80018aa:	2108      	movs	r1, #8
 80018ac:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <cmd_device_list+0x94>)
	const struct device *devlist_end = devlist + devcnt;
 80018ae:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(sh, SHELL_NORMAL, "devices:\n");
 80018b2:	4628      	mov	r0, r5
 80018b4:	f012 f9a2 	bl	8013bfc <shell_fprintf>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
 80018b8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8001928 <cmd_device_list+0x98>
	for (dev = devlist; dev < devlist_end; dev++) {
 80018bc:	9c01      	ldr	r4, [sp, #4]
 80018be:	42b4      	cmp	r4, r6
 80018c0:	d303      	bcc.n	80018ca <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
 80018c2:	2000      	movs	r0, #0
 80018c4:	b00a      	add	sp, #40	; 0x28
 80018c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const char *name = dev->name;
 80018ca:	6823      	ldr	r3, [r4, #0]
	if ((name == NULL) || (name[0] == 0)) {
 80018cc:	af05      	add	r7, sp, #20
 80018ce:	b10b      	cbz	r3, 80018d4 <cmd_device_list+0x44>
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	b932      	cbnz	r2, 80018e2 <cmd_device_list+0x52>
		snprintf(buf, len, "[%p]", dev);
 80018d4:	4623      	mov	r3, r4
 80018d6:	4642      	mov	r2, r8
 80018d8:	2114      	movs	r1, #20
 80018da:	4638      	mov	r0, r7
 80018dc:	f002 fc02 	bl	80040e4 <snprintf>
		name = buf;
 80018e0:	463b      	mov	r3, r7
		shell_fprintf(sh, SHELL_NORMAL, "- %s", name);
 80018e2:	464a      	mov	r2, r9
 80018e4:	2108      	movs	r1, #8
 80018e6:	4628      	mov	r0, r5
 80018e8:	f012 f988 	bl	8013bfc <shell_fprintf>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 80018ec:	4620      	mov	r0, r4
 80018ee:	f019 fe6a 	bl	801b5c6 <z_device_is_ready>
		shell_fprintf(sh, SHELL_NORMAL, " (%s)\n", state);
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <cmd_device_list+0x9c>)
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <cmd_device_list+0xa0>)
 80018f6:	2108      	movs	r1, #8
 80018f8:	2800      	cmp	r0, #0
 80018fa:	bf18      	it	ne
 80018fc:	4653      	movne	r3, sl
 80018fe:	4628      	mov	r0, r5
 8001900:	f012 f97c 	bl	8013bfc <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
 8001904:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 8001906:	4620      	mov	r0, r4
 8001908:	aa02      	add	r2, sp, #8
 800190a:	490a      	ldr	r1, [pc, #40]	; (8001934 <cmd_device_list+0xa4>)
	for (dev = devlist; dev < devlist_end; dev++) {
 800190c:	3418      	adds	r4, #24
			struct cmd_device_list_visitor_context ctx = {
 800190e:	9304      	str	r3, [sp, #16]
 8001910:	e9cd 5702 	strd	r5, r7, [sp, #8]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
 8001914:	f019 fe62 	bl	801b5dc <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
 8001918:	e7d1      	b.n	80018be <cmd_device_list+0x2e>
 800191a:	bf00      	nop
 800191c:	0801de64 	.word	0x0801de64
 8001920:	0801de92 	.word	0x0801de92
 8001924:	0801de88 	.word	0x0801de88
 8001928:	0801de79 	.word	0x0801de79
 800192c:	0801de7f 	.word	0x0801de7f
 8001930:	0801fe75 	.word	0x0801fe75
 8001934:	0800185d 	.word	0x0800185d

08001938 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
 8001938:	1e8b      	subs	r3, r1, #2
 800193a:	2b02      	cmp	r3, #2
{
 800193c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001940:	4607      	mov	r7, r0
 8001942:	4688      	mov	r8, r1
 8001944:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
 8001946:	d833      	bhi.n	80019b0 <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
 8001948:	2210      	movs	r2, #16
 800194a:	2100      	movs	r1, #0
 800194c:	6860      	ldr	r0, [r4, #4]
 800194e:	f013 f876 	bl	8014a3e <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
 8001952:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
 8001956:	4606      	mov	r6, r0
	if (argc < 3) {
 8001958:	d01e      	beq.n	8001998 <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
 800195a:	220a      	movs	r2, #10
 800195c:	2100      	movs	r1, #0
 800195e:	68a0      	ldr	r0, [r4, #8]
 8001960:	f013 f86d 	bl	8014a3e <strtoul>
 8001964:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
 8001966:	462b      	mov	r3, r5
 8001968:	4a20      	ldr	r2, [pc, #128]	; (80019ec <cmd_devmem+0xb4>)
 800196a:	2108      	movs	r1, #8
 800196c:	4638      	mov	r0, r7
 800196e:	f012 f945 	bl	8013bfc <shell_fprintf>

	if (argc <= 3) {
 8001972:	f1b8 0f04 	cmp.w	r8, #4
 8001976:	d01e      	beq.n	80019b6 <cmd_devmem+0x7e>
	switch (width) {
 8001978:	2d10      	cmp	r5, #16
 800197a:	d00f      	beq.n	800199c <cmd_devmem+0x64>
 800197c:	2d20      	cmp	r5, #32
 800197e:	d010      	beq.n	80019a2 <cmd_devmem+0x6a>
 8001980:	2d08      	cmp	r5, #8
 8001982:	d110      	bne.n	80019a6 <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
 8001984:	7833      	ldrb	r3, [r6, #0]
 8001986:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
 8001988:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <cmd_devmem+0xb8>)
 800198a:	2108      	movs	r1, #8
 800198c:	4638      	mov	r0, r7
 800198e:	f012 f935 	bl	8013bfc <shell_fprintf>
	int err = 0;
 8001992:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
 8001994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
 8001998:	2520      	movs	r5, #32
 800199a:	e7e4      	b.n	8001966 <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
 800199c:	8833      	ldrh	r3, [r6, #0]
 800199e:	b29b      	uxth	r3, r3
	if (err == 0) {
 80019a0:	e7f2      	b.n	8001988 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
 80019a2:	6833      	ldr	r3, [r6, #0]
 80019a4:	e7f0      	b.n	8001988 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <cmd_devmem+0xbc>)
 80019a8:	2108      	movs	r1, #8
 80019aa:	4638      	mov	r0, r7
 80019ac:	f012 f926 	bl	8013bfc <shell_fprintf>
		return -EINVAL;
 80019b0:	f06f 0015 	mvn.w	r0, #21
 80019b4:	e7ee      	b.n	8001994 <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
 80019b6:	2210      	movs	r2, #16
 80019b8:	2100      	movs	r1, #0
 80019ba:	68e0      	ldr	r0, [r4, #12]
 80019bc:	f013 f83f 	bl	8014a3e <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <cmd_devmem+0xc0>)
 80019c2:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
 80019c4:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
 80019c6:	2108      	movs	r1, #8
 80019c8:	4638      	mov	r0, r7
 80019ca:	f012 f917 	bl	8013bfc <shell_fprintf>
	switch (width) {
 80019ce:	2d10      	cmp	r5, #16
 80019d0:	d006      	beq.n	80019e0 <cmd_devmem+0xa8>
 80019d2:	2d20      	cmp	r5, #32
 80019d4:	d007      	beq.n	80019e6 <cmd_devmem+0xae>
 80019d6:	2d08      	cmp	r5, #8
 80019d8:	d1e5      	bne.n	80019a6 <cmd_devmem+0x6e>
		sys_write8(value, addr);
 80019da:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
 80019dc:	7034      	strb	r4, [r6, #0]
 80019de:	e7d8      	b.n	8001992 <cmd_devmem+0x5a>
		sys_write16(value, addr);
 80019e0:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
 80019e2:	8034      	strh	r4, [r6, #0]
 80019e4:	e7d5      	b.n	8001992 <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
 80019e6:	6034      	str	r4, [r6, #0]
 80019e8:	e7d3      	b.n	8001992 <cmd_devmem+0x5a>
 80019ea:	bf00      	nop
 80019ec:	0801decb 	.word	0x0801decb
 80019f0:	0801def6 	.word	0x0801def6
 80019f4:	0801dee0 	.word	0x0801dee0
 80019f8:	0801df07 	.word	0x0801df07

080019fc <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
 80019fc:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
 80019fe:	4e0e      	ldr	r6, [pc, #56]	; (8001a38 <set_bypass.isra.0+0x3c>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
 8001a00:	4604      	mov	r4, r0
	if (bypass && in_use) {
 8001a02:	460d      	mov	r5, r1
 8001a04:	7833      	ldrb	r3, [r6, #0]
 8001a06:	b131      	cbz	r1, 8001a16 <set_bypass.isra.0+0x1a>
 8001a08:	b12b      	cbz	r3, 8001a16 <set_bypass.isra.0+0x1a>
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <set_bypass.isra.0+0x40>)
 8001a0c:	2101      	movs	r1, #1
}
 8001a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
 8001a12:	f012 b8f3 	b.w	8013bfc <shell_fprintf>
	in_use = !in_use;
 8001a16:	f083 0301 	eor.w	r3, r3, #1
 8001a1a:	7033      	strb	r3, [r6, #0]
	if (in_use) {
 8001a1c:	b133      	cbz	r3, 8001a2c <set_bypass.isra.0+0x30>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <set_bypass.isra.0+0x44>)
 8001a20:	2108      	movs	r1, #8
 8001a22:	4620      	mov	r0, r4
 8001a24:	f012 f8ea 	bl	8013bfc <shell_fprintf>
		in_use = true;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	7033      	strb	r3, [r6, #0]
	shell_set_bypass(sh, bypass);
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	4620      	mov	r0, r4
}
 8001a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
 8001a34:	f012 b934 	b.w	8013ca0 <shell_set_bypass>
 8001a38:	24003026 	.word	0x24003026
 8001a3c:	0801df1b 	.word	0x0801df1b
 8001a40:	0801df56 	.word	0x0801df56

08001a44 <bypass_cb>:
{
 8001a44:	b570      	push	{r4, r5, r6, lr}
 8001a46:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
 8001a48:	483c      	ldr	r0, [pc, #240]	; (8001b3c <bypass_cb+0xf8>)
 8001a4a:	7803      	ldrb	r3, [r0, #0]
 8001a4c:	2b18      	cmp	r3, #24
 8001a4e:	d102      	bne.n	8001a56 <bypass_cb+0x12>
 8001a50:	780b      	ldrb	r3, [r1, #0]
 8001a52:	2b11      	cmp	r3, #17
 8001a54:	d031      	beq.n	8001aba <bypass_cb+0x76>
 8001a56:	3a01      	subs	r2, #1
 8001a58:	460b      	mov	r3, r1
 8001a5a:	1855      	adds	r5, r2, r1
		for (int i = 0; i < (len - 1); i++) {
 8001a5c:	429d      	cmp	r5, r3
 8001a5e:	d125      	bne.n	8001aac <bypass_cb+0x68>
	tail = recv[len - 1];
 8001a60:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
 8001a62:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
 8001a64:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
 8001a66:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001a6a:	4c35      	ldr	r4, [pc, #212]	; (8001b40 <bypass_cb+0xfc>)
 8001a6c:	2b09      	cmp	r3, #9
 8001a6e:	d904      	bls.n	8001a7a <bypass_cb+0x36>
	if (is_ascii(*recv)) {
 8001a70:	f022 0320 	bic.w	r3, r2, #32
 8001a74:	3b41      	subs	r3, #65	; 0x41
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d804      	bhi.n	8001a84 <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	4931      	ldr	r1, [pc, #196]	; (8001b44 <bypass_cb+0x100>)
 8001a7e:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
 8001a80:	3301      	adds	r3, #1
 8001a82:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d134      	bne.n	8001af4 <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	482d      	ldr	r0, [pc, #180]	; (8001b44 <bypass_cb+0x100>)
 8001a90:	f012 ffd5 	bl	8014a3e <strtoul>
		*bytes = byte;
 8001a94:	4a2c      	ldr	r2, [pc, #176]	; (8001b48 <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
 8001a9c:	6013      	str	r3, [r2, #0]
		sum++;
 8001a9e:	4a2b      	ldr	r2, [pc, #172]	; (8001b4c <bypass_cb+0x108>)
 8001aa0:	6813      	ldr	r3, [r2, #0]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	6023      	str	r3, [r4, #0]
 8001aaa:	e023      	b.n	8001af4 <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
 8001aac:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001ab0:	2e18      	cmp	r6, #24
 8001ab2:	d1d3      	bne.n	8001a5c <bypass_cb+0x18>
 8001ab4:	781e      	ldrb	r6, [r3, #0]
 8001ab6:	2e11      	cmp	r6, #17
 8001ab8:	d1d0      	bne.n	8001a5c <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
 8001aba:	4d24      	ldr	r5, [pc, #144]	; (8001b4c <bypass_cb+0x108>)
 8001abc:	2108      	movs	r1, #8
 8001abe:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <bypass_cb+0x10c>)
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	682b      	ldr	r3, [r5, #0]
 8001ac4:	f012 f89a 	bl	8013bfc <shell_fprintf>
		set_bypass(sh, NULL);
 8001ac8:	4620      	mov	r0, r4
 8001aca:	2100      	movs	r1, #0
 8001acc:	f7ff ff96 	bl	80019fc <set_bypass.isra.0>
		if (!littleendian) {
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <bypass_cb+0x110>)
 8001ad2:	7818      	ldrb	r0, [r3, #0]
 8001ad4:	b970      	cbnz	r0, 8001af4 <bypass_cb+0xb0>
 8001ad6:	4a20      	ldr	r2, [pc, #128]	; (8001b58 <bypass_cb+0x114>)
 8001ad8:	682b      	ldr	r3, [r5, #0]
 8001ada:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	dc0a      	bgt.n	8001af6 <bypass_cb+0xb2>
 8001ae0:	b108      	cbz	r0, 8001ae6 <bypass_cb+0xa2>
 8001ae2:	6011      	str	r1, [r2, #0]
 8001ae4:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
 8001ae6:	f013 0103 	ands.w	r1, r3, #3
 8001aea:	d10b      	bne.n	8001b04 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
 8001af6:	6808      	ldr	r0, [r1, #0]
 8001af8:	3b04      	subs	r3, #4
 8001afa:	ba00      	rev	r0, r0
 8001afc:	f841 0b04 	str.w	r0, [r1], #4
				data++;
 8001b00:	2001      	movs	r0, #1
 8001b02:	e7eb      	b.n	8001adc <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
 8001b04:	425b      	negs	r3, r3
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	bf58      	it	pl
 8001b0c:	4259      	negpl	r1, r3
 8001b0e:	2902      	cmp	r1, #2
 8001b10:	d104      	bne.n	8001b1c <bypass_cb+0xd8>
				*data = __bswap_16(*data);
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	8813      	ldrh	r3, [r2, #0]
 8001b16:	ba5b      	rev16	r3, r3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	e7ea      	b.n	8001af2 <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
 8001b1c:	2903      	cmp	r1, #3
 8001b1e:	d1e9      	bne.n	8001af4 <bypass_cb+0xb0>
				*data = __bswap_24(*data);
 8001b20:	6810      	ldr	r0, [r2, #0]
 8001b22:	6802      	ldr	r2, [r0, #0]
 8001b24:	0411      	lsls	r1, r2, #16
 8001b26:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8001b2a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8001b2e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8001b32:	430b      	orrs	r3, r1
 8001b34:	4313      	orrs	r3, r2
 8001b36:	6003      	str	r3, [r0, #0]
 8001b38:	e7dc      	b.n	8001af4 <bypass_cb+0xb0>
 8001b3a:	bf00      	nop
 8001b3c:	24003028 	.word	0x24003028
 8001b40:	24001d54 	.word	0x24001d54
 8001b44:	24003024 	.word	0x24003024
 8001b48:	24001d50 	.word	0x24001d50
 8001b4c:	24001d5c 	.word	0x24001d5c
 8001b50:	0801df80 	.word	0x0801df80
 8001b54:	24003027 	.word	0x24003027
 8001b58:	24001d58 	.word	0x24001d58

08001b5c <cmd_load>:
{
 8001b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	littleendian = false;
 8001b60:	2300      	movs	r3, #0
{
 8001b62:	460d      	mov	r5, r1
	chunk_element = 0;
 8001b64:	492c      	ldr	r1, [pc, #176]	; (8001c18 <cmd_load+0xbc>)
{
 8001b66:	4606      	mov	r6, r0
	littleendian = false;
 8001b68:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8001c1c <cmd_load+0xc0>
 8001b6c:	4614      	mov	r4, r2
	chunk_element = 0;
 8001b6e:	600b      	str	r3, [r1, #0]
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 8001b70:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8001c20 <cmd_load+0xc4>
	sum = 0;
 8001b74:	492b      	ldr	r1, [pc, #172]	; (8001c24 <cmd_load+0xc8>)
			shell_print(sh, "Unknown option \"%s\"", arg);
 8001b76:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8001c28 <cmd_load+0xcc>
	littleendian = false;
 8001b7a:	f888 3000 	strb.w	r3, [r8]
	sum = 0;
 8001b7e:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
 8001b80:	2d01      	cmp	r5, #1
 8001b82:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 8001b84:	f854 3f04 	ldr.w	r3, [r4, #4]!
	while (argc >= 2) {
 8001b88:	d921      	bls.n	8001bce <cmd_load+0x72>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	4649      	mov	r1, r9
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	f013 f836 	bl	8014c02 <strncmp>
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	b988      	cbnz	r0, 8001bbe <cmd_load+0x62>
 8001b9a:	6822      	ldr	r2, [r4, #0]
 8001b9c:	7892      	ldrb	r2, [r2, #2]
 8001b9e:	3a00      	subs	r2, #0
 8001ba0:	bf18      	it	ne
 8001ba2:	2201      	movne	r2, #1
 8001ba4:	eb03 0a02 	add.w	sl, r3, r2
		if (!strncmp(arg, "-e", 2)) {
 8001ba8:	4920      	ldr	r1, [pc, #128]	; (8001c2c <cmd_load+0xd0>)
 8001baa:	2202      	movs	r2, #2
 8001bac:	4650      	mov	r0, sl
 8001bae:	f013 f828 	bl	8014c02 <strncmp>
 8001bb2:	b930      	cbnz	r0, 8001bc2 <cmd_load+0x66>
			littleendian = true;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f888 3000 	strb.w	r3, [r8]
		argc--;
 8001bba:	3d01      	subs	r5, #1
 8001bbc:	e7e0      	b.n	8001b80 <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	e7f0      	b.n	8001ba4 <cmd_load+0x48>
		} else if (!strcmp(arg, "--")) {
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	4650      	mov	r0, sl
 8001bc6:	f013 f810 	bl	8014bea <strcmp>
 8001bca:	b9b0      	cbnz	r0, 8001bfa <cmd_load+0x9e>
			argv++;
 8001bcc:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	f012 febf 	bl	8014956 <strtol>
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 8001bd8:	2200      	movs	r2, #0
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 8001bdc:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
 8001bde:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f012 feb8 	bl	8014956 <strtol>
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <cmd_load+0xd8>)
	set_bypass(sh, bypass_cb);
 8001be8:	4913      	ldr	r1, [pc, #76]	; (8001c38 <cmd_load+0xdc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
 8001bea:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
 8001bec:	4630      	mov	r0, r6
 8001bee:	f7ff ff05 	bl	80019fc <set_bypass.isra.0>
}
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	b003      	add	sp, #12
 8001bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
 8001bfa:	f89a 2000 	ldrb.w	r2, [sl]
 8001bfe:	2a2d      	cmp	r2, #45	; 0x2d
 8001c00:	d1e5      	bne.n	8001bce <cmd_load+0x72>
 8001c02:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d0e1      	beq.n	8001bce <cmd_load+0x72>
			shell_print(sh, "Unknown option \"%s\"", arg);
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	465a      	mov	r2, fp
 8001c0e:	2108      	movs	r1, #8
 8001c10:	4630      	mov	r0, r6
 8001c12:	f011 fff3 	bl	8013bfc <shell_fprintf>
 8001c16:	e7d0      	b.n	8001bba <cmd_load+0x5e>
 8001c18:	24001d54 	.word	0x24001d54
 8001c1c:	24003027 	.word	0x24003027
 8001c20:	0801df9a 	.word	0x0801df9a
 8001c24:	24001d5c 	.word	0x24001d5c
 8001c28:	0801dfa0 	.word	0x0801dfa0
 8001c2c:	0801df9d 	.word	0x0801df9d
 8001c30:	24001d50 	.word	0x24001d50
 8001c34:	24001d58 	.word	0x24001d58
 8001c38:	08001a45 	.word	0x08001a45

08001c3c <cmd_dump>:
{
 8001c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_addr_t addr = -1;
 8001c40:	f04f 35ff 	mov.w	r5, #4294967295
{
 8001c44:	4692      	mov	sl, r2
	optind = 1;
 8001c46:	4b54      	ldr	r3, [pc, #336]	; (8001d98 <cmd_dump+0x15c>)
 8001c48:	2201      	movs	r2, #1
{
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	4607      	mov	r7, r0
 8001c4e:	4689      	mov	r9, r1
	size_t width = 32;
 8001c50:	2620      	movs	r6, #32
	size_t size = -1;
 8001c52:	462c      	mov	r4, r5
	while ((rv = getopt(argc, argv, "a:s:w:")) != -1) {
 8001c54:	f8df b144 	ldr.w	fp, [pc, #324]	; 8001d9c <cmd_dump+0x160>
			size = (size_t)strtoul(optarg, NULL, 0);
 8001c58:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8001da0 <cmd_dump+0x164>
	optind = 1;
 8001c5c:	601a      	str	r2, [r3, #0]
	while ((rv = getopt(argc, argv, "a:s:w:")) != -1) {
 8001c5e:	4651      	mov	r1, sl
 8001c60:	465a      	mov	r2, fp
 8001c62:	4648      	mov	r0, r9
 8001c64:	f7fe ff9a 	bl	8000b9c <getopt>
 8001c68:	1c41      	adds	r1, r0, #1
 8001c6a:	d107      	bne.n	8001c7c <cmd_dump+0x40>
	if (addr == -1) {
 8001c6c:	1c6a      	adds	r2, r5, #1
 8001c6e:	d147      	bne.n	8001d00 <cmd_dump+0xc4>
		shell_error(sh, "'-a <address>' is mandatory");
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <cmd_dump+0x168>)
		shell_error(sh, "'-s <size>' is mandatory");
 8001c72:	2101      	movs	r1, #1
				shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
 8001c74:	4638      	mov	r0, r7
 8001c76:	f011 ffc1 	bl	8013bfc <shell_fprintf>
				return -EINVAL;
 8001c7a:	e01a      	b.n	8001cb2 <cmd_dump+0x76>
		switch (rv) {
 8001c7c:	2873      	cmp	r0, #115	; 0x73
 8001c7e:	d01b      	beq.n	8001cb8 <cmd_dump+0x7c>
 8001c80:	2877      	cmp	r0, #119	; 0x77
 8001c82:	d02b      	beq.n	8001cdc <cmd_dump+0xa0>
 8001c84:	2861      	cmp	r0, #97	; 0x61
 8001c86:	d114      	bne.n	8001cb2 <cmd_dump+0x76>
			addr = (mem_addr_t)strtoul(optarg, NULL, 16);
 8001c88:	2210      	movs	r2, #16
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	f8d8 0000 	ldr.w	r0, [r8]
 8001c90:	f012 fed5 	bl	8014a3e <strtoul>
			if (addr == 0 && errno == EINVAL) {
 8001c94:	4605      	mov	r5, r0
 8001c96:	2800      	cmp	r0, #0
 8001c98:	d1e1      	bne.n	8001c5e <cmd_dump+0x22>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 8001c9a:	f00f fd45 	bl	8011728 <z_impl_z_errno>
 8001c9e:	6803      	ldr	r3, [r0, #0]
 8001ca0:	2b16      	cmp	r3, #22
 8001ca2:	d1dc      	bne.n	8001c5e <cmd_dump+0x22>
				shell_error(sh, "invalid addr '%s'", optarg);
 8001ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8001ca8:	4a3f      	ldr	r2, [pc, #252]	; (8001da8 <cmd_dump+0x16c>)
				shell_error(sh, "invalid width '%s'", optarg);
 8001caa:	2101      	movs	r1, #1
 8001cac:	4638      	mov	r0, r7
 8001cae:	f011 ffa5 	bl	8013bfc <shell_fprintf>
		switch (rv) {
 8001cb2:	f06f 0015 	mvn.w	r0, #21
 8001cb6:	e06b      	b.n	8001d90 <cmd_dump+0x154>
			size = (size_t)strtoul(optarg, NULL, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f8d8 0000 	ldr.w	r0, [r8]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	f012 febd 	bl	8014a3e <strtoul>
			if (size == 0 && errno == EINVAL) {
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	2800      	cmp	r0, #0
 8001cc8:	d1c9      	bne.n	8001c5e <cmd_dump+0x22>
 8001cca:	f00f fd2d 	bl	8011728 <z_impl_z_errno>
 8001cce:	6803      	ldr	r3, [r0, #0]
 8001cd0:	2b16      	cmp	r3, #22
 8001cd2:	d1c4      	bne.n	8001c5e <cmd_dump+0x22>
				shell_error(sh, "invalid size '%s'", optarg);
 8001cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8001cd8:	4a34      	ldr	r2, [pc, #208]	; (8001dac <cmd_dump+0x170>)
 8001cda:	e7e6      	b.n	8001caa <cmd_dump+0x6e>
			width = (size_t)strtoul(optarg, NULL, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f8d8 0000 	ldr.w	r0, [r8]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	f012 feab 	bl	8014a3e <strtoul>
			if (width == 0 && errno == EINVAL) {
 8001ce8:	4606      	mov	r6, r0
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d1b7      	bne.n	8001c5e <cmd_dump+0x22>
 8001cee:	f00f fd1b 	bl	8011728 <z_impl_z_errno>
 8001cf2:	6803      	ldr	r3, [r0, #0]
 8001cf4:	2b16      	cmp	r3, #22
 8001cf6:	d1b2      	bne.n	8001c5e <cmd_dump+0x22>
				shell_error(sh, "invalid width '%s'", optarg);
 8001cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8001cfc:	4a2c      	ldr	r2, [pc, #176]	; (8001db0 <cmd_dump+0x174>)
 8001cfe:	e7d4      	b.n	8001caa <cmd_dump+0x6e>
	if (size == -1) {
 8001d00:	1c63      	adds	r3, r4, #1
 8001d02:	d101      	bne.n	8001d08 <cmd_dump+0xcc>
		shell_error(sh, "'-s <size>' is mandatory");
 8001d04:	4a2b      	ldr	r2, [pc, #172]	; (8001db4 <cmd_dump+0x178>)
 8001d06:	e7b4      	b.n	8001c72 <cmd_dump+0x36>
	return memory_dump(sh, addr, size, width);
 8001d08:	fa5f f886 	uxtb.w	r8, r6
	const size_t vsize = width / BITS_PER_BYTE;
 8001d0c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
	for (; size > 0;
 8001d10:	2c00      	cmp	r4, #0
 8001d12:	d03c      	beq.n	8001d8e <cmd_dump+0x152>
 8001d14:	466b      	mov	r3, sp
 8001d16:	4629      	mov	r1, r5
		     size >= vsize && data_offset + vsize <= SHELL_HEXDUMP_BYTES_IN_LINE;
 8001d18:	eba6 0c05 	sub.w	ip, r6, r5
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	e00c      	b.n	8001d3a <cmd_dump+0xfe>
			switch (width) {
 8001d20:	f1b8 0f10 	cmp.w	r8, #16
 8001d24:	d01d      	beq.n	8001d62 <cmd_dump+0x126>
 8001d26:	f1b8 0f20 	cmp.w	r8, #32
 8001d2a:	d020      	beq.n	8001d6e <cmd_dump+0x132>
 8001d2c:	f1b8 0f08 	cmp.w	r8, #8
 8001d30:	d12a      	bne.n	8001d88 <cmd_dump+0x14c>
	return *(volatile uint8_t *)addr;
 8001d32:	7808      	ldrb	r0, [r1, #0]
				data[data_offset] = value;
 8001d34:	7018      	strb	r0, [r3, #0]
				break;
 8001d36:	4431      	add	r1, r6
 8001d38:	4433      	add	r3, r6
		for (data_offset = 0;
 8001d3a:	42a6      	cmp	r6, r4
 8001d3c:	d803      	bhi.n	8001d46 <cmd_dump+0x10a>
		     size >= vsize && data_offset + vsize <= SHELL_HEXDUMP_BYTES_IN_LINE;
 8001d3e:	eb0c 0001 	add.w	r0, ip, r1
 8001d42:	2810      	cmp	r0, #16
 8001d44:	d9ec      	bls.n	8001d20 <cmd_dump+0xe4>
		shell_hexdump_line(sh, addr, data, MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE));
 8001d46:	2c10      	cmp	r4, #16
 8001d48:	46a1      	mov	r9, r4
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	bf28      	it	cs
 8001d50:	f04f 0910 	movcs.w	r9, #16
	     addr += SHELL_HEXDUMP_BYTES_IN_LINE, size -= MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE)) {
 8001d54:	3510      	adds	r5, #16
		shell_hexdump_line(sh, addr, data, MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE));
 8001d56:	464b      	mov	r3, r9
	     addr += SHELL_HEXDUMP_BYTES_IN_LINE, size -= MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE)) {
 8001d58:	eba4 0409 	sub.w	r4, r4, r9
		shell_hexdump_line(sh, addr, data, MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE));
 8001d5c:	f001 f930 	bl	8002fc0 <shell_hexdump_line>
	     addr += SHELL_HEXDUMP_BYTES_IN_LINE, size -= MIN(size, SHELL_HEXDUMP_BYTES_IN_LINE)) {
 8001d60:	e7d6      	b.n	8001d10 <cmd_dump+0xd4>
	return *(volatile uint16_t *)addr;
 8001d62:	8808      	ldrh	r0, [r1, #0]
 8001d64:	b280      	uxth	r0, r0
				data[data_offset] = (uint8_t)value;
 8001d66:	7018      	strb	r0, [r3, #0]
				value >>= 8;
 8001d68:	0a00      	lsrs	r0, r0, #8
				data[data_offset + 1] = (uint8_t)value;
 8001d6a:	7058      	strb	r0, [r3, #1]
				break;
 8001d6c:	e7e3      	b.n	8001d36 <cmd_dump+0xfa>
	return *(volatile uint32_t *)addr;
 8001d6e:	6808      	ldr	r0, [r1, #0]
				value >>= 8;
 8001d70:	ea4f 2e10 	mov.w	lr, r0, lsr #8
				data[data_offset] = (uint8_t)value;
 8001d74:	7018      	strb	r0, [r3, #0]
				data[data_offset + 1] = (uint8_t)value;
 8001d76:	f883 e001 	strb.w	lr, [r3, #1]
				value >>= 8;
 8001d7a:	ea4f 4e10 	mov.w	lr, r0, lsr #16
				value >>= 8;
 8001d7e:	0e00      	lsrs	r0, r0, #24
				data[data_offset + 2] = (uint8_t)value;
 8001d80:	f883 e002 	strb.w	lr, [r3, #2]
				data[data_offset + 3] = (uint8_t)value;
 8001d84:	70d8      	strb	r0, [r3, #3]
				break;
 8001d86:	e7d6      	b.n	8001d36 <cmd_dump+0xfa>
				shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
 8001d88:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <cmd_dump+0x17c>)
 8001d8a:	2108      	movs	r1, #8
 8001d8c:	e772      	b.n	8001c74 <cmd_dump+0x38>
	return 0;
 8001d8e:	4620      	mov	r0, r4
}
 8001d90:	b005      	add	sp, #20
 8001d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d96:	bf00      	nop
 8001d98:	2400085c 	.word	0x2400085c
 8001d9c:	0801dfef 	.word	0x0801dfef
 8001da0:	24001d44 	.word	0x24001d44
 8001da4:	0801dff6 	.word	0x0801dff6
 8001da8:	0801dfb5 	.word	0x0801dfb5
 8001dac:	0801dfc8 	.word	0x0801dfc8
 8001db0:	0801dfdb 	.word	0x0801dfdb
 8001db4:	0801e013 	.word	0x0801e013
 8001db8:	0801dee0 	.word	0x0801dee0

08001dbc <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_TRANSPORT_SHELL */
};

static int enable_shell_uart(void)
{
 8001dbc:	b513      	push	{r0, r1, r4, lr}
 8001dbe:	4809      	ldr	r0, [pc, #36]	; (8001de4 <enable_shell_uart+0x28>)
 8001dc0:	f019 fc01 	bl	801b5c6 <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
 8001dc4:	b158      	cbz	r0, 8001dde <enable_shell_uart+0x22>

	if (IS_ENABLED(CONFIG_MCUMGR_TRANSPORT_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
 8001dc6:	2400      	movs	r4, #0
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <enable_shell_uart+0x2c>)
 8001dca:	2301      	movs	r3, #1
 8001dcc:	4905      	ldr	r1, [pc, #20]	; (8001de4 <enable_shell_uart+0x28>)
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	4806      	ldr	r0, [pc, #24]	; (8001dec <enable_shell_uart+0x30>)
 8001dd2:	9400      	str	r4, [sp, #0]
 8001dd4:	f000 ffda 	bl	8002d8c <shell_init>

	return 0;
 8001dd8:	4620      	mov	r0, r4
}
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd10      	pop	{r4, pc}
		return -ENODEV;
 8001dde:	f06f 0012 	mvn.w	r0, #18
 8001de2:	e7fa      	b.n	8001dda <enable_shell_uart+0x1e>
 8001de4:	0801c3b4 	.word	0x0801c3b4
 8001de8:	0801cca4 	.word	0x0801cca4
 8001dec:	0801ca70 	.word	0x0801ca70

08001df0 <init>:
{
 8001df0:	b510      	push	{r4, lr}
 8001df2:	4614      	mov	r4, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8001df4:	6842      	ldr	r2, [r0, #4]
	sh_uart->ctrl_blk->dev = (const struct device *)config;
 8001df6:	6810      	ldr	r0, [r2, #0]
 8001df8:	6001      	str	r1, [r0, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
 8001dfa:	6811      	ldr	r1, [r2, #0]
 8001dfc:	604c      	str	r4, [r1, #4]
	sh_uart->ctrl_blk->context = context;
 8001dfe:	6811      	ldr	r1, [r2, #0]
 8001e00:	608b      	str	r3, [r1, #8]
	const struct device *dev = sh_uart->ctrl_blk->dev;
 8001e02:	6813      	ldr	r3, [r2, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
 8001e04:	68d1      	ldr	r1, [r2, #12]
	const struct device *dev = sh_uart->ctrl_blk->dev;
 8001e06:	681c      	ldr	r4, [r3, #0]
 *
 * Any value other than 0 makes sense only in validation testing context.
 */
static inline void ring_buf_internal_reset(struct ring_buf *buf, int32_t value)
{
	buf->put_head = buf->put_tail = buf->put_base = value;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8001e0e:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
 8001e10:	610b      	str	r3, [r1, #16]
 8001e12:	e9c1 3305 	strd	r3, r3, [r1, #20]
	ring_buf_reset(sh_uart->rx_ringbuf);
 8001e16:	6911      	ldr	r1, [r2, #16]
	buf->put_head = buf->put_tail = buf->put_base = value;
 8001e18:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8001e1c:	604b      	str	r3, [r1, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
 8001e1e:	610b      	str	r3, [r1, #16]
 8001e20:	e9c1 3305 	strd	r3, r3, [r1, #20]
	sh_uart->ctrl_blk->tx_busy = 0;
 8001e24:	6811      	ldr	r1, [r2, #0]
 8001e26:	60cb      	str	r3, [r1, #12]
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 8001e28:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 8001e2a:	b123      	cbz	r3, 8001e36 <init+0x46>
 8001e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2e:	b113      	cbz	r3, 8001e36 <init+0x46>
		api->irq_callback_set(dev, cb, user_data);
 8001e30:	4904      	ldr	r1, [pc, #16]	; (8001e44 <init+0x54>)
 8001e32:	4620      	mov	r0, r4
 8001e34:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
 8001e36:	68a3      	ldr	r3, [r4, #8]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	b10b      	cbz	r3, 8001e40 <init+0x50>
		api->irq_rx_enable(dev);
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	4798      	blx	r3
}
 8001e40:	2000      	movs	r0, #0
 8001e42:	bd10      	pop	{r4, pc}
 8001e44:	0801393b 	.word	0x0801393b

08001e48 <uninit>:
	return 0;
}

static int uninit(const struct shell_transport *transport)
{
	if (sh_telnet == NULL) {
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <uninit+0x10>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
 8001e4c:	2b00      	cmp	r3, #0
	}

	return 0;
}
 8001e4e:	bf0c      	ite	eq
 8001e50:	f06f 0012 	mvneq.w	r0, #18
 8001e54:	2000      	movne	r0, #0
 8001e56:	4770      	bx	lr
 8001e58:	24002094 	.word	0x24002094

08001e5c <enable>:

static int enable(const struct shell_transport *transport, bool blocking)
{
	if (sh_telnet == NULL) {
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <enable+0x10>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
 8001e60:	2b00      	cmp	r3, #0
	}

	return 0;
}
 8001e62:	bf0c      	ite	eq
 8001e64:	f06f 0012 	mvneq.w	r0, #18
 8001e68:	2000      	movne	r0, #0
 8001e6a:	4770      	bx	lr
 8001e6c:	24002094 	.word	0x24002094

08001e70 <enable_shell_telnet>:
	.write = write,
	.read = read
};

static int enable_shell_telnet(void)
{
 8001e70:	b507      	push	{r0, r1, r2, lr}
	uint32_t level = (CONFIG_SHELL_TELNET_INIT_LOG_LEVEL > LOG_LEVEL_DBG) ?
		      CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_TELNET_INIT_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	return shell_init(&shell_telnet, NULL, cfg_flags, log_backend, level);
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <enable_shell_telnet+0x18>)
 8001e74:	2100      	movs	r1, #0
 8001e76:	2301      	movs	r3, #1
 8001e78:	4804      	ldr	r0, [pc, #16]	; (8001e8c <enable_shell_telnet+0x1c>)
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	9100      	str	r1, [sp, #0]
 8001e7e:	f000 ff85 	bl	8002d8c <shell_init>
}
 8001e82:	b003      	add	sp, #12
 8001e84:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e88:	0801cce8 	.word	0x0801cce8
 8001e8c:	0801ca44 	.word	0x0801ca44

08001e90 <telnet_accept>:
{
 8001e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e92:	4604      	mov	r4, r0
	if (error) {
 8001e94:	b9cb      	cbnz	r3, 8001eca <telnet_accept+0x3a>
	if (sh_telnet->client_ctx) {
 8001e96:	4d10      	ldr	r5, [pc, #64]	; (8001ed8 <telnet_accept+0x48>)
 8001e98:	682b      	ldr	r3, [r5, #0]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	b9ab      	cbnz	r3, 8001eca <telnet_accept+0x3a>
	if (net_context_recv(client, telnet_recv, K_NO_WAIT, NULL)) {
 8001e9e:	490f      	ldr	r1, [pc, #60]	; (8001edc <telnet_accept+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f004 ff45 	bl	8006d34 <net_context_recv>
 8001eaa:	4601      	mov	r1, r0
 8001eac:	b968      	cbnz	r0, 8001eca <telnet_accept+0x3a>
	NET_ASSERT(context);

	if (accepting) {
		context->flags |= NET_CONTEXT_ACCEPTING_SOCK;
	} else {
		context->flags &= ~NET_CONTEXT_ACCEPTING_SOCK;
 8001eae:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
 8001eb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001eb6:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	sh_telnet->client_ctx = client;
 8001eba:	682b      	ldr	r3, [r5, #0]
	ret = shell_echo_set(sh_telnet->shell_context, false);
 8001ebc:	6858      	ldr	r0, [r3, #4]
	sh_telnet->client_ctx = client;
 8001ebe:	65dc      	str	r4, [r3, #92]	; 0x5c
}
 8001ec0:	b003      	add	sp, #12
 8001ec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ret = shell_echo_set(sh_telnet->shell_context, false);
 8001ec6:	f011 bed7 	b.w	8013c78 <shell_echo_set>
	net_context_put(client);
 8001eca:	4620      	mov	r0, r4
}
 8001ecc:	b003      	add	sp, #12
 8001ece:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_context_put(client);
 8001ed2:	f004 bf07 	b.w	8006ce4 <net_context_put>
 8001ed6:	bf00      	nop
 8001ed8:	24002094 	.word	0x24002094
 8001edc:	08002201 	.word	0x08002201

08001ee0 <telnet_setup_server.constprop.0>:
static void telnet_setup_server(struct net_context **ctx, sa_family_t family,
 8001ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	4615      	mov	r5, r2
 8001ee6:	4608      	mov	r0, r1
 8001ee8:	461e      	mov	r6, r3
	if (net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx)) {
 8001eea:	2206      	movs	r2, #6
 8001eec:	4623      	mov	r3, r4
 8001eee:	2101      	movs	r1, #1
 8001ef0:	f004 fe3c 	bl	8006b6c <net_context_get>
 8001ef4:	b990      	cbnz	r0, 8001f1c <telnet_setup_server.constprop.0+0x3c>
	if (net_context_bind(*ctx, addr, addrlen)) {
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	4632      	mov	r2, r6
 8001efa:	6820      	ldr	r0, [r4, #0]
 8001efc:	f014 fcc5 	bl	801688a <net_context_bind>
 8001f00:	4601      	mov	r1, r0
 8001f02:	b958      	cbnz	r0, 8001f1c <telnet_setup_server.constprop.0+0x3c>
	if (net_context_listen(*ctx, 0)) {
 8001f04:	6820      	ldr	r0, [r4, #0]
 8001f06:	f014 fd9f 	bl	8016a48 <net_context_listen>
 8001f0a:	b938      	cbnz	r0, 8001f1c <telnet_setup_server.constprop.0+0x3c>
	if (net_context_accept(*ctx, telnet_accept, K_NO_WAIT, NULL)) {
 8001f0c:	9000      	str	r0, [sp, #0]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2300      	movs	r3, #0
 8001f12:	4906      	ldr	r1, [pc, #24]	; (8001f2c <telnet_setup_server.constprop.0+0x4c>)
 8001f14:	6820      	ldr	r0, [r4, #0]
 8001f16:	f015 f828 	bl	8016f6a <net_context_accept>
 8001f1a:	b128      	cbz	r0, 8001f28 <telnet_setup_server.constprop.0+0x48>
	if (*ctx) {
 8001f1c:	6820      	ldr	r0, [r4, #0]
 8001f1e:	b118      	cbz	r0, 8001f28 <telnet_setup_server.constprop.0+0x48>
		(void)net_context_put(*ctx);
 8001f20:	f004 fee0 	bl	8006ce4 <net_context_put>
		*ctx = NULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	6023      	str	r3, [r4, #0]
}
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
 8001f2c:	08001e91 	.word	0x08001e91

08001f30 <init>:
{
 8001f30:	b570      	push	{r4, r5, r6, lr}
	sh_telnet = (struct shell_telnet *)transport->ctx;
 8001f32:	4c18      	ldr	r4, [pc, #96]	; (8001f94 <init+0x64>)
{
 8001f34:	b086      	sub	sp, #24
	sh_telnet = (struct shell_telnet *)transport->ctx;
 8001f36:	6840      	ldr	r0, [r0, #4]
{
 8001f38:	4616      	mov	r6, r2
	memset(sh_telnet, 0, sizeof(struct shell_telnet));
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	22d8      	movs	r2, #216	; 0xd8
{
 8001f3e:	461d      	mov	r5, r3
	sh_telnet = (struct shell_telnet *)transport->ctx;
 8001f40:	6020      	str	r0, [r4, #0]
	memset(sh_telnet, 0, sizeof(struct shell_telnet));
 8001f42:	f012 fea3 	bl	8014c8c <memset>
	sh_telnet->shell_handler = evt_handler;
 8001f46:	6823      	ldr	r3, [r4, #0]
		telnet_setup_server(&ctx4, AF_INET,
 8001f48:	466a      	mov	r2, sp
 8001f4a:	2101      	movs	r1, #1
	sh_telnet->shell_handler = evt_handler;
 8001f4c:	601e      	str	r6, [r3, #0]
	sh_telnet->shell_context = context;
 8001f4e:	6823      	ldr	r3, [r4, #0]
		telnet_setup_server(&ctx4, AF_INET,
 8001f50:	4811      	ldr	r0, [pc, #68]	; (8001f98 <init+0x68>)
	sh_telnet->shell_context = context;
 8001f52:	605d      	str	r5, [r3, #4]
		struct sockaddr_in any_addr4 = {
 8001f54:	2500      	movs	r5, #0
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <init+0x6c>)
 8001f58:	e9cd 3500 	strd	r3, r5, [sp]
		telnet_setup_server(&ctx4, AF_INET,
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	f7ff ffbf 	bl	8001ee0 <telnet_setup_server.constprop.0>
		struct sockaddr_in6 any_addr6 = {
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <init+0x70>)
 8001f64:	4629      	mov	r1, r5
 8001f66:	2214      	movs	r2, #20
 8001f68:	a801      	add	r0, sp, #4
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f012 fe8e 	bl	8014c8c <memset>
		telnet_setup_server(&ctx6, AF_INET6,
 8001f70:	2318      	movs	r3, #24
 8001f72:	466a      	mov	r2, sp
 8001f74:	2102      	movs	r1, #2
 8001f76:	480b      	ldr	r0, [pc, #44]	; (8001fa4 <init+0x74>)
 8001f78:	f7ff ffb2 	bl	8001ee0 <telnet_setup_server.constprop.0>
	k_fifo_init(&sh_telnet->rx_fifo);
 8001f7c:	6820      	ldr	r0, [r4, #0]
 8001f7e:	3060      	adds	r0, #96	; 0x60
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_QUEUE_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_queue_init(queue);
 8001f80:	f019 fccb 	bl	801b91a <z_impl_k_queue_init>
	k_work_init_delayable(&sh_telnet->send_work, telnet_send_prematurely);
 8001f84:	6820      	ldr	r0, [r4, #0]
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <init+0x78>)
 8001f88:	3078      	adds	r0, #120	; 0x78
 8001f8a:	f019 fdbb 	bl	801bb04 <k_work_init_delayable>
}
 8001f8e:	4628      	mov	r0, r5
 8001f90:	b006      	add	sp, #24
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
 8001f94:	24002094 	.word	0x24002094
 8001f98:	2400208c 	.word	0x2400208c
 8001f9c:	17000001 	.word	0x17000001
 8001fa0:	17000002 	.word	0x17000002
 8001fa4:	24002090 	.word	0x24002090
 8001fa8:	08013a17 	.word	0x08013a17

08001fac <read>:
{
 8001fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sh_telnet == NULL) {
 8001fb0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8002020 <read+0x74>
{
 8001fb4:	460f      	mov	r7, r1
 8001fb6:	4614      	mov	r4, r2
 8001fb8:	461d      	mov	r5, r3
	if (sh_telnet == NULL) {
 8001fba:	f8d8 0000 	ldr.w	r0, [r8]
 8001fbe:	b360      	cbz	r0, 800201a <read+0x6e>
	if (sh_telnet->client_ctx == NULL) {
 8001fc0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001fc2:	b33b      	cbz	r3, 8002014 <read+0x68>
		union { uintptr_t x; struct k_queue * val; } parm0 = { .val = queue };
		return (void *) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_QUEUE_PEEK_HEAD);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_peek_head(queue);
 8001fc4:	3060      	adds	r0, #96	; 0x60
 8001fc6:	f019 fcd8 	bl	801b97a <z_impl_k_queue_peek_head>
	if (pkt == NULL) {
 8001fca:	4606      	mov	r6, r0
 8001fcc:	b310      	cbz	r0, 8002014 <read+0x68>
	read_len = net_pkt_remaining_data(pkt);
 8001fce:	f015 fb9f 	bl	8017710 <net_pkt_remaining_data>
	if (read_len > length) {
 8001fd2:	4284      	cmp	r4, r0
	read_len = net_pkt_remaining_data(pkt);
 8001fd4:	4602      	mov	r2, r0
	if (net_pkt_read(pkt, data, read_len) < 0) {
 8001fd6:	4639      	mov	r1, r7
	if (read_len > length) {
 8001fd8:	bf38      	it	cc
 8001fda:	4622      	movcc	r2, r4
	if (net_pkt_read(pkt, data, read_len) < 0) {
 8001fdc:	4630      	mov	r0, r6
		flush = false;
 8001fde:	bf34      	ite	cc
 8001fe0:	2400      	movcc	r4, #0
	bool flush = true;
 8001fe2:	2401      	movcs	r4, #1
	*cnt = read_len;
 8001fe4:	602a      	str	r2, [r5, #0]
	if (net_pkt_read(pkt, data, read_len) < 0) {
 8001fe6:	f015 fb29 	bl	801763c <net_pkt_read>
 8001fea:	2800      	cmp	r0, #0
 8001fec:	da0e      	bge.n	800200c <read+0x60>
		*cnt = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	602b      	str	r3, [r5, #0]
		(void)k_fifo_get(&sh_telnet->rx_fifo, K_NO_WAIT);
 8001ff2:	f8d8 0000 	ldr.w	r0, [r8]
 8001ff6:	3060      	adds	r0, #96	; 0x60
	return z_impl_k_queue_get(queue, timeout);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f00f ffcc 	bl	8011f98 <z_impl_k_queue_get>
		net_pkt_unref(pkt);
 8002000:	4630      	mov	r0, r6
 8002002:	f015 f96e 	bl	80172e2 <net_pkt_unref>
	return 0;
 8002006:	2000      	movs	r0, #0
}
 8002008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flush) {
 800200c:	2c00      	cmp	r4, #0
 800200e:	d1f0      	bne.n	8001ff2 <read+0x46>
	return 0;
 8002010:	4620      	mov	r0, r4
 8002012:	e7f9      	b.n	8002008 <read+0x5c>
	*cnt = 0;
 8002014:	2000      	movs	r0, #0
 8002016:	6028      	str	r0, [r5, #0]
	return 0;
 8002018:	e7f6      	b.n	8002008 <read+0x5c>
		return -ENODEV;
 800201a:	f06f 0012 	mvn.w	r0, #18
 800201e:	e7f3      	b.n	8002008 <read+0x5c>
 8002020:	24002094 	.word	0x24002094

08002024 <telnet_end_client_connection>:
{
 8002024:	b510      	push	{r4, lr}
	(void)net_context_put(sh_telnet->client_ctx);
 8002026:	4c0d      	ldr	r4, [pc, #52]	; (800205c <telnet_end_client_connection+0x38>)
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800202c:	f004 fe5a 	bl	8006ce4 <net_context_put>
	sh_telnet->client_ctx = NULL;
 8002030:	6820      	ldr	r0, [r4, #0]
 8002032:	2300      	movs	r3, #0
	k_work_cancel_delayable_sync(&sh_telnet->send_work,
 8002034:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
 8002038:	3078      	adds	r0, #120	; 0x78
	sh_telnet->client_ctx = NULL;
 800203a:	f840 3c1c 	str.w	r3, [r0, #-28]
	sh_telnet->output_lock = false;
 800203e:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
	k_work_cancel_delayable_sync(&sh_telnet->send_work,
 8002042:	f019 fd81 	bl	801bb48 <k_work_cancel_delayable_sync>
	while ((pkt = k_fifo_get(&sh_telnet->rx_fifo, K_NO_WAIT)) != NULL) {
 8002046:	6820      	ldr	r0, [r4, #0]
 8002048:	3060      	adds	r0, #96	; 0x60
 800204a:	2200      	movs	r2, #0
 800204c:	2300      	movs	r3, #0
 800204e:	f00f ffa3 	bl	8011f98 <z_impl_k_queue_get>
 8002052:	b900      	cbnz	r0, 8002056 <telnet_end_client_connection+0x32>
}
 8002054:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
 8002056:	f015 f944 	bl	80172e2 <net_pkt_unref>
 800205a:	e7f4      	b.n	8002046 <telnet_end_client_connection+0x22>
 800205c:	24002094 	.word	0x24002094

08002060 <telnet_send>:
{
 8002060:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
	if (sh_telnet->line_out.len == 0) {
 8002064:	4e12      	ldr	r6, [pc, #72]	; (80020b0 <telnet_send+0x50>)
 8002066:	6831      	ldr	r1, [r6, #0]
 8002068:	f8b1 2058 	ldrh.w	r2, [r1, #88]	; 0x58
 800206c:	b1d2      	cbz	r2, 80020a4 <telnet_send+0x44>
	if (sh_telnet->client_ctx == NULL) {
 800206e:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
 8002070:	b1d0      	cbz	r0, 80020a8 <telnet_send+0x48>
	err = net_context_send(sh_telnet->client_ctx, sh_telnet->line_out.buf,
 8002072:	2500      	movs	r5, #0
 8002074:	f04f 38ff 	mov.w	r8, #4294967295
 8002078:	f04f 39ff 	mov.w	r9, #4294967295
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <telnet_send+0x54>)
 800207e:	3108      	adds	r1, #8
 8002080:	9502      	str	r5, [sp, #8]
 8002082:	e9cd 8900 	strd	r8, r9, [sp]
 8002086:	f014 ffa1 	bl	8016fcc <net_context_send>
	if (err < 0) {
 800208a:	1e04      	subs	r4, r0, #0
 800208c:	da05      	bge.n	800209a <telnet_send+0x3a>
		telnet_end_client_connection();
 800208e:	f7ff ffc9 	bl	8002024 <telnet_end_client_connection>
}
 8002092:	4620      	mov	r0, r4
 8002094:	b004      	add	sp, #16
 8002096:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	sh_telnet->line_out.len = 0;
 800209a:	6833      	ldr	r3, [r6, #0]
	return 0;
 800209c:	462c      	mov	r4, r5
	sh_telnet->line_out.len = 0;
 800209e:	f8a3 5058 	strh.w	r5, [r3, #88]	; 0x58
	return 0;
 80020a2:	e7f6      	b.n	8002092 <telnet_send+0x32>
		return 0;
 80020a4:	4614      	mov	r4, r2
 80020a6:	e7f4      	b.n	8002092 <telnet_send+0x32>
		return -ENOTCONN;
 80020a8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 80020ac:	e7f1      	b.n	8002092 <telnet_send+0x32>
 80020ae:	bf00      	nop
 80020b0:	24002094 	.word	0x24002094
 80020b4:	08013a1b 	.word	0x08013a1b

080020b8 <write>:
{
 80020b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (sh_telnet == NULL) {
 80020bc:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80021bc <write+0x104>
{
 80020c0:	461e      	mov	r6, r3
 80020c2:	4690      	mov	r8, r2
 80020c4:	9101      	str	r1, [sp, #4]
	if (sh_telnet == NULL) {
 80020c6:	f8d9 3000 	ldr.w	r3, [r9]
 80020ca:	b92b      	cbnz	r3, 80020d8 <write+0x20>
		return -ENODEV;
 80020cc:	f06f 0012 	mvn.w	r0, #18
		*cnt = 0;
 80020d0:	6033      	str	r3, [r6, #0]
}
 80020d2:	b003      	add	sp, #12
 80020d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (sh_telnet->client_ctx == NULL || sh_telnet->output_lock) {
 80020d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020da:	b112      	cbz	r2, 80020e2 <write+0x2a>
 80020dc:	f893 50d0 	ldrb.w	r5, [r3, #208]	; 0xd0
 80020e0:	b11d      	cbz	r5, 80020ea <write+0x32>
		*cnt = length;
 80020e2:	f8c6 8000 	str.w	r8, [r6]
	return 0;
 80020e6:	2000      	movs	r0, #0
 80020e8:	e7f3      	b.n	80020d2 <write+0x1a>
	*cnt = 0;
 80020ea:	6035      	str	r5, [r6, #0]
	lb = &sh_telnet->line_out;
 80020ec:	f8d9 7000 	ldr.w	r7, [r9]
}

static inline k_ticks_t k_work_delayable_remaining_get(
	const struct k_work_delayable *dwork)
{
	return z_timeout_remaining(&dwork->timeout);
 80020f0:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80020f4:	f019 fe74 	bl	801bde0 <z_timeout_remaining>
		if (result32 && (t < BIT64(32))) {
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
		t += off;
 80020fc:	3009      	adds	r0, #9
 80020fe:	f145 0100 	adc.w	r1, r5, #0
		if (result32 && (t < BIT64(32))) {
 8002102:	4283      	cmp	r3, r0
 8002104:	eb75 0301 	sbcs.w	r3, r5, r1
 8002108:	d330      	bcc.n	800216c <write+0xb4>
			return ((uint32_t)t) / (from_hz / to_hz);
 800210a:	240a      	movs	r4, #10
 800210c:	fbb0 f4f4 	udiv	r4, r0, r4
	was_running = k_work_cancel_delayable_sync(&sh_telnet->send_work,
 8002110:	f8d9 0000 	ldr.w	r0, [r9]
		memcpy(lb->buf + lb->len, (uint8_t *)data + *cnt, copy_len);
 8002114:	f107 0b08 	add.w	fp, r7, #8
	was_running = k_work_cancel_delayable_sync(&sh_telnet->send_work,
 8002118:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
 800211c:	3078      	adds	r0, #120	; 0x78
 800211e:	f019 fd13 	bl	801bb48 <k_work_cancel_delayable_sync>
 8002122:	9000      	str	r0, [sp, #0]
		if (lb->len + length - *cnt > TELNET_LINE_SIZE) {
 8002124:	f8b7 0058 	ldrh.w	r0, [r7, #88]	; 0x58
 8002128:	6831      	ldr	r1, [r6, #0]
 800212a:	eb08 0300 	add.w	r3, r8, r0
 800212e:	1a5b      	subs	r3, r3, r1
 8002130:	2b50      	cmp	r3, #80	; 0x50
		memcpy(lb->buf + lb->len, (uint8_t *)data + *cnt, copy_len);
 8002132:	9b01      	ldr	r3, [sp, #4]
			copy_len = TELNET_LINE_SIZE - lb->len;
 8002134:	bf8c      	ite	hi
 8002136:	f1c0 0a50 	rsbhi	sl, r0, #80	; 0x50
			copy_len = length - *cnt;
 800213a:	eba8 0a01 	subls.w	sl, r8, r1
		memcpy(lb->buf + lb->len, (uint8_t *)data + *cnt, copy_len);
 800213e:	4458      	add	r0, fp
 8002140:	4419      	add	r1, r3
 8002142:	4652      	mov	r2, sl
 8002144:	f012 fd97 	bl	8014c76 <memcpy>
		lb->len += copy_len;
 8002148:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800214c:	4453      	add	r3, sl
 800214e:	b29b      	uxth	r3, r3
		if (lb->buf[lb->len - 1] == '\n' ||
 8002150:	18f9      	adds	r1, r7, r3
		lb->len += copy_len;
 8002152:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		if (lb->buf[lb->len - 1] == '\n' ||
 8002156:	79c9      	ldrb	r1, [r1, #7]
 8002158:	290a      	cmp	r1, #10
 800215a:	d001      	beq.n	8002160 <write+0xa8>
 800215c:	2b50      	cmp	r3, #80	; 0x50
 800215e:	d10c      	bne.n	800217a <write+0xc2>
			err = telnet_send();
 8002160:	f7ff ff7e 	bl	8002060 <telnet_send>
			if (err != 0) {
 8002164:	b148      	cbz	r0, 800217a <write+0xc2>
				*cnt = length;
 8002166:	f8c6 8000 	str.w	r8, [r6]
				return err;
 800216a:	e7b2      	b.n	80020d2 <write+0x1a>
			return t / ((uint64_t)from_hz / to_hz);
 800216c:	220a      	movs	r2, #10
 800216e:	2300      	movs	r3, #0
 8002170:	f7fe fb60 	bl	8000834 <__aeabi_uldivmod>
 8002174:	4604      	mov	r4, r0
 8002176:	460d      	mov	r5, r1
 8002178:	e7ca      	b.n	8002110 <write+0x58>
		*cnt += copy_len;
 800217a:	6833      	ldr	r3, [r6, #0]
 800217c:	eb0a 0203 	add.w	r2, sl, r3
	} while (*cnt < length);
 8002180:	4590      	cmp	r8, r2
		*cnt += copy_len;
 8002182:	6032      	str	r2, [r6, #0]
	} while (*cnt < length);
 8002184:	d8ce      	bhi.n	8002124 <write+0x6c>
	if (lb->len > 0) {
 8002186:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800218a:	b17b      	cbz	r3, 80021ac <write+0xf4>
		timeout = was_running ? timeout : TELNET_TIMEOUT;
 800218c:	9b00      	ldr	r3, [sp, #0]
			return t * ((uint64_t)to_hz / from_hz);
 800218e:	210a      	movs	r1, #10
		k_work_reschedule(&sh_telnet->send_work, K_MSEC(timeout));
 8002190:	f8d9 0000 	ldr.w	r0, [r9]
		timeout = was_running ? timeout : TELNET_TIMEOUT;
 8002194:	2b00      	cmp	r3, #0
		k_work_reschedule(&sh_telnet->send_work, K_MSEC(timeout));
 8002196:	f100 0078 	add.w	r0, r0, #120	; 0x78
		timeout = was_running ? timeout : TELNET_TIMEOUT;
 800219a:	bf04      	itt	eq
 800219c:	2464      	moveq	r4, #100	; 0x64
 800219e:	2500      	moveq	r5, #0
 80021a0:	fba4 2301 	umull	r2, r3, r4, r1
		k_work_reschedule(&sh_telnet->send_work, K_MSEC(timeout));
 80021a4:	fb01 3305 	mla	r3, r1, r5, r3
 80021a8:	f010 f938 	bl	801241c <k_work_reschedule>
	sh_telnet->shell_handler(SHELL_TRANSPORT_EVT_TX_RDY,
 80021ac:	f8d9 3000 	ldr.w	r3, [r9]
 80021b0:	2001      	movs	r0, #1
 80021b2:	e9d3 2100 	ldrd	r2, r1, [r3]
 80021b6:	4790      	blx	r2
 80021b8:	e795      	b.n	80020e6 <write+0x2e>
 80021ba:	bf00      	nop
 80021bc:	24002094 	.word	0x24002094

080021c0 <telnet_command_send_reply>:
{
 80021c0:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	if (sh_telnet->client_ctx == NULL) {
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <telnet_command_send_reply+0x38>)
{
 80021c4:	4604      	mov	r4, r0
 80021c6:	460a      	mov	r2, r1
	if (sh_telnet->client_ctx == NULL) {
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80021cc:	b190      	cbz	r0, 80021f4 <telnet_command_send_reply+0x34>
	err = net_context_send(sh_telnet->client_ctx, msg, len, telnet_sent_cb,
 80021ce:	2300      	movs	r3, #0
 80021d0:	f04f 36ff 	mov.w	r6, #4294967295
 80021d4:	f04f 37ff 	mov.w	r7, #4294967295
 80021d8:	4621      	mov	r1, r4
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <telnet_command_send_reply+0x3c>)
 80021de:	e9cd 6700 	strd	r6, r7, [sp]
 80021e2:	f014 fef3 	bl	8016fcc <net_context_send>
	if (err < 0) {
 80021e6:	2800      	cmp	r0, #0
 80021e8:	da04      	bge.n	80021f4 <telnet_command_send_reply+0x34>
}
 80021ea:	b004      	add	sp, #16
 80021ec:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
		telnet_end_client_connection();
 80021f0:	f7ff bf18 	b.w	8002024 <telnet_end_client_connection>
}
 80021f4:	b004      	add	sp, #16
 80021f6:	bdd0      	pop	{r4, r6, r7, pc}
 80021f8:	24002094 	.word	0x24002094
 80021fc:	08013a1b 	.word	0x08013a1b

08002200 <telnet_recv>:
{
 8002200:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002204:	9e08      	ldr	r6, [sp, #32]
 8002206:	4607      	mov	r7, r0
	if (!pkt || status) {
 8002208:	460c      	mov	r4, r1
 800220a:	b101      	cbz	r1, 800220e <telnet_recv+0xe>
 800220c:	b126      	cbz	r6, 8002218 <telnet_recv+0x18>
}
 800220e:	b002      	add	sp, #8
 8002210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		telnet_end_client_connection();
 8002214:	f7ff bf06 	b.w	8002024 <telnet_end_client_connection>
	len = net_pkt_remaining_data(pkt);
 8002218:	4608      	mov	r0, r1
		sh_telnet->output_lock = true;
 800221a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80022e4 <telnet_recv+0xe4>
	len = net_pkt_remaining_data(pkt);
 800221e:	f015 fa77 	bl	8017710 <net_pkt_remaining_data>
	(void)net_context_update_recv_wnd(client, len);
 8002222:	4601      	mov	r1, r0
	len = net_pkt_remaining_data(pkt);
 8002224:	4605      	mov	r5, r0
	(void)net_context_update_recv_wnd(client, len);
 8002226:	4638      	mov	r0, r7
	telnet_command_send_reply((uint8_t *)alive, strlen(alive));
 8002228:	4f2f      	ldr	r7, [pc, #188]	; (80022e8 <telnet_recv+0xe8>)
	(void)net_context_update_recv_wnd(client, len);
 800222a:	f014 ff2b 	bl	8017084 <net_context_update_recv_wnd>
	while (len >= TELNET_MIN_COMMAND_LEN) {
 800222e:	2d01      	cmp	r5, #1
 8002230:	d80f      	bhi.n	8002252 <telnet_recv+0x52>
	if (len == 0) {
 8002232:	2d00      	cmp	r5, #0
 8002234:	d050      	beq.n	80022d8 <telnet_recv+0xd8>
	k_fifo_put(&sh_telnet->rx_fifo, pkt);
 8002236:	4d2b      	ldr	r5, [pc, #172]	; (80022e4 <telnet_recv+0xe4>)
 8002238:	4621      	mov	r1, r4
 800223a:	6828      	ldr	r0, [r5, #0]
 800223c:	3060      	adds	r0, #96	; 0x60
 800223e:	f019 fb78 	bl	801b932 <k_queue_append>
	sh_telnet->shell_handler(SHELL_TRANSPORT_EVT_RX_RDY,
 8002242:	682b      	ldr	r3, [r5, #0]
 8002244:	2000      	movs	r0, #0
 8002246:	e9d3 2100 	ldrd	r2, r1, [r3]
}
 800224a:	b002      	add	sp, #8
 800224c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	sh_telnet->shell_handler(SHELL_TRANSPORT_EVT_RX_RDY,
 8002250:	4710      	bx	r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(cmd_access, uint16_t);
 8002252:	2302      	movs	r3, #2
	cmd = (struct telnet_simple_command *)net_pkt_get_data(pkt,
 8002254:	4669      	mov	r1, sp
 8002256:	4620      	mov	r0, r4
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(cmd_access, uint16_t);
 8002258:	9600      	str	r6, [sp, #0]
 800225a:	9301      	str	r3, [sp, #4]
	cmd = (struct telnet_simple_command *)net_pkt_get_data(pkt,
 800225c:	f015 fb64 	bl	8017928 <net_pkt_get_data>
	if (!cmd || cmd->iac != NVT_CMD_IAC) {
 8002260:	4605      	mov	r5, r0
 8002262:	2800      	cmp	r0, #0
 8002264:	d0e7      	beq.n	8002236 <telnet_recv+0x36>
 8002266:	7803      	ldrb	r3, [r0, #0]
 8002268:	2bff      	cmp	r3, #255	; 0xff
 800226a:	d1e4      	bne.n	8002236 <telnet_recv+0x36>
	switch (cmd->op) {
 800226c:	7843      	ldrb	r3, [r0, #1]
 800226e:	2bf6      	cmp	r3, #246	; 0xf6
 8002270:	d022      	beq.n	80022b8 <telnet_recv+0xb8>
 8002272:	2bfd      	cmp	r3, #253	; 0xfd
 8002274:	d028      	beq.n	80022c8 <telnet_recv+0xc8>
 8002276:	2bf5      	cmp	r3, #245	; 0xf5
 8002278:	d10b      	bne.n	8002292 <telnet_recv+0x92>
		sh_telnet->output_lock = true;
 800227a:	f8d8 0000 	ldr.w	r0, [r8]
 800227e:	2301      	movs	r3, #1
		k_work_cancel_delayable_sync(&sh_telnet->send_work,
 8002280:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
		sh_telnet->output_lock = true;
 8002284:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
		sh_telnet->line_out.len = 0;
 8002288:	f8a0 6058 	strh.w	r6, [r0, #88]	; 0x58
		k_work_cancel_delayable_sync(&sh_telnet->send_work,
 800228c:	3078      	adds	r0, #120	; 0x78
 800228e:	f019 fc5b 	bl	801bb48 <k_work_cancel_delayable_sync>
	if (cmd->op == NVT_CMD_SB) {
 8002292:	786b      	ldrb	r3, [r5, #1]
 8002294:	2bfa      	cmp	r3, #250	; 0xfa
 8002296:	d01f      	beq.n	80022d8 <telnet_recv+0xd8>
	    cmd->op == NVT_CMD_DO || cmd->op == NVT_CMD_DONT) {
 8002298:	3305      	adds	r3, #5
			ret = net_pkt_skip(pkt, ret);
 800229a:	4620      	mov	r0, r4
	if (cmd->op == NVT_CMD_WILL || cmd->op == NVT_CMD_WONT ||
 800229c:	b2db      	uxtb	r3, r3
		return TELNET_WILL_DO_COMMAND_LEN;
 800229e:	2b03      	cmp	r3, #3
			ret = net_pkt_skip(pkt, ret);
 80022a0:	bf8c      	ite	hi
 80022a2:	2102      	movhi	r1, #2
 80022a4:	2103      	movls	r1, #3
 80022a6:	f015 f912 	bl	80174ce <net_pkt_skip>
			if (ret < 0) {
 80022aa:	2800      	cmp	r0, #0
 80022ac:	db14      	blt.n	80022d8 <telnet_recv+0xd8>
		len = net_pkt_remaining_data(pkt);
 80022ae:	4620      	mov	r0, r4
 80022b0:	f015 fa2e 	bl	8017710 <net_pkt_remaining_data>
 80022b4:	4605      	mov	r5, r0
 80022b6:	e7ba      	b.n	800222e <telnet_recv+0x2e>
	telnet_command_send_reply((uint8_t *)alive, strlen(alive));
 80022b8:	4638      	mov	r0, r7
 80022ba:	f012 fc8f 	bl	8014bdc <strlen>
 80022be:	b281      	uxth	r1, r0
 80022c0:	4638      	mov	r0, r7
	telnet_command_send_reply((uint8_t *)cmd,
 80022c2:	f7ff ff7d 	bl	80021c0 <telnet_command_send_reply>
}
 80022c6:	e7e4      	b.n	8002292 <telnet_recv+0x92>
	switch (cmd->opt) {
 80022c8:	7883      	ldrb	r3, [r0, #2]
	telnet_command_send_reply((uint8_t *)cmd,
 80022ca:	2103      	movs	r1, #3
		cmd->op = NVT_CMD_WONT;
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	bf0c      	ite	eq
 80022d0:	23fb      	moveq	r3, #251	; 0xfb
 80022d2:	23fc      	movne	r3, #252	; 0xfc
 80022d4:	7043      	strb	r3, [r0, #1]
	telnet_command_send_reply((uint8_t *)cmd,
 80022d6:	e7f4      	b.n	80022c2 <telnet_recv+0xc2>
	net_pkt_unref(pkt);
 80022d8:	4620      	mov	r0, r4
}
 80022da:	b002      	add	sp, #8
 80022dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_pkt_unref(pkt);
 80022e0:	f014 bfff 	b.w	80172e2 <net_pkt_unref>
 80022e4:	24002094 	.word	0x24002094
 80022e8:	0801e195 	.word	0x0801e195

080022ec <shell_internal_help_print>:
	sh->ctx->cmd_buff_pos = 0;
	sh->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *sh)
{
 80022ec:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(sh, &sh->ctx->active_cmd);
 80022ee:	6881      	ldr	r1, [r0, #8]
{
 80022f0:	4604      	mov	r4, r0
	z_shell_help_cmd_print(sh, &sh->ctx->active_cmd);
 80022f2:	3108      	adds	r1, #8
 80022f4:	f001 f8f4 	bl	80034e0 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(sh, &sh->ctx->active_cmd,
 80022f8:	68a1      	ldr	r1, [r4, #8]
 80022fa:	4620      	mov	r0, r4
 80022fc:	4a02      	ldr	r2, [pc, #8]	; (8002308 <shell_internal_help_print+0x1c>)
 80022fe:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
 8002300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(sh, &sh->ctx->active_cmd,
 8002304:	f001 b88a 	b.w	800341c <z_shell_help_subcmd_print>
 8002308:	0801e1ae 	.word	0x0801e1ae

0800230c <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
 800230c:	4901      	ldr	r1, [pc, #4]	; (8002314 <z_cursor_next_line_move.isra.0+0x8>)
 800230e:	f011 bbcc 	b.w	8013aaa <z_shell_raw_fprintf>
 8002312:	bf00      	nop
 8002314:	0801dcfa 	.word	0x0801dcfa

08002318 <history_handle>:

	z_shell_history_put(sh->history, line, length);
}

static void history_handle(const struct shell *sh, bool up)
{
 8002318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800231a:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
 800231c:	6880      	ldr	r0, [r0, #8]
 800231e:	460d      	mov	r5, r1
 8002320:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(sh)) {
 8002324:	075a      	lsls	r2, r3, #29
 8002326:	d505      	bpl.n	8002334 <history_handle+0x1c>
		z_flag_history_exit_set(sh, false);
 8002328:	2100      	movs	r1, #0
 800232a:	f011 fc07 	bl	8013b3c <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(sh->history);
 800232e:	68e0      	ldr	r0, [r4, #12]
 8002330:	f012 fa14 	bl	801475c <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
 8002334:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(sh->history)) {
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	b973      	cbnz	r3, 8002358 <history_handle+0x40>
		if (up) {
 800233a:	2d00      	cmp	r5, #0
 800233c:	d039      	beq.n	80023b2 <history_handle+0x9a>
			uint16_t cmd_len = z_shell_strlen(sh->ctx->cmd_buff);
 800233e:	68a0      	ldr	r0, [r4, #8]
 8002340:	3042      	adds	r0, #66	; 0x42
 8002342:	f011 fbac 	bl	8013a9e <z_shell_strlen>

			if (cmd_len) {
 8002346:	68a3      	ldr	r3, [r4, #8]
 8002348:	2800      	cmp	r0, #0
 800234a:	d034      	beq.n	80023b6 <history_handle+0x9e>
				strcpy(sh->ctx->temp_buff,
 800234c:	f103 0142 	add.w	r1, r3, #66	; 0x42
 8002350:	f503 70a1 	add.w	r0, r3, #322	; 0x142
 8002354:	f012 fc0c 	bl	8014b70 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(sh->history, up,
					   sh->ctx->cmd_buff, &len);
 8002358:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(sh->history, up,
 800235a:	f10d 0306 	add.w	r3, sp, #6
 800235e:	4629      	mov	r1, r5
 8002360:	68e0      	ldr	r0, [r4, #12]
 8002362:	3242      	adds	r2, #66	; 0x42
 8002364:	f012 f9fd 	bl	8014762 <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
 8002368:	b958      	cbnz	r0, 8002382 <history_handle+0x6a>
		strcpy(sh->ctx->cmd_buff, sh->ctx->temp_buff);
 800236a:	68a0      	ldr	r0, [r4, #8]
 800236c:	f500 71a1 	add.w	r1, r0, #322	; 0x142
 8002370:	3042      	adds	r0, #66	; 0x42
 8002372:	f012 fbfd 	bl	8014b70 <strcpy>
		len = z_shell_strlen(sh->ctx->cmd_buff);
 8002376:	68a0      	ldr	r0, [r4, #8]
 8002378:	3042      	adds	r0, #66	; 0x42
 800237a:	f011 fb90 	bl	8013a9e <z_shell_strlen>
 800237e:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(sh);
 8002382:	4620      	mov	r0, r4
 8002384:	f011 ff97 	bl	80142b6 <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8002388:	68a3      	ldr	r3, [r4, #8]
 800238a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
 800238e:	069b      	lsls	r3, r3, #26
 8002390:	d503      	bpl.n	800239a <history_handle+0x82>
 8002392:	490a      	ldr	r1, [pc, #40]	; (80023bc <history_handle+0xa4>)
 8002394:	6960      	ldr	r0, [r4, #20]
 8002396:	f011 fb88 	bl	8013aaa <z_shell_raw_fprintf>
	z_clear_eos(sh);
	z_shell_print_cmd(sh);
 800239a:	4620      	mov	r0, r4
 800239c:	f000 ff0a 	bl	80031b4 <z_shell_print_cmd>
	sh->ctx->cmd_buff_pos = len;
 80023a0:	68a2      	ldr	r2, [r4, #8]
 80023a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	sh->ctx->cmd_buff_len = len;
	z_shell_op_cond_next_line(sh);
 80023a6:	4620      	mov	r0, r4
	sh->ctx->cmd_buff_pos = len;
 80023a8:	87d3      	strh	r3, [r2, #62]	; 0x3e
	sh->ctx->cmd_buff_len = len;
 80023aa:	68a2      	ldr	r2, [r4, #8]
 80023ac:	8793      	strh	r3, [r2, #60]	; 0x3c
	z_shell_op_cond_next_line(sh);
 80023ae:	f011 feef 	bl	8014190 <z_shell_op_cond_next_line>
}
 80023b2:	b003      	add	sp, #12
 80023b4:	bd30      	pop	{r4, r5, pc}
				sh->ctx->temp_buff[0] = '\0';
 80023b6:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
 80023ba:	e7cd      	b.n	8002358 <history_handle+0x40>
 80023bc:	0801caec 	.word	0x0801caec

080023c0 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *sh)
{
 80023c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c4:	b0a7      	sub	sp, #156	; 0x9c
 80023c6:	4604      	mov	r4, r0
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1] = {0}; /* +1 reserved for NULL */
 80023c8:	2254      	movs	r2, #84	; 0x54
 80023ca:	2100      	movs	r1, #0
 80023cc:	a811      	add	r0, sp, #68	; 0x44
 80023ce:	f012 fc5d 	bl	8014c8c <memset>
	const struct shell_static_entry *parent = selected_cmd_get(sh);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
 80023d2:	2300      	movs	r3, #0
	char quote;
	const char **argvp;
	char *cmd_buf = sh->ctx->cmd_buff;
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(sh);
 80023d4:	4620      	mov	r0, r4
	size_t argc = 0, args_left = SIZE_MAX;
 80023d6:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char *cmd_buf = sh->ctx->cmd_buff;
 80023da:	68a3      	ldr	r3, [r4, #8]
 80023dc:	3342      	adds	r3, #66	; 0x42
 80023de:	9303      	str	r3, [sp, #12]
	z_shell_op_cursor_end_move(sh);
 80023e0:	f011 ff6f 	bl	80142c2 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(sh)) {
 80023e4:	4620      	mov	r0, r4
 80023e6:	f011 feba 	bl	801415e <z_shell_cursor_in_empty_line>
 80023ea:	b910      	cbnz	r0, 80023f2 <execute+0x32>
		z_cursor_next_line_move(sh);
 80023ec:	6960      	ldr	r0, [r4, #20]
 80023ee:	f7ff ff8d 	bl	800230c <z_cursor_next_line_move.isra.0>
	}

	memset(&sh->ctx->active_cmd, 0, sizeof(sh->ctx->active_cmd));
 80023f2:	68a0      	ldr	r0, [r4, #8]
 80023f4:	2214      	movs	r2, #20
 80023f6:	2100      	movs	r1, #0
		argvp = &argv[1];
		active_cmd_prepare(parent, &sh->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
 80023f8:	2600      	movs	r6, #0
	memset(&sh->ctx->active_cmd, 0, sizeof(sh->ctx->active_cmd));
 80023fa:	3008      	adds	r0, #8
	size_t argc = 0, args_left = SIZE_MAX;
 80023fc:	f04f 37ff 	mov.w	r7, #4294967295
	memset(&sh->ctx->active_cmd, 0, sizeof(sh->ctx->active_cmd));
 8002400:	f012 fc44 	bl	8014c8c <memset>
		z_shell_cmd_trim(sh);
 8002404:	4620      	mov	r0, r4
 8002406:	f011 fe2a 	bl	801405e <z_shell_cmd_trim>
		history_put(sh, sh->ctx->cmd_buff,
 800240a:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(sh->history, line, length);
 800240c:	68e0      	ldr	r0, [r4, #12]
	size_t cmd_with_handler_lvl = 0;
 800240e:	46b2      	mov	sl, r6
	z_shell_history_put(sh->history, line, length);
 8002410:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
		z_shell_wildcard_prepare(sh);
 8002412:	46b3      	mov	fp, r6
	z_shell_history_put(sh->history, line, length);
 8002414:	3142      	adds	r1, #66	; 0x42
		z_shell_wildcard_prepare(sh);
 8002416:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 800241a:	4635      	mov	r5, r6
 800241c:	46b1      	mov	r9, r6
	z_shell_history_put(sh->history, line, length);
 800241e:	f012 f9d7 	bl	80147d0 <z_shell_history_put>
		z_shell_wildcard_prepare(sh);
 8002422:	4620      	mov	r0, r4
 8002424:	f012 fa56 	bl	80148d4 <z_shell_wildcard_prepare>
 8002428:	9602      	str	r6, [sp, #8]
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
 800242a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800242e:	2a01      	cmp	r2, #1
 8002430:	f000 80dd 	beq.w	80025ee <execute+0x22e>
 8002434:	2b13      	cmp	r3, #19
 8002436:	f240 80ac 	bls.w	8002592 <execute+0x1d2>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
 800243a:	9b06      	ldr	r3, [sp, #24]
 800243c:	2b02      	cmp	r3, #2
 800243e:	f040 80ab 	bne.w	8002598 <execute+0x1d8>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(sh, SHELL_ERROR, "%s\n",
 8002442:	4b8a      	ldr	r3, [pc, #552]	; (800266c <execute+0x2ac>)
 8002444:	2101      	movs	r1, #1
 8002446:	4a8a      	ldr	r2, [pc, #552]	; (8002670 <execute+0x2b0>)
 8002448:	e015      	b.n	8002476 <execute+0xb6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
 800244a:	2302      	movs	r3, #2
 800244c:	9a03      	ldr	r2, [sp, #12]
 800244e:	4641      	mov	r1, r8
 8002450:	a806      	add	r0, sp, #24
 8002452:	f011 fc97 	bl	8013d84 <z_shell_make_argv>
		cmd_buf = (char *)argvp[1];
 8002456:	f8d8 2004 	ldr.w	r2, [r8, #4]
		if (argc == 0) {
 800245a:	9906      	ldr	r1, [sp, #24]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
 800245c:	4603      	mov	r3, r0
		cmd_buf = (char *)argvp[1];
 800245e:	9203      	str	r2, [sp, #12]
		if (argc == 0) {
 8002460:	b929      	cbnz	r1, 800246e <execute+0xae>
			return -ENOEXEC;
 8002462:	f06f 0507 	mvn.w	r5, #7
	}

	/* Executing the deepest found handler. */
	return exec_cmd(sh, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
 8002466:	4628      	mov	r0, r5
 8002468:	b027      	add	sp, #156	; 0x9c
 800246a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
 800246e:	2901      	cmp	r1, #1
 8002470:	d105      	bne.n	800247e <execute+0xbe>
 8002472:	b120      	cbz	r0, 800247e <execute+0xbe>
			z_shell_fprintf(sh, SHELL_ERROR,
 8002474:	4a7f      	ldr	r2, [pc, #508]	; (8002674 <execute+0x2b4>)
 8002476:	4620      	mov	r0, r4
 8002478:	f011 ffd1 	bl	801441e <z_shell_fprintf>
 800247c:	e7f1      	b.n	8002462 <execute+0xa2>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 800247e:	9b05      	ldr	r3, [sp, #20]
 8002480:	b35b      	cbz	r3, 80024da <execute+0x11a>
		    z_shell_help_request(argvp[0])) {
 8002482:	f8d8 0000 	ldr.w	r0, [r8]
 8002486:	f001 f84f 	bl	8003528 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
 800248a:	b198      	cbz	r0, 80024b4 <execute+0xf4>
			if (help_entry.help) {
 800248c:	b166      	cbz	r6, 80024a8 <execute+0xe8>
				sh->ctx->active_cmd = help_entry;
 800248e:	68a5      	ldr	r5, [r4, #8]
 8002490:	960d      	str	r6, [sp, #52]	; 0x34
 8002492:	3508      	adds	r5, #8
				sh->ctx->active_cmd = *help_entry;
 8002494:	ae0c      	add	r6, sp, #48	; 0x30
 8002496:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249a:	6833      	ldr	r3, [r6, #0]
 800249c:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(sh);
 800249e:	4620      	mov	r0, r4
			return SHELL_CMD_HELP_PRINTED;
 80024a0:	2501      	movs	r5, #1
			shell_internal_help_print(sh);
 80024a2:	f7ff ff23 	bl	80022ec <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
 80024a6:	e7de      	b.n	8002466 <execute+0xa6>
			z_shell_fprintf(sh, SHELL_ERROR,
 80024a8:	4a73      	ldr	r2, [pc, #460]	; (8002678 <execute+0x2b8>)
		z_shell_fprintf(sh, SHELL_ERROR,
 80024aa:	2101      	movs	r1, #1
 80024ac:	4620      	mov	r0, r4
 80024ae:	f011 ffb6 	bl	801441e <z_shell_fprintf>
		return false;
 80024b2:	e7d6      	b.n	8002462 <execute+0xa2>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
 80024b4:	9b05      	ldr	r3, [sp, #20]
 80024b6:	b183      	cbz	r3, 80024da <execute+0x11a>
			status = z_shell_wildcard_process(sh, entry,
 80024b8:	f8d8 2000 	ldr.w	r2, [r8]
 80024bc:	4629      	mov	r1, r5
 80024be:	4620      	mov	r0, r4
 80024c0:	f001 f9dc 	bl	800387c <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
 80024c4:	2802      	cmp	r0, #2
 80024c6:	f000 8092 	beq.w	80025ee <execute+0x22e>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
 80024ca:	2803      	cmp	r0, #3
 80024cc:	d005      	beq.n	80024da <execute+0x11a>
				++cmd_lvl;
 80024ce:	9b05      	ldr	r3, [sp, #20]
 80024d0:	3301      	adds	r3, #1
 80024d2:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
 80024d4:	2301      	movs	r3, #1
 80024d6:	9302      	str	r3, [sp, #8]
				continue;
 80024d8:	e7a7      	b.n	800242a <execute+0x6a>
		if (has_last_handler == false) {
 80024da:	f1bb 0f00 	cmp.w	fp, #0
 80024de:	d106      	bne.n	80024ee <execute+0x12e>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
 80024e0:	aa07      	add	r2, sp, #28
 80024e2:	f8d8 1000 	ldr.w	r1, [r8]
 80024e6:	4648      	mov	r0, r9
 80024e8:	f011 fd38 	bl	8013f5c <z_shell_find_cmd>
 80024ec:	4605      	mov	r5, r0
		argvp++;
 80024ee:	f108 0804 	add.w	r8, r8, #4
		args_left--;
 80024f2:	3f01      	subs	r7, #1
		if (entry) {
 80024f4:	2d00      	cmp	r5, #0
 80024f6:	d03a      	beq.n	800256e <execute+0x1ae>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
 80024f8:	9a02      	ldr	r2, [sp, #8]
 80024fa:	68eb      	ldr	r3, [r5, #12]
 80024fc:	b142      	cbz	r2, 8002510 <execute+0x150>
 80024fe:	b1f3      	cbz	r3, 800253e <execute+0x17e>
		z_shell_op_cursor_end_move(sh);
 8002500:	4620      	mov	r0, r4
 8002502:	f011 fede 	bl	80142c2 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(sh);
 8002506:	4620      	mov	r0, r4
 8002508:	f011 fe42 	bl	8014190 <z_shell_op_cond_next_line>
		z_shell_fprintf(sh, SHELL_ERROR,
 800250c:	4a5b      	ldr	r2, [pc, #364]	; (800267c <execute+0x2bc>)
 800250e:	e7cc      	b.n	80024aa <execute+0xea>
	if (entry->handler) {
 8002510:	b1ab      	cbz	r3, 800253e <execute+0x17e>
			active_cmd_prepare(entry, &sh->ctx->active_cmd,
 8002512:	68a3      	ldr	r3, [r4, #8]
		*active_cmd = *entry;
 8002514:	46ae      	mov	lr, r5
		*handler_lvl = *lvl;
 8002516:	f8dd a014 	ldr.w	sl, [sp, #20]
		*active_cmd = *entry;
 800251a:	f103 0c08 	add.w	ip, r3, #8
 800251e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002522:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002526:	f8de 3000 	ldr.w	r3, [lr]
 800252a:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
 800252e:	68ab      	ldr	r3, [r5, #8]
 8002530:	b92b      	cbnz	r3, 800253e <execute+0x17e>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
 8002532:	7c6b      	ldrb	r3, [r5, #17]
 8002534:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
 8002536:	bf04      	itt	eq
 8002538:	7c2f      	ldrbeq	r7, [r5, #16]
 800253a:	f107 37ff 	addeq.w	r7, r7, #4294967295
	if (entry->help) {
 800253e:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8002542:	f1bc 0f00 	cmp.w	ip, #0
 8002546:	d008      	beq.n	800255a <execute+0x19a>
		*help_entry = *entry;
 8002548:	46ae      	mov	lr, r5
 800254a:	ae0c      	add	r6, sp, #48	; 0x30
 800254c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002550:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002552:	f8de 3000 	ldr.w	r3, [lr]
 8002556:	6033      	str	r3, [r6, #0]
 8002558:	4666      	mov	r6, ip
 800255a:	46a9      	mov	r9, r5
		if (args_left || (argc == 2)) {
 800255c:	b91f      	cbnz	r7, 8002566 <execute+0x1a6>
 800255e:	9b06      	ldr	r3, [sp, #24]
 8002560:	2b02      	cmp	r3, #2
 8002562:	f47f af62 	bne.w	800242a <execute+0x6a>
			cmd_lvl++;
 8002566:	9b05      	ldr	r3, [sp, #20]
 8002568:	3301      	adds	r3, #1
 800256a:	9305      	str	r3, [sp, #20]
 800256c:	e75d      	b.n	800242a <execute+0x6a>
			if (cmd_lvl == 0 &&
 800256e:	9b05      	ldr	r3, [sp, #20]
 8002570:	b963      	cbnz	r3, 800258c <execute+0x1cc>
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *sh)
{
	return sh->ctx->selected_cmd == NULL ? false : true;
 8002572:	68a3      	ldr	r3, [r4, #8]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	b10b      	cbz	r3, 800257c <execute+0x1bc>
				(!z_shell_in_select_mode(sh) ||
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	b93b      	cbnz	r3, 800258c <execute+0x1cc>
				z_shell_fprintf(sh, SHELL_ERROR,
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <execute+0x2c0>)
 800257e:	2101      	movs	r1, #1
 8002580:	4a40      	ldr	r2, [pc, #256]	; (8002684 <execute+0x2c4>)
 8002582:	4620      	mov	r0, r4
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002588:	f011 ff49 	bl	801441e <z_shell_fprintf>
			has_last_handler = true;
 800258c:	f04f 0b01 	mov.w	fp, #1
 8002590:	e7e4      	b.n	800255c <execute+0x19c>
		&& args_left > 0) {
 8002592:	2f00      	cmp	r7, #0
 8002594:	f47f af59 	bne.w	800244a <execute+0x8a>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
 8002598:	9b02      	ldr	r3, [sp, #8]
 800259a:	b153      	cbz	r3, 80025b2 <execute+0x1f2>
		z_shell_wildcard_finalize(sh);
 800259c:	4620      	mov	r0, r4
 800259e:	f012 f9ba 	bl	8014916 <z_shell_wildcard_finalize>
					sh->ctx->cmd_buff,
 80025a2:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
 80025a4:	2314      	movs	r3, #20
 80025a6:	a911      	add	r1, sp, #68	; 0x44
 80025a8:	3242      	adds	r2, #66	; 0x42
 80025aa:	eb0d 0003 	add.w	r0, sp, r3
 80025ae:	f011 fbe9 	bl	8013d84 <z_shell_make_argv>
	if (parent != NULL) {
 80025b2:	f1b9 0f00 	cmp.w	r9, #0
 80025b6:	d00c      	beq.n	80025d2 <execute+0x212>
		if (parent->args.optional == SHELL_OPT_ARG_RAW && argv[cmd_lvl] != NULL) {
 80025b8:	f899 3011 	ldrb.w	r3, [r9, #17]
 80025bc:	2bfe      	cmp	r3, #254	; 0xfe
 80025be:	d108      	bne.n	80025d2 <execute+0x212>
 80025c0:	9b05      	ldr	r3, [sp, #20]
 80025c2:	aa26      	add	r2, sp, #152	; 0x98
 80025c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80025c8:	f852 2c54 	ldr.w	r2, [r2, #-84]
 80025cc:	b10a      	cbz	r2, 80025d2 <execute+0x212>
			cmd_lvl++;
 80025ce:	3301      	adds	r3, #1
 80025d0:	9305      	str	r3, [sp, #20]
	if (sh->ctx->active_cmd.handler == NULL) {
 80025d2:	68a0      	ldr	r0, [r4, #8]
 80025d4:	6943      	ldr	r3, [r0, #20]
 80025d6:	b973      	cbnz	r3, 80025f6 <execute+0x236>
			if (help_entry->help == NULL) {
 80025d8:	2e00      	cmp	r6, #0
 80025da:	f43f af42 	beq.w	8002462 <execute+0xa2>
			if (help_entry->help != sh->ctx->active_cmd.help) {
 80025de:	68c3      	ldr	r3, [r0, #12]
 80025e0:	42b3      	cmp	r3, r6
 80025e2:	f43f af5c 	beq.w	800249e <execute+0xde>
				sh->ctx->active_cmd = *help_entry;
 80025e6:	f100 0508 	add.w	r5, r0, #8
 80025ea:	960d      	str	r6, [sp, #52]	; 0x34
 80025ec:	e752      	b.n	8002494 <execute+0xd4>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
 80025ee:	9b05      	ldr	r3, [sp, #20]
 80025f0:	2b13      	cmp	r3, #19
 80025f2:	d9d1      	bls.n	8002598 <execute+0x1d8>
 80025f4:	e721      	b.n	800243a <execute+0x7a>
	return exec_cmd(sh, cmd_lvl - cmd_with_handler_lvl,
 80025f6:	9d05      	ldr	r5, [sp, #20]
	if (sh->ctx->active_cmd.args.mandatory) {
 80025f8:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(sh, cmd_lvl - cmd_with_handler_lvl,
 80025fa:	eba5 050a 	sub.w	r5, r5, sl
	if (sh->ctx->active_cmd.args.mandatory) {
 80025fe:	b1b3      	cbz	r3, 800262e <execute+0x26e>
		uint8_t opt8 = sh->ctx->active_cmd.args.optional;
 8002600:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
 8002602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002606:	29ff      	cmp	r1, #255	; 0xff
 8002608:	bf18      	it	ne
 800260a:	460a      	movne	r2, r1
		const bool in_range = IN_RANGE(argc, mand, mand + opt);
 800260c:	429d      	cmp	r5, r3
 800260e:	d302      	bcc.n	8002616 <execute+0x256>
 8002610:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
 8002612:	429d      	cmp	r5, r3
 8002614:	d90b      	bls.n	800262e <execute+0x26e>
		z_shell_fprintf(sh, SHELL_ERROR,
 8002616:	6883      	ldr	r3, [r0, #8]
 8002618:	2101      	movs	r1, #1
 800261a:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <execute+0x2c8>)
 800261c:	4620      	mov	r0, r4
 800261e:	f011 fefe 	bl	801441e <z_shell_fprintf>
			shell_internal_help_print(sh);
 8002622:	4620      	mov	r0, r4
		return -EINVAL;
 8002624:	f06f 0515 	mvn.w	r5, #21
			shell_internal_help_print(sh);
 8002628:	f7ff fe60 	bl	80022ec <shell_internal_help_print>
	if (!ret_val) {
 800262c:	e71b      	b.n	8002466 <execute+0xa6>
		z_flag_cmd_ctx_set(sh, true);
 800262e:	2101      	movs	r1, #1
 8002630:	f011 fa79 	bl	8013b26 <z_flag_cmd_ctx_set.isra.0>
		k_mutex_unlock(&sh->ctx->wr_mtx);
 8002634:	68a0      	ldr	r0, [r4, #8]
 8002636:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 800263a:	f011 fa98 	bl	8013b6e <k_mutex_unlock.isra.0>
		ret_val = sh->ctx->active_cmd.handler(sh, argc,
 800263e:	68a3      	ldr	r3, [r4, #8]
 8002640:	aa11      	add	r2, sp, #68	; 0x44
 8002642:	4629      	mov	r1, r5
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	4620      	mov	r0, r4
 8002648:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800264c:	4798      	blx	r3
 800264e:	4605      	mov	r5, r0
		k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
 8002650:	68a0      	ldr	r0, [r4, #8]
 8002652:	f04f 32ff 	mov.w	r2, #4294967295
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 800265e:	f011 fa31 	bl	8013ac4 <k_mutex_lock.constprop.0.isra.0>
		z_flag_cmd_ctx_set(sh, false);
 8002662:	2100      	movs	r1, #0
 8002664:	68a0      	ldr	r0, [r4, #8]
 8002666:	f011 fa5e 	bl	8013b26 <z_flag_cmd_ctx_set.isra.0>
 800266a:	e6fc      	b.n	8002466 <execute+0xa6>
 800266c:	0801e231 	.word	0x0801e231
 8002670:	08020282 	.word	0x08020282
 8002674:	0801e1bc 	.word	0x0801e1bc
 8002678:	0801e1d0 	.word	0x0801e1d0
 800267c:	0801e1ee 	.word	0x0801e1ee
 8002680:	0801e21d 	.word	0x0801e21d
 8002684:	0802033a 	.word	0x0802033a
 8002688:	0801e255 	.word	0x0801e255

0800268c <state_set.constprop.0>:
static inline void state_set(const struct shell *sh, enum shell_state state)
 800268c:	b510      	push	{r4, lr}
	sh->ctx->state = state;
 800268e:	2202      	movs	r2, #2
 8002690:	6883      	ldr	r3, [r0, #8]
static inline void state_set(const struct shell *sh, enum shell_state state)
 8002692:	4604      	mov	r4, r0
	sh->ctx->state = state;
 8002694:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !sh->ctx->bypass) {
 8002696:	6883      	ldr	r3, [r0, #8]
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	b9bb      	cbnz	r3, 80026cc <state_set.constprop.0+0x40>
		cmd_buffer_clear(sh);
 800269c:	f011 f9c2 	bl	8013a24 <cmd_buffer_clear>
	return sh->ctx->ctx.flags.print_noinit == 1;
 80026a0:	6883      	ldr	r3, [r0, #8]
 80026a2:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(sh)) {
 80026a6:	04db      	lsls	r3, r3, #19
 80026a8:	d50b      	bpl.n	80026c2 <state_set.constprop.0+0x36>
			z_shell_fprintf(sh, SHELL_WARNING, "%s",
 80026aa:	2103      	movs	r1, #3
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <state_set.constprop.0+0x44>)
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <state_set.constprop.0+0x48>)
 80026b0:	f011 feb5 	bl	801441e <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
 80026b4:	68a0      	ldr	r0, [r4, #8]
 80026b6:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
 80026ba:	f500 7019 	add.w	r0, r0, #612	; 0x264
 80026be:	f011 f9c9 	bl	8013a54 <atomic_and>
		z_shell_print_prompt_and_cmd(sh);
 80026c2:	4620      	mov	r0, r4
}
 80026c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(sh);
 80026c8:	f000 be8a 	b.w	80033e0 <z_shell_print_prompt_and_cmd>
}
 80026cc:	bd10      	pop	{r4, pc}
 80026ce:	bf00      	nop
 80026d0:	0801e270 	.word	0x0801e270
 80026d4:	0801de94 	.word	0x0801de94

080026d8 <shell_process>:

	return 0;
}

void shell_process(const struct shell *sh)
{
 80026d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026dc:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
 80026de:	6880      	ldr	r0, [r0, #8]
 80026e0:	b0b3      	sub	sp, #204	; 0xcc
 80026e2:	2101      	movs	r1, #1
 80026e4:	f500 7019 	add.w	r0, r0, #612	; 0x264
 80026e8:	f011 f9a5 	bl	8013a36 <atomic_or>
	__ASSERT_NO_MSG(sh->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(sh, true);

	switch (sh->ctx->state) {
 80026ec:	68a3      	ldr	r3, [r4, #8]
 80026ee:	791b      	ldrb	r3, [r3, #4]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d120      	bne.n	8002736 <shell_process+0x5e>
	size_t count = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = sh->ctx->bypass;
 80026f8:	68a3      	ldr	r3, [r4, #8]
			(void)sh->iface->api->read(sh->iface, buf,
 80026fa:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = sh->ctx->bypass;
 80026fc:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)sh->iface->api->read(sh->iface, buf,
 80026fe:	6803      	ldr	r3, [r0, #0]
 8002700:	691d      	ldr	r5, [r3, #16]
 8002702:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
 8002704:	b30e      	cbz	r6, 800274a <shell_process+0x72>
			(void)sh->iface->api->read(sh->iface, buf,
 8002706:	2210      	movs	r2, #16
 8002708:	a91d      	add	r1, sp, #116	; 0x74
 800270a:	47a8      	blx	r5
			if (count) {
 800270c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800270e:	b193      	cbz	r3, 8002736 <shell_process+0x5e>
				z_flag_cmd_ctx_set(sh, true);
 8002710:	2101      	movs	r1, #1
 8002712:	68a0      	ldr	r0, [r4, #8]
 8002714:	f011 fa07 	bl	8013b26 <z_flag_cmd_ctx_set.isra.0>
				bypass(sh, buf, count);
 8002718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800271a:	a91d      	add	r1, sp, #116	; 0x74
 800271c:	4620      	mov	r0, r4
 800271e:	47b0      	blx	r6
				z_flag_cmd_ctx_set(sh, false);
 8002720:	2100      	movs	r1, #0
 8002722:	68a0      	ldr	r0, [r4, #8]
 8002724:	f011 f9ff 	bl	8013b26 <z_flag_cmd_ctx_set.isra.0>
				if (!(volatile shell_bypass_cb_t *)sh->ctx->bypass) {
 8002728:	68a3      	ldr	r3, [r4, #8]
 800272a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e3      	bne.n	80026f8 <shell_process+0x20>
					state_set(sh, SHELL_STATE_ACTIVE);
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff ffab 	bl	800268c <state_set.constprop.0>
 8002736:	68a0      	ldr	r0, [r4, #8]
 8002738:	f06f 0101 	mvn.w	r1, #1
 800273c:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(sh, false);
}
 8002740:	b033      	add	sp, #204	; 0xcc
 8002742:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002746:	f011 b985 	b.w	8013a54 <atomic_and>
		(void)sh->iface->api->read(sh->iface, &data,
 800274a:	2201      	movs	r2, #1
 800274c:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
 8002750:	47a8      	blx	r5
		if (count == 0) {
 8002752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ee      	beq.n	8002736 <shell_process+0x5e>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 8002758:	f99d 102b 	ldrsb.w	r1, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
 800275c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 8002760:	2900      	cmp	r1, #0
		switch (sh->ctx->receive_state) {
 8002762:	68a2      	ldr	r2, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
 8002764:	dbc8      	blt.n	80026f8 <shell_process+0x20>
		switch (sh->ctx->receive_state) {
 8002766:	7951      	ldrb	r1, [r2, #5]
 8002768:	2903      	cmp	r1, #3
 800276a:	f200 8308 	bhi.w	8002d7e <shell_process+0x6a6>
 800276e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002772:	0004      	.short	0x0004
 8002774:	029f027b 	.word	0x029f027b
 8002778:	0306      	.short	0x0306
	if ((data != '\r') && (data != '\n')) {
 800277a:	2b0d      	cmp	r3, #13
 800277c:	d01b      	beq.n	80027b6 <shell_process+0xde>
 800277e:	2b0a      	cmp	r3, #10
 8002780:	d019      	beq.n	80027b6 <shell_process+0xde>
	sh->ctx->ctx.flags.last_nl = val;
 8002782:	f8b2 1264 	ldrh.w	r1, [r2, #612]	; 0x264
 8002786:	f36f 01ca 	bfc	r1, #3, #8
 800278a:	f8a2 1264 	strh.w	r1, [r2, #612]	; 0x264
			switch (data) {
 800278e:	2b09      	cmp	r3, #9
	sh->ctx->receive_state = state;
 8002790:	68a0      	ldr	r0, [r4, #8]
 8002792:	d050      	beq.n	8002836 <shell_process+0x15e>
 8002794:	d836      	bhi.n	8002804 <shell_process+0x12c>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ae      	beq.n	80026f8 <shell_process+0x20>
 800279a:	2b08      	cmp	r3, #8
 800279c:	f000 81c9 	beq.w	8002b32 <shell_process+0x45a>
	return (int)((((unsigned)c) >= ' ') &&
 80027a0:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data) != 0) {
 80027a4:	2a5e      	cmp	r2, #94	; 0x5e
 80027a6:	f200 81d0 	bhi.w	8002b4a <shell_process+0x472>
					z_flag_history_exit_set(sh, true);
 80027aa:	2101      	movs	r1, #1
 80027ac:	f011 f9c6 	bl	8013b3c <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(sh, data);
 80027b0:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 80027b4:	e0ed      	b.n	8002992 <shell_process+0x2ba>
	return sh->ctx->ctx.flags.last_nl;
 80027b6:	f8d2 1264 	ldr.w	r1, [r2, #612]	; 0x264
 80027ba:	f3c1 01c7 	ubfx	r1, r1, #3, #8
	if ((z_flag_last_nl_get(sh) == 0U) ||
 80027be:	b129      	cbz	r1, 80027cc <shell_process+0xf4>
 80027c0:	f8d2 1264 	ldr.w	r1, [r2, #612]	; 0x264
 80027c4:	f3c1 01c7 	ubfx	r1, r1, #3, #8
 80027c8:	428b      	cmp	r3, r1
 80027ca:	d1e0      	bne.n	800278e <shell_process+0xb6>
	sh->ctx->ctx.flags.last_nl = val;
 80027cc:	f8b2 1264 	ldrh.w	r1, [r2, #612]	; 0x264
 80027d0:	f363 01ca 	bfi	r1, r3, #3, #8
 80027d4:	f8a2 1264 	strh.w	r1, [r2, #612]	; 0x264
				if (!sh->ctx->cmd_buff_len) {
 80027d8:	68a5      	ldr	r5, [r4, #8]
 80027da:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
 80027dc:	b961      	cbnz	r1, 80027f8 <shell_process+0x120>
	z_flag_history_exit_set(sh, false);
 80027de:	4628      	mov	r0, r5
 80027e0:	f011 f9ac 	bl	8013b3c <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(sh->history);
 80027e4:	68e0      	ldr	r0, [r4, #12]
 80027e6:	f011 ffb9 	bl	801475c <z_shell_history_mode_exit>
					z_cursor_next_line_move(sh);
 80027ea:	6960      	ldr	r0, [r4, #20]
 80027ec:	f7ff fd8e 	bl	800230c <z_cursor_next_line_move.isra.0>
		state_set(sh, SHELL_STATE_ACTIVE);
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff ff4b 	bl	800268c <state_set.constprop.0>
		break;
 80027f6:	e77f      	b.n	80026f8 <shell_process+0x20>
					sh->ctx->ret_val = execute(sh);
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff fde1 	bl	80023c0 <execute>
 80027fe:	f8c5 0310 	str.w	r0, [r5, #784]	; 0x310
				state_set(sh, SHELL_STATE_ACTIVE);
 8002802:	e7f5      	b.n	80027f0 <shell_process+0x118>
 8002804:	2b1b      	cmp	r3, #27
 8002806:	d013      	beq.n	8002830 <shell_process+0x158>
 8002808:	2b7f      	cmp	r3, #127	; 0x7f
 800280a:	d1c9      	bne.n	80027a0 <shell_process+0xc8>
	return sh->ctx->cfg.flags.echo == 1;
 800280c:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(sh)) {
 8002810:	079d      	lsls	r5, r3, #30
 8002812:	f57f af71 	bpl.w	80026f8 <shell_process+0x20>
					z_flag_history_exit_set(sh, true);
 8002816:	2101      	movs	r1, #1
 8002818:	f011 f990 	bl	8013b3c <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
 800281c:	68a3      	ldr	r3, [r4, #8]
 800281e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(sh)) {
 8002822:	0719      	lsls	r1, r3, #28
 8002824:	f100 818d 	bmi.w	8002b42 <shell_process+0x46a>
		z_shell_op_char_delete(sh);
 8002828:	4620      	mov	r0, r4
 800282a:	f011 fe3a 	bl	80144a2 <z_shell_op_char_delete>
		break;
 800282e:	e763      	b.n	80026f8 <shell_process+0x20>
	sh->ctx->receive_state = state;
 8002830:	2301      	movs	r3, #1
 8002832:	7143      	strb	r3, [r0, #5]
}
 8002834:	e760      	b.n	80026f8 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
 8002836:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(sh) &&
 800283a:	079b      	lsls	r3, r3, #30
 800283c:	f57f af5c 	bpl.w	80026f8 <shell_process+0x20>
					z_flag_history_exit_set(sh, true);
 8002840:	2101      	movs	r1, #1
 8002842:	f011 f97b 	bl	8013b3c <z_flag_history_exit_set.isra.0>
			sh->ctx->cmd_buff_len;
 8002846:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
 8002848:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800284a:	2bff      	cmp	r3, #255	; 0xff
 800284c:	f43f af54 	beq.w	80026f8 <shell_process+0x20>
	memcpy(sh->ctx->temp_buff, sh->ctx->cmd_buff,
 8002850:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8002852:	f100 0142 	add.w	r1, r0, #66	; 0x42
 8002856:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	sh->ctx->temp_buff[sh->ctx->cmd_buff_pos] = '\0';
 800285a:	2500      	movs	r5, #0
	memcpy(sh->ctx->temp_buff, sh->ctx->cmd_buff,
 800285c:	f012 fa0b 	bl	8014c76 <memcpy>
	sh->ctx->temp_buff[sh->ctx->cmd_buff_pos] = '\0';
 8002860:	68a3      	ldr	r3, [r4, #8]
	(void)z_shell_make_argv(argc, *argv, sh->ctx->temp_buff,
 8002862:	a91d      	add	r1, sp, #116	; 0x74
 8002864:	a80d      	add	r0, sp, #52	; 0x34
	sh->ctx->temp_buff[sh->ctx->cmd_buff_pos] = '\0';
 8002866:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002868:	4413      	add	r3, r2
 800286a:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, sh->ctx->temp_buff,
 800286e:	2314      	movs	r3, #20
 8002870:	68a2      	ldr	r2, [r4, #8]
 8002872:	f502 72a1 	add.w	r2, r2, #322	; 0x142
 8002876:	f011 fa85 	bl	8013d84 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
 800287a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800287c:	2914      	cmp	r1, #20
 800287e:	f63f af3b 	bhi.w	80026f8 <shell_process+0x20>
	(*argv)[*argc] = NULL;
 8002882:	ab32      	add	r3, sp, #200	; 0xc8
 8002884:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002888:	f843 5c54 	str.w	r5, [r3, #-84]
	int space = isspace((int)sh->ctx->cmd_buff[
 800288c:	68a3      	ldr	r3, [r4, #8]
						sh->ctx->cmd_buff_pos - 1]);
 800288e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)sh->ctx->cmd_buff[
 8002890:	4413      	add	r3, r2
 8002892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 8002896:	2b20      	cmp	r3, #32
 8002898:	f000 8273 	beq.w	8002d82 <shell_process+0x6aa>
 800289c:	3b09      	subs	r3, #9
 800289e:	2b04      	cmp	r3, #4
 80028a0:	f240 826f 	bls.w	8002d82 <shell_process+0x6aa>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 80028a4:	2901      	cmp	r1, #1
 80028a6:	d84f      	bhi.n	8002948 <shell_process+0x270>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
 80028a8:	2500      	movs	r5, #0
 80028aa:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(sh, cmd, argv[arg_idx], &first, &cnt,
 80028ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028ae:	aa32      	add	r2, sp, #200	; 0xc8
	*cnt = 0;
 80028b0:	2600      	movs	r6, #0
	find_completion_candidates(sh, cmd, argv[arg_idx], &first, &cnt,
 80028b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t first = 0;
 80028b6:	46b0      	mov	r8, r6
	size_t idx = 0;
 80028b8:	4637      	mov	r7, r6
	find_completion_candidates(sh, cmd, argv[arg_idx], &first, &cnt,
 80028ba:	f853 ac54 	ldr.w	sl, [r3, #-84]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
 80028be:	4650      	mov	r0, sl
 80028c0:	f011 f8ed 	bl	8013a9e <z_shell_strlen>
 80028c4:	4681      	mov	r9, r0
	*longest = 0U;
 80028c6:	9604      	str	r6, [sp, #16]
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
 80028c8:	aa18      	add	r2, sp, #96	; 0x60
 80028ca:	4639      	mov	r1, r7
 80028cc:	4628      	mov	r0, r5
 80028ce:	f000 fbf7 	bl	80030c0 <z_shell_cmd_get>
 80028d2:	4683      	mov	fp, r0
 80028d4:	2800      	cmp	r0, #0
 80028d6:	d144      	bne.n	8002962 <shell_process+0x28a>
	if (cnt == 1) {
 80028d8:	2e01      	cmp	r6, #1
 80028da:	d163      	bne.n	80029a4 <shell_process+0x2cc>
		autocomplete(sh, cmd, argv[arg_idx], first);
 80028dc:	aa32      	add	r2, sp, #200	; 0xc8
 80028de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
 80028e4:	f853 0c54 	ldr.w	r0, [r3, #-84]
 80028e8:	f011 f8d9 	bl	8013a9e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &sh->ctx->active_cmd);
 80028ec:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
 80028ee:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &sh->ctx->active_cmd);
 80028f0:	4641      	mov	r1, r8
 80028f2:	3208      	adds	r2, #8
 80028f4:	4628      	mov	r0, r5
 80028f6:	f000 fbe3 	bl	80030c0 <z_shell_cmd_get>
 80028fa:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
 80028fc:	6800      	ldr	r0, [r0, #0]
 80028fe:	f011 f8ce 	bl	8013a9e <z_shell_strlen>
	if (cmd_len != arg_len) {
 8002902:	4286      	cmp	r6, r0
 8002904:	d006      	beq.n	8002914 <shell_process+0x23c>
		z_shell_op_completion_insert(sh,
 8002906:	1b82      	subs	r2, r0, r6
 8002908:	6829      	ldr	r1, [r5, #0]
 800290a:	4620      	mov	r0, r4
 800290c:	b292      	uxth	r2, r2
 800290e:	4431      	add	r1, r6
 8002910:	f011 fdc5 	bl	801449e <z_shell_op_completion_insert>
	if (isspace((int) sh->ctx->cmd_buff[
 8002914:	68a0      	ldr	r0, [r4, #8]
					sh->ctx->cmd_buff_pos]) == 0) {
 8002916:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (isspace((int) sh->ctx->cmd_buff[
 8002918:	4403      	add	r3, r0
 800291a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800291e:	2b20      	cmp	r3, #32
 8002920:	d03b      	beq.n	800299a <shell_process+0x2c2>
 8002922:	3b09      	subs	r3, #9
 8002924:	2b04      	cmp	r3, #4
 8002926:	d938      	bls.n	800299a <shell_process+0x2c2>
	return sh->ctx->cfg.flags.insert_mode == 1;
 8002928:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(sh)) {
 800292c:	07df      	lsls	r7, r3, #31
 800292e:	d52f      	bpl.n	8002990 <shell_process+0x2b8>
			z_flag_insert_mode_set(sh, false);
 8002930:	2100      	movs	r1, #0
 8002932:	f011 f90d 	bl	8013b50 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(sh, ' ');
 8002936:	2120      	movs	r1, #32
 8002938:	4620      	mov	r0, r4
 800293a:	f000 fd1b 	bl	8003374 <z_shell_op_char_insert>
			z_flag_insert_mode_set(sh, true);
 800293e:	2101      	movs	r1, #1
 8002940:	68a0      	ldr	r0, [r4, #8]
				z_flag_insert_mode_set(sh, !status);
 8002942:	f011 f905 	bl	8013b50 <z_flag_insert_mode_set.isra.0>
				break;
 8002946:	e6d7      	b.n	80026f8 <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
 8002948:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(sh), search_argc,
 800294a:	2000      	movs	r0, #0
 800294c:	ab0e      	add	r3, sp, #56	; 0x38
 800294e:	aa1d      	add	r2, sp, #116	; 0x74
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	ab0c      	add	r3, sp, #48	; 0x30
 8002954:	9001      	str	r0, [sp, #4]
 8002956:	f011 fb21 	bl	8013f9c <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
 800295a:	4605      	mov	r5, r0
 800295c:	2800      	cmp	r0, #0
 800295e:	d1a5      	bne.n	80028ac <shell_process+0x1d4>
 8002960:	e6ca      	b.n	80026f8 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 8002962:	464a      	mov	r2, r9
 8002964:	4651      	mov	r1, sl
 8002966:	f8db 0000 	ldr.w	r0, [fp]
 800296a:	f012 f94a 	bl	8014c02 <strncmp>
		if (is_candidate) {
 800296e:	b968      	cbnz	r0, 800298c <shell_process+0x2b4>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
 8002970:	f8db 0000 	ldr.w	r0, [fp]
 8002974:	f012 f932 	bl	8014bdc <strlen>
 8002978:	9b04      	ldr	r3, [sp, #16]
 800297a:	4283      	cmp	r3, r0
 800297c:	bf38      	it	cc
 800297e:	4603      	movcc	r3, r0
				*first_idx = idx;
 8002980:	2e00      	cmp	r6, #0
 8002982:	bf08      	it	eq
 8002984:	46b8      	moveq	r8, r7
			(*cnt)++;
 8002986:	3601      	adds	r6, #1
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
 8002988:	b29b      	uxth	r3, r3
 800298a:	9304      	str	r3, [sp, #16]
		idx++;
 800298c:	3701      	adds	r7, #1
 800298e:	e79b      	b.n	80028c8 <shell_process+0x1f0>
			z_shell_op_char_insert(sh, ' ');
 8002990:	2120      	movs	r1, #32
					z_shell_op_char_insert(sh, data);
 8002992:	4620      	mov	r0, r4
 8002994:	f000 fcee 	bl	8003374 <z_shell_op_char_insert>
 8002998:	e6ae      	b.n	80026f8 <shell_process+0x20>
		z_shell_op_cursor_move(sh, 1);
 800299a:	2101      	movs	r1, #1
 800299c:	4620      	mov	r0, r4
 800299e:	f011 fc2a 	bl	80141f6 <z_shell_op_cursor_move>
 80029a2:	e6a9      	b.n	80026f8 <shell_process+0x20>
	} else if (cnt > 1) {
 80029a4:	f67f aea8 	bls.w	80026f8 <shell_process+0x20>
		tab_options_print(sh, cmd, argv[arg_idx], first, cnt,
 80029a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029aa:	aa32      	add	r2, sp, #200	; 0xc8
 80029ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80029b0:	f853 ac54 	ldr.w	sl, [r3, #-84]
	size_t str_len = z_shell_strlen(str);
 80029b4:	4650      	mov	r0, sl
 80029b6:	f011 f872 	bl	8013a9e <z_shell_strlen>
		sh->ctx->vt100_ctx.printed_cmd = 0;
 80029ba:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
 80029bc:	9006      	str	r0, [sp, #24]
		sh->ctx->vt100_ctx.printed_cmd = 0;
 80029be:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
 80029c2:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 8002c98 <shell_process+0x5c0>
		sh->ctx->vt100_ctx.printed_cmd = 0;
 80029c6:	9605      	str	r6, [sp, #20]
 80029c8:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &sh->ctx->active_cmd);
 80029cc:	68a2      	ldr	r2, [r4, #8]
 80029ce:	4628      	mov	r0, r5
 80029d0:	9903      	ldr	r1, [sp, #12]
 80029d2:	3208      	adds	r2, #8
 80029d4:	f000 fb74 	bl	80030c0 <z_shell_cmd_get>
		idx++;
 80029d8:	9b03      	ldr	r3, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &sh->ctx->active_cmd);
 80029da:	4607      	mov	r7, r0
		idx++;
 80029dc:	3301      	adds	r3, #1
 80029de:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
 80029e0:	f1ba 0f00 	cmp.w	sl, #0
 80029e4:	d152      	bne.n	8002a8c <shell_process+0x3b4>
		tab_item_print(sh, match->syntax, longest);
 80029e6:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
 80029e8:	2f00      	cmp	r7, #0
 80029ea:	d159      	bne.n	8002aa0 <shell_process+0x3c8>
		sh->ctx->vt100_ctx.printed_cmd = 0;
 80029ec:	68a2      	ldr	r2, [r4, #8]
 80029ee:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
 80029f0:	9b05      	ldr	r3, [sp, #20]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	9305      	str	r3, [sp, #20]
 80029f6:	d1e9      	bne.n	80029cc <shell_process+0x2f4>
	z_cursor_next_line_move(sh);
 80029f8:	6960      	ldr	r0, [r4, #20]
	size_t idx = first + 1;
 80029fa:	f108 0901 	add.w	r9, r8, #1
	z_cursor_next_line_move(sh);
 80029fe:	f7ff fc85 	bl	800230c <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(sh);
 8002a02:	4620      	mov	r0, r4
 8002a04:	f000 fcec 	bl	80033e0 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(sh, cmd, argv[arg_idx], first, cnt);
 8002a08:	aa32      	add	r2, sp, #200	; 0xc8
 8002a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
 8002a10:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8002a14:	f011 f843 	bl	8013a9e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
 8002a18:	4641      	mov	r1, r8
 8002a1a:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
 8002a1c:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
 8002a1e:	4628      	mov	r0, r5
 8002a20:	f000 fb4e 	bl	80030c0 <z_shell_cmd_get>
 8002a24:	4680      	mov	r8, r0
	strncpy(sh->ctx->temp_buff, match->syntax,
 8002a26:	68a0      	ldr	r0, [r4, #8]
 8002a28:	22ff      	movs	r2, #255	; 0xff
 8002a2a:	f8d8 1000 	ldr.w	r1, [r8]
 8002a2e:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8002a32:	f012 f8a7 	bl	8014b84 <strncpy>
	*str = match->syntax;
 8002a36:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
 8002a3a:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
 8002a3e:	aa18      	add	r2, sp, #96	; 0x60
 8002a40:	4649      	mov	r1, r9
 8002a42:	4628      	mov	r0, r5
 8002a44:	f109 0b01 	add.w	fp, r9, #1
 8002a48:	f000 fb3a 	bl	80030c0 <z_shell_cmd_get>
		if (match2 == NULL) {
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d063      	beq.n	8002b18 <shell_process+0x440>
		curr_common = str_common(sh->ctx->temp_buff, match2->syntax,
 8002a50:	68a3      	ldr	r3, [r4, #8]
	size_t common = 0;
 8002a52:	2200      	movs	r2, #0
		curr_common = str_common(sh->ctx->temp_buff, match2->syntax,
 8002a54:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8002a56:	f503 73a1 	add.w	r3, r3, #322	; 0x142
 8002a5a:	f813 cb01 	ldrb.w	ip, [r3], #1
 8002a5e:	5c81      	ldrb	r1, [r0, r2]
 8002a60:	4561      	cmp	r1, ip
 8002a62:	d105      	bne.n	8002a70 <shell_process+0x398>
 8002a64:	b121      	cbz	r1, 8002a70 <shell_process+0x398>
		common++;
 8002a66:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8002a68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a6c:	428a      	cmp	r2, r1
 8002a6e:	d1f4      	bne.n	8002a5a <shell_process+0x382>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
 8002a70:	b10f      	cbz	r7, 8002a76 <shell_process+0x39e>
 8002a72:	42ba      	cmp	r2, r7
 8002a74:	db08      	blt.n	8002a88 <shell_process+0x3b0>
			common = (curr_common < common) ? curr_common : common;
 8002a76:	4542      	cmp	r2, r8
			--cnt;
 8002a78:	f106 36ff 	add.w	r6, r6, #4294967295
			common = (curr_common < common) ? curr_common : common;
 8002a7c:	bfa8      	it	ge
 8002a7e:	4642      	movge	r2, r8
	while (cnt > 1) {
 8002a80:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
 8002a82:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
 8002a86:	d047      	beq.n	8002b18 <shell_process+0x440>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
 8002a88:	46d9      	mov	r9, fp
 8002a8a:	e7d8      	b.n	8002a3e <shell_process+0x366>
		if (str && match->syntax &&
 8002a8c:	6800      	ldr	r0, [r0, #0]
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d0a9      	beq.n	80029e6 <shell_process+0x30e>
	return (strncmp(candidate, str, len) == 0) ? true : false;
 8002a92:	9a06      	ldr	r2, [sp, #24]
 8002a94:	4651      	mov	r1, sl
 8002a96:	f012 f8b4 	bl	8014c02 <strncmp>
		if (str && match->syntax &&
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	d0a3      	beq.n	80029e6 <shell_process+0x30e>
 8002a9e:	e795      	b.n	80029cc <shell_process+0x2f4>
	longest_option += z_shell_strlen(tab);
 8002aa0:	4658      	mov	r0, fp
 8002aa2:	f010 fffc 	bl	8013a9e <z_shell_strlen>
 8002aa6:	9b04      	ldr	r3, [sp, #16]
	columns = (sh->ctx->vt100_ctx.cons.terminal_wid
 8002aa8:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
 8002aaa:	18c2      	adds	r2, r0, r3
			- z_shell_strlen(tab)) / longest_option;
 8002aac:	4658      	mov	r0, fp
	columns = (sh->ctx->vt100_ctx.cons.terminal_wid
 8002aae:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
 8002ab0:	b292      	uxth	r2, r2
	columns = (sh->ctx->vt100_ctx.cons.terminal_wid
 8002ab2:	9308      	str	r3, [sp, #32]
	longest_option += z_shell_strlen(tab);
 8002ab4:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
 8002ab6:	f010 fff2 	bl	8013a9e <z_shell_strlen>
 8002aba:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
 8002abc:	4638      	mov	r0, r7
 8002abe:	f010 ffee 	bl	8013a9e <z_shell_strlen>
 8002ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
 8002ac4:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
 8002ac8:	eba2 0900 	sub.w	r9, r2, r0
	if (sh->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8002acc:	68a0      	ldr	r0, [r4, #8]
			- z_shell_strlen(tab)) / longest_option;
 8002ace:	1a59      	subs	r1, r3, r1
	if (sh->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8002ad0:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
	diff = longest_option - z_shell_strlen(option);
 8002ad4:	fa1f f989 	uxth.w	r9, r9
			- z_shell_strlen(tab)) / longest_option;
 8002ad8:	fb91 f2f2 	sdiv	r2, r1, r2
	if (sh->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
 8002adc:	b292      	uxth	r2, r2
 8002ade:	f10c 0e01 	add.w	lr, ip, #1
 8002ae2:	fbbc f1f2 	udiv	r1, ip, r2
 8002ae6:	fb02 c211 	mls	r2, r2, r1, ip
 8002aea:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
 8002aee:	b292      	uxth	r2, r2
 8002af0:	b95a      	cbnz	r2, 8002b0a <shell_process+0x432>
		z_shell_fprintf(sh, SHELL_OPTION, "\n%s%s", tab, option);
 8002af2:	465b      	mov	r3, fp
 8002af4:	4a69      	ldr	r2, [pc, #420]	; (8002c9c <shell_process+0x5c4>)
 8002af6:	2106      	movs	r1, #6
 8002af8:	4620      	mov	r0, r4
 8002afa:	9700      	str	r7, [sp, #0]
 8002afc:	f011 fc8f 	bl	801441e <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(sh, diff);
 8002b00:	4649      	mov	r1, r9
 8002b02:	4620      	mov	r0, r4
 8002b04:	f000 fb40 	bl	8003188 <z_shell_op_cursor_horiz_move>
 8002b08:	e772      	b.n	80029f0 <shell_process+0x318>
		z_shell_fprintf(sh, SHELL_OPTION, "%s", option);
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	4a64      	ldr	r2, [pc, #400]	; (8002ca0 <shell_process+0x5c8>)
 8002b0e:	2106      	movs	r1, #6
 8002b10:	4620      	mov	r0, r4
 8002b12:	f011 fc84 	bl	801441e <z_shell_fprintf>
 8002b16:	e7f3      	b.n	8002b00 <shell_process+0x428>
	if (common) {
 8002b18:	f1b8 0f00 	cmp.w	r8, #0
 8002b1c:	f43f adec 	beq.w	80026f8 <shell_process+0x20>
		z_shell_op_completion_insert(sh, &completion[arg_len],
 8002b20:	eba8 0207 	sub.w	r2, r8, r7
 8002b24:	eb0a 0107 	add.w	r1, sl, r7
 8002b28:	4620      	mov	r0, r4
 8002b2a:	b292      	uxth	r2, r2
 8002b2c:	f011 fcb7 	bl	801449e <z_shell_op_completion_insert>
 8002b30:	e5e2      	b.n	80026f8 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
 8002b32:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(sh)) {
 8002b36:	079e      	lsls	r6, r3, #30
 8002b38:	f57f adde 	bpl.w	80026f8 <shell_process+0x20>
					z_flag_history_exit_set(sh, true);
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	f010 fffd 	bl	8013b3c <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(sh);
 8002b42:	4620      	mov	r0, r4
 8002b44:	f011 fcc8 	bl	80144d8 <z_shell_op_char_backspace>
 8002b48:	e5d6      	b.n	80026f8 <shell_process+0x20>
 8002b4a:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(sh)) {
 8002b4e:	0792      	lsls	r2, r2, #30
 8002b50:	f57f add2 	bpl.w	80026f8 <shell_process+0x20>
	switch (data) {
 8002b54:	3b01      	subs	r3, #1
 8002b56:	2b16      	cmp	r3, #22
 8002b58:	f63f adce 	bhi.w	80026f8 <shell_process+0x20>
 8002b5c:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <shell_process+0x48c>)
 8002b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b62:	bf00      	nop
 8002b64:	08002d51 	.word	0x08002d51
 8002b68:	08002bc1 	.word	0x08002bc1
 8002b6c:	08002bc9 	.word	0x08002bc9
 8002b70:	08002829 	.word	0x08002829
 8002b74:	08002d45 	.word	0x08002d45
 8002b78:	08002be7 	.word	0x08002be7
 8002b7c:	080026f9 	.word	0x080026f9
 8002b80:	080026f9 	.word	0x080026f9
 8002b84:	080026f9 	.word	0x080026f9
 8002b88:	080026f9 	.word	0x080026f9
 8002b8c:	08002bef 	.word	0x08002bef
 8002b90:	08002bf7 	.word	0x08002bf7
 8002b94:	080026f9 	.word	0x080026f9
 8002b98:	08002c21 	.word	0x08002c21
 8002b9c:	080026f9 	.word	0x080026f9
 8002ba0:	08002c2b 	.word	0x08002c2b
 8002ba4:	080026f9 	.word	0x080026f9
 8002ba8:	080026f9 	.word	0x080026f9
 8002bac:	080026f9 	.word	0x080026f9
 8002bb0:	080026f9 	.word	0x080026f9
 8002bb4:	08002c2f 	.word	0x08002c2f
 8002bb8:	080026f9 	.word	0x080026f9
 8002bbc:	08002c59 	.word	0x08002c59
		z_shell_op_left_arrow(sh);
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f011 fb85 	bl	80142d0 <z_shell_op_left_arrow>
		break;
 8002bc6:	e597      	b.n	80026f8 <shell_process+0x20>
		z_shell_op_cursor_end_move(sh);
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f011 fb7a 	bl	80142c2 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(sh)) {
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f011 fac5 	bl	801415e <z_shell_cursor_in_empty_line>
 8002bd4:	b910      	cbnz	r0, 8002bdc <shell_process+0x504>
			z_cursor_next_line_move(sh);
 8002bd6:	6960      	ldr	r0, [r4, #20]
 8002bd8:	f7ff fb98 	bl	800230c <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(sh, true);
 8002bdc:	2101      	movs	r1, #1
 8002bde:	68a0      	ldr	r0, [r4, #8]
 8002be0:	f010 ffac 	bl	8013b3c <z_flag_history_exit_set.isra.0>
 8002be4:	e604      	b.n	80027f0 <shell_process+0x118>
		z_shell_op_right_arrow(sh);
 8002be6:	4620      	mov	r0, r4
 8002be8:	f011 fb7a 	bl	80142e0 <z_shell_op_right_arrow>
		break;
 8002bec:	e584      	b.n	80026f8 <shell_process+0x20>
		z_shell_op_delete_from_cursor(sh);
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f011 fb7f 	bl	80142f2 <z_shell_op_delete_from_cursor>
		break;
 8002bf4:	e580      	b.n	80026f8 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8002bf6:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_CURSORHOME);
 8002bfa:	069f      	lsls	r7, r3, #26
 8002bfc:	d503      	bpl.n	8002c06 <shell_process+0x52e>
 8002bfe:	4929      	ldr	r1, [pc, #164]	; (8002ca4 <shell_process+0x5cc>)
 8002c00:	6960      	ldr	r0, [r4, #20]
 8002c02:	f010 ff52 	bl	8013aaa <z_shell_raw_fprintf>
 8002c06:	68a3      	ldr	r3, [r4, #8]
 8002c08:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEARSCREEN);
 8002c0c:	069e      	lsls	r6, r3, #26
 8002c0e:	d503      	bpl.n	8002c18 <shell_process+0x540>
 8002c10:	4925      	ldr	r1, [pc, #148]	; (8002ca8 <shell_process+0x5d0>)
 8002c12:	6960      	ldr	r0, [r4, #20]
 8002c14:	f010 ff49 	bl	8013aaa <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(sh);
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f000 fbe1 	bl	80033e0 <z_shell_print_prompt_and_cmd>
		break;
 8002c1e:	e56b      	b.n	80026f8 <shell_process+0x20>
		history_handle(sh, false);
 8002c20:	2100      	movs	r1, #0
		history_handle(sh, true);
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7ff fb78 	bl	8002318 <history_handle>
		break;
 8002c28:	e566      	b.n	80026f8 <shell_process+0x20>
		history_handle(sh, true);
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	e7f9      	b.n	8002c22 <shell_process+0x54a>
		z_shell_op_cursor_home_move(sh);
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f011 fb41 	bl	80142b6 <z_shell_op_cursor_home_move>
		cmd_buffer_clear(sh);
 8002c34:	4620      	mov	r0, r4
 8002c36:	f010 fef5 	bl	8013a24 <cmd_buffer_clear>
		z_flag_history_exit_set(sh, true);
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	68a0      	ldr	r0, [r4, #8]
 8002c3e:	f010 ff7d 	bl	8013b3c <z_flag_history_exit_set.isra.0>
 8002c42:	68a3      	ldr	r3, [r4, #8]
 8002c44:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
 8002c48:	069d      	lsls	r5, r3, #26
 8002c4a:	f57f ad55 	bpl.w	80026f8 <shell_process+0x20>
 8002c4e:	4917      	ldr	r1, [pc, #92]	; (8002cac <shell_process+0x5d4>)
 8002c50:	6960      	ldr	r0, [r4, #20]
 8002c52:	f010 ff2a 	bl	8013aaa <z_shell_raw_fprintf>
 8002c56:	e54f      	b.n	80026f8 <shell_process+0x20>
		z_shell_op_word_remove(sh);
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f000 faf1 	bl	8003240 <z_shell_op_word_remove>
		z_flag_history_exit_set(sh, true);
 8002c5e:	2101      	movs	r1, #1
 8002c60:	68a0      	ldr	r0, [r4, #8]
 8002c62:	f010 ff6b 	bl	8013b3c <z_flag_history_exit_set.isra.0>
		break;
 8002c66:	e547      	b.n	80026f8 <shell_process+0x20>
			if (data == '[') {
 8002c68:	2b5b      	cmp	r3, #91	; 0x5b
 8002c6a:	d102      	bne.n	8002c72 <shell_process+0x59a>
	sh->ctx->receive_state = state;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	7153      	strb	r3, [r2, #5]
}
 8002c70:	e542      	b.n	80026f8 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
 8002c72:	f8d2 2260 	ldr.w	r2, [r2, #608]	; 0x260
			} else if (z_flag_echo_get(sh)) {
 8002c76:	0790      	lsls	r0, r2, #30
 8002c78:	d506      	bpl.n	8002c88 <shell_process+0x5b0>
	if (data == SHELL_VT100_ASCII_ALT_B) {
 8002c7a:	2b62      	cmp	r3, #98	; 0x62
 8002c7c:	d108      	bne.n	8002c90 <shell_process+0x5b8>
		z_shell_op_cursor_word_move(sh, -1);
 8002c7e:	f04f 31ff 	mov.w	r1, #4294967295
		z_shell_op_cursor_word_move(sh, 1);
 8002c82:	4620      	mov	r0, r4
 8002c84:	f011 fadb 	bl	801423e <z_shell_op_cursor_word_move>
	sh->ctx->receive_state = state;
 8002c88:	68a3      	ldr	r3, [r4, #8]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	715a      	strb	r2, [r3, #5]
}
 8002c8e:	e533      	b.n	80026f8 <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
 8002c90:	2b66      	cmp	r3, #102	; 0x66
 8002c92:	d1f9      	bne.n	8002c88 <shell_process+0x5b0>
		z_shell_op_cursor_word_move(sh, 1);
 8002c94:	2101      	movs	r1, #1
 8002c96:	e7f4      	b.n	8002c82 <shell_process+0x5aa>
 8002c98:	080204cc 	.word	0x080204cc
 8002c9c:	0801e2b4 	.word	0x0801e2b4
 8002ca0:	0801de94 	.word	0x0801de94
 8002ca4:	0801caf1 	.word	0x0801caf1
 8002ca8:	0801caf6 	.word	0x0801caf6
 8002cac:	0801caec 	.word	0x0801caec
	sh->ctx->receive_state = state;
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	7151      	strb	r1, [r2, #5]
 8002cb4:	68a2      	ldr	r2, [r4, #8]
 8002cb6:	f8d2 1260 	ldr.w	r1, [r2, #608]	; 0x260
			if (!z_flag_echo_get(sh)) {
 8002cba:	0789      	lsls	r1, r1, #30
 8002cbc:	f57f ad1c 	bpl.w	80026f8 <shell_process+0x20>
			switch (data) {
 8002cc0:	3b31      	subs	r3, #49	; 0x31
 8002cc2:	2b1b      	cmp	r3, #27
 8002cc4:	f63f ad18 	bhi.w	80026f8 <shell_process+0x20>
 8002cc8:	a101      	add	r1, pc, #4	; (adr r1, 8002cd0 <shell_process+0x5f8>)
 8002cca:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002d4d 	.word	0x08002d4d
 8002cd4:	08002d59 	.word	0x08002d59
 8002cd8:	08002d6d 	.word	0x08002d6d
 8002cdc:	08002d41 	.word	0x08002d41
 8002ce0:	080026f9 	.word	0x080026f9
 8002ce4:	080026f9 	.word	0x080026f9
 8002ce8:	080026f9 	.word	0x080026f9
 8002cec:	080026f9 	.word	0x080026f9
 8002cf0:	080026f9 	.word	0x080026f9
 8002cf4:	080026f9 	.word	0x080026f9
 8002cf8:	080026f9 	.word	0x080026f9
 8002cfc:	080026f9 	.word	0x080026f9
 8002d00:	080026f9 	.word	0x080026f9
 8002d04:	080026f9 	.word	0x080026f9
 8002d08:	080026f9 	.word	0x080026f9
 8002d0c:	080026f9 	.word	0x080026f9
 8002d10:	08002c2b 	.word	0x08002c2b
 8002d14:	08002c21 	.word	0x08002c21
 8002d18:	08002be7 	.word	0x08002be7
 8002d1c:	08002bc1 	.word	0x08002bc1
 8002d20:	080026f9 	.word	0x080026f9
 8002d24:	08002d45 	.word	0x08002d45
 8002d28:	080026f9 	.word	0x080026f9
 8002d2c:	08002d51 	.word	0x08002d51
 8002d30:	080026f9 	.word	0x080026f9
 8002d34:	080026f9 	.word	0x080026f9
 8002d38:	080026f9 	.word	0x080026f9
 8002d3c:	08002d5d 	.word	0x08002d5d
	sh->ctx->receive_state = state;
 8002d40:	2303      	movs	r3, #3
 8002d42:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_end_move(sh);
 8002d44:	4620      	mov	r0, r4
 8002d46:	f011 fabc 	bl	80142c2 <z_shell_op_cursor_end_move>
		break;
 8002d4a:	e4d5      	b.n	80026f8 <shell_process+0x20>
	sh->ctx->receive_state = state;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_home_move(sh);
 8002d50:	4620      	mov	r0, r4
 8002d52:	f011 fab0 	bl	80142b6 <z_shell_op_cursor_home_move>
		break;
 8002d56:	e4cf      	b.n	80026f8 <shell_process+0x20>
	sh->ctx->receive_state = state;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	7153      	strb	r3, [r2, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
 8002d5c:	68a0      	ldr	r0, [r4, #8]
 8002d5e:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
 8002d62:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(sh, !status);
 8002d66:	f081 0101 	eor.w	r1, r1, #1
 8002d6a:	e5ea      	b.n	8002942 <shell_process+0x26a>
	sh->ctx->receive_state = state;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	7153      	strb	r3, [r2, #5]
	return sh->ctx->cfg.flags.echo == 1;
 8002d70:	68a3      	ldr	r3, [r4, #8]
 8002d72:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
				if (z_flag_echo_get(sh)) {
 8002d76:	079b      	lsls	r3, r3, #30
 8002d78:	f57f acbe 	bpl.w	80026f8 <shell_process+0x20>
 8002d7c:	e554      	b.n	8002828 <shell_process+0x150>
	sh->ctx->receive_state = state;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e775      	b.n	8002c6e <shell_process+0x596>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
 8002d82:	2900      	cmp	r1, #0
 8002d84:	f43f ad90 	beq.w	80028a8 <shell_process+0x1d0>
 8002d88:	e5df      	b.n	800294a <shell_process+0x272>
 8002d8a:	bf00      	nop

08002d8c <shell_init>:
{
 8002d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d90:	4604      	mov	r4, r0
	if (sh->ctx->tid) {
 8002d92:	6880      	ldr	r0, [r0, #8]
{
 8002d94:	4688      	mov	r8, r1
 8002d96:	b089      	sub	sp, #36	; 0x24
	if (sh->ctx->tid) {
 8002d98:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
 8002d9c:	4615      	mov	r5, r2
 8002d9e:	461f      	mov	r7, r3
	if (sh->ctx->tid) {
 8002da0:	2900      	cmp	r1, #0
 8002da2:	d166      	bne.n	8002e72 <shell_init+0xe6>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
 8002da4:	f44f 7245 	mov.w	r2, #788	; 0x314
 8002da8:	f011 ff70 	bl	8014c8c <memset>
	sh->ctx->prompt = sh->default_prompt;
 8002dac:	68a3      	ldr	r3, [r4, #8]
 8002dae:	6822      	ldr	r2, [r4, #0]
 8002db0:	601a      	str	r2, [r3, #0]
	z_shell_history_init(sh->history);
 8002db2:	68e0      	ldr	r0, [r4, #12]
 8002db4:	f011 fd74 	bl	80148a0 <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
 8002db8:	68a0      	ldr	r0, [r4, #8]
 8002dba:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
 8002dbe:	f44f 792a 	mov.w	r9, #680	; 0x2a8
 8002dc2:	f44f 761a 	mov.w	r6, #616	; 0x268
 8002dc6:	f018 fd30 	bl	801b82a <z_impl_k_mutex_init>
		k_poll_signal_init(&sh->ctx->signals[i]);
 8002dca:	68a0      	ldr	r0, [r4, #8]
 8002dcc:	4430      	add	r0, r6
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
 8002dce:	f019 f9b1 	bl	801c134 <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
 8002dd2:	68a0      	ldr	r0, [r4, #8]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	1983      	adds	r3, r0, r6
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8002dda:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
 8002ddc:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8002dde:	f109 0914 	add.w	r9, r9, #20
		k_poll_event_init(&sh->ctx->events[i],
 8002de2:	f019 f98a 	bl	801c0fa <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
 8002de6:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
 8002dea:	d1ee      	bne.n	8002dca <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
 8002dec:	69a3      	ldr	r3, [r4, #24]
 8002dee:	2600      	movs	r6, #0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
 8002df0:	2102      	movs	r1, #2
 8002df2:	601e      	str	r6, [r3, #0]
	sh->ctx->cfg.flags = cfg_flags;
 8002df4:	f366 0582 	bfi	r5, r6, #2, #1
 8002df8:	68a0      	ldr	r0, [r4, #8]
 8002dfa:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8002dfe:	f010 fe1a 	bl	8013a36 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
 8002e02:	68a3      	ldr	r3, [r4, #8]
 8002e04:	2250      	movs	r2, #80	; 0x50
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a
	sh->ctx->vt100_ctx.cons.terminal_hei =
 8002e08:	2218      	movs	r2, #24
 8002e0a:	68a3      	ldr	r3, [r4, #8]
 8002e0c:	851a      	strh	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
 8002e0e:	68a3      	ldr	r3, [r4, #8]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	f010 fe44 	bl	8013a9e <z_shell_strlen>
 8002e16:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
 8002e18:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <shell_init+0xec>)
 8002e1a:	4641      	mov	r1, r8
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
 8002e1c:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	sh->ctx->cfg.flags = cfg_flags;
 8002e20:	68a3      	ldr	r3, [r4, #8]
 8002e22:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
 8002e26:	6860      	ldr	r0, [r4, #4]
 8002e28:	6803      	ldr	r3, [r0, #0]
 8002e2a:	681d      	ldr	r5, [r3, #0]
 8002e2c:	4623      	mov	r3, r4
 8002e2e:	47a8      	blx	r5
	if (ret == 0) {
 8002e30:	4605      	mov	r5, r0
 8002e32:	b9d0      	cbnz	r0, 8002e6a <shell_init+0xde>
	sh->ctx->state = state;
 8002e34:	68a3      	ldr	r3, [r4, #8]
 8002e36:	2201      	movs	r2, #1
 8002e38:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(sh->thread,
 8002e3a:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2300      	movs	r3, #0
 8002e42:	9504      	str	r5, [sp, #16]
 8002e44:	9400      	str	r4, [sp, #0]
 8002e46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002e4a:	230e      	movs	r3, #14
 8002e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e50:	9303      	str	r3, [sp, #12]
 8002e52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e54:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <shell_init+0xf0>)
 8002e5a:	f00e febf 	bl	8011bdc <z_impl_k_thread_create>
	sh->ctx->tid = tid;
 8002e5e:	68a3      	ldr	r3, [r4, #8]
 8002e60:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	k_thread_name_set(tid, sh->thread_name);
 8002e64:	6a21      	ldr	r1, [r4, #32]
	return z_impl_k_thread_name_set(thread, str);
 8002e66:	f00e fdf5 	bl	8011a54 <z_impl_k_thread_name_set>
}
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	b009      	add	sp, #36	; 0x24
 8002e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
 8002e72:	f06f 0577 	mvn.w	r5, #119	; 0x77
 8002e76:	e7f8      	b.n	8002e6a <shell_init+0xde>
 8002e78:	08013ac9 	.word	0x08013ac9
 8002e7c:	08002ed5 	.word	0x08002ed5

08002e80 <shell_start>:
{
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4604      	mov	r4, r0
	return sh->ctx->state;
 8002e84:	6880      	ldr	r0, [r0, #8]
	if (state_get(sh) != SHELL_STATE_INITIALIZED) {
 8002e86:	7903      	ldrb	r3, [r0, #4]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d11d      	bne.n	8002ec8 <shell_start+0x48>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8002e98:	f010 fe14 	bl	8013ac4 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(sh, SHELL_NORMAL);
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	2108      	movs	r1, #8
 8002ea0:	f000 f990 	bl	80031c4 <z_shell_vt100_color_set>
	if (z_shell_strlen(sh->default_prompt) > 0) {
 8002ea4:	6820      	ldr	r0, [r4, #0]
 8002ea6:	f010 fdfa 	bl	8013a9e <z_shell_strlen>
 8002eaa:	b118      	cbz	r0, 8002eb4 <shell_start+0x34>
		z_shell_raw_fprintf(sh->fprintf_ctx, "\n\n");
 8002eac:	4908      	ldr	r1, [pc, #32]	; (8002ed0 <shell_start+0x50>)
 8002eae:	6960      	ldr	r0, [r4, #20]
 8002eb0:	f010 fdfb 	bl	8013aaa <z_shell_raw_fprintf>
	state_set(sh, SHELL_STATE_ACTIVE);
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	f7ff fbe9 	bl	800268c <state_set.constprop.0>
	k_mutex_unlock(&sh->ctx->wr_mtx);
 8002eba:	68a0      	ldr	r0, [r4, #8]
 8002ebc:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8002ec0:	f010 fe55 	bl	8013b6e <k_mutex_unlock.isra.0>
	return 0;
 8002ec4:	2000      	movs	r0, #0
}
 8002ec6:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8002ec8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002ecc:	e7fb      	b.n	8002ec6 <shell_start+0x46>
 8002ece:	bf00      	nop
 8002ed0:	0801dcf9 	.word	0x0801dcf9

08002ed4 <shell_thread>:
{
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	4604      	mov	r4, r0
	err = sh->iface->api->enable(sh->iface, false);
 8002ed8:	6840      	ldr	r0, [r0, #4]
 8002eda:	2100      	movs	r1, #0
 8002edc:	6803      	ldr	r3, [r0, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4798      	blx	r3
	if (err != 0) {
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d13f      	bne.n	8002f66 <shell_thread+0x92>
		err = shell_start(sh);
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f7ff ffca 	bl	8002e80 <shell_start>
		if (err != 0) {
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d13a      	bne.n	8002f66 <shell_thread+0x92>
		shell_signal_handle(sh, SHELL_SIGNAL_KILL, kill_handler);
 8002ef0:	4e1d      	ldr	r6, [pc, #116]	; (8002f68 <shell_thread+0x94>)
		shell_signal_handle(sh, SHELL_SIGNAL_RXRDY, shell_process);
 8002ef2:	4f1e      	ldr	r7, [pc, #120]	; (8002f6c <shell_thread+0x98>)
		err = k_poll(sh->ctx->events, SHELL_SIGNAL_TXDONE,
 8002ef4:	68a0      	ldr	r0, [r4, #8]
 8002ef6:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
 8002efa:	f04f 32ff 	mov.w	r2, #4294967295
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	2103      	movs	r1, #3
 8002f04:	f00f ff92 	bl	8012e2c <z_impl_k_poll>
		if (err != 0) {
 8002f08:	4605      	mov	r5, r0
 8002f0a:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
 8002f18:	b175      	cbz	r5, 8002f38 <shell_thread+0x64>
			k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
 8002f1a:	f010 fdd3 	bl	8013ac4 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(sh, SHELL_ERROR,
 8002f1e:	4620      	mov	r0, r4
 8002f20:	462b      	mov	r3, r5
 8002f22:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <shell_thread+0x9c>)
 8002f24:	2101      	movs	r1, #1
 8002f26:	f011 fa7a 	bl	801441e <z_shell_fprintf>
			k_mutex_unlock(&sh->ctx->wr_mtx);
 8002f2a:	68a0      	ldr	r0, [r4, #8]
}
 8002f2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_mutex_unlock(&sh->ctx->wr_mtx);
 8002f30:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8002f34:	f010 be1b 	b.w	8013b6e <k_mutex_unlock.isra.0>
		k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
 8002f38:	f010 fdc4 	bl	8013ac4 <k_mutex_lock.constprop.0.isra.0>
		shell_signal_handle(sh, SHELL_SIGNAL_KILL, kill_handler);
 8002f3c:	4632      	mov	r2, r6
 8002f3e:	2102      	movs	r1, #2
 8002f40:	4620      	mov	r0, r4
 8002f42:	f010 fd96 	bl	8013a72 <shell_signal_handle>
		shell_signal_handle(sh, SHELL_SIGNAL_RXRDY, shell_process);
 8002f46:	4620      	mov	r0, r4
 8002f48:	463a      	mov	r2, r7
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	f010 fd91 	bl	8013a72 <shell_signal_handle>
		if (sh->iface->api->update) {
 8002f50:	6860      	ldr	r0, [r4, #4]
 8002f52:	6803      	ldr	r3, [r0, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	b103      	cbz	r3, 8002f5a <shell_thread+0x86>
			sh->iface->api->update(sh->iface);
 8002f58:	4798      	blx	r3
		k_mutex_unlock(&sh->ctx->wr_mtx);
 8002f5a:	68a0      	ldr	r0, [r4, #8]
 8002f5c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8002f60:	f010 fe05 	bl	8013b6e <k_mutex_unlock.isra.0>
	while (true) {
 8002f64:	e7c6      	b.n	8002ef4 <shell_thread+0x20>
}
 8002f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f68:	08013add 	.word	0x08013add
 8002f6c:	080026d9 	.word	0x080026d9
 8002f70:	0801e2ba 	.word	0x0801e2ba

08002f74 <cmd_help>:

	return state_get(sh) ==	SHELL_STATE_ACTIVE;
}

static int cmd_help(const struct shell *sh, size_t argc, char **argv)
{
 8002f74:	b510      	push	{r4, lr}
 8002f76:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(sh, "Please press the <Tab> button to see all available "
 8002f78:	4a0c      	ldr	r2, [pc, #48]	; (8002fac <cmd_help+0x38>)
 8002f7a:	2108      	movs	r1, #8
 8002f7c:	f010 fe3e 	bl	8013bfc <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(sh,
 8002f80:	4620      	mov	r0, r4
 8002f82:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <cmd_help+0x3c>)
 8002f84:	2108      	movs	r1, #8
 8002f86:	f010 fe39 	bl	8013bfc <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(sh,
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <cmd_help+0x40>)
 8002f8e:	2108      	movs	r1, #8
 8002f90:	f010 fe34 	bl	8013bfc <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(sh,
 8002f94:	4620      	mov	r0, r4
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <cmd_help+0x44>)
 8002f98:	2108      	movs	r1, #8
 8002f9a:	f010 fe2f 	bl	8013bfc <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(sh, NULL,
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <cmd_help+0x48>)
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	f000 fa3a 	bl	800341c <z_shell_help_subcmd_print>
			shell_print(sh, "  %s", entry->syntax);
		}
	}

	return 0;
}
 8002fa8:	2000      	movs	r0, #0
 8002faa:	bd10      	pop	{r4, pc}
 8002fac:	0801e2d1 	.word	0x0801e2d1
 8002fb0:	0801e30f 	.word	0x0801e30f
 8002fb4:	0801e36e 	.word	0x0801e36e
 8002fb8:	0801e3c2 	.word	0x0801e3c2
 8002fbc:	0801e45c 	.word	0x0801e45c

08002fc0 <shell_hexdump_line>:
{
 8002fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8002fc4:	2500      	movs	r5, #0
			shell_fprintf(sh, SHELL_NORMAL, "   ");
 8002fc6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003074 <shell_hexdump_line+0xb4>
			shell_fprintf(sh, SHELL_NORMAL, "%02x ",
 8002fca:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8003078 <shell_hexdump_line+0xb8>
{
 8002fce:	4616      	mov	r6, r2
			shell_fprintf(sh, SHELL_NORMAL, " ");
 8002fd0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800307c <shell_hexdump_line+0xbc>
{
 8002fd4:	461f      	mov	r7, r3
	shell_fprintf(sh, SHELL_NORMAL, "%08X: ", offset);
 8002fd6:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <shell_hexdump_line+0xc0>)
 8002fd8:	460b      	mov	r3, r1
 8002fda:	2108      	movs	r1, #8
{
 8002fdc:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "%08X: ", offset);
 8002fde:	f010 fe0d 	bl	8013bfc <shell_fprintf>
		if (i < len) {
 8002fe2:	42af      	cmp	r7, r5
 8002fe4:	d931      	bls.n	800304a <shell_hexdump_line+0x8a>
			shell_fprintf(sh, SHELL_NORMAL, "%02x ",
 8002fe6:	5d73      	ldrb	r3, [r6, r5]
 8002fe8:	464a      	mov	r2, r9
 8002fea:	2108      	movs	r1, #8
 8002fec:	4620      	mov	r0, r4
 8002fee:	f010 fe05 	bl	8013bfc <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8002ff2:	3501      	adds	r5, #1
 8002ff4:	2d10      	cmp	r5, #16
 8002ff6:	d120      	bne.n	800303a <shell_hexdump_line+0x7a>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8002ff8:	2500      	movs	r5, #0
			shell_fprintf(sh, SHELL_NORMAL, " ");
 8002ffa:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800307c <shell_hexdump_line+0xbc>
			shell_fprintf(sh, SHELL_NORMAL, "%c",
 8002ffe:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003084 <shell_hexdump_line+0xc4>
	shell_fprintf(sh, SHELL_NORMAL, "|");
 8003002:	2108      	movs	r1, #8
 8003004:	4a20      	ldr	r2, [pc, #128]	; (8003088 <shell_hexdump_line+0xc8>)
 8003006:	4620      	mov	r0, r4
 8003008:	f010 fdf8 	bl	8013bfc <shell_fprintf>
		if (i < len) {
 800300c:	42bd      	cmp	r5, r7
 800300e:	d22a      	bcs.n	8003066 <shell_hexdump_line+0xa6>
			char c = data[i];
 8003010:	5d73      	ldrb	r3, [r6, r5]
			shell_fprintf(sh, SHELL_NORMAL, "%c",
 8003012:	2108      	movs	r1, #8
 8003014:	4620      	mov	r0, r4
	return (int)((((unsigned)c) >= ' ') &&
 8003016:	f1a3 0220 	sub.w	r2, r3, #32
 800301a:	2a5f      	cmp	r2, #95	; 0x5f
 800301c:	464a      	mov	r2, r9
 800301e:	bf28      	it	cs
 8003020:	232e      	movcs	r3, #46	; 0x2e
 8003022:	f010 fdeb 	bl	8013bfc <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
 8003026:	3501      	adds	r5, #1
 8003028:	2d10      	cmp	r5, #16
 800302a:	d114      	bne.n	8003056 <shell_hexdump_line+0x96>
	shell_print(sh, "|");
 800302c:	4620      	mov	r0, r4
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <shell_hexdump_line+0xcc>)
 8003030:	2108      	movs	r1, #8
}
 8003032:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	shell_print(sh, "|");
 8003036:	f010 bde1 	b.w	8013bfc <shell_fprintf>
		if (i > 0 && !(i % 8)) {
 800303a:	076a      	lsls	r2, r5, #29
 800303c:	d1d1      	bne.n	8002fe2 <shell_hexdump_line+0x22>
			shell_fprintf(sh, SHELL_NORMAL, " ");
 800303e:	4652      	mov	r2, sl
 8003040:	2108      	movs	r1, #8
 8003042:	4620      	mov	r0, r4
 8003044:	f010 fdda 	bl	8013bfc <shell_fprintf>
 8003048:	e7cb      	b.n	8002fe2 <shell_hexdump_line+0x22>
			shell_fprintf(sh, SHELL_NORMAL, "   ");
 800304a:	4642      	mov	r2, r8
 800304c:	2108      	movs	r1, #8
 800304e:	4620      	mov	r0, r4
 8003050:	f010 fdd4 	bl	8013bfc <shell_fprintf>
 8003054:	e7cd      	b.n	8002ff2 <shell_hexdump_line+0x32>
		if (i > 0 && !(i % 8)) {
 8003056:	076b      	lsls	r3, r5, #29
 8003058:	d1d8      	bne.n	800300c <shell_hexdump_line+0x4c>
			shell_fprintf(sh, SHELL_NORMAL, " ");
 800305a:	4642      	mov	r2, r8
 800305c:	2108      	movs	r1, #8
 800305e:	4620      	mov	r0, r4
 8003060:	f010 fdcc 	bl	8013bfc <shell_fprintf>
 8003064:	e7d2      	b.n	800300c <shell_hexdump_line+0x4c>
			shell_fprintf(sh, SHELL_NORMAL, " ");
 8003066:	4642      	mov	r2, r8
 8003068:	2108      	movs	r1, #8
 800306a:	4620      	mov	r0, r4
 800306c:	f010 fdc6 	bl	8013bfc <shell_fprintf>
 8003070:	e7d9      	b.n	8003026 <shell_hexdump_line+0x66>
 8003072:	bf00      	nop
 8003074:	080204cb 	.word	0x080204cb
 8003078:	0801e479 	.word	0x0801e479
 800307c:	080204cd 	.word	0x080204cd
 8003080:	0801e472 	.word	0x0801e472
 8003084:	0801e4a1 	.word	0x0801e4a1
 8003088:	0801e47f 	.word	0x0801e47f
 800308c:	0801e481 	.word	0x0801e481

08003090 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
 8003090:	4613      	mov	r3, r2
 8003092:	2200      	movs	r2, #0
 8003094:	b513      	push	{r0, r1, r4, lr}
 8003096:	4604      	mov	r4, r0
 8003098:	9200      	str	r2, [sp, #0]
 800309a:	460a      	mov	r2, r1
 800309c:	4601      	mov	r1, r0
 800309e:	4807      	ldr	r0, [pc, #28]	; (80030bc <z_shell_fprintf_fmt+0x2c>)
 80030a0:	f7fd fe46 	bl	8000d30 <z_cbvprintf_impl>
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);

	if (sh_fprintf->ctrl_blk->autoflush) {
 80030a4:	6923      	ldr	r3, [r4, #16]
 80030a6:	791b      	ldrb	r3, [r3, #4]
 80030a8:	b12b      	cbz	r3, 80030b6 <z_shell_fprintf_fmt+0x26>
		z_shell_fprintf_buffer_flush(sh_fprintf);
 80030aa:	4620      	mov	r0, r4
	}
}
 80030ac:	b002      	add	sp, #8
 80030ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
 80030b2:	f010 bdfb 	b.w	8013cac <z_shell_fprintf_buffer_flush>
}
 80030b6:	b002      	add	sp, #8
 80030b8:	bd10      	pop	{r4, pc}
 80030ba:	bf00      	nop
 80030bc:	08013cc5 	.word	0x08013cc5

080030c0 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	460b      	mov	r3, r1
 80030c4:	4615      	mov	r5, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
 80030c6:	b958      	cbnz	r0, 80030e0 <z_shell_cmd_get+0x20>
	TYPE_SECTION_COUNT(union shell_cmd_entry, shell_root_cmds, &len);
 80030c8:	4915      	ldr	r1, [pc, #84]	; (8003120 <z_shell_cmd_get+0x60>)
 80030ca:	4a16      	ldr	r2, [pc, #88]	; (8003124 <z_shell_cmd_get+0x64>)
 80030cc:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->entry : NULL;
 80030ce:	ebb3 0f92 	cmp.w	r3, r2, lsr #2
 80030d2:	d302      	bcc.n	80030da <z_shell_cmd_get+0x1a>
 80030d4:	2500      	movs	r5, #0
			}
		}
	}

	return res;
}
 80030d6:	4628      	mov	r0, r5
 80030d8:	bd38      	pop	{r3, r4, r5, pc}
				shell_root_cmd_get(idx)->entry : NULL;
 80030da:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 80030de:	e7fa      	b.n	80030d6 <z_shell_cmd_get+0x16>
	if (parent->subcmd) {
 80030e0:	6884      	ldr	r4, [r0, #8]
 80030e2:	2c00      	cmp	r4, #0
 80030e4:	d0f6      	beq.n	80030d4 <z_shell_cmd_get+0x14>
	return (entry >= TYPE_SECTION_START(shell_dynamic_subcmds)) &&
 80030e6:	4a10      	ldr	r2, [pc, #64]	; (8003128 <z_shell_cmd_get+0x68>)
 80030e8:	4294      	cmp	r4, r2
 80030ea:	d30a      	bcc.n	8003102 <z_shell_cmd_get+0x42>
		if (is_dynamic_cmd(parent->subcmd)) {
 80030ec:	4a0f      	ldr	r2, [pc, #60]	; (800312c <z_shell_cmd_get+0x6c>)
 80030ee:	4294      	cmp	r4, r2
 80030f0:	d207      	bcs.n	8003102 <z_shell_cmd_get+0x42>
			parent->subcmd->dynamic_get(idx, dloc);
 80030f2:	4618      	mov	r0, r3
 80030f4:	6822      	ldr	r2, [r4, #0]
 80030f6:	4629      	mov	r1, r5
 80030f8:	4790      	blx	r2
			if (dloc->syntax != NULL) {
 80030fa:	682b      	ldr	r3, [r5, #0]
			if (entry_list[idx].syntax != NULL) {
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ea      	bne.n	80030d6 <z_shell_cmd_get+0x16>
 8003100:	e7e8      	b.n	80030d4 <z_shell_cmd_get+0x14>
	return (entry >= TYPE_SECTION_START(shell_subcmds)) &&
 8003102:	4a0b      	ldr	r2, [pc, #44]	; (8003130 <z_shell_cmd_get+0x70>)
 8003104:	4294      	cmp	r4, r2
 8003106:	d308      	bcc.n	800311a <z_shell_cmd_get+0x5a>
			if (is_section_cmd(parent->subcmd)) {
 8003108:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <z_shell_cmd_get+0x74>)
 800310a:	4294      	cmp	r4, r2
 800310c:	d205      	bcs.n	800311a <z_shell_cmd_get+0x5a>
				idx++;
 800310e:	3301      	adds	r3, #1
			if (entry_list[idx].syntax != NULL) {
 8003110:	2014      	movs	r0, #20
 8003112:	4343      	muls	r3, r0
 8003114:	18e5      	adds	r5, r4, r3
 8003116:	58e3      	ldr	r3, [r4, r3]
 8003118:	e7f0      	b.n	80030fc <z_shell_cmd_get+0x3c>
				entry_list = parent->subcmd->entry;
 800311a:	6824      	ldr	r4, [r4, #0]
 800311c:	e7f8      	b.n	8003110 <z_shell_cmd_get+0x50>
 800311e:	bf00      	nop
 8003120:	0801ca9c 	.word	0x0801ca9c
 8003124:	0801cac8 	.word	0x0801cac8
 8003128:	0801cadc 	.word	0x0801cadc
 800312c:	0801cae4 	.word	0x0801cae4
 8003130:	0801cac8 	.word	0x0801cac8
 8003134:	0801cadc 	.word	0x0801cadc

08003138 <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8003138:	6883      	ldr	r3, [r0, #8]
 800313a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
 800313e:	069b      	lsls	r3, r3, #26
 8003140:	d503      	bpl.n	800314a <z_clear_eos+0x12>
 8003142:	4902      	ldr	r1, [pc, #8]	; (800314c <z_clear_eos+0x14>)
 8003144:	6940      	ldr	r0, [r0, #20]
 8003146:	f010 bfe9 	b.w	801411c <z_shell_raw_fprintf>
}
 800314a:	4770      	bx	lr
 800314c:	0801cafc 	.word	0x0801cafc

08003150 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
 8003150:	4901      	ldr	r1, [pc, #4]	; (8003158 <z_cursor_next_line_move.isra.0+0x8>)
 8003152:	f010 bfe3 	b.w	801411c <z_shell_raw_fprintf>
 8003156:	bf00      	nop
 8003158:	0801dcfa 	.word	0x0801dcfa

0800315c <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *sh, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
 800315c:	1e0a      	subs	r2, r1, #0
 800315e:	dc0d      	bgt.n	800317c <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
 8003160:	d00e      	beq.n	8003180 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
 8003162:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8003164:	6881      	ldr	r1, [r0, #8]
 8003166:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(sh, "\e[%d%c", delta, dir);
 800316a:	0689      	lsls	r1, r1, #26
 800316c:	d508      	bpl.n	8003180 <z_shell_op_cursor_vert_move+0x24>
 800316e:	2a00      	cmp	r2, #0
 8003170:	4904      	ldr	r1, [pc, #16]	; (8003184 <z_shell_op_cursor_vert_move+0x28>)
 8003172:	6940      	ldr	r0, [r0, #20]
 8003174:	bfb8      	it	lt
 8003176:	4252      	neglt	r2, r2
 8003178:	f010 bfd0 	b.w	801411c <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
 800317c:	2341      	movs	r3, #65	; 0x41
 800317e:	e7f1      	b.n	8003164 <z_shell_op_cursor_vert_move+0x8>
}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	0801e49d 	.word	0x0801e49d

08003188 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *sh, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
 8003188:	1e0a      	subs	r2, r1, #0
 800318a:	dc0d      	bgt.n	80031a8 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
 800318c:	d00e      	beq.n	80031ac <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
 800318e:	2344      	movs	r3, #68	; 0x44
 8003190:	6881      	ldr	r1, [r0, #8]
 8003192:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(sh, "\e[%d%c", delta, dir);
 8003196:	0689      	lsls	r1, r1, #26
 8003198:	d508      	bpl.n	80031ac <z_shell_op_cursor_horiz_move+0x24>
 800319a:	2a00      	cmp	r2, #0
 800319c:	4904      	ldr	r1, [pc, #16]	; (80031b0 <z_shell_op_cursor_horiz_move+0x28>)
 800319e:	6940      	ldr	r0, [r0, #20]
 80031a0:	bfb8      	it	lt
 80031a2:	4252      	neglt	r2, r2
 80031a4:	f010 bfba 	b.w	801411c <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
 80031a8:	2343      	movs	r3, #67	; 0x43
 80031aa:	e7f1      	b.n	8003190 <z_shell_op_cursor_horiz_move+0x8>
}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	0801e49d 	.word	0x0801e49d

080031b4 <z_shell_print_cmd>:
	z_shell_fprintf(sh, SHELL_INFO, "%s", sh->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "%s", sh->ctx->cmd_buff);
 80031b4:	6882      	ldr	r2, [r0, #8]
 80031b6:	4902      	ldr	r1, [pc, #8]	; (80031c0 <z_shell_print_cmd+0xc>)
 80031b8:	3242      	adds	r2, #66	; 0x42
 80031ba:	6940      	ldr	r0, [r0, #20]
 80031bc:	f010 bfae 	b.w	801411c <z_shell_raw_fprintf>
 80031c0:	0801de94 	.word	0x0801de94

080031c4 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
 80031c4:	2908      	cmp	r1, #8
{
 80031c6:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
 80031c8:	d817      	bhi.n	80031fa <z_shell_vt100_color_set+0x36>
		return;
	}

	if (sh->ctx->vt100_ctx.col.col == color) {
 80031ca:	6883      	ldr	r3, [r0, #8]
 80031cc:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 80031d0:	4291      	cmp	r1, r2
 80031d2:	d012      	beq.n	80031fa <z_shell_vt100_color_set+0x36>
		return;
	}

	sh->ctx->vt100_ctx.col.col = color;
 80031d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
 80031d8:	2a08      	cmp	r2, #8
 80031da:	6883      	ldr	r3, [r0, #8]
 80031dc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80031e0:	d005      	beq.n	80031ee <z_shell_vt100_color_set+0x2a>
		Z_SHELL_VT100_CMD(sh, "\e[1;3%dm", color);
 80031e2:	0699      	lsls	r1, r3, #26
 80031e4:	d509      	bpl.n	80031fa <z_shell_vt100_color_set+0x36>
 80031e6:	4905      	ldr	r1, [pc, #20]	; (80031fc <z_shell_vt100_color_set+0x38>)
 80031e8:	6940      	ldr	r0, [r0, #20]
 80031ea:	f010 bf97 	b.w	801411c <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(sh, SHELL_VT100_MODESOFF);
 80031ee:	069b      	lsls	r3, r3, #26
 80031f0:	d503      	bpl.n	80031fa <z_shell_vt100_color_set+0x36>
 80031f2:	4903      	ldr	r1, [pc, #12]	; (8003200 <z_shell_vt100_color_set+0x3c>)
 80031f4:	6940      	ldr	r0, [r0, #20]
 80031f6:	f010 bf91 	b.w	801411c <z_shell_raw_fprintf>
	}
}
 80031fa:	4770      	bx	lr
 80031fc:	0801e4a4 	.word	0x0801e4a4
 8003200:	0801cb01 	.word	0x0801cb01

08003204 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *sh,
				  const struct shell_vt100_colors *color)
{
 8003204:	b538      	push	{r3, r4, r5, lr}
 8003206:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(sh, color->col);
 8003208:	7809      	ldrb	r1, [r1, #0]
{
 800320a:	4604      	mov	r4, r0
	z_shell_vt100_color_set(sh, color->col);
 800320c:	f7ff ffda 	bl	80031c4 <z_shell_vt100_color_set>
	vt100_bgcolor_set(sh, color->bgcol);
 8003210:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
 8003212:	2a07      	cmp	r2, #7
 8003214:	d811      	bhi.n	800323a <z_shell_vt100_colors_restore+0x36>
	    (sh->ctx->vt100_ctx.col.bgcol == bgcolor)) {
 8003216:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
 8003218:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800321c:	4291      	cmp	r1, r2
 800321e:	d00c      	beq.n	800323a <z_shell_vt100_colors_restore+0x36>
	sh->ctx->vt100_ctx.col.bgcol = bgcolor;
 8003220:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8003224:	68a3      	ldr	r3, [r4, #8]
 8003226:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, "\e[403%dm", bgcolor);
 800322a:	069b      	lsls	r3, r3, #26
 800322c:	d505      	bpl.n	800323a <z_shell_vt100_colors_restore+0x36>
 800322e:	6960      	ldr	r0, [r4, #20]
 8003230:	4902      	ldr	r1, [pc, #8]	; (800323c <z_shell_vt100_colors_restore+0x38>)
}
 8003232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(sh, "\e[403%dm", bgcolor);
 8003236:	f010 bf71 	b.w	801411c <z_shell_raw_fprintf>
}
 800323a:	bd38      	pop	{r3, r4, r5, pc}
 800323c:	0801e4ad 	.word	0x0801e4ad

08003240 <z_shell_op_word_remove>:
{
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos - 1];
 8003242:	6883      	ldr	r3, [r0, #8]
{
 8003244:	4604      	mov	r4, r0
	if ((sh->ctx->cmd_buff_len == 0) ||
 8003246:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003248:	2a00      	cmp	r2, #0
 800324a:	d04f      	beq.n	80032ec <z_shell_op_word_remove+0xac>
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos - 1];
 800324c:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((sh->ctx->cmd_buff_len == 0) ||
 800324e:	2800      	cmp	r0, #0
 8003250:	d04c      	beq.n	80032ec <z_shell_op_word_remove+0xac>
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos - 1];
 8003252:	3041      	adds	r0, #65	; 0x41
	char *str_start = &sh->ctx->cmd_buff[0];
 8003254:	f103 0642 	add.w	r6, r3, #66	; 0x42
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos - 1];
 8003258:	4418      	add	r0, r3
	char *str_start = &sh->ctx->cmd_buff[0];
 800325a:	4603      	mov	r3, r0
 800325c:	1ac5      	subs	r5, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
 800325e:	42b3      	cmp	r3, r6
 8003260:	4619      	mov	r1, r3
 8003262:	b2ad      	uxth	r5, r5
 8003264:	d30d      	bcc.n	8003282 <z_shell_op_word_remove+0x42>
 8003266:	f811 7901 	ldrb.w	r7, [r1], #-1
 800326a:	2f20      	cmp	r7, #32
 800326c:	d03c      	beq.n	80032e8 <z_shell_op_word_remove+0xa8>
 800326e:	4619      	mov	r1, r3
 8003270:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
 8003272:	7808      	ldrb	r0, [r1, #0]
 8003274:	2820      	cmp	r0, #32
 8003276:	d004      	beq.n	8003282 <z_shell_op_word_remove+0x42>
		++chars_to_delete;
 8003278:	3501      	adds	r5, #1
	while ((str >= str_start) && (*str != ' ')) {
 800327a:	429e      	cmp	r6, r3
		--str;
 800327c:	4619      	mov	r1, r3
		++chars_to_delete;
 800327e:	b2ad      	uxth	r5, r5
	while ((str >= str_start) && (*str != ' ')) {
 8003280:	d9f5      	bls.n	800326e <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
 8003282:	1c6b      	adds	r3, r5, #1
 8003284:	1c4e      	adds	r6, r1, #1
 8003286:	1b52      	subs	r2, r2, r5
 8003288:	4419      	add	r1, r3
 800328a:	4630      	mov	r0, r6
 800328c:	f011 fcdb 	bl	8014c46 <memmove>
	sh->ctx->cmd_buff_len -= chars_to_delete;
 8003290:	68a3      	ldr	r3, [r4, #8]
	z_shell_op_cursor_move(sh, -chars_to_delete);
 8003292:	4269      	negs	r1, r5
 8003294:	4620      	mov	r0, r4
	sh->ctx->cmd_buff_len -= chars_to_delete;
 8003296:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	z_shell_op_cursor_move(sh, -chars_to_delete);
 8003298:	b209      	sxth	r1, r1
	sh->ctx->cmd_buff_len -= chars_to_delete;
 800329a:	1b52      	subs	r2, r2, r5
 800329c:	879a      	strh	r2, [r3, #60]	; 0x3c
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_len] = '\0';
 800329e:	68a2      	ldr	r2, [r4, #8]
 80032a0:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 80032a2:	441a      	add	r2, r3
 80032a4:	2300      	movs	r3, #0
 80032a6:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(sh, -chars_to_delete);
 80032aa:	f010 ffa4 	bl	80141f6 <z_shell_op_cursor_move>
 80032ae:	68a3      	ldr	r3, [r4, #8]
 80032b0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
 80032b4:	069a      	lsls	r2, r3, #26
 80032b6:	d503      	bpl.n	80032c0 <z_shell_op_word_remove+0x80>
 80032b8:	490d      	ldr	r1, [pc, #52]	; (80032f0 <z_shell_op_word_remove+0xb0>)
 80032ba:	6960      	ldr	r0, [r4, #20]
 80032bc:	f010 ff2e 	bl	801411c <z_shell_raw_fprintf>
	z_shell_fprintf(sh, SHELL_NORMAL, "%s", str + 1);
 80032c0:	4633      	mov	r3, r6
 80032c2:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <z_shell_op_word_remove+0xb4>)
 80032c4:	2108      	movs	r1, #8
 80032c6:	4620      	mov	r0, r4
 80032c8:	f011 f8a9 	bl	801441e <z_shell_fprintf>
	z_clear_eos(sh);
 80032cc:	4620      	mov	r0, r4
 80032ce:	f7ff ff33 	bl	8003138 <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 80032d2:	68a3      	ldr	r3, [r4, #8]
 80032d4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
 80032d8:	069b      	lsls	r3, r3, #26
 80032da:	d507      	bpl.n	80032ec <z_shell_op_word_remove+0xac>
 80032dc:	6960      	ldr	r0, [r4, #20]
 80032de:	4906      	ldr	r1, [pc, #24]	; (80032f8 <z_shell_op_word_remove+0xb8>)
}
 80032e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032e4:	f010 bf1a 	b.w	801411c <z_shell_raw_fprintf>
 80032e8:	460b      	mov	r3, r1
 80032ea:	e7b7      	b.n	800325c <z_shell_op_word_remove+0x1c>
 80032ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ee:	bf00      	nop
 80032f0:	0801cb06 	.word	0x0801cb06
 80032f4:	0801de94 	.word	0x0801de94
 80032f8:	0801cb0a 	.word	0x0801cb0a

080032fc <reprint_from_cursor>:
{
 80032fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003300:	4604      	mov	r4, r0
 8003302:	460d      	mov	r5, r1
	if (data_removed) {
 8003304:	4617      	mov	r7, r2
 8003306:	b10a      	cbz	r2, 800330c <reprint_from_cursor+0x10>
		z_clear_eos(sh);
 8003308:	f7ff ff16 	bl	8003138 <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
 800330c:	68a3      	ldr	r3, [r4, #8]
 800330e:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		int len = strlen(&sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos]);
 8003312:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if (z_flag_obscure_get(sh)) {
 8003314:	0752      	lsls	r2, r2, #29
		int len = strlen(&sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos]);
 8003316:	f100 0042 	add.w	r0, r0, #66	; 0x42
 800331a:	4403      	add	r3, r0
	if (z_flag_obscure_get(sh)) {
 800331c:	d51f      	bpl.n	800335e <reprint_from_cursor+0x62>
		int len = strlen(&sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos]);
 800331e:	4618      	mov	r0, r3
			z_shell_raw_fprintf(sh->fprintf_ctx, "*");
 8003320:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800336c <reprint_from_cursor+0x70>
		int len = strlen(&sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos]);
 8003324:	f011 fc5a 	bl	8014bdc <strlen>
 8003328:	4606      	mov	r6, r0
		while (len--) {
 800332a:	b996      	cbnz	r6, 8003352 <reprint_from_cursor+0x56>
	sh->ctx->cmd_buff_pos = sh->ctx->cmd_buff_len;
 800332c:	68a3      	ldr	r3, [r4, #8]
	if (full_line_cmd(sh)) {
 800332e:	4620      	mov	r0, r4
	sh->ctx->cmd_buff_pos = sh->ctx->cmd_buff_len;
 8003330:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003332:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(sh)) {
 8003334:	f010 feff 	bl	8014136 <full_line_cmd>
 8003338:	b120      	cbz	r0, 8003344 <reprint_from_cursor+0x48>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
 800333a:	b107      	cbz	r7, 800333e <reprint_from_cursor+0x42>
 800333c:	b115      	cbz	r5, 8003344 <reprint_from_cursor+0x48>
			z_cursor_next_line_move(sh);
 800333e:	6960      	ldr	r0, [r4, #20]
 8003340:	f7ff ff06 	bl	8003150 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(sh, -diff);
 8003344:	4269      	negs	r1, r5
 8003346:	4620      	mov	r0, r4
 8003348:	b209      	sxth	r1, r1
}
 800334a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(sh, -diff);
 800334e:	f010 bf52 	b.w	80141f6 <z_shell_op_cursor_move>
			z_shell_raw_fprintf(sh->fprintf_ctx, "*");
 8003352:	4641      	mov	r1, r8
 8003354:	6960      	ldr	r0, [r4, #20]
 8003356:	3e01      	subs	r6, #1
 8003358:	f010 fee0 	bl	801411c <z_shell_raw_fprintf>
 800335c:	e7e5      	b.n	800332a <reprint_from_cursor+0x2e>
		z_shell_fprintf(sh, SHELL_NORMAL, "%s",
 800335e:	4a04      	ldr	r2, [pc, #16]	; (8003370 <reprint_from_cursor+0x74>)
 8003360:	2108      	movs	r1, #8
 8003362:	4620      	mov	r0, r4
 8003364:	f011 f85b 	bl	801441e <z_shell_fprintf>
 8003368:	e7e0      	b.n	800332c <reprint_from_cursor+0x30>
 800336a:	bf00      	nop
 800336c:	0801dc44 	.word	0x0801dc44
 8003370:	0801de94 	.word	0x0801de94

08003374 <z_shell_op_char_insert>:
{
 8003374:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
 8003376:	6883      	ldr	r3, [r0, #8]
 8003378:	4604      	mov	r4, r0
 800337a:	f88d 1007 	strb.w	r1, [sp, #7]
 800337e:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (z_flag_insert_mode_get(sh) &&
 8003382:	07d0      	lsls	r0, r2, #31
 8003384:	d522      	bpl.n	80033cc <z_shell_op_char_insert+0x58>
	    (sh->ctx->cmd_buff_len != sh->ctx->cmd_buff_pos)) {
 8003386:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(sh) &&
 8003388:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800338a:	428a      	cmp	r2, r1
 800338c:	d01e      	beq.n	80033cc <z_shell_op_char_insert+0x58>
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos++] = data;
 800338e:	1c48      	adds	r0, r1, #1
		char_replace(sh, data);
 8003390:	f89d 2007 	ldrb.w	r2, [sp, #7]
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos++] = data;
 8003394:	87d8      	strh	r0, [r3, #62]	; 0x3e
 8003396:	440b      	add	r3, r1
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
 800339c:	68a3      	ldr	r3, [r4, #8]
 800339e:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(sh)) {
 80033a2:	0789      	lsls	r1, r1, #30
 80033a4:	d510      	bpl.n	80033c8 <z_shell_op_char_insert+0x54>
	return sh->ctx->cfg.flags.obscure == 1;
 80033a6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(sh->fprintf_ctx, "%c", data);
 80033aa:	6960      	ldr	r0, [r4, #20]
		data = '*';
 80033ac:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(sh->fprintf_ctx, "%c", data);
 80033b0:	490a      	ldr	r1, [pc, #40]	; (80033dc <z_shell_op_char_insert+0x68>)
 80033b2:	bf18      	it	ne
 80033b4:	222a      	movne	r2, #42	; 0x2a
 80033b6:	f010 feb1 	bl	801411c <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(sh)) {
 80033ba:	4620      	mov	r0, r4
 80033bc:	f010 fecf 	bl	801415e <z_shell_cursor_in_empty_line>
 80033c0:	b110      	cbz	r0, 80033c8 <z_shell_op_char_insert+0x54>
		z_cursor_next_line_move(sh);
 80033c2:	6960      	ldr	r0, [r4, #20]
 80033c4:	f7ff fec4 	bl	8003150 <z_cursor_next_line_move.isra.0>
}
 80033c8:	b002      	add	sp, #8
 80033ca:	bd10      	pop	{r4, pc}
		data_insert(sh, &data, 1);
 80033cc:	2201      	movs	r2, #1
 80033ce:	f10d 0107 	add.w	r1, sp, #7
 80033d2:	4620      	mov	r0, r4
 80033d4:	f011 f830 	bl	8014438 <data_insert>
}
 80033d8:	e7f6      	b.n	80033c8 <z_shell_op_char_insert+0x54>
 80033da:	bf00      	nop
 80033dc:	0801e4a1 	.word	0x0801e4a1

080033e0 <z_shell_print_prompt_and_cmd>:
{
 80033e0:	b510      	push	{r4, lr}
	z_shell_fprintf(sh, SHELL_INFO, "%s", sh->ctx->prompt);
 80033e2:	6883      	ldr	r3, [r0, #8]
{
 80033e4:	4604      	mov	r4, r0
	z_shell_fprintf(sh, SHELL_INFO, "%s", sh->ctx->prompt);
 80033e6:	4a09      	ldr	r2, [pc, #36]	; (800340c <z_shell_print_prompt_and_cmd+0x2c>)
 80033e8:	2102      	movs	r1, #2
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f011 f817 	bl	801441e <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
 80033f0:	68a3      	ldr	r3, [r4, #8]
 80033f2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(sh)) {
 80033f6:	079b      	lsls	r3, r3, #30
 80033f8:	d507      	bpl.n	800340a <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(sh);
 80033fa:	4620      	mov	r0, r4
 80033fc:	f7ff feda 	bl	80031b4 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(sh);
 8003400:	4620      	mov	r0, r4
}
 8003402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(sh);
 8003406:	f010 bed3 	b.w	80141b0 <z_shell_op_cursor_position_synchronize>
}
 800340a:	bd10      	pop	{r4, pc}
 800340c:	0801de94 	.word	0x0801de94

08003410 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
 8003410:	4901      	ldr	r1, [pc, #4]	; (8003418 <z_cursor_next_line_move.isra.0+0x8>)
 8003412:	f011 b872 	b.w	80144fa <z_shell_raw_fprintf>
 8003416:	bf00      	nop
 8003418:	0801dcfa 	.word	0x0801dcfa

0800341c <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *sh,
			       const struct shell_static_entry *parent,
			       const char *description)
{
 800341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003420:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
 8003422:	2100      	movs	r1, #0
{
 8003424:	b08b      	sub	sp, #44	; 0x2c
 8003426:	4604      	mov	r4, r0
 8003428:	4617      	mov	r7, r2
	uint16_t longest = 0U;
 800342a:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 800342c:	aa05      	add	r2, sp, #20
 800342e:	4630      	mov	r0, r6
 8003430:	f101 0801 	add.w	r8, r1, #1
 8003434:	f7ff fe44 	bl	80030c0 <z_shell_cmd_get>
 8003438:	b9b0      	cbnz	r0, 8003468 <z_shell_help_subcmd_print+0x4c>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
 800343a:	b195      	cbz	r5, 8003462 <z_shell_help_subcmd_print+0x46>
		return;
	}

	if (description != NULL) {
 800343c:	b127      	cbz	r7, 8003448 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(sh, SHELL_NORMAL, description);
 800343e:	463a      	mov	r2, r7
 8003440:	2108      	movs	r1, #8
 8003442:	4620      	mov	r0, r4
 8003444:	f010 ffeb 	bl	801441e <z_shell_fprintf>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 8003448:	2100      	movs	r1, #0
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 800344a:	4f22      	ldr	r7, [pc, #136]	; (80034d4 <z_shell_help_subcmd_print+0xb8>)
		z_shell_fprintf(sh, SHELL_NORMAL, "%s%-*s", tabulator,
 800344c:	f8df a088 	ldr.w	sl, [pc, #136]	; 80034d8 <z_shell_help_subcmd_print+0xbc>
		z_shell_fprintf(sh, SHELL_NORMAL, "%s:", tabulator);
 8003450:	f8df b088 	ldr.w	fp, [pc, #136]	; 80034dc <z_shell_help_subcmd_print+0xc0>
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 8003454:	1c4b      	adds	r3, r1, #1
 8003456:	aa05      	add	r2, sp, #20
 8003458:	4630      	mov	r0, r6
 800345a:	9302      	str	r3, [sp, #8]
 800345c:	f7ff fe30 	bl	80030c0 <z_shell_cmd_get>
 8003460:	b960      	cbnz	r0, 800347c <z_shell_help_subcmd_print+0x60>
		help_item_print(sh, entry->syntax, longest, entry->help);
	}
}
 8003462:	b00b      	add	sp, #44	; 0x2c
 8003464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
 8003468:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
 800346a:	b110      	cbz	r0, 8003472 <z_shell_help_subcmd_print+0x56>
 800346c:	f011 fbb6 	bl	8014bdc <strlen>
 8003470:	b280      	uxth	r0, r0
 8003472:	4285      	cmp	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 8003474:	4641      	mov	r1, r8
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
 8003476:	bf38      	it	cc
 8003478:	4605      	movcc	r5, r0
 800347a:	e7d7      	b.n	800342c <z_shell_help_subcmd_print+0x10>
		help_item_print(sh, entry->syntax, longest, entry->help);
 800347c:	6803      	ldr	r3, [r0, #0]
 800347e:	f8d0 9004 	ldr.w	r9, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8003482:	4638      	mov	r0, r7
		help_item_print(sh, entry->syntax, longest, entry->help);
 8003484:	9303      	str	r3, [sp, #12]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 8003486:	f011 fba9 	bl	8014bdc <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
 800348a:	9b03      	ldr	r3, [sp, #12]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 800348c:	4680      	mov	r8, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
 800348e:	b17b      	cbz	r3, 80034b0 <z_shell_help_subcmd_print+0x94>
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	b16a      	cbz	r2, 80034b0 <z_shell_help_subcmd_print+0x94>
		z_shell_fprintf(sh, SHELL_NORMAL, "%s%-*s", tabulator,
 8003494:	4652      	mov	r2, sl
 8003496:	2108      	movs	r1, #8
 8003498:	4620      	mov	r0, r4
 800349a:	e9cd 5300 	strd	r5, r3, [sp]
 800349e:	463b      	mov	r3, r7
 80034a0:	f010 ffbd 	bl	801441e <z_shell_fprintf>
	if (item_help == NULL) {
 80034a4:	f1b9 0f00 	cmp.w	r9, #0
 80034a8:	d104      	bne.n	80034b4 <z_shell_help_subcmd_print+0x98>
		z_cursor_next_line_move(sh);
 80034aa:	6960      	ldr	r0, [r4, #20]
 80034ac:	f7ff ffb0 	bl	8003410 <z_cursor_next_line_move.isra.0>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
 80034b0:	9902      	ldr	r1, [sp, #8]
 80034b2:	e7cf      	b.n	8003454 <z_shell_help_subcmd_print+0x38>
		z_shell_fprintf(sh, SHELL_NORMAL, "%s:", tabulator);
 80034b4:	465a      	mov	r2, fp
 80034b6:	4620      	mov	r0, r4
 80034b8:	463b      	mov	r3, r7
 80034ba:	2108      	movs	r1, #8
 80034bc:	f010 ffaf 	bl	801441e <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 80034c0:	1c6a      	adds	r2, r5, #1
	formatted_text_print(sh, item_help, offset, false);
 80034c2:	4649      	mov	r1, r9
 80034c4:	4620      	mov	r0, r4
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
 80034c6:	eb02 0248 	add.w	r2, r2, r8, lsl #1
	formatted_text_print(sh, item_help, offset, false);
 80034ca:	b292      	uxth	r2, r2
 80034cc:	f011 f822 	bl	8014514 <formatted_text_print.constprop.0>
 80034d0:	e7ee      	b.n	80034b0 <z_shell_help_subcmd_print+0x94>
 80034d2:	bf00      	nop
 80034d4:	0801e4cf 	.word	0x0801e4cf
 80034d8:	0801e4b6 	.word	0x0801e4b6
 80034dc:	0801e4bd 	.word	0x0801e4bd

080034e0 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *sh,
			    const struct shell_static_entry *cmd)
{
 80034e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034e2:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 80034e4:	6808      	ldr	r0, [r1, #0]
{
 80034e6:	460d      	mov	r5, r1
 80034e8:	b1b8      	cbz	r0, 800351a <z_shell_help_cmd_print+0x3a>
 80034ea:	f011 fb77 	bl	8014bdc <strlen>
 80034ee:	b284      	uxth	r4, r0
 80034f0:	4f0b      	ldr	r7, [pc, #44]	; (8003520 <z_shell_help_cmd_print+0x40>)
 80034f2:	4638      	mov	r0, r7
 80034f4:	f011 fb72 	bl	8014bdc <strlen>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 80034f8:	4404      	add	r4, r0

	z_shell_fprintf(sh, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
 80034fa:	682b      	ldr	r3, [r5, #0]
 80034fc:	4630      	mov	r0, r6
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
 80034fe:	b2a4      	uxth	r4, r4
	z_shell_fprintf(sh, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
 8003500:	4a08      	ldr	r2, [pc, #32]	; (8003524 <z_shell_help_cmd_print+0x44>)
 8003502:	2108      	movs	r1, #8
 8003504:	9700      	str	r7, [sp, #0]
 8003506:	f010 ff8a 	bl	801441e <z_shell_fprintf>

	formatted_text_print(sh, cmd->help, field_width, false);
 800350a:	4622      	mov	r2, r4
 800350c:	6869      	ldr	r1, [r5, #4]
 800350e:	4630      	mov	r0, r6
}
 8003510:	b003      	add	sp, #12
 8003512:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(sh, cmd->help, field_width, false);
 8003516:	f010 bffd 	b.w	8014514 <formatted_text_print.constprop.0>
 800351a:	4604      	mov	r4, r0
 800351c:	e7e8      	b.n	80034f0 <z_shell_help_cmd_print+0x10>
 800351e:	bf00      	nop
 8003520:	0801e4cb 	.word	0x0801e4cb
 8003524:	0801e2b5 	.word	0x0801e2b5

08003528 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
 8003528:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
 800352a:	4907      	ldr	r1, [pc, #28]	; (8003548 <z_shell_help_request+0x20>)
{
 800352c:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
 800352e:	f011 fb5c 	bl	8014bea <strcmp>
 8003532:	b138      	cbz	r0, 8003544 <z_shell_help_request+0x1c>
 8003534:	4905      	ldr	r1, [pc, #20]	; (800354c <z_shell_help_request+0x24>)
 8003536:	4620      	mov	r0, r4
 8003538:	f011 fb57 	bl	8014bea <strcmp>
 800353c:	fab0 f080 	clz	r0, r0
 8003540:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
 8003542:	bd10      	pop	{r4, pc}
		return true;
 8003544:	2001      	movs	r0, #1
 8003546:	e7fc      	b.n	8003542 <z_shell_help_request+0x1a>
 8003548:	0801e4c1 	.word	0x0801e4c1
 800354c:	0801e4c4 	.word	0x0801e4c4

08003550 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *sh,
			      size_t argc, char **argv)
{
 8003550:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8003552:	6883      	ldr	r3, [r0, #8]
 8003554:	4604      	mov	r4, r0
 8003556:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SETCOL_80);
 800355a:	069b      	lsls	r3, r3, #26
 800355c:	d503      	bpl.n	8003566 <cmd_resize_default+0x16>
 800355e:	4906      	ldr	r1, [pc, #24]	; (8003578 <cmd_resize_default+0x28>)
 8003560:	6940      	ldr	r0, [r0, #20]
 8003562:	f011 f84e 	bl	8014602 <z_shell_raw_fprintf>
	sh->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
 8003566:	68a3      	ldr	r3, [r4, #8]
 8003568:	2250      	movs	r2, #80	; 0x50
	sh->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;

	return 0;
}
 800356a:	2000      	movs	r0, #0
	sh->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a
	sh->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
 800356e:	2218      	movs	r2, #24
 8003570:	68a3      	ldr	r3, [r4, #8]
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8003574:	bd10      	pop	{r4, pc}
 8003576:	bf00      	nop
 8003578:	0801cb0e 	.word	0x0801cb0e

0800357c <cmd_shell_stats_show>:
{
 800357c:	b508      	push	{r3, lr}
	shell_print(sh, "Lost logs: %lu", sh->stats->log_lost_cnt);
 800357e:	6983      	ldr	r3, [r0, #24]
 8003580:	2108      	movs	r1, #8
 8003582:	4a03      	ldr	r2, [pc, #12]	; (8003590 <cmd_shell_stats_show+0x14>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f010 fb39 	bl	8013bfc <shell_fprintf>
}
 800358a:	2000      	movs	r0, #0
 800358c:	bd08      	pop	{r3, pc}
 800358e:	bf00      	nop
 8003590:	0801e4d2 	.word	0x0801e4d2

08003594 <cmd_backends>:
{
 8003594:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	shell_print(sh, "Active shell backends:");
 8003598:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <cmd_backends+0x40>)
 800359a:	2108      	movs	r1, #8
{
 800359c:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(shell, obj) {
 800359e:	4c0e      	ldr	r4, [pc, #56]	; (80035d8 <cmd_backends+0x44>)
	shell_print(sh, "Active shell backends:");
 80035a0:	f010 fb2c 	bl	8013bfc <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
 80035a4:	4e0d      	ldr	r6, [pc, #52]	; (80035dc <cmd_backends+0x48>)
 80035a6:	2300      	movs	r3, #0
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
 80035a8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80035e0 <cmd_backends+0x4c>
	STRUCT_SECTION_FOREACH(shell, obj) {
 80035ac:	42b4      	cmp	r4, r6
 80035ae:	f103 0701 	add.w	r7, r3, #1
 80035b2:	d303      	bcc.n	80035bc <cmd_backends+0x28>
}
 80035b4:	2000      	movs	r0, #0
 80035b6:	b002      	add	sp, #8
 80035b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
 80035bc:	68a2      	ldr	r2, [r4, #8]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2108      	movs	r1, #8
 80035c2:	4628      	mov	r0, r5
 80035c4:	6812      	ldr	r2, [r2, #0]
	STRUCT_SECTION_FOREACH(shell, obj) {
 80035c6:	342c      	adds	r4, #44	; 0x2c
		shell_print(sh, "  %2d. :%s", cnt++, obj->ctx->prompt);
 80035c8:	9200      	str	r2, [sp, #0]
 80035ca:	4642      	mov	r2, r8
 80035cc:	f010 fb16 	bl	8013bfc <shell_fprintf>
	STRUCT_SECTION_FOREACH(shell, obj) {
 80035d0:	463b      	mov	r3, r7
 80035d2:	e7eb      	b.n	80035ac <cmd_backends+0x18>
 80035d4:	0801e4e2 	.word	0x0801e4e2
 80035d8:	0801ca44 	.word	0x0801ca44
 80035dc:	0801ca9c 	.word	0x0801ca9c
 80035e0:	0801e4fa 	.word	0x0801e4fa

080035e4 <cmd_prompt_off>:
	shell_prompt_change(sh, "");
 80035e4:	4902      	ldr	r1, [pc, #8]	; (80035f0 <cmd_prompt_off+0xc>)
{
 80035e6:	b508      	push	{r3, lr}
	shell_prompt_change(sh, "");
 80035e8:	f010 fb2e 	bl	8013c48 <shell_prompt_change>
}
 80035ec:	2000      	movs	r0, #0
 80035ee:	bd08      	pop	{r3, pc}
 80035f0:	0801ffee 	.word	0x0801ffee

080035f4 <cmd_history>:
{
 80035f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80035f6:	4604      	mov	r4, r0
 80035f8:	2500      	movs	r5, #0
			shell_print(sh, "[%3d] %s",
 80035fa:	4e0e      	ldr	r6, [pc, #56]	; (8003634 <cmd_history+0x40>)
				    sh->ctx->temp_buff, &len);
 80035fc:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(sh->history, true,
 80035fe:	f10d 030e 	add.w	r3, sp, #14
 8003602:	2101      	movs	r1, #1
 8003604:	68e0      	ldr	r0, [r4, #12]
 8003606:	f502 72a1 	add.w	r2, r2, #322	; 0x142
 800360a:	f011 f8aa 	bl	8014762 <z_shell_history_get>
		if (len) {
 800360e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8003612:	68a3      	ldr	r3, [r4, #8]
 8003614:	b150      	cbz	r0, 800362c <cmd_history+0x38>
			shell_print(sh, "[%3d] %s",
 8003616:	f503 73a1 	add.w	r3, r3, #322	; 0x142
 800361a:	4632      	mov	r2, r6
 800361c:	2108      	movs	r1, #8
 800361e:	4620      	mov	r0, r4
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	462b      	mov	r3, r5
 8003624:	f010 faea 	bl	8013bfc <shell_fprintf>
	while (1) {
 8003628:	3501      	adds	r5, #1
		z_shell_history_get(sh->history, true,
 800362a:	e7e7      	b.n	80035fc <cmd_history+0x8>
	sh->ctx->temp_buff[0] = '\0';
 800362c:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
 8003630:	b004      	add	sp, #16
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	0801e506 	.word	0x0801e506

08003638 <cmd_get_retval>:

	return 0;
}

static int cmd_get_retval(const struct shell *sh, size_t argc, char **argv)
{
 8003638:	b510      	push	{r4, lr}
 800363a:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(sh, "%d", shell_get_return_value(sh));
 800363c:	f010 fb14 	bl	8013c68 <shell_get_return_value>
 8003640:	4a03      	ldr	r2, [pc, #12]	; (8003650 <cmd_get_retval+0x18>)
 8003642:	4603      	mov	r3, r0
 8003644:	2108      	movs	r1, #8
 8003646:	4620      	mov	r0, r4
 8003648:	f010 fad8 	bl	8013bfc <shell_fprintf>
	return 0;
}
 800364c:	2000      	movs	r0, #0
 800364e:	bd10      	pop	{r4, pc}
 8003650:	0801f488 	.word	0x0801f488

08003654 <cmd_echo>:
	if (argc == 2) {
 8003654:	2902      	cmp	r1, #2
{
 8003656:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
 8003658:	d10d      	bne.n	8003676 <cmd_echo+0x22>
		shell_error(sh, "%s:%s%s", argv[0],
 800365a:	6853      	ldr	r3, [r2, #4]
 800365c:	2101      	movs	r1, #1
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <cmd_echo+0x40>)
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	6813      	ldr	r3, [r2, #0]
 8003666:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <cmd_echo+0x44>)
 8003668:	f010 fac8 	bl	8013bfc <shell_fprintf>
 800366c:	f06f 0015 	mvn.w	r0, #21
}
 8003670:	b003      	add	sp, #12
 8003672:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
 8003676:	6883      	ldr	r3, [r0, #8]
	shell_print(sh, "Echo status: %s",
 8003678:	2108      	movs	r1, #8
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <cmd_echo+0x48>)
 800367c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8003680:	f013 0f02 	tst.w	r3, #2
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <cmd_echo+0x4c>)
 8003686:	bf18      	it	ne
 8003688:	4613      	movne	r3, r2
 800368a:	4a06      	ldr	r2, [pc, #24]	; (80036a4 <cmd_echo+0x50>)
 800368c:	f010 fab6 	bl	8013bfc <shell_fprintf>
	return 0;
 8003690:	2000      	movs	r0, #0
 8003692:	e7ed      	b.n	8003670 <cmd_echo+0x1c>
 8003694:	0801e51d 	.word	0x0801e51d
 8003698:	0801e514 	.word	0x0801e514
 800369c:	0801de4b 	.word	0x0801de4b
 80036a0:	0801e510 	.word	0x0801e510
 80036a4:	0801e532 	.word	0x0801e532

080036a8 <cmd_clear>:
{
 80036a8:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
 80036aa:	6883      	ldr	r3, [r0, #8]
 80036ac:	4604      	mov	r4, r0
 80036ae:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CURSORHOME);
 80036b2:	069a      	lsls	r2, r3, #26
 80036b4:	d503      	bpl.n	80036be <cmd_clear+0x16>
 80036b6:	4907      	ldr	r1, [pc, #28]	; (80036d4 <cmd_clear+0x2c>)
 80036b8:	6940      	ldr	r0, [r0, #20]
 80036ba:	f010 ffa2 	bl	8014602 <z_shell_raw_fprintf>
 80036be:	68a3      	ldr	r3, [r4, #8]
 80036c0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEARSCREEN);
 80036c4:	069b      	lsls	r3, r3, #26
 80036c6:	d503      	bpl.n	80036d0 <cmd_clear+0x28>
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <cmd_clear+0x30>)
 80036ca:	6960      	ldr	r0, [r4, #20]
 80036cc:	f010 ff99 	bl	8014602 <z_shell_raw_fprintf>
}
 80036d0:	2000      	movs	r0, #0
 80036d2:	bd10      	pop	{r4, pc}
 80036d4:	0801cb15 	.word	0x0801cb15
 80036d8:	0801cb1a 	.word	0x0801cb1a

080036dc <cmd_resize>:
	if (argc != 1) {
 80036dc:	2901      	cmp	r1, #1
{
 80036de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e0:	4604      	mov	r4, r0
 80036e2:	b085      	sub	sp, #20
	if (argc != 1) {
 80036e4:	d00d      	beq.n	8003702 <cmd_resize+0x26>
		shell_error(sh, "%s:%s%s", argv[0],
 80036e6:	6853      	ldr	r3, [r2, #4]
		return -EINVAL;
 80036e8:	f06f 0515 	mvn.w	r5, #21
		shell_error(sh, "%s:%s%s", argv[0],
 80036ec:	2101      	movs	r1, #1
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	4b5c      	ldr	r3, [pc, #368]	; (8003864 <cmd_resize+0x188>)
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	6813      	ldr	r3, [r2, #0]
 80036f6:	4a5c      	ldr	r2, [pc, #368]	; (8003868 <cmd_resize+0x18c>)
 80036f8:	f010 fa80 	bl	8013bfc <shell_fprintf>
}
 80036fc:	4628      	mov	r0, r5
 80036fe:	b005      	add	sp, #20
 8003700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003702:	6883      	ldr	r3, [r0, #8]
 8003704:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
 8003708:	069a      	lsls	r2, r3, #26
 800370a:	d503      	bpl.n	8003714 <cmd_resize+0x38>
 800370c:	4957      	ldr	r1, [pc, #348]	; (800386c <cmd_resize+0x190>)
 800370e:	6940      	ldr	r0, [r0, #20]
 8003710:	f010 ff77 	bl	8014602 <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(sh, -SHELL_MAX_TERMINAL_SIZE);
 8003714:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
 8003718:	4620      	mov	r0, r4
 800371a:	f7ff fd1f 	bl	800315c <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(sh, SHELL_MAX_TERMINAL_SIZE);
 800371e:	21fa      	movs	r1, #250	; 0xfa
 8003720:	4620      	mov	r0, r4
	char c = 0;
 8003722:	2500      	movs	r5, #0
	z_shell_op_cursor_horiz_move(sh, SHELL_MAX_TERMINAL_SIZE);
 8003724:	f7ff fd30 	bl	8003188 <z_shell_op_cursor_horiz_move>
	memset(sh->ctx->temp_buff, 0, sizeof(sh->ctx->temp_buff));
 8003728:	68a0      	ldr	r0, [r4, #8]
 800372a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800372e:	4629      	mov	r1, r5
 8003730:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
 8003734:	f88d 500b 	strb.w	r5, [sp, #11]
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
 8003738:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	memset(sh->ctx->temp_buff, 0, sizeof(sh->ctx->temp_buff));
 800373c:	f011 faa6 	bl	8014c8c <memset>
	z_shell_raw_fprintf(sh->fprintf_ctx, cmd_get_terminal_size);
 8003740:	494b      	ldr	r1, [pc, #300]	; (8003870 <cmd_resize+0x194>)
 8003742:	6960      	ldr	r0, [r4, #20]
 8003744:	f010 ff5d 	bl	8014602 <z_shell_raw_fprintf>
 8003748:	6960      	ldr	r0, [r4, #20]
 800374a:	f010 faaf 	bl	8013cac <z_shell_fprintf_buffer_flush>
			(void)sh->iface->api->read(sh->iface, &c,
 800374e:	6860      	ldr	r0, [r4, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f10d 010b 	add.w	r1, sp, #11
 8003756:	6803      	ldr	r3, [r0, #0]
 8003758:	691f      	ldr	r7, [r3, #16]
 800375a:	ab03      	add	r3, sp, #12
 800375c:	47b8      	blx	r7
			if (cnt == 0) {
 800375e:	9b03      	ldr	r3, [sp, #12]
 8003760:	b953      	cbnz	r3, 8003778 <cmd_resize+0x9c>
	for (uint16_t i = 0; i < 1000; i++) {
 8003762:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
 8003764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003768:	f00f fb48 	bl	8012dfc <z_impl_k_busy_wait>
 800376c:	b2b6      	uxth	r6, r6
 800376e:	2e00      	cmp	r6, #0
 8003770:	d1ed      	bne.n	800374e <cmd_resize+0x72>
		ret_val = -ENOTSUP;
 8003772:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8003776:	e035      	b.n	80037e4 <cmd_resize+0x108>
			if ((c != SHELL_VT100_ASCII_ESC) &&
 8003778:	f89d 200b 	ldrb.w	r2, [sp, #11]
			    (sh->ctx->temp_buff[0] !=
 800377c:	68a3      	ldr	r3, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
 800377e:	2a1b      	cmp	r2, #27
 8003780:	d062      	beq.n	8003848 <cmd_resize+0x16c>
 8003782:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
 8003786:	291b      	cmp	r1, #27
 8003788:	d1e1      	bne.n	800374e <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
 800378a:	2a52      	cmp	r2, #82	; 0x52
 800378c:	d15c      	bne.n	8003848 <cmd_resize+0x16c>
				sh->ctx->temp_buff[buff_idx] = '\0';
 800378e:	441d      	add	r5, r3
 8003790:	2300      	movs	r3, #0
 8003792:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (sh->ctx->temp_buff[1] != '[') {
 8003796:	68a6      	ldr	r6, [r4, #8]
 8003798:	f896 2143 	ldrb.w	r2, [r6, #323]	; 0x143
 800379c:	2a5b      	cmp	r2, #91	; 0x5b
 800379e:	d13a      	bne.n	8003816 <cmd_resize+0x13a>
 80037a0:	f506 75a2 	add.w	r5, r6, #324	; 0x144
				buff_idx = 2U;
 80037a4:	2002      	movs	r0, #2
				while (sh->ctx->temp_buff[buff_idx] != ';') {
 80037a6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80037aa:	4601      	mov	r1, r0
					(sh->ctx->temp_buff[buff_idx++] -
 80037ac:	3001      	adds	r0, #1
				while (sh->ctx->temp_buff[buff_idx] != ';') {
 80037ae:	2a3b      	cmp	r2, #59	; 0x3b
					(sh->ctx->temp_buff[buff_idx++] -
 80037b0:	b280      	uxth	r0, r0
				while (sh->ctx->temp_buff[buff_idx] != ';') {
 80037b2:	d133      	bne.n	800381c <cmd_resize+0x140>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 80037b4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80037b8:	d0db      	beq.n	8003772 <cmd_resize+0x96>
 80037ba:	f201 1143 	addw	r1, r1, #323	; 0x143
	*x = 0U;
 80037be:	2200      	movs	r2, #0
 80037c0:	fa16 f181 	uxtah	r1, r6, r1
				while (sh->ctx->temp_buff[buff_idx]
 80037c4:	f811 5b01 	ldrb.w	r5, [r1], #1
 80037c8:	2d00      	cmp	r5, #0
 80037ca:	d132      	bne.n	8003832 <cmd_resize+0x156>
		sh->ctx->vt100_ctx.cons.terminal_wid = x;
 80037cc:	2afa      	cmp	r2, #250	; 0xfa
				sh->ctx->temp_buff[0] = 0;
 80037ce:	f886 5142 	strb.w	r5, [r6, #322]	; 0x142
		sh->ctx->vt100_ctx.cons.terminal_wid = x;
 80037d2:	68a1      	ldr	r1, [r4, #8]
 80037d4:	bf28      	it	cs
 80037d6:	22fa      	movcs	r2, #250	; 0xfa
		sh->ctx->vt100_ctx.cons.terminal_hei = y;
 80037d8:	2bfa      	cmp	r3, #250	; 0xfa
		sh->ctx->vt100_ctx.cons.terminal_wid = x;
 80037da:	854a      	strh	r2, [r1, #42]	; 0x2a
		sh->ctx->vt100_ctx.cons.terminal_hei = y;
 80037dc:	bf28      	it	cs
 80037de:	23fa      	movcs	r3, #250	; 0xfa
 80037e0:	68a2      	ldr	r2, [r4, #8]
 80037e2:	8513      	strh	r3, [r2, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
 80037e4:	68a3      	ldr	r3, [r4, #8]
 80037e6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
 80037ea:	069b      	lsls	r3, r3, #26
 80037ec:	d503      	bpl.n	80037f6 <cmd_resize+0x11a>
 80037ee:	4921      	ldr	r1, [pc, #132]	; (8003874 <cmd_resize+0x198>)
 80037f0:	6960      	ldr	r0, [r4, #20]
 80037f2:	f010 ff06 	bl	8014602 <z_shell_raw_fprintf>
	if (err != 0) {
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	d080      	beq.n	80036fc <cmd_resize+0x20>
		sh->ctx->vt100_ctx.cons.terminal_wid =
 80037fa:	68a3      	ldr	r3, [r4, #8]
 80037fc:	2250      	movs	r2, #80	; 0x50
		shell_warn(sh, "No response from the terminal, assumed 80x24"
 80037fe:	2103      	movs	r1, #3
 8003800:	4620      	mov	r0, r4
		sh->ctx->vt100_ctx.cons.terminal_wid =
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a
		sh->ctx->vt100_ctx.cons.terminal_hei =
 8003804:	2218      	movs	r2, #24
 8003806:	68a3      	ldr	r3, [r4, #8]
		shell_warn(sh, "No response from the terminal, assumed 80x24"
 8003808:	f06f 0507 	mvn.w	r5, #7
		sh->ctx->vt100_ctx.cons.terminal_hei =
 800380c:	851a      	strh	r2, [r3, #40]	; 0x28
		shell_warn(sh, "No response from the terminal, assumed 80x24"
 800380e:	4a1a      	ldr	r2, [pc, #104]	; (8003878 <cmd_resize+0x19c>)
 8003810:	f010 f9f4 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 8003814:	e772      	b.n	80036fc <cmd_resize+0x20>
					sh->ctx->temp_buff[0] = 0;
 8003816:	f886 3142 	strb.w	r3, [r6, #322]	; 0x142
					return -EIO;
 800381a:	e7aa      	b.n	8003772 <cmd_resize+0x96>
					*y = *y * 10U +
 800381c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					if (buff_idx >=
 8003820:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
					*y = *y * 10U +
 8003824:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003828:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 800382c:	b29b      	uxth	r3, r3
					if (buff_idx >=
 800382e:	d1ba      	bne.n	80037a6 <cmd_resize+0xca>
 8003830:	e79f      	b.n	8003772 <cmd_resize+0x96>
					*x = *x * 10U +
 8003832:	eb02 0282 	add.w	r2, r2, r2, lsl #2
					(sh->ctx->temp_buff[buff_idx++] -
 8003836:	3001      	adds	r0, #1
					*x = *x * 10U +
 8003838:	eb05 0542 	add.w	r5, r5, r2, lsl #1
					(sh->ctx->temp_buff[buff_idx++] -
 800383c:	b280      	uxth	r0, r0
					*x = *x * 10U +
 800383e:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
 8003840:	28ff      	cmp	r0, #255	; 0xff
					*x = *x * 10U +
 8003842:	b2aa      	uxth	r2, r5
					if (buff_idx >=
 8003844:	d9be      	bls.n	80037c4 <cmd_resize+0xe8>
 8003846:	e794      	b.n	8003772 <cmd_resize+0x96>
			sh->ctx->temp_buff[buff_idx] = c;
 8003848:	442b      	add	r3, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 800384a:	3501      	adds	r5, #1
 800384c:	b2ad      	uxth	r5, r5
			sh->ctx->temp_buff[buff_idx] = c;
 800384e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
 8003852:	2d09      	cmp	r5, #9
 8003854:	f67f af7b 	bls.w	800374e <cmd_resize+0x72>
				sh->ctx->temp_buff[0] = 0;
 8003858:	68a3      	ldr	r3, [r4, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
				return -ENOMEM;
 8003860:	e787      	b.n	8003772 <cmd_resize+0x96>
 8003862:	bf00      	nop
 8003864:	0801e51d 	.word	0x0801e51d
 8003868:	0801e514 	.word	0x0801e514
 800386c:	0801cb20 	.word	0x0801cb20
 8003870:	0801ea0d 	.word	0x0801ea0d
 8003874:	0801cb24 	.word	0x0801cb24
 8003878:	0801e543 	.word	0x0801e543

0800387c <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *sh,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
 800387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003880:	4607      	mov	r7, r0
 8003882:	b089      	sub	sp, #36	; 0x24
 8003884:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
 8003886:	4689      	mov	r9, r1
 8003888:	b921      	cbnz	r1, 8003894 <z_shell_wildcard_process+0x18>
		return ret_val;
 800388a:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(sh, cmd, pattern);

	return ret_val;
}
 800388c:	4620      	mov	r0, r4
 800388e:	b009      	add	sp, #36	; 0x24
 8003890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
 8003894:	4610      	mov	r0, r2
 8003896:	f011 f809 	bl	80148ac <z_shell_has_wildcard>
 800389a:	2800      	cmp	r0, #0
 800389c:	d0f5      	beq.n	800388a <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
 800389e:	f04f 0800 	mov.w	r8, #0
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 80038a2:	2402      	movs	r4, #2
	size_t cmd_idx = 0;
 80038a4:	4641      	mov	r1, r8
 80038a6:	e024      	b.n	80038f2 <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
 80038a8:	465c      	mov	r4, fp
 80038aa:	e03c      	b.n	8003926 <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
 80038ac:	4629      	mov	r1, r5
 80038ae:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
 80038b2:	f011 f93d 	bl	8014b30 <strstr>
	if (!completion_addr) {
 80038b6:	4606      	mov	r6, r0
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d04c      	beq.n	8003956 <z_shell_wildcard_process+0xda>
 80038bc:	f011 f98e 	bl	8014bdc <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
 80038c0:	4631      	mov	r1, r6
 80038c2:	b282      	uxth	r2, r0
 80038c4:	1c60      	adds	r0, r4, #1
			cnt++;
 80038c6:	f108 0801 	add.w	r8, r8, #1
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
 80038ca:	3201      	adds	r2, #1
 80038cc:	4430      	add	r0, r6
 80038ce:	f011 f9ba 	bl	8014c46 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
 80038d2:	4622      	mov	r2, r4
 80038d4:	4659      	mov	r1, fp
 80038d6:	4630      	mov	r0, r6
 80038d8:	f011 f9cd 	bl	8014c76 <memcpy>
	completion_addr[cmd_len] = ' ';
 80038dc:	f04f 0320 	mov.w	r3, #32
 80038e0:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
 80038e2:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
 80038e6:	3001      	adds	r0, #1
 80038e8:	4404      	add	r4, r0
 80038ea:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			ret_val = command_add(sh->ctx->temp_buff,
 80038ee:	2400      	movs	r4, #0
 80038f0:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
 80038f2:	1c4b      	adds	r3, r1, #1
 80038f4:	aa03      	add	r2, sp, #12
 80038f6:	4648      	mov	r0, r9
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	f7ff fbe1 	bl	80030c0 <z_shell_cmd_get>
 80038fe:	4606      	mov	r6, r0
 8003900:	b1e8      	cbz	r0, 800393e <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
 8003902:	2200      	movs	r2, #0
 8003904:	6831      	ldr	r1, [r6, #0]
 8003906:	4628      	mov	r0, r5
 8003908:	f011 fb20 	bl	8014f4c <fnmatch>
 800390c:	2800      	cmp	r0, #0
 800390e:	d1ef      	bne.n	80038f0 <z_shell_wildcard_process+0x74>
			ret_val = command_add(sh->ctx->temp_buff,
 8003910:	f8d6 b000 	ldr.w	fp, [r6]
 8003914:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8003918:	f1bb 0f00 	cmp.w	fp, #0
 800391c:	d0c4      	beq.n	80038a8 <z_shell_wildcard_process+0x2c>
 800391e:	4658      	mov	r0, fp
 8003920:	f011 f95c 	bl	8014bdc <strlen>
 8003924:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
 8003926:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
 800392a:	4422      	add	r2, r4
 800392c:	2aff      	cmp	r2, #255	; 0xff
 800392e:	ddbd      	ble.n	80038ac <z_shell_wildcard_process+0x30>
			ret_val = command_add(sh->ctx->temp_buff,
 8003930:	2401      	movs	r4, #1
				z_shell_fprintf(sh, SHELL_WARNING,
 8003932:	462b      	mov	r3, r5
 8003934:	4a09      	ldr	r2, [pc, #36]	; (800395c <z_shell_wildcard_process+0xe0>)
 8003936:	2103      	movs	r1, #3
 8003938:	4638      	mov	r0, r7
 800393a:	f010 fd70 	bl	801441e <z_shell_fprintf>
	if (cnt > 0) {
 800393e:	f1b8 0f00 	cmp.w	r8, #0
 8003942:	d0a3      	beq.n	800388c <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(sh->ctx->temp_buff,
 8003944:	68b8      	ldr	r0, [r7, #8]
 8003946:	462a      	mov	r2, r5
 8003948:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800394c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8003950:	f010 fadd 	bl	8013f0e <z_shell_pattern_remove>
	return ret_val;
 8003954:	e79a      	b.n	800388c <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
 8003956:	2402      	movs	r4, #2
 8003958:	e7f1      	b.n	800393e <z_shell_wildcard_process+0xc2>
 800395a:	bf00      	nop
 800395c:	0801ea12 	.word	0x0801ea12

08003960 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003960:	4901      	ldr	r1, [pc, #4]	; (8003968 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8003962:	2210      	movs	r2, #16
	str	r2, [r1]
 8003964:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8003966:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8003968:	e000ed10 	.word	0xe000ed10

0800396c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 800396c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800396e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003970:	f380 8811 	msr	BASEPRI, r0
	isb
 8003974:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800397e:	b662      	cpsie	i
	isb
 8003980:	f3bf 8f6f 	isb	sy

	bx	lr
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop

08003988 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003988:	b203      	sxth	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800398a:	2b00      	cmp	r3, #0
 800398c:	db08      	blt.n	80039a0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800398e:	2201      	movs	r2, #1
 8003990:	f000 001f 	and.w	r0, r0, #31
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	fa02 f000 	lsl.w	r0, r2, r0
 800399a:	4a02      	ldr	r2, [pc, #8]	; (80039a4 <arch_irq_enable+0x1c>)
 800399c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100

080039a8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 80039a8:	b203      	sxth	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	db0d      	blt.n	80039ca <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ae:	2201      	movs	r2, #1
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	f000 001f 	and.w	r0, r0, #31
 80039b6:	3320      	adds	r3, #32
 80039b8:	fa02 f000 	lsl.w	r0, r2, r0
 80039bc:	4a03      	ldr	r2, [pc, #12]	; (80039cc <arch_irq_disable+0x24>)
 80039be:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80039c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039c6:	f3bf 8f6f 	isb	sy
}
 80039ca:	4770      	bx	lr
 80039cc:	e000e100 	.word	0xe000e100

080039d0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 80039d0:	0942      	lsrs	r2, r0, #5
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <arch_irq_is_enabled+0x18>)
 80039d4:	f000 001f 	and.w	r0, r0, #31
 80039d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039dc:	2301      	movs	r3, #1
 80039de:	fa03 f000 	lsl.w	r0, r3, r0
}
 80039e2:	4010      	ands	r0, r2
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000e100 	.word	0xe000e100

080039ec <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80039ec:	b203      	sxth	r3, r0
		prio += _IRQ_PRIO_OFFSET;
 80039ee:	3101      	adds	r1, #1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80039f0:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f2:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80039f6:	b2c9      	uxtb	r1, r1
  if ((int32_t)(IRQn) >= 0)
 80039f8:	db06      	blt.n	8003a08 <z_arm_irq_priority_set+0x1c>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80039fe:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8003a02:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8003a06:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a08:	f000 000f 	and.w	r0, r0, #15
 8003a0c:	4b01      	ldr	r3, [pc, #4]	; (8003a14 <z_arm_irq_priority_set+0x28>)
 8003a0e:	5419      	strb	r1, [r3, r0]
}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000ed14 	.word	0xe000ed14

08003a18 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003a18:	bf30      	wfi
    b z_SysNmiOnReset
 8003a1a:	f7ff bffd 	b.w	8003a18 <z_SysNmiOnReset>
 8003a1e:	bf00      	nop

08003a20 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003a20:	4a0f      	ldr	r2, [pc, #60]	; (8003a60 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8003a22:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003a24:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003a28:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <z_arm_prep_c+0x44>)
 8003a2a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a30:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8003a34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a38:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003a40:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8003a44:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8003a48:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8003a4c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8003a50:	f00d feae 	bl	80117b0 <z_bss_zero>
	z_data_copy();
 8003a54:	f00f f84c 	bl	8012af0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8003a58:	f000 fa14 	bl	8003e84 <z_arm_interrupt_init>
	z_cstart();
 8003a5c:	f00d ff08 	bl	8011870 <z_cstart>
 8003a60:	08000000 	.word	0x08000000
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8003a68:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8003a6a:	490b      	ldr	r1, [pc, #44]	; (8003a98 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8003a6c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8003a6e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 8003a70:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
 8003a74:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003a78:	4908      	ldr	r1, [pc, #32]	; (8003a9c <arch_swap+0x34>)
 8003a7a:	684b      	ldr	r3, [r1, #4]
 8003a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a80:	604b      	str	r3, [r1, #4]
 8003a82:	2300      	movs	r3, #0
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8003a8c:	6893      	ldr	r3, [r2, #8]
}
 8003a8e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8003a92:	4770      	bx	lr
 8003a94:	24002fe8 	.word	0x24002fe8
 8003a98:	0801db2c 	.word	0x0801db2c
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003aa0:	4913      	ldr	r1, [pc, #76]	; (8003af0 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003aa2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003aa4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8003aa8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8003aaa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8003aae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003ab2:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8003ab4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8003ab8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8003abc:	4f0d      	ldr	r7, [pc, #52]	; (8003af4 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8003abe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003ac2:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
 8003ac4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8003ac6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8003ac8:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
 8003acc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8003ace:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8003ad2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8003ad6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8003ad8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8003ada:	f000 fa1d 	bl	8003f18 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8003ade:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8003ae2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8003ae6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8003aea:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8003aee:	4770      	bx	lr
    ldr r1, =_kernel
 8003af0:	24002fe8 	.word	0x24002fe8
    ldr v4, =_SCS_ICSR
 8003af4:	e000ed04 	.word	0xe000ed04

08003af8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8003af8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003afc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8003afe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8003b02:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8003b06:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8003b08:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003b0c:	2902      	cmp	r1, #2
    beq _oops
 8003b0e:	d0ff      	beq.n	8003b10 <_oops>

08003b10 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8003b10:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8003b12:	f010 ff11 	bl	8014938 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8003b16:	bd01      	pop	{r0, pc}

08003b18 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8003b18:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8003b1c:	3a20      	subs	r2, #32
	iframe->a2 = (uint32_t)p1;
 8003b1e:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 8003b20:	4908      	ldr	r1, [pc, #32]	; (8003b44 <arch_new_thread+0x2c>)
	iframe->a2 = (uint32_t)p1;
 8003b22:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
 8003b24:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 8003b26:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 8003b2a:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
 8003b2c:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 8003b2e:	6191      	str	r1, [r2, #24]
	iframe->a4 = (uint32_t)p3;
 8003b30:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8003b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b36:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8003b38:	2300      	movs	r3, #0
	thread->callee_saved.psp = (uint32_t)iframe;
 8003b3a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8003b3c:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	080130b3 	.word	0x080130b3

08003b48 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003b48:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <z_check_thread_stack_fail+0x2c>)
{
 8003b4a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8003b4c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8003b4e:	b178      	cbz	r0, 8003b70 <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8003b50:	f113 0f16 	cmn.w	r3, #22
 8003b54:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 8003b58:	d005      	beq.n	8003b66 <z_check_thread_stack_fail+0x1e>
 8003b5a:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d805      	bhi.n	8003b6e <z_check_thread_stack_fail+0x26>
 8003b62:	4283      	cmp	r3, r0
 8003b64:	d203      	bcs.n	8003b6e <z_check_thread_stack_fail+0x26>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003b66:	4281      	cmp	r1, r0
 8003b68:	bf28      	it	cs
 8003b6a:	2000      	movcs	r0, #0
 8003b6c:	4770      	bx	lr
 8003b6e:	2000      	movs	r0, #0
}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	24002fe8 	.word	0x24002fe8

08003b78 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003b78:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <arch_switch_to_main_thread+0x28>)
{
 8003b7c:	460d      	mov	r5, r1
 8003b7e:	4614      	mov	r4, r2
	_current = main_thread;
 8003b80:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003b82:	f000 f9c9 	bl	8003f18 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003b86:	4620      	mov	r0, r4
 8003b88:	f385 8809 	msr	PSP, r5
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	b663      	cpsie	if
 8003b90:	f381 8811 	msr	BASEPRI, r1
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f00f fa89 	bl	80130b2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003ba0:	24002fe8 	.word	0x24002fe8

08003ba4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003ba4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8003ba6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003baa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003bae:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8003bb2:	4904      	ldr	r1, [pc, #16]	; (8003bc4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003bb4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8003bb6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8003bb8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8003bba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003bbe:	4902      	ldr	r1, [pc, #8]	; (8003bc8 <_isr_wrapper+0x24>)
	bx r1
 8003bc0:	4708      	bx	r1
 8003bc2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003bc4:	0801c3e4 	.word	0x0801c3e4
	ldr r1, =z_arm_int_exit
 8003bc8:	08003bcd 	.word	0x08003bcd

08003bcc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8003bce:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8003bd0:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
 8003bd2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8003bd4:	d003      	beq.n	8003bde <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8003bd6:	4903      	ldr	r1, [pc, #12]	; (8003be4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8003bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8003bdc:	600a      	str	r2, [r1, #0]

08003bde <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8003bde:	4770      	bx	lr
	ldr r3, =_kernel
 8003be0:	24002fe8 	.word	0x24002fe8
	ldr r1, =_SCS_ICSR
 8003be4:	e000ed04 	.word	0xe000ed04

08003be8 <mem_manage_fault>:
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003be8:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <mem_manage_fault+0x9c>)
{
 8003bea:	b570      	push	{r4, r5, r6, lr}
 8003bec:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 8003bf0:	4606      	mov	r6, r0
		reason = K_ERR_ARM_MEM_STACKING;
 8003bf2:	f012 0f10 	tst.w	r2, #16
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8003bf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_STACKING;
 8003bf8:	bf14      	ite	ne
 8003bfa:	2411      	movne	r4, #17
 8003bfc:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
 8003bfe:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
 8003c04:	bf18      	it	ne
 8003c06:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003c08:	0792      	lsls	r2, r2, #30
 8003c0a:	d50a      	bpl.n	8003c22 <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 8003c0c:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8003c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c10:	0614      	lsls	r4, r2, #24
 8003c12:	d534      	bpl.n	8003c7e <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 8003c14:	b119      	cbz	r1, 8003c1e <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8003c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c1c:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
 8003c1e:	2413      	movs	r4, #19
 8003c20:	e001      	b.n	8003c26 <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
 8003c22:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <mem_manage_fault+0x9c>)
 8003c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8003c2a:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8003c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
 8003c30:	bf18      	it	ne
 8003c32:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 8003c34:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
 8003c3a:	bf18      	it	ne
 8003c3c:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003c3e:	06d2      	lsls	r2, r2, #27
 8003c40:	d402      	bmi.n	8003c48 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003c44:	079b      	lsls	r3, r3, #30
 8003c46:	d50a      	bpl.n	8003c5e <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <mem_manage_fault+0x9c>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	0519      	lsls	r1, r3, #20
 8003c4e:	d506      	bpl.n	8003c5e <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8003c50:	4631      	mov	r1, r6
 8003c52:	f7ff ff79 	bl	8003b48 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
 8003c56:	b110      	cbz	r0, 8003c5e <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003c58:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
 8003c5c:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <mem_manage_fault+0x9c>)
 8003c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c62:	0692      	lsls	r2, r2, #26
 8003c64:	d503      	bpl.n	8003c6e <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8003c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8003c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
 8003c70:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8003c72:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8003c78:	2300      	movs	r3, #0
 8003c7a:	702b      	strb	r3, [r5, #0]
}
 8003c7c:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 8003c7e:	f06f 0015 	mvn.w	r0, #21
 8003c82:	e7cc      	b.n	8003c1e <mem_manage_fault+0x36>
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <usage_fault.constprop.0+0x50>)
 8003c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_DIV_0;
 8003c8c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_DIV_0;
 8003c92:	bf14      	ite	ne
 8003c94:	201e      	movne	r0, #30
 8003c96:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8003c98:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
 8003c9e:	bf18      	it	ne
 8003ca0:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8003ca2:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8003ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
 8003ca8:	bf18      	it	ne
 8003caa:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8003cac:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8003cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
 8003cb2:	bf18      	it	ne
 8003cb4:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8003cb6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8003cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
 8003cbc:	bf18      	it	ne
 8003cbe:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
 8003cc0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc6:	ea6f 4202 	mvn.w	r2, r2, lsl #16

	return reason;
}
 8003cca:	bf18      	it	ne
 8003ccc:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003cce:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003cdc:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <bus_fault.constprop.0+0x64>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8003cde:	4602      	mov	r2, r0
 8003ce0:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003ce2:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8003ce4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_STACKING;
 8003ce6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8003cea:	bf14      	ite	ne
 8003cec:	2017      	movne	r0, #23
 8003cee:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8003cf0:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8003cf4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
 8003cf6:	bf18      	it	ne
 8003cf8:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8003cfa:	05a4      	lsls	r4, r4, #22
 8003cfc:	d509      	bpl.n	8003d12 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
 8003cfe:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8003d00:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003d02:	0400      	lsls	r0, r0, #16
 8003d04:	d504      	bpl.n	8003d10 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
 8003d06:	b11a      	cbz	r2, 8003d10 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8003d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
 8003d10:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <bus_fault.constprop.0+0x64>)
 8003d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8003d16:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8003d1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
 8003d1c:	bf18      	it	ne
 8003d1e:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8003d20:	05d2      	lsls	r2, r2, #23
 8003d22:	d40b      	bmi.n	8003d3c <bus_fault.constprop.0+0x60>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8003d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
 8003d26:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8003d2a:	bf18      	it	ne
 8003d2c:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d30:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8003d36:	2300      	movs	r3, #0
 8003d38:	700b      	strb	r3, [r1, #0]
}
 8003d3a:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
 8003d3c:	201b      	movs	r0, #27
 8003d3e:	e7f6      	b.n	8003d2e <bus_fault.constprop.0+0x52>
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <z_arm_fault>:
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003d44:	4b45      	ldr	r3, [pc, #276]	; (8003e5c <z_arm_fault+0x118>)
{
 8003d46:	b570      	push	{r4, r5, r6, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003d48:	685b      	ldr	r3, [r3, #4]
{
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	460d      	mov	r5, r1
 8003d4e:	2600      	movs	r6, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d54:	f386 8811 	msr	BASEPRI, r6
 8003d58:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8003d5c:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 8003d60:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8003d64:	d111      	bne.n	8003d8a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8003d66:	f002 010c 	and.w	r1, r2, #12
 8003d6a:	2908      	cmp	r1, #8
 8003d6c:	d00d      	beq.n	8003d8a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8003d6e:	0714      	lsls	r4, r2, #28
 8003d70:	d401      	bmi.n	8003d76 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8003d72:	4605      	mov	r5, r0
			*nested_exc = true;
 8003d74:	2601      	movs	r6, #1
	*recoverable = false;
 8003d76:	2200      	movs	r2, #0
	switch (fault) {
 8003d78:	3b03      	subs	r3, #3
	*recoverable = false;
 8003d7a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d809      	bhi.n	8003d96 <z_arm_fault+0x52>
 8003d82:	e8df f003 	tbb	[pc, r3]
 8003d86:	5d04      	.short	0x5d04
 8003d88:	5a61      	.short	0x5a61
		return NULL;
 8003d8a:	4635      	mov	r5, r6
 8003d8c:	e7f3      	b.n	8003d76 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8003d8e:	4b33      	ldr	r3, [pc, #204]	; (8003e5c <z_arm_fault+0x118>)
 8003d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d92:	0791      	lsls	r1, r2, #30
 8003d94:	d501      	bpl.n	8003d9a <z_arm_fault+0x56>
	switch (fault) {
 8003d96:	2400      	movs	r4, #0
 8003d98:	e028      	b.n	8003dec <z_arm_fault+0xa8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	2a00      	cmp	r2, #0
 8003d9e:	dbfa      	blt.n	8003d96 <z_arm_fault+0x52>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8003da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da2:	0052      	lsls	r2, r2, #1
 8003da4:	d5f7      	bpl.n	8003d96 <z_arm_fault+0x52>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8003da6:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8003da8:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 8003daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dae:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003db0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003db4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8003db8:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 8003dba:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8003dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003dc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003dc8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8003dcc:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8003dd0:	4291      	cmp	r1, r2
 8003dd2:	d00a      	beq.n	8003dea <z_arm_fault+0xa6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 8003dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	b302      	cbz	r2, 8003e1c <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
 8003dda:	f10d 0207 	add.w	r2, sp, #7
 8003dde:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8003de0:	4628      	mov	r0, r5
 8003de2:	f7ff ff01 	bl	8003be8 <mem_manage_fault>
		reason = usage_fault(esf);
 8003de6:	4604      	mov	r4, r0
		break;
 8003de8:	e000      	b.n	8003dec <z_arm_fault+0xa8>
			reason = esf->basic.r0;
 8003dea:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8003dec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003df0:	b993      	cbnz	r3, 8003e18 <z_arm_fault+0xd4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8003df2:	2220      	movs	r2, #32
 8003df4:	4629      	mov	r1, r5
 8003df6:	a802      	add	r0, sp, #8
 8003df8:	f010 ff3d 	bl	8014c76 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8003dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dfe:	b33e      	cbz	r6, 8003e50 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8003e00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e04:	b922      	cbnz	r2, 8003e10 <z_arm_fault+0xcc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8003e06:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8003e0a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8003e0e:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
 8003e10:	a902      	add	r1, sp, #8
 8003e12:	4620      	mov	r0, r4
 8003e14:	f010 fd8e 	bl	8014934 <z_arm_fatal_error>
}
 8003e18:	b00a      	add	sp, #40	; 0x28
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 8003e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e1e:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 8003e22:	d005      	beq.n	8003e30 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
 8003e24:	f10d 0107 	add.w	r1, sp, #7
 8003e28:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8003e2a:	f7ff ff57 	bl	8003cdc <bus_fault.constprop.0>
 8003e2e:	e7da      	b.n	8003de6 <z_arm_fault+0xa2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	0c1b      	lsrs	r3, r3, #16
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0ad      	beq.n	8003d96 <z_arm_fault+0x52>
		reason = usage_fault(esf);
 8003e3a:	f7ff ff25 	bl	8003c88 <usage_fault.constprop.0>
 8003e3e:	e7d2      	b.n	8003de6 <z_arm_fault+0xa2>
		reason = mem_manage_fault(esf, 0, recoverable);
 8003e40:	f10d 0207 	add.w	r2, sp, #7
 8003e44:	2100      	movs	r1, #0
 8003e46:	e7cb      	b.n	8003de0 <z_arm_fault+0x9c>
		reason = bus_fault(esf, 0, recoverable);
 8003e48:	f10d 0107 	add.w	r1, sp, #7
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	e7ec      	b.n	8003e2a <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8003e50:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	e7d9      	b.n	8003e0e <z_arm_fault+0xca>
 8003e5a:	bf00      	nop
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8003e60:	4a02      	ldr	r2, [pc, #8]	; (8003e6c <z_arm_fault_init+0xc>)
 8003e62:	6953      	ldr	r3, [r2, #20]
 8003e64:	f043 0310 	orr.w	r3, r3, #16
 8003e68:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 8003e6a:	4770      	bx	lr
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8003e70:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8003e74:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8003e78:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8003e7a:	4672      	mov	r2, lr
	bl z_arm_fault
 8003e7c:	f7ff ff62 	bl	8003d44 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8003e80:	bd01      	pop	{r0, pc}
 8003e82:	bf00      	nop

08003e84 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8003e84:	2300      	movs	r3, #0
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e86:	4804      	ldr	r0, [pc, #16]	; (8003e98 <z_arm_interrupt_init+0x14>)
 8003e88:	2110      	movs	r1, #16
 8003e8a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	2b96      	cmp	r3, #150	; 0x96
 8003e90:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8003e94:	d1f9      	bne.n	8003e8a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8003e96:	4770      	bx	lr
 8003e98:	e000e100 	.word	0xe000e100

08003e9c <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003e9c:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003e9e:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
 8003ea2:	480b      	ldr	r0, [pc, #44]	; (8003ed0 <__start+0x34>)
    ldr r1, =0xaa
 8003ea4:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8003ea8:	f44f 6204 	mov.w	r2, #2112	; 0x840
    bl z_early_memset
 8003eac:	f017 fbd5 	bl	801b65a <z_early_memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8003eb0:	4807      	ldr	r0, [pc, #28]	; (8003ed0 <__start+0x34>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8003eb2:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 8003eb6:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8003eb8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8003ebc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8003ec0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8003ec2:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8003ec4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8003ec8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8003ecc:	f7ff fda8 	bl	8003a20 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
 8003ed0:	24005740 	.word	0x24005740

08003ed4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8003ed4:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <z_impl_k_thread_abort+0x24>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4283      	cmp	r3, r0
 8003eda:	d10b      	bne.n	8003ef4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003edc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8003ee0:	b143      	cbz	r3, 8003ef4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <z_impl_k_thread_abort+0x28>)
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003eea:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8003eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 8003ef4:	f00e bd86 	b.w	8012a04 <z_thread_abort>
 8003ef8:	24002fe8 	.word	0x24002fe8
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8003f00:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <z_arm_configure_static_mpu_regions+0xc>)
 8003f02:	2102      	movs	r1, #2
 8003f04:	4a02      	ldr	r2, [pc, #8]	; (8003f10 <z_arm_configure_static_mpu_regions+0x10>)
 8003f06:	4803      	ldr	r0, [pc, #12]	; (8003f14 <z_arm_configure_static_mpu_regions+0x14>)
 8003f08:	f000 b870 	b.w	8003fec <arm_core_mpu_configure_static_mpu_regions>
 8003f0c:	24080000 	.word	0x24080000
 8003f10:	24000000 	.word	0x24000000
 8003f14:	0801cfe0 	.word	0x0801cfe0

08003f18 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8003f18:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8003f1c:	2140      	movs	r1, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 8003f1e:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
 8003f20:	3a40      	subs	r2, #64	; 0x40

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8003f22:	4618      	mov	r0, r3
	dynamic_regions[region_num].start = guard_start;
 8003f24:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8003f26:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <z_arm_configure_dynamic_mpu_regions+0x20>)
 8003f28:	e9c3 1201 	strd	r1, r2, [r3, #4]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	f000 b867 	b.w	8004000 <arm_core_mpu_configure_dynamic_mpu_regions>
 8003f32:	bf00      	nop
 8003f34:	240023b0 	.word	0x240023b0
 8003f38:	150b0000 	.word	0x150b0000

08003f3c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8003f3e:	2600      	movs	r6, #0
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8003f40:	4f1e      	ldr	r7, [pc, #120]	; (8003fbc <mpu_configure_regions+0x80>)
 8003f42:	428e      	cmp	r6, r1
 8003f44:	db01      	blt.n	8003f4a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8003f46:	4610      	mov	r0, r2
 8003f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 8003f4a:	6844      	ldr	r4, [r0, #4]
 8003f4c:	b39c      	cbz	r4, 8003fb6 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
 8003f4e:	b153      	cbz	r3, 8003f66 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8003f50:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8003f54:	ea14 0f0c 	tst.w	r4, ip
 8003f58:	d118      	bne.n	8003f8c <mpu_configure_regions+0x50>
		&&
 8003f5a:	2c1f      	cmp	r4, #31
 8003f5c:	d916      	bls.n	8003f8c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 8003f5e:	6805      	ldr	r5, [r0, #0]
		&&
 8003f60:	ea1c 0f05 	tst.w	ip, r5
 8003f64:	d112      	bne.n	8003f8c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8003f66:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8003f68:	b2d2      	uxtb	r2, r2
	region_conf.base = new_region->start;
 8003f6a:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8003f6c:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if (size <= 32U) {
 8003f70:	d90f      	bls.n	8003f92 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
 8003f72:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003f76:	d80e      	bhi.n	8003f96 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8003f78:	3c01      	subs	r4, #1
 8003f7a:	fab4 f484 	clz	r4, r4
 8003f7e:	f1c4 041f 	rsb	r4, r4, #31
 8003f82:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8003f84:	2a0f      	cmp	r2, #15
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8003f86:	ea4c 0404 	orr.w	r4, ip, r4
 8003f8a:	d906      	bls.n	8003f9a <mpu_configure_regions+0x5e>
			return -EINVAL;
 8003f8c:	f06f 0215 	mvn.w	r2, #21
 8003f90:	e7d9      	b.n	8003f46 <mpu_configure_regions+0xa>
		return REGION_32B;
 8003f92:	2408      	movs	r4, #8
 8003f94:	e7f6      	b.n	8003f84 <mpu_configure_regions+0x48>
		return REGION_4G;
 8003f96:	243e      	movs	r4, #62	; 0x3e
 8003f98:	e7f4      	b.n	8003f84 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003f9a:	f025 051f 	bic.w	r5, r5, #31
 8003f9e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003fa2:	f044 0401 	orr.w	r4, r4, #1
				| MPU_RBAR_VALID_Msk | index;
 8003fa6:	4315      	orrs	r5, r2
		reg_index++;
 8003fa8:	3201      	adds	r2, #1
 8003faa:	f045 0510 	orr.w	r5, r5, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003fae:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003fb2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8003fb6:	3601      	adds	r6, #1
 8003fb8:	300c      	adds	r0, #12
 8003fba:	e7c2      	b.n	8003f42 <mpu_configure_regions+0x6>
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <arm_core_mpu_enable+0x14>)
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8003fc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003fcc:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003fd8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
 8003fdc:	4b02      	ldr	r3, [pc, #8]	; (8003fe8 <arm_core_mpu_disable+0x10>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8003fec:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8003fee:	4c03      	ldr	r4, [pc, #12]	; (8003ffc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	7822      	ldrb	r2, [r4, #0]
 8003ff4:	f7ff ffa2 	bl	8003f3c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8003ff8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8003ffa:	bd10      	pop	{r4, pc}
 8003ffc:	24003065 	.word	0x24003065

08004000 <arm_core_mpu_configure_dynamic_mpu_regions>:

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8004000:	4a09      	ldr	r2, [pc, #36]	; (8004028 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 8004002:	b508      	push	{r3, lr}
 8004004:	2300      	movs	r3, #0
 8004006:	7812      	ldrb	r2, [r2, #0]
 8004008:	f7ff ff98 	bl	8003f3c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 800400c:	f110 0f16 	cmn.w	r0, #22
 8004010:	d002      	beq.n	8004018 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8004012:	4a06      	ldr	r2, [pc, #24]	; (800402c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8004014:	280f      	cmp	r0, #15
 8004016:	dd00      	ble.n	800401a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8004018:	bd08      	pop	{r3, pc}
 800401a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
 800401e:	3001      	adds	r0, #1
  MPU->RASR = 0U;
 8004020:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8004024:	e7f6      	b.n	8004014 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 8004026:	bf00      	nop
 8004028:	24003065 	.word	0x24003065
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8004030:	4826      	ldr	r0, [pc, #152]	; (80040cc <z_arm_mpu_init+0x9c>)
{
 8004032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8004034:	6803      	ldr	r3, [r0, #0]
 8004036:	2b10      	cmp	r3, #16
 8004038:	d845      	bhi.n	80040c6 <z_arm_mpu_init+0x96>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800403a:	f7ff ffcd 	bl	8003fd8 <arm_core_mpu_disable>
	if (__get_SCTLR() & SCTLR_C_Msk) {
		L1C_CleanInvalidateDCacheAll();
	}
#else
#if !defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
	if (SCB->CCR & SCB_CCR_DC_Msk) {
 800403e:	4a24      	ldr	r2, [pc, #144]	; (80040d0 <z_arm_mpu_init+0xa0>)
 8004040:	6953      	ldr	r3, [r2, #20]
 8004042:	03db      	lsls	r3, r3, #15
 8004044:	d51e      	bpl.n	8004084 <z_arm_mpu_init+0x54>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004046:	2300      	movs	r3, #0
 8004048:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800404c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004050:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004054:	f643 75e0 	movw	r5, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004058:	f3c3 04c9 	ubfx	r4, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800405c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8004060:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004062:	ea03 0705 	and.w	r7, r3, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004066:	4621      	mov	r1, r4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8004068:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800406c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800406e:	f8c2 6274 	str.w	r6, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8004072:	d2f9      	bcs.n	8004068 <z_arm_mpu_init+0x38>
    } while(sets-- != 0U);
 8004074:	3b20      	subs	r3, #32
 8004076:	f113 0f20 	cmn.w	r3, #32
 800407a:	d1f2      	bne.n	8004062 <z_arm_mpu_init+0x32>
 800407c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	e9d0 4100 	ldrd	r4, r1, [r0]
	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 8004088:	2200      	movs	r2, #0
 800408a:	4811      	ldr	r0, [pc, #68]	; (80040d0 <z_arm_mpu_init+0xa0>)
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800408c:	42a2      	cmp	r2, r4
 800408e:	f101 010c 	add.w	r1, r1, #12
 8004092:	d105      	bne.n	80040a0 <z_arm_mpu_init+0x70>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <z_arm_mpu_init+0xa4>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8004096:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
 8004098:	701a      	strb	r2, [r3, #0]
	arm_core_mpu_enable();
 800409a:	f7ff ff91 	bl	8003fc0 <arm_core_mpu_enable>
}
 800409e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040a0:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80040a4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80040a8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80040ac:	4313      	orrs	r3, r2
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80040ae:	3201      	adds	r2, #1
 80040b0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80040b4:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80040b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 80040c4:	e7e2      	b.n	800408c <z_arm_mpu_init+0x5c>
		return -1;
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ca:	e7e8      	b.n	800409e <z_arm_mpu_init+0x6e>
 80040cc:	0801cb28 	.word	0x0801cb28
 80040d0:	e000ed00 	.word	0xe000ed00
 80040d4:	24003065 	.word	0x24003065

080040d8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 80040d8:	4b01      	ldr	r3, [pc, #4]	; (80040e0 <__stdout_hook_install+0x8>)
 80040da:	6018      	str	r0, [r3, #0]
}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	24000924 	.word	0x24000924

080040e4 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
 80040e4:	b40c      	push	{r2, r3}
 80040e6:	b510      	push	{r4, lr}
 80040e8:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
 80040ea:	b909      	cbnz	r1, 80040f0 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
 80040ec:	f10d 000b 	add.w	r0, sp, #11
 80040f0:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;

	va_start(vargs, format);
 80040f2:	ab09      	add	r3, sp, #36	; 0x24
 80040f4:	9a08      	ldr	r2, [sp, #32]
 80040f6:	9400      	str	r4, [sp, #0]
 80040f8:	9303      	str	r3, [sp, #12]
	p.len = (int) len;
 80040fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040fe:	a904      	add	r1, sp, #16
 8004100:	4804      	ldr	r0, [pc, #16]	; (8004114 <snprintf+0x30>)
 8004102:	f7fc fe15 	bl	8000d30 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
 8004106:	9b04      	ldr	r3, [sp, #16]
 8004108:	701c      	strb	r4, [r3, #0]
	return r;
}
 800410a:	b006      	add	sp, #24
 800410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004110:	b002      	add	sp, #8
 8004112:	4770      	bx	lr
 8004114:	08014cc3 	.word	0x08014cc3

08004118 <z_impl_sys_rand32_get>:
static const struct device *const entropy_dev =
	DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
 8004118:	b507      	push	{r0, r1, r2, lr}
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
 800411a:	4808      	ldr	r0, [pc, #32]	; (800413c <z_impl_sys_rand32_get+0x24>)
 800411c:	2204      	movs	r2, #4
 800411e:	6883      	ldr	r3, [r0, #8]
 8004120:	eb0d 0102 	add.w	r1, sp, r2
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4798      	blx	r3
	__ASSERT(device_is_ready(entropy_dev), "Entropy device %s not ready",
		 entropy_dev->name);

	ret = entropy_get_entropy(entropy_dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
 8004128:	2800      	cmp	r0, #0
 800412a:	da02      	bge.n	8004132 <z_impl_sys_rand32_get+0x1a>
 800412c:	f00c f9aa 	bl	8010484 <sys_clock_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
 8004130:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
 8004132:	9801      	ldr	r0, [sp, #4]
 8004134:	b003      	add	sp, #12
 8004136:	f85d fb04 	ldr.w	pc, [sp], #4
 800413a:	bf00      	nop
 800413c:	0801c39c 	.word	0x0801c39c

08004140 <z_impl_sys_rand_get>:
	return 0;
}

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
void z_impl_sys_rand_get(void *dst, size_t outlen)
{
 8004140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004142:	4606      	mov	r6, r0
 8004144:	460d      	mov	r5, r1
 8004146:	480d      	ldr	r0, [pc, #52]	; (800417c <z_impl_sys_rand_get+0x3c>)
 8004148:	b28a      	uxth	r2, r1
 800414a:	4631      	mov	r1, r6
 800414c:	6883      	ldr	r3, [r0, #8]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4798      	blx	r3
	if (unlikely(ret < 0)) {
 8004152:	2800      	cmp	r0, #0
 8004154:	da10      	bge.n	8004178 <z_impl_sys_rand_get+0x38>
		uint32_t len = 0;
 8004156:	2400      	movs	r4, #0
 8004158:	e00c      	b.n	8004174 <z_impl_sys_rand_get+0x34>
			size_t copylen = outlen - len;
 800415a:	1b2f      	subs	r7, r5, r4
			if (copylen > blocksize) {
 800415c:	2f04      	cmp	r7, #4
 800415e:	bf28      	it	cs
 8004160:	2704      	movcs	r7, #4
 8004162:	f00c f98f 	bl	8010484 <sys_clock_cycle_get_32>
			random_num = k_cycle_get_32();
 8004166:	9001      	str	r0, [sp, #4]
			(void)memcpy(&(dst[len]), &random_num, copylen);
 8004168:	1930      	adds	r0, r6, r4
			len += copylen;
 800416a:	443c      	add	r4, r7
			(void)memcpy(&(dst[len]), &random_num, copylen);
 800416c:	463a      	mov	r2, r7
 800416e:	a901      	add	r1, sp, #4
 8004170:	f010 fd81 	bl	8014c76 <memcpy>
		while (len < outlen) {
 8004174:	42a5      	cmp	r5, r4
 8004176:	d8f0      	bhi.n	800415a <z_impl_sys_rand_get+0x1a>
	rand_get(dst, outlen, false);
}
 8004178:	b003      	add	sp, #12
 800417a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800417c:	0801c39c 	.word	0x0801c39c

08004180 <net_buf_id>:
	return pool - TYPE_SECTION_START(net_buf_pool);
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8004180:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <net_buf_id+0x1c>)
 8004186:	fb01 3302 	mla	r3, r1, r2, r3
 800418a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 800418c:	7f1b      	ldrb	r3, [r3, #28]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
 800418e:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 8004190:	331b      	adds	r3, #27
 8004192:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
 8004196:	fbb0 f0f3 	udiv	r0, r0, r3
 800419a:	4770      	bx	lr
 800419c:	240011c8 	.word	0x240011c8

080041a0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
 80041a0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <fixed_data_alloc+0x2c>)
 80041a4:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 80041a6:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 80041a8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
 80041ac:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	bf94      	ite	ls
 80041b8:	600a      	strls	r2, [r1, #0]
 80041ba:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
 80041bc:	f7ff ffe0 	bl	8004180 <net_buf_id>
 80041c0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
 80041c4:	fb02 3000 	mla	r0, r2, r0, r3
 80041c8:	bd10      	pop	{r4, pc}
 80041ca:	bf00      	nop
 80041cc:	240011c8 	.word	0x240011c8

080041d0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
 80041d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d4:	4605      	mov	r5, r0
 80041d6:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
{
 80041dc:	4691      	mov	r9, r2
 80041de:	4698      	mov	r8, r3
 80041e0:	4617      	mov	r7, r2
 80041e2:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 80041e4:	f017 fe12 	bl	801be0c <sys_clock_timeout_end_calc>
 80041e8:	4682      	mov	sl, r0
 80041ea:	468b      	mov	fp, r1
	__asm__ volatile(
 80041ec:	f04f 0310 	mov.w	r3, #16
 80041f0:	f3ef 8111 	mrs	r1, BASEPRI
 80041f4:	f383 8812 	msr	BASEPRI_MAX, r3
 80041f8:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
 80041fc:	8b6b      	ldrh	r3, [r5, #26]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d05a      	beq.n	80042b8 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
 8004202:	8b2a      	ldrh	r2, [r5, #24]
 8004204:	429a      	cmp	r2, r3
 8004206:	d93e      	bls.n	8004286 <net_buf_alloc_len+0xb6>
 8004208:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
 800420a:	2200      	movs	r2, #0
 800420c:	2300      	movs	r3, #0
 800420e:	4628      	mov	r0, r5
 8004210:	f00d fec2 	bl	8011f98 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
 8004214:	9900      	ldr	r1, [sp, #0]
 8004216:	4604      	mov	r4, r0
 8004218:	2800      	cmp	r0, #0
 800421a:	d034      	beq.n	8004286 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
 800421c:	f381 8811 	msr	BASEPRI, r1
 8004220:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
 8004224:	9b01      	ldr	r3, [sp, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d056      	beq.n	80042d8 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800422a:	ea58 0309 	orrs.w	r3, r8, r9
 800422e:	d00f      	beq.n	8004250 <net_buf_alloc_len+0x80>
 8004230:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004234:	bf08      	it	eq
 8004236:	f1b9 3fff 	cmpeq.w	r9, #4294967295
 800423a:	d009      	beq.n	8004250 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
 800423c:	f00e fdc4 	bl	8012dc8 <sys_clock_tick_get>
 8004240:	ebba 0700 	subs.w	r7, sl, r0
 8004244:	eb6b 0601 	sbc.w	r6, fp, r1
 8004248:	2e00      	cmp	r6, #0
 800424a:	bfbc      	itt	lt
 800424c:	2700      	movlt	r7, #0
 800424e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8004250:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
 8004252:	f04f 092c 	mov.w	r9, #44	; 0x2c
 8004256:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80042f0 <net_buf_alloc_len+0x120>
 800425a:	463a      	mov	r2, r7
 800425c:	a901      	add	r1, sp, #4
 800425e:	4620      	mov	r0, r4
 8004260:	fb09 8303 	mla	r3, r9, r3, r8
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681d      	ldr	r5, [r3, #0]
 800426a:	4633      	mov	r3, r6
 800426c:	47a8      	blx	r5
 800426e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
 8004270:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
 8004272:	2800      	cmp	r0, #0
 8004274:	d131      	bne.n	80042da <net_buf_alloc_len+0x10a>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
 8004276:	7aa0      	ldrb	r0, [r4, #10]
 8004278:	4621      	mov	r1, r4
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
 800427a:	462c      	mov	r4, r5
 800427c:	fb00 8009 	mla	r0, r0, r9, r8
 8004280:	f017 fb62 	bl	801b948 <k_queue_prepend>
}
 8004284:	e024      	b.n	80042d0 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
 8004286:	8b68      	ldrh	r0, [r5, #26]
 8004288:	1e43      	subs	r3, r0, #1
 800428a:	836b      	strh	r3, [r5, #26]
 800428c:	f381 8811 	msr	BASEPRI, r1
 8004290:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 8004294:	7f2c      	ldrb	r4, [r5, #28]
	return pool - TYPE_SECTION_START(net_buf_pool);
 8004296:	4a17      	ldr	r2, [pc, #92]	; (80042f4 <net_buf_alloc_len+0x124>)
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 8004298:	341b      	adds	r4, #27
 800429a:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
 800429e:	8b2c      	ldrh	r4, [r5, #24]
 80042a0:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
 80042a2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80042a4:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - TYPE_SECTION_START(net_buf_pool);
 80042a8:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <net_buf_alloc_len+0x120>)
 80042aa:	1aeb      	subs	r3, r5, r3
 80042ac:	109b      	asrs	r3, r3, #2
 80042ae:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
 80042b0:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
 80042b2:	7f2b      	ldrb	r3, [r5, #28]
 80042b4:	72e3      	strb	r3, [r4, #11]
		goto success;
 80042b6:	e7b5      	b.n	8004224 <net_buf_alloc_len+0x54>
 80042b8:	f381 8811 	msr	BASEPRI, r1
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	464a      	mov	r2, r9
 80042c2:	4643      	mov	r3, r8
 80042c4:	4628      	mov	r0, r5
 80042c6:	f00d fe67 	bl	8011f98 <z_impl_k_queue_get>
	if (!buf) {
 80042ca:	4604      	mov	r4, r0
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d1a9      	bne.n	8004224 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
 80042d0:	4620      	mov	r0, r4
 80042d2:	b003      	add	sp, #12
 80042d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
 80042d8:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
 80042da:	2300      	movs	r3, #0
	buf->ref   = 1U;
 80042dc:	2201      	movs	r2, #1
	buf->frags = NULL;
 80042de:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
 80042e0:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
 80042e2:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
 80042e4:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
 80042e6:	6963      	ldr	r3, [r4, #20]
 80042e8:	8262      	strh	r2, [r4, #18]
 80042ea:	60e3      	str	r3, [r4, #12]
	return buf;
 80042ec:	e7f0      	b.n	80042d0 <net_buf_alloc_len+0x100>
 80042ee:	bf00      	nop
 80042f0:	240011c8 	.word	0x240011c8
 80042f4:	ba2e8ba3 	.word	0xba2e8ba3

080042f8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
 80042f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042fc:	4604      	mov	r4, r0
 80042fe:	4d16      	ldr	r5, [pc, #88]	; (8004358 <net_buf_unref+0x60>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
 8004300:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
 8004302:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
 8004304:	b90c      	cbnz	r4, 800430a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
 8004306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
 800430a:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
 800430c:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
 8004310:	3b01      	subs	r3, #1
 8004312:	b2db      	uxtb	r3, r3
 8004314:	7223      	strb	r3, [r4, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f5      	bne.n	8004306 <net_buf_unref+0xe>
		if (buf->__buf) {
 800431a:	6961      	ldr	r1, [r4, #20]
 800431c:	b159      	cbz	r1, 8004336 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
 800431e:	7a63      	ldrb	r3, [r4, #9]
 8004320:	07db      	lsls	r3, r3, #31
 8004322:	d407      	bmi.n	8004334 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8004324:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
 8004326:	4620      	mov	r0, r4
 8004328:	fb07 5303 	mla	r3, r7, r3, r5
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4798      	blx	r3
			buf->__buf = NULL;
 8004334:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
 8004336:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
 8004338:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
 800433a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
 800433e:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	b11b      	cbz	r3, 800434c <net_buf_unref+0x54>
			pool->destroy(buf);
 8004344:	4620      	mov	r0, r4
 8004346:	4798      	blx	r3
{
 8004348:	4644      	mov	r4, r8
 800434a:	e7db      	b.n	8004304 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
 800434c:	4621      	mov	r1, r4
 800434e:	fb00 5007 	mla	r0, r0, r7, r5
 8004352:	f017 faf9 	bl	801b948 <k_queue_prepend>
}
 8004356:	e7f7      	b.n	8004348 <net_buf_unref+0x50>
 8004358:	240011c8 	.word	0x240011c8

0800435c <net_eth_broadcast_addr>:
	{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } };

const struct net_eth_addr *net_eth_broadcast_addr(void)
{
	return &broadcast_eth_addr;
}
 800435c:	4800      	ldr	r0, [pc, #0]	; (8004360 <net_eth_broadcast_addr+0x4>)
 800435e:	4770      	bx	lr
 8004360:	0801ea8c 	.word	0x0801ea8c

08004364 <ethernet_send>:

	net_pkt_frag_unref(buf);
}

static int ethernet_send(struct net_if *iface, struct net_pkt *pkt)
{
 8004364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	NET_ASSERT(iface);
	NET_ASSERT(iface->if_dev);

	return iface->if_dev->dev;
 8004368:	6803      	ldr	r3, [r0, #0]
 800436a:	4681      	mov	r9, r0
 800436c:	460d      	mov	r5, r1
	const struct ethernet_api *api = net_if_get_device(iface)->api;
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8d3 a008 	ldr.w	sl, [r3, #8]
	struct ethernet_context *ctx = net_if_l2_data(iface);
	uint16_t ptype = 0;
	int ret;
	struct net_pkt *orig_pkt = pkt;

	if (!api) {
 8004374:	f1ba 0f00 	cmp.w	sl, #0
 8004378:	f000 80c4 	beq.w	8004504 <ethernet_send+0x1a0>
#endif
}

static inline uint8_t net_pkt_family(struct net_pkt *pkt)
{
	return pkt->family;
 800437c:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
 8004380:	095e      	lsrs	r6, r3, #5
		}
		ethernet_update_tx_stats(iface, pkt);
		ret = net_pkt_get_len(pkt);
		net_pkt_unref(pkt);
		return ret;
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8004382:	2e01      	cmp	r6, #1
 8004384:	d141      	bne.n	800440a <ethernet_send+0xa6>
	return pkt->frags->data;
}

static inline uint8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
 8004386:	688b      	ldr	r3, [r1, #8]
	return pkt->iface;
 8004388:	698f      	ldr	r7, [r1, #24]
	return pkt->frags->data;
 800438a:	68dc      	ldr	r4, [r3, #12]
 */
#if defined(CONFIG_NET_NATIVE_IPV4)
static inline bool net_ipv4_is_addr_bcast(struct net_if *iface,
					  const struct in_addr *addr)
{
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 800438c:	f002 fa28 	bl	80067e0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8004390:	6803      	ldr	r3, [r0, #0]
 8004392:	6922      	ldr	r2, [r4, #16]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8004394:	429a      	cmp	r2, r3
 8004396:	f000 80b8 	beq.w	800450a <ethernet_send+0x1a6>
		return true;
	}

	return net_if_ipv4_is_addr_bcast(iface, addr);
 800439a:	f104 0110 	add.w	r1, r4, #16
 800439e:	4638      	mov	r0, r7
 80043a0:	f001 fdf4 	bl	8005f8c <net_if_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
 80043a4:	2800      	cmp	r0, #0
 80043a6:	f040 80b0 	bne.w	800450a <ethernet_send+0x1a6>
 80043aa:	68ab      	ldr	r3, [r5, #8]
	    net_ipv4_is_addr_mcast((struct in_addr *)NET_IPV4_HDR(pkt)->dst)) {
 80043ac:	68d9      	ldr	r1, [r3, #12]
 80043ae:	3110      	adds	r1, #16
 80043b0:	4608      	mov	r0, r1
 80043b2:	f010 fe47 	bl	8015044 <net_ipv4_is_addr_mcast>
				   (struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 80043b6:	4602      	mov	r2, r0
 80043b8:	2800      	cmp	r0, #0
 80043ba:	f040 80a6 	bne.w	800450a <ethernet_send+0x1a6>
		arp_pkt = net_arp_prepare(pkt, (struct in_addr *)NET_IPV4_HDR(pkt)->dst, NULL);
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 f9c8 	bl	8004754 <net_arp_prepare>
		if (!arp_pkt) {
 80043c4:	4604      	mov	r4, r0
 80043c6:	b1e8      	cbz	r0, 8004404 <ethernet_send+0xa0>
		if (pkt != arp_pkt) {
 80043c8:	4285      	cmp	r5, r0
 80043ca:	f000 809f 	beq.w	800450c <ethernet_send+0x1a8>
			net_pkt_unref(pkt);
 80043ce:	4628      	mov	r0, r5
 80043d0:	f012 ff87 	bl	80172e2 <net_pkt_unref>
	pkt->family = family;
 80043d4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80043d8:	f366 1347 	bfi	r3, r6, #5, #3
 80043dc:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	} else if (IS_ENABLED(CONFIG_NET_LLDP) && net_pkt_is_lldp(pkt)) {
		ptype = htons(NET_ETH_PTYPE_LLDP);
	} else if (IS_ENABLED(CONFIG_NET_ARP)) {
		/* Unknown type: Unqueued pkt is an ARP reply.
		 */
		ptype = htons(NET_ETH_PTYPE_ARP);
 80043e0:	f44f 67c1 	mov.w	r7, #1544	; 0x608

	/* If the ll dst addr has not been set before, let's assume
	 * temporarily it's a broadcast one. When filling the header,
	 * it might detect this should be multicast and act accordingly.
	 */
	if (!net_pkt_lladdr_dst(pkt)->addr) {
 80043e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80043e6:	b923      	cbnz	r3, 80043f2 <ethernet_send+0x8e>
		net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)broadcast_eth_addr.addr;
 80043e8:	4b49      	ldr	r3, [pc, #292]	; (8004510 <ethernet_send+0x1ac>)
 80043ea:	62e3      	str	r3, [r4, #44]	; 0x2c
		net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 80043ec:	2306      	movs	r3, #6
 80043ee:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hdr_frag = net_pkt_get_frag(pkt, hdr_len, NET_BUF_TIMEOUT);
 80043f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043f6:	2300      	movs	r3, #0
 80043f8:	210e      	movs	r1, #14
 80043fa:	4620      	mov	r0, r4
 80043fc:	f002 fd86 	bl	8006f0c <net_pkt_get_frag>
	if (!hdr_frag) {
 8004400:	4606      	mov	r6, r0
 8004402:	b978      	cbnz	r0, 8004424 <ethernet_send+0xc0>
				ret = -ENOMEM;
 8004404:	f06f 060b 	mvn.w	r6, #11
 8004408:	e055      	b.n	80044b6 <ethernet_send+0x152>
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800440a:	2e02      	cmp	r6, #2
 800440c:	d006      	beq.n	800441c <ethernet_send+0xb8>
 800440e:	2201      	movs	r2, #1
}
 8004410:	460c      	mov	r4, r1
	pkt->family = family;
 8004412:	f362 1347 	bfi	r3, r2, #5, #3
 8004416:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
 800441a:	e7e1      	b.n	80043e0 <ethernet_send+0x7c>
 800441c:	460c      	mov	r4, r1
		ptype = htons(NET_ETH_PTYPE_IPV6);
 800441e:	f64d 5786 	movw	r7, #56710	; 0xdd86
 8004422:	e7df      	b.n	80043e4 <ethernet_send+0x80>
		if (ptype == htons(NET_ETH_PTYPE_ARP) ||
 8004424:	f5b7 6fc1 	cmp.w	r7, #1544	; 0x608
		hdr = (struct net_eth_hdr *)(hdr_frag->data);
 8004428:	f8d0 800c 	ldr.w	r8, [r0, #12]
		if (ptype == htons(NET_ETH_PTYPE_ARP) ||
 800442c:	d05a      	beq.n	80044e4 <ethernet_send+0x180>
	return pkt->family;
 800442e:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 8004432:	0952      	lsrs	r2, r2, #5
	if (net_pkt_family(pkt) == AF_INET &&
 8004434:	2a01      	cmp	r2, #1
 8004436:	d141      	bne.n	80044bc <ethernet_send+0x158>
	return pkt->frags->data;
 8004438:	68a3      	ldr	r3, [r4, #8]
	    net_ipv4_is_addr_mcast((struct in_addr *)NET_IPV4_HDR(pkt)->dst)) {
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	3210      	adds	r2, #16
 800443e:	4610      	mov	r0, r2
 8004440:	f010 fe00 	bl	8015044 <net_ipv4_is_addr_mcast>
	if (net_pkt_family(pkt) == AF_INET &&
 8004444:	2800      	cmp	r0, #0
 8004446:	d04d      	beq.n	80044e4 <ethernet_send+0x180>
		net_eth_ipv4_mcast_to_mac_addr(
 8004448:	4641      	mov	r1, r8
 800444a:	4610      	mov	r0, r2
 800444c:	f010 fef5 	bl	801523a <net_eth_ipv4_mcast_to_mac_addr>
		memcpy(&hdr->src, net_pkt_lladdr_src(pkt)->addr,
 8004450:	2206      	movs	r2, #6
 8004452:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004454:	eb08 0002 	add.w	r0, r8, r2
 8004458:	f010 fc0d 	bl	8014c76 <memcpy>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
 800445c:	210e      	movs	r1, #14
 800445e:	f106 000c 	add.w	r0, r6, #12
		hdr->type = ptype;
 8004462:	f8a8 700c 	strh.w	r7, [r8, #12]
 8004466:	f010 fdc6 	bl	8014ff6 <net_buf_simple_add>
	net_pkt_frag_insert(pkt, hdr_frag);
 800446a:	4631      	mov	r1, r6
 800446c:	4620      	mov	r0, r4
 800446e:	f012 ff62 	bl	8017336 <net_pkt_frag_insert>
	if (!ethernet_fill_header(ctx, pkt, ptype)) {
		ret = -ENOMEM;
		goto error;
	}

	net_pkt_cursor_init(pkt);
 8004472:	4620      	mov	r0, r4
 8004474:	f012 ffc7 	bl	8017406 <net_pkt_cursor_init>
 8004478:	f8d9 2000 	ldr.w	r2, [r9]
			      struct net_if *iface,
			      struct net_pkt *pkt)
{
	net_capture_pkt(iface, pkt);

	return send_fn(dev, pkt);
 800447c:	f8da 3018 	ldr.w	r3, [sl, #24]
 8004480:	4621      	mov	r1, r4
 8004482:	6810      	ldr	r0, [r2, #0]
 8004484:	4798      	blx	r3

send:
	ret = net_l2_send(api->send, net_if_get_device(iface), iface, pkt);
	if (ret != 0) {
 8004486:	4606      	mov	r6, r0
	buf = pkt->buffer;
 8004488:	68a0      	ldr	r0, [r4, #8]
	if (ret != 0) {
 800448a:	b37e      	cbz	r6, 80044ec <ethernet_send+0x188>
	pkt->buffer = buf->frags;
 800448c:	6843      	ldr	r3, [r0, #4]
 800448e:	60a3      	str	r3, [r4, #8]
	buf->frags = NULL;
 8004490:	2300      	movs	r3, #0
 8004492:	6043      	str	r3, [r0, #4]
	net_pkt_frag_unref(buf);
 8004494:	f012 ff21 	bl	80172da <net_pkt_frag_unref>
		eth_stats_update_errors_tx(iface);
		ethernet_remove_l2_header(pkt);
		if (IS_ENABLED(CONFIG_NET_ARP) && ptype == htons(NET_ETH_PTYPE_ARP)) {
 8004498:	f5b7 6fc1 	cmp.w	r7, #1544	; 0x608
 800449c:	d10b      	bne.n	80044b6 <ethernet_send+0x152>
			/* Original packet was added to ARP's pending Q, so, to avoid it
			 * being freed, take a reference, the reference is dropped when we
			 * clear the pending Q in ARP and then it will be freed by net_if.
			 */
			net_pkt_ref(orig_pkt);
 800449e:	4628      	mov	r0, r5
 80044a0:	f012 feff 	bl	80172a2 <net_pkt_ref>
 80044a4:	68a3      	ldr	r3, [r4, #8]
			if (net_arp_clear_pending(iface,
 80044a6:	4648      	mov	r0, r9
				(struct in_addr *)NET_IPV4_HDR(pkt)->dst)) {
 80044a8:	68d9      	ldr	r1, [r3, #12]
			if (net_arp_clear_pending(iface,
 80044aa:	3110      	adds	r1, #16
 80044ac:	f000 faba 	bl	8004a24 <net_arp_clear_pending>
	ethernet_update_tx_stats(iface, pkt);

	ret = net_pkt_get_len(pkt);
	ethernet_remove_l2_header(pkt);

	net_pkt_unref(pkt);
 80044b0:	4620      	mov	r0, r4
 80044b2:	f012 ff16 	bl	80172e2 <net_pkt_unref>
error:
	return ret;
}
 80044b6:	4630      	mov	r0, r6
 80044b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (net_pkt_family(pkt) == AF_INET6 &&
 80044bc:	2a02      	cmp	r2, #2
 80044be:	d111      	bne.n	80044e4 <ethernet_send+0x180>
 80044c0:	68a3      	ldr	r3, [r4, #8]
	return addr->s6_addr[0] == 0xFF;
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	7e1b      	ldrb	r3, [r3, #24]
 80044c6:	2bff      	cmp	r3, #255	; 0xff
 80044c8:	d10c      	bne.n	80044e4 <ethernet_send+0x180>
		memcpy(dst, (uint8_t *)multicast_eth_addr.addr,
 80044ca:	4912      	ldr	r1, [pc, #72]	; (8004514 <ethernet_send+0x1b0>)
 80044cc:	4640      	mov	r0, r8
 80044ce:	f010 fbd2 	bl	8014c76 <memcpy>
 80044d2:	68a3      	ldr	r3, [r4, #8]
		memcpy((uint8_t *)dst + 2,
 80044d4:	2204      	movs	r2, #4
 80044d6:	f108 0002 	add.w	r0, r8, #2
 80044da:	68d9      	ldr	r1, [r3, #12]
 80044dc:	3124      	adds	r1, #36	; 0x24
			memcpy(&hdr->dst, net_pkt_lladdr_dst(pkt)->addr,
 80044de:	f010 fbca 	bl	8014c76 <memcpy>
 80044e2:	e7b5      	b.n	8004450 <ethernet_send+0xec>
 80044e4:	2206      	movs	r2, #6
 80044e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80044e8:	4640      	mov	r0, r8
 80044ea:	e7f8      	b.n	80044de <ethernet_send+0x17a>
	if (ret != 0) {
 80044ec:	4603      	mov	r3, r0
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;

	while (buf) {
 80044ee:	b92b      	cbnz	r3, 80044fc <ethernet_send+0x198>
	pkt->buffer = buf->frags;
 80044f0:	6842      	ldr	r2, [r0, #4]
 80044f2:	60a2      	str	r2, [r4, #8]
	buf->frags = NULL;
 80044f4:	6043      	str	r3, [r0, #4]
	net_pkt_frag_unref(buf);
 80044f6:	f012 fef0 	bl	80172da <net_pkt_frag_unref>
 80044fa:	e7d9      	b.n	80044b0 <ethernet_send+0x14c>
		bytes += buf->len;
 80044fc:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
 80044fe:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 8004500:	4416      	add	r6, r2
		buf = buf->frags;
 8004502:	e7f4      	b.n	80044ee <ethernet_send+0x18a>
		ret = -ENOENT;
 8004504:	f06f 0601 	mvn.w	r6, #1
 8004508:	e7d5      	b.n	80044b6 <ethernet_send+0x152>
				ret = -ENOMEM;
 800450a:	462c      	mov	r4, r5
				ptype = htons(NET_ETH_PTYPE_IP);
 800450c:	2708      	movs	r7, #8
 800450e:	e769      	b.n	80043e4 <ethernet_send+0x80>
 8004510:	0801ea8c 	.word	0x0801ea8c
 8004514:	0801ea92 	.word	0x0801ea92

08004518 <ethernet_init>:
			&params, sizeof(struct ethernet_req_params));
}
#endif/* CONFIG_NET_PROMISCUOUS_MODE */

void ethernet_init(struct net_if *iface)
{
 8004518:	b538      	push	{r3, r4, r5, lr}
	return iface->if_dev->l2_data;
 800451a:	6803      	ldr	r3, [r0, #0]
 800451c:	4605      	mov	r5, r0

	NET_DBG("Initializing Ethernet L2 %p for iface %p", ctx, iface);

	ctx->ethernet_l2_flags = NET_L2_MULTICAST;
	ctx->iface = iface;
	k_work_init(&ctx->carrier_work, carrier_on_off);
 800451e:	490d      	ldr	r1, [pc, #52]	; (8004554 <ethernet_init+0x3c>)
 8004520:	689c      	ldr	r4, [r3, #8]
	ctx->ethernet_l2_flags = NET_L2_MULTICAST;
 8004522:	2301      	movs	r3, #1
	ctx->iface = iface;
 8004524:	6160      	str	r0, [r4, #20]
	k_work_init(&ctx->carrier_work, carrier_on_off);
 8004526:	1d20      	adds	r0, r4, #4
	ctx->ethernet_l2_flags = NET_L2_MULTICAST;
 8004528:	7623      	strb	r3, [r4, #24]
	k_work_init(&ctx->carrier_work, carrier_on_off);
 800452a:	f017 faad 	bl	801ba88 <k_work_init>
	return iface->if_dev->dev;
 800452e:	682b      	ldr	r3, [r5, #0]
 8004530:	6818      	ldr	r0, [r3, #0]
enum ethernet_hw_caps net_eth_get_hw_capabilities(struct net_if *iface)
{
	const struct ethernet_api *eth =
		(struct ethernet_api *)net_if_get_device(iface)->api;

	if (!eth->get_capabilities) {
 8004532:	6883      	ldr	r3, [r0, #8]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	b133      	cbz	r3, 8004546 <ethernet_init+0x2e>
		return (enum ethernet_hw_caps)0;
	}

	return eth->get_capabilities(net_if_get_device(iface));
 8004538:	4798      	blx	r3

	if (net_eth_get_hw_capabilities(iface) & ETHERNET_PROMISC_MODE) {
 800453a:	0543      	lsls	r3, r0, #21
		ctx->ethernet_l2_flags |= NET_L2_PROMISC_MODE;
 800453c:	bf42      	ittt	mi
 800453e:	7e23      	ldrbmi	r3, [r4, #24]
 8004540:	f043 0304 	orrmi.w	r3, r3, #4
 8004544:	7623      	strbmi	r3, [r4, #24]
			break;
		}
	}
#endif

	net_arp_init();
 8004546:	f000 fa9d 	bl	8004a84 <net_arp_init>

	ctx->is_init = true;
 800454a:	7e63      	ldrb	r3, [r4, #25]
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	7663      	strb	r3, [r4, #25]
}
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	080150bf 	.word	0x080150bf

08004558 <arp_entry_get_last_from_table>:

	return CONTAINER_OF(node, struct arp_entry, node);
}

static struct arp_entry *arp_entry_get_last_from_table(void)
{
 8004558:	b508      	push	{r3, lr}
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <arp_entry_get_last_from_table+0x24>)
 800455c:	685a      	ldr	r2, [r3, #4]
	/* We assume last entry is the oldest one,
	 * so is the preferred one to be taken out.
	 */

	node = sys_slist_peek_tail(&arp_table);
	if (!node) {
 800455e:	b13a      	cbz	r2, 8004570 <arp_entry_get_last_from_table+0x18>
	return list->head;
 8004560:	681b      	ldr	r3, [r3, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004562:	2100      	movs	r1, #0
 8004564:	b123      	cbz	r3, 8004570 <arp_entry_get_last_from_table+0x18>
 8004566:	429a      	cmp	r2, r3
 8004568:	d104      	bne.n	8004574 <arp_entry_get_last_from_table+0x1c>
 800456a:	4804      	ldr	r0, [pc, #16]	; (800457c <arp_entry_get_last_from_table+0x24>)
 800456c:	f010 fea4 	bl	80152b8 <sys_slist_remove>
	}

	sys_slist_find_and_remove(&arp_table, node);

	return CONTAINER_OF(node, struct arp_entry, node);
}
 8004570:	4610      	mov	r0, r2
 8004572:	bd08      	pop	{r3, pc}
	return node->next;
 8004574:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	e7f4      	b.n	8004564 <arp_entry_get_last_from_table+0xc>
 800457a:	bf00      	nop
 800457c:	24002440 	.word	0x24002440

08004580 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 8004584:	4801      	ldr	r0, [pc, #4]	; (800458c <k_mutex_lock.constprop.0.isra.0+0xc>)
 8004586:	f00d bc4f 	b.w	8011e28 <z_impl_k_mutex_lock>
 800458a:	bf00      	nop
 800458c:	24002424 	.word	0x24002424

08004590 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <k_mutex_unlock.constprop.0.isra.0+0x8>)
 8004592:	f00d bcc3 	b.w	8011f1c <z_impl_k_mutex_unlock>
 8004596:	bf00      	nop
 8004598:	24002424 	.word	0x24002424

0800459c <arp_update>:
static void arp_update(struct net_if *iface,
		       struct in_addr *src,
		       struct net_eth_addr *hwaddr,
		       bool gratuitous,
		       bool force)
{
 800459c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	4605      	mov	r5, r0
 80045a2:	460f      	mov	r7, r1
	struct arp_entry *entry;
	struct net_pkt *pkt;

	NET_DBG("src %s", net_sprint_ipv4_addr(src));

	k_mutex_lock(&arp_mutex, K_FOREVER);
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	f04f 31ff 	mov.w	r1, #4294967295
{
 80045ac:	4616      	mov	r6, r2
 80045ae:	4698      	mov	r8, r3
 80045b0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	k_mutex_lock(&arp_mutex, K_FOREVER);
 80045b4:	f7ff ffe4 	bl	8004580 <k_mutex_lock.constprop.0.isra.0>
	entry = arp_entry_find(&arp_pending_entries, iface, dst, &prev);
 80045b8:	f8df a100 	ldr.w	sl, [pc, #256]	; 80046bc <arp_update+0x120>
	sys_snode_t *prev = NULL;
 80045bc:	2300      	movs	r3, #0
	entry = arp_entry_find(&arp_pending_entries, iface, dst, &prev);
 80045be:	463a      	mov	r2, r7
 80045c0:	4629      	mov	r1, r5
	sys_snode_t *prev = NULL;
 80045c2:	9301      	str	r3, [sp, #4]
	entry = arp_entry_find(&arp_pending_entries, iface, dst, &prev);
 80045c4:	ab01      	add	r3, sp, #4
 80045c6:	f8da 0000 	ldr.w	r0, [sl]
 80045ca:	f010 fea3 	bl	8015314 <arp_entry_find.isra.0>
	if (entry) {
 80045ce:	4604      	mov	r4, r0
 80045d0:	b120      	cbz	r0, 80045dc <arp_update+0x40>
		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
 80045d2:	4602      	mov	r2, r0
 80045d4:	9901      	ldr	r1, [sp, #4]
 80045d6:	4650      	mov	r0, sl
 80045d8:	f010 fe6e 	bl	80152b8 <sys_slist_remove>
	if (sys_slist_is_empty(&arp_pending_entries)) {
 80045dc:	f8da 3000 	ldr.w	r3, [sl]
 80045e0:	b913      	cbnz	r3, 80045e8 <arp_update+0x4c>
		k_work_cancel_delayable(&arp_request_timer);
 80045e2:	4837      	ldr	r0, [pc, #220]	; (80046c0 <arp_update+0x124>)
 80045e4:	f017 fa9c 	bl	801bb20 <k_work_cancel_delayable>

	entry = arp_entry_get_pending(iface, src);
	if (!entry) {
 80045e8:	2c00      	cmp	r4, #0
 80045ea:	d146      	bne.n	800467a <arp_update+0xde>
		if (IS_ENABLED(CONFIG_NET_ARP_GRATUITOUS) && gratuitous) {
 80045ec:	f1b8 0f00 	cmp.w	r8, #0
 80045f0:	d00d      	beq.n	800460e <arp_update+0x72>
	entry = arp_entry_find(&arp_table, iface, src, &prev);
 80045f2:	4834      	ldr	r0, [pc, #208]	; (80046c4 <arp_update+0x128>)
 80045f4:	ab01      	add	r3, sp, #4
 80045f6:	463a      	mov	r2, r7
 80045f8:	4629      	mov	r1, r5
 80045fa:	6800      	ldr	r0, [r0, #0]
	sys_snode_t *prev = NULL;
 80045fc:	9401      	str	r4, [sp, #4]
	entry = arp_entry_find(&arp_table, iface, src, &prev);
 80045fe:	f010 fe89 	bl	8015314 <arp_entry_find.isra.0>
	if (entry) {
 8004602:	b120      	cbz	r0, 800460e <arp_update+0x72>
		memcpy(&entry->eth, hwaddr, sizeof(struct net_eth_addr));
 8004604:	2206      	movs	r2, #6
 8004606:	4631      	mov	r1, r6
 8004608:	3010      	adds	r0, #16
 800460a:	f010 fb34 	bl	8014c76 <memcpy>
			arp_gratuitous(iface, src, hwaddr);
		}

		if (force) {
 800460e:	f1b9 0f00 	cmp.w	r9, #0
 8004612:	d00f      	beq.n	8004634 <arp_update+0x98>
			sys_snode_t *prev = NULL;
 8004614:	2300      	movs	r3, #0
			struct arp_entry *entry;

			entry = arp_entry_find(&arp_table, iface, src, &prev);
 8004616:	482b      	ldr	r0, [pc, #172]	; (80046c4 <arp_update+0x128>)
 8004618:	463a      	mov	r2, r7
 800461a:	4629      	mov	r1, r5
			sys_snode_t *prev = NULL;
 800461c:	9301      	str	r3, [sp, #4]
			entry = arp_entry_find(&arp_table, iface, src, &prev);
 800461e:	ab01      	add	r3, sp, #4
 8004620:	6800      	ldr	r0, [r0, #0]
 8004622:	f010 fe77 	bl	8015314 <arp_entry_find.isra.0>
			if (entry) {
 8004626:	4603      	mov	r3, r0
 8004628:	b148      	cbz	r0, 800463e <arp_update+0xa2>
				memcpy(&entry->eth, hwaddr,
 800462a:	2206      	movs	r2, #6
 800462c:	4631      	mov	r1, r6
 800462e:	3010      	adds	r0, #16
 8004630:	f010 fb21 	bl	8014c76 <memcpy>

		net_if_queue_tx(iface, pkt);
	}

	k_mutex_unlock(&arp_mutex);
}
 8004634:	b002      	add	sp, #8
 8004636:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		k_mutex_unlock(&arp_mutex);
 800463a:	f7ff bfa9 	b.w	8004590 <k_mutex_unlock.constprop.0.isra.0>
	return list->head;
 800463e:	4822      	ldr	r0, [pc, #136]	; (80046c8 <arp_update+0x12c>)
 8004640:	6804      	ldr	r4, [r0, #0]
	if (!node) {
 8004642:	b9ac      	cbnz	r4, 8004670 <arp_update+0xd4>
					entry = arp_entry_get_last_from_table();
 8004644:	f7ff ff88 	bl	8004558 <arp_entry_get_last_from_table>
				if (entry) {
 8004648:	4604      	mov	r4, r0
 800464a:	2800      	cmp	r0, #0
 800464c:	d0f2      	beq.n	8004634 <arp_update+0x98>
					entry->req_start = k_uptime_get_32();
 800464e:	f010 fe43 	bl	80152d8 <k_uptime_get_32>
					entry->iface = iface;
 8004652:	e9c4 0501 	strd	r0, r5, [r4, #4]
					net_ipaddr_copy(&entry->ip, src);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	60e3      	str	r3, [r4, #12]
					memcpy(&entry->eth, hwaddr, sizeof(entry->eth));
 800465a:	2206      	movs	r2, #6
 800465c:	4631      	mov	r1, r6
 800465e:	f104 0010 	add.w	r0, r4, #16
 8004662:	f010 fb08 	bl	8014c76 <memcpy>
					sys_slist_prepend(&arp_table, &entry->node);
 8004666:	4621      	mov	r1, r4
 8004668:	4816      	ldr	r0, [pc, #88]	; (80046c4 <arp_update+0x128>)
 800466a:	f010 fe1e 	bl	80152aa <sys_slist_prepend>
 800466e:	e7e1      	b.n	8004634 <arp_update+0x98>
	sys_slist_remove(&arp_free_entries, NULL, node);
 8004670:	4622      	mov	r2, r4
 8004672:	4619      	mov	r1, r3
 8004674:	f010 fe20 	bl	80152b8 <sys_slist_remove>
				if (entry) {
 8004678:	e7e9      	b.n	800464e <arp_update+0xb2>
	memcpy(&entry->eth, hwaddr, sizeof(struct net_eth_addr));
 800467a:	4631      	mov	r1, r6
 800467c:	2206      	movs	r2, #6
 800467e:	f104 0010 	add.w	r0, r4, #16
		pkt = k_fifo_get(&entry->pending_queue, K_FOREVER);
 8004682:	f104 0618 	add.w	r6, r4, #24
		net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 8004686:	2706      	movs	r7, #6
	memcpy(&entry->eth, hwaddr, sizeof(struct net_eth_addr));
 8004688:	f010 faf5 	bl	8014c76 <memcpy>
	sys_slist_prepend(&arp_table, &entry->node);
 800468c:	4621      	mov	r1, r4
 800468e:	480d      	ldr	r0, [pc, #52]	; (80046c4 <arp_update+0x128>)
 8004690:	f010 fe0b 	bl	80152aa <sys_slist_prepend>
	while (!k_fifo_is_empty(&entry->pending_queue)) {
 8004694:	69a3      	ldr	r3, [r4, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0cc      	beq.n	8004634 <arp_update+0x98>
	return z_impl_k_queue_get(queue, timeout);
 800469a:	f04f 32ff 	mov.w	r2, #4294967295
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
 80046a2:	4630      	mov	r0, r6
 80046a4:	f00d fc78 	bl	8011f98 <z_impl_k_queue_get>
	return pkt->frags->data;
 80046a8:	6883      	ldr	r3, [r0, #8]
		net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 80046aa:	f880 7030 	strb.w	r7, [r0, #48]	; 0x30
 80046ae:	4601      	mov	r1, r0
		net_pkt_lladdr_dst(pkt)->addr =
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	62c3      	str	r3, [r0, #44]	; 0x2c
		net_if_queue_tx(iface, pkt);
 80046b4:	4628      	mov	r0, r5
 80046b6:	f011 fc66 	bl	8015f86 <net_if_queue_tx>
 80046ba:	e7eb      	b.n	8004694 <arp_update+0xf8>
 80046bc:	24002438 	.word	0x24002438
 80046c0:	24001588 	.word	0x24001588
 80046c4:	24002440 	.word	0x24002440
 80046c8:	2400241c 	.word	0x2400241c

080046cc <arp_request_timeout>:
{
 80046cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8004748 <arp_request_timeout+0x7c>
	uint32_t current = k_uptime_get_32();
 80046d4:	f010 fe00 	bl	80152d8 <k_uptime_get_32>
	k_mutex_lock(&arp_mutex, K_FOREVER);
 80046d8:	f04f 31ff 	mov.w	r1, #4294967295
	uint32_t current = k_uptime_get_32();
 80046dc:	4607      	mov	r7, r0
	k_mutex_lock(&arp_mutex, K_FOREVER);
 80046de:	f04f 30ff 	mov.w	r0, #4294967295
 80046e2:	f7ff ff4d 	bl	8004580 <k_mutex_lock.constprop.0.isra.0>
 80046e6:	f8d8 4000 	ldr.w	r4, [r8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
 80046ea:	b344      	cbz	r4, 800473e <arp_request_timeout+0x72>
	return node->next;
 80046ec:	6825      	ldr	r5, [r4, #0]
	return list->tail;
 80046ee:	4e17      	ldr	r6, [pc, #92]	; (800474c <arp_request_timeout+0x80>)
			    ARP_REQUEST_TIMEOUT - current) > 0) {
 80046f0:	6862      	ldr	r2, [r4, #4]
 80046f2:	1bd2      	subs	r2, r2, r7
 80046f4:	f502 63fa 	add.w	r3, r2, #2000	; 0x7d0
		if ((int32_t)(entry->req_start +
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dc15      	bgt.n	8004728 <arp_request_timeout+0x5c>
		arp_entry_cleanup(entry, true);
 80046fc:	2101      	movs	r1, #1
 80046fe:	4620      	mov	r0, r4
 8004700:	f010 fe17 	bl	8015332 <arp_entry_cleanup>
		sys_slist_remove(&arp_pending_entries, NULL, &entry->node);
 8004704:	4622      	mov	r2, r4
 8004706:	2100      	movs	r1, #0
 8004708:	4640      	mov	r0, r8
 800470a:	f010 fdd5 	bl	80152b8 <sys_slist_remove>
	parent->next = child;
 800470e:	2300      	movs	r3, #0
 8004710:	6023      	str	r3, [r4, #0]
	return list->tail;
 8004712:	6873      	ldr	r3, [r6, #4]
Z_GENLIST_APPEND(slist, snode)
 8004714:	b92b      	cbnz	r3, 8004722 <arp_request_timeout+0x56>
	list->head = node;
 8004716:	e9c6 4400 	strd	r4, r4, [r6]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
 800471a:	b185      	cbz	r5, 800473e <arp_request_timeout+0x72>
	return node->next;
 800471c:	462c      	mov	r4, r5
 800471e:	682d      	ldr	r5, [r5, #0]
 8004720:	e7e6      	b.n	80046f0 <arp_request_timeout+0x24>
	parent->next = child;
 8004722:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8004724:	6074      	str	r4, [r6, #4]
}
 8004726:	e7f8      	b.n	800471a <arp_request_timeout+0x4e>
		k_work_reschedule(&arp_request_timer,
 8004728:	f512 6ffa 	cmn.w	r2, #2000	; 0x7d0
 800472c:	f04f 020a 	mov.w	r2, #10
 8004730:	4807      	ldr	r0, [pc, #28]	; (8004750 <arp_request_timeout+0x84>)
 8004732:	bf08      	it	eq
 8004734:	2300      	moveq	r3, #0
 8004736:	fba3 2302 	umull	r2, r3, r3, r2
 800473a:	f00d fe6f 	bl	801241c <k_work_reschedule>
}
 800473e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_unlock(&arp_mutex);
 8004742:	f7ff bf25 	b.w	8004590 <k_mutex_unlock.constprop.0.isra.0>
 8004746:	bf00      	nop
 8004748:	24002438 	.word	0x24002438
 800474c:	2400241c 	.word	0x2400241c
 8004750:	24001588 	.word	0x24001588

08004754 <net_arp_prepare>:
{
 8004754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004758:	468a      	mov	sl, r1
 800475a:	b085      	sub	sp, #20
 800475c:	4690      	mov	r8, r2
	if (!pkt || !pkt->buffer) {
 800475e:	4605      	mov	r5, r0
 8004760:	b920      	cbnz	r0, 800476c <net_arp_prepare+0x18>
		return NULL;
 8004762:	2400      	movs	r4, #0
}
 8004764:	4620      	mov	r0, r4
 8004766:	b005      	add	sp, #20
 8004768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!pkt || !pkt->buffer) {
 800476c:	6883      	ldr	r3, [r0, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f7      	beq.n	8004762 <net_arp_prepare+0xe>
	if (!current_ip && !is_ipv4_ll_used &&
 8004772:	b95a      	cbnz	r2, 800478c <net_arp_prepare+0x38>
	    !net_if_ipv4_addr_mask_cmp(net_pkt_iface(pkt), request_ip)) {
 8004774:	6980      	ldr	r0, [r0, #24]
 8004776:	f011 fb8f 	bl	8015e98 <net_if_ipv4_addr_mask_cmp>
	if (!current_ip && !is_ipv4_ll_used &&
 800477a:	b938      	cbnz	r0, 800478c <net_arp_prepare+0x38>
		struct net_if_ipv4 *ipv4 = net_pkt_iface(pkt)->config.ip.ipv4;
 800477c:	69ab      	ldr	r3, [r5, #24]
 800477e:	68db      	ldr	r3, [r3, #12]
		if (ipv4) {
 8004780:	b123      	cbz	r3, 800478c <net_arp_prepare+0x38>
			addr = &ipv4->gw;
 8004782:	f103 0a48 	add.w	sl, r3, #72	; 0x48
	return UNALIGNED_GET(&addr->s_addr) == 0;
 8004786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
			if (net_ipv4_is_addr_unspecified(addr)) {
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ea      	beq.n	8004762 <net_arp_prepare+0xe>
	k_mutex_lock(&arp_mutex, K_FOREVER);
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	f04f 31ff 	mov.w	r1, #4294967295
 8004794:	f7ff fef4 	bl	8004580 <k_mutex_lock.constprop.0.isra.0>
	entry = arp_entry_find(&arp_table, iface, dst, &prev);
 8004798:	4e6e      	ldr	r6, [pc, #440]	; (8004954 <net_arp_prepare+0x200>)
	sys_snode_t *prev = NULL;
 800479a:	2300      	movs	r3, #0
	entry = arp_entry_find(&arp_table, iface, dst, &prev);
 800479c:	4652      	mov	r2, sl
 800479e:	69a9      	ldr	r1, [r5, #24]
	sys_snode_t *prev = NULL;
 80047a0:	9303      	str	r3, [sp, #12]
	entry = arp_entry_find(&arp_table, iface, dst, &prev);
 80047a2:	ab03      	add	r3, sp, #12
 80047a4:	6830      	ldr	r0, [r6, #0]
 80047a6:	f010 fdb5 	bl	8015314 <arp_entry_find.isra.0>
	if (entry) {
 80047aa:	4604      	mov	r4, r0
 80047ac:	2800      	cmp	r0, #0
 80047ae:	f000 80a4 	beq.w	80048fa <net_arp_prepare+0x1a6>
		if (&entry->node != sys_slist_peek_head(&arp_table)) {
 80047b2:	6833      	ldr	r3, [r6, #0]
 80047b4:	4298      	cmp	r0, r3
 80047b6:	d007      	beq.n	80047c8 <net_arp_prepare+0x74>
			sys_slist_remove(&arp_table, prev, &entry->node);
 80047b8:	4602      	mov	r2, r0
 80047ba:	9903      	ldr	r1, [sp, #12]
 80047bc:	4630      	mov	r0, r6
 80047be:	f010 fd7b 	bl	80152b8 <sys_slist_remove>
			sys_slist_prepend(&arp_table, &entry->node);
 80047c2:	4621      	mov	r1, r4
 80047c4:	f010 fd71 	bl	80152aa <sys_slist_prepend>
	k_mutex_unlock(&arp_mutex);
 80047c8:	f7ff fee2 	bl	8004590 <k_mutex_unlock.constprop.0.isra.0>
static inline struct net_linkaddr *net_if_get_link_addr(struct net_if *iface)
{
	NET_ASSERT(iface);
	NET_ASSERT(iface->if_dev);

	return &iface->if_dev->link_addr;
 80047cc:	68a3      	ldr	r3, [r4, #8]
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&entry->eth;
 80047ce:	3410      	adds	r4, #16
		(uint8_t *)net_if_get_link_addr(entry->iface)->addr;
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&entry->eth;
 80047d4:	62ec      	str	r4, [r5, #44]	; 0x2c
	return pkt;
 80047d6:	462c      	mov	r4, r5
	net_pkt_lladdr_src(pkt)->addr =
 80047d8:	626b      	str	r3, [r5, #36]	; 0x24
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
 80047da:	2306      	movs	r3, #6
 80047dc:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 80047e0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	return pkt;
 80047e4:	e7be      	b.n	8004764 <net_arp_prepare+0x10>
	sys_slist_remove(&arp_free_entries, NULL, node);
 80047e6:	4622      	mov	r2, r4
 80047e8:	4631      	mov	r1, r6
 80047ea:	f010 fd65 	bl	80152b8 <sys_slist_remove>
			if (!entry) {
 80047ee:	e098      	b.n	8004922 <net_arp_prepare+0x1ce>
						  net_pkt_ref(pkt))) {
 80047f0:	4628      	mov	r0, r5
 80047f2:	f012 fd56 	bl	80172a2 <net_pkt_ref>
 80047f6:	4601      	mov	r1, r0
			    k_queue_unique_append(&entry->pending_queue._queue,
 80047f8:	f106 0018 	add.w	r0, r6, #24
 80047fc:	f017 f8ae 	bl	801b95c <k_queue_unique_append>
			if (!net_pkt_ipv4_auto(pkt) &&
 8004800:	2800      	cmp	r0, #0
 8004802:	f000 808e 	beq.w	8004922 <net_arp_prepare+0x1ce>
				k_mutex_unlock(&arp_mutex);
 8004806:	f7ff fec3 	bl	8004590 <k_mutex_unlock.constprop.0.isra.0>
				return NULL;
 800480a:	e7ab      	b.n	8004764 <net_arp_prepare+0x10>
 800480c:	462e      	mov	r6, r5
	return net_buf_simple_add(&buf->b, len);
 800480e:	68b0      	ldr	r0, [r6, #8]
 8004810:	211c      	movs	r1, #28
 8004812:	300c      	adds	r0, #12
 8004814:	f010 fbef 	bl	8014ff6 <net_buf_simple_add>
 8004818:	68b3      	ldr	r3, [r6, #8]
 800481a:	68df      	ldr	r7, [r3, #12]
	if (entry) {
 800481c:	2c00      	cmp	r4, #0
 800481e:	d059      	beq.n	80048d4 <net_arp_prepare+0x180>
			k_fifo_put(&entry->pending_queue, net_pkt_ref(pending));
 8004820:	4628      	mov	r0, r5
 8004822:	f012 fd3e 	bl	80172a2 <net_pkt_ref>
 8004826:	4601      	mov	r1, r0
 8004828:	f104 0018 	add.w	r0, r4, #24
 800482c:	f017 f881 	bl	801b932 <k_queue_append>
	return pkt->iface;
 8004830:	69b3      	ldr	r3, [r6, #24]
		entry->iface = net_pkt_iface(pkt);
 8004832:	60a3      	str	r3, [r4, #8]
		net_ipaddr_copy(&entry->ip, next_addr);
 8004834:	f8da 3000 	ldr.w	r3, [sl]
 8004838:	60e3      	str	r3, [r4, #12]
 800483a:	68a3      	ldr	r3, [r4, #8]
			(uint8_t *)net_if_get_link_addr(entry->iface)->addr;
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
		net_pkt_lladdr_src(pkt)->addr =
 8004840:	6273      	str	r3, [r6, #36]	; 0x24
	parent->next = child;
 8004842:	2300      	movs	r3, #0
 8004844:	6023      	str	r3, [r4, #0]
	return list->tail;
 8004846:	f8d9 3004 	ldr.w	r3, [r9, #4]
Z_GENLIST_APPEND(slist, snode)
 800484a:	2b00      	cmp	r3, #0
 800484c:	d13e      	bne.n	80048cc <net_arp_prepare+0x178>
	list->head = node;
 800484e:	e9c9 4400 	strd	r4, r4, [r9]
	entry->req_start = k_uptime_get_32();
 8004852:	f010 fd41 	bl	80152d8 <k_uptime_get_32>
 8004856:	6060      	str	r0, [r4, #4]
 8004858:	483f      	ldr	r0, [pc, #252]	; (8004958 <net_arp_prepare+0x204>)
 800485a:	f017 fac1 	bl	801bde0 <z_timeout_remaining>
	if (!k_work_delayable_remaining_get(&arp_request_timer)) {
 800485e:	ea50 0301 	orrs.w	r3, r0, r1
 8004862:	d105      	bne.n	8004870 <net_arp_prepare+0x11c>
		k_work_reschedule(&arp_request_timer,
 8004864:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004868:	2300      	movs	r3, #0
 800486a:	483c      	ldr	r0, [pc, #240]	; (800495c <net_arp_prepare+0x208>)
 800486c:	f00d fdd6 	bl	801241c <k_work_reschedule>
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
 8004870:	f04f 0b06 	mov.w	fp, #6
	hdr->protolen = sizeof(struct in_addr);
 8004874:	f04f 0904 	mov.w	r9, #4
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
 8004878:	f886 b028 	strb.w	fp, [r6, #40]	; 0x28
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)net_eth_broadcast_addr();
 800487c:	f7ff fd6e 	bl	800435c <net_eth_broadcast_addr>
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
 8004880:	2100      	movs	r1, #0
 8004882:	2301      	movs	r3, #1
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
 8004884:	2208      	movs	r2, #8
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)net_eth_broadcast_addr();
 8004886:	62f0      	str	r0, [r6, #44]	; 0x2c
	(void)memset(&hdr->dst_hwaddr.addr, 0x00, sizeof(struct net_eth_addr));
 8004888:	f107 0012 	add.w	r0, r7, #18
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 800488c:	f886 b030 	strb.w	fp, [r6, #48]	; 0x30
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
 8004890:	707b      	strb	r3, [r7, #1]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
 8004892:	70ba      	strb	r2, [r7, #2]
	(void)memset(&hdr->dst_hwaddr.addr, 0x00, sizeof(struct net_eth_addr));
 8004894:	465a      	mov	r2, fp
	hdr->opcode = htons(NET_ARP_REQUEST);
 8004896:	71fb      	strb	r3, [r7, #7]
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
 8004898:	7039      	strb	r1, [r7, #0]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
 800489a:	70f9      	strb	r1, [r7, #3]
	hdr->hwlen = sizeof(struct net_eth_addr);
 800489c:	f887 b004 	strb.w	fp, [r7, #4]
	hdr->protolen = sizeof(struct in_addr);
 80048a0:	f887 9005 	strb.w	r9, [r7, #5]
	hdr->opcode = htons(NET_ARP_REQUEST);
 80048a4:	71b9      	strb	r1, [r7, #6]
	(void)memset(&hdr->dst_hwaddr.addr, 0x00, sizeof(struct net_eth_addr));
 80048a6:	f010 f9f1 	bl	8014c8c <memset>
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 80048aa:	f8da 3000 	ldr.w	r3, [sl]
 80048ae:	61bb      	str	r3, [r7, #24]
	memcpy(hdr->src_hwaddr.addr, net_pkt_lladdr_src(pkt)->addr,
 80048b0:	465a      	mov	r2, fp
 80048b2:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80048b4:	f107 0008 	add.w	r0, r7, #8
 80048b8:	f010 f9dd 	bl	8014c76 <memcpy>
	} else if (!entry) {
 80048bc:	b97c      	cbnz	r4, 80048de <net_arp_prepare+0x18a>
	return pkt->frags->data;
 80048be:	68ab      	ldr	r3, [r5, #8]
		my_addr = (struct in_addr *)NET_IPV4_HDR(pending)->src;
 80048c0:	68d9      	ldr	r1, [r3, #12]
 80048c2:	310c      	adds	r1, #12
 80048c4:	680b      	ldr	r3, [r1, #0]
 80048c6:	f8c7 300e 	str.w	r3, [r7, #14]
}
 80048ca:	e03f      	b.n	800494c <net_arp_prepare+0x1f8>
	parent->next = child;
 80048cc:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80048ce:	f8c9 4004 	str.w	r4, [r9, #4]
}
 80048d2:	e7be      	b.n	8004852 <net_arp_prepare+0xfe>
			(uint8_t *)net_if_get_link_addr(iface)->addr;
 80048d4:	f8db 3000 	ldr.w	r3, [fp]
 80048d8:	691b      	ldr	r3, [r3, #16]
		net_pkt_lladdr_src(pkt)->addr =
 80048da:	6273      	str	r3, [r6, #36]	; 0x24
 80048dc:	e7c8      	b.n	8004870 <net_arp_prepare+0x11c>
		my_addr = if_get_addr(entry->iface, current_ip);
 80048de:	68a3      	ldr	r3, [r4, #8]
 80048e0:	4641      	mov	r1, r8
 80048e2:	68d8      	ldr	r0, [r3, #12]
 80048e4:	f010 fd00 	bl	80152e8 <if_get_addr.isra.0>
	if (my_addr) {
 80048e8:	4601      	mov	r1, r0
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d1ea      	bne.n	80048c4 <net_arp_prepare+0x170>
		(void)memset(&hdr->src_ipaddr, 0, sizeof(struct in_addr));
 80048ee:	464a      	mov	r2, r9
 80048f0:	f107 000e 	add.w	r0, r7, #14
 80048f4:	f010 f9ca 	bl	8014c8c <memset>
 80048f8:	e028      	b.n	800494c <net_arp_prepare+0x1f8>
	return arp_entry_find(&arp_pending_entries, iface, dst, NULL);
 80048fa:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8004960 <net_arp_prepare+0x20c>
 80048fe:	4603      	mov	r3, r0
 8004900:	69a9      	ldr	r1, [r5, #24]
 8004902:	f8d9 0000 	ldr.w	r0, [r9]
 8004906:	f010 fd05 	bl	8015314 <arp_entry_find.isra.0>
		if (!entry) {
 800490a:	4606      	mov	r6, r0
 800490c:	2800      	cmp	r0, #0
 800490e:	f47f af6f 	bne.w	80047f0 <net_arp_prepare+0x9c>
	return list->head;
 8004912:	4814      	ldr	r0, [pc, #80]	; (8004964 <net_arp_prepare+0x210>)
 8004914:	6804      	ldr	r4, [r0, #0]
	if (!node) {
 8004916:	2c00      	cmp	r4, #0
 8004918:	f47f af65 	bne.w	80047e6 <net_arp_prepare+0x92>
				entry = arp_entry_get_last_from_table();
 800491c:	f7ff fe1c 	bl	8004558 <arp_entry_get_last_from_table>
 8004920:	4604      	mov	r4, r0
	return pkt->iface;
 8004922:	f8d5 b018 	ldr.w	fp, [r5, #24]
	if (current_ip) {
 8004926:	f1b8 0f00 	cmp.w	r8, #0
 800492a:	f47f af6f 	bne.w	800480c <net_arp_prepare+0xb8>
						AF_UNSPEC, 0, NET_BUF_TIMEOUT);
 800492e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004932:	2300      	movs	r3, #0
		pkt = net_pkt_alloc_with_buffer(iface,
 8004934:	211c      	movs	r1, #28
 8004936:	4658      	mov	r0, fp
 8004938:	e9cd 2300 	strd	r2, r3, [sp]
 800493c:	4643      	mov	r3, r8
 800493e:	4642      	mov	r2, r8
 8004940:	f002 fc12 	bl	8007168 <net_pkt_alloc_with_buffer>
		if (!pkt) {
 8004944:	4606      	mov	r6, r0
 8004946:	2800      	cmp	r0, #0
 8004948:	f47f af61 	bne.w	800480e <net_arp_prepare+0xba>
		return req;
 800494c:	4634      	mov	r4, r6
		k_mutex_unlock(&arp_mutex);
 800494e:	f7ff fe1f 	bl	8004590 <k_mutex_unlock.constprop.0.isra.0>
		return req;
 8004952:	e707      	b.n	8004764 <net_arp_prepare+0x10>
 8004954:	24002440 	.word	0x24002440
 8004958:	24001598 	.word	0x24001598
 800495c:	24001588 	.word	0x24001588
 8004960:	24002438 	.word	0x24002438
 8004964:	2400241c 	.word	0x2400241c

08004968 <net_arp_clear_cache>:

	return NET_OK;
}

void net_arp_clear_cache(struct net_if *iface)
{
 8004968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800496c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004a14 <net_arp_clear_cache+0xac>
 8004970:	4605      	mov	r5, r0
	sys_snode_t *prev = NULL;
	struct arp_entry *entry, *next;

	NET_DBG("Flushing ARP table");

	k_mutex_lock(&arp_mutex, K_FOREVER);
 8004972:	f04f 31ff 	mov.w	r1, #4294967295
 8004976:	f04f 30ff 	mov.w	r0, #4294967295
 800497a:	f7ff fe01 	bl	8004580 <k_mutex_lock.constprop.0.isra.0>
 800497e:	f8d8 4000 	ldr.w	r4, [r8]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
 8004982:	b94c      	cbnz	r4, 8004998 <net_arp_clear_cache+0x30>
 8004984:	4f24      	ldr	r7, [pc, #144]	; (8004a18 <net_arp_clear_cache+0xb0>)
 8004986:	683c      	ldr	r4, [r7, #0]

	prev = NULL;

	NET_DBG("Flushing ARP pending requests");

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
 8004988:	bb1c      	cbnz	r4, 80049d2 <net_arp_clear_cache+0x6a>
		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
		sys_slist_prepend(&arp_free_entries, &entry->node);
	}

	if (sys_slist_is_empty(&arp_pending_entries)) {
		k_work_cancel_delayable(&arp_request_timer);
 800498a:	4824      	ldr	r0, [pc, #144]	; (8004a1c <net_arp_clear_cache+0xb4>)
 800498c:	f017 f8c8 	bl	801bb20 <k_work_cancel_delayable>
	}

	k_mutex_unlock(&arp_mutex);
}
 8004990:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	k_mutex_unlock(&arp_mutex);
 8004994:	f7ff bdfc 	b.w	8004590 <k_mutex_unlock.constprop.0.isra.0>
	return node->next;
 8004998:	6826      	ldr	r6, [r4, #0]
 800499a:	2700      	movs	r7, #0
		sys_slist_prepend(&arp_free_entries, &entry->node);
 800499c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8004a20 <net_arp_clear_cache+0xb8>
			prev = &entry->node;
 80049a0:	4623      	mov	r3, r4
		if (iface && iface != entry->iface) {
 80049a2:	b115      	cbz	r5, 80049aa <net_arp_clear_cache+0x42>
 80049a4:	68a2      	ldr	r2, [r4, #8]
 80049a6:	42aa      	cmp	r2, r5
 80049a8:	d10d      	bne.n	80049c6 <net_arp_clear_cache+0x5e>
		arp_entry_cleanup(entry, false);
 80049aa:	2100      	movs	r1, #0
 80049ac:	4620      	mov	r0, r4
 80049ae:	f010 fcc0 	bl	8015332 <arp_entry_cleanup>
		sys_slist_remove(&arp_table, prev, &entry->node);
 80049b2:	4639      	mov	r1, r7
 80049b4:	4640      	mov	r0, r8
 80049b6:	4622      	mov	r2, r4
 80049b8:	f010 fc7e 	bl	80152b8 <sys_slist_remove>
		sys_slist_prepend(&arp_free_entries, &entry->node);
 80049bc:	4621      	mov	r1, r4
 80049be:	4648      	mov	r0, r9
 80049c0:	f010 fc73 	bl	80152aa <sys_slist_prepend>
 80049c4:	463b      	mov	r3, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
 80049c6:	2e00      	cmp	r6, #0
 80049c8:	d0dc      	beq.n	8004984 <net_arp_clear_cache+0x1c>
 80049ca:	4634      	mov	r4, r6
 80049cc:	461f      	mov	r7, r3
 80049ce:	6836      	ldr	r6, [r6, #0]
 80049d0:	e7e6      	b.n	80049a0 <net_arp_clear_cache+0x38>
 80049d2:	6826      	ldr	r6, [r4, #0]
 80049d4:	f04f 0800 	mov.w	r8, #0
		sys_slist_prepend(&arp_free_entries, &entry->node);
 80049d8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004a20 <net_arp_clear_cache+0xb8>
			prev = &entry->node;
 80049dc:	4623      	mov	r3, r4
		if (iface && iface != entry->iface) {
 80049de:	b115      	cbz	r5, 80049e6 <net_arp_clear_cache+0x7e>
 80049e0:	68a2      	ldr	r2, [r4, #8]
 80049e2:	4295      	cmp	r5, r2
 80049e4:	d10d      	bne.n	8004a02 <net_arp_clear_cache+0x9a>
		arp_entry_cleanup(entry, true);
 80049e6:	2101      	movs	r1, #1
 80049e8:	4620      	mov	r0, r4
 80049ea:	f010 fca2 	bl	8015332 <arp_entry_cleanup>
		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
 80049ee:	4641      	mov	r1, r8
 80049f0:	4638      	mov	r0, r7
 80049f2:	4622      	mov	r2, r4
 80049f4:	f010 fc60 	bl	80152b8 <sys_slist_remove>
		sys_slist_prepend(&arp_free_entries, &entry->node);
 80049f8:	4621      	mov	r1, r4
 80049fa:	4648      	mov	r0, r9
 80049fc:	f010 fc55 	bl	80152aa <sys_slist_prepend>
 8004a00:	4643      	mov	r3, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
 8004a02:	b11e      	cbz	r6, 8004a0c <net_arp_clear_cache+0xa4>
 8004a04:	4634      	mov	r4, r6
 8004a06:	4698      	mov	r8, r3
 8004a08:	6836      	ldr	r6, [r6, #0]
 8004a0a:	e7e7      	b.n	80049dc <net_arp_clear_cache+0x74>
	if (sys_slist_is_empty(&arp_pending_entries)) {
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1be      	bne.n	8004990 <net_arp_clear_cache+0x28>
 8004a12:	e7ba      	b.n	800498a <net_arp_clear_cache+0x22>
 8004a14:	24002440 	.word	0x24002440
 8004a18:	24002438 	.word	0x24002438
 8004a1c:	24001588 	.word	0x24001588
 8004a20:	2400241c 	.word	0x2400241c

08004a24 <net_arp_clear_pending>:

int net_arp_clear_pending(struct net_if *iface, struct in_addr *dst)
{
 8004a24:	460a      	mov	r2, r1
	return arp_entry_find(&arp_pending_entries, iface, dst, NULL);
 8004a26:	4601      	mov	r1, r0
 8004a28:	4807      	ldr	r0, [pc, #28]	; (8004a48 <net_arp_clear_pending+0x24>)
{
 8004a2a:	b508      	push	{r3, lr}
	return arp_entry_find(&arp_pending_entries, iface, dst, NULL);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6800      	ldr	r0, [r0, #0]
 8004a30:	f010 fc70 	bl	8015314 <arp_entry_find.isra.0>
	struct arp_entry *entry = arp_entry_find_pending(iface, dst);

	if (!entry) {
 8004a34:	b120      	cbz	r0, 8004a40 <net_arp_clear_pending+0x1c>
		return -ENOENT;
	}

	arp_entry_cleanup(entry, true);
 8004a36:	2101      	movs	r1, #1
 8004a38:	f010 fc7b 	bl	8015332 <arp_entry_cleanup>

	return 0;
 8004a3c:	2000      	movs	r0, #0
}
 8004a3e:	bd08      	pop	{r3, pc}
		return -ENOENT;
 8004a40:	f06f 0001 	mvn.w	r0, #1
 8004a44:	e7fb      	b.n	8004a3e <net_arp_clear_pending+0x1a>
 8004a46:	bf00      	nop
 8004a48:	24002438 	.word	0x24002438

08004a4c <net_arp_foreach>:

int net_arp_foreach(net_arp_cb_t cb, void *user_data)
{
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	4606      	mov	r6, r0
 8004a50:	460f      	mov	r7, r1
	int ret = 0;
	struct arp_entry *entry;

	k_mutex_lock(&arp_mutex, K_FOREVER);
 8004a52:	f04f 30ff 	mov.w	r0, #4294967295
 8004a56:	f04f 31ff 	mov.w	r1, #4294967295
 8004a5a:	f7ff fd91 	bl	8004580 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 8004a5e:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <net_arp_foreach+0x34>)
 8004a60:	681c      	ldr	r4, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER(&arp_table, entry, node) {
 8004a62:	b15c      	cbz	r4, 8004a7c <net_arp_foreach+0x30>
 8004a64:	2500      	movs	r5, #0
		ret++;
		cb(entry, user_data);
 8004a66:	4620      	mov	r0, r4
 8004a68:	4639      	mov	r1, r7
 8004a6a:	47b0      	blx	r6
	return node->next;
 8004a6c:	6824      	ldr	r4, [r4, #0]
		ret++;
 8004a6e:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&arp_table, entry, node) {
 8004a70:	2c00      	cmp	r4, #0
 8004a72:	d1f8      	bne.n	8004a66 <net_arp_foreach+0x1a>
	}

	k_mutex_unlock(&arp_mutex);
 8004a74:	f7ff fd8c 	bl	8004590 <k_mutex_unlock.constprop.0.isra.0>

	return ret;
}
 8004a78:	4628      	mov	r0, r5
 8004a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7c:	4625      	mov	r5, r4
 8004a7e:	e7f9      	b.n	8004a74 <net_arp_foreach+0x28>
 8004a80:	24002440 	.word	0x24002440

08004a84 <net_arp_init>:

void net_arp_init(void)
{
 8004a84:	b538      	push	{r3, r4, r5, lr}
	int i;

	if (arp_cache_initialized) {
 8004a86:	4d12      	ldr	r5, [pc, #72]	; (8004ad0 <net_arp_init+0x4c>)
 8004a88:	782b      	ldrb	r3, [r5, #0]
 8004a8a:	bb03      	cbnz	r3, 8004ace <net_arp_init+0x4a>
	list->head = NULL;
 8004a8c:	4a11      	ldr	r2, [pc, #68]	; (8004ad4 <net_arp_init+0x50>)
 8004a8e:	4c12      	ldr	r4, [pc, #72]	; (8004ad8 <net_arp_init+0x54>)
	list->tail = NULL;
 8004a90:	e9c2 3300 	strd	r3, r3, [r2]
	list->head = NULL;
 8004a94:	4a11      	ldr	r2, [pc, #68]	; (8004adc <net_arp_init+0x58>)
	list->tail = NULL;
 8004a96:	e9c4 3300 	strd	r3, r3, [r4]
 8004a9a:	e9c2 3300 	strd	r3, r3, [r2]
	z_impl_k_queue_init(queue);
 8004a9e:	4810      	ldr	r0, [pc, #64]	; (8004ae0 <net_arp_init+0x5c>)
 8004aa0:	f016 ff3b 	bl	801b91a <z_impl_k_queue_init>
	sys_slist_init(&arp_table);

	for (i = 0; i < CONFIG_NET_ARP_TABLE_SIZE; i++) {
		/* Inserting entry as free with initialised packet queue */
		k_fifo_init(&arp_entries[i].pending_queue);
		sys_slist_prepend(&arp_free_entries, &arp_entries[i].node);
 8004aa4:	490f      	ldr	r1, [pc, #60]	; (8004ae4 <net_arp_init+0x60>)
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f010 fbff 	bl	80152aa <sys_slist_prepend>
 8004aac:	f101 0048 	add.w	r0, r1, #72	; 0x48
 8004ab0:	f016 ff33 	bl	801b91a <z_impl_k_queue_init>
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	490c      	ldr	r1, [pc, #48]	; (8004ae8 <net_arp_init+0x64>)
 8004ab8:	f010 fbf7 	bl	80152aa <sys_slist_prepend>
	}

	k_work_init_delayable(&arp_request_timer, arp_request_timeout);
 8004abc:	490b      	ldr	r1, [pc, #44]	; (8004aec <net_arp_init+0x68>)
 8004abe:	480c      	ldr	r0, [pc, #48]	; (8004af0 <net_arp_init+0x6c>)
 8004ac0:	f017 f820 	bl	801bb04 <k_work_init_delayable>
	return z_impl_k_mutex_init(mutex);
 8004ac4:	480b      	ldr	r0, [pc, #44]	; (8004af4 <net_arp_init+0x70>)
 8004ac6:	f016 feb0 	bl	801b82a <z_impl_k_mutex_init>

	k_mutex_init(&arp_mutex);

	arp_cache_initialized = true;
 8004aca:	2301      	movs	r3, #1
 8004acc:	702b      	strb	r3, [r5, #0]
}
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	24003066 	.word	0x24003066
 8004ad4:	24002438 	.word	0x24002438
 8004ad8:	2400241c 	.word	0x2400241c
 8004adc:	24002440 	.word	0x24002440
 8004ae0:	240023d4 	.word	0x240023d4
 8004ae4:	240023bc 	.word	0x240023bc
 8004ae8:	240023ec 	.word	0x240023ec
 8004aec:	080046cd 	.word	0x080046cd
 8004af0:	24001588 	.word	0x24001588
 8004af4:	24002424 	.word	0x24002424

08004af8 <net_ipv4_is_ll_addr>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xFFFF0000) == 0xA9FE0000;
 8004af8:	6803      	ldr	r3, [r0, #0]
}
 8004afa:	4804      	ldr	r0, [pc, #16]	; (8004b0c <net_ipv4_is_ll_addr+0x14>)
 8004afc:	ba1b      	rev	r3, r3
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xFFFF0000) == 0xA9FE0000;
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	041b      	lsls	r3, r3, #16
}
 8004b02:	1a1b      	subs	r3, r3, r0
 8004b04:	4258      	negs	r0, r3
 8004b06:	4158      	adcs	r0, r3
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	a9fe0000 	.word	0xa9fe0000

08004b10 <iface_router_notify_deletion.constprop.0>:

static void iface_router_notify_deletion(struct net_if_router *router,
					 const char *delete_reason)
{
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
	    router->address.family == AF_INET6) {
 8004b10:	8883      	ldrh	r3, [r0, #4]
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d106      	bne.n	8004b24 <iface_router_notify_deletion.constprop.0+0x14>
		NET_DBG("IPv6 router %s %s",
			net_sprint_ipv6_addr(net_if_router_ipv6(router)),
			delete_reason);

		net_mgmt_event_notify_with_info(NET_EVENT_IPV6_ROUTER_DEL,
 8004b16:	f100 0208 	add.w	r2, r0, #8
 8004b1a:	6981      	ldr	r1, [r0, #24]
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	4806      	ldr	r0, [pc, #24]	; (8004b38 <iface_router_notify_deletion.constprop.0+0x28>)
		   router->address.family == AF_INET) {
		NET_DBG("IPv4 router %s %s",
			net_sprint_ipv4_addr(net_if_router_ipv4(router)),
			delete_reason);

		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ROUTER_DEL,
 8004b20:	f001 bf22 	b.w	8006968 <net_mgmt_event_notify_with_info>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d105      	bne.n	8004b34 <iface_router_notify_deletion.constprop.0+0x24>
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ROUTER_DEL,
 8004b28:	f100 0208 	add.w	r2, r0, #8
 8004b2c:	6981      	ldr	r1, [r0, #24]
 8004b2e:	2310      	movs	r3, #16
 8004b30:	4802      	ldr	r0, [pc, #8]	; (8004b3c <iface_router_notify_deletion.constprop.0+0x2c>)
 8004b32:	e7f5      	b.n	8004b20 <iface_router_notify_deletion.constprop.0+0x10>
						router->iface,
						&router->address.in_addr,
						sizeof(struct in6_addr));
	}
}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e060000a 	.word	0xe060000a
 8004b3c:	e0040006 	.word	0xe0040006

08004b40 <need_calc_checksum>:
}

static bool need_calc_checksum(struct net_if *iface, enum ethernet_hw_caps caps)
{
#if defined(CONFIG_NET_L2_ETHERNET)
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
 8004b40:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <need_calc_checksum+0x2c>)
{
 8004b42:	4603      	mov	r3, r0
 8004b44:	b510      	push	{r4, lr}
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
 8004b46:	f010 fe9f 	bl	8015888 <net_if_l2>
 8004b4a:	4282      	cmp	r2, r0
{
 8004b4c:	460c      	mov	r4, r1
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
 8004b4e:	d10b      	bne.n	8004b68 <need_calc_checksum+0x28>
	return iface->if_dev->dev;
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6818      	ldr	r0, [r3, #0]
	if (!eth->get_capabilities) {
 8004b54:	6883      	ldr	r3, [r0, #8]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	b10b      	cbz	r3, 8004b5e <need_calc_checksum+0x1e>
	return eth->get_capabilities(net_if_get_device(iface));
 8004b5a:	4798      	blx	r3
 8004b5c:	4603      	mov	r3, r0
		return true;
	}

	return !(net_eth_get_hw_capabilities(iface) & caps);
 8004b5e:	421c      	tst	r4, r3
 8004b60:	bf0c      	ite	eq
 8004b62:	2001      	moveq	r0, #1
 8004b64:	2000      	movne	r0, #0
	ARG_UNUSED(iface);
	ARG_UNUSED(caps);

	return true;
#endif
}
 8004b66:	bd10      	pop	{r4, pc}
		return true;
 8004b68:	2001      	movs	r0, #1
 8004b6a:	e7fc      	b.n	8004b66 <need_calc_checksum+0x26>
 8004b6c:	240012f4 	.word	0x240012f4

08004b70 <iface_router_find_default.constprop.0>:
static struct net_if_router *iface_router_find_default(struct net_if *iface,
 8004b70:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&lock, K_FOREVER);
 8004b72:	f04f 32ff 	mov.w	r2, #4294967295
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295
static struct net_if_router *iface_router_find_default(struct net_if *iface,
 8004b7a:	4604      	mov	r4, r0
	k_mutex_lock(&lock, K_FOREVER);
 8004b7c:	4816      	ldr	r0, [pc, #88]	; (8004bd8 <iface_router_find_default.constprop.0+0x68>)
static struct net_if_router *iface_router_find_default(struct net_if *iface,
 8004b7e:	460d      	mov	r5, r1
	k_mutex_lock(&lock, K_FOREVER);
 8004b80:	f010 ff02 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
		if (!routers[i].is_used ||
 8004b84:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <iface_router_find_default.constprop.0+0x6c>)
 8004b86:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8004b8a:	07d8      	lsls	r0, r3, #31
 8004b8c:	d508      	bpl.n	8004ba0 <iface_router_find_default.constprop.0+0x30>
 8004b8e:	0799      	lsls	r1, r3, #30
 8004b90:	d506      	bpl.n	8004ba0 <iface_router_find_default.constprop.0+0x30>
		    !routers[i].is_default ||
 8004b92:	8893      	ldrh	r3, [r2, #4]
 8004b94:	42ab      	cmp	r3, r5
 8004b96:	d103      	bne.n	8004ba0 <iface_router_find_default.constprop.0+0x30>
		if (iface && iface != routers[i].iface) {
 8004b98:	b174      	cbz	r4, 8004bb8 <iface_router_find_default.constprop.0+0x48>
 8004b9a:	6993      	ldr	r3, [r2, #24]
 8004b9c:	429c      	cmp	r4, r3
 8004b9e:	d018      	beq.n	8004bd2 <iface_router_find_default.constprop.0+0x62>
		if (!routers[i].is_used ||
 8004ba0:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 8004ba4:	f013 0001 	ands.w	r0, r3, #1
 8004ba8:	d011      	beq.n	8004bce <iface_router_find_default.constprop.0+0x5e>
 8004baa:	079b      	lsls	r3, r3, #30
 8004bac:	d50f      	bpl.n	8004bce <iface_router_find_default.constprop.0+0x5e>
		    !routers[i].is_default ||
 8004bae:	8d13      	ldrh	r3, [r2, #40]	; 0x28
 8004bb0:	42ab      	cmp	r3, r5
 8004bb2:	d10c      	bne.n	8004bce <iface_router_find_default.constprop.0+0x5e>
		if (iface && iface != routers[i].iface) {
 8004bb4:	b944      	cbnz	r4, 8004bc8 <iface_router_find_default.constprop.0+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 8004bb6:	2401      	movs	r4, #1
		router = &routers[i];
 8004bb8:	2324      	movs	r3, #36	; 0x24
 8004bba:	fb03 2404 	mla	r4, r3, r4, r2
	k_mutex_unlock(&lock);
 8004bbe:	4806      	ldr	r0, [pc, #24]	; (8004bd8 <iface_router_find_default.constprop.0+0x68>)
 8004bc0:	f010 ff05 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
		if (iface && iface != routers[i].iface) {
 8004bc8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004bca:	429c      	cmp	r4, r3
 8004bcc:	d0f3      	beq.n	8004bb6 <iface_router_find_default.constprop.0+0x46>
	struct net_if_router *router = NULL;
 8004bce:	2400      	movs	r4, #0
 8004bd0:	e7f5      	b.n	8004bbe <iface_router_find_default.constprop.0+0x4e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 8004bd2:	2400      	movs	r4, #0
 8004bd4:	e7f0      	b.n	8004bb8 <iface_router_find_default.constprop.0+0x48>
 8004bd6:	bf00      	nop
 8004bd8:	240010d8 	.word	0x240010d8
 8004bdc:	24002608 	.word	0x24002608

08004be0 <address_lifetime_timeout>:
{
 8004be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t current_time = k_uptime_get_32();
 8004be4:	f010 feb3 	bl	801594e <k_uptime_get_32>
	k_mutex_lock(&lock, K_FOREVER);
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
	uint32_t current_time = k_uptime_get_32();
 8004bec:	4680      	mov	r8, r0
	k_mutex_lock(&lock, K_FOREVER);
 8004bee:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf2:	4820      	ldr	r0, [pc, #128]	; (8004c74 <address_lifetime_timeout+0x94>)
 8004bf4:	f010 fec8 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 8004bf8:	4b1f      	ldr	r3, [pc, #124]	; (8004c78 <address_lifetime_timeout+0x98>)
 8004bfa:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 8004bfc:	4625      	mov	r5, r4
 8004bfe:	b11c      	cbz	r4, 8004c08 <address_lifetime_timeout+0x28>
	return node->next;
 8004c00:	f855 4914 	ldr.w	r4, [r5], #-20
 8004c04:	b104      	cbz	r4, 8004c08 <address_lifetime_timeout+0x28>
 8004c06:	3c14      	subs	r4, #20
 8004c08:	f04f 36ff 	mov.w	r6, #4294967295
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
 8004c0c:	f04f 0902 	mov.w	r9, #2
	sys_slist_find_and_remove(&active_address_lifetime_timers,
 8004c10:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004c78 <address_lifetime_timeout+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 8004c14:	b1f5      	cbz	r5, 8004c54 <address_lifetime_timeout+0x74>
		struct net_timeout *timeout = &current->lifetime;
 8004c16:	f105 0b14 	add.w	fp, r5, #20
		uint32_t this_update = net_timeout_evaluate(timeout,
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	4658      	mov	r0, fp
 8004c1e:	f011 fa6c 	bl	80160fa <net_timeout_evaluate>
		if (this_update == 0U) {
 8004c22:	4607      	mov	r7, r0
 8004c24:	b988      	cbnz	r0, 8004c4a <address_lifetime_timeout+0x6a>
	sys_slist_find_and_remove(&active_address_lifetime_timers,
 8004c26:	4659      	mov	r1, fp
 8004c28:	4650      	mov	r0, sl
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
 8004c2a:	f885 902d 	strb.w	r9, [r5, #45]	; 0x2d
	sys_slist_find_and_remove(&active_address_lifetime_timers,
 8004c2e:	f010 fdff 	bl	8015830 <sys_slist_find_and_remove>
	net_timeout_set(&ifaddr->lifetime, 0, 0);
 8004c32:	463a      	mov	r2, r7
 8004c34:	4639      	mov	r1, r7
 8004c36:	4658      	mov	r0, fp
 8004c38:	f011 fa29 	bl	801608e <net_timeout_set>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 8004c3c:	b1bc      	cbz	r4, 8004c6e <address_lifetime_timeout+0x8e>
 8004c3e:	6963      	ldr	r3, [r4, #20]
 8004c40:	b103      	cbz	r3, 8004c44 <address_lifetime_timeout+0x64>
 8004c42:	3b14      	subs	r3, #20
 8004c44:	4625      	mov	r5, r4
 8004c46:	461c      	mov	r4, r3
 8004c48:	e7e4      	b.n	8004c14 <address_lifetime_timeout+0x34>
		if (this_update < next_update) {
 8004c4a:	4286      	cmp	r6, r0
 8004c4c:	bf28      	it	cs
 8004c4e:	4606      	movcs	r6, r0
		if (current == next) {
 8004c50:	42ac      	cmp	r4, r5
 8004c52:	d1f3      	bne.n	8004c3c <address_lifetime_timeout+0x5c>
	if (next_update != UINT32_MAX) {
 8004c54:	1c73      	adds	r3, r6, #1
 8004c56:	d005      	beq.n	8004c64 <address_lifetime_timeout+0x84>
 8004c58:	230a      	movs	r3, #10
		k_work_reschedule(&address_lifetime_timer, K_MSEC(next_update));
 8004c5a:	4808      	ldr	r0, [pc, #32]	; (8004c7c <address_lifetime_timeout+0x9c>)
 8004c5c:	fba6 2303 	umull	r2, r3, r6, r3
 8004c60:	f00d fbdc 	bl	801241c <k_work_reschedule>
	k_mutex_unlock(&lock);
 8004c64:	4803      	ldr	r0, [pc, #12]	; (8004c74 <address_lifetime_timeout+0x94>)
}
 8004c66:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_mutex_unlock(&lock);
 8004c6a:	f010 beb0 	b.w	80159ce <k_mutex_unlock.isra.0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 8004c6e:	4623      	mov	r3, r4
 8004c70:	e7e8      	b.n	8004c44 <address_lifetime_timeout+0x64>
 8004c72:	bf00      	nop
 8004c74:	240010d8 	.word	0x240010d8
 8004c78:	24002448 	.word	0x24002448
 8004c7c:	240015b8 	.word	0x240015b8

08004c80 <iface_router_update_timer>:
{
 8004c80:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&lock, K_FOREVER);
 8004c82:	f04f 32ff 	mov.w	r2, #4294967295
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295
{
 8004c8a:	4604      	mov	r4, r0
	k_mutex_lock(&lock, K_FOREVER);
 8004c8c:	4818      	ldr	r0, [pc, #96]	; (8004cf0 <iface_router_update_timer+0x70>)
 8004c8e:	f010 fe7b 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 8004c92:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <iface_router_update_timer+0x74>)
 8004c94:	6819      	ldr	r1, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 8004c96:	b1f1      	cbz	r1, 8004cd6 <iface_router_update_timer+0x56>
	return node->next;
 8004c98:	680a      	ldr	r2, [r1, #0]
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
	ends += MSEC_PER_SEC * router->lifetime;
 8004c9e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 8004ca2:	b949      	cbnz	r1, 8004cb8 <iface_router_update_timer+0x38>
	if (new_delay == UINT32_MAX) {
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	d11b      	bne.n	8004ce0 <iface_router_update_timer+0x60>
		k_work_cancel_delayable(&router_timer);
 8004ca8:	4813      	ldr	r0, [pc, #76]	; (8004cf8 <iface_router_update_timer+0x78>)
 8004caa:	f016 ff39 	bl	801bb20 <k_work_cancel_delayable>
	k_mutex_unlock(&lock);
 8004cae:	4810      	ldr	r0, [pc, #64]	; (8004cf0 <iface_router_update_timer+0x70>)
}
 8004cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&lock);
 8004cb4:	f010 be8b 	b.w	80159ce <k_mutex_unlock.isra.0>
	ends += MSEC_PER_SEC * router->lifetime;
 8004cb8:	8c08      	ldrh	r0, [r1, #32]
	return (int32_t)(ends - now);
 8004cba:	69c9      	ldr	r1, [r1, #28]
 8004cbc:	1b09      	subs	r1, r1, r4
 8004cbe:	fb05 1100 	mla	r1, r5, r0, r1
		if (ends <= 0) {
 8004cc2:	2900      	cmp	r1, #0
 8004cc4:	dd0b      	ble.n	8004cde <iface_router_update_timer+0x5e>
		new_delay = MIN((uint32_t)ends, new_delay);
 8004cc6:	428b      	cmp	r3, r1
 8004cc8:	bf28      	it	cs
 8004cca:	460b      	movcs	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 8004ccc:	b12a      	cbz	r2, 8004cda <iface_router_update_timer+0x5a>
 8004cce:	6810      	ldr	r0, [r2, #0]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	e7e5      	b.n	8004ca2 <iface_router_update_timer+0x22>
 8004cd6:	460a      	mov	r2, r1
 8004cd8:	e7df      	b.n	8004c9a <iface_router_update_timer+0x1a>
 8004cda:	4610      	mov	r0, r2
 8004cdc:	e7f8      	b.n	8004cd0 <iface_router_update_timer+0x50>
			new_delay = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	220a      	movs	r2, #10
		k_work_reschedule(&router_timer, K_MSEC(new_delay));
 8004ce2:	4805      	ldr	r0, [pc, #20]	; (8004cf8 <iface_router_update_timer+0x78>)
 8004ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce8:	f00d fb98 	bl	801241c <k_work_reschedule>
 8004cec:	e7df      	b.n	8004cae <iface_router_update_timer+0x2e>
 8004cee:	bf00      	nop
 8004cf0:	240010d8 	.word	0x240010d8
 8004cf4:	24002460 	.word	0x24002460
 8004cf8:	24001648 	.word	0x24001648

08004cfc <iface_router_add>:
{
 8004cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	4689      	mov	r9, r1
		if (routers[i].is_used) {
 8004d02:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8004de4 <iface_router_add+0xe8>
{
 8004d06:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8004d0a:	4607      	mov	r7, r0
 8004d0c:	4690      	mov	r8, r2
 8004d0e:	469a      	mov	sl, r3
	k_mutex_lock(&lock, K_FOREVER);
 8004d10:	f04f 32ff 	mov.w	r2, #4294967295
 8004d14:	f04f 33ff 	mov.w	r3, #4294967295
 8004d18:	4833      	ldr	r0, [pc, #204]	; (8004de8 <iface_router_add+0xec>)
{
 8004d1a:	9101      	str	r1, [sp, #4]
	k_mutex_lock(&lock, K_FOREVER);
 8004d1c:	f010 fe34 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
		if (routers[i].is_used) {
 8004d20:	f89b 6022 	ldrb.w	r6, [fp, #34]	; 0x22
 8004d24:	9901      	ldr	r1, [sp, #4]
 8004d26:	f016 0601 	ands.w	r6, r6, #1
 8004d2a:	d004      	beq.n	8004d36 <iface_router_add+0x3a>
 8004d2c:	f89b 3046 	ldrb.w	r3, [fp, #70]	; 0x46
 8004d30:	07db      	lsls	r3, r3, #31
 8004d32:	d454      	bmi.n	8004dde <iface_router_add+0xe2>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 8004d34:	2601      	movs	r6, #1
		routers[i].is_used = true;
 8004d36:	2524      	movs	r5, #36	; 0x24
 8004d38:	4375      	muls	r5, r6
 8004d3a:	eb0b 0405 	add.w	r4, fp, r5
 8004d3e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
		routers[i].iface = iface;
 8004d42:	61a7      	str	r7, [r4, #24]
		routers[i].is_used = true;
 8004d44:	f043 0301 	orr.w	r3, r3, #1
		routers[i].address.family = family;
 8004d48:	f8a4 9004 	strh.w	r9, [r4, #4]
		routers[i].is_used = true;
 8004d4c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		if (lifetime) {
 8004d50:	b349      	cbz	r1, 8004da6 <iface_router_add+0xaa>
			routers[i].is_default = true;
 8004d52:	b2db      	uxtb	r3, r3
			routers[i].lifetime = lifetime;
 8004d54:	8421      	strh	r1, [r4, #32]
			routers[i].is_default = true;
 8004d56:	f023 0306 	bic.w	r3, r3, #6
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			routers[i].life_start = k_uptime_get_32();
 8004d62:	f010 fdf4 	bl	801594e <k_uptime_get_32>
			sys_slist_append(&active_router_timers,
 8004d66:	4621      	mov	r1, r4
			routers[i].life_start = k_uptime_get_32();
 8004d68:	61e0      	str	r0, [r4, #28]
			sys_slist_append(&active_router_timers,
 8004d6a:	4820      	ldr	r0, [pc, #128]	; (8004dec <iface_router_add+0xf0>)
 8004d6c:	f010 fd56 	bl	801581c <sys_slist_append>
			iface_router_update_timer(routers[i].life_start);
 8004d70:	69e0      	ldr	r0, [r4, #28]
 8004d72:	f7ff ff85 	bl	8004c80 <iface_router_update_timer>
#if defined(CONFIG_NET_NATIVE_IPV6)
static inline struct in6_addr *net_if_router_ipv6(struct net_if_router *router)
{
	NET_ASSERT(router);

	return &router->address.in6_addr;
 8004d76:	3508      	adds	r5, #8
		if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 8004d78:	f1b9 0f02 	cmp.w	r9, #2
 8004d7c:	445d      	add	r5, fp
 8004d7e:	d01c      	beq.n	8004dba <iface_router_add+0xbe>
			memcpy(net_if_router_ipv4(&routers[i]), addr,
 8004d80:	2204      	movs	r2, #4
 8004d82:	4641      	mov	r1, r8
 8004d84:	4628      	mov	r0, r5
 8004d86:	f00f ff76 	bl	8014c76 <memcpy>
			routers[i].is_default = is_default;
 8004d8a:	2324      	movs	r3, #36	; 0x24
			net_mgmt_event_notify_with_info(
 8004d8c:	462a      	mov	r2, r5
 8004d8e:	4639      	mov	r1, r7
			routers[i].is_default = is_default;
 8004d90:	fb03 b606 	mla	r6, r3, r6, fp
			net_mgmt_event_notify_with_info(
 8004d94:	4816      	ldr	r0, [pc, #88]	; (8004df0 <iface_router_add+0xf4>)
			routers[i].is_default = is_default;
 8004d96:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
 8004d9a:	f36a 0341 	bfi	r3, sl, #1, #1
 8004d9e:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
			net_mgmt_event_notify_with_info(
 8004da2:	2304      	movs	r3, #4
 8004da4:	e012      	b.n	8004dcc <iface_router_add+0xd0>
			routers[i].is_default = false;
 8004da6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
			routers[i].lifetime = 0;
 8004daa:	8421      	strh	r1, [r4, #32]
			routers[i].is_default = false;
 8004dac:	f023 0306 	bic.w	r3, r3, #6
 8004db0:	f043 0304 	orr.w	r3, r3, #4
 8004db4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8004db8:	e7dd      	b.n	8004d76 <iface_router_add+0x7a>
			memcpy(net_if_router_ipv6(&routers[i]), addr,
 8004dba:	2210      	movs	r2, #16
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f00f ff59 	bl	8014c76 <memcpy>
			net_mgmt_event_notify_with_info(
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	4639      	mov	r1, r7
 8004dca:	480a      	ldr	r0, [pc, #40]	; (8004df4 <iface_router_add+0xf8>)
			net_mgmt_event_notify_with_info(
 8004dcc:	f001 fdcc 	bl	8006968 <net_mgmt_event_notify_with_info>
	k_mutex_unlock(&lock);
 8004dd0:	4805      	ldr	r0, [pc, #20]	; (8004de8 <iface_router_add+0xec>)
 8004dd2:	f010 fdfc 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	b003      	add	sp, #12
 8004dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct net_if_router *router = NULL;
 8004dde:	2400      	movs	r4, #0
 8004de0:	e7f6      	b.n	8004dd0 <iface_router_add+0xd4>
 8004de2:	bf00      	nop
 8004de4:	24002608 	.word	0x24002608
 8004de8:	240010d8 	.word	0x240010d8
 8004dec:	24002460 	.word	0x24002460
 8004df0:	e0040005 	.word	0xe0040005
 8004df4:	e0600009 	.word	0xe0600009

08004df8 <iface_router_rm>:
{
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004e00:	f04f 33ff 	mov.w	r3, #4294967295
 8004e04:	480f      	ldr	r0, [pc, #60]	; (8004e44 <iface_router_rm+0x4c>)
 8004e06:	f010 fdbf 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	if (!router->is_used) {
 8004e0a:	f895 4022 	ldrb.w	r4, [r5, #34]	; 0x22
 8004e0e:	f014 0401 	ands.w	r4, r4, #1
 8004e12:	d012      	beq.n	8004e3a <iface_router_rm+0x42>
	iface_router_notify_deletion(router, "has been removed");
 8004e14:	4628      	mov	r0, r5
 8004e16:	f7ff fe7b 	bl	8004b10 <iface_router_notify_deletion.constprop.0>
	if (sys_slist_find_and_remove(&active_router_timers, &router->node)) {
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	480a      	ldr	r0, [pc, #40]	; (8004e48 <iface_router_rm+0x50>)
 8004e1e:	f010 fd07 	bl	8015830 <sys_slist_find_and_remove>
 8004e22:	b118      	cbz	r0, 8004e2c <iface_router_rm+0x34>
		iface_router_update_timer(k_uptime_get_32());
 8004e24:	f010 fd93 	bl	801594e <k_uptime_get_32>
 8004e28:	f7ff ff2a 	bl	8004c80 <iface_router_update_timer>
	router->is_used = false;
 8004e2c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
	ret = true;
 8004e30:	2401      	movs	r4, #1
	router->is_used = false;
 8004e32:	f36f 0300 	bfc	r3, #0, #1
 8004e36:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	k_mutex_unlock(&lock);
 8004e3a:	4802      	ldr	r0, [pc, #8]	; (8004e44 <iface_router_rm+0x4c>)
 8004e3c:	f010 fdc7 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8004e40:	4620      	mov	r0, r4
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	240010d8 	.word	0x240010d8
 8004e48:	24002460 	.word	0x24002460

08004e4c <net_if_ipv6_start_dad>:
{
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	460c      	mov	r4, r1
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
 8004e50:	2100      	movs	r1, #0
{
 8004e52:	4602      	mov	r2, r0
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
 8004e54:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 */
static inline bool net_if_is_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP) &&
 8004e58:	f010 fd9f 	bl	801599a <net_if_flag_is_set>
 8004e5c:	b360      	cbz	r0, 8004eb8 <net_if_ipv6_start_dad+0x6c>
	       net_if_flag_is_set(iface, NET_IF_RUNNING);
 8004e5e:	2108      	movs	r1, #8
 8004e60:	4610      	mov	r0, r2
 8004e62:	f010 fd9a 	bl	801599a <net_if_flag_is_set>
	if (net_if_is_up(iface)) {
 8004e66:	b338      	cbz	r0, 8004eb8 <net_if_ipv6_start_dad+0x6c>
		ifaddr->dad_count = 1U;
 8004e68:	2301      	movs	r3, #1
		if (!net_ipv6_start_dad(iface, ifaddr)) {
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4610      	mov	r0, r2
		ifaddr->dad_count = 1U;
 8004e6e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		if (!net_ipv6_start_dad(iface, ifaddr)) {
 8004e72:	f014 f83d 	bl	8018ef0 <net_ipv6_start_dad>
 8004e76:	b9f8      	cbnz	r0, 8004eb8 <net_if_ipv6_start_dad+0x6c>
			ifaddr->dad_start = k_uptime_get_32();
 8004e78:	f010 fd69 	bl	801594e <k_uptime_get_32>
			k_mutex_lock(&lock, K_FOREVER);
 8004e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e80:	f04f 32ff 	mov.w	r2, #4294967295
			ifaddr->dad_start = k_uptime_get_32();
 8004e84:	62a0      	str	r0, [r4, #40]	; 0x28
			k_mutex_lock(&lock, K_FOREVER);
 8004e86:	480d      	ldr	r0, [pc, #52]	; (8004ebc <net_if_ipv6_start_dad+0x70>)
 8004e88:	f010 fd7e 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
			sys_slist_append(&active_dad_timers, &ifaddr->dad_node);
 8004e8c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8004e90:	480b      	ldr	r0, [pc, #44]	; (8004ec0 <net_if_ipv6_start_dad+0x74>)
 8004e92:	f010 fcc3 	bl	801581c <sys_slist_append>
			k_mutex_unlock(&lock);
 8004e96:	4809      	ldr	r0, [pc, #36]	; (8004ebc <net_if_ipv6_start_dad+0x70>)
 8004e98:	f010 fd99 	bl	80159ce <k_mutex_unlock.isra.0>
 8004e9c:	4809      	ldr	r0, [pc, #36]	; (8004ec4 <net_if_ipv6_start_dad+0x78>)
 8004e9e:	f016 ff9f 	bl	801bde0 <z_timeout_remaining>
			if (!k_work_delayable_remaining_get(&dad_timer)) {
 8004ea2:	ea50 0301 	orrs.w	r3, r0, r1
 8004ea6:	d107      	bne.n	8004eb8 <net_if_ipv6_start_dad+0x6c>
				k_work_reschedule(&dad_timer,
 8004ea8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004eac:	2300      	movs	r3, #0
 8004eae:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <net_if_ipv6_start_dad+0x7c>)
}
 8004eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_work_reschedule(&dad_timer,
 8004eb4:	f00d bab2 	b.w	801241c <k_work_reschedule>
}
 8004eb8:	bd10      	pop	{r4, pc}
 8004eba:	bf00      	nop
 8004ebc:	240010d8 	.word	0x240010d8
 8004ec0:	24002450 	.word	0x24002450
 8004ec4:	240015f8 	.word	0x240015f8
 8004ec8:	240015e8 	.word	0x240015e8

08004ecc <iface_router_lookup>:
{
 8004ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	4c1e      	ldr	r4, [pc, #120]	; (8004f4c <iface_router_lookup+0x80>)
 8004ed4:	4681      	mov	r9, r0
 8004ed6:	4616      	mov	r6, r2
	k_mutex_lock(&lock, K_FOREVER);
 8004ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8004edc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee0:	481b      	ldr	r0, [pc, #108]	; (8004f50 <iface_router_lookup+0x84>)
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 8004ee2:	f04f 0800 	mov.w	r8, #0
	k_mutex_lock(&lock, K_FOREVER);
 8004ee6:	f010 fd4f 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 8004eea:	4625      	mov	r5, r4
		if (!routers[i].is_used ||
 8004eec:	f04f 0b24 	mov.w	fp, #36	; 0x24
 8004ef0:	b2ba      	uxth	r2, r7
 8004ef2:	fb0b fa08 	mul.w	sl, fp, r8
 8004ef6:	eb05 030a 	add.w	r3, r5, sl
 8004efa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004efe:	07db      	lsls	r3, r3, #31
 8004f00:	d51e      	bpl.n	8004f40 <iface_router_lookup+0x74>
 8004f02:	88a3      	ldrh	r3, [r4, #4]
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d11b      	bne.n	8004f40 <iface_router_lookup+0x74>
		    routers[i].address.family != family ||
 8004f08:	69a3      	ldr	r3, [r4, #24]
 8004f0a:	454b      	cmp	r3, r9
 8004f0c:	d118      	bne.n	8004f40 <iface_router_lookup+0x74>
		if ((IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6 &&
 8004f0e:	2f02      	cmp	r7, #2
 8004f10:	f104 0008 	add.w	r0, r4, #8
 8004f14:	d110      	bne.n	8004f38 <iface_router_lookup+0x6c>
		     net_ipv6_addr_cmp(net_if_router_ipv6(&routers[i]),
 8004f16:	4631      	mov	r1, r6
 8004f18:	9201      	str	r2, [sp, #4]
 8004f1a:	f010 fd10 	bl	801593e <net_ipv6_addr_cmp>
		if ((IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6 &&
 8004f1e:	9a01      	ldr	r2, [sp, #4]
 8004f20:	b170      	cbz	r0, 8004f40 <iface_router_lookup+0x74>
			router = &routers[i];
 8004f22:	4455      	add	r5, sl
	k_mutex_unlock(&lock);
 8004f24:	480a      	ldr	r0, [pc, #40]	; (8004f50 <iface_router_lookup+0x84>)
 8004f26:	f010 fd52 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	b003      	add	sp, #12
 8004f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f32:	f04f 0801 	mov.w	r8, #1
 8004f36:	e7dc      	b.n	8004ef2 <iface_router_lookup+0x26>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8004f38:	6831      	ldr	r1, [r6, #0]
 8004f3a:	68a3      	ldr	r3, [r4, #8]
		    (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET &&
 8004f3c:	4299      	cmp	r1, r3
 8004f3e:	d0f0      	beq.n	8004f22 <iface_router_lookup+0x56>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 8004f40:	3424      	adds	r4, #36	; 0x24
 8004f42:	f1b8 0f00 	cmp.w	r8, #0
 8004f46:	d0f4      	beq.n	8004f32 <iface_router_lookup+0x66>
	struct net_if_router *router = NULL;
 8004f48:	2500      	movs	r5, #0
 8004f4a:	e7eb      	b.n	8004f24 <iface_router_lookup+0x58>
 8004f4c:	24002608 	.word	0x24002608
 8004f50:	240010d8 	.word	0x240010d8

08004f54 <net_if_ipv4_get_best_match>:
{
 8004f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f58:	4605      	mov	r5, r0
 8004f5a:	4688      	mov	r8, r1
 8004f5c:	4616      	mov	r6, r2
	net_if_lock(iface);
 8004f5e:	f010 fd15 	bl	801598c <net_if_lock>
	ipv4 = iface->config.ip.ipv4;
 8004f62:	68ec      	ldr	r4, [r5, #12]
	if (!ipv4) {
 8004f64:	b9c4      	cbnz	r4, 8004f98 <net_if_ipv4_get_best_match+0x44>
	k_mutex_unlock(&iface->lock);
 8004f66:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8004f6a:	f010 fd30 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8004f6e:	4620      	mov	r0, r4
 8004f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 8004f74:	8823      	ldrh	r3, [r4, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d116      	bne.n	8004fa8 <net_if_ipv4_get_best_match+0x54>
	    !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
 8004f7a:	3404      	adds	r4, #4
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f7ff fdbb 	bl	8004af8 <net_ipv4_is_ll_addr>
	    addr->address.family == AF_INET &&
 8004f82:	b988      	cbnz	r0, 8004fa8 <net_if_ipv4_get_best_match+0x54>
	return get_ipaddr_diff((const uint8_t *)src, (const uint8_t *)dst, 4);
 8004f84:	2204      	movs	r2, #4
 8004f86:	4621      	mov	r1, r4
 8004f88:	4640      	mov	r0, r8
 8004f8a:	f010 fc99 	bl	80158c0 <get_ipaddr_diff>
		if (len >= *best_so_far) {
 8004f8e:	7833      	ldrb	r3, [r6, #0]
 8004f90:	4283      	cmp	r3, r0
 8004f92:	d809      	bhi.n	8004fa8 <net_if_ipv4_get_best_match+0x54>
			*best_so_far = len;
 8004f94:	7030      	strb	r0, [r6, #0]
out:
 8004f96:	e7e6      	b.n	8004f66 <net_if_ipv4_get_best_match+0x12>
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 8004f98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f9a:	4a04      	ldr	r2, [pc, #16]	; (8004fac <net_if_ipv4_get_best_match+0x58>)
 8004f9c:	f023 437d 	bic.w	r3, r3, #4244635648	; 0xfd000000
 8004fa0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d0e5      	beq.n	8004f74 <net_if_ipv4_get_best_match+0x20>
	struct in_addr *src = NULL;
 8004fa8:	2400      	movs	r4, #0
 8004faa:	e7dc      	b.n	8004f66 <net_if_ipv4_get_best_match+0x12>
 8004fac:	02000100 	.word	0x02000100

08004fb0 <net_if_ipv6_get_best_match>:
{
 8004fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	460d      	mov	r5, r1
 8004fb8:	4690      	mov	r8, r2
	net_if_lock(iface);
 8004fba:	f010 fce7 	bl	801598c <net_if_lock>
	ipv6 = iface->config.ip.ipv6;
 8004fbe:	68b7      	ldr	r7, [r6, #8]
	if (!ipv6) {
 8004fc0:	2f00      	cmp	r7, #0
 8004fc2:	d03b      	beq.n	800503c <net_if_ipv6_get_best_match+0x8c>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 8004fc4:	2400      	movs	r4, #0
 8004fc6:	1d39      	adds	r1, r7, #4
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 8004fc8:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8004fcc:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <net_if_ipv6_get_best_match+0x90>)
	struct in6_addr *src = NULL;
 8004fce:	46a1      	mov	r9, r4
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 8004fd0:	fb0b 7a04 	mla	sl, fp, r4, r7
 8004fd4:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8004fd8:	f022 427d 	bic.w	r2, r2, #4244635648	; 0xfd000000
 8004fdc:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d120      	bne.n	8005026 <net_if_ipv6_get_best_match+0x76>
 8004fe4:	f831 2c04 	ldrh.w	r2, [r1, #-4]
 8004fe8:	2a02      	cmp	r2, #2
 8004fea:	d11c      	bne.n	8005026 <net_if_ipv6_get_best_match+0x76>
	    addr->address.family == AF_INET6 &&
 8004fec:	8808      	ldrh	r0, [r1, #0]
 8004fee:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8004ff2:	4290      	cmp	r0, r2
 8004ff4:	d017      	beq.n	8005026 <net_if_ipv6_get_best_match+0x76>
	return get_ipaddr_diff((const uint8_t *)src, (const uint8_t *)dst, 16);
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f010 fc61 	bl	80158c0 <get_ipaddr_diff>
		if (len >= *best_so_far) {
 8004ffe:	f898 2000 	ldrb.w	r2, [r8]
 8005002:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <net_if_ipv6_get_best_match+0x90>)
 8005004:	4282      	cmp	r2, r0
 8005006:	d80e      	bhi.n	8005026 <net_if_ipv6_get_best_match+0x76>
			if (ipv6->unicast[i].is_mesh_local && len < 64 &&
 8005008:	f89a 202f 	ldrb.w	r2, [sl, #47]	; 0x2f
 800500c:	0752      	lsls	r2, r2, #29
 800500e:	d507      	bpl.n	8005020 <net_if_ipv6_get_best_match+0x70>
 8005010:	283f      	cmp	r0, #63	; 0x3f
 8005012:	d805      	bhi.n	8005020 <net_if_ipv6_get_best_match+0x70>
 * false otherwise.
 */
static inline bool net_ipv6_is_addr_mcast_scope(const struct in6_addr *addr,
						int scope)
{
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 8005014:	782a      	ldrb	r2, [r5, #0]
 8005016:	2aff      	cmp	r2, #255	; 0xff
 8005018:	d105      	bne.n	8005026 <net_if_ipv6_get_best_match+0x76>
 800501a:	786a      	ldrb	r2, [r5, #1]
 800501c:	2a03      	cmp	r2, #3
 800501e:	d102      	bne.n	8005026 <net_if_ipv6_get_best_match+0x76>
			*best_so_far = len;
 8005020:	4689      	mov	r9, r1
 8005022:	f888 0000 	strb.w	r0, [r8]
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 8005026:	3401      	adds	r4, #1
 8005028:	3130      	adds	r1, #48	; 0x30
 800502a:	2c03      	cmp	r4, #3
 800502c:	d1d0      	bne.n	8004fd0 <net_if_ipv6_get_best_match+0x20>
 800502e:	f106 0048 	add.w	r0, r6, #72	; 0x48
 8005032:	f010 fccc 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8005036:	4648      	mov	r0, r9
 8005038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct in6_addr *src = NULL;
 800503c:	46b9      	mov	r9, r7
 800503e:	e7f6      	b.n	800502e <net_if_ipv6_get_best_match+0x7e>
 8005040:	02000100 	.word	0x02000100

08005044 <iface_router_expired>:
{
 8005044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return list->head;
 8005048:	4e20      	ldr	r6, [pc, #128]	; (80050cc <iface_router_expired+0x88>)
	uint32_t current_time = k_uptime_get_32();
 800504a:	f010 fc80 	bl	801594e <k_uptime_get_32>
	k_mutex_lock(&lock, K_FOREVER);
 800504e:	f04f 32ff 	mov.w	r2, #4294967295
	uint32_t current_time = k_uptime_get_32();
 8005052:	4680      	mov	r8, r0
	k_mutex_lock(&lock, K_FOREVER);
 8005054:	f04f 33ff 	mov.w	r3, #4294967295
 8005058:	481d      	ldr	r0, [pc, #116]	; (80050d0 <iface_router_expired+0x8c>)
 800505a:	f010 fc95 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
 800505e:	6834      	ldr	r4, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 8005060:	b93c      	cbnz	r4, 8005072 <iface_router_expired+0x2e>
	iface_router_update_timer(current_time);
 8005062:	4640      	mov	r0, r8
 8005064:	f7ff fe0c 	bl	8004c80 <iface_router_update_timer>
	k_mutex_unlock(&lock);
 8005068:	4819      	ldr	r0, [pc, #100]	; (80050d0 <iface_router_expired+0x8c>)
}
 800506a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_mutex_unlock(&lock);
 800506e:	f010 bcae 	b.w	80159ce <k_mutex_unlock.isra.0>
	return node->next;
 8005072:	2500      	movs	r5, #0
 8005074:	6827      	ldr	r7, [r4, #0]
	ends += MSEC_PER_SEC * router->lifetime;
 8005076:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	parent->next = child;
 800507a:	46a9      	mov	r9, r5
	return (int32_t)(ends - now);
 800507c:	69e3      	ldr	r3, [r4, #28]
			prev_node = &router->node;
 800507e:	4622      	mov	r2, r4
	ends += MSEC_PER_SEC * router->lifetime;
 8005080:	8c21      	ldrh	r1, [r4, #32]
	return (int32_t)(ends - now);
 8005082:	eba3 0308 	sub.w	r3, r3, r8
 8005086:	fb0a 3301 	mla	r3, sl, r1, r3
		if (ends > 0) {
 800508a:	2b00      	cmp	r3, #0
 800508c:	dc12      	bgt.n	80050b4 <iface_router_expired+0x70>
		iface_router_notify_deletion(router, "has expired");
 800508e:	4620      	mov	r0, r4
 8005090:	f7ff fd3e 	bl	8004b10 <iface_router_notify_deletion.constprop.0>
Z_GENLIST_REMOVE(slist, snode)
 8005094:	6822      	ldr	r2, [r4, #0]
 8005096:	b99d      	cbnz	r5, 80050c0 <iface_router_expired+0x7c>
 8005098:	6873      	ldr	r3, [r6, #4]
	list->head = node;
 800509a:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 800509c:	42a3      	cmp	r3, r4
 800509e:	d100      	bne.n	80050a2 <iface_router_expired+0x5e>
	list->tail = node;
 80050a0:	6072      	str	r2, [r6, #4]
		router->is_used = false;
 80050a2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80050a6:	462a      	mov	r2, r5
	parent->next = child;
 80050a8:	f8c4 9000 	str.w	r9, [r4]
 80050ac:	f369 0300 	bfi	r3, r9, #0, #1
 80050b0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 80050b4:	2f00      	cmp	r7, #0
 80050b6:	d0d4      	beq.n	8005062 <iface_router_expired+0x1e>
	return node->next;
 80050b8:	463c      	mov	r4, r7
 80050ba:	4615      	mov	r5, r2
 80050bc:	683f      	ldr	r7, [r7, #0]
 80050be:	e7dd      	b.n	800507c <iface_router_expired+0x38>
	parent->next = child;
 80050c0:	602a      	str	r2, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
 80050c2:	6873      	ldr	r3, [r6, #4]
 80050c4:	42a3      	cmp	r3, r4
	list->tail = node;
 80050c6:	bf08      	it	eq
 80050c8:	6075      	streq	r5, [r6, #4]
}
 80050ca:	e7ea      	b.n	80050a2 <iface_router_expired+0x5e>
 80050cc:	24002460 	.word	0x24002460
 80050d0:	240010d8 	.word	0x240010d8

080050d4 <z_impl_net_if_get_by_index>:
	if (index <= 0) {
 80050d4:	2800      	cmp	r0, #0
 80050d6:	dd09      	ble.n	80050ec <z_impl_net_if_get_by_index+0x18>
	if (&_net_if_list_start[index - 1] >= _net_if_list_end) {
 80050d8:	1e43      	subs	r3, r0, #1
 80050da:	2260      	movs	r2, #96	; 0x60
 80050dc:	4804      	ldr	r0, [pc, #16]	; (80050f0 <z_impl_net_if_get_by_index+0x1c>)
 80050de:	fb02 0003 	mla	r0, r2, r3, r0
		return NULL;
 80050e2:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <z_impl_net_if_get_by_index+0x20>)
 80050e4:	4298      	cmp	r0, r3
 80050e6:	bf28      	it	cs
 80050e8:	2000      	movcs	r0, #0
 80050ea:	4770      	bx	lr
 80050ec:	2000      	movs	r0, #0
}
 80050ee:	4770      	bx	lr
 80050f0:	24001278 	.word	0x24001278
 80050f4:	240012d8 	.word	0x240012d8

080050f8 <net_if_lookup_by_dev>:
{
 80050f8:	4603      	mov	r3, r0
	STRUCT_SECTION_FOREACH(net_if, iface) {
 80050fa:	4a06      	ldr	r2, [pc, #24]	; (8005114 <net_if_lookup_by_dev+0x1c>)
 80050fc:	4806      	ldr	r0, [pc, #24]	; (8005118 <net_if_lookup_by_dev+0x20>)
 80050fe:	4290      	cmp	r0, r2
 8005100:	d301      	bcc.n	8005106 <net_if_lookup_by_dev+0xe>
	return NULL;
 8005102:	2000      	movs	r0, #0
}
 8005104:	4770      	bx	lr
	return iface->if_dev->dev;
 8005106:	6801      	ldr	r1, [r0, #0]
		if (net_if_get_device(iface) == dev) {
 8005108:	6809      	ldr	r1, [r1, #0]
 800510a:	428b      	cmp	r3, r1
 800510c:	d0fa      	beq.n	8005104 <net_if_lookup_by_dev+0xc>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800510e:	3060      	adds	r0, #96	; 0x60
 8005110:	e7f5      	b.n	80050fe <net_if_lookup_by_dev+0x6>
 8005112:	bf00      	nop
 8005114:	240012d8 	.word	0x240012d8
 8005118:	24001278 	.word	0x24001278

0800511c <net_if_get_default>:
	if (&_net_if_list_start[0] == &_net_if_list_end[0]) {
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <net_if_get_default+0x18>)
 800511e:	4a06      	ldr	r2, [pc, #24]	; (8005138 <net_if_get_default+0x1c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d005      	beq.n	8005130 <net_if_get_default+0x14>
	if (default_iface != NULL) {
 8005124:	4a05      	ldr	r2, [pc, #20]	; (800513c <net_if_get_default+0x20>)
 8005126:	6810      	ldr	r0, [r2, #0]
	return iface ? iface : _net_if_list_start;
 8005128:	2800      	cmp	r0, #0
 800512a:	bf08      	it	eq
 800512c:	4618      	moveq	r0, r3
 800512e:	4770      	bx	lr
		return NULL;
 8005130:	2000      	movs	r0, #0
}
 8005132:	4770      	bx	lr
 8005134:	24001278 	.word	0x24001278
 8005138:	240012d8 	.word	0x240012d8
 800513c:	24002470 	.word	0x24002470

08005140 <net_if_mcast_monitor>:
{
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	k_mutex_lock(&lock, K_FOREVER);
 8005142:	f04f 33ff 	mov.w	r3, #4294967295
{
 8005146:	4605      	mov	r5, r0
 8005148:	4617      	mov	r7, r2
	k_mutex_lock(&lock, K_FOREVER);
 800514a:	480e      	ldr	r0, [pc, #56]	; (8005184 <net_if_mcast_monitor+0x44>)
 800514c:	f04f 32ff 	mov.w	r2, #4294967295
{
 8005150:	460e      	mov	r6, r1
	k_mutex_lock(&lock, K_FOREVER);
 8005152:	f010 fc19 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 8005156:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <net_if_mcast_monitor+0x48>)
 8005158:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
 800515a:	b923      	cbnz	r3, 8005166 <net_if_mcast_monitor+0x26>
	k_mutex_unlock(&lock);
 800515c:	4809      	ldr	r0, [pc, #36]	; (8005184 <net_if_mcast_monitor+0x44>)
}
 800515e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
 8005162:	f010 bc34 	b.w	80159ce <k_mutex_unlock.isra.0>
	return node->next;
 8005166:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	42aa      	cmp	r2, r5
 800516c:	d104      	bne.n	8005178 <net_if_mcast_monitor+0x38>
			mon->cb(iface, addr, is_joined);
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	463a      	mov	r2, r7
 8005172:	4631      	mov	r1, r6
 8005174:	4628      	mov	r0, r5
 8005176:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
 8005178:	2c00      	cmp	r4, #0
 800517a:	d0ef      	beq.n	800515c <net_if_mcast_monitor+0x1c>
 800517c:	4623      	mov	r3, r4
 800517e:	6824      	ldr	r4, [r4, #0]
 8005180:	e7f2      	b.n	8005168 <net_if_mcast_monitor+0x28>
 8005182:	bf00      	nop
 8005184:	240010d8 	.word	0x240010d8
 8005188:	24002600 	.word	0x24002600

0800518c <net_if_config_ipv6_get>:
{
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4605      	mov	r5, r0
 8005190:	460c      	mov	r4, r1
	net_if_lock(iface);
 8005192:	f010 fbfb 	bl	801598c <net_if_lock>
	if (!net_if_flag_is_set(iface, NET_IF_IPV6)) {
 8005196:	2107      	movs	r1, #7
 8005198:	4628      	mov	r0, r5
 800519a:	f010 fbfe 	bl	801599a <net_if_flag_is_set>
 800519e:	b320      	cbz	r0, 80051ea <net_if_config_ipv6_get+0x5e>
	if (iface->config.ip.ipv6) {
 80051a0:	68ab      	ldr	r3, [r5, #8]
 80051a2:	b143      	cbz	r3, 80051b6 <net_if_config_ipv6_get+0x2a>
		if (ipv6) {
 80051a4:	b10c      	cbz	r4, 80051aa <net_if_config_ipv6_get+0x1e>
			*ipv6 = iface->config.ip.ipv6;
 80051a6:	6023      	str	r3, [r4, #0]
	int ret = 0;
 80051a8:	2400      	movs	r4, #0
	k_mutex_unlock(&iface->lock);
 80051aa:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80051ae:	f010 fc0e 	bl	80159ce <k_mutex_unlock.isra.0>
}
 80051b2:	4620      	mov	r0, r4
 80051b4:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&lock, K_FOREVER);
 80051b6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ba:	f04f 33ff 	mov.w	r3, #4294967295
 80051be:	480c      	ldr	r0, [pc, #48]	; (80051f0 <net_if_config_ipv6_get+0x64>)
 80051c0:	f010 fbe2 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
		if (ipv6_addresses[i].iface) {
 80051c4:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <net_if_config_ipv6_get+0x68>)
 80051c6:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80051ca:	b942      	cbnz	r2, 80051de <net_if_config_ipv6_get+0x52>
		iface->config.ip.ipv6 = &ipv6_addresses[i].ipv6;
 80051cc:	60ab      	str	r3, [r5, #8]
		ipv6_addresses[i].iface = iface;
 80051ce:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
		if (ipv6) {
 80051d2:	b104      	cbz	r4, 80051d6 <net_if_config_ipv6_get+0x4a>
			*ipv6 = &ipv6_addresses[i].ipv6;
 80051d4:	6023      	str	r3, [r4, #0]
		k_mutex_unlock(&lock);
 80051d6:	4806      	ldr	r0, [pc, #24]	; (80051f0 <net_if_config_ipv6_get+0x64>)
 80051d8:	f010 fbf9 	bl	80159ce <k_mutex_unlock.isra.0>
 80051dc:	e7e4      	b.n	80051a8 <net_if_config_ipv6_get+0x1c>
	k_mutex_unlock(&lock);
 80051de:	4804      	ldr	r0, [pc, #16]	; (80051f0 <net_if_config_ipv6_get+0x64>)
	ret = -ESRCH;
 80051e0:	f06f 0402 	mvn.w	r4, #2
	k_mutex_unlock(&lock);
 80051e4:	f010 fbf3 	bl	80159ce <k_mutex_unlock.isra.0>
	ret = -ESRCH;
 80051e8:	e7df      	b.n	80051aa <net_if_config_ipv6_get+0x1e>
		ret = -ENOTSUP;
 80051ea:	f06f 0485 	mvn.w	r4, #133	; 0x85
 80051ee:	e7dc      	b.n	80051aa <net_if_config_ipv6_get+0x1e>
 80051f0:	240010d8 	.word	0x240010d8
 80051f4:	240024cc 	.word	0x240024cc

080051f8 <net_if_start_rs>:
{
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4604      	mov	r4, r0
	net_if_lock(iface);
 80051fc:	f010 fbc6 	bl	801598c <net_if_lock>
	if (net_if_flag_is_set(iface, NET_IF_IPV6_NO_ND)) {
 8005200:	210b      	movs	r1, #11
 8005202:	4620      	mov	r0, r4
 8005204:	f010 fbc9 	bl	801599a <net_if_flag_is_set>
 8005208:	bb20      	cbnz	r0, 8005254 <net_if_start_rs+0x5c>
	ipv6 = iface->config.ip.ipv6;
 800520a:	68a5      	ldr	r5, [r4, #8]
	if (!ipv6) {
 800520c:	b315      	cbz	r5, 8005254 <net_if_start_rs+0x5c>
	if (!net_ipv6_start_rs(iface)) {
 800520e:	4620      	mov	r0, r4
 8005210:	f013 ff7c 	bl	801910c <net_ipv6_start_rs>
 8005214:	b9f0      	cbnz	r0, 8005254 <net_if_start_rs+0x5c>
		ipv6->rs_start = k_uptime_get_32();
 8005216:	f010 fb9a 	bl	801594e <k_uptime_get_32>
		k_mutex_lock(&lock, K_FOREVER);
 800521a:	f04f 33ff 	mov.w	r3, #4294967295
 800521e:	f04f 32ff 	mov.w	r2, #4294967295
		ipv6->rs_start = k_uptime_get_32();
 8005222:	f8c5 0120 	str.w	r0, [r5, #288]	; 0x120
		k_mutex_lock(&lock, K_FOREVER);
 8005226:	480e      	ldr	r0, [pc, #56]	; (8005260 <net_if_start_rs+0x68>)
 8005228:	f010 fbae 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
		sys_slist_append(&active_rs_timers, &ipv6->rs_node);
 800522c:	f505 718e 	add.w	r1, r5, #284	; 0x11c
 8005230:	480c      	ldr	r0, [pc, #48]	; (8005264 <net_if_start_rs+0x6c>)
 8005232:	f010 faf3 	bl	801581c <sys_slist_append>
		k_mutex_unlock(&lock);
 8005236:	480a      	ldr	r0, [pc, #40]	; (8005260 <net_if_start_rs+0x68>)
 8005238:	f010 fbc9 	bl	80159ce <k_mutex_unlock.isra.0>
 800523c:	480a      	ldr	r0, [pc, #40]	; (8005268 <net_if_start_rs+0x70>)
 800523e:	f016 fdcf 	bl	801bde0 <z_timeout_remaining>
		if (!k_work_delayable_remaining_get(&rs_timer)) {
 8005242:	ea50 0301 	orrs.w	r3, r0, r1
 8005246:	d105      	bne.n	8005254 <net_if_start_rs+0x5c>
			k_work_reschedule(&rs_timer, K_MSEC(RS_TIMEOUT));
 8005248:	f242 7210 	movw	r2, #10000	; 0x2710
 800524c:	2300      	movs	r3, #0
 800524e:	4807      	ldr	r0, [pc, #28]	; (800526c <net_if_start_rs+0x74>)
 8005250:	f00d f8e4 	bl	801241c <k_work_reschedule>
 8005254:	f104 0048 	add.w	r0, r4, #72	; 0x48
}
 8005258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800525c:	f010 bbb7 	b.w	80159ce <k_mutex_unlock.isra.0>
 8005260:	240010d8 	.word	0x240010d8
 8005264:	24002468 	.word	0x24002468
 8005268:	24001688 	.word	0x24001688
 800526c:	24001678 	.word	0x24001678

08005270 <rs_timeout>:
{
 8005270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t current_time = k_uptime_get_32();
 8005272:	f010 fb6c 	bl	801594e <k_uptime_get_32>
	list->head = NULL;
 8005276:	2300      	movs	r3, #0
	return list->head;
 8005278:	4d2f      	ldr	r5, [pc, #188]	; (8005338 <rs_timeout+0xc8>)
 800527a:	4606      	mov	r6, r0
	k_mutex_lock(&lock, K_FOREVER);
 800527c:	f04f 32ff 	mov.w	r2, #4294967295
 8005280:	482e      	ldr	r0, [pc, #184]	; (800533c <rs_timeout+0xcc>)
	list->tail = NULL;
 8005282:	e9cd 3300 	strd	r3, r3, [sp]
 8005286:	f04f 33ff 	mov.w	r3, #4294967295
 800528a:	f010 fb7d 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 800528e:	682b      	ldr	r3, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
 8005290:	b37b      	cbz	r3, 80052f2 <rs_timeout+0x82>
	return node->next;
 8005292:	681c      	ldr	r4, [r3, #0]
 8005294:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8005298:	b10c      	cbz	r4, 800529e <rs_timeout+0x2e>
 800529a:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
	parent->next = child;
 800529e:	2700      	movs	r7, #0
		delay = (int32_t)(ipv6->rs_start + RS_TIMEOUT - current_time);
 80052a0:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
 80052a4:	1b89      	subs	r1, r1, r6
 80052a6:	f501 737a 	add.w	r3, r1, #1000	; 0x3e8
		if (delay > 0) {
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	dc16      	bgt.n	80052dc <rs_timeout+0x6c>
Z_GENLIST_REMOVE(slist, snode)
 80052ae:	6868      	ldr	r0, [r5, #4]
		sys_slist_remove(&active_rs_timers, NULL, &ipv6->rs_node);
 80052b0:	f502 718e 	add.w	r1, r2, #284	; 0x11c
	return node->next;
 80052b4:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
Z_GENLIST_REMOVE(slist, snode)
 80052b8:	4281      	cmp	r1, r0
	parent->next = child;
 80052ba:	f8c2 711c 	str.w	r7, [r2, #284]	; 0x11c
		sys_slist_append(&expired_list, &ipv6->rs_node);
 80052be:	4668      	mov	r0, sp
	list->head = node;
 80052c0:	602b      	str	r3, [r5, #0]
	list->tail = node;
 80052c2:	bf08      	it	eq
 80052c4:	606b      	streq	r3, [r5, #4]
 80052c6:	f010 faa9 	bl	801581c <sys_slist_append>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
 80052ca:	b194      	cbz	r4, 80052f2 <rs_timeout+0x82>
	return node->next;
 80052cc:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80052d0:	b10b      	cbz	r3, 80052d6 <rs_timeout+0x66>
 80052d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
{
 80052d6:	4622      	mov	r2, r4
 80052d8:	461c      	mov	r4, r3
 80052da:	e7e1      	b.n	80052a0 <rs_timeout+0x30>
		k_work_reschedule(&rs_timer, K_MSEC(ipv6->rs_start +
 80052dc:	f511 7f7a 	cmn.w	r1, #1000	; 0x3e8
 80052e0:	f04f 020a 	mov.w	r2, #10
 80052e4:	4816      	ldr	r0, [pc, #88]	; (8005340 <rs_timeout+0xd0>)
 80052e6:	bf08      	it	eq
 80052e8:	2300      	moveq	r3, #0
 80052ea:	fba3 2302 	umull	r2, r3, r3, r2
 80052ee:	f00d f895 	bl	801241c <k_work_reschedule>
	k_mutex_unlock(&lock);
 80052f2:	4812      	ldr	r0, [pc, #72]	; (800533c <rs_timeout+0xcc>)
 80052f4:	f010 fb6b 	bl	80159ce <k_mutex_unlock.isra.0>
	return list->head;
 80052f8:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&expired_list, ipv6, rs_node) {
 80052fa:	b1dc      	cbz	r4, 8005334 <rs_timeout+0xc4>
 80052fc:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
		STRUCT_SECTION_FOREACH(net_if, tmp) {
 8005300:	4d10      	ldr	r5, [pc, #64]	; (8005344 <rs_timeout+0xd4>)
		ipv6->rs_count++;
 8005302:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
		STRUCT_SECTION_FOREACH(net_if, tmp) {
 8005306:	4810      	ldr	r0, [pc, #64]	; (8005348 <rs_timeout+0xd8>)
		ipv6->rs_count++;
 8005308:	3301      	adds	r3, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
		STRUCT_SECTION_FOREACH(net_if, tmp) {
 8005310:	42a8      	cmp	r0, r5
 8005312:	d305      	bcc.n	8005320 <rs_timeout+0xb0>
	return node->next;
 8005314:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
	SYS_SLIST_FOR_EACH_CONTAINER(&expired_list, ipv6, rs_node) {
 8005318:	b164      	cbz	r4, 8005334 <rs_timeout+0xc4>
 800531a:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 800531e:	e7f0      	b.n	8005302 <rs_timeout+0x92>
			if (tmp->config.ip.ipv6 == ipv6) {
 8005320:	6882      	ldr	r2, [r0, #8]
 8005322:	42a2      	cmp	r2, r4
 8005324:	d001      	beq.n	800532a <rs_timeout+0xba>
		STRUCT_SECTION_FOREACH(net_if, tmp) {
 8005326:	3060      	adds	r0, #96	; 0x60
 8005328:	e7f2      	b.n	8005310 <rs_timeout+0xa0>
			if (ipv6->rs_count < RS_COUNT) {
 800532a:	2b02      	cmp	r3, #2
 800532c:	d8f2      	bhi.n	8005314 <rs_timeout+0xa4>
				net_if_start_rs(iface);
 800532e:	f7ff ff63 	bl	80051f8 <net_if_start_rs>
 8005332:	e7ef      	b.n	8005314 <rs_timeout+0xa4>
}
 8005334:	b003      	add	sp, #12
 8005336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005338:	24002468 	.word	0x24002468
 800533c:	240010d8 	.word	0x240010d8
 8005340:	24001678 	.word	0x24001678
 8005344:	240012d8 	.word	0x240012d8
 8005348:	24001278 	.word	0x24001278

0800534c <net_if_stop_rs>:
{
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4604      	mov	r4, r0
	net_if_lock(iface);
 8005350:	f010 fb1c 	bl	801598c <net_if_lock>
	ipv6 = iface->config.ip.ipv6;
 8005354:	68a5      	ldr	r5, [r4, #8]
	if (!ipv6) {
 8005356:	b175      	cbz	r5, 8005376 <net_if_stop_rs+0x2a>
	k_mutex_lock(&lock, K_FOREVER);
 8005358:	f04f 32ff 	mov.w	r2, #4294967295
 800535c:	f04f 33ff 	mov.w	r3, #4294967295
 8005360:	4808      	ldr	r0, [pc, #32]	; (8005384 <net_if_stop_rs+0x38>)
 8005362:	f010 fb11 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	sys_slist_find_and_remove(&active_rs_timers, &ipv6->rs_node);
 8005366:	f505 718e 	add.w	r1, r5, #284	; 0x11c
 800536a:	4807      	ldr	r0, [pc, #28]	; (8005388 <net_if_stop_rs+0x3c>)
 800536c:	f010 fa60 	bl	8015830 <sys_slist_find_and_remove>
	k_mutex_unlock(&lock);
 8005370:	4804      	ldr	r0, [pc, #16]	; (8005384 <net_if_stop_rs+0x38>)
 8005372:	f010 fb2c 	bl	80159ce <k_mutex_unlock.isra.0>
 8005376:	f104 0048 	add.w	r0, r4, #72	; 0x48
}
 800537a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800537e:	f010 bb26 	b.w	80159ce <k_mutex_unlock.isra.0>
 8005382:	bf00      	nop
 8005384:	240010d8 	.word	0x240010d8
 8005388:	24002468 	.word	0x24002468

0800538c <net_if_ipv6_addr_lookup>:
{
 800538c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005390:	4680      	mov	r8, r0
 8005392:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8005394:	4c1b      	ldr	r4, [pc, #108]	; (8005404 <net_if_ipv6_addr_lookup+0x78>)
			if (!ipv6->unicast[i].is_used ||
 8005396:	f04f 0b30 	mov.w	fp, #48	; 0x30
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800539a:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8005408 <net_if_ipv6_addr_lookup+0x7c>
 800539e:	4554      	cmp	r4, sl
 80053a0:	d301      	bcc.n	80053a6 <net_if_ipv6_addr_lookup+0x1a>
	struct net_if_addr *ifaddr = NULL;
 80053a2:	2500      	movs	r5, #0
	return ifaddr;
 80053a4:	e025      	b.n	80053f2 <net_if_ipv6_addr_lookup+0x66>
		net_if_lock(iface);
 80053a6:	4620      	mov	r0, r4
 80053a8:	f104 0948 	add.w	r9, r4, #72	; 0x48
 80053ac:	f010 faee 	bl	801598c <net_if_lock>
		ipv6 = iface->config.ip.ipv6;
 80053b0:	68a3      	ldr	r3, [r4, #8]
		if (!ipv6) {
 80053b2:	b923      	cbnz	r3, 80053be <net_if_ipv6_addr_lookup+0x32>
 80053b4:	4648      	mov	r0, r9
	STRUCT_SECTION_FOREACH(net_if, iface) {
 80053b6:	3460      	adds	r4, #96	; 0x60
 80053b8:	f010 fb09 	bl	80159ce <k_mutex_unlock.isra.0>
 80053bc:	e7ef      	b.n	800539e <net_if_ipv6_addr_lookup+0x12>
 80053be:	1d19      	adds	r1, r3, #4
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 80053c0:	2700      	movs	r7, #0
			if (!ipv6->unicast[i].is_used ||
 80053c2:	fb0b 3507 	mla	r5, fp, r7, r3
 80053c6:	f895 202f 	ldrb.w	r2, [r5, #47]	; 0x2f
 80053ca:	0792      	lsls	r2, r2, #30
 80053cc:	d515      	bpl.n	80053fa <net_if_ipv6_addr_lookup+0x6e>
 80053ce:	f831 2c04 	ldrh.w	r2, [r1, #-4]
 80053d2:	2a02      	cmp	r2, #2
 80053d4:	d111      	bne.n	80053fa <net_if_ipv6_addr_lookup+0x6e>
			if (net_ipv6_is_prefix(
 80053d6:	2280      	movs	r2, #128	; 0x80
 80053d8:	4640      	mov	r0, r8
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	9100      	str	r1, [sp, #0]
 80053de:	f010 fa8a 	bl	80158f6 <net_ipv6_is_prefix>
 80053e2:	e9dd 1300 	ldrd	r1, r3, [sp]
 80053e6:	b140      	cbz	r0, 80053fa <net_if_ipv6_addr_lookup+0x6e>
				if (ret) {
 80053e8:	b106      	cbz	r6, 80053ec <net_if_ipv6_addr_lookup+0x60>
					*ret = iface;
 80053ea:	6034      	str	r4, [r6, #0]
 80053ec:	4648      	mov	r0, r9
 80053ee:	f010 faee 	bl	80159ce <k_mutex_unlock.isra.0>
}
 80053f2:	4628      	mov	r0, r5
 80053f4:	b003      	add	sp, #12
 80053f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 80053fa:	3701      	adds	r7, #1
 80053fc:	3130      	adds	r1, #48	; 0x30
 80053fe:	2f03      	cmp	r7, #3
 8005400:	d1df      	bne.n	80053c2 <net_if_ipv6_addr_lookup+0x36>
 8005402:	e7d7      	b.n	80053b4 <net_if_ipv6_addr_lookup+0x28>
 8005404:	24001278 	.word	0x24001278
 8005408:	240012d8 	.word	0x240012d8

0800540c <dad_timeout>:
{
 800540c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint32_t current_time = k_uptime_get_32();
 8005410:	f010 fa9d 	bl	801594e <k_uptime_get_32>
	list->head = NULL;
 8005414:	2300      	movs	r3, #0
	k_mutex_lock(&lock, K_FOREVER);
 8005416:	f04f 32ff 	mov.w	r2, #4294967295
	uint32_t current_time = k_uptime_get_32();
 800541a:	4606      	mov	r6, r0
	k_mutex_lock(&lock, K_FOREVER);
 800541c:	4829      	ldr	r0, [pc, #164]	; (80054c4 <dad_timeout+0xb8>)
	list->tail = NULL;
 800541e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005422:	f04f 33ff 	mov.w	r3, #4294967295
 8005426:	f010 faaf 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 800542a:	4a27      	ldr	r2, [pc, #156]	; (80054c8 <dad_timeout+0xbc>)
 800542c:	6814      	ldr	r4, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
 800542e:	b31c      	cbz	r4, 8005478 <dad_timeout+0x6c>
	return node->next;
 8005430:	f854 5924 	ldr.w	r5, [r4], #-36
 8005434:	b105      	cbz	r5, 8005438 <dad_timeout+0x2c>
 8005436:	3d24      	subs	r5, #36	; 0x24
				  DAD_TIMEOUT - current_time);
 8005438:	f1c6 0664 	rsb	r6, r6, #100	; 0x64
	parent->next = child;
 800543c:	2700      	movs	r7, #0
 800543e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005440:	4433      	add	r3, r6
		if (delay > 0) {
 8005442:	2b00      	cmp	r3, #0
 8005444:	dc12      	bgt.n	800546c <dad_timeout+0x60>
Z_GENLIST_REMOVE(slist, snode)
 8005446:	6850      	ldr	r0, [r2, #4]
		sys_slist_remove(&active_dad_timers, NULL, &ifaddr->dad_node);
 8005448:	f104 0124 	add.w	r1, r4, #36	; 0x24
	return node->next;
 800544c:	6a63      	ldr	r3, [r4, #36]	; 0x24
Z_GENLIST_REMOVE(slist, snode)
 800544e:	4281      	cmp	r1, r0
	parent->next = child;
 8005450:	6267      	str	r7, [r4, #36]	; 0x24
		sys_slist_append(&expired_list, &ifaddr->dad_node);
 8005452:	a802      	add	r0, sp, #8
	list->head = node;
 8005454:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8005456:	bf08      	it	eq
 8005458:	6053      	streq	r3, [r2, #4]
 800545a:	f010 f9df 	bl	801581c <sys_slist_append>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
 800545e:	b15d      	cbz	r5, 8005478 <dad_timeout+0x6c>
	return node->next;
 8005460:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005462:	b103      	cbz	r3, 8005466 <dad_timeout+0x5a>
 8005464:	3b24      	subs	r3, #36	; 0x24
{
 8005466:	462c      	mov	r4, r5
 8005468:	461d      	mov	r5, r3
 800546a:	e7e8      	b.n	800543e <dad_timeout+0x32>
 800546c:	220a      	movs	r2, #10
		k_work_reschedule(&dad_timer, K_MSEC((uint32_t)delay));
 800546e:	4817      	ldr	r0, [pc, #92]	; (80054cc <dad_timeout+0xc0>)
 8005470:	fb83 2302 	smull	r2, r3, r3, r2
 8005474:	f00c ffd2 	bl	801241c <k_work_reschedule>
	k_mutex_unlock(&lock);
 8005478:	4812      	ldr	r0, [pc, #72]	; (80054c4 <dad_timeout+0xb8>)
 800547a:	f010 faa8 	bl	80159ce <k_mutex_unlock.isra.0>
	return list->head;
 800547e:	9c02      	ldr	r4, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&expired_list, ifaddr, dad_node) {
 8005480:	b1e4      	cbz	r4, 80054bc <dad_timeout+0xb0>
 8005482:	3c24      	subs	r4, #36	; 0x24
		ifaddr->addr_state = NET_ADDR_PREFERRED;
 8005484:	2601      	movs	r6, #1
		iface = NULL;
 8005486:	2700      	movs	r7, #0
			net_mgmt_event_notify_with_info(
 8005488:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80054d0 <dad_timeout+0xc4>
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
 800548c:	1d25      	adds	r5, r4, #4
 800548e:	a901      	add	r1, sp, #4
		ifaddr->addr_state = NET_ADDR_PREFERRED;
 8005490:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
 8005494:	4628      	mov	r0, r5
		iface = NULL;
 8005496:	9701      	str	r7, [sp, #4]
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
 8005498:	f7ff ff78 	bl	800538c <net_if_ipv6_addr_lookup>
		if (tmp == ifaddr) {
 800549c:	4284      	cmp	r4, r0
 800549e:	d109      	bne.n	80054b4 <dad_timeout+0xa8>
			net_mgmt_event_notify_with_info(
 80054a0:	9901      	ldr	r1, [sp, #4]
 80054a2:	4640      	mov	r0, r8
 80054a4:	2310      	movs	r3, #16
 80054a6:	462a      	mov	r2, r5
 80054a8:	f001 fa5e 	bl	8006968 <net_mgmt_event_notify_with_info>
			net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
 80054ac:	4629      	mov	r1, r5
 80054ae:	9801      	ldr	r0, [sp, #4]
 80054b0:	f003 fae8 	bl	8008a84 <net_ipv6_nbr_rm>
	return node->next;
 80054b4:	6a64      	ldr	r4, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER(&expired_list, ifaddr, dad_node) {
 80054b6:	b10c      	cbz	r4, 80054bc <dad_timeout+0xb0>
 80054b8:	3c24      	subs	r4, #36	; 0x24
 80054ba:	e7e7      	b.n	800548c <dad_timeout+0x80>
}
 80054bc:	b004      	add	sp, #16
 80054be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054c2:	bf00      	nop
 80054c4:	240010d8 	.word	0x240010d8
 80054c8:	24002450 	.word	0x24002450
 80054cc:	240015e8 	.word	0x240015e8
 80054d0:	e060000d 	.word	0xe060000d

080054d4 <net_if_ipv6_addr_update_lifetime>:
{
 80054d4:	b570      	push	{r4, r5, r6, lr}
	k_mutex_lock(&lock, K_FOREVER);
 80054d6:	4e11      	ldr	r6, [pc, #68]	; (800551c <net_if_ipv6_addr_update_lifetime+0x48>)
{
 80054d8:	4604      	mov	r4, r0
	k_mutex_lock(&lock, K_FOREVER);
 80054da:	f04f 32ff 	mov.w	r2, #4294967295
 80054de:	f04f 33ff 	mov.w	r3, #4294967295
 80054e2:	4630      	mov	r0, r6
{
 80054e4:	460d      	mov	r5, r1
	k_mutex_lock(&lock, K_FOREVER);
 80054e6:	f010 fa4f 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	ifaddr->addr_state = NET_ADDR_PREFERRED;
 80054ea:	2301      	movs	r3, #1
	sys_slist_append(&active_address_lifetime_timers,
 80054ec:	3414      	adds	r4, #20
 80054ee:	480c      	ldr	r0, [pc, #48]	; (8005520 <net_if_ipv6_addr_update_lifetime+0x4c>)
	ifaddr->addr_state = NET_ADDR_PREFERRED;
 80054f0:	7663      	strb	r3, [r4, #25]
	sys_slist_append(&active_address_lifetime_timers,
 80054f2:	4621      	mov	r1, r4
 80054f4:	f010 f992 	bl	801581c <sys_slist_append>
	net_timeout_set(&ifaddr->lifetime, vlifetime, k_uptime_get_32());
 80054f8:	f010 fa29 	bl	801594e <k_uptime_get_32>
 80054fc:	4629      	mov	r1, r5
 80054fe:	4602      	mov	r2, r0
 8005500:	4620      	mov	r0, r4
 8005502:	f010 fdc4 	bl	801608e <net_timeout_set>
	k_work_reschedule(&address_lifetime_timer, K_NO_WAIT);
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	4806      	ldr	r0, [pc, #24]	; (8005524 <net_if_ipv6_addr_update_lifetime+0x50>)
 800550c:	f00c ff86 	bl	801241c <k_work_reschedule>
	k_mutex_unlock(&lock);
 8005510:	4630      	mov	r0, r6
}
 8005512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_mutex_unlock(&lock);
 8005516:	f010 ba5a 	b.w	80159ce <k_mutex_unlock.isra.0>
 800551a:	bf00      	nop
 800551c:	240010d8 	.word	0x240010d8
 8005520:	24002448 	.word	0x24002448
 8005524:	240015b8 	.word	0x240015b8

08005528 <net_if_ipv6_addr_add>:
{
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	4604      	mov	r4, r0
 800552e:	b08b      	sub	sp, #44	; 0x2c
 8005530:	4689      	mov	r9, r1
 8005532:	4690      	mov	r8, r2
 8005534:	469a      	mov	sl, r3
	net_if_lock(iface);
 8005536:	f010 fa29 	bl	801598c <net_if_lock>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 800553a:	a901      	add	r1, sp, #4
 800553c:	4620      	mov	r0, r4
 800553e:	f7ff fe25 	bl	800518c <net_if_config_ipv6_get>
 8005542:	2800      	cmp	r0, #0
 8005544:	da08      	bge.n	8005558 <net_if_ipv6_addr_add+0x30>
	struct net_if_addr *ifaddr = NULL;
 8005546:	2700      	movs	r7, #0
 8005548:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800554c:	f010 fa3f 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8005550:	4638      	mov	r0, r7
 8005552:	b00b      	add	sp, #44	; 0x2c
 8005554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ifaddr = ipv6_addr_find(iface, addr);
 8005558:	f8d4 b008 	ldr.w	fp, [r4, #8]
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800555c:	2500      	movs	r5, #0
		if (!ipv6->unicast[i].is_used) {
 800555e:	2330      	movs	r3, #48	; 0x30
 8005560:	f10b 0604 	add.w	r6, fp, #4
 8005564:	fb03 b705 	mla	r7, r3, r5, fp
 8005568:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800556c:	0792      	lsls	r2, r2, #30
 800556e:	d506      	bpl.n	800557e <net_if_ipv6_addr_add+0x56>
		if (net_ipv6_addr_cmp(
 8005570:	4631      	mov	r1, r6
 8005572:	4648      	mov	r0, r9
 8005574:	f010 f9e3 	bl	801593e <net_ipv6_addr_cmp>
 8005578:	2330      	movs	r3, #48	; 0x30
 800557a:	2800      	cmp	r0, #0
 800557c:	d1e4      	bne.n	8005548 <net_if_ipv6_addr_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800557e:	3501      	adds	r5, #1
 8005580:	3630      	adds	r6, #48	; 0x30
 8005582:	2d03      	cmp	r5, #3
 8005584:	d1ee      	bne.n	8005564 <net_if_ipv6_addr_add+0x3c>
		if (ipv6->unicast[i].is_used) {
 8005586:	9d01      	ldr	r5, [sp, #4]
 8005588:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800558c:	079f      	lsls	r7, r3, #30
 800558e:	f3c3 0640 	ubfx	r6, r3, #1, #1
 8005592:	d509      	bpl.n	80055a8 <net_if_ipv6_addr_add+0x80>
 8005594:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
 8005598:	0798      	lsls	r0, r3, #30
 800559a:	f140 80a3 	bpl.w	80056e4 <net_if_ipv6_addr_add+0x1bc>
 800559e:	f895 308f 	ldrb.w	r3, [r5, #143]	; 0x8f
 80055a2:	0799      	lsls	r1, r3, #30
 80055a4:	d4cf      	bmi.n	8005546 <net_if_ipv6_addr_add+0x1e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 80055a6:	2602      	movs	r6, #2
		net_if_addr_init(&ipv6->unicast[i], addr, addr_type,
 80055a8:	2730      	movs	r7, #48	; 0x30
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
 80055aa:	f10d 0e08 	add.w	lr, sp, #8
 80055ae:	f109 0b10 	add.w	fp, r9, #16
 80055b2:	4377      	muls	r7, r6
 80055b4:	46f4      	mov	ip, lr
		net_if_addr_init(&ipv6->unicast[i], addr, addr_type,
 80055b6:	19ea      	adds	r2, r5, r7
	ifaddr->is_used = true;
 80055b8:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	ifaddr->address.family = AF_INET6;
 80055c4:	2302      	movs	r3, #2
 80055c6:	53eb      	strh	r3, [r5, r7]
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
 80055c8:	464b      	mov	r3, r9
	ifaddr->addr_type = addr_type;
 80055ca:	f882 802c 	strb.w	r8, [r2, #44]	; 0x2c
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	3308      	adds	r3, #8
 80055d2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80055d6:	46f0      	mov	r8, lr
 80055d8:	455b      	cmp	r3, fp
 80055da:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80055de:	46c6      	mov	lr, r8
 80055e0:	d1f5      	bne.n	80055ce <net_if_ipv6_addr_add+0xa6>
 80055e2:	f102 0e04 	add.w	lr, r2, #4
 80055e6:	f10d 0818 	add.w	r8, sp, #24
 80055ea:	4663      	mov	r3, ip
 80055ec:	f10e 0e08 	add.w	lr, lr, #8
 80055f0:	cb03      	ldmia	r3!, {r0, r1}
 80055f2:	4543      	cmp	r3, r8
 80055f4:	f84e 0c08 	str.w	r0, [lr, #-8]
 80055f8:	f84e 1c04 	str.w	r1, [lr, #-4]
 80055fc:	469c      	mov	ip, r3
 80055fe:	d1f4      	bne.n	80055ea <net_if_ipv6_addr_add+0xc2>
	if (vlifetime) {
 8005600:	2330      	movs	r3, #48	; 0x30
		ifaddr->is_infinite = false;
 8005602:	fb03 5506 	mla	r5, r3, r6, r5
 8005606:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
	if (vlifetime) {
 800560a:	f1ba 0f00 	cmp.w	sl, #0
 800560e:	d06b      	beq.n	80056e8 <net_if_ipv6_addr_add+0x1c0>
		ifaddr->is_infinite = false;
 8005610:	f36f 0300 	bfc	r3, #0, #1
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
 8005614:	4651      	mov	r1, sl
 8005616:	4610      	mov	r0, r2
		ifaddr->is_infinite = false;
 8005618:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
 800561c:	f7ff ff5a 	bl	80054d4 <net_if_ipv6_addr_update_lifetime>
		if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT) &&
 8005620:	4620      	mov	r0, r4
 8005622:	f107 0a04 	add.w	sl, r7, #4
 8005626:	f010 f93e 	bl	80158a6 <l2_flags_get>
 800562a:	0702      	lsls	r2, r0, #28
 800562c:	d461      	bmi.n	80056f2 <net_if_ipv6_addr_add+0x1ca>
		    !net_ipv6_is_addr_loopback(addr) &&
 800562e:	4648      	mov	r0, r9
 8005630:	f010 f919 	bl	8015866 <net_ipv6_is_addr_loopback>
		if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT) &&
 8005634:	2800      	cmp	r0, #0
 8005636:	d15c      	bne.n	80056f2 <net_if_ipv6_addr_add+0x1ca>
		    !net_if_flag_is_set(iface, NET_IF_IPV6_NO_ND)) {
 8005638:	210b      	movs	r1, #11
 800563a:	4620      	mov	r0, r4
 800563c:	f010 f9ad 	bl	801599a <net_if_flag_is_set>
		    !net_ipv6_is_addr_loopback(addr) &&
 8005640:	4683      	mov	fp, r0
 8005642:	2800      	cmp	r0, #0
 8005644:	d155      	bne.n	80056f2 <net_if_ipv6_addr_add+0x1ca>
	flags = l2_flags_get(iface);
 8005646:	4620      	mov	r0, r4
					 &ipv6->unicast[i].address.in6_addr);
 8005648:	f8dd 9004 	ldr.w	r9, [sp, #4]
	flags = l2_flags_get(iface);
 800564c:	f010 f92b 	bl	80158a6 <l2_flags_get>
	if (flags & NET_L2_MULTICAST) {
 8005650:	07c3      	lsls	r3, r0, #31
	flags = l2_flags_get(iface);
 8005652:	4605      	mov	r5, r0
	if (flags & NET_L2_MULTICAST) {
 8005654:	d537      	bpl.n	80056c6 <net_if_ipv6_addr_add+0x19e>
					uint16_t addr0, uint16_t addr1,
					uint16_t addr2, uint16_t addr3,
					uint16_t addr4, uint16_t addr5,
					uint16_t addr6, uint16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
 8005656:	f240 23ff 	movw	r3, #767	; 0x2ff
 800565a:	f8ad 3018 	strh.w	r3, [sp, #24]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
 800565e:	f8ad b01a 	strh.w	fp, [sp, #26]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
 8005662:	f8ad b01c 	strh.w	fp, [sp, #28]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
 8005666:	f8ad b01e 	strh.w	fp, [sp, #30]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
 800566a:	f8ad b020 	strh.w	fp, [sp, #32]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
 800566e:	f8ad b022 	strh.w	fp, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
 8005672:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
 8005676:	f44f 7b80 	mov.w	fp, #256	; 0x100
 800567a:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
	ret = net_ipv6_mld_join(iface, &addr);
 800567e:	4641      	mov	r1, r8
 8005680:	4620      	mov	r0, r4
 8005682:	f003 febb 	bl	80093fc <net_ipv6_mld_join>
		if (!(flags & NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE)) {
 8005686:	f015 0502 	ands.w	r5, r5, #2
 800568a:	f240 23ff 	movw	r3, #767	; 0x2ff
 800568e:	d11a      	bne.n	80056c6 <net_if_ipv6_addr_add+0x19e>
	dst->s6_addr[0]   = 0xFF;
 8005690:	9306      	str	r3, [sp, #24]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
 8005692:	f8ad 501c 	strh.w	r5, [sp, #28]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
 8005696:	f8ad 501e 	strh.w	r5, [sp, #30]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
 800569a:	f8ad 5020 	strh.w	r5, [sp, #32]
	dst->s6_addr[12]  = 0xFF;
 800569e:	23ff      	movs	r3, #255	; 0xff
	dst->s6_addr[10]  = 0U;
 80056a0:	f8ad b022 	strh.w	fp, [sp, #34]	; 0x22
	dst->s6_addr[12]  = 0xFF;
 80056a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
 80056a8:	2330      	movs	r3, #48	; 0x30
 80056aa:	fb03 9606 	mla	r6, r3, r6, r9
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 80056ae:	44d1      	add	r9, sl
	dst->s6_addr[13]  = src->s6_addr[13];
 80056b0:	7c73      	ldrb	r3, [r6, #17]
 80056b2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 80056b6:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 80056ba:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	ret = net_ipv6_mld_join(iface, &addr);
 80056be:	4641      	mov	r1, r8
 80056c0:	4620      	mov	r0, r4
 80056c2:	f003 fe9b 	bl	80093fc <net_ipv6_mld_join>
			net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
 80056c6:	9901      	ldr	r1, [sp, #4]
 80056c8:	4620      	mov	r0, r4
 80056ca:	4439      	add	r1, r7
 80056cc:	f7ff fbbe 	bl	8004e4c <net_if_ipv6_start_dad>
		net_mgmt_event_notify_with_info(
 80056d0:	9a01      	ldr	r2, [sp, #4]
 80056d2:	2310      	movs	r3, #16
 80056d4:	4621      	mov	r1, r4
 80056d6:	480b      	ldr	r0, [pc, #44]	; (8005704 <net_if_ipv6_addr_add+0x1dc>)
 80056d8:	4452      	add	r2, sl
 80056da:	f001 f945 	bl	8006968 <net_mgmt_event_notify_with_info>
		ifaddr = &ipv6->unicast[i];
 80056de:	9b01      	ldr	r3, [sp, #4]
 80056e0:	441f      	add	r7, r3
		goto out;
 80056e2:	e731      	b.n	8005548 <net_if_ipv6_addr_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 80056e4:	2601      	movs	r6, #1
 80056e6:	e75f      	b.n	80055a8 <net_if_ipv6_addr_add+0x80>
		ifaddr->is_infinite = true;
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
 80056f0:	e796      	b.n	8005620 <net_if_ipv6_addr_add+0xf8>
			ipv6->unicast[i].addr_state = NET_ADDR_PREFERRED;
 80056f2:	2230      	movs	r2, #48	; 0x30
 80056f4:	9b01      	ldr	r3, [sp, #4]
 80056f6:	fb02 3306 	mla	r3, r2, r6, r3
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005700:	e7e6      	b.n	80056d0 <net_if_ipv6_addr_add+0x1a8>
 8005702:	bf00      	nop
 8005704:	e0600001 	.word	0xe0600001

08005708 <update_operational_state>:
	return "";
#endif /* CONFIG_NET_IF_LOG_LEVEL >= LOG_LEVEL_DBG */
}

static void update_operational_state(struct net_if *iface)
{
 8005708:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
 800570a:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
 800570c:	2100      	movs	r1, #0
{
 800570e:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
 8005710:	7e9a      	ldrb	r2, [r3, #26]
 8005712:	f010 f942 	bl	801599a <net_if_flag_is_set>
	enum net_if_oper_state new_state = NET_IF_OPER_UNKNOWN;

	if (!net_if_is_admin_up(iface)) {
 8005716:	bb50      	cbnz	r0, 800576e <update_operational_state+0x66>
		new_state = NET_IF_OPER_DOWN;
 8005718:	2302      	movs	r3, #2
		iface->if_dev->oper_state = oper_state;
 800571a:	6821      	ldr	r1, [r4, #0]
 800571c:	768b      	strb	r3, [r1, #26]
	return iface->if_dev->oper_state;
 800571e:	6820      	ldr	r0, [r4, #0]
	}

	new_state = NET_IF_OPER_UP;

exit:
	if (net_if_oper_state_set(iface, new_state) != new_state) {
 8005720:	7e81      	ldrb	r1, [r0, #26]
 8005722:	4299      	cmp	r1, r3
 8005724:	d143      	bne.n	80057ae <update_operational_state+0xa6>
		iface, net_if_oper_state2str(net_if_oper_state(iface)),
		net_if_is_admin_up(iface) ? "UP" : "DOWN",
		net_if_is_carrier_ok(iface) ? "ON" : "OFF",
		net_if_is_dormant(iface) ? "ON" : "OFF");

	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
 8005726:	2b06      	cmp	r3, #6
 8005728:	d130      	bne.n	800578c <update_operational_state+0x84>
		if (prev_state != NET_IF_OPER_UP) {
 800572a:	2a06      	cmp	r2, #6
 800572c:	d03f      	beq.n	80057ae <update_operational_state+0xa6>
	net_if_flag_set(iface, NET_IF_RUNNING);
 800572e:	2108      	movs	r1, #8
 8005730:	f010 f93e 	bl	80159b0 <net_if_flag_set.isra.0>
				     const void *info, size_t length);

static inline void net_mgmt_event_notify(uint32_t mgmt_event,
					 struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
 8005734:	2300      	movs	r3, #0
 8005736:	4621      	mov	r1, r4
 8005738:	481d      	ldr	r0, [pc, #116]	; (80057b0 <update_operational_state+0xa8>)
 800573a:	461a      	mov	r2, r3
 800573c:	f001 f914 	bl	8006968 <net_mgmt_event_notify_with_info>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
 8005740:	4620      	mov	r0, r4
 8005742:	f010 f8b0 	bl	80158a6 <l2_flags_get>
	if (!is_iface_offloaded(iface) &&
 8005746:	0703      	lsls	r3, r0, #28
 8005748:	d431      	bmi.n	80057ae <update_operational_state+0xa6>
	if (!net_if_flag_is_set(iface, NET_IF_IPV6) ||
 800574a:	2107      	movs	r1, #7
 800574c:	4620      	mov	r0, r4
 800574e:	f010 f924 	bl	801599a <net_if_flag_is_set>
 8005752:	b360      	cbz	r0, 80057ae <update_operational_state+0xa6>
	    net_if_flag_is_set(iface, NET_IF_IPV6_NO_ND)) {
 8005754:	210b      	movs	r1, #11
 8005756:	4620      	mov	r0, r4
 8005758:	f010 f91f 	bl	801599a <net_if_flag_is_set>
	if (!net_if_flag_is_set(iface, NET_IF_IPV6) ||
 800575c:	bb38      	cbnz	r0, 80057ae <update_operational_state+0xa6>
		net_if_start_dad(iface);
 800575e:	4620      	mov	r0, r4
 8005760:	f010 f9e4 	bl	8015b2c <net_if_start_dad>
	net_if_start_rs(iface);
 8005764:	4620      	mov	r0, r4
	} else {
		if (prev_state == NET_IF_OPER_UP) {
			notify_iface_down(iface);
		}
	}
}
 8005766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_if_start_rs(iface);
 800576a:	f7ff bd45 	b.w	80051f8 <net_if_start_rs>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
 800576e:	2109      	movs	r1, #9
 8005770:	4620      	mov	r0, r4
 8005772:	f010 f912 	bl	801599a <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
 8005776:	2800      	cmp	r0, #0
 8005778:	d0ce      	beq.n	8005718 <update_operational_state+0x10>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
 800577a:	210a      	movs	r1, #10
 800577c:	4620      	mov	r0, r4
 800577e:	f010 f90c 	bl	801599a <net_if_flag_is_set>
		new_state = NET_IF_OPER_DORMANT;
 8005782:	2800      	cmp	r0, #0
 8005784:	bf0c      	ite	eq
 8005786:	2306      	moveq	r3, #6
 8005788:	2305      	movne	r3, #5
 800578a:	e7c6      	b.n	800571a <update_operational_state+0x12>
		if (prev_state == NET_IF_OPER_UP) {
 800578c:	2a06      	cmp	r2, #6
 800578e:	d10e      	bne.n	80057ae <update_operational_state+0xa6>
	atomic_clear_bit(iface->if_dev->flags, value);
 8005790:	2108      	movs	r1, #8
 8005792:	300c      	adds	r0, #12
 8005794:	f010 f8e3 	bl	801595e <atomic_clear_bit>
 8005798:	2300      	movs	r3, #0
 800579a:	4621      	mov	r1, r4
 800579c:	4805      	ldr	r0, [pc, #20]	; (80057b4 <update_operational_state+0xac>)
 800579e:	461a      	mov	r2, r3
 80057a0:	f001 f8e2 	bl	8006968 <net_mgmt_event_notify_with_info>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
 80057a4:	4620      	mov	r0, r4
}
 80057a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
 80057aa:	f010 b87c 	b.w	80158a6 <l2_flags_get>
}
 80057ae:	bd10      	pop	{r4, pc}
 80057b0:	d0010002 	.word	0xd0010002
 80057b4:	d0010001 	.word	0xd0010001

080057b8 <net_if_ipv6_maddr_rm>:
{
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	4605      	mov	r5, r0
 80057bc:	460f      	mov	r7, r1
	net_if_lock(iface);
 80057be:	f010 f8e5 	bl	801598c <net_if_lock>
	ipv6 = iface->config.ip.ipv6;
 80057c2:	68ac      	ldr	r4, [r5, #8]
	if (!ipv6) {
 80057c4:	b934      	cbnz	r4, 80057d4 <net_if_ipv6_maddr_rm+0x1c>
	bool ret = false;
 80057c6:	2400      	movs	r4, #0
	k_mutex_unlock(&iface->lock);
 80057c8:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80057cc:	f010 f8ff 	bl	80159ce <k_mutex_unlock.isra.0>
}
 80057d0:	4620      	mov	r0, r4
 80057d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!ipv6->mcast[i].is_used) {
 80057d4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80057d8:	07da      	lsls	r2, r3, #31
 80057da:	d41d      	bmi.n	8005818 <net_if_ipv6_maddr_rm+0x60>
 80057dc:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80057e0:	07db      	lsls	r3, r3, #31
 80057e2:	d5f0      	bpl.n	80057c6 <net_if_ipv6_maddr_rm+0xe>
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
 80057e4:	f104 06ac 	add.w	r6, r4, #172	; 0xac
 80057e8:	4639      	mov	r1, r7
 80057ea:	4630      	mov	r0, r6
 80057ec:	f010 f8a7 	bl	801593e <net_ipv6_addr_cmp>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d0e8      	beq.n	80057c6 <net_if_ipv6_maddr_rm+0xe>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 80057f4:	2301      	movs	r3, #1
		ipv6->mcast[i].is_used = false;
 80057f6:	2218      	movs	r2, #24
		net_mgmt_event_notify_with_info(
 80057f8:	4629      	mov	r1, r5
 80057fa:	480c      	ldr	r0, [pc, #48]	; (800582c <net_if_ipv6_maddr_rm+0x74>)
		ipv6->mcast[i].is_used = false;
 80057fc:	fb02 4403 	mla	r4, r2, r3, r4
		net_mgmt_event_notify_with_info(
 8005800:	4632      	mov	r2, r6
		ipv6->mcast[i].is_used = false;
 8005802:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8005806:	f36f 0300 	bfc	r3, #0, #1
 800580a:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
		net_mgmt_event_notify_with_info(
 800580e:	2310      	movs	r3, #16
		ret = true;
 8005810:	2401      	movs	r4, #1
		net_mgmt_event_notify_with_info(
 8005812:	f001 f8a9 	bl	8006968 <net_mgmt_event_notify_with_info>
		goto out;
 8005816:	e7d7      	b.n	80057c8 <net_if_ipv6_maddr_rm+0x10>
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
 8005818:	f104 0694 	add.w	r6, r4, #148	; 0x94
 800581c:	4639      	mov	r1, r7
 800581e:	4630      	mov	r0, r6
 8005820:	f010 f88d 	bl	801593e <net_ipv6_addr_cmp>
 8005824:	2800      	cmp	r0, #0
 8005826:	d0d9      	beq.n	80057dc <net_if_ipv6_maddr_rm+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 8005828:	2300      	movs	r3, #0
 800582a:	e7e4      	b.n	80057f6 <net_if_ipv6_maddr_rm+0x3e>
 800582c:	e0600004 	.word	0xe0600004

08005830 <net_if_ipv6_addr_rm>:
{
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	4604      	mov	r4, r0
 8005836:	b087      	sub	sp, #28
 8005838:	460d      	mov	r5, r1
	net_if_lock(iface);
 800583a:	f010 f8a7 	bl	801598c <net_if_lock>
	ipv6 = iface->config.ip.ipv6;
 800583e:	f8d4 8008 	ldr.w	r8, [r4, #8]
	if (!ipv6) {
 8005842:	f1b8 0f00 	cmp.w	r8, #0
 8005846:	d108      	bne.n	800585a <net_if_ipv6_addr_rm+0x2a>
	bool ret = false;
 8005848:	2600      	movs	r6, #0
 800584a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800584e:	f010 f8be 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8005852:	4630      	mov	r0, r6
 8005854:	b007      	add	sp, #28
 8005856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585a:	f108 0904 	add.w	r9, r8, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800585e:	2700      	movs	r7, #0
		if (!ipv6->unicast[i].is_used) {
 8005860:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8005864:	fb0b fa07 	mul.w	sl, fp, r7
 8005868:	eb08 030a 	add.w	r3, r8, sl
 800586c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005870:	9201      	str	r2, [sp, #4]
 8005872:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005876:	079a      	lsls	r2, r3, #30
 8005878:	d550      	bpl.n	800591c <net_if_ipv6_addr_rm+0xec>
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
 800587a:	4629      	mov	r1, r5
 800587c:	4648      	mov	r0, r9
 800587e:	f010 f85e 	bl	801593e <net_ipv6_addr_cmp>
 8005882:	4606      	mov	r6, r0
 8005884:	2800      	cmp	r0, #0
 8005886:	d049      	beq.n	800591c <net_if_ipv6_addr_rm+0xec>
		if (!ipv6->unicast[i].is_infinite) {
 8005888:	9a01      	ldr	r2, [sp, #4]
 800588a:	79d3      	ldrb	r3, [r2, #7]
 800588c:	07db      	lsls	r3, r3, #31
 800588e:	d417      	bmi.n	80058c0 <net_if_ipv6_addr_rm+0x90>
			k_mutex_lock(&lock, K_FOREVER);
 8005890:	f04f 33ff 	mov.w	r3, #4294967295
 8005894:	f04f 32ff 	mov.w	r2, #4294967295
 8005898:	4823      	ldr	r0, [pc, #140]	; (8005928 <net_if_ipv6_addr_rm+0xf8>)
 800589a:	f010 f875 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
			sys_slist_find_and_remove(
 800589e:	f10a 0114 	add.w	r1, sl, #20
 80058a2:	f8df a088 	ldr.w	sl, [pc, #136]	; 800592c <net_if_ipv6_addr_rm+0xfc>
 80058a6:	4441      	add	r1, r8
 80058a8:	4650      	mov	r0, sl
 80058aa:	f00f ffc1 	bl	8015830 <sys_slist_find_and_remove>
			if (sys_slist_is_empty(
 80058ae:	f8da 3000 	ldr.w	r3, [sl]
 80058b2:	b913      	cbnz	r3, 80058ba <net_if_ipv6_addr_rm+0x8a>
				k_work_cancel_delayable(
 80058b4:	481e      	ldr	r0, [pc, #120]	; (8005930 <net_if_ipv6_addr_rm+0x100>)
 80058b6:	f016 f933 	bl	801bb20 <k_work_cancel_delayable>
			k_mutex_unlock(&lock);
 80058ba:	481b      	ldr	r0, [pc, #108]	; (8005928 <net_if_ipv6_addr_rm+0xf8>)
 80058bc:	f010 f887 	bl	80159ce <k_mutex_unlock.isra.0>
		ipv6->unicast[i].is_used = false;
 80058c0:	2330      	movs	r3, #48	; 0x30
 80058c2:	fb03 8707 	mla	r7, r3, r7, r8
 80058c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058ca:	f36f 0341 	bfc	r3, #1, #1
 80058ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dst->s6_addr[0]   = 0xFF;
 80058d2:	f240 23ff 	movw	r3, #767	; 0x2ff
 80058d6:	9302      	str	r3, [sp, #8]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
 80058d8:	2300      	movs	r3, #0
 80058da:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
 80058de:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
 80058e2:	f8ad 3010 	strh.w	r3, [sp, #16]
	dst->s6_addr[10]  = 0U;
 80058e6:	f44f 7380 	mov.w	r3, #256	; 0x100
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 80058ea:	7bea      	ldrb	r2, [r5, #15]
	dst->s6_addr[10]  = 0U;
 80058ec:	f8ad 3012 	strh.w	r3, [sp, #18]
	dst->s6_addr[12]  = 0xFF;
 80058f0:	23ff      	movs	r3, #255	; 0xff
 80058f2:	f88d 3014 	strb.w	r3, [sp, #20]
	dst->s6_addr[13]  = src->s6_addr[13];
 80058f6:	7b6b      	ldrb	r3, [r5, #13]
 80058f8:	f88d 3015 	strb.w	r3, [sp, #21]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 80058fc:	7bab      	ldrb	r3, [r5, #14]
 80058fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005902:	f8ad 3016 	strh.w	r3, [sp, #22]
		net_if_ipv6_maddr_rm(iface, &maddr);
 8005906:	a902      	add	r1, sp, #8
 8005908:	4620      	mov	r0, r4
 800590a:	f7ff ff55 	bl	80057b8 <net_if_ipv6_maddr_rm>
		net_mgmt_event_notify_with_info(
 800590e:	2310      	movs	r3, #16
 8005910:	464a      	mov	r2, r9
 8005912:	4621      	mov	r1, r4
 8005914:	4807      	ldr	r0, [pc, #28]	; (8005934 <net_if_ipv6_addr_rm+0x104>)
 8005916:	f001 f827 	bl	8006968 <net_mgmt_event_notify_with_info>
		goto out;
 800591a:	e796      	b.n	800584a <net_if_ipv6_addr_rm+0x1a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800591c:	3701      	adds	r7, #1
 800591e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8005922:	2f03      	cmp	r7, #3
 8005924:	d19e      	bne.n	8005864 <net_if_ipv6_addr_rm+0x34>
 8005926:	e78f      	b.n	8005848 <net_if_ipv6_addr_rm+0x18>
 8005928:	240010d8 	.word	0x240010d8
 800592c:	24002448 	.word	0x24002448
 8005930:	240015b8 	.word	0x240015b8
 8005934:	e0600002 	.word	0xe0600002

08005938 <net_if_ipv6_dad_failed>:
{
 8005938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800593a:	460d      	mov	r5, r1
 800593c:	9001      	str	r0, [sp, #4]
	net_if_lock(iface);
 800593e:	f010 f825 	bl	801598c <net_if_lock>
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
 8005942:	a901      	add	r1, sp, #4
 8005944:	4628      	mov	r0, r5
 8005946:	f7ff fd21 	bl	800538c <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
 800594a:	4604      	mov	r4, r0
 800594c:	b1c0      	cbz	r0, 8005980 <net_if_ipv6_dad_failed+0x48>
	k_mutex_lock(&lock, K_FOREVER);
 800594e:	f04f 32ff 	mov.w	r2, #4294967295
 8005952:	f04f 33ff 	mov.w	r3, #4294967295
 8005956:	480d      	ldr	r0, [pc, #52]	; (800598c <net_if_ipv6_dad_failed+0x54>)
 8005958:	f010 f816 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	sys_slist_find_and_remove(&active_dad_timers, &ifaddr->dad_node);
 800595c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8005960:	480b      	ldr	r0, [pc, #44]	; (8005990 <net_if_ipv6_dad_failed+0x58>)
 8005962:	f00f ff65 	bl	8015830 <sys_slist_find_and_remove>
	k_mutex_unlock(&lock);
 8005966:	4809      	ldr	r0, [pc, #36]	; (800598c <net_if_ipv6_dad_failed+0x54>)
 8005968:	f010 f831 	bl	80159ce <k_mutex_unlock.isra.0>
	net_mgmt_event_notify_with_info(NET_EVENT_IPV6_DAD_FAILED, iface,
 800596c:	9901      	ldr	r1, [sp, #4]
 800596e:	4809      	ldr	r0, [pc, #36]	; (8005994 <net_if_ipv6_dad_failed+0x5c>)
 8005970:	2310      	movs	r3, #16
 8005972:	1d22      	adds	r2, r4, #4
 8005974:	f000 fff8 	bl	8006968 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
 8005978:	4629      	mov	r1, r5
 800597a:	9801      	ldr	r0, [sp, #4]
 800597c:	f7ff ff58 	bl	8005830 <net_if_ipv6_addr_rm>
 8005980:	9801      	ldr	r0, [sp, #4]
 8005982:	3048      	adds	r0, #72	; 0x48
 8005984:	f010 f823 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8005988:	b003      	add	sp, #12
 800598a:	bd30      	pop	{r4, r5, pc}
 800598c:	240010d8 	.word	0x240010d8
 8005990:	24002450 	.word	0x24002450
 8005994:	e060000e 	.word	0xe060000e

08005998 <prefix_lifetime_timeout>:
{
 8005998:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint32_t current_time = k_uptime_get_32();
 800599c:	f00f ffd7 	bl	801594e <k_uptime_get_32>
	list->head = NULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	4607      	mov	r7, r0
	k_mutex_lock(&lock, K_FOREVER);
 80059a4:	f04f 32ff 	mov.w	r2, #4294967295
 80059a8:	4830      	ldr	r0, [pc, #192]	; (8005a6c <prefix_lifetime_timeout+0xd4>)
	list->tail = NULL;
 80059aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059ae:	f04f 33ff 	mov.w	r3, #4294967295
 80059b2:	f00f ffe9 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 80059b6:	4b2e      	ldr	r3, [pc, #184]	; (8005a70 <prefix_lifetime_timeout+0xd8>)
 80059b8:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
 80059ba:	2c00      	cmp	r4, #0
 80059bc:	d052      	beq.n	8005a64 <prefix_lifetime_timeout+0xcc>
	return node->next;
 80059be:	6825      	ldr	r5, [r4, #0]
 80059c0:	f04f 36ff 	mov.w	r6, #4294967295
			sys_slist_find_and_remove(
 80059c4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005a70 <prefix_lifetime_timeout+0xd8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
 80059c8:	b1b4      	cbz	r4, 80059f8 <prefix_lifetime_timeout+0x60>
		uint32_t this_update = net_timeout_evaluate(timeout,
 80059ca:	4639      	mov	r1, r7
 80059cc:	4620      	mov	r0, r4
 80059ce:	f010 fb94 	bl	80160fa <net_timeout_evaluate>
		if (this_update == 0U) {
 80059d2:	b960      	cbnz	r0, 80059ee <prefix_lifetime_timeout+0x56>
			sys_slist_find_and_remove(
 80059d4:	4621      	mov	r1, r4
 80059d6:	4640      	mov	r0, r8
 80059d8:	f00f ff2a 	bl	8015830 <sys_slist_find_and_remove>
			sys_slist_append(&expired_list,
 80059dc:	a802      	add	r0, sp, #8
 80059de:	f00f ff1d 	bl	801581c <sys_slist_append>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
 80059e2:	2d00      	cmp	r5, #0
 80059e4:	d040      	beq.n	8005a68 <prefix_lifetime_timeout+0xd0>
 80059e6:	682b      	ldr	r3, [r5, #0]
 80059e8:	462c      	mov	r4, r5
 80059ea:	461d      	mov	r5, r3
 80059ec:	e7ec      	b.n	80059c8 <prefix_lifetime_timeout+0x30>
		if (this_update < next_update) {
 80059ee:	4286      	cmp	r6, r0
 80059f0:	bf28      	it	cs
 80059f2:	4606      	movcs	r6, r0
		if (current == next) {
 80059f4:	42ac      	cmp	r4, r5
 80059f6:	d1f4      	bne.n	80059e2 <prefix_lifetime_timeout+0x4a>
	if (next_update != UINT32_MAX) {
 80059f8:	1c73      	adds	r3, r6, #1
 80059fa:	d005      	beq.n	8005a08 <prefix_lifetime_timeout+0x70>
 80059fc:	230a      	movs	r3, #10
		k_work_reschedule(&prefix_lifetime_timer, K_MSEC(next_update));
 80059fe:	481d      	ldr	r0, [pc, #116]	; (8005a74 <prefix_lifetime_timeout+0xdc>)
 8005a00:	fba6 2303 	umull	r2, r3, r6, r3
 8005a04:	f00c fd0a 	bl	801241c <k_work_reschedule>
	k_mutex_unlock(&lock);
 8005a08:	4818      	ldr	r0, [pc, #96]	; (8005a6c <prefix_lifetime_timeout+0xd4>)
 8005a0a:	f00f ffe0 	bl	80159ce <k_mutex_unlock.isra.0>
	return list->head;
 8005a0e:	9c02      	ldr	r4, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&expired_list, current, lifetime.node) {
 8005a10:	b32c      	cbz	r4, 8005a5e <prefix_lifetime_timeout+0xc6>
	net_mgmt_event_notify_with_info(
 8005a12:	4e19      	ldr	r6, [pc, #100]	; (8005a78 <prefix_lifetime_timeout+0xe0>)
	net_if_lock(ifprefix->iface);
 8005a14:	6a20      	ldr	r0, [r4, #32]
 8005a16:	f00f ffb9 	bl	801598c <net_if_lock>
	ifprefix->is_used = false;
 8005a1a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
 8005a1e:	a901      	add	r1, sp, #4
 8005a20:	6a20      	ldr	r0, [r4, #32]
	ifprefix->is_used = false;
 8005a22:	f36f 0341 	bfc	r3, #1, #1
 8005a26:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
 8005a2a:	f7ff fbaf 	bl	800518c <net_if_config_ipv6_get>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	db12      	blt.n	8005a58 <prefix_lifetime_timeout+0xc0>
	remove_prefix_addresses(ifprefix->iface, ipv6, &ifprefix->prefix,
 8005a32:	f104 0510 	add.w	r5, r4, #16
 8005a36:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005a3a:	9901      	ldr	r1, [sp, #4]
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	6a20      	ldr	r0, [r4, #32]
 8005a40:	f010 f8ef 	bl	8015c22 <remove_prefix_addresses>
	net_mgmt_event_notify_with_info(
 8005a44:	4630      	mov	r0, r6
 8005a46:	2310      	movs	r3, #16
 8005a48:	462a      	mov	r2, r5
 8005a4a:	6a21      	ldr	r1, [r4, #32]
 8005a4c:	f000 ff8c 	bl	8006968 <net_mgmt_event_notify_with_info>
 8005a50:	6a20      	ldr	r0, [r4, #32]
 8005a52:	3048      	adds	r0, #72	; 0x48
 8005a54:	f00f ffbb 	bl	80159ce <k_mutex_unlock.isra.0>
	return node->next;
 8005a58:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&expired_list, current, lifetime.node) {
 8005a5a:	2c00      	cmp	r4, #0
 8005a5c:	d1da      	bne.n	8005a14 <prefix_lifetime_timeout+0x7c>
}
 8005a5e:	b004      	add	sp, #16
 8005a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
 8005a64:	4625      	mov	r5, r4
 8005a66:	e7ab      	b.n	80059c0 <prefix_lifetime_timeout+0x28>
 8005a68:	462b      	mov	r3, r5
 8005a6a:	e7bd      	b.n	80059e8 <prefix_lifetime_timeout+0x50>
 8005a6c:	240010d8 	.word	0x240010d8
 8005a70:	24002458 	.word	0x24002458
 8005a74:	24001618 	.word	0x24001618
 8005a78:	e0600006 	.word	0xe0600006

08005a7c <net_if_ipv6_maddr_lookup>:
{
 8005a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a80:	4607      	mov	r7, r0
 8005a82:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8005a84:	4d21      	ldr	r5, [pc, #132]	; (8005b0c <net_if_ipv6_maddr_lookup+0x90>)
 8005a86:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005b10 <net_if_ipv6_maddr_lookup+0x94>
 8005a8a:	454d      	cmp	r5, r9
 8005a8c:	d301      	bcc.n	8005a92 <net_if_ipv6_maddr_lookup+0x16>
	struct net_if_mcast_addr *ifmaddr = NULL;
 8005a8e:	2400      	movs	r4, #0
	return ifmaddr;
 8005a90:	e037      	b.n	8005b02 <net_if_ipv6_maddr_lookup+0x86>
		if (ret && *ret && iface != *ret) {
 8005a92:	b11e      	cbz	r6, 8005a9c <net_if_ipv6_maddr_lookup+0x20>
 8005a94:	6833      	ldr	r3, [r6, #0]
 8005a96:	b10b      	cbz	r3, 8005a9c <net_if_ipv6_maddr_lookup+0x20>
 8005a98:	42ab      	cmp	r3, r5
 8005a9a:	d109      	bne.n	8005ab0 <net_if_ipv6_maddr_lookup+0x34>
		net_if_lock(iface);
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f105 0848 	add.w	r8, r5, #72	; 0x48
 8005aa2:	f00f ff73 	bl	801598c <net_if_lock>
		ipv6 = iface->config.ip.ipv6;
 8005aa6:	68ac      	ldr	r4, [r5, #8]
		if (!ipv6) {
 8005aa8:	b924      	cbnz	r4, 8005ab4 <net_if_ipv6_maddr_lookup+0x38>
 8005aaa:	4640      	mov	r0, r8
 8005aac:	f00f ff8f 	bl	80159ce <k_mutex_unlock.isra.0>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8005ab0:	3560      	adds	r5, #96	; 0x60
 8005ab2:	e7ea      	b.n	8005a8a <net_if_ipv6_maddr_lookup+0xe>
			if (!ipv6->mcast[i].is_used ||
 8005ab4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8005ab8:	07da      	lsls	r2, r3, #31
 8005aba:	d50a      	bpl.n	8005ad2 <net_if_ipv6_maddr_lookup+0x56>
 8005abc:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d106      	bne.n	8005ad2 <net_if_ipv6_maddr_lookup+0x56>
			if (net_ipv6_is_prefix(
 8005ac4:	2280      	movs	r2, #128	; 0x80
 8005ac6:	f104 0194 	add.w	r1, r4, #148	; 0x94
 8005aca:	4638      	mov	r0, r7
 8005acc:	f00f ff13 	bl	80158f6 <net_ipv6_is_prefix>
 8005ad0:	b9d0      	cbnz	r0, 8005b08 <net_if_ipv6_maddr_lookup+0x8c>
			if (!ipv6->mcast[i].is_used ||
 8005ad2:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8005ad6:	07db      	lsls	r3, r3, #31
 8005ad8:	d5e7      	bpl.n	8005aaa <net_if_ipv6_maddr_lookup+0x2e>
 8005ada:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d1e3      	bne.n	8005aaa <net_if_ipv6_maddr_lookup+0x2e>
			if (net_ipv6_is_prefix(
 8005ae2:	2280      	movs	r2, #128	; 0x80
 8005ae4:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f00f ff04 	bl	80158f6 <net_ipv6_is_prefix>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d0db      	beq.n	8005aaa <net_if_ipv6_maddr_lookup+0x2e>
 8005af2:	2318      	movs	r3, #24
				if (ret) {
 8005af4:	b106      	cbz	r6, 8005af8 <net_if_ipv6_maddr_lookup+0x7c>
					*ret = iface;
 8005af6:	6035      	str	r5, [r6, #0]
				ifmaddr = &ipv6->mcast[i];
 8005af8:	3390      	adds	r3, #144	; 0x90
 8005afa:	4640      	mov	r0, r8
 8005afc:	441c      	add	r4, r3
 8005afe:	f00f ff66 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8005b02:	4620      	mov	r0, r4
 8005b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (net_ipv6_is_prefix(
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e7f3      	b.n	8005af4 <net_if_ipv6_maddr_lookup+0x78>
 8005b0c:	24001278 	.word	0x24001278
 8005b10:	240012d8 	.word	0x240012d8

08005b14 <net_if_ipv6_maddr_add>:
{
 8005b14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005b16:	460d      	mov	r5, r1
 8005b18:	9001      	str	r0, [sp, #4]
	net_if_lock(iface);
 8005b1a:	f00f ff37 	bl	801598c <net_if_lock>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 8005b1e:	a903      	add	r1, sp, #12
 8005b20:	9801      	ldr	r0, [sp, #4]
 8005b22:	f7ff fb33 	bl	800518c <net_if_config_ipv6_get>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	da07      	bge.n	8005b3a <net_if_ipv6_maddr_add+0x26>
	struct net_if_mcast_addr *ifmaddr = NULL;
 8005b2a:	2400      	movs	r4, #0
 8005b2c:	9801      	ldr	r0, [sp, #4]
 8005b2e:	3048      	adds	r0, #72	; 0x48
 8005b30:	f00f ff4d 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8005b34:	4620      	mov	r0, r4
 8005b36:	b004      	add	sp, #16
 8005b38:	bd70      	pop	{r4, r5, r6, pc}
	if (!net_ipv6_is_addr_mcast(addr)) {
 8005b3a:	782b      	ldrb	r3, [r5, #0]
 8005b3c:	2bff      	cmp	r3, #255	; 0xff
 8005b3e:	d1f4      	bne.n	8005b2a <net_if_ipv6_maddr_add+0x16>
	if (net_if_ipv6_maddr_lookup(addr, &iface)) {
 8005b40:	a901      	add	r1, sp, #4
 8005b42:	4628      	mov	r0, r5
 8005b44:	f7ff ff9a 	bl	8005a7c <net_if_ipv6_maddr_lookup>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d1ee      	bne.n	8005b2a <net_if_ipv6_maddr_add+0x16>
		if (ipv6->mcast[i].is_used) {
 8005b4c:	9803      	ldr	r0, [sp, #12]
 8005b4e:	f890 40a4 	ldrb.w	r4, [r0, #164]	; 0xa4
 8005b52:	f014 0401 	ands.w	r4, r4, #1
 8005b56:	d004      	beq.n	8005b62 <net_if_ipv6_maddr_add+0x4e>
 8005b58:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
 8005b5c:	07db      	lsls	r3, r3, #31
 8005b5e:	d4e4      	bmi.n	8005b2a <net_if_ipv6_maddr_add+0x16>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 8005b60:	2401      	movs	r4, #1
		ipv6->mcast[i].is_used = true;
 8005b62:	2318      	movs	r3, #24
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
 8005b64:	4629      	mov	r1, r5
		ipv6->mcast[i].is_used = true;
 8005b66:	435c      	muls	r4, r3
 8005b68:	1903      	adds	r3, r0, r4
 8005b6a:	f104 0694 	add.w	r6, r4, #148	; 0x94
		ifmaddr = &ipv6->mcast[i];
 8005b6e:	3490      	adds	r4, #144	; 0x90
		ipv6->mcast[i].is_used = true;
 8005b70:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
 8005b74:	4430      	add	r0, r6
		ipv6->mcast[i].is_used = true;
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		ipv6->mcast[i].address.family = AF_INET6;
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
 8005b84:	2210      	movs	r2, #16
 8005b86:	f00f f876 	bl	8014c76 <memcpy>
		net_mgmt_event_notify_with_info(
 8005b8a:	9a03      	ldr	r2, [sp, #12]
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	9901      	ldr	r1, [sp, #4]
 8005b90:	4432      	add	r2, r6
 8005b92:	4803      	ldr	r0, [pc, #12]	; (8005ba0 <net_if_ipv6_maddr_add+0x8c>)
 8005b94:	f000 fee8 	bl	8006968 <net_mgmt_event_notify_with_info>
		ifmaddr = &ipv6->mcast[i];
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	441c      	add	r4, r3
		goto out;
 8005b9c:	e7c6      	b.n	8005b2c <net_if_ipv6_maddr_add+0x18>
 8005b9e:	bf00      	nop
 8005ba0:	e0600003 	.word	0xe0600003

08005ba4 <net_if_ipv6_prefix_add>:
{
 8005ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba8:	4607      	mov	r7, r0
 8005baa:	b086      	sub	sp, #24
 8005bac:	460d      	mov	r5, r1
 8005bae:	4692      	mov	sl, r2
 8005bb0:	4698      	mov	r8, r3
	net_if_lock(iface);
 8005bb2:	f00f feeb 	bl	801598c <net_if_lock>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 8005bb6:	a901      	add	r1, sp, #4
 8005bb8:	4638      	mov	r0, r7
 8005bba:	f7ff fae7 	bl	800518c <net_if_config_ipv6_get>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	da08      	bge.n	8005bd4 <net_if_ipv6_prefix_add+0x30>
	struct net_if_ipv6_prefix *ifprefix = NULL;
 8005bc2:	2400      	movs	r4, #0
 8005bc4:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8005bc8:	f00f ff01 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8005bcc:	4620      	mov	r0, r4
 8005bce:	b006      	add	sp, #24
 8005bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ifprefix = ipv6_prefix_find(iface, prefix, len);
 8005bd4:	68bc      	ldr	r4, [r7, #8]
	if (!ipv6) {
 8005bd6:	2c00      	cmp	r4, #0
 8005bd8:	d156      	bne.n	8005c88 <net_if_ipv6_prefix_add+0xe4>
	if (!ipv6) {
 8005bda:	9e01      	ldr	r6, [sp, #4]
 8005bdc:	2e00      	cmp	r6, #0
 8005bde:	d0f0      	beq.n	8005bc2 <net_if_ipv6_prefix_add+0x1e>
		if (ipv6->prefix[i].is_used) {
 8005be0:	f896 30e5 	ldrb.w	r3, [r6, #229]	; 0xe5
 8005be4:	0799      	lsls	r1, r3, #30
 8005be6:	f3c3 0c40 	ubfx	ip, r3, #1, #1
 8005bea:	d505      	bpl.n	8005bf8 <net_if_ipv6_prefix_add+0x54>
 8005bec:	f896 310d 	ldrb.w	r3, [r6, #269]	; 0x10d
 8005bf0:	079a      	lsls	r2, r3, #30
 8005bf2:	d4e6      	bmi.n	8005bc2 <net_if_ipv6_prefix_add+0x1e>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 8005bf4:	f04f 0c01 	mov.w	ip, #1
		net_if_ipv6_prefix_init(iface, &ipv6->prefix[i], prefix,
 8005bf8:	2428      	movs	r4, #40	; 0x28
 8005bfa:	fb04 f40c 	mul.w	r4, r4, ip
	ifprefix->is_used = true;
 8005bfe:	1933      	adds	r3, r6, r4
 8005c00:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
 8005c04:	f893 20e5 	ldrb.w	r2, [r3, #229]	; 0xe5
	ifprefix->len = len;
 8005c08:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
	net_ipaddr_copy(&ifprefix->prefix, addr);
 8005c0c:	f105 0a10 	add.w	sl, r5, #16
	ifprefix->is_used = true;
 8005c10:	f042 0202 	orr.w	r2, r2, #2
	ifprefix->iface = iface;
 8005c14:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ifprefix->is_used = true;
 8005c18:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	net_ipaddr_copy(&ifprefix->prefix, addr);
 8005c1c:	ab02      	add	r3, sp, #8
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6828      	ldr	r0, [r5, #0]
 8005c22:	3508      	adds	r5, #8
 8005c24:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4555      	cmp	r5, sl
 8005c2c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8005c30:	4673      	mov	r3, lr
 8005c32:	d1f5      	bne.n	8005c20 <net_if_ipv6_prefix_add+0x7c>
 8005c34:	eb06 0309 	add.w	r3, r6, r9
 8005c38:	4615      	mov	r5, r2
 8005c3a:	f10d 0e18 	add.w	lr, sp, #24
 8005c3e:	3310      	adds	r3, #16
 8005c40:	462a      	mov	r2, r5
 8005c42:	3308      	adds	r3, #8
 8005c44:	ca03      	ldmia	r2!, {r0, r1}
 8005c46:	4572      	cmp	r2, lr
 8005c48:	f843 0c08 	str.w	r0, [r3, #-8]
 8005c4c:	f843 1c04 	str.w	r1, [r3, #-4]
 8005c50:	4615      	mov	r5, r2
 8005c52:	d1f5      	bne.n	8005c40 <net_if_ipv6_prefix_add+0x9c>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
 8005c54:	2328      	movs	r3, #40	; 0x28
			&ipv6->prefix[i].prefix, sizeof(struct in6_addr));
 8005c56:	34d0      	adds	r4, #208	; 0xd0
		net_mgmt_event_notify_with_info(
 8005c58:	9a01      	ldr	r2, [sp, #4]
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	fb03 660c 	mla	r6, r3, ip, r6
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
 8005c60:	f108 0301 	add.w	r3, r8, #1
		net_mgmt_event_notify_with_info(
 8005c64:	4422      	add	r2, r4
 8005c66:	481a      	ldr	r0, [pc, #104]	; (8005cd0 <net_if_ipv6_prefix_add+0x12c>)
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
 8005c68:	f1d3 0800 	rsbs	r8, r3, #0
 8005c6c:	eb48 0803 	adc.w	r8, r8, r3
 8005c70:	f896 30e5 	ldrb.w	r3, [r6, #229]	; 0xe5
 8005c74:	f368 0300 	bfi	r3, r8, #0, #1
 8005c78:	f886 30e5 	strb.w	r3, [r6, #229]	; 0xe5
		net_mgmt_event_notify_with_info(
 8005c7c:	2310      	movs	r3, #16
 8005c7e:	f000 fe73 	bl	8006968 <net_mgmt_event_notify_with_info>
		ifprefix = &ipv6->prefix[i];
 8005c82:	9c01      	ldr	r4, [sp, #4]
 8005c84:	444c      	add	r4, r9
		goto out;
 8005c86:	e79d      	b.n	8005bc4 <net_if_ipv6_prefix_add+0x20>
		if (!ipv6->prefix[i].is_used) {
 8005c88:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
 8005c8c:	079e      	lsls	r6, r3, #30
 8005c8e:	d509      	bpl.n	8005ca4 <net_if_ipv6_prefix_add+0x100>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
 8005c90:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
 8005c94:	4628      	mov	r0, r5
 8005c96:	f00f fe52 	bl	801593e <net_ipv6_addr_cmp>
 8005c9a:	b118      	cbz	r0, 8005ca4 <net_if_ipv6_prefix_add+0x100>
 8005c9c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8005ca0:	4553      	cmp	r3, sl
 8005ca2:	d012      	beq.n	8005cca <net_if_ipv6_prefix_add+0x126>
		if (!ipv6->prefix[i].is_used) {
 8005ca4:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8005ca8:	0798      	lsls	r0, r3, #30
 8005caa:	d596      	bpl.n	8005bda <net_if_ipv6_prefix_add+0x36>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
 8005cac:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f00f fe44 	bl	801593e <net_ipv6_addr_cmp>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d08f      	beq.n	8005bda <net_if_ipv6_prefix_add+0x36>
 8005cba:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8005cbe:	4553      	cmp	r3, sl
 8005cc0:	d18b      	bne.n	8005bda <net_if_ipv6_prefix_add+0x36>
 8005cc2:	2328      	movs	r3, #40	; 0x28
			return &ipv6->prefix[i];
 8005cc4:	33c0      	adds	r3, #192	; 0xc0
 8005cc6:	441c      	add	r4, r3
	if (ifprefix) {
 8005cc8:	e77c      	b.n	8005bc4 <net_if_ipv6_prefix_add+0x20>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e7fa      	b.n	8005cc4 <net_if_ipv6_prefix_add+0x120>
 8005cce:	bf00      	nop
 8005cd0:	e0600005 	.word	0xe0600005

08005cd4 <net_if_ipv6_addr_onlink>:
{
 8005cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd8:	4606      	mov	r6, r0
 8005cda:	460f      	mov	r7, r1
	STRUCT_SECTION_FOREACH(net_if, tmp) {
 8005cdc:	4c1c      	ldr	r4, [pc, #112]	; (8005d50 <net_if_ipv6_addr_onlink+0x7c>)
 8005cde:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8005d54 <net_if_ipv6_addr_onlink+0x80>
 8005ce2:	454c      	cmp	r4, r9
 8005ce4:	d301      	bcc.n	8005cea <net_if_ipv6_addr_onlink+0x16>
	bool ret = false;
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	e02f      	b.n	8005d4a <net_if_ipv6_addr_onlink+0x76>
		if (iface && *iface && *iface != tmp) {
 8005cea:	b11e      	cbz	r6, 8005cf4 <net_if_ipv6_addr_onlink+0x20>
 8005cec:	6833      	ldr	r3, [r6, #0]
 8005cee:	b10b      	cbz	r3, 8005cf4 <net_if_ipv6_addr_onlink+0x20>
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d119      	bne.n	8005d28 <net_if_ipv6_addr_onlink+0x54>
		net_if_lock(tmp);
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8005cfa:	f00f fe47 	bl	801598c <net_if_lock>
		ipv6 = tmp->config.ip.ipv6;
 8005cfe:	68a5      	ldr	r5, [r4, #8]
		if (!ipv6) {
 8005d00:	b17d      	cbz	r5, 8005d22 <net_if_ipv6_addr_onlink+0x4e>
			if (ipv6->prefix[i].is_used &&
 8005d02:	f895 30e5 	ldrb.w	r3, [r5, #229]	; 0xe5
 8005d06:	079a      	lsls	r2, r3, #30
 8005d08:	d410      	bmi.n	8005d2c <net_if_ipv6_addr_onlink+0x58>
 8005d0a:	f895 310d 	ldrb.w	r3, [r5, #269]	; 0x10d
 8005d0e:	079b      	lsls	r3, r3, #30
 8005d10:	d507      	bpl.n	8005d22 <net_if_ipv6_addr_onlink+0x4e>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 8005d12:	f895 210c 	ldrb.w	r2, [r5, #268]	; 0x10c
 8005d16:	4639      	mov	r1, r7
 8005d18:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
 8005d1c:	f00f fdeb 	bl	80158f6 <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
 8005d20:	b968      	cbnz	r0, 8005d3e <net_if_ipv6_addr_onlink+0x6a>
 8005d22:	4640      	mov	r0, r8
 8005d24:	f00f fe53 	bl	80159ce <k_mutex_unlock.isra.0>
	STRUCT_SECTION_FOREACH(net_if, tmp) {
 8005d28:	3460      	adds	r4, #96	; 0x60
 8005d2a:	e7da      	b.n	8005ce2 <net_if_ipv6_addr_onlink+0xe>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 8005d2c:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
 8005d30:	4639      	mov	r1, r7
 8005d32:	f105 00d0 	add.w	r0, r5, #208	; 0xd0
 8005d36:	f00f fdde 	bl	80158f6 <net_ipv6_is_prefix>
			if (ipv6->prefix[i].is_used &&
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d0e5      	beq.n	8005d0a <net_if_ipv6_addr_onlink+0x36>
				if (iface) {
 8005d3e:	b106      	cbz	r6, 8005d42 <net_if_ipv6_addr_onlink+0x6e>
					*iface = tmp;
 8005d40:	6034      	str	r4, [r6, #0]
 8005d42:	4640      	mov	r0, r8
 8005d44:	f00f fe43 	bl	80159ce <k_mutex_unlock.isra.0>
				ret = true;
 8005d48:	2001      	movs	r0, #1
}
 8005d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d4e:	bf00      	nop
 8005d50:	24001278 	.word	0x24001278
 8005d54:	240012d8 	.word	0x240012d8

08005d58 <net_if_ipv6_prefix_set_timer>:
{
 8005d58:	b538      	push	{r3, r4, r5, lr}
	if (lifetime == 0xffffffff) {
 8005d5a:	1c4b      	adds	r3, r1, #1
{
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	460d      	mov	r5, r1
	if (lifetime == 0xffffffff) {
 8005d60:	d01e      	beq.n	8005da0 <net_if_ipv6_prefix_set_timer+0x48>
	k_mutex_lock(&lock, K_FOREVER);
 8005d62:	f04f 33ff 	mov.w	r3, #4294967295
 8005d66:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6a:	480e      	ldr	r0, [pc, #56]	; (8005da4 <net_if_ipv6_prefix_set_timer+0x4c>)
 8005d6c:	f00f fe0c 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	(void)sys_slist_find_and_remove(&active_prefix_lifetime_timers,
 8005d70:	4621      	mov	r1, r4
 8005d72:	480d      	ldr	r0, [pc, #52]	; (8005da8 <net_if_ipv6_prefix_set_timer+0x50>)
 8005d74:	f00f fd5c 	bl	8015830 <sys_slist_find_and_remove>
	sys_slist_append(&active_prefix_lifetime_timers,
 8005d78:	480b      	ldr	r0, [pc, #44]	; (8005da8 <net_if_ipv6_prefix_set_timer+0x50>)
 8005d7a:	f00f fd4f 	bl	801581c <sys_slist_append>
	net_timeout_set(&ifprefix->lifetime, lifetime, k_uptime_get_32());
 8005d7e:	f00f fde6 	bl	801594e <k_uptime_get_32>
 8005d82:	4629      	mov	r1, r5
 8005d84:	4602      	mov	r2, r0
 8005d86:	4620      	mov	r0, r4
 8005d88:	f010 f981 	bl	801608e <net_timeout_set>
	k_work_reschedule(&prefix_lifetime_timer, K_NO_WAIT);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2200      	movs	r2, #0
 8005d90:	4806      	ldr	r0, [pc, #24]	; (8005dac <net_if_ipv6_prefix_set_timer+0x54>)
 8005d92:	f00c fb43 	bl	801241c <k_work_reschedule>
	k_mutex_unlock(&lock);
 8005d96:	4803      	ldr	r0, [pc, #12]	; (8005da4 <net_if_ipv6_prefix_set_timer+0x4c>)
}
 8005d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&lock);
 8005d9c:	f00f be17 	b.w	80159ce <k_mutex_unlock.isra.0>
}
 8005da0:	bd38      	pop	{r3, r4, r5, pc}
 8005da2:	bf00      	nop
 8005da4:	240010d8 	.word	0x240010d8
 8005da8:	24002458 	.word	0x24002458
 8005dac:	24001618 	.word	0x24001618

08005db0 <net_if_ipv6_prefix_unset_timer>:
{
 8005db0:	b510      	push	{r4, lr}
	if (!prefix->is_used) {
 8005db2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
{
 8005db6:	4604      	mov	r4, r0
	if (!prefix->is_used) {
 8005db8:	079b      	lsls	r3, r3, #30
 8005dba:	d514      	bpl.n	8005de6 <net_if_ipv6_prefix_unset_timer+0x36>
	k_mutex_lock(&lock, K_FOREVER);
 8005dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	4808      	ldr	r0, [pc, #32]	; (8005de8 <net_if_ipv6_prefix_unset_timer+0x38>)
 8005dc6:	f00f fddf 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	sys_slist_find_and_remove(&active_prefix_lifetime_timers,
 8005dca:	4621      	mov	r1, r4
 8005dcc:	4807      	ldr	r0, [pc, #28]	; (8005dec <net_if_ipv6_prefix_unset_timer+0x3c>)
 8005dce:	f00f fd2f 	bl	8015830 <sys_slist_find_and_remove>
	net_timeout_set(&ifprefix->lifetime, 0, 0);
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	f010 f959 	bl	801608e <net_timeout_set>
	k_mutex_unlock(&lock);
 8005ddc:	4802      	ldr	r0, [pc, #8]	; (8005de8 <net_if_ipv6_prefix_unset_timer+0x38>)
}
 8005dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&lock);
 8005de2:	f00f bdf4 	b.w	80159ce <k_mutex_unlock.isra.0>
}
 8005de6:	bd10      	pop	{r4, pc}
 8005de8:	240010d8 	.word	0x240010d8
 8005dec:	24002458 	.word	0x24002458

08005df0 <net_if_ipv6_prefix_rm>:
{
 8005df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df4:	4605      	mov	r5, r0
 8005df6:	460f      	mov	r7, r1
 8005df8:	4690      	mov	r8, r2
	net_if_lock(iface);
 8005dfa:	f00f fdc7 	bl	801598c <net_if_lock>
	ipv6 = iface->config.ip.ipv6;
 8005dfe:	68ac      	ldr	r4, [r5, #8]
	if (!ipv6) {
 8005e00:	b93c      	cbnz	r4, 8005e12 <net_if_ipv6_prefix_rm+0x22>
	bool ret = false;
 8005e02:	2400      	movs	r4, #0
 8005e04:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8005e08:	f00f fde1 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!ipv6->prefix[i].is_used) {
 8005e12:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
 8005e16:	079a      	lsls	r2, r3, #30
 8005e18:	d50a      	bpl.n	8005e30 <net_if_ipv6_prefix_rm+0x40>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
 8005e1a:	f104 09d0 	add.w	r9, r4, #208	; 0xd0
 8005e1e:	4639      	mov	r1, r7
 8005e20:	4648      	mov	r0, r9
 8005e22:	f00f fd8c 	bl	801593e <net_ipv6_addr_cmp>
 8005e26:	b118      	cbz	r0, 8005e30 <net_if_ipv6_prefix_rm+0x40>
 8005e28:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8005e2c:	4543      	cmp	r3, r8
 8005e2e:	d02c      	beq.n	8005e8a <net_if_ipv6_prefix_rm+0x9a>
		if (!ipv6->prefix[i].is_used) {
 8005e30:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8005e34:	079b      	lsls	r3, r3, #30
 8005e36:	d5e4      	bpl.n	8005e02 <net_if_ipv6_prefix_rm+0x12>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
 8005e38:	f104 09f8 	add.w	r9, r4, #248	; 0xf8
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	4648      	mov	r0, r9
 8005e40:	f00f fd7d 	bl	801593e <net_ipv6_addr_cmp>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d0dc      	beq.n	8005e02 <net_if_ipv6_prefix_rm+0x12>
 8005e48:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8005e4c:	4543      	cmp	r3, r8
 8005e4e:	d1d8      	bne.n	8005e02 <net_if_ipv6_prefix_rm+0x12>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 8005e50:	2601      	movs	r6, #1
 8005e52:	2028      	movs	r0, #40	; 0x28
		net_if_ipv6_prefix_unset_timer(&ipv6->prefix[i]);
 8005e54:	30c0      	adds	r0, #192	; 0xc0
 8005e56:	4420      	add	r0, r4
 8005e58:	f7ff ffaa 	bl	8005db0 <net_if_ipv6_prefix_unset_timer>
		ipv6->prefix[i].is_used = false;
 8005e5c:	2328      	movs	r3, #40	; 0x28
		remove_prefix_addresses(iface, ipv6, addr, len);
 8005e5e:	4621      	mov	r1, r4
 8005e60:	463a      	mov	r2, r7
		ipv6->prefix[i].is_used = false;
 8005e62:	fb03 4606 	mla	r6, r3, r6, r4
		remove_prefix_addresses(iface, ipv6, addr, len);
 8005e66:	4628      	mov	r0, r5
		ret = true;
 8005e68:	2401      	movs	r4, #1
		ipv6->prefix[i].is_used = false;
 8005e6a:	f896 30e5 	ldrb.w	r3, [r6, #229]	; 0xe5
 8005e6e:	f36f 0341 	bfc	r3, #1, #1
 8005e72:	f886 30e5 	strb.w	r3, [r6, #229]	; 0xe5
		remove_prefix_addresses(iface, ipv6, addr, len);
 8005e76:	4643      	mov	r3, r8
 8005e78:	f00f fed3 	bl	8015c22 <remove_prefix_addresses>
		net_mgmt_event_notify_with_info(
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	464a      	mov	r2, r9
 8005e80:	4629      	mov	r1, r5
 8005e82:	4803      	ldr	r0, [pc, #12]	; (8005e90 <net_if_ipv6_prefix_rm+0xa0>)
 8005e84:	f000 fd70 	bl	8006968 <net_mgmt_event_notify_with_info>
		goto out;
 8005e88:	e7bc      	b.n	8005e04 <net_if_ipv6_prefix_rm+0x14>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 8005e8a:	2600      	movs	r6, #0
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	e7e1      	b.n	8005e54 <net_if_ipv6_prefix_rm+0x64>
 8005e90:	e0600006 	.word	0xe0600006

08005e94 <net_if_ipv6_select_src_addr>:
	uint8_t best_match = 0U;
 8005e94:	2300      	movs	r3, #0
{
 8005e96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast_link(dst)) {
 8005e98:	880a      	ldrh	r2, [r1, #0]
{
 8005e9a:	4604      	mov	r4, r0
	uint8_t best_match = 0U;
 8005e9c:	f88d 3007 	strb.w	r3, [sp, #7]
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast_link(dst)) {
 8005ea0:	f248 03fe 	movw	r3, #33022	; 0x80fe
{
 8005ea4:	460d      	mov	r5, r1
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast_link(dst)) {
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d01f      	beq.n	8005eea <net_if_ipv6_select_src_addr+0x56>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 8005eaa:	780b      	ldrb	r3, [r1, #0]
 8005eac:	2bff      	cmp	r3, #255	; 0xff
 8005eae:	d102      	bne.n	8005eb6 <net_if_ipv6_select_src_addr+0x22>
 8005eb0:	784b      	ldrb	r3, [r1, #1]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d019      	beq.n	8005eea <net_if_ipv6_select_src_addr+0x56>
		if (dst_iface) {
 8005eb6:	b1ac      	cbz	r4, 8005ee4 <net_if_ipv6_select_src_addr+0x50>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
 8005eb8:	f10d 0207 	add.w	r2, sp, #7
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f7ff f876 	bl	8004fb0 <net_if_ipv6_get_best_match>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	e00b      	b.n	8005ee0 <net_if_ipv6_select_src_addr+0x4c>
				addr = net_if_ipv6_get_best_match(iface, dst,
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f10d 0207 	add.w	r2, sp, #7
 8005ece:	4629      	mov	r1, r5
			STRUCT_SECTION_FOREACH(net_if, iface) {
 8005ed0:	3660      	adds	r6, #96	; 0x60
				addr = net_if_ipv6_get_best_match(iface, dst,
 8005ed2:	f7ff f86d 	bl	8004fb0 <net_if_ipv6_get_best_match>
				if (addr) {
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	bf18      	it	ne
 8005eda:	4604      	movne	r4, r0
			STRUCT_SECTION_FOREACH(net_if, iface) {
 8005edc:	42be      	cmp	r6, r7
 8005ede:	d3f3      	bcc.n	8005ec8 <net_if_ipv6_select_src_addr+0x34>
	if (!src) {
 8005ee0:	b9ac      	cbnz	r4, 8005f0e <net_if_ipv6_select_src_addr+0x7a>
 8005ee2:	e011      	b.n	8005f08 <net_if_ipv6_select_src_addr+0x74>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 8005ee4:	4e0d      	ldr	r6, [pc, #52]	; (8005f1c <net_if_ipv6_select_src_addr+0x88>)
 8005ee6:	4f0e      	ldr	r7, [pc, #56]	; (8005f20 <net_if_ipv6_select_src_addr+0x8c>)
 8005ee8:	e7f8      	b.n	8005edc <net_if_ipv6_select_src_addr+0x48>
		if (dst_iface) {
 8005eea:	b19c      	cbz	r4, 8005f14 <net_if_ipv6_select_src_addr+0x80>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
 8005eec:	2101      	movs	r1, #1
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f00f ff71 	bl	8015dd6 <net_if_ipv6_get_ll>
 8005ef4:	e7e6      	b.n	8005ec4 <net_if_ipv6_select_src_addr+0x30>
				addr = net_if_ipv6_get_ll(iface,
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f00f ff6c 	bl	8015dd6 <net_if_ipv6_get_ll>
				if (addr) {
 8005efe:	4604      	mov	r4, r0
 8005f00:	b928      	cbnz	r0, 8005f0e <net_if_ipv6_select_src_addr+0x7a>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 8005f02:	3560      	adds	r5, #96	; 0x60
 8005f04:	42b5      	cmp	r5, r6
 8005f06:	d3f6      	bcc.n	8005ef6 <net_if_ipv6_select_src_addr+0x62>
		src = net_ipv6_unspecified_address();
 8005f08:	f000 fc6e 	bl	80067e8 <net_ipv6_unspecified_address>
 8005f0c:	4604      	mov	r4, r0
}
 8005f0e:	4620      	mov	r0, r4
 8005f10:	b003      	add	sp, #12
 8005f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
			STRUCT_SECTION_FOREACH(net_if, iface) {
 8005f14:	4d01      	ldr	r5, [pc, #4]	; (8005f1c <net_if_ipv6_select_src_addr+0x88>)
 8005f16:	4e02      	ldr	r6, [pc, #8]	; (8005f20 <net_if_ipv6_select_src_addr+0x8c>)
 8005f18:	e7f4      	b.n	8005f04 <net_if_ipv6_select_src_addr+0x70>
 8005f1a:	bf00      	nop
 8005f1c:	24001278 	.word	0x24001278
 8005f20:	240012d8 	.word	0x240012d8

08005f24 <net_if_config_ipv4_get>:
{
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4605      	mov	r5, r0
 8005f28:	460c      	mov	r4, r1
	net_if_lock(iface);
 8005f2a:	f00f fd2f 	bl	801598c <net_if_lock>
	if (!net_if_flag_is_set(iface, NET_IF_IPV4)) {
 8005f2e:	2106      	movs	r1, #6
 8005f30:	4628      	mov	r0, r5
 8005f32:	f00f fd32 	bl	801599a <net_if_flag_is_set>
 8005f36:	b310      	cbz	r0, 8005f7e <net_if_config_ipv4_get+0x5a>
	if (iface->config.ip.ipv4) {
 8005f38:	68eb      	ldr	r3, [r5, #12]
 8005f3a:	b143      	cbz	r3, 8005f4e <net_if_config_ipv4_get+0x2a>
		if (ipv4) {
 8005f3c:	b10c      	cbz	r4, 8005f42 <net_if_config_ipv4_get+0x1e>
			*ipv4 = iface->config.ip.ipv4;
 8005f3e:	6023      	str	r3, [r4, #0]
	int ret = 0;
 8005f40:	2400      	movs	r4, #0
 8005f42:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8005f46:	f00f fd42 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&lock, K_FOREVER);
 8005f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f52:	f04f 33ff 	mov.w	r3, #4294967295
 8005f56:	480b      	ldr	r0, [pc, #44]	; (8005f84 <net_if_config_ipv4_get+0x60>)
 8005f58:	f00f fd16 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
		if (ipv4_addresses[i].iface) {
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <net_if_config_ipv4_get+0x64>)
 8005f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f60:	b93a      	cbnz	r2, 8005f72 <net_if_config_ipv4_get+0x4e>
		iface->config.ip.ipv4 = &ipv4_addresses[i].ipv4;
 8005f62:	60eb      	str	r3, [r5, #12]
		ipv4_addresses[i].iface = iface;
 8005f64:	655d      	str	r5, [r3, #84]	; 0x54
		if (ipv4) {
 8005f66:	b104      	cbz	r4, 8005f6a <net_if_config_ipv4_get+0x46>
			*ipv4 = &ipv4_addresses[i].ipv4;
 8005f68:	6023      	str	r3, [r4, #0]
		k_mutex_unlock(&lock);
 8005f6a:	4806      	ldr	r0, [pc, #24]	; (8005f84 <net_if_config_ipv4_get+0x60>)
 8005f6c:	f00f fd2f 	bl	80159ce <k_mutex_unlock.isra.0>
 8005f70:	e7e6      	b.n	8005f40 <net_if_config_ipv4_get+0x1c>
	k_mutex_unlock(&lock);
 8005f72:	4804      	ldr	r0, [pc, #16]	; (8005f84 <net_if_config_ipv4_get+0x60>)
	ret = -ESRCH;
 8005f74:	f06f 0402 	mvn.w	r4, #2
	k_mutex_unlock(&lock);
 8005f78:	f00f fd29 	bl	80159ce <k_mutex_unlock.isra.0>
	ret = -ESRCH;
 8005f7c:	e7e1      	b.n	8005f42 <net_if_config_ipv4_get+0x1e>
		ret = -ENOTSUP;
 8005f7e:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8005f82:	e7de      	b.n	8005f42 <net_if_config_ipv4_get+0x1e>
 8005f84:	240010d8 	.word	0x240010d8
 8005f88:	24002474 	.word	0x24002474

08005f8c <net_if_ipv4_is_addr_bcast>:
{
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	460d      	mov	r5, r1
	if (iface) {
 8005f90:	b168      	cbz	r0, 8005fae <net_if_ipv4_is_addr_bcast+0x22>
}
 8005f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = ipv4_is_broadcast_address(iface, addr);
 8005f96:	f00f bfa0 	b.w	8015eda <ipv4_is_broadcast_address>
		ret = ipv4_is_broadcast_address(iface, addr);
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f00f ff9c 	bl	8015eda <ipv4_is_broadcast_address>
		if (ret) {
 8005fa2:	b918      	cbnz	r0, 8005fac <net_if_ipv4_is_addr_bcast+0x20>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8005fa4:	3460      	adds	r4, #96	; 0x60
 8005fa6:	42b4      	cmp	r4, r6
 8005fa8:	d3f7      	bcc.n	8005f9a <net_if_ipv4_is_addr_bcast+0xe>
out:
 8005faa:	2000      	movs	r0, #0
}
 8005fac:	bd70      	pop	{r4, r5, r6, pc}
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8005fae:	4c01      	ldr	r4, [pc, #4]	; (8005fb4 <net_if_ipv4_is_addr_bcast+0x28>)
 8005fb0:	4e01      	ldr	r6, [pc, #4]	; (8005fb8 <net_if_ipv4_is_addr_bcast+0x2c>)
 8005fb2:	e7f8      	b.n	8005fa6 <net_if_ipv4_is_addr_bcast+0x1a>
 8005fb4:	24001278 	.word	0x24001278
 8005fb8:	240012d8 	.word	0x240012d8

08005fbc <net_if_ipv4_select_src_iface>:
{
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8005fc0:	4c08      	ldr	r4, [pc, #32]	; (8005fe4 <net_if_ipv4_select_src_iface+0x28>)
 8005fc2:	4e09      	ldr	r6, [pc, #36]	; (8005fe8 <net_if_ipv4_select_src_iface+0x2c>)
 8005fc4:	42b4      	cmp	r4, r6
 8005fc6:	d303      	bcc.n	8005fd0 <net_if_ipv4_select_src_iface+0x14>
}
 8005fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		selected = net_if_get_default();
 8005fcc:	f7ff b8a6 	b.w	800511c <net_if_get_default>
		ret = net_if_ipv4_addr_mask_cmp(iface, dst);
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f00f ff60 	bl	8015e98 <net_if_ipv4_addr_mask_cmp>
		if (ret) {
 8005fd8:	b908      	cbnz	r0, 8005fde <net_if_ipv4_select_src_iface+0x22>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8005fda:	3460      	adds	r4, #96	; 0x60
 8005fdc:	e7f2      	b.n	8005fc4 <net_if_ipv4_select_src_iface+0x8>
}
 8005fde:	4620      	mov	r0, r4
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	bf00      	nop
 8005fe4:	24001278 	.word	0x24001278
 8005fe8:	240012d8 	.word	0x240012d8

08005fec <net_if_ipv4_select_src_addr>:
	uint8_t best_match = 0U;
 8005fec:	2300      	movs	r3, #0
{
 8005fee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ff2:	4605      	mov	r5, r0
	if (!net_ipv4_is_ll_addr(dst)) {
 8005ff4:	4608      	mov	r0, r1
{
 8005ff6:	460f      	mov	r7, r1
	uint8_t best_match = 0U;
 8005ff8:	f88d 3007 	strb.w	r3, [sp, #7]
	if (!net_ipv4_is_ll_addr(dst)) {
 8005ffc:	f7fe fd7c 	bl	8004af8 <net_ipv4_is_ll_addr>
 8006000:	b9e8      	cbnz	r0, 800603e <net_if_ipv4_select_src_addr+0x52>
		if (dst_iface) {
 8006002:	b1bd      	cbz	r5, 8006034 <net_if_ipv4_select_src_addr+0x48>
			src = net_if_ipv4_get_best_match(dst_iface, dst,
 8006004:	f10d 0207 	add.w	r2, sp, #7
 8006008:	4628      	mov	r0, r5
 800600a:	f7fe ffa3 	bl	8004f54 <net_if_ipv4_get_best_match>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
 800600e:	4604      	mov	r4, r0
 8006010:	e00b      	b.n	800602a <net_if_ipv4_select_src_addr+0x3e>
				addr = net_if_ipv4_get_best_match(iface, dst,
 8006012:	4630      	mov	r0, r6
 8006014:	f10d 0207 	add.w	r2, sp, #7
 8006018:	4639      	mov	r1, r7
			STRUCT_SECTION_FOREACH(net_if, iface) {
 800601a:	3660      	adds	r6, #96	; 0x60
				addr = net_if_ipv4_get_best_match(iface, dst,
 800601c:	f7fe ff9a 	bl	8004f54 <net_if_ipv4_get_best_match>
				if (addr) {
 8006020:	2800      	cmp	r0, #0
 8006022:	bf18      	it	ne
 8006024:	4604      	movne	r4, r0
			STRUCT_SECTION_FOREACH(net_if, iface) {
 8006026:	4546      	cmp	r6, r8
 8006028:	d3f3      	bcc.n	8006012 <net_if_ipv4_select_src_addr+0x26>
	if (!src) {
 800602a:	b1c4      	cbz	r4, 800605e <net_if_ipv4_select_src_addr+0x72>
}
 800602c:	4620      	mov	r0, r4
 800602e:	b002      	add	sp, #8
 8006030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const struct in_addr *src = NULL;
 8006034:	462c      	mov	r4, r5
			STRUCT_SECTION_FOREACH(net_if, iface) {
 8006036:	4e11      	ldr	r6, [pc, #68]	; (800607c <net_if_ipv4_select_src_addr+0x90>)
 8006038:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8006080 <net_if_ipv4_select_src_addr+0x94>
 800603c:	e7f3      	b.n	8006026 <net_if_ipv4_select_src_addr+0x3a>
		if (dst_iface) {
 800603e:	b1cd      	cbz	r5, 8006074 <net_if_ipv4_select_src_addr+0x88>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
 8006040:	2101      	movs	r1, #1
 8006042:	4628      	mov	r0, r5
 8006044:	f00f ff66 	bl	8015f14 <net_if_ipv4_get_ll>
 8006048:	e7e1      	b.n	800600e <net_if_ipv4_select_src_addr+0x22>
				addr = net_if_ipv4_get_ll(iface,
 800604a:	2101      	movs	r1, #1
 800604c:	4630      	mov	r0, r6
 800604e:	f00f ff61 	bl	8015f14 <net_if_ipv4_get_ll>
				if (addr) {
 8006052:	4604      	mov	r4, r0
 8006054:	2800      	cmp	r0, #0
 8006056:	d1e9      	bne.n	800602c <net_if_ipv4_select_src_addr+0x40>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 8006058:	3660      	adds	r6, #96	; 0x60
 800605a:	42be      	cmp	r6, r7
 800605c:	d3f5      	bcc.n	800604a <net_if_ipv4_select_src_addr+0x5e>
		src = net_if_ipv4_get_global_addr(dst_iface,
 800605e:	2101      	movs	r1, #1
 8006060:	4628      	mov	r0, r5
 8006062:	f00f ff5a 	bl	8015f1a <net_if_ipv4_get_global_addr>
		if (!src) {
 8006066:	4604      	mov	r4, r0
 8006068:	2800      	cmp	r0, #0
 800606a:	d1df      	bne.n	800602c <net_if_ipv4_select_src_addr+0x40>
			src = net_ipv4_unspecified_address();
 800606c:	f000 fbb4 	bl	80067d8 <net_ipv4_unspecified_address>
 8006070:	4604      	mov	r4, r0
	return src;
 8006072:	e7db      	b.n	800602c <net_if_ipv4_select_src_addr+0x40>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 8006074:	4e01      	ldr	r6, [pc, #4]	; (800607c <net_if_ipv4_select_src_addr+0x90>)
 8006076:	4f02      	ldr	r7, [pc, #8]	; (8006080 <net_if_ipv4_select_src_addr+0x94>)
 8006078:	e7ef      	b.n	800605a <net_if_ipv4_select_src_addr+0x6e>
 800607a:	bf00      	nop
 800607c:	24001278 	.word	0x24001278
 8006080:	240012d8 	.word	0x240012d8

08006084 <net_if_ipv4_addr_lookup>:
{
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	4606      	mov	r6, r0
 8006088:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800608a:	4c11      	ldr	r4, [pc, #68]	; (80060d0 <net_if_ipv4_addr_lookup+0x4c>)
 800608c:	4f11      	ldr	r7, [pc, #68]	; (80060d4 <net_if_ipv4_addr_lookup+0x50>)
 800608e:	42bc      	cmp	r4, r7
 8006090:	d301      	bcc.n	8006096 <net_if_ipv4_addr_lookup+0x12>
	struct net_if_addr *ifaddr = NULL;
 8006092:	2400      	movs	r4, #0
	return ifaddr;
 8006094:	e01a      	b.n	80060cc <net_if_ipv4_addr_lookup+0x48>
		net_if_lock(iface);
 8006096:	4620      	mov	r0, r4
 8006098:	f00f fc78 	bl	801598c <net_if_lock>
		ipv4 = iface->config.ip.ipv4;
 800609c:	68e3      	ldr	r3, [r4, #12]
		if (!ipv4) {
 800609e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80060a2:	b91b      	cbnz	r3, 80060ac <net_if_ipv4_addr_lookup+0x28>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 80060a4:	3460      	adds	r4, #96	; 0x60
 80060a6:	f00f fc92 	bl	80159ce <k_mutex_unlock.isra.0>
 80060aa:	e7f0      	b.n	800608e <net_if_ipv4_addr_lookup+0xa>
			if (!ipv4->unicast[i].is_used ||
 80060ac:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80060b0:	0792      	lsls	r2, r2, #30
 80060b2:	d5f7      	bpl.n	80060a4 <net_if_ipv4_addr_lookup+0x20>
 80060b4:	881a      	ldrh	r2, [r3, #0]
 80060b6:	2a01      	cmp	r2, #1
 80060b8:	d1f4      	bne.n	80060a4 <net_if_ipv4_addr_lookup+0x20>
			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
 80060ba:	6832      	ldr	r2, [r6, #0]
 80060bc:	6859      	ldr	r1, [r3, #4]
 80060be:	4291      	cmp	r1, r2
 80060c0:	d1f0      	bne.n	80060a4 <net_if_ipv4_addr_lookup+0x20>
				if (ret) {
 80060c2:	b105      	cbz	r5, 80060c6 <net_if_ipv4_addr_lookup+0x42>
					*ret = iface;
 80060c4:	602c      	str	r4, [r5, #0]
				ifaddr = &ipv4->unicast[i];
 80060c6:	461c      	mov	r4, r3
 80060c8:	f00f fc81 	bl	80159ce <k_mutex_unlock.isra.0>
}
 80060cc:	4620      	mov	r0, r4
 80060ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060d0:	24001278 	.word	0x24001278
 80060d4:	240012d8 	.word	0x240012d8

080060d8 <net_if_ipv4_addr_add>:
{
 80060d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060dc:	4606      	mov	r6, r0
 80060de:	460f      	mov	r7, r1
 80060e0:	4690      	mov	r8, r2
 80060e2:	461d      	mov	r5, r3
	net_if_lock(iface);
 80060e4:	f00f fc52 	bl	801598c <net_if_lock>
	if (net_if_config_ipv4_get(iface, &ipv4) < 0) {
 80060e8:	a901      	add	r1, sp, #4
 80060ea:	4630      	mov	r0, r6
 80060ec:	f7ff ff1a 	bl	8005f24 <net_if_config_ipv4_get>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	db10      	blt.n	8006116 <net_if_ipv4_addr_add+0x3e>
	ifaddr = ipv4_addr_find(iface, addr);
 80060f4:	68f4      	ldr	r4, [r6, #12]
		if (!ipv4->unicast[i].is_used) {
 80060f6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80060fa:	079a      	lsls	r2, r3, #30
 80060fc:	d50d      	bpl.n	800611a <net_if_ipv4_addr_add+0x42>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	6863      	ldr	r3, [r4, #4]
		if (net_ipv4_addr_cmp(addr,
 8006102:	429a      	cmp	r2, r3
 8006104:	d109      	bne.n	800611a <net_if_ipv4_addr_add+0x42>
 8006106:	f106 0048 	add.w	r0, r6, #72	; 0x48
 800610a:	f00f fc60 	bl	80159ce <k_mutex_unlock.isra.0>
}
 800610e:	4620      	mov	r0, r4
 8006110:	b002      	add	sp, #8
 8006112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct net_if_addr *ifaddr = NULL;
 8006116:	2400      	movs	r4, #0
 8006118:	e7f5      	b.n	8006106 <net_if_ipv4_addr_add+0x2e>
		if (addr_type == NET_ADDR_DHCP
 800611a:	f1b8 0f02 	cmp.w	r8, #2
		struct net_if_addr *cur = &ipv4->unicast[i];
 800611e:	9c01      	ldr	r4, [sp, #4]
		if (addr_type == NET_ADDR_DHCP
 8006120:	d103      	bne.n	800612a <net_if_ipv4_addr_add+0x52>
		    && cur->addr_type == NET_ADDR_OVERRIDABLE) {
 8006122:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006126:	2b04      	cmp	r3, #4
 8006128:	d003      	beq.n	8006132 <net_if_ipv4_addr_add+0x5a>
		if (!ipv4->unicast[i].is_used) {
 800612a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800612e:	079b      	lsls	r3, r3, #30
 8006130:	d4f1      	bmi.n	8006116 <net_if_ipv4_addr_add+0x3e>
	if (ifaddr) {
 8006132:	2c00      	cmp	r4, #0
 8006134:	d0e7      	beq.n	8006106 <net_if_ipv4_addr_add+0x2e>
		ifaddr->is_used = true;
 8006136:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
		ifaddr->address.family = AF_INET;
 800613a:	2201      	movs	r2, #1
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
 800613c:	480d      	ldr	r0, [pc, #52]	; (8006174 <net_if_ipv4_addr_add+0x9c>)
		ifaddr->is_used = true;
 800613e:	f043 0302 	orr.w	r3, r3, #2
		ifaddr->address.family = AF_INET;
 8006142:	8022      	strh	r2, [r4, #0]
		ifaddr->is_used = true;
 8006144:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
						addr->s4_addr32[0];
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
		ifaddr->address.in_addr.s4_addr32[0] =
 800614e:	6063      	str	r3, [r4, #4]
		if (vlifetime) {
 8006150:	fab5 f385 	clz	r3, r5
		ifaddr->addr_state = NET_ADDR_PREFERRED;
 8006154:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		if (vlifetime) {
 8006158:	095b      	lsrs	r3, r3, #5
		ifaddr->addr_type = addr_type;
 800615a:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
		if (vlifetime) {
 800615e:	f363 0100 	bfi	r1, r3, #0, #1
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
 8006162:	2304      	movs	r3, #4
 8006164:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
 8006168:	18e2      	adds	r2, r4, r3
 800616a:	4631      	mov	r1, r6
 800616c:	f000 fbfc 	bl	8006968 <net_mgmt_event_notify_with_info>
		goto out;
 8006170:	e7c9      	b.n	8006106 <net_if_ipv4_addr_add+0x2e>
 8006172:	bf00      	nop
 8006174:	e0040001 	.word	0xe0040001

08006178 <net_if_ipv4_addr_rm>:
{
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	4604      	mov	r4, r0
 800617c:	460e      	mov	r6, r1
	net_if_lock(iface);
 800617e:	f00f fc05 	bl	801598c <net_if_lock>
	ipv4 = iface->config.ip.ipv4;
 8006182:	68e2      	ldr	r2, [r4, #12]
	if (!ipv4) {
 8006184:	b1ca      	cbz	r2, 80061ba <net_if_ipv4_addr_rm+0x42>
		if (!ipv4->unicast[i].is_used) {
 8006186:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 800618a:	0799      	lsls	r1, r3, #30
 800618c:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8006190:	d50d      	bpl.n	80061ae <net_if_ipv4_addr_rm+0x36>
 8006192:	6830      	ldr	r0, [r6, #0]
 8006194:	6851      	ldr	r1, [r2, #4]
		if (!net_ipv4_addr_cmp(&ipv4->unicast[i].address.in_addr,
 8006196:	4288      	cmp	r0, r1
 8006198:	d10f      	bne.n	80061ba <net_if_ipv4_addr_rm+0x42>
		ipv4->unicast[i].is_used = false;
 800619a:	f36f 0341 	bfc	r3, #1, #1
		net_mgmt_event_notify_with_info(
 800619e:	4621      	mov	r1, r4
 80061a0:	4807      	ldr	r0, [pc, #28]	; (80061c0 <net_if_ipv4_addr_rm+0x48>)
		ipv4->unicast[i].is_used = false;
 80061a2:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
		net_mgmt_event_notify_with_info(
 80061a6:	2304      	movs	r3, #4
 80061a8:	441a      	add	r2, r3
 80061aa:	f000 fbdd 	bl	8006968 <net_mgmt_event_notify_with_info>
 80061ae:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80061b2:	f00f fc0c 	bl	80159ce <k_mutex_unlock.isra.0>
}
 80061b6:	4628      	mov	r0, r5
 80061b8:	bd70      	pop	{r4, r5, r6, pc}
	bool ret = false;
 80061ba:	2500      	movs	r5, #0
 80061bc:	e7f7      	b.n	80061ae <net_if_ipv4_addr_rm+0x36>
 80061be:	bf00      	nop
 80061c0:	e0040002 	.word	0xe0040002

080061c4 <net_if_ipv4_maddr_lookup>:
{
 80061c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c6:	4606      	mov	r6, r0
 80061c8:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(net_if, iface) {
 80061ca:	4c14      	ldr	r4, [pc, #80]	; (800621c <net_if_ipv4_maddr_lookup+0x58>)
 80061cc:	4f14      	ldr	r7, [pc, #80]	; (8006220 <net_if_ipv4_maddr_lookup+0x5c>)
 80061ce:	42bc      	cmp	r4, r7
 80061d0:	d301      	bcc.n	80061d6 <net_if_ipv4_maddr_lookup+0x12>
out:
 80061d2:	2400      	movs	r4, #0
	return addr;
 80061d4:	e015      	b.n	8006202 <net_if_ipv4_maddr_lookup+0x3e>
		if (ret && *ret && iface != *ret) {
 80061d6:	b11d      	cbz	r5, 80061e0 <net_if_ipv4_maddr_lookup+0x1c>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	b10b      	cbz	r3, 80061e0 <net_if_ipv4_maddr_lookup+0x1c>
 80061dc:	42a3      	cmp	r3, r4
 80061de:	d118      	bne.n	8006212 <net_if_ipv4_maddr_lookup+0x4e>
		net_if_lock(iface);
 80061e0:	4620      	mov	r0, r4
 80061e2:	f00f fbd3 	bl	801598c <net_if_lock>
		addr = ipv4_maddr_find(iface, true, maddr);
 80061e6:	68e3      	ldr	r3, [r4, #12]
	if (!ipv4) {
 80061e8:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80061ec:	b17b      	cbz	r3, 800620e <net_if_ipv4_maddr_lookup+0x4a>
		if ((is_used && !ipv4->mcast[i].is_used) ||
 80061ee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80061f2:	07d2      	lsls	r2, r2, #31
 80061f4:	d50b      	bpl.n	800620e <net_if_ipv4_maddr_lookup+0x4a>
		if (addr) {
 80061f6:	b936      	cbnz	r6, 8006206 <net_if_ipv4_maddr_lookup+0x42>
			if (ret) {
 80061f8:	b96d      	cbnz	r5, 8006216 <net_if_ipv4_maddr_lookup+0x52>
		return &ipv4->mcast[i];
 80061fa:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80061fe:	f00f fbe6 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8006202:	4620      	mov	r0, r4
 8006204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006206:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006208:	6832      	ldr	r2, [r6, #0]
			if (!net_ipv4_addr_cmp(&ipv4->mcast[i].address.in_addr,
 800620a:	4291      	cmp	r1, r2
 800620c:	d0f4      	beq.n	80061f8 <net_if_ipv4_maddr_lookup+0x34>
 800620e:	f00f fbde 	bl	80159ce <k_mutex_unlock.isra.0>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8006212:	3460      	adds	r4, #96	; 0x60
 8006214:	e7db      	b.n	80061ce <net_if_ipv4_maddr_lookup+0xa>
				*ret = iface;
 8006216:	602c      	str	r4, [r5, #0]
 8006218:	e7ef      	b.n	80061fa <net_if_ipv4_maddr_lookup+0x36>
 800621a:	bf00      	nop
 800621c:	24001278 	.word	0x24001278
 8006220:	240012d8 	.word	0x240012d8

08006224 <net_if_call_link_cb>:
{
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	k_mutex_lock(&lock, K_FOREVER);
 8006226:	f04f 33ff 	mov.w	r3, #4294967295
{
 800622a:	4605      	mov	r5, r0
 800622c:	4617      	mov	r7, r2
	k_mutex_lock(&lock, K_FOREVER);
 800622e:	480c      	ldr	r0, [pc, #48]	; (8006260 <net_if_call_link_cb+0x3c>)
 8006230:	f04f 32ff 	mov.w	r2, #4294967295
{
 8006234:	460e      	mov	r6, r1
	k_mutex_lock(&lock, K_FOREVER);
 8006236:	f00f fba7 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <net_if_call_link_cb+0x40>)
 800623c:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
 800623e:	b923      	cbnz	r3, 800624a <net_if_call_link_cb+0x26>
	k_mutex_unlock(&lock);
 8006240:	4807      	ldr	r0, [pc, #28]	; (8006260 <net_if_call_link_cb+0x3c>)
}
 8006242:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
 8006246:	f00f bbc2 	b.w	80159ce <k_mutex_unlock.isra.0>
	return node->next;
 800624a:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	463a      	mov	r2, r7
 8006250:	4631      	mov	r1, r6
 8006252:	4628      	mov	r0, r5
 8006254:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
 8006256:	2c00      	cmp	r4, #0
 8006258:	d0f2      	beq.n	8006240 <net_if_call_link_cb+0x1c>
 800625a:	4623      	mov	r3, r4
 800625c:	6824      	ldr	r4, [r4, #0]
 800625e:	e7f5      	b.n	800624c <net_if_call_link_cb+0x28>
 8006260:	240010d8 	.word	0x240010d8
 8006264:	240025f8 	.word	0x240025f8

08006268 <net_if_tx.isra.0>:
static bool net_if_tx(struct net_if *iface, struct net_pkt *pkt)
 8006268:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct net_linkaddr ll_dst = {
 800626a:	2300      	movs	r3, #0
static bool net_if_tx(struct net_if *iface, struct net_pkt *pkt)
 800626c:	b085      	sub	sp, #20
 800626e:	4605      	mov	r5, r0
	if (!pkt) {
 8006270:	460c      	mov	r4, r1
	struct net_linkaddr ll_dst = {
 8006272:	e9cd 3300 	strd	r3, r3, [sp]
	if (!pkt) {
 8006276:	2900      	cmp	r1, #0
 8006278:	d03e      	beq.n	80062f8 <net_if_tx.isra.0+0x90>
	return list->head;
 800627a:	4b22      	ldr	r3, [pc, #136]	; (8006304 <net_if_tx.isra.0+0x9c>)
	if (!sys_slist_is_empty(&link_callbacks)) {
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	b1ab      	cbz	r3, 80062ac <net_if_tx.isra.0+0x44>
		if (net_linkaddr_set(&ll_dst_storage,
 8006280:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006282:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   uint8_t *new_addr, uint8_t new_len)
{
	if (!lladdr_store || !new_addr) {
 8006286:	b189      	cbz	r1, 80062ac <net_if_tx.isra.0+0x44>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
 8006288:	2a06      	cmp	r2, #6
 800628a:	d80f      	bhi.n	80062ac <net_if_tx.isra.0+0x44>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
 800628c:	f10d 060a 	add.w	r6, sp, #10
	lladdr_store->len = new_len;
 8006290:	f88d 2009 	strb.w	r2, [sp, #9]
	memcpy(lladdr_store->addr, new_addr, new_len);
 8006294:	4630      	mov	r0, r6
 8006296:	f00e fcee 	bl	8014c76 <memcpy>
			ll_dst.len = ll_dst_storage.len;
 800629a:	f89d 3009 	ldrb.w	r3, [sp, #9]
			ll_dst.addr = ll_dst_storage.addr;
 800629e:	9600      	str	r6, [sp, #0]
			ll_dst.len = ll_dst_storage.len;
 80062a0:	f88d 3004 	strb.w	r3, [sp, #4]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
 80062a4:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80062a8:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_if_flag_is_set(iface, NET_IF_LOWER_UP)) {
 80062ac:	2109      	movs	r1, #9
 80062ae:	4628      	mov	r0, r5
	return pkt->context;
 80062b0:	6967      	ldr	r7, [r4, #20]
 80062b2:	f00f fb72 	bl	801599a <net_if_flag_is_set>
 80062b6:	b308      	cbz	r0, 80062fc <net_if_tx.isra.0+0x94>
	return pkt->family;
 80062b8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
		status = net_if_l2(iface)->send(iface, pkt);
 80062bc:	4628      	mov	r0, r5
 80062be:	4621      	mov	r1, r4
		if (IS_ENABLED(CONFIG_NET_TCP) &&
 80062c0:	095a      	lsrs	r2, r3, #5
	pkt->pkt_queued = send;
 80062c2:	bf1c      	itt	ne
 80062c4:	f36f 0382 	bfcne	r3, #2, #1
 80062c8:	f884 3037 	strbne.w	r3, [r4, #55]	; 0x37
		status = net_if_l2(iface)->send(iface, pkt);
 80062cc:	f00f fadc 	bl	8015888 <net_if_l2>
 80062d0:	6843      	ldr	r3, [r0, #4]
 80062d2:	4628      	mov	r0, r5
 80062d4:	4798      	blx	r3
	if (status < 0) {
 80062d6:	1e06      	subs	r6, r0, #0
 80062d8:	da02      	bge.n	80062e0 <net_if_tx.isra.0+0x78>
		net_pkt_unref(pkt);
 80062da:	4620      	mov	r0, r4
 80062dc:	f011 f801 	bl	80172e2 <net_pkt_unref>
	if (context) {
 80062e0:	b11f      	cbz	r7, 80062ea <net_if_tx.isra.0+0x82>
		net_context_send_cb(context, status);
 80062e2:	4631      	mov	r1, r6
 80062e4:	4638      	mov	r0, r7
 80062e6:	f00f fad4 	bl	8015892 <net_context_send_cb>
	if (ll_dst.addr) {
 80062ea:	9b00      	ldr	r3, [sp, #0]
 80062ec:	b123      	cbz	r3, 80062f8 <net_if_tx.isra.0+0x90>
		net_if_call_link_cb(iface, &ll_dst, status);
 80062ee:	4632      	mov	r2, r6
 80062f0:	4669      	mov	r1, sp
 80062f2:	4628      	mov	r0, r5
 80062f4:	f7ff ff96 	bl	8006224 <net_if_call_link_cb>
}
 80062f8:	b005      	add	sp, #20
 80062fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = -ENETDOWN;
 80062fc:	f06f 0672 	mvn.w	r6, #114	; 0x72
 8006300:	e7eb      	b.n	80062da <net_if_tx.isra.0+0x72>
 8006302:	bf00      	nop
 8006304:	240025f8 	.word	0x240025f8

08006308 <net_if_get_by_iface>:
	if (!(iface >= _net_if_list_start && iface < _net_if_list_end)) {
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <net_if_get_by_iface+0x20>)
 800630a:	4298      	cmp	r0, r3
 800630c:	d308      	bcc.n	8006320 <net_if_get_by_iface+0x18>
 800630e:	4a07      	ldr	r2, [pc, #28]	; (800632c <net_if_get_by_iface+0x24>)
 8006310:	4290      	cmp	r0, r2
 8006312:	d205      	bcs.n	8006320 <net_if_get_by_iface+0x18>
	return (iface - _net_if_list_start) + 1;
 8006314:	1ac0      	subs	r0, r0, r3
 8006316:	4b06      	ldr	r3, [pc, #24]	; (8006330 <net_if_get_by_iface+0x28>)
 8006318:	1140      	asrs	r0, r0, #5
 800631a:	4358      	muls	r0, r3
 800631c:	3001      	adds	r0, #1
 800631e:	4770      	bx	lr
		return -1;
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	24001278 	.word	0x24001278
 800632c:	240012d8 	.word	0x240012d8
 8006330:	aaaaaaab 	.word	0xaaaaaaab

08006334 <net_if_foreach>:
{
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	4605      	mov	r5, r0
 8006338:	460e      	mov	r6, r1
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800633a:	4c05      	ldr	r4, [pc, #20]	; (8006350 <net_if_foreach+0x1c>)
 800633c:	4f05      	ldr	r7, [pc, #20]	; (8006354 <net_if_foreach+0x20>)
 800633e:	42bc      	cmp	r4, r7
 8006340:	d300      	bcc.n	8006344 <net_if_foreach+0x10>
}
 8006342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb(iface, user_data);
 8006344:	4620      	mov	r0, r4
 8006346:	4631      	mov	r1, r6
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8006348:	3460      	adds	r4, #96	; 0x60
		cb(iface, user_data);
 800634a:	47a8      	blx	r5
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800634c:	e7f7      	b.n	800633e <net_if_foreach+0xa>
 800634e:	bf00      	nop
 8006350:	24001278 	.word	0x24001278
 8006354:	240012d8 	.word	0x240012d8

08006358 <net_if_up>:
	return;
#endif
}

int net_if_up(struct net_if *iface)
{
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	net_if_lock(iface);
 800635c:	f00f fb16 	bl	801598c <net_if_lock>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
 8006360:	2100      	movs	r1, #0
 8006362:	4628      	mov	r0, r5
 8006364:	f00f fb19 	bl	801599a <net_if_flag_is_set>
 8006368:	b9f0      	cbnz	r0, 80063a8 <net_if_up+0x50>
		status = -EALREADY;
		goto out;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
 800636a:	4628      	mov	r0, r5
 800636c:	f00f fa8c 	bl	8015888 <net_if_l2>
 8006370:	4604      	mov	r4, r0
 8006372:	b130      	cbz	r0, 8006382 <net_if_up+0x2a>
 8006374:	6884      	ldr	r4, [r0, #8]
 8006376:	b124      	cbz	r4, 8006382 <net_if_up+0x2a>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = net_if_l2(iface)->enable(iface, true);
 8006378:	2101      	movs	r1, #1
 800637a:	4628      	mov	r0, r5
 800637c:	47a0      	blx	r4
	if (status < 0) {
 800637e:	1e04      	subs	r4, r0, #0
 8006380:	db0c      	blt.n	800639c <net_if_up+0x44>
	}

	init_igmp(iface);

done:
	net_if_flag_set(iface, NET_IF_UP);
 8006382:	2100      	movs	r1, #0
 8006384:	6828      	ldr	r0, [r5, #0]
 8006386:	f00f fb13 	bl	80159b0 <net_if_flag_set.isra.0>
 800638a:	2300      	movs	r3, #0
 800638c:	4808      	ldr	r0, [pc, #32]	; (80063b0 <net_if_up+0x58>)
 800638e:	4629      	mov	r1, r5
 8006390:	461a      	mov	r2, r3
 8006392:	f000 fae9 	bl	8006968 <net_mgmt_event_notify_with_info>
	net_mgmt_event_notify(NET_EVENT_IF_ADMIN_UP, iface);
	update_operational_state(iface);
 8006396:	4628      	mov	r0, r5
 8006398:	f7ff f9b6 	bl	8005708 <update_operational_state>
 800639c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80063a0:	f00f fb15 	bl	80159ce <k_mutex_unlock.isra.0>

out:
	net_if_unlock(iface);

	return status;
}
 80063a4:	4620      	mov	r0, r4
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
 80063a8:	f06f 0477 	mvn.w	r4, #119	; 0x77
 80063ac:	e7f6      	b.n	800639c <net_if_up+0x44>
 80063ae:	bf00      	nop
 80063b0:	d0010004 	.word	0xd0010004

080063b4 <net_if_down>:

int net_if_down(struct net_if *iface)
{
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	net_if_lock(iface);
 80063b8:	f00f fae8 	bl	801598c <net_if_lock>

	if (!net_if_flag_is_set(iface, NET_IF_UP)) {
 80063bc:	2100      	movs	r1, #0
 80063be:	4628      	mov	r0, r5
 80063c0:	f00f faeb 	bl	801599a <net_if_flag_is_set>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d037      	beq.n	8006438 <net_if_down+0x84>
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 80063c8:	68ac      	ldr	r4, [r5, #8]
	if (!ipv6) {
 80063ca:	b1ac      	cbz	r4, 80063f8 <net_if_down+0x44>
		if (!ipv6->mcast[i].is_used ||
 80063cc:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80063d0:	07d8      	lsls	r0, r3, #31
 80063d2:	d506      	bpl.n	80063e2 <net_if_down+0x2e>
 80063d4:	0799      	lsls	r1, r3, #30
 80063d6:	d504      	bpl.n	80063e2 <net_if_down+0x2e>
		net_ipv6_mld_leave(iface, &ipv6->mcast[i].address.in6_addr);
 80063d8:	f104 0194 	add.w	r1, r4, #148	; 0x94
 80063dc:	4628      	mov	r0, r5
 80063de:	f003 f857 	bl	8009490 <net_ipv6_mld_leave>
		if (!ipv6->mcast[i].is_used ||
 80063e2:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80063e6:	07da      	lsls	r2, r3, #31
 80063e8:	d506      	bpl.n	80063f8 <net_if_down+0x44>
 80063ea:	079b      	lsls	r3, r3, #30
 80063ec:	d504      	bpl.n	80063f8 <net_if_down+0x44>
		net_ipv6_mld_leave(iface, &ipv6->mcast[i].address.in6_addr);
 80063ee:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 80063f2:	4628      	mov	r0, r5
 80063f4:	f003 f84c 	bl	8009490 <net_ipv6_mld_leave>

	leave_mcast_all(iface);
	leave_ipv4_mcast_all(iface);

	/* If the L2 does not support enable just clear the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
 80063f8:	4628      	mov	r0, r5
 80063fa:	f00f fa45 	bl	8015888 <net_if_l2>
 80063fe:	4604      	mov	r4, r0
 8006400:	b130      	cbz	r0, 8006410 <net_if_down+0x5c>
 8006402:	6884      	ldr	r4, [r0, #8]
 8006404:	b124      	cbz	r4, 8006410 <net_if_down+0x5c>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = net_if_l2(iface)->enable(iface, false);
 8006406:	2100      	movs	r1, #0
 8006408:	4628      	mov	r0, r5
 800640a:	47a0      	blx	r4
	if (status < 0) {
 800640c:	1e04      	subs	r4, r0, #0
 800640e:	db0d      	blt.n	800642c <net_if_down+0x78>
	atomic_clear_bit(iface->if_dev->flags, value);
 8006410:	6828      	ldr	r0, [r5, #0]
 8006412:	2100      	movs	r1, #0
 8006414:	300c      	adds	r0, #12
 8006416:	f00f faa2 	bl	801595e <atomic_clear_bit>
 800641a:	2300      	movs	r3, #0
 800641c:	4808      	ldr	r0, [pc, #32]	; (8006440 <net_if_down+0x8c>)
 800641e:	4629      	mov	r1, r5
 8006420:	461a      	mov	r2, r3
 8006422:	f000 faa1 	bl	8006968 <net_mgmt_event_notify_with_info>
	}

done:
	net_if_flag_clear(iface, NET_IF_UP);
	net_mgmt_event_notify(NET_EVENT_IF_ADMIN_DOWN, iface);
	update_operational_state(iface);
 8006426:	4628      	mov	r0, r5
 8006428:	f7ff f96e 	bl	8005708 <update_operational_state>
	k_mutex_unlock(&iface->lock);
 800642c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8006430:	f00f facd 	bl	80159ce <k_mutex_unlock.isra.0>

out:
	net_if_unlock(iface);

	return status;
}
 8006434:	4620      	mov	r0, r4
 8006436:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
 8006438:	f06f 0477 	mvn.w	r4, #119	; 0x77
 800643c:	e7f6      	b.n	800642c <net_if_down+0x78>
 800643e:	bf00      	nop
 8006440:	d0010003 	.word	0xd0010003

08006444 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
 8006444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006448:	4c30      	ldr	r4, [pc, #192]	; (800650c <net_if_init+0xc8>)
	int if_count = 0;
 800644a:	2500      	movs	r5, #0

	k_mutex_lock(&lock, K_FOREVER);

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
 800644c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8006510 <net_if_init+0xcc>
	k_mutex_lock(&lock, K_FOREVER);
 8006450:	f04f 32ff 	mov.w	r2, #4294967295
 8006454:	f04f 33ff 	mov.w	r3, #4294967295
 8006458:	482e      	ldr	r0, [pc, #184]	; (8006514 <net_if_init+0xd0>)
 800645a:	f00f fa95 	bl	8015988 <k_mutex_lock.constprop.0.isra.0>
	net_tc_tx_init();
 800645e:	f011 fa97 	bl	8017990 <net_tc_tx_init>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8006462:	f1a4 0748 	sub.w	r7, r4, #72	; 0x48
 8006466:	4547      	cmp	r7, r8
 8006468:	d333      	bcc.n	80064d2 <net_if_init+0x8e>
		init_iface(iface);
		if_count++;
	}

	if (if_count == 0) {
 800646a:	b36d      	cbz	r5, 80064c8 <net_if_init+0x84>
	k_work_init_delayable(&dad_timer, dad_timeout);
 800646c:	492a      	ldr	r1, [pc, #168]	; (8006518 <net_if_init+0xd4>)
	list->head = NULL;
 800646e:	2400      	movs	r4, #0
 8006470:	482a      	ldr	r0, [pc, #168]	; (800651c <net_if_init+0xd8>)
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
 8006472:	2640      	movs	r6, #64	; 0x40
	k_work_init_delayable(&dad_timer, dad_timeout);
 8006474:	f015 fb46 	bl	801bb04 <k_work_init_delayable>
 8006478:	4b29      	ldr	r3, [pc, #164]	; (8006520 <net_if_init+0xdc>)
	k_work_init_delayable(&rs_timer, rs_timeout);
 800647a:	492a      	ldr	r1, [pc, #168]	; (8006524 <net_if_init+0xe0>)
 800647c:	482a      	ldr	r0, [pc, #168]	; (8006528 <net_if_init+0xe4>)
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
 800647e:	4d2b      	ldr	r5, [pc, #172]	; (800652c <net_if_init+0xe8>)
	list->tail = NULL;
 8006480:	e9c3 4400 	strd	r4, r4, [r3]
	k_work_init_delayable(&rs_timer, rs_timeout);
 8006484:	f015 fb3e 	bl	801bb04 <k_work_init_delayable>
	list->head = NULL;
 8006488:	4b29      	ldr	r3, [pc, #164]	; (8006530 <net_if_init+0xec>)
	k_work_init_delayable(&address_lifetime_timer,
 800648a:	492a      	ldr	r1, [pc, #168]	; (8006534 <net_if_init+0xf0>)
 800648c:	482a      	ldr	r0, [pc, #168]	; (8006538 <net_if_init+0xf4>)
	list->tail = NULL;
 800648e:	e9c3 4400 	strd	r4, r4, [r3]
 8006492:	f015 fb37 	bl	801bb04 <k_work_init_delayable>
	k_work_init_delayable(&prefix_lifetime_timer, prefix_lifetime_timeout);
 8006496:	4929      	ldr	r1, [pc, #164]	; (800653c <net_if_init+0xf8>)
 8006498:	4829      	ldr	r0, [pc, #164]	; (8006540 <net_if_init+0xfc>)
 800649a:	f015 fb33 	bl	801bb04 <k_work_init_delayable>
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
 800649e:	f247 5330 	movw	r3, #30000	; 0x7530
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
 80064a2:	4628      	mov	r0, r5
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
 80064a4:	f885 6125 	strb.w	r6, [r5, #293]	; 0x125
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
 80064a8:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 80064ac:	f00f fcd6 	bl	8015e5c <net_if_ipv6_calc_reachable_time>
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
 80064b0:	4b24      	ldr	r3, [pc, #144]	; (8006544 <net_if_init+0x100>)
 80064b2:	f8c5 0114 	str.w	r0, [r5, #276]	; 0x114
 80064b6:	f883 6050 	strb.w	r6, [r3, #80]	; 0x50
	k_work_init_delayable(&router_timer, iface_router_expired);
 80064ba:	4923      	ldr	r1, [pc, #140]	; (8006548 <net_if_init+0x104>)
 80064bc:	4823      	ldr	r0, [pc, #140]	; (800654c <net_if_init+0x108>)
 80064be:	f015 fb21 	bl	801bb04 <k_work_init_delayable>
	list->head = NULL;
 80064c2:	4b23      	ldr	r3, [pc, #140]	; (8006550 <net_if_init+0x10c>)
	list->tail = NULL;
 80064c4:	e9c3 4400 	strd	r4, r4, [r3]
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif

out:
	k_mutex_unlock(&lock);
 80064c8:	4812      	ldr	r0, [pc, #72]	; (8006514 <net_if_init+0xd0>)
}
 80064ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_unlock(&lock);
 80064ce:	f00f ba7e 	b.w	80159ce <k_mutex_unlock.isra.0>
	return iface->if_dev->dev;
 80064d2:	f854 0c48 	ldr.w	r0, [r4, #-72]
	const struct net_if_api *api = net_if_get_device(iface)->api;
 80064d6:	6803      	ldr	r3, [r0, #0]
 80064d8:	689e      	ldr	r6, [r3, #8]
	if (!api || !api->init) {
 80064da:	b1a6      	cbz	r6, 8006506 <net_if_init+0xc2>
 80064dc:	6833      	ldr	r3, [r6, #0]
 80064de:	b193      	cbz	r3, 8006506 <net_if_init+0xc2>
	net_if_flag_set(iface, NET_IF_IPV4);
 80064e0:	2106      	movs	r1, #6
 80064e2:	f00f fa65 	bl	80159b0 <net_if_flag_set.isra.0>
	net_if_flag_set(iface, NET_IF_IPV6);
 80064e6:	f854 0c48 	ldr.w	r0, [r4, #-72]
 80064ea:	2107      	movs	r1, #7
 80064ec:	f00f fa60 	bl	80159b0 <net_if_flag_set.isra.0>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
 80064f0:	2109      	movs	r1, #9
 80064f2:	f854 0c48 	ldr.w	r0, [r4, #-72]
 80064f6:	f00f fa9b 	bl	8015a30 <net_if_flag_test_and_set.isra.0>
 80064fa:	4620      	mov	r0, r4
 80064fc:	f015 f995 	bl	801b82a <z_impl_k_mutex_init>
	api->init(iface);
 8006500:	6833      	ldr	r3, [r6, #0]
 8006502:	4638      	mov	r0, r7
 8006504:	4798      	blx	r3
		if_count++;
 8006506:	3501      	adds	r5, #1
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8006508:	3460      	adds	r4, #96	; 0x60
 800650a:	e7aa      	b.n	8006462 <net_if_init+0x1e>
 800650c:	240012c0 	.word	0x240012c0
 8006510:	240012d8 	.word	0x240012d8
 8006514:	240010d8 	.word	0x240010d8
 8006518:	0800540d 	.word	0x0800540d
 800651c:	240015e8 	.word	0x240015e8
 8006520:	24002450 	.word	0x24002450
 8006524:	08005271 	.word	0x08005271
 8006528:	24001678 	.word	0x24001678
 800652c:	240024cc 	.word	0x240024cc
 8006530:	24002468 	.word	0x24002468
 8006534:	08004be1 	.word	0x08004be1
 8006538:	240015b8 	.word	0x240015b8
 800653c:	08005999 	.word	0x08005999
 8006540:	24001618 	.word	0x24001618
 8006544:	24002474 	.word	0x24002474
 8006548:	08005045 	.word	0x08005045
 800654c:	24001648 	.word	0x24001648
 8006550:	24002460 	.word	0x24002460

08006554 <net_if_post_init>:

void net_if_post_init(void)
{
 8006554:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8006556:	4c07      	ldr	r4, [pc, #28]	; (8006574 <net_if_post_init+0x20>)
 8006558:	4d07      	ldr	r5, [pc, #28]	; (8006578 <net_if_post_init+0x24>)
 800655a:	42ac      	cmp	r4, r5
 800655c:	d300      	bcc.n	8006560 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
 800655e:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
 8006560:	2103      	movs	r1, #3
 8006562:	4620      	mov	r0, r4
 8006564:	f00f fa19 	bl	801599a <net_if_flag_is_set>
 8006568:	b910      	cbnz	r0, 8006570 <net_if_post_init+0x1c>
			net_if_up(iface);
 800656a:	4620      	mov	r0, r4
 800656c:	f7ff fef4 	bl	8006358 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 8006570:	3460      	adds	r4, #96	; 0x60
 8006572:	e7f2      	b.n	800655a <net_if_post_init+0x6>
 8006574:	24001278 	.word	0x24001278
 8006578:	240012d8 	.word	0x240012d8

0800657c <net_sprint_ll_addr_buf>:
	return ptr;
}

char *net_sprint_ll_addr_buf(const uint8_t *ll, uint8_t ll_len,
			     char *buf, int buflen)
{
 800657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006580:	4616      	mov	r6, r2
	uint8_t i, len, blen;
	char *ptr = buf;

	if (ll == NULL) {
 8006582:	4605      	mov	r5, r0
 8006584:	b308      	cbz	r0, 80065ca <net_sprint_ll_addr_buf+0x4e>
		return "<unknown>";
	}

	switch (ll_len) {
 8006586:	3902      	subs	r1, #2
	default:
		len = 6U;
		break;
	}

	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 8006588:	b2dc      	uxtb	r4, r3
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
		*ptr++ = ':';
 800658a:	f04f 083a 	mov.w	r8, #58	; 0x3a
 800658e:	b2c9      	uxtb	r1, r1
 8006590:	2906      	cmp	r1, #6
 8006592:	bf96      	itet	ls
 8006594:	4a0f      	ldrls	r2, [pc, #60]	; (80065d4 <net_sprint_ll_addr_buf+0x58>)
	if (ll == NULL) {
 8006596:	2206      	movhi	r2, #6
 8006598:	5c52      	ldrbls	r2, [r2, r1]
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 800659a:	1887      	adds	r7, r0, r2
 800659c:	4630      	mov	r0, r6
 800659e:	b15c      	cbz	r4, 80065b8 <net_sprint_ll_addr_buf+0x3c>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
 80065a0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80065a4:	2301      	movs	r3, #1
 80065a6:	2241      	movs	r2, #65	; 0x41
		blen -= 3U;
 80065a8:	3c03      	subs	r4, #3
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
 80065aa:	f00f fdec 	bl	8016186 <net_byte_to_hex>
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 80065ae:	42bd      	cmp	r5, r7
		blen -= 3U;
 80065b0:	b2e4      	uxtb	r4, r4
		*ptr++ = ':';
 80065b2:	f800 8b01 	strb.w	r8, [r0], #1
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 80065b6:	d1f2      	bne.n	800659e <net_sprint_ll_addr_buf+0x22>
	}

	if (!(ptr - buf)) {
 80065b8:	42b0      	cmp	r0, r6
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	d006      	beq.n	80065ce <net_sprint_ll_addr_buf+0x52>
		return NULL;
	}

	*(ptr - 1) = '\0';
 80065c0:	f800 2c01 	strb.w	r2, [r0, #-1]
	return buf;
 80065c4:	4630      	mov	r0, r6
}
 80065c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return "<unknown>";
 80065ca:	4803      	ldr	r0, [pc, #12]	; (80065d8 <net_sprint_ll_addr_buf+0x5c>)
 80065cc:	e7fb      	b.n	80065c6 <net_sprint_ll_addr_buf+0x4a>
		return NULL;
 80065ce:	4610      	mov	r0, r2
 80065d0:	e7f9      	b.n	80065c6 <net_sprint_ll_addr_buf+0x4a>
 80065d2:	bf00      	nop
 80065d4:	0801eaf0 	.word	0x0801eaf0
 80065d8:	0801eab0 	.word	0x0801eab0

080065dc <z_impl_net_addr_ntop>:
	return buf - start;
}

char *z_impl_net_addr_ntop(sa_family_t family, const void *src,
			   char *dst, size_t size)
{
 80065dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
 80065e0:	2300      	movs	r3, #0
{
 80065e2:	b089      	sub	sp, #36	; 0x24
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
 80065e4:	2802      	cmp	r0, #2
{
 80065e6:	4606      	mov	r6, r0
 80065e8:	4615      	mov	r5, r2
 80065ea:	9101      	str	r1, [sp, #4]
	unsigned char zeros[8] = { 0 };
 80065ec:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
 80065f0:	d13c      	bne.n	800666c <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
 80065f2:	a806      	add	r0, sp, #24
 80065f4:	9104      	str	r1, [sp, #16]
 80065f6:	4601      	mov	r1, r0
{
 80065f8:	461a      	mov	r2, r3
 80065fa:	e006      	b.n	800660a <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
 80065fc:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
 80065fe:	3201      	adds	r2, #1
				zeros[i]++;
 8006600:	3401      	adds	r4, #1
 8006602:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
 8006604:	b2d4      	uxtb	r4, r2
 8006606:	2c07      	cmp	r4, #7
 8006608:	d804      	bhi.n	8006614 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
 800660a:	9c01      	ldr	r4, [sp, #4]
 800660c:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
 8006610:	2c00      	cmp	r4, #0
 8006612:	d0f3      	beq.n	80065fc <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
 8006614:	3301      	adds	r3, #1
 8006616:	3101      	adds	r1, #1
 8006618:	2b08      	cmp	r3, #8
 800661a:	d1ed      	bne.n	80065f8 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
 800661c:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
 8006620:	f04f 0801 	mov.w	r8, #1
			}
		}

		for (i = 0U; i < 8; i++) {
 8006624:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
 8006626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800662a:	4542      	cmp	r2, r8
				longest = zeros[i];
				pos = i;
 800662c:	bf88      	it	hi
 800662e:	b25f      	sxtbhi	r7, r3
		for (i = 0U; i < 8; i++) {
 8006630:	f103 0301 	add.w	r3, r3, #1
				pos = i;
 8006634:	bf88      	it	hi
 8006636:	4690      	movhi	r8, r2
		for (i = 0U; i < 8; i++) {
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b08      	cmp	r3, #8
 800663c:	d1f3      	bne.n	8006626 <z_impl_net_addr_ntop+0x4a>
		len = 8;
 800663e:	f1b8 0f01 	cmp.w	r8, #1
 8006642:	469b      	mov	fp, r3
 8006644:	f04f 0a3a 	mov.w	sl, #58	; 0x3a
 8006648:	bf08      	it	eq
 800664a:	f04f 37ff 	moveq.w	r7, #4294967295
	bool needcolon = false;
 800664e:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
 8006650:	4628      	mov	r0, r5
 8006652:	460c      	mov	r4, r1
 8006654:	455c      	cmp	r4, fp
 8006656:	db18      	blt.n	800668a <z_impl_net_addr_ntop+0xae>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
 8006658:	42a8      	cmp	r0, r5
 800665a:	d009      	beq.n	8006670 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
 800665c:	2e01      	cmp	r6, #1
 800665e:	f04f 0300 	mov.w	r3, #0
		*(ptr - 1) = '\0';
 8006662:	bf0c      	ite	eq
 8006664:	f800 3c01 	strbeq.w	r3, [r0, #-1]
	} else {
		*ptr = '\0';
 8006668:	7003      	strbne	r3, [r0, #0]
 800666a:	e002      	b.n	8006672 <z_impl_net_addr_ntop+0x96>
	} else if (family == AF_INET) {
 800666c:	2801      	cmp	r0, #1
 800666e:	d004      	beq.n	800667a <z_impl_net_addr_ntop+0x9e>
		return NULL;
 8006670:	2500      	movs	r5, #0
	}

	return dst;
}
 8006672:	4628      	mov	r0, r5
 8006674:	b009      	add	sp, #36	; 0x24
 8006676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = 4;
 800667a:	f04f 0b04 	mov.w	fp, #4
		delim = '.';
 800667e:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
	int8_t pos = -1;
 8006682:	f04f 37ff 	mov.w	r7, #4294967295
	uint8_t i, bl, bh, longest = 1U;
 8006686:	4680      	mov	r8, r0
 8006688:	e7e1      	b.n	800664e <z_impl_net_addr_ntop+0x72>
		if (len == 4) {
 800668a:	f1bb 0f04 	cmp.w	fp, #4
 800668e:	d13f      	bne.n	8006710 <z_impl_net_addr_ntop+0x134>
			value = (uint32_t)addr->s4_addr[i];
 8006690:	9b01      	ldr	r3, [sp, #4]
 8006692:	5d1a      	ldrb	r2, [r3, r4]
				*ptr++ = '0';
 8006694:	4603      	mov	r3, r0
			if (value == 0U) {
 8006696:	b942      	cbnz	r2, 80066aa <z_impl_net_addr_ntop+0xce>
				*ptr++ = '0';
 8006698:	2230      	movs	r2, #48	; 0x30
 800669a:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
 800669e:	f880 a001 	strb.w	sl, [r0, #1]
	for (i = 0U; i < len; i++) {
 80066a2:	3401      	adds	r4, #1
 80066a4:	4618      	mov	r0, r3
 80066a6:	b2e4      	uxtb	r4, r4
 80066a8:	e7d4      	b.n	8006654 <z_impl_net_addr_ntop+0x78>
			l = net_value_to_udec(ptr, value, 0);
 80066aa:	f04f 0e00 	mov.w	lr, #0
 80066ae:	f04f 0c09 	mov.w	ip, #9
 80066b2:	f8cd e008 	str.w	lr, [sp, #8]
 80066b6:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 80067a8 <z_impl_net_addr_ntop+0x1cc>
		temp = value / divisor;
 80066ba:	9203      	str	r2, [sp, #12]
 80066bc:	fbb2 f9fe 	udiv	r9, r2, lr
		value = value % divisor;
 80066c0:	fb0e 2219 	mls	r2, lr, r9, r2
		temp = value / divisor;
 80066c4:	f8cd 9014 	str.w	r9, [sp, #20]
		if ((precision > i) || (temp != 0)) {
 80066c8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80066cc:	45e1      	cmp	r9, ip
 80066ce:	dc03      	bgt.n	80066d8 <z_impl_net_addr_ntop+0xfc>
 80066d0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80066d4:	45f1      	cmp	r9, lr
 80066d6:	d307      	bcc.n	80066e8 <z_impl_net_addr_ntop+0x10c>
			*buf++ = (char) (temp + '0');
 80066d8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80066dc:	f8cd c008 	str.w	ip, [sp, #8]
 80066e0:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80066e4:	f803 9b01 	strb.w	r9, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
 80066e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80066ec:	f04f 090a 	mov.w	r9, #10
 80066f0:	f1bc 3fff 	cmp.w	ip, #4294967295
 80066f4:	fbbe fef9 	udiv	lr, lr, r9
 80066f8:	d1df      	bne.n	80066ba <z_impl_net_addr_ntop+0xde>
	*buf = 0;
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	701a      	strb	r2, [r3, #0]
	return buf - start;
 8006700:	1a1b      	subs	r3, r3, r0
			ptr += l;
 8006702:	b2da      	uxtb	r2, r3
 8006704:	fa50 f383 	uxtab	r3, r0, r3
			*ptr++ = delim;
 8006708:	f800 a002 	strb.w	sl, [r0, r2]
 800670c:	3301      	adds	r3, #1
			continue;
 800670e:	e7c8      	b.n	80066a2 <z_impl_net_addr_ntop+0xc6>
		if (i == pos) {
 8006710:	42a7      	cmp	r7, r4
 8006712:	d10e      	bne.n	8006732 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
 8006714:	b901      	cbnz	r1, 8006718 <z_impl_net_addr_ntop+0x13c>
 8006716:	b917      	cbnz	r7, 800671e <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
 8006718:	233a      	movs	r3, #58	; 0x3a
 800671a:	f800 3b01 	strb.w	r3, [r0], #1
			*ptr++ = ':';
 800671e:	223a      	movs	r2, #58	; 0x3a
 8006720:	4603      	mov	r3, r0
			needcolon = false;
 8006722:	2100      	movs	r1, #0
			*ptr++ = ':';
 8006724:	f803 2b01 	strb.w	r2, [r3], #1
			i += longest - 1U;
 8006728:	f108 32ff 	add.w	r2, r8, #4294967295
 800672c:	4414      	add	r4, r2
 800672e:	b2e4      	uxtb	r4, r4
			continue;
 8006730:	e7b7      	b.n	80066a2 <z_impl_net_addr_ntop+0xc6>
		if (needcolon) {
 8006732:	b111      	cbz	r1, 800673a <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
 8006734:	233a      	movs	r3, #58	; 0x3a
 8006736:	f800 3b01 	strb.w	r3, [r0], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
 800673a:	9b04      	ldr	r3, [sp, #16]
 800673c:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8006740:	ba52      	rev16	r2, r2
		if (bh) {
 8006742:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
 8006746:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
 800674a:	fa5f f982 	uxtb.w	r9, r2
		if (bh) {
 800674e:	d018      	beq.n	8006782 <z_impl_net_addr_ntop+0x1a6>
			if (bh > 0x0f) {
 8006750:	2b0f      	cmp	r3, #15
		bh = value >> 8;
 8006752:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
 8006754:	d90d      	bls.n	8006772 <z_impl_net_addr_ntop+0x196>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
 8006756:	2300      	movs	r3, #0
 8006758:	2261      	movs	r2, #97	; 0x61
 800675a:	f00f fd14 	bl	8016186 <net_byte_to_hex>
 800675e:	4684      	mov	ip, r0
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
 8006760:	2301      	movs	r3, #1
 8006762:	2261      	movs	r2, #97	; 0x61
 8006764:	4649      	mov	r1, r9
 8006766:	4660      	mov	r0, ip
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
 8006768:	f00f fd0d 	bl	8016186 <net_byte_to_hex>
 800676c:	4603      	mov	r3, r0
		needcolon = true;
 800676e:	2101      	movs	r1, #1
 8006770:	e797      	b.n	80066a2 <z_impl_net_addr_ntop+0xc6>
				if (bh < 10) {
 8006772:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
 8006774:	f100 0c01 	add.w	ip, r0, #1
 8006778:	bf94      	ite	ls
 800677a:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
 800677c:	3157      	addhi	r1, #87	; 0x57
 800677e:	7001      	strb	r1, [r0, #0]
 8006780:	e7ee      	b.n	8006760 <z_impl_net_addr_ntop+0x184>
		} else if (bl > 0x0f) {
 8006782:	f1b9 0f0f 	cmp.w	r9, #15
 8006786:	d902      	bls.n	800678e <z_impl_net_addr_ntop+0x1b2>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
 8006788:	2261      	movs	r2, #97	; 0x61
 800678a:	4649      	mov	r1, r9
 800678c:	e7ec      	b.n	8006768 <z_impl_net_addr_ntop+0x18c>
			if (bl < 10) {
 800678e:	f1b9 0f09 	cmp.w	r9, #9
					*ptr++ = (char)(bh + '0');
 8006792:	f100 0301 	add.w	r3, r0, #1
				*ptr++ = (char)(bl + '0');
 8006796:	bf94      	ite	ls
 8006798:	f109 0930 	addls.w	r9, r9, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
 800679c:	f109 0957 	addhi.w	r9, r9, #87	; 0x57
 80067a0:	f880 9000 	strb.w	r9, [r0]
 80067a4:	e7e3      	b.n	800676e <z_impl_net_addr_ntop+0x192>
 80067a6:	bf00      	nop
 80067a8:	3b9aca00 	.word	0x3b9aca00

080067ac <net_sprint_addr>:
	char *s = buf[++i % NBUFS];
 80067ac:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <net_sprint_addr+0x24>)
{
 80067ae:	b410      	push	{r4}
	char *s = buf[++i % NBUFS];
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	3201      	adds	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	2303      	movs	r3, #3
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
 80067b8:	4c06      	ldr	r4, [pc, #24]	; (80067d4 <net_sprint_addr+0x28>)
 80067ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80067be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80067c2:	1ad2      	subs	r2, r2, r3
 80067c4:	2328      	movs	r3, #40	; 0x28
 80067c6:	fb03 4202 	mla	r2, r3, r2, r4
}
 80067ca:	bc10      	pop	{r4}
 80067cc:	f7ff bf06 	b.w	80065dc <z_impl_net_addr_ntop>
 80067d0:	24002650 	.word	0x24002650
 80067d4:	24003067 	.word	0x24003067

080067d8 <net_ipv4_unspecified_address>:
const struct in_addr *net_ipv4_unspecified_address(void)
{
	static const struct in_addr addr;

	return &addr;
}
 80067d8:	4800      	ldr	r0, [pc, #0]	; (80067dc <net_ipv4_unspecified_address+0x4>)
 80067da:	4770      	bx	lr
 80067dc:	0801d008 	.word	0x0801d008

080067e0 <net_ipv4_broadcast_address>:
const struct in_addr *net_ipv4_broadcast_address(void)
{
	static const struct in_addr addr = { { { 255, 255, 255, 255 } } };

	return &addr;
}
 80067e0:	4800      	ldr	r0, [pc, #0]	; (80067e4 <net_ipv4_broadcast_address+0x4>)
 80067e2:	4770      	bx	lr
 80067e4:	0801d004 	.word	0x0801d004

080067e8 <net_ipv6_unspecified_address>:
const struct in6_addr in6addr_loopback = IN6ADDR_LOOPBACK_INIT;

const struct in6_addr *net_ipv6_unspecified_address(void)
{
	return &in6addr_any;
}
 80067e8:	4800      	ldr	r0, [pc, #0]	; (80067ec <net_ipv6_unspecified_address+0x4>)
 80067ea:	4770      	bx	lr
 80067ec:	0801d00c 	.word	0x0801d00c

080067f0 <mgmt_thread>:
	log_stack_usage(&mgmt_thread_data);
#endif
}

static void mgmt_thread(void)
{
 80067f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
 80067f4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80068a8 <mgmt_thread+0xb8>
	return z_impl_k_mutex_lock(mutex, timeout);
 80067f8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80068ac <mgmt_thread+0xbc>
	return z_impl_k_msgq_get(msgq, data, timeout);
 80067fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006800:	f04f 33ff 	mov.w	r3, #4294967295
 8006804:	4669      	mov	r1, sp
 8006806:	4650      	mov	r0, sl
 8006808:	f00b fab4 	bl	8011d74 <z_impl_k_msgq_get>
	} while (k_msgq_get(&event_msgq, dst, K_FOREVER) != 0);
 800680c:	4605      	mov	r5, r0
 800680e:	2800      	cmp	r0, #0
 8006810:	d1f4      	bne.n	80067fc <mgmt_thread+0xc>
	return list->head;
 8006812:	4e27      	ldr	r6, [pc, #156]	; (80068b0 <mgmt_thread+0xc0>)
	return z_impl_k_mutex_lock(mutex, timeout);
 8006814:	f04f 32ff 	mov.w	r2, #4294967295
 8006818:	f04f 33ff 	mov.w	r3, #4294967295
 800681c:	4640      	mov	r0, r8
 800681e:	f00b fb03 	bl	8011e28 <z_impl_k_mutex_lock>
 8006822:	6834      	ldr	r4, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 8006824:	b92c      	cbnz	r4, 8006832 <mgmt_thread+0x42>
		/* take the lock to prevent changes to the callback structure during use */
		(void)k_mutex_lock(&net_mgmt_callback_lock, K_FOREVER);

		mgmt_run_callbacks(&mgmt_event);

		(void)k_mutex_unlock(&net_mgmt_callback_lock);
 8006826:	4640      	mov	r0, r8
 8006828:	f00f ffc0 	bl	80167ac <k_mutex_unlock.isra.0>
	z_impl_k_yield();
 800682c:	f00c f844 	bl	80128b8 <z_impl_k_yield>
	while (1) {
 8006830:	e7e4      	b.n	80067fc <mgmt_thread+0xc>
	return node->next;
 8006832:	6827      	ldr	r7, [r4, #0]
	parent->next = child;
 8006834:	46a9      	mov	r9, r5
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
 8006836:	9900      	ldr	r1, [sp, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
 8006838:	68a0      	ldr	r0, [r4, #8]
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
 800683a:	ea81 0200 	eor.w	r2, r1, r0
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
 800683e:	ea81 0300 	eor.w	r3, r1, r0
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
 8006842:	f3c2 7201 	ubfx	r2, r2, #28, #2
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
 8006846:	f3c3 430a 	ubfx	r3, r3, #16, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
 800684a:	4313      	orrs	r3, r2
 800684c:	d11d      	bne.n	800688a <mgmt_thread+0x9a>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
 800684e:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
 8006850:	b12b      	cbz	r3, 800685e <mgmt_thread+0x6e>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
 8006852:	b283      	uxth	r3, r0
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
 8006854:	b11b      	cbz	r3, 800685e <mgmt_thread+0x6e>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
 8006856:	ea01 0300 	and.w	r3, r1, r0
 800685a:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
 800685c:	b1ab      	cbz	r3, 800688a <mgmt_thread+0x9a>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
 800685e:	0100      	lsls	r0, r0, #4
			struct mgmt_event_wait *sync_data =
 8006860:	6863      	ldr	r3, [r4, #4]
			    sync_data->iface != mgmt_event->iface) {
 8006862:	9a01      	ldr	r2, [sp, #4]
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
 8006864:	d51c      	bpl.n	80068a0 <mgmt_thread+0xb0>
			if (sync_data->iface &&
 8006866:	6998      	ldr	r0, [r3, #24]
 8006868:	b108      	cbz	r0, 800686e <mgmt_thread+0x7e>
 800686a:	4290      	cmp	r0, r2
 800686c:	d10d      	bne.n	800688a <mgmt_thread+0x9a>
			cb->raised_event = mgmt_event->event;
 800686e:	60a1      	str	r1, [r4, #8]
			sync_data->iface = mgmt_event->iface;
 8006870:	619a      	str	r2, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	b975      	cbnz	r5, 8006894 <mgmt_thread+0xa4>
 8006876:	6873      	ldr	r3, [r6, #4]
	list->head = node;
 8006878:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 800687a:	429c      	cmp	r4, r3
 800687c:	d100      	bne.n	8006880 <mgmt_thread+0x90>
	list->tail = node;
 800687e:	6072      	str	r2, [r6, #4]
			k_sem_give(cb->sync_call);
 8006880:	6860      	ldr	r0, [r4, #4]
	parent->next = child;
 8006882:	f8c4 9000 	str.w	r9, [r4]
	z_impl_k_sem_give(sem);
 8006886:	f00b fbbb 	bl	8012000 <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800688a:	2f00      	cmp	r7, #0
 800688c:	d0cb      	beq.n	8006826 <mgmt_thread+0x36>
	return node->next;
 800688e:	463c      	mov	r4, r7
 8006890:	683f      	ldr	r7, [r7, #0]
 8006892:	e7d0      	b.n	8006836 <mgmt_thread+0x46>
	parent->next = child;
 8006894:	602a      	str	r2, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
 8006896:	6873      	ldr	r3, [r6, #4]
 8006898:	429c      	cmp	r4, r3
	list->tail = node;
 800689a:	bf08      	it	eq
 800689c:	6075      	streq	r5, [r6, #4]
}
 800689e:	e7ef      	b.n	8006880 <mgmt_thread+0x90>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
 80068a0:	4620      	mov	r0, r4
			prev = &cb->node;
 80068a2:	4625      	mov	r5, r4
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
 80068a4:	4798      	blx	r3
			prev = &cb->node;
 80068a6:	e7f0      	b.n	800688a <mgmt_thread+0x9a>
 80068a8:	24001150 	.word	0x24001150
 80068ac:	24001114 	.word	0x24001114
 80068b0:	24002654 	.word	0x24002654

080068b4 <net_mgmt_add_event_callback>:

	return ret;
}

void net_mgmt_add_event_callback(struct net_mgmt_event_callback *cb)
{
 80068b4:	b510      	push	{r4, lr}
 80068b6:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 80068b8:	f04f 32ff 	mov.w	r2, #4294967295
 80068bc:	f04f 33ff 	mov.w	r3, #4294967295
 80068c0:	4809      	ldr	r0, [pc, #36]	; (80068e8 <net_mgmt_add_event_callback+0x34>)
 80068c2:	f00b fab1 	bl	8011e28 <z_impl_k_mutex_lock>
	return list->head;
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <net_mgmt_add_event_callback+0x38>)
 80068c8:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 80068ca:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 80068cc:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 80068ce:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 80068d0:	b902      	cbnz	r2, 80068d4 <net_mgmt_add_event_callback+0x20>
	list->tail = node;
 80068d2:	605c      	str	r4, [r3, #4]
	global_event_mask |= event_mask;
 80068d4:	4a06      	ldr	r2, [pc, #24]	; (80068f0 <net_mgmt_add_event_callback+0x3c>)
 80068d6:	68a3      	ldr	r3, [r4, #8]
 80068d8:	6811      	ldr	r1, [r2, #0]

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);

	(void)k_mutex_unlock(&net_mgmt_callback_lock);
 80068da:	4803      	ldr	r0, [pc, #12]	; (80068e8 <net_mgmt_add_event_callback+0x34>)
	global_event_mask |= event_mask;
 80068dc:	430b      	orrs	r3, r1
 80068de:	6013      	str	r3, [r2, #0]
}
 80068e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)k_mutex_unlock(&net_mgmt_callback_lock);
 80068e4:	f00f bf62 	b.w	80167ac <k_mutex_unlock.isra.0>
 80068e8:	24001114 	.word	0x24001114
 80068ec:	24002654 	.word	0x24002654
 80068f0:	2400265c 	.word	0x2400265c

080068f4 <net_mgmt_del_event_callback>:

void net_mgmt_del_event_callback(struct net_mgmt_event_callback *cb)
{
 80068f4:	b510      	push	{r4, lr}
 80068f6:	4604      	mov	r4, r0
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295
 80068fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006900:	4816      	ldr	r0, [pc, #88]	; (800695c <net_mgmt_del_event_callback+0x68>)
 8006902:	f00b fa91 	bl	8011e28 <z_impl_k_mutex_lock>
	return list->head;
 8006906:	4b16      	ldr	r3, [pc, #88]	; (8006960 <net_mgmt_del_event_callback+0x6c>)
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8006908:	2100      	movs	r1, #0
	return list->head;
 800690a:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800690c:	b152      	cbz	r2, 8006924 <net_mgmt_del_event_callback+0x30>
 800690e:	4294      	cmp	r4, r2
 8006910:	d11b      	bne.n	800694a <net_mgmt_del_event_callback+0x56>
	return node->next;
 8006912:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8006914:	b999      	cbnz	r1, 800693e <net_mgmt_del_event_callback+0x4a>
 8006916:	6859      	ldr	r1, [r3, #4]
	list->head = node;
 8006918:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 800691a:	428c      	cmp	r4, r1
 800691c:	d100      	bne.n	8006920 <net_mgmt_del_event_callback+0x2c>
	list->tail = node;
 800691e:	605a      	str	r2, [r3, #4]
	parent->next = child;
 8006920:	2200      	movs	r2, #0
 8006922:	6022      	str	r2, [r4, #0]
	global_event_mask = 0U;
 8006924:	4c0f      	ldr	r4, [pc, #60]	; (8006964 <net_mgmt_del_event_callback+0x70>)
 8006926:	2200      	movs	r2, #0
	return list->head;
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	6022      	str	r2, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800692c:	b188      	cbz	r0, 8006952 <net_mgmt_del_event_callback+0x5e>
	return node->next;
 800692e:	6801      	ldr	r1, [r0, #0]
 8006930:	4613      	mov	r3, r2
	global_event_mask |= event_mask;
 8006932:	6882      	ldr	r2, [r0, #8]
 8006934:	4313      	orrs	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 8006936:	b159      	cbz	r1, 8006950 <net_mgmt_del_event_callback+0x5c>
 8006938:	4608      	mov	r0, r1
 800693a:	6809      	ldr	r1, [r1, #0]
 800693c:	e7f9      	b.n	8006932 <net_mgmt_del_event_callback+0x3e>
	parent->next = child;
 800693e:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	4294      	cmp	r4, r2
	list->tail = node;
 8006944:	bf08      	it	eq
 8006946:	6059      	streq	r1, [r3, #4]
}
 8006948:	e7ea      	b.n	8006920 <net_mgmt_del_event_callback+0x2c>
	return node->next;
 800694a:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	e7dd      	b.n	800690c <net_mgmt_del_event_callback+0x18>
 8006950:	6023      	str	r3, [r4, #0]

	sys_slist_find_and_remove(&event_callbacks, &cb->node);

	mgmt_rebuild_global_event_mask();

	(void)k_mutex_unlock(&net_mgmt_callback_lock);
 8006952:	4802      	ldr	r0, [pc, #8]	; (800695c <net_mgmt_del_event_callback+0x68>)
}
 8006954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)k_mutex_unlock(&net_mgmt_callback_lock);
 8006958:	f00f bf28 	b.w	80167ac <k_mutex_unlock.isra.0>
 800695c:	24001114 	.word	0x24001114
 8006960:	24002654 	.word	0x24002654
 8006964:	2400265c 	.word	0x2400265c

08006968 <net_mgmt_event_notify_with_info>:

void net_mgmt_event_notify_with_info(uint32_t mgmt_event, struct net_if *iface,
				     const void *info, size_t length)
{
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
 800696a:	4b17      	ldr	r3, [pc, #92]	; (80069c8 <net_mgmt_event_notify_with_info+0x60>)
{
 800696c:	460e      	mov	r6, r1
		((NET_MGMT_GET_LAYER_CODE(mgmt_event) &
 800696e:	0c01      	lsrs	r1, r0, #16
{
 8006970:	4605      	mov	r5, r0
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
 8006972:	681c      	ldr	r4, [r3, #0]
	return (((NET_MGMT_GET_LAYER(mgmt_event) &
 8006974:	0f03      	lsrs	r3, r0, #28
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
 8006976:	ea21 4114 	bic.w	r1, r1, r4, lsr #16
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
 800697a:	ea23 7314 	bic.w	r3, r3, r4, lsr #28
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
 800697e:	ea20 0404 	bic.w	r4, r0, r4
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
 8006982:	f003 0303 	and.w	r3, r3, #3
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
 8006986:	f3c1 010a 	ubfx	r1, r1, #0, #11
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
 800698a:	b2a4      	uxth	r4, r4
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
 800698c:	430b      	orrs	r3, r1
 800698e:	431c      	orrs	r4, r3
 8006990:	d119      	bne.n	80069c6 <net_mgmt_event_notify_with_info+0x5e>
	memset(&new_event, 0, sizeof(struct mgmt_event_entry));
 8006992:	4f0e      	ldr	r7, [pc, #56]	; (80069cc <net_mgmt_event_notify_with_info+0x64>)
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	f04f 32ff 	mov.w	r2, #4294967295
 800699c:	480c      	ldr	r0, [pc, #48]	; (80069d0 <net_mgmt_event_notify_with_info+0x68>)
 800699e:	f00b fa43 	bl	8011e28 <z_impl_k_mutex_lock>
 80069a2:	2208      	movs	r2, #8
 80069a4:	4621      	mov	r1, r4
 80069a6:	4638      	mov	r0, r7
 80069a8:	f00e f970 	bl	8014c8c <memset>
	new_event.iface = iface;
 80069ac:	e9c7 5600 	strd	r5, r6, [r7]
	return z_impl_k_msgq_put(msgq, data, timeout);
 80069b0:	2300      	movs	r3, #0
 80069b2:	4639      	mov	r1, r7
 80069b4:	2264      	movs	r2, #100	; 0x64
 80069b6:	4807      	ldr	r0, [pc, #28]	; (80069d4 <net_mgmt_event_notify_with_info+0x6c>)
 80069b8:	f00b f986 	bl	8011cc8 <z_impl_k_msgq_put>
	(void)k_mutex_unlock(&net_mgmt_event_lock);
 80069bc:	4804      	ldr	r0, [pc, #16]	; (80069d0 <net_mgmt_event_notify_with_info+0x68>)
			NET_MGMT_GET_LAYER_CODE(mgmt_event),
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
	}
}
 80069be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)k_mutex_unlock(&net_mgmt_event_lock);
 80069c2:	f00f bef3 	b.w	80167ac <k_mutex_unlock.isra.0>
}
 80069c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c8:	2400265c 	.word	0x2400265c
 80069cc:	24002660 	.word	0x24002660
 80069d0:	24001128 	.word	0x24001128
 80069d4:	24001150 	.word	0x24001150

080069d8 <net_mgmt_event_init>:
				    raised_event, NULL, info, info_length,
				    timeout);
}

void net_mgmt_event_init(void)
{
 80069d8:	b510      	push	{r4, lr}
 80069da:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80069dc:	2200      	movs	r2, #0
 80069de:	2300      	movs	r3, #0
 80069e0:	4c0c      	ldr	r4, [pc, #48]	; (8006a14 <net_mgmt_event_init+0x3c>)
 80069e2:	490d      	ldr	r1, [pc, #52]	; (8006a18 <net_mgmt_event_init+0x40>)
 80069e4:	4620      	mov	r0, r4
 80069e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069ea:	2300      	movs	r3, #0
 80069ec:	f04f 32ff 	mov.w	r2, #4294967295
 80069f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80069f4:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <net_mgmt_event_init+0x44>)
 8006a00:	f00b f8ec 	bl	8011bdc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8006a04:	4906      	ldr	r1, [pc, #24]	; (8006a20 <net_mgmt_event_init+0x48>)
 8006a06:	4620      	mov	r0, r4
	k_thread_name_set(&mgmt_thread_data, "net_mgmt");

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
 8006a08:	b008      	add	sp, #32
 8006a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a0e:	f00b b821 	b.w	8011a54 <z_impl_k_thread_name_set>
 8006a12:	bf00      	nop
 8006a14:	240016a8 	.word	0x240016a8
 8006a18:	240043c0 	.word	0x240043c0
 8006a1c:	080067f1 	.word	0x080067f1
 8006a20:	0801eaf7 	.word	0x0801eaf7

08006a24 <check_used_port>:
#if defined(CONFIG_NET_UDP) || defined(CONFIG_NET_TCP)
static int check_used_port(enum net_ip_protocol proto,
			   uint16_t local_port,
			   const struct sockaddr *local_addr)

{
 8006a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a28:	4c18      	ldr	r4, [pc, #96]	; (8006a8c <check_used_port+0x68>)
 8006a2a:	460e      	mov	r6, r1
 8006a2c:	4615      	mov	r5, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_proto(&contexts[i]) == proto &&
 8006a2e:	4607      	mov	r7, r0
 8006a30:	f504 6896 	add.w	r8, r4, #1200	; 0x4b0
			}

			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
							     sin6_addr,
				    &((struct sockaddr_in6 *)
 8006a34:	f102 0904 	add.w	r9, r2, #4
	return context->flags & NET_CONTEXT_IN_USE;
 8006a38:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
		if (!net_context_is_used(&contexts[i])) {
 8006a3c:	07db      	lsls	r3, r3, #31
 8006a3e:	d405      	bmi.n	8006a4c <check_used_port+0x28>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8006a40:	3478      	adds	r4, #120	; 0x78
 8006a42:	4544      	cmp	r4, r8
 8006a44:	d1f8      	bne.n	8006a38 <check_used_port+0x14>
				return -EEXIST;
			}
		}
	}

	return 0;
 8006a46:	2000      	movs	r0, #0
}
 8006a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(net_context_get_proto(&contexts[i]) == proto &&
 8006a4c:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8006a50:	42bb      	cmp	r3, r7
 8006a52:	d1f5      	bne.n	8006a40 <check_used_port+0x1c>
 8006a54:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006a56:	42b3      	cmp	r3, r6
 8006a58:	d1f2      	bne.n	8006a40 <check_used_port+0x1c>
		    local_addr->sa_family == AF_INET6) {
 8006a5a:	882b      	ldrh	r3, [r5, #0]
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d10b      	bne.n	8006a78 <check_used_port+0x54>
			if (net_sin6_ptr(&contexts[i].local)->sin6_addr == NULL) {
 8006a60:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d0ec      	beq.n	8006a40 <check_used_port+0x1c>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 8006a66:	2210      	movs	r2, #16
 8006a68:	4649      	mov	r1, r9
 8006a6a:	f00e f8db 	bl	8014c24 <memcmp>
			if (net_ipv6_addr_cmp(
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d1e6      	bne.n	8006a40 <check_used_port+0x1c>
				return -EEXIST;
 8006a72:	f06f 0010 	mvn.w	r0, #16
 8006a76:	e7e7      	b.n	8006a48 <check_used_port+0x24>
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d1e1      	bne.n	8006a40 <check_used_port+0x1c>
			if (net_sin_ptr(&contexts[i].local)->sin_addr == NULL) {
 8006a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0de      	beq.n	8006a40 <check_used_port+0x1c>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8006a82:	686a      	ldr	r2, [r5, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
			if (net_ipv4_addr_cmp(
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d1da      	bne.n	8006a40 <check_used_port+0x1c>
 8006a8a:	e7f2      	b.n	8006a72 <check_used_port+0x4e>
 8006a8c:	24002668 	.word	0x24002668

08006a90 <find_available_port>:

static uint16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	4605      	mov	r5, r0
 8006a94:	460e      	mov	r6, r1
	uint16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
 8006a96:	4f08      	ldr	r7, [pc, #32]	; (8006ab8 <find_available_port+0x28>)
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
 8006a98:	f7fd fb3e 	bl	8004118 <z_impl_sys_rand32_get>
 8006a9c:	ea40 0407 	orr.w	r4, r0, r7
	} while (check_used_port(net_context_get_proto(context),
 8006aa0:	4632      	mov	r2, r6
 8006aa2:	f895 0072 	ldrb.w	r0, [r5, #114]	; 0x72
 8006aa6:	ba64      	rev16	r4, r4
 8006aa8:	b2a4      	uxth	r4, r4
 8006aaa:	4621      	mov	r1, r4
 8006aac:	f7ff ffba 	bl	8006a24 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
 8006ab0:	3011      	adds	r0, #17
 8006ab2:	d0f1      	beq.n	8006a98 <find_available_port+0x8>

	return htons(local_port);
}
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab8:	ffff8000 	.word	0xffff8000

08006abc <net_context_packet_received>:
enum net_verdict net_context_packet_received(struct net_conn *conn,
					     struct net_pkt *pkt,
					     union net_ip_header *ip_hdr,
					     union net_proto_header *proto_hdr,
					     void *user_data)
{
 8006abc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	4c29      	ldr	r4, [pc, #164]	; (8006b68 <net_context_packet_received+0xac>)
 8006ac2:	460e      	mov	r6, r1
 8006ac4:	4617      	mov	r7, r2
 8006ac6:	4698      	mov	r8, r3
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8006ac8:	2500      	movs	r5, #0
 8006aca:	46a2      	mov	sl, r4
 8006acc:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
		if (!net_context_is_used(&contexts[i])) {
 8006ad0:	07db      	lsls	r3, r3, #31
 8006ad2:	d521      	bpl.n	8006b18 <net_context_packet_received+0x5c>
		if (contexts[i].conn_handler == conn_handler) {
 8006ad4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006ad6:	4298      	cmp	r0, r3
 8006ad8:	d11e      	bne.n	8006b18 <net_context_packet_received+0x5c>
			return &contexts[i];
 8006ada:	2078      	movs	r0, #120	; 0x78
	enum net_verdict verdict = NET_DROP;

	NET_ASSERT(context);
	NET_ASSERT(net_pkt_iface(pkt));

	k_mutex_lock(&context->lock, K_FOREVER);
 8006adc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae4:	4345      	muls	r5, r0
 8006ae6:	f105 040c 	add.w	r4, r5, #12
			return &contexts[i];
 8006aea:	eb0a 0905 	add.w	r9, sl, r5
	k_mutex_lock(&context->lock, K_FOREVER);
 8006aee:	4454      	add	r4, sl
 8006af0:	4620      	mov	r0, r4
 8006af2:	f00f fe99 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
 8006af6:	69b0      	ldr	r0, [r6, #24]
 8006af8:	f7ff fc06 	bl	8006308 <net_if_get_by_iface>
 8006afc:	f889 0076 	strb.w	r0, [r9, #118]	; 0x76
	pkt->context = ctx;
 8006b00:	f8c6 9014 	str.w	r9, [r6, #20]
	net_pkt_set_context(pkt, context);

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */
	if (!context->recv_cb) {
 8006b04:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8006b08:	b9c3      	cbnz	r3, 8006b3c <net_context_packet_received+0x80>
	verdict = NET_OK;

	return verdict;

unlock:
	k_mutex_unlock(&context->lock);
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f00f fe8e 	bl	801682c <k_mutex_unlock.isra.0>

	return verdict;
 8006b10:	2002      	movs	r0, #2
}
 8006b12:	b002      	add	sp, #8
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8006b18:	3501      	adds	r5, #1
 8006b1a:	3478      	adds	r4, #120	; 0x78
 8006b1c:	2d0a      	cmp	r5, #10
 8006b1e:	d1d5      	bne.n	8006acc <net_context_packet_received+0x10>
	k_mutex_lock(&context->lock, K_FOREVER);
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295
 8006b28:	200c      	movs	r0, #12
 8006b2a:	f00f fe7d 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
 8006b2e:	69b0      	ldr	r0, [r6, #24]
 8006b30:	f7ff fbea 	bl	8006308 <net_if_get_by_iface>
 8006b34:	2300      	movs	r3, #0
 8006b36:	f883 3076 	strb.w	r3, [r3, #118]	; 0x76
 8006b3a:	deff      	udf	#255	; 0xff
	k_sem_give(&context->recv_data_wait);
 8006b3c:	f105 0058 	add.w	r0, r5, #88	; 0x58
	z_impl_k_sem_give(sem);
 8006b40:	4450      	add	r0, sl
 8006b42:	f00b fa5d 	bl	8012000 <z_impl_k_sem_give>
	k_mutex_unlock(&context->lock);
 8006b46:	4620      	mov	r0, r4
 8006b48:	f00f fe70 	bl	801682c <k_mutex_unlock.isra.0>
	context->recv_cb(context, pkt, ip_hdr, proto_hdr, 0, user_data);
 8006b4c:	2400      	movs	r4, #0
 8006b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b50:	4648      	mov	r0, r9
 8006b52:	9400      	str	r4, [sp, #0]
 8006b54:	463a      	mov	r2, r7
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	4631      	mov	r1, r6
 8006b5a:	f8d9 5048 	ldr.w	r5, [r9, #72]	; 0x48
 8006b5e:	4643      	mov	r3, r8
 8006b60:	47a8      	blx	r5
	return verdict;
 8006b62:	4620      	mov	r0, r4
 8006b64:	e7d5      	b.n	8006b12 <net_context_packet_received+0x56>
 8006b66:	bf00      	nop
 8006b68:	24002668 	.word	0x24002668

08006b6c <net_context_get>:
	switch (family) {
 8006b6c:	2802      	cmp	r0, #2
{
 8006b6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b72:	4605      	mov	r5, r0
 8006b74:	468b      	mov	fp, r1
 8006b76:	4690      	mov	r8, r2
 8006b78:	469a      	mov	sl, r3
	switch (family) {
 8006b7a:	d805      	bhi.n	8006b88 <net_context_get+0x1c>
 8006b7c:	b960      	cbnz	r0, 8006b98 <net_context_get+0x2c>
		return -EAFNOSUPPORT;
 8006b7e:	f06f 0469 	mvn.w	r4, #105	; 0x69
}
 8006b82:	4620      	mov	r0, r4
 8006b84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (family) {
 8006b88:	1ec5      	subs	r5, r0, #3
		return -EAFNOSUPPORT;
 8006b8a:	2d01      	cmp	r5, #1
 8006b8c:	bf94      	ite	ls
 8006b8e:	f06f 045f 	mvnls.w	r4, #95	; 0x5f
 8006b92:	f06f 0469 	mvnhi.w	r4, #105	; 0x69
 8006b96:	e7f4      	b.n	8006b82 <net_context_get+0x16>
		switch (type) {
 8006b98:	2902      	cmp	r1, #2
 8006b9a:	d006      	beq.n	8006baa <net_context_get+0x3e>
 8006b9c:	2903      	cmp	r1, #3
 8006b9e:	d007      	beq.n	8006bb0 <net_context_get+0x44>
 8006ba0:	2901      	cmp	r1, #1
 8006ba2:	d022      	beq.n	8006bea <net_context_get+0x7e>
 8006ba4:	f06f 046a 	mvn.w	r4, #106	; 0x6a
 8006ba8:	e7eb      	b.n	8006b82 <net_context_get+0x16>
			if (proto != IPPROTO_UDP) {
 8006baa:	2a11      	cmp	r2, #17
			if (proto != IPPROTO_TCP) {
 8006bac:	f040 8090 	bne.w	8006cd0 <net_context_get+0x164>
	if (!context) {
 8006bb0:	f1ba 0f00 	cmp.w	sl, #0
 8006bb4:	f000 808f 	beq.w	8006cd6 <net_context_get+0x16a>
	return z_impl_k_sem_take(sem, timeout);
 8006bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc0:	4846      	ldr	r0, [pc, #280]	; (8006cdc <net_context_get+0x170>)
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8006bc2:	2700      	movs	r7, #0
 8006bc4:	f00b fa42 	bl	801204c <z_impl_k_sem_take>
 8006bc8:	4b45      	ldr	r3, [pc, #276]	; (8006ce0 <net_context_get+0x174>)
 8006bca:	461c      	mov	r4, r3
	return context->flags & NET_CONTEXT_IN_USE;
 8006bcc:	f8b3 1074 	ldrh.w	r1, [r3, #116]	; 0x74
		if (net_context_is_used(&contexts[i])) {
 8006bd0:	f011 0101 	ands.w	r1, r1, #1
 8006bd4:	d00b      	beq.n	8006bee <net_context_get+0x82>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8006bd6:	3701      	adds	r7, #1
 8006bd8:	3378      	adds	r3, #120	; 0x78
 8006bda:	2f0a      	cmp	r7, #10
 8006bdc:	d1f6      	bne.n	8006bcc <net_context_get+0x60>
	ret = -ENOENT;
 8006bde:	f06f 0401 	mvn.w	r4, #1
	z_impl_k_sem_give(sem);
 8006be2:	483e      	ldr	r0, [pc, #248]	; (8006cdc <net_context_get+0x170>)
 8006be4:	f00b fa0c 	bl	8012000 <z_impl_k_sem_give>
	if (ret < 0) {
 8006be8:	e7cb      	b.n	8006b82 <net_context_get+0x16>
			if (proto != IPPROTO_TCP) {
 8006bea:	2a06      	cmp	r2, #6
 8006bec:	e7de      	b.n	8006bac <net_context_get+0x40>
		memset(&contexts[i], 0, sizeof(contexts[i]));
 8006bee:	2278      	movs	r2, #120	; 0x78
 8006bf0:	fb02 f607 	mul.w	r6, r2, r7
 8006bf4:	eb04 0906 	add.w	r9, r4, r6
 8006bf8:	4648      	mov	r0, r9
 8006bfa:	f00e f847 	bl	8014c8c <memset>
		if (!net_if_is_ip_offloaded(net_if_get_default())
 8006bfe:	f7fe fa8d 	bl	800511c <net_if_get_default>
			&& proto == IPPROTO_TCP) {
 8006c02:	f1b8 0f06 	cmp.w	r8, #6
 8006c06:	d040      	beq.n	8006c8a <net_context_get+0x11e>
		contexts[i].iface = -1;
 8006c08:	2378      	movs	r3, #120	; 0x78
 8006c0a:	22ff      	movs	r2, #255	; 0xff
		contexts[i].flags = 0U;
 8006c0c:	2100      	movs	r1, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8006c0e:	f04f 0c01 	mov.w	ip, #1
		contexts[i].iface = -1;
 8006c12:	fb03 4007 	mla	r0, r3, r7, r4
 8006c16:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
 8006c1a:	19a2      	adds	r2, r4, r6
		contexts[i].flags = 0U;
 8006c1c:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
 8006c20:	f3bf 8f5b 	dmb	ish
 8006c24:	3208      	adds	r2, #8
 8006c26:	e852 ef00 	ldrex	lr, [r2]
 8006c2a:	e842 c300 	strex	r3, ip, [r2]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f9      	bne.n	8006c26 <net_context_get+0xba>
		flag = family << 3;
 8006c32:	00ea      	lsls	r2, r5, #3
 8006c34:	f3bf 8f5b 	dmb	ish
	context->flags |= flag;
 8006c38:	f8b0 0074 	ldrh.w	r0, [r0, #116]	; 0x74
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	4302      	orrs	r2, r0
	if (type == SOCK_DGRAM || type == SOCK_STREAM || type == SOCK_RAW) {
 8006c40:	f10b 30ff 	add.w	r0, fp, #4294967295
 8006c44:	2802      	cmp	r0, #2
 8006c46:	d926      	bls.n	8006c96 <net_context_get+0x12a>
	context->flags |= flag;
 8006c48:	2378      	movs	r3, #120	; 0x78
 8006c4a:	4311      	orrs	r1, r2
			(void)memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
 8006c4c:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 8006c50:	2218      	movs	r2, #24
 8006c52:	fb03 4307 	mla	r3, r3, r7, r4
 8006c56:	4420      	add	r0, r4
	context->proto = proto;
 8006c58:	f8a3 8072 	strh.w	r8, [r3, #114]	; 0x72
			(void)memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
 8006c5c:	f106 0820 	add.w	r8, r6, #32
	context->flags |= flag;
 8006c60:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
			(void)memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
 8006c64:	2100      	movs	r1, #0
			(void)memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
 8006c66:	44a0      	add	r8, r4
			(void)memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
 8006c68:	f00e f810 	bl	8014c8c <memset>
			(void)memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
 8006c6c:	220c      	movs	r2, #12
 8006c6e:	2100      	movs	r1, #0
 8006c70:	4640      	mov	r0, r8
 8006c72:	f00e f80b 	bl	8014c8c <memset>
					find_available_port(&contexts[i], (struct sockaddr *)addr6);
 8006c76:	4641      	mov	r1, r8
 8006c78:	4648      	mov	r0, r9
 8006c7a:	f7ff ff09 	bl	8006a90 <find_available_port>
				addr6->sin6_port =
 8006c7e:	f8a8 0002 	strh.w	r0, [r8, #2]
				if (!addr6->sin6_port) {
 8006c82:	b958      	cbnz	r0, 8006c9c <net_context_get+0x130>
					ret = -EADDRINUSE;
 8006c84:	f06f 046f 	mvn.w	r4, #111	; 0x6f
 8006c88:	e7ab      	b.n	8006be2 <net_context_get+0x76>
			if (net_tcp_get(&contexts[i]) < 0) {
 8006c8a:	4648      	mov	r0, r9
 8006c8c:	f003 f8ee 	bl	8009e6c <net_tcp_get>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	dab9      	bge.n	8006c08 <net_context_get+0x9c>
 8006c94:	e7a3      	b.n	8006bde <net_context_get+0x72>
		flag = type << 6;
 8006c96:	ea4f 118b 	mov.w	r1, fp, lsl #6
 8006c9a:	e7d5      	b.n	8006c48 <net_context_get+0xdc>
			k_sem_init(&contexts[i].recv_data_wait, 1, K_SEM_MAX_LIMIT);
 8006c9c:	f106 0058 	add.w	r0, r6, #88	; 0x58
	return z_impl_k_sem_init(sem, initial_count, limit);
 8006ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	4420      	add	r0, r4
 8006ca8:	f014 fe6b 	bl	801b982 <z_impl_k_sem_init>
		k_mutex_init(&contexts[i].lock);
 8006cac:	f106 000c 	add.w	r0, r6, #12
	return z_impl_k_mutex_init(mutex);
 8006cb0:	4420      	add	r0, r4
 8006cb2:	f014 fdba 	bl	801b82a <z_impl_k_mutex_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
 8006cb6:	2378      	movs	r3, #120	; 0x78
 8006cb8:	fb03 4407 	mla	r4, r3, r7, r4
 8006cbc:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
 8006cc0:	f043 0301 	orr.w	r3, r3, #1
 8006cc4:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
		ret = 0;
 8006cc8:	2400      	movs	r4, #0
		*context = &contexts[i];
 8006cca:	f8ca 9000 	str.w	r9, [sl]
		break;
 8006cce:	e788      	b.n	8006be2 <net_context_get+0x76>
				return -EPROTONOSUPPORT;
 8006cd0:	f06f 047a 	mvn.w	r4, #122	; 0x7a
 8006cd4:	e755      	b.n	8006b82 <net_context_get+0x16>
		return -EINVAL;
 8006cd6:	f06f 0415 	mvn.w	r4, #21
 8006cda:	e752      	b.n	8006b82 <net_context_get+0x16>
 8006cdc:	24002b18 	.word	0x24002b18
 8006ce0:	24002668 	.word	0x24002668

08006ce4 <net_context_put>:
{
 8006ce4:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	b1f0      	cbz	r0, 8006d28 <net_context_put+0x44>
 8006cea:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <net_context_put+0x4c>)
 8006cec:	4283      	cmp	r3, r0
 8006cee:	d81b      	bhi.n	8006d28 <net_context_put+0x44>
 8006cf0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8006cf4:	4298      	cmp	r0, r3
 8006cf6:	d217      	bcs.n	8006d28 <net_context_put+0x44>
	k_mutex_lock(&context->lock, K_FOREVER);
 8006cf8:	f100 060c 	add.w	r6, r0, #12
	context->connect_cb = NULL;
 8006cfc:	2500      	movs	r5, #0
	k_mutex_lock(&context->lock, K_FOREVER);
 8006cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006d02:	f04f 33ff 	mov.w	r3, #4294967295
 8006d06:	4630      	mov	r0, r6
 8006d08:	f00f fd8e 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
	net_tcp_put(context);
 8006d0c:	4620      	mov	r0, r4
	context->connect_cb = NULL;
 8006d0e:	6525      	str	r5, [r4, #80]	; 0x50
	context->send_cb = NULL;
 8006d10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
	net_tcp_put(context);
 8006d14:	f003 fb46 	bl	800a3a4 <net_tcp_put>
	net_context_unref(context);
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f00f fd89 	bl	8016830 <net_context_unref>
	k_mutex_unlock(&context->lock);
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f00f fd84 	bl	801682c <k_mutex_unlock.isra.0>
	return ret;
 8006d24:	4628      	mov	r0, r5
}
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 8006d28:	f06f 0015 	mvn.w	r0, #21
 8006d2c:	e7fb      	b.n	8006d26 <net_context_put+0x42>
 8006d2e:	bf00      	nop
 8006d30:	24002668 	.word	0x24002668

08006d34 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     k_timeout_t timeout,
		     void *user_data)
{
 8006d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d38:	461f      	mov	r7, r3
	return context->flags & NET_CONTEXT_IN_USE;
 8006d3a:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
 8006d3e:	b090      	sub	sp, #64	; 0x40
 8006d40:	4604      	mov	r4, r0
	int ret;
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
 8006d42:	07db      	lsls	r3, r3, #31
{
 8006d44:	4689      	mov	r9, r1
 8006d46:	4690      	mov	r8, r2
 8006d48:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
	if (!net_context_is_used(context)) {
 8006d4c:	f140 8096 	bpl.w	8006e7c <net_context_recv+0x148>
		return -EBADF;
	}

	k_mutex_lock(&context->lock, K_FOREVER);
 8006d50:	f100 060c 	add.w	r6, r0, #12
 8006d54:	f04f 33ff 	mov.w	r3, #4294967295
 8006d58:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f00f fd63 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
	return context->proto;
 8006d62:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
			net_context_get_iface(context),
			context, cb, timeout, user_data);
		goto unlock;
	}

	if (IS_ENABLED(CONFIG_NET_UDP) &&
 8006d66:	2b11      	cmp	r3, #17
 8006d68:	d17d      	bne.n	8006e66 <net_context_recv+0x132>
	struct sockaddr local_addr = {
 8006d6a:	2218      	movs	r2, #24
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	a80a      	add	r0, sp, #40	; 0x28
 8006d70:	f00d ff8c 	bl	8014c8c <memset>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8006d74:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
	if (context->conn_handler) {
 8006d78:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006d7a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	struct sockaddr local_addr = {
 8006d7e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	if (context->conn_handler) {
 8006d82:	b118      	cbz	r0, 8006d8c <net_context_recv+0x58>
		net_conn_unregister(context->conn_handler);
 8006d84:	f000 fba0 	bl	80074c8 <net_conn_unregister>
		context->conn_handler = NULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	6463      	str	r3, [r4, #68]	; 0x44
	ret = bind_default(context);
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f00f fe27 	bl	80169e0 <bind_default>
	if (ret) {
 8006d92:	4605      	mov	r5, r0
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d13c      	bne.n	8006e12 <net_context_recv+0xde>
 8006d98:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
 8006d9c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d155      	bne.n	8006e50 <net_context_recv+0x11c>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
 8006da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006da6:	b193      	cbz	r3, 8006dce <net_context_recv+0x9a>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
 8006da8:	ad06      	add	r5, sp, #24
 8006daa:	f103 0e10 	add.w	lr, r3, #16
 8006dae:	462a      	mov	r2, r5
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	3308      	adds	r3, #8
 8006db4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006db8:	46ac      	mov	ip, r5
 8006dba:	4573      	cmp	r3, lr
 8006dbc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8006dc0:	4665      	mov	r5, ip
 8006dc2:	d1f5      	bne.n	8006db0 <net_context_recv+0x7c>
 8006dc4:	ad0b      	add	r5, sp, #44	; 0x2c
 8006dc6:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8006dc8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
 8006dcc:	ab0a      	add	r3, sp, #40	; 0x28
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
 8006dce:	8c65      	ldrh	r5, [r4, #34]	; 0x22
		net_sin6(&local_addr)->sin6_port =
 8006dd0:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	ret = net_conn_register(net_context_get_proto(context),
 8006dd4:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 8006dd8:	ba6d      	rev16	r5, r5
 8006dda:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
	return context->proto;
 8006dde:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 8006de2:	b2ad      	uxth	r5, r5
	context->recv_cb = cb;
 8006de4:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
	ret = net_conn_register(net_context_get_proto(context),
 8006de8:	f3c2 01c2 	ubfx	r1, r2, #3, #3
 8006dec:	9501      	str	r5, [sp, #4]
 8006dee:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8006df2:	e9cd ac04 	strd	sl, ip, [sp, #16]
 8006df6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8006e84 <net_context_recv+0x150>
 8006dfa:	bf18      	it	ne
 8006dfc:	f104 022c 	addne.w	r2, r4, #44	; 0x2c
 8006e00:	e9cd 4c02 	strd	r4, ip, [sp, #8]
 8006e04:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8006e06:	ba6d      	rev16	r5, r5
 8006e08:	b2ad      	uxth	r5, r5
 8006e0a:	9500      	str	r5, [sp, #0]
 8006e0c:	f000 fa40 	bl	8007290 <net_conn_register>
	    net_context_get_proto(context) == IPPROTO_UDP) {
		ret = recv_udp(context, cb, timeout, user_data);
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
		   net_context_get_proto(context) == IPPROTO_TCP) {
		ret = net_tcp_recv(context, cb, user_data);
 8006e10:	4605      	mov	r5, r0
		} else {
			ret = -EPROTOTYPE;
		}
	}

	if (ret < 0) {
 8006e12:	2d00      	cmp	r5, #0
 8006e14:	db15      	blt.n	8006e42 <net_context_recv+0x10e>
		goto unlock;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8006e16:	ea58 0307 	orrs.w	r3, r8, r7
 8006e1a:	d012      	beq.n	8006e42 <net_context_recv+0x10e>

		/* Make sure we have the lock, then the
		 * net_context_packet_received() callback will release the
		 * semaphore when data has been received.
		 */
		k_sem_reset(&context->recv_data_wait);
 8006e1c:	3458      	adds	r4, #88	; 0x58
	z_impl_k_sem_reset(sem);
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f00b f93c 	bl	801209c <z_impl_k_sem_reset>

		k_mutex_unlock(&context->lock);
 8006e24:	4630      	mov	r0, r6
 8006e26:	f00f fd01 	bl	801682c <k_mutex_unlock.isra.0>
	return z_impl_k_sem_take(sem, timeout);
 8006e2a:	4642      	mov	r2, r8
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f00b f90c 	bl	801204c <z_impl_k_sem_take>

		ret = k_sem_take(&context->recv_data_wait, timeout);

		k_mutex_lock(&context->lock, K_FOREVER);
 8006e34:	f04f 32ff 	mov.w	r2, #4294967295
 8006e38:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f00f fcf3 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

unlock:
	k_mutex_unlock(&context->lock);
 8006e42:	4630      	mov	r0, r6
 8006e44:	f00f fcf2 	bl	801682c <k_mutex_unlock.isra.0>

	return ret;
}
 8006e48:	4628      	mov	r0, r5
 8006e4a:	b010      	add	sp, #64	; 0x40
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d106      	bne.n	8006e62 <net_context_recv+0x12e>
		if (net_sin_ptr(&context->local)->sin_addr) {
 8006e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e56:	b113      	cbz	r3, 8006e5e <net_context_recv+0x12a>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	930b      	str	r3, [sp, #44]	; 0x2c
			laddr = &local_addr;
 8006e5c:	ab0a      	add	r3, sp, #40	; 0x28
		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
 8006e5e:	8c65      	ldrh	r5, [r4, #34]	; 0x22
 8006e60:	e7b8      	b.n	8006dd4 <net_context_recv+0xa0>
	struct sockaddr *laddr = NULL;
 8006e62:	4603      	mov	r3, r0
 8006e64:	e7b6      	b.n	8006dd4 <net_context_recv+0xa0>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 8006e66:	2b06      	cmp	r3, #6
 8006e68:	d105      	bne.n	8006e76 <net_context_recv+0x142>
		ret = net_tcp_recv(context, cb, user_data);
 8006e6a:	4652      	mov	r2, sl
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f012 fd95 	bl	801999e <net_tcp_recv>
 8006e74:	e7cc      	b.n	8006e10 <net_context_recv+0xdc>
			ret = -EPROTOTYPE;
 8006e76:	f06f 056a 	mvn.w	r5, #106	; 0x6a
 8006e7a:	e7e2      	b.n	8006e42 <net_context_recv+0x10e>
		return -EBADF;
 8006e7c:	f06f 0508 	mvn.w	r5, #8
 8006e80:	e7e2      	b.n	8006e48 <net_context_recv+0x114>
 8006e82:	bf00      	nop
 8006e84:	08006abd 	.word	0x08006abd

08006e88 <net_context_foreach>:

	return ret;
}

void net_context_foreach(net_context_cb_t cb, void *user_data)
{
 8006e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8c:	4607      	mov	r7, r0
 8006e8e:	4688      	mov	r8, r1
 8006e90:	4c12      	ldr	r4, [pc, #72]	; (8006edc <net_context_foreach+0x54>)
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);
 8006e92:	260a      	movs	r6, #10
 8006e94:	f04f 32ff 	mov.w	r2, #4294967295
 8006e98:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9c:	4810      	ldr	r0, [pc, #64]	; (8006ee0 <net_context_foreach+0x58>)
 8006e9e:	f00b f8d5 	bl	801204c <z_impl_k_sem_take>
	return context->flags & NET_CONTEXT_IN_USE;
 8006ea2:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
		if (!net_context_is_used(&contexts[i])) {
 8006ea6:	07db      	lsls	r3, r3, #31
 8006ea8:	d50e      	bpl.n	8006ec8 <net_context_foreach+0x40>
			continue;
		}

		k_mutex_lock(&contexts[i].lock, K_FOREVER);
 8006eaa:	f104 050c 	add.w	r5, r4, #12
 8006eae:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f00f fcb6 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>

		cb(&contexts[i], user_data);
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	4641      	mov	r1, r8
 8006ec0:	47b8      	blx	r7

		k_mutex_unlock(&contexts[i].lock);
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f00f fcb2 	bl	801682c <k_mutex_unlock.isra.0>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
 8006ec8:	3e01      	subs	r6, #1
 8006eca:	f104 0478 	add.w	r4, r4, #120	; 0x78
 8006ece:	d1e8      	bne.n	8006ea2 <net_context_foreach+0x1a>
	z_impl_k_sem_give(sem);
 8006ed0:	4803      	ldr	r0, [pc, #12]	; (8006ee0 <net_context_foreach+0x58>)
	}

	k_sem_give(&contexts_lock);
}
 8006ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed6:	f00b b893 	b.w	8012000 <z_impl_k_sem_give>
 8006eda:	bf00      	nop
 8006edc:	24002668 	.word	0x24002668
 8006ee0:	24002b18 	.word	0x24002b18

08006ee4 <net_context_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
 8006ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee8:	2101      	movs	r1, #1
 8006eea:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <net_context_init+0xc>)
 8006eec:	f014 bd49 	b.w	801b982 <z_impl_k_sem_init>
 8006ef0:	24002b18 	.word	0x24002b18

08006ef4 <net_pkt_get_reserve_rx_data>:
}

#else /* NET_LOG_LEVEL >= LOG_LEVEL_DBG */

struct net_buf *net_pkt_get_reserve_rx_data(size_t min_len, k_timeout_t timeout)
{
 8006ef4:	4601      	mov	r1, r0
	return net_pkt_get_reserve_data(&rx_bufs, min_len, timeout);
 8006ef6:	4801      	ldr	r0, [pc, #4]	; (8006efc <net_pkt_get_reserve_rx_data+0x8>)
 8006ef8:	f010 b9bc 	b.w	8017274 <net_pkt_get_reserve_data>
 8006efc:	24001220 	.word	0x24001220

08006f00 <net_pkt_get_reserve_tx_data>:
}

struct net_buf *net_pkt_get_reserve_tx_data(size_t min_len, k_timeout_t timeout)
{
 8006f00:	4601      	mov	r1, r0
	return net_pkt_get_reserve_data(&tx_bufs, min_len, timeout);
 8006f02:	4801      	ldr	r0, [pc, #4]	; (8006f08 <net_pkt_get_reserve_tx_data+0x8>)
 8006f04:	f010 b9b6 	b.w	8017274 <net_pkt_get_reserve_data>
 8006f08:	2400124c 	.word	0x2400124c

08006f0c <net_pkt_get_frag>:
{
 8006f0c:	b410      	push	{r4}
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4608      	mov	r0, r1
	if (pkt->slab == &rx_pkts) {
 8006f12:	4905      	ldr	r1, [pc, #20]	; (8006f28 <net_pkt_get_frag+0x1c>)
 8006f14:	6864      	ldr	r4, [r4, #4]
 8006f16:	428c      	cmp	r4, r1
 8006f18:	d102      	bne.n	8006f20 <net_pkt_get_frag+0x14>
}
 8006f1a:	bc10      	pop	{r4}
		return net_pkt_get_reserve_rx_data(min_len, timeout);
 8006f1c:	f7ff bfea 	b.w	8006ef4 <net_pkt_get_reserve_rx_data>
}
 8006f20:	bc10      	pop	{r4}
	return net_pkt_get_reserve_tx_data(min_len, timeout);
 8006f22:	f7ff bfed 	b.w	8006f00 <net_pkt_get_reserve_tx_data>
 8006f26:	bf00      	nop
 8006f28:	24001070 	.word	0x24001070

08006f2c <net_pkt_get_info>:

void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
 8006f2c:	b510      	push	{r4, lr}
	if (rx) {
 8006f2e:	b108      	cbz	r0, 8006f34 <net_pkt_get_info+0x8>
		*rx = &rx_pkts;
 8006f30:	4c05      	ldr	r4, [pc, #20]	; (8006f48 <net_pkt_get_info+0x1c>)
 8006f32:	6004      	str	r4, [r0, #0]
	}

	if (tx) {
 8006f34:	b109      	cbz	r1, 8006f3a <net_pkt_get_info+0xe>
		*tx = &tx_pkts;
 8006f36:	4805      	ldr	r0, [pc, #20]	; (8006f4c <net_pkt_get_info+0x20>)
 8006f38:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
 8006f3a:	b10a      	cbz	r2, 8006f40 <net_pkt_get_info+0x14>
		*rx_data = &rx_bufs;
 8006f3c:	4904      	ldr	r1, [pc, #16]	; (8006f50 <net_pkt_get_info+0x24>)
 8006f3e:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
 8006f40:	b10b      	cbz	r3, 8006f46 <net_pkt_get_info+0x1a>
		*tx_data = &tx_bufs;
 8006f42:	4a04      	ldr	r2, [pc, #16]	; (8006f54 <net_pkt_get_info+0x28>)
 8006f44:	601a      	str	r2, [r3, #0]
	}
}
 8006f46:	bd10      	pop	{r4, pc}
 8006f48:	24001070 	.word	0x24001070
 8006f4c:	240010a8 	.word	0x240010a8
 8006f50:	24001220 	.word	0x24001220
 8006f54:	2400124c 	.word	0x2400124c

08006f58 <pkt_alloc>:
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout,
				 const char *caller, int line)
#else
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout)
#endif
{
 8006f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	461d      	mov	r5, r3
	struct net_pkt *pkt;
	uint32_t create_time;
	int ret;

	if (k_is_in_isr()) {
 8006f60:	f014 fc31 	bl	801b7c6 <k_is_in_isr>
 8006f64:	b108      	cbz	r0, 8006f6a <pkt_alloc+0x12>
		timeout = K_NO_WAIT;
 8006f66:	2600      	movs	r6, #0
 8006f68:	4635      	mov	r5, r6
		create_time = k_cycle_get_32();
	} else {
		ARG_UNUSED(create_time);
	}

	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
 8006f6a:	462b      	mov	r3, r5
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	a901      	add	r1, sp, #4
 8006f70:	4620      	mov	r0, r4
 8006f72:	f00a fd09 	bl	8011988 <k_mem_slab_alloc>
	if (ret) {
 8006f76:	4605      	mov	r5, r0
 8006f78:	b9d8      	cbnz	r0, 8006fb2 <pkt_alloc+0x5a>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
 8006f7a:	2244      	movs	r2, #68	; 0x44
 8006f7c:	4601      	mov	r1, r0
 8006f7e:	9801      	ldr	r0, [sp, #4]
 8006f80:	f00d fe84 	bl	8014c8c <memset>

	pkt->atomic_ref = ATOMIC_INIT(1);
 8006f84:	9801      	ldr	r0, [sp, #4]
	pkt->ipv6_next_hdr = next_hdr;
 8006f86:	22ff      	movs	r2, #255	; 0xff
 8006f88:	2301      	movs	r3, #1
	pkt->slab = slab;
 8006f8a:	6044      	str	r4, [r0, #4]
 8006f8c:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
#define RX_DEFAULT_PRIORITY CONFIG_NET_RX_DEFAULT_PRIORITY
#else
#define RX_DEFAULT_PRIORITY 0
#endif

	if (&tx_pkts == slab) {
 8006f90:	4a09      	ldr	r2, [pc, #36]	; (8006fb8 <pkt_alloc+0x60>)
	pkt->atomic_ref = ATOMIC_INIT(1);
 8006f92:	6203      	str	r3, [r0, #32]
	if (&tx_pkts == slab) {
 8006f94:	4294      	cmp	r4, r2
 8006f96:	d106      	bne.n	8006fa6 <pkt_alloc+0x4e>
	pkt->priority = priority;
 8006f98:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	net_pkt_alloc_add(pkt, true, caller, line);
#endif

	net_pkt_cursor_init(pkt);
 8006f9c:	f010 fa33 	bl	8017406 <net_pkt_cursor_init>

	return pkt;
 8006fa0:	9801      	ldr	r0, [sp, #4]
}
 8006fa2:	b002      	add	sp, #8
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (&rx_pkts == slab) {
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <pkt_alloc+0x64>)
 8006fa8:	429c      	cmp	r4, r3
 8006faa:	bf08      	it	eq
 8006fac:	f880 5041 	strbeq.w	r5, [r0, #65]	; 0x41
}
 8006fb0:	e7f4      	b.n	8006f9c <pkt_alloc+0x44>
		return NULL;
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	e7f5      	b.n	8006fa2 <pkt_alloc+0x4a>
 8006fb6:	bf00      	nop
 8006fb8:	240010a8 	.word	0x240010a8
 8006fbc:	24001070 	.word	0x24001070

08006fc0 <net_pkt_alloc>:
struct net_pkt *net_pkt_alloc_debug(k_timeout_t timeout,
				    const char *caller, int line)
#else
struct net_pkt *net_pkt_alloc(k_timeout_t timeout)
#endif
{
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc(&tx_pkts, timeout, caller, line);
#else
	return pkt_alloc(&tx_pkts, timeout);
 8006fc4:	4801      	ldr	r0, [pc, #4]	; (8006fcc <net_pkt_alloc+0xc>)
 8006fc6:	f7ff bfc7 	b.w	8006f58 <pkt_alloc>
 8006fca:	bf00      	nop
 8006fcc:	240010a8 	.word	0x240010a8

08006fd0 <net_pkt_rx_alloc>:
struct net_pkt *net_pkt_rx_alloc_debug(k_timeout_t timeout,
				       const char *caller, int line)
#else
struct net_pkt *net_pkt_rx_alloc(k_timeout_t timeout)
#endif
{
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc(&rx_pkts, timeout, caller, line);
#else
	return pkt_alloc(&rx_pkts, timeout);
 8006fd4:	4801      	ldr	r0, [pc, #4]	; (8006fdc <net_pkt_rx_alloc+0xc>)
 8006fd6:	f7ff bfbf 	b.w	8006f58 <pkt_alloc>
 8006fda:	bf00      	nop
 8006fdc:	24001070 	.word	0x24001070

08006fe0 <net_pkt_alloc_buffer>:
{
 8006fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	e9dd 940c 	ldrd	r9, r4, [sp, #48]	; 0x30
 8006fe8:	460d      	mov	r5, r1
 8006fea:	4606      	mov	r6, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 8006fec:	4621      	mov	r1, r4
 8006fee:	4648      	mov	r0, r9
{
 8006ff0:	4692      	mov	sl, r2
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 8006ff2:	f014 ff0b 	bl	801be0c <sys_clock_timeout_end_calc>
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	4688      	mov	r8, r1
	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
 8006ffa:	b93d      	cbnz	r5, 800700c <net_pkt_alloc_buffer+0x2c>
 8006ffc:	f1ba 0f00 	cmp.w	sl, #0
 8007000:	d104      	bne.n	800700c <net_pkt_alloc_buffer+0x2c>
	return pkt->family;
 8007002:	f896 0037 	ldrb.w	r0, [r6, #55]	; 0x37
 8007006:	0940      	lsrs	r0, r0, #5
 8007008:	f000 809c 	beq.w	8007144 <net_pkt_alloc_buffer+0x164>
	if (k_is_in_isr()) {
 800700c:	f014 fbdb 	bl	801b7c6 <k_is_in_isr>
 8007010:	b110      	cbz	r0, 8007018 <net_pkt_alloc_buffer+0x38>
		timeout = K_NO_WAIT;
 8007012:	f04f 0900 	mov.w	r9, #0
 8007016:	464c      	mov	r4, r9
	alloc_len = net_pkt_available_buffer(pkt);
 8007018:	4630      	mov	r0, r6
 800701a:	f010 f996 	bl	801734a <net_pkt_available_buffer>
	if (!alloc_len) {
 800701e:	f896 b037 	ldrb.w	fp, [r6, #55]	; 0x37
 8007022:	4602      	mov	r2, r0
 8007024:	2800      	cmp	r0, #0
 8007026:	d14b      	bne.n	80070c0 <net_pkt_alloc_buffer+0xe0>
	if (family == AF_UNSPEC) {
 8007028:	ea5f 105b 	movs.w	r0, fp, lsr #5
 800702c:	d04a      	beq.n	80070c4 <net_pkt_alloc_buffer+0xe4>
 800702e:	4651      	mov	r1, sl
 8007030:	f010 f898 	bl	8017164 <pkt_estimate_headers_length.part.0>
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
 8007034:	1829      	adds	r1, r5, r0
	return pkt->iface;
 8007036:	69b0      	ldr	r0, [r6, #24]
	sa_family_t family = net_pkt_family(pkt);
 8007038:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
	if (net_pkt_iface(pkt)) {
 800703c:	2800      	cmp	r0, #0
 800703e:	d043      	beq.n	80070c8 <net_pkt_alloc_buffer+0xe8>
	return iface->if_dev->mtu;
 8007040:	6803      	ldr	r3, [r0, #0]
		max_len = net_if_get_mtu(net_pkt_iface(pkt));
 8007042:	8b1b      	ldrh	r3, [r3, #24]
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 8007044:	f1bb 0f02 	cmp.w	fp, #2
 8007048:	d140      	bne.n	80070cc <net_pkt_alloc_buffer+0xec>
		max_len = MAX(max_len, NET_IPV6_MTU);
 800704a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800704e:	bf38      	it	cc
 8007050:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
	max_len -= existing;
 8007054:	1a9d      	subs	r5, r3, r2
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
 8007056:	4840      	ldr	r0, [pc, #256]	; (8007158 <net_pkt_alloc_buffer+0x178>)
 8007058:	4b40      	ldr	r3, [pc, #256]	; (800715c <net_pkt_alloc_buffer+0x17c>)
	return MIN(size, max_len);
 800705a:	428d      	cmp	r5, r1
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
 800705c:	6872      	ldr	r2, [r6, #4]
	return MIN(size, max_len);
 800705e:	bf28      	it	cs
 8007060:	460d      	movcs	r5, r1
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
 8007062:	493f      	ldr	r1, [pc, #252]	; (8007160 <net_pkt_alloc_buffer+0x180>)
 8007064:	4282      	cmp	r2, r0
 8007066:	bf0c      	ite	eq
 8007068:	468a      	moveq	sl, r1
 800706a:	469a      	movne	sl, r3
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800706c:	ea59 0304 	orrs.w	r3, r9, r4
 8007070:	d010      	beq.n	8007094 <net_pkt_alloc_buffer+0xb4>
 8007072:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007076:	bf08      	it	eq
 8007078:	f1b9 3fff 	cmpeq.w	r9, #4294967295
 800707c:	d00a      	beq.n	8007094 <net_pkt_alloc_buffer+0xb4>
		int64_t remaining = end - sys_clock_tick_get();
 800707e:	f00b fea3 	bl	8012dc8 <sys_clock_tick_get>
 8007082:	ebb7 0900 	subs.w	r9, r7, r0
 8007086:	eb68 0401 	sbc.w	r4, r8, r1
 800708a:	2c00      	cmp	r4, #0
 800708c:	bfbc      	itt	lt
 800708e:	f04f 0900 	movlt.w	r9, #0
 8007092:	464c      	movlt	r4, r9
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 8007094:	4648      	mov	r0, r9
 8007096:	4621      	mov	r1, r4
 8007098:	f014 feb8 	bl	801be0c <sys_clock_timeout_end_calc>
	struct net_buf *current = NULL;
 800709c:	2300      	movs	r3, #0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 800709e:	4680      	mov	r8, r0
 80070a0:	468b      	mov	fp, r1
	struct net_buf *first = NULL;
 80070a2:	461f      	mov	r7, r3
		new = net_buf_alloc_fixed(pool, timeout);
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	464a      	mov	r2, r9
 80070a8:	4623      	mov	r3, r4
 80070aa:	4650      	mov	r0, sl
 80070ac:	f00d ff52 	bl	8014f54 <net_buf_alloc_fixed>
		if (!new) {
 80070b0:	9901      	ldr	r1, [sp, #4]
 80070b2:	4603      	mov	r3, r0
 80070b4:	b9f0      	cbnz	r0, 80070f4 <net_pkt_alloc_buffer+0x114>
	if (first) {
 80070b6:	2f00      	cmp	r7, #0
 80070b8:	d149      	bne.n	800714e <net_pkt_alloc_buffer+0x16e>
		return -ENOMEM;
 80070ba:	f06f 000b 	mvn.w	r0, #11
 80070be:	e041      	b.n	8007144 <net_pkt_alloc_buffer+0x164>
	size_t hdr_len = 0;
 80070c0:	2000      	movs	r0, #0
 80070c2:	e7b7      	b.n	8007034 <net_pkt_alloc_buffer+0x54>
 80070c4:	4610      	mov	r0, r2
 80070c6:	e7b5      	b.n	8007034 <net_pkt_alloc_buffer+0x54>
		max_len = 0;
 80070c8:	4603      	mov	r3, r0
 80070ca:	e7bb      	b.n	8007044 <net_pkt_alloc_buffer+0x64>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 80070cc:	f1bb 0f01 	cmp.w	fp, #1
 80070d0:	d105      	bne.n	80070de <net_pkt_alloc_buffer+0xfe>
		max_len = MAX(max_len, NET_IPV4_MTU);
 80070d2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80070d6:	bf38      	it	cc
 80070d8:	f44f 7310 	movcc.w	r3, #576	; 0x240
 80070dc:	e7ba      	b.n	8007054 <net_pkt_alloc_buffer+0x74>
	if (!iface || !iface->if_dev) {
 80070de:	b138      	cbz	r0, 80070f0 <net_pkt_alloc_buffer+0x110>
 80070e0:	6800      	ldr	r0, [r0, #0]
 80070e2:	b128      	cbz	r0, 80070f0 <net_pkt_alloc_buffer+0x110>
		if (net_if_l2(net_pkt_iface(pkt)) ==
 80070e4:	6845      	ldr	r5, [r0, #4]
 80070e6:	481f      	ldr	r0, [pc, #124]	; (8007164 <net_pkt_alloc_buffer+0x184>)
 80070e8:	4285      	cmp	r5, r0
 80070ea:	d101      	bne.n	80070f0 <net_pkt_alloc_buffer+0x110>
			max_len += NET_ETH_MAX_HDR_SIZE;
 80070ec:	330e      	adds	r3, #14
 80070ee:	e7b1      	b.n	8007054 <net_pkt_alloc_buffer+0x74>
			max_len = size;
 80070f0:	460b      	mov	r3, r1
 80070f2:	e7af      	b.n	8007054 <net_pkt_alloc_buffer+0x74>
		if (!first && !current) {
 80070f4:	b907      	cbnz	r7, 80070f8 <net_pkt_alloc_buffer+0x118>
 80070f6:	b341      	cbz	r1, 800714a <net_pkt_alloc_buffer+0x16a>
			current->frags = new;
 80070f8:	604b      	str	r3, [r1, #4]
		if (current->size > size) {
 80070fa:	8a5a      	ldrh	r2, [r3, #18]
 80070fc:	42aa      	cmp	r2, r5
			current->size = size;
 80070fe:	bf88      	it	hi
 8007100:	825d      	strhhi	r5, [r3, #18]
		size -= current->size;
 8007102:	8a5a      	ldrh	r2, [r3, #18]
 8007104:	1aad      	subs	r5, r5, r2
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8007106:	ea59 0204 	orrs.w	r2, r9, r4
 800710a:	d012      	beq.n	8007132 <net_pkt_alloc_buffer+0x152>
 800710c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007110:	bf08      	it	eq
 8007112:	f1b9 3fff 	cmpeq.w	r9, #4294967295
 8007116:	d00c      	beq.n	8007132 <net_pkt_alloc_buffer+0x152>
 8007118:	9301      	str	r3, [sp, #4]
			int64_t remaining = end - sys_clock_tick_get();
 800711a:	f00b fe55 	bl	8012dc8 <sys_clock_tick_get>
 800711e:	ebb8 0900 	subs.w	r9, r8, r0
 8007122:	eb6b 0401 	sbc.w	r4, fp, r1
			if (remaining <= 0) {
 8007126:	f1b9 0f01 	cmp.w	r9, #1
 800712a:	f174 0300 	sbcs.w	r3, r4, #0
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	db01      	blt.n	8007136 <net_pkt_alloc_buffer+0x156>
	} while (size);
 8007132:	2d00      	cmp	r5, #0
 8007134:	d1b6      	bne.n	80070a4 <net_pkt_alloc_buffer+0xc4>
	if (!buf) {
 8007136:	2f00      	cmp	r7, #0
 8007138:	d0bf      	beq.n	80070ba <net_pkt_alloc_buffer+0xda>
	net_pkt_append_buffer(pkt, buf);
 800713a:	4630      	mov	r0, r6
 800713c:	4639      	mov	r1, r7
 800713e:	f010 f976 	bl	801742e <net_pkt_append_buffer>
	return 0;
 8007142:	2000      	movs	r0, #0
}
 8007144:	b003      	add	sp, #12
 8007146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714a:	4607      	mov	r7, r0
 800714c:	e7d5      	b.n	80070fa <net_pkt_alloc_buffer+0x11a>
		net_buf_unref(first);
 800714e:	4638      	mov	r0, r7
 8007150:	f7fd f8d2 	bl	80042f8 <net_buf_unref>
	if (!buf) {
 8007154:	e7b1      	b.n	80070ba <net_pkt_alloc_buffer+0xda>
 8007156:	bf00      	nop
 8007158:	240010a8 	.word	0x240010a8
 800715c:	24001220 	.word	0x24001220
 8007160:	2400124c 	.word	0x2400124c
 8007164:	240012f4 	.word	0x240012f4

08007168 <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
 8007168:	b530      	push	{r4, r5, lr}
 800716a:	b085      	sub	sp, #20
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
 800716c:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	4613      	mov	r3, r2
 8007174:	460a      	mov	r2, r1
 8007176:	4601      	mov	r1, r0
 8007178:	4803      	ldr	r0, [pc, #12]	; (8007188 <net_pkt_alloc_with_buffer+0x20>)
 800717a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800717e:	f010 f967 	bl	8017450 <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
 8007182:	b005      	add	sp, #20
 8007184:	bd30      	pop	{r4, r5, pc}
 8007186:	bf00      	nop
 8007188:	240010a8 	.word	0x240010a8

0800718c <net_pkt_rx_alloc_with_buffer>:
					     size_t size,
					     sa_family_t family,
					     enum net_ip_protocol proto,
					     k_timeout_t timeout)
#endif
{
 800718c:	b530      	push	{r4, r5, lr}
 800718e:	b085      	sub	sp, #20
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&rx_pkts, iface, size, family,
					proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&rx_pkts, iface, size, family,
 8007190:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	4613      	mov	r3, r2
 8007198:	460a      	mov	r2, r1
 800719a:	4601      	mov	r1, r0
 800719c:	4803      	ldr	r0, [pc, #12]	; (80071ac <net_pkt_rx_alloc_with_buffer+0x20>)
 800719e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80071a2:	f010 f955 	bl	8017450 <pkt_alloc_with_buffer>
					proto, timeout);
#endif
}
 80071a6:	b005      	add	sp, #20
 80071a8:	bd30      	pop	{r4, r5, pc}
 80071aa:	bf00      	nop
 80071ac:	24001070 	.word	0x24001070

080071b0 <net_tc_submit_to_rx_queue>:
#endif

#if NET_TC_RX_COUNT > 0 || NET_TC_TX_COUNT > 0
static void submit_to_queue(struct k_fifo *queue, struct net_pkt *pkt)
{
	k_fifo_put(queue, pkt);
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <net_tc_submit_to_rx_queue+0xc>)
 80071b2:	22d8      	movs	r2, #216	; 0xd8
 80071b4:	fb00 3002 	mla	r0, r0, r2, r3
 80071b8:	f014 bbbb 	b.w	801b932 <k_queue_append>
 80071bc:	24001760 	.word	0x24001760

080071c0 <net_rx_priority2tc>:
int net_rx_priority2tc(enum net_priority prio)
{
#if NET_TC_RX_COUNT > 0
	if (prio > NET_PRIORITY_NC) {
		/* Use default value suggested in 802.1Q */
		prio = NET_PRIORITY_BE;
 80071c0:	2808      	cmp	r0, #8
#else
	ARG_UNUSED(prio);

	return 0;
#endif
}
 80071c2:	4b02      	ldr	r3, [pc, #8]	; (80071cc <net_rx_priority2tc+0xc>)
		prio = NET_PRIORITY_BE;
 80071c4:	bf28      	it	cs
 80071c6:	2000      	movcs	r0, #0
}
 80071c8:	5c18      	ldrb	r0, [r3, r0]
 80071ca:	4770      	bx	lr
 80071cc:	0801eb37 	.word	0x0801eb37

080071d0 <net_tc_rx_init>:
	}
#endif
}

void net_tc_rx_init(void)
{
 80071d0:	b530      	push	{r4, r5, lr}
 80071d2:	b08b      	sub	sp, #44	; 0x2c
	z_impl_k_queue_init(queue);
 80071d4:	4c16      	ldr	r4, [pc, #88]	; (8007230 <net_tc_rx_init+0x60>)
 80071d6:	4620      	mov	r0, r4
 80071d8:	f014 fb9f 	bl	801b91a <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295
 80071e0:	f04f 33ff 	mov.w	r3, #4294967295
 80071e4:	2500      	movs	r5, #0
 80071e6:	f104 0018 	add.w	r0, r4, #24
 80071ea:	9400      	str	r4, [sp, #0]
 80071ec:	4911      	ldr	r1, [pc, #68]	; (8007234 <net_tc_rx_init+0x64>)
 80071ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80071f2:	f04f 33ff 	mov.w	r3, #4294967295
 80071f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80071fa:	e9cd 3503 	strd	r3, r5, [sp, #12]
 80071fe:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8007202:	4b0d      	ldr	r3, [pc, #52]	; (8007238 <net_tc_rx_init+0x68>)
 8007204:	f00a fcea 	bl	8011bdc <z_impl_k_thread_create>
		tid = k_thread_create(&rx_classes[i].handler, rx_stack[i],
				      K_KERNEL_STACK_SIZEOF(rx_stack[i]),
				      (k_thread_entry_t)tc_rx_handler,
				      &rx_classes[i].fifo, NULL, NULL,
				      priority, 0, K_FOREVER);
		if (!tid) {
 8007208:	4604      	mov	r4, r0
 800720a:	b178      	cbz	r0, 800722c <net_tc_rx_init+0x5c>
		}

		if (IS_ENABLED(CONFIG_THREAD_NAME)) {
			char name[MAX_NAME_LEN];

			snprintk(name, sizeof(name), "rx_q[%d]", i);
 800720c:	462b      	mov	r3, r5
 800720e:	4a0b      	ldr	r2, [pc, #44]	; (800723c <net_tc_rx_init+0x6c>)
 8007210:	2108      	movs	r1, #8
 8007212:	a808      	add	r0, sp, #32
 8007214:	f00b ff40 	bl	8013098 <snprintk>
	return z_impl_k_thread_name_set(thread, str);
 8007218:	a908      	add	r1, sp, #32
 800721a:	4620      	mov	r0, r4
 800721c:	f00a fc1a 	bl	8011a54 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 8007220:	4620      	mov	r0, r4
		}

		k_thread_start(tid);
	}
#endif
}
 8007222:	b00b      	add	sp, #44	; 0x2c
 8007224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007228:	f014 bad5 	b.w	801b7d6 <z_impl_k_thread_start>
 800722c:	b00b      	add	sp, #44	; 0x2c
 800722e:	bd30      	pop	{r4, r5, pc}
 8007230:	24001760 	.word	0x24001760
 8007234:	24004700 	.word	0x24004700
 8007238:	08017971 	.word	0x08017971
 800723c:	0801eb27 	.word	0x0801eb27

08007240 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 8007244:	4801      	ldr	r0, [pc, #4]	; (800724c <k_mutex_lock.constprop.0.isra.0+0xc>)
 8007246:	f00a bdef 	b.w	8011e28 <z_impl_k_mutex_lock>
 800724a:	bf00      	nop
 800724c:	240010c4 	.word	0x240010c4

08007250 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8007250:	4801      	ldr	r0, [pc, #4]	; (8007258 <k_mutex_unlock.constprop.0.isra.0+0x8>)
 8007252:	f00a be63 	b.w	8011f1c <z_impl_k_mutex_unlock>
 8007256:	bf00      	nop
 8007258:	240010c4 	.word	0x240010c4

0800725c <conn_set_unused>:
	k_mutex_unlock(&conn_lock);
}

static void conn_set_unused(struct net_conn *conn)
{
	(void)memset(conn, 0, sizeof(*conn));
 800725c:	2244      	movs	r2, #68	; 0x44
 800725e:	2100      	movs	r1, #0
{
 8007260:	b510      	push	{r4, lr}
 8007262:	4604      	mov	r4, r0
	(void)memset(conn, 0, sizeof(*conn));
 8007264:	f00d fd12 	bl	8014c8c <memset>

	k_mutex_lock(&conn_lock, K_FOREVER);
 8007268:	f04f 30ff 	mov.w	r0, #4294967295
 800726c:	f04f 31ff 	mov.w	r1, #4294967295
 8007270:	f7ff ffe6 	bl	8007240 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <conn_set_unused+0x30>)
 8007276:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 8007278:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 800727a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 800727c:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 800727e:	b902      	cbnz	r2, 8007282 <conn_set_unused+0x26>
	list->tail = node;
 8007280:	605c      	str	r4, [r3, #4]
	sys_slist_prepend(&conn_unused, &conn->node);
	k_mutex_unlock(&conn_lock);
}
 8007282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&conn_lock);
 8007286:	f7ff bfe3 	b.w	8007250 <k_mutex_unlock.constprop.0.isra.0>
 800728a:	bf00      	nop
 800728c:	24002b30 	.word	0x24002b30

08007290 <net_conn_register>:
		      uint16_t local_port,
		      struct net_context *context,
		      net_conn_cb_t cb,
		      void *user_data,
		      struct net_conn_handle **handle)
{
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	b085      	sub	sp, #20
 8007296:	4682      	mov	sl, r0
 8007298:	4689      	mov	r9, r1
	k_mutex_lock(&conn_lock, K_FOREVER);
 800729a:	f04f 30ff 	mov.w	r0, #4294967295
 800729e:	f04f 31ff 	mov.w	r1, #4294967295
{
 80072a2:	461e      	mov	r6, r3
 80072a4:	4615      	mov	r5, r2
 80072a6:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 80072aa:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
	k_mutex_lock(&conn_lock, K_FOREVER);
 80072ae:	f7ff ffc7 	bl	8007240 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 80072b2:	4b83      	ldr	r3, [pc, #524]	; (80074c0 <net_conn_register+0x230>)
 80072b4:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn_used, conn, tmp, node) {
 80072b6:	b984      	cbnz	r4, 80072da <net_conn_register+0x4a>
	k_mutex_unlock(&conn_lock);
 80072b8:	f7ff ffca 	bl	8007250 <k_mutex_unlock.constprop.0.isra.0>
	k_mutex_lock(&conn_lock, K_FOREVER);
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295
 80072c0:	f04f 31ff 	mov.w	r1, #4294967295
 80072c4:	f7ff ffbc 	bl	8007240 <k_mutex_lock.constprop.0.isra.0>
 80072c8:	4b7e      	ldr	r3, [pc, #504]	; (80074c4 <net_conn_register+0x234>)
 80072ca:	681c      	ldr	r4, [r3, #0]
	if (!node) {
 80072cc:	2c00      	cmp	r4, #0
 80072ce:	d16f      	bne.n	80073b0 <net_conn_register+0x120>
		k_mutex_unlock(&conn_lock);
 80072d0:	f7ff ffbe 	bl	8007250 <k_mutex_unlock.constprop.0.isra.0>
		return -EALREADY;
	}

	conn = conn_get_unused();
	if (!conn) {
		return -ENOENT;
 80072d4:	f06f 0001 	mvn.w	r0, #1
 80072d8:	e05d      	b.n	8007396 <net_conn_register+0x106>
	return node->next;
 80072da:	fa98 f298 	rev16.w	r2, r8
 80072de:	f8d4 b000 	ldr.w	fp, [r4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn_used, conn, tmp, node) {
 80072e2:	b293      	uxth	r3, r2
 80072e4:	ba7a      	rev16	r2, r7
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	b293      	uxth	r3, r2
 80072ea:	9300      	str	r3, [sp, #0]
					    &net_sin6(local_addr)->sin6_addr,
 80072ec:	1d33      	adds	r3, r6, #4
 80072ee:	9302      	str	r3, [sp, #8]
					    &net_sin6(remote_addr)->sin6_addr,
 80072f0:	1d2b      	adds	r3, r5, #4
 80072f2:	9303      	str	r3, [sp, #12]
		if (conn->proto != proto) {
 80072f4:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80072f8:	4552      	cmp	r2, sl
 80072fa:	d126      	bne.n	800734a <net_conn_register+0xba>
		if (conn->family != family) {
 80072fc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8007300:	454a      	cmp	r2, r9
 8007302:	d122      	bne.n	800734a <net_conn_register+0xba>
		if (remote_addr) {
 8007304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007308:	f002 0202 	and.w	r2, r2, #2
 800730c:	b325      	cbz	r5, 8007358 <net_conn_register+0xc8>
			if (!(conn->flags & NET_CONN_REMOTE_ADDR_SET)) {
 800730e:	b1e2      	cbz	r2, 800734a <net_conn_register+0xba>
			    remote_addr->sa_family == AF_INET6 &&
 8007310:	882a      	ldrh	r2, [r5, #0]
			if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8007312:	2a02      	cmp	r2, #2
 8007314:	d110      	bne.n	8007338 <net_conn_register+0xa8>
			    remote_addr->sa_family == AF_INET6 &&
 8007316:	88a2      	ldrh	r2, [r4, #4]
 8007318:	2a02      	cmp	r2, #2
 800731a:	d116      	bne.n	800734a <net_conn_register+0xba>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800731c:	2210      	movs	r2, #16
 800731e:	f104 0108 	add.w	r1, r4, #8
 8007322:	9803      	ldr	r0, [sp, #12]
 8007324:	f00d fc7e 	bl	8014c24 <memcmp>
				if (!net_ipv6_addr_cmp(
 8007328:	b978      	cbnz	r0, 800734a <net_conn_register+0xba>
		if (local_addr) {
 800732a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800732e:	f002 0204 	and.w	r2, r2, #4
 8007332:	b9a6      	cbnz	r6, 800735e <net_conn_register+0xce>
		} else if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
 8007334:	b31a      	cbz	r2, 800737e <net_conn_register+0xee>
 8007336:	e008      	b.n	800734a <net_conn_register+0xba>
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8007338:	2a01      	cmp	r2, #1
 800733a:	d106      	bne.n	800734a <net_conn_register+0xba>
				   remote_addr->sa_family == AF_INET &&
 800733c:	88a2      	ldrh	r2, [r4, #4]
 800733e:	2a01      	cmp	r2, #1
 8007340:	d103      	bne.n	800734a <net_conn_register+0xba>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8007342:	6869      	ldr	r1, [r5, #4]
 8007344:	68a2      	ldr	r2, [r4, #8]
				if (!net_ipv4_addr_cmp(
 8007346:	4291      	cmp	r1, r2
 8007348:	d0ef      	beq.n	800732a <net_conn_register+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn_used, conn, tmp, node) {
 800734a:	f1bb 0f00 	cmp.w	fp, #0
 800734e:	d0b3      	beq.n	80072b8 <net_conn_register+0x28>
 8007350:	465c      	mov	r4, fp
 8007352:	f8db b000 	ldr.w	fp, [fp]
 8007356:	e7cd      	b.n	80072f4 <net_conn_register+0x64>
		} else if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
 8007358:	2a00      	cmp	r2, #0
 800735a:	d0e6      	beq.n	800732a <net_conn_register+0x9a>
 800735c:	e7f5      	b.n	800734a <net_conn_register+0xba>
			if (!(conn->flags & NET_CONN_LOCAL_ADDR_SET)) {
 800735e:	2a00      	cmp	r2, #0
 8007360:	d0f3      	beq.n	800734a <net_conn_register+0xba>
			    local_addr->sa_family == AF_INET6 &&
 8007362:	8832      	ldrh	r2, [r6, #0]
			if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8007364:	2a02      	cmp	r2, #2
 8007366:	d119      	bne.n	800739c <net_conn_register+0x10c>
			    local_addr->sa_family == AF_INET6 &&
 8007368:	8ba2      	ldrh	r2, [r4, #28]
 800736a:	2a02      	cmp	r2, #2
 800736c:	d1ed      	bne.n	800734a <net_conn_register+0xba>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800736e:	2210      	movs	r2, #16
 8007370:	f104 0120 	add.w	r1, r4, #32
 8007374:	9802      	ldr	r0, [sp, #8]
 8007376:	f00d fc55 	bl	8014c24 <memcmp>
				if (!net_ipv6_addr_cmp(
 800737a:	2800      	cmp	r0, #0
 800737c:	d1e5      	bne.n	800734a <net_conn_register+0xba>
		if (net_sin(&conn->remote_addr)->sin_port !=
 800737e:	88e2      	ldrh	r2, [r4, #6]
 8007380:	9b01      	ldr	r3, [sp, #4]
 8007382:	429a      	cmp	r2, r3
 8007384:	d1e1      	bne.n	800734a <net_conn_register+0xba>
		if (net_sin(&conn->local_addr)->sin_port !=
 8007386:	8be2      	ldrh	r2, [r4, #30]
 8007388:	9b00      	ldr	r3, [sp, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d1dd      	bne.n	800734a <net_conn_register+0xba>
		k_mutex_unlock(&conn_lock);
 800738e:	f7ff ff5f 	bl	8007250 <k_mutex_unlock.constprop.0.isra.0>
		return -EALREADY;
 8007392:	f06f 0077 	mvn.w	r0, #119	; 0x77

	return 0;
error:
	conn_set_unused(conn);
	return -EINVAL;
}
 8007396:	b005      	add	sp, #20
 8007398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 800739c:	2a01      	cmp	r2, #1
 800739e:	d1d4      	bne.n	800734a <net_conn_register+0xba>
				   local_addr->sa_family == AF_INET &&
 80073a0:	8ba2      	ldrh	r2, [r4, #28]
 80073a2:	2a01      	cmp	r2, #1
 80073a4:	d1d1      	bne.n	800734a <net_conn_register+0xba>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 80073a6:	6871      	ldr	r1, [r6, #4]
 80073a8:	6a22      	ldr	r2, [r4, #32]
				if (!net_ipv4_addr_cmp(
 80073aa:	4291      	cmp	r1, r2
 80073ac:	d0e7      	beq.n	800737e <net_conn_register+0xee>
 80073ae:	e7cc      	b.n	800734a <net_conn_register+0xba>
Z_GENLIST_REMOVE(slist, snode)
 80073b0:	6859      	ldr	r1, [r3, #4]
	return node->next;
 80073b2:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 80073b4:	428c      	cmp	r4, r1
	list->head = node;
 80073b6:	601a      	str	r2, [r3, #0]
	list->tail = node;
 80073b8:	bf08      	it	eq
 80073ba:	605a      	streq	r2, [r3, #4]
	parent->next = child;
 80073bc:	2300      	movs	r3, #0
 80073be:	6023      	str	r3, [r4, #0]
	k_mutex_unlock(&conn_lock);
 80073c0:	f7ff ff46 	bl	8007250 <k_mutex_unlock.constprop.0.isra.0>
	if (remote_addr) {
 80073c4:	b36d      	cbz	r5, 8007422 <net_conn_register+0x192>
		    remote_addr->sa_family == AF_INET6) {
 80073c6:	882b      	ldrh	r3, [r5, #0]
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d11d      	bne.n	8007408 <net_conn_register+0x178>
			memcpy(&conn->remote_addr, remote_addr,
 80073cc:	2218      	movs	r2, #24
 80073ce:	4629      	mov	r1, r5
 80073d0:	1d20      	adds	r0, r4, #4
 80073d2:	f00d fc50 	bl	8014c76 <memcpy>
			if (!net_ipv6_is_addr_unspecified(
 80073d6:	1d28      	adds	r0, r5, #4
 80073d8:	f010 fadb 	bl	8017992 <net_ipv6_is_addr_unspecified>
 80073dc:	b9f0      	cbnz	r0, 800741c <net_conn_register+0x18c>
				flags |= NET_CONN_REMOTE_ADDR_SPEC;
 80073de:	f04f 0b20 	mov.w	fp, #32
		flags |= NET_CONN_REMOTE_ADDR_SET;
 80073e2:	f04b 0b02 	orr.w	fp, fp, #2
	if (local_addr) {
 80073e6:	b386      	cbz	r6, 800744a <net_conn_register+0x1ba>
		    local_addr->sa_family == AF_INET6) {
 80073e8:	8833      	ldrh	r3, [r6, #0]
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d11b      	bne.n	8007426 <net_conn_register+0x196>
			memcpy(&conn->local_addr, local_addr,
 80073ee:	2218      	movs	r2, #24
 80073f0:	4631      	mov	r1, r6
 80073f2:	f104 001c 	add.w	r0, r4, #28
 80073f6:	f00d fc3e 	bl	8014c76 <memcpy>
			if (!net_ipv6_is_addr_unspecified(
 80073fa:	1d30      	adds	r0, r6, #4
 80073fc:	f010 fac9 	bl	8017992 <net_ipv6_is_addr_unspecified>
 8007400:	b9e0      	cbnz	r0, 800743c <net_conn_register+0x1ac>
				flags |= NET_CONN_LOCAL_ADDR_SPEC;
 8007402:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8007406:	e019      	b.n	800743c <net_conn_register+0x1ac>
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8007408:	2b01      	cmp	r3, #1
 800740a:	d152      	bne.n	80074b2 <net_conn_register+0x222>
			memcpy(&conn->remote_addr, remote_addr,
 800740c:	2208      	movs	r2, #8
 800740e:	4629      	mov	r1, r5
 8007410:	1d20      	adds	r0, r4, #4
 8007412:	f00d fc30 	bl	8014c76 <memcpy>
			if (net_sin(remote_addr)->sin_addr.s_addr) {
 8007416:	686b      	ldr	r3, [r5, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e0      	bne.n	80073de <net_conn_register+0x14e>
	uint8_t flags = 0U;
 800741c:	f04f 0b00 	mov.w	fp, #0
 8007420:	e7df      	b.n	80073e2 <net_conn_register+0x152>
 8007422:	46ab      	mov	fp, r5
 8007424:	e7df      	b.n	80073e6 <net_conn_register+0x156>
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8007426:	2b01      	cmp	r3, #1
 8007428:	d143      	bne.n	80074b2 <net_conn_register+0x222>
			memcpy(&conn->local_addr, local_addr,
 800742a:	2208      	movs	r2, #8
 800742c:	4631      	mov	r1, r6
 800742e:	f104 001c 	add.w	r0, r4, #28
 8007432:	f00d fc20 	bl	8014c76 <memcpy>
			if (net_sin(local_addr)->sin_addr.s_addr) {
 8007436:	6873      	ldr	r3, [r6, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e2      	bne.n	8007402 <net_conn_register+0x172>
		flags |= NET_CONN_LOCAL_ADDR_SET;
 800743c:	f04b 0b04 	orr.w	fp, fp, #4
	if (remote_addr && local_addr) {
 8007440:	b11d      	cbz	r5, 800744a <net_conn_register+0x1ba>
		if (remote_addr->sa_family != local_addr->sa_family) {
 8007442:	882a      	ldrh	r2, [r5, #0]
 8007444:	8833      	ldrh	r3, [r6, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d133      	bne.n	80074b2 <net_conn_register+0x222>
	if (remote_port) {
 800744a:	f1b8 0f00 	cmp.w	r8, #0
 800744e:	d005      	beq.n	800745c <net_conn_register+0x1cc>
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
 8007450:	fa98 f898 	rev16.w	r8, r8
		flags |= NET_CONN_REMOTE_PORT_SPEC;
 8007454:	f04b 0b08 	orr.w	fp, fp, #8
		net_sin(&conn->remote_addr)->sin_port = htons(remote_port);
 8007458:	f8a4 8006 	strh.w	r8, [r4, #6]
	if (local_port) {
 800745c:	b11f      	cbz	r7, 8007466 <net_conn_register+0x1d6>
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
 800745e:	ba7f      	rev16	r7, r7
		flags |= NET_CONN_LOCAL_PORT_SPEC;
 8007460:	f04b 0b10 	orr.w	fp, fp, #16
		net_sin(&conn->local_addr)->sin_port = htons(local_port);
 8007464:	83e7      	strh	r7, [r4, #30]
	conn->cb = cb;
 8007466:	9b11      	ldr	r3, [sp, #68]	; 0x44
	conn->flags = flags;
 8007468:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	conn->cb = cb;
 800746c:	6363      	str	r3, [r4, #52]	; 0x34
	conn->user_data = user_data;
 800746e:	9b12      	ldr	r3, [sp, #72]	; 0x48
	conn->proto = proto;
 8007470:	f8a4 a040 	strh.w	sl, [r4, #64]	; 0x40
	conn->user_data = user_data;
 8007474:	63e3      	str	r3, [r4, #60]	; 0x3c
	conn->context = context;
 8007476:	9b10      	ldr	r3, [sp, #64]	; 0x40
	conn->family = family;
 8007478:	f884 9042 	strb.w	r9, [r4, #66]	; 0x42
	conn->context = context;
 800747c:	63a3      	str	r3, [r4, #56]	; 0x38
	if (handle) {
 800747e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007480:	b103      	cbz	r3, 8007484 <net_conn_register+0x1f4>
		*handle = (struct net_conn_handle *)conn;
 8007482:	601c      	str	r4, [r3, #0]
	conn->flags |= NET_CONN_IN_USE;
 8007484:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	k_mutex_lock(&conn_lock, K_FOREVER);
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	f04f 31ff 	mov.w	r1, #4294967295
	conn->flags |= NET_CONN_IN_USE;
 8007490:	f043 0301 	orr.w	r3, r3, #1
 8007494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	k_mutex_lock(&conn_lock, K_FOREVER);
 8007498:	f7ff fed2 	bl	8007240 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 800749c:	4b08      	ldr	r3, [pc, #32]	; (80074c0 <net_conn_register+0x230>)
 800749e:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 80074a0:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 80074a2:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 80074a4:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 80074a6:	b902      	cbnz	r2, 80074aa <net_conn_register+0x21a>
	list->tail = node;
 80074a8:	605c      	str	r4, [r3, #4]
	k_mutex_unlock(&conn_lock);
 80074aa:	f7ff fed1 	bl	8007250 <k_mutex_unlock.constprop.0.isra.0>
	return 0;
 80074ae:	2000      	movs	r0, #0
}
 80074b0:	e771      	b.n	8007396 <net_conn_register+0x106>
	conn_set_unused(conn);
 80074b2:	4620      	mov	r0, r4
 80074b4:	f7ff fed2 	bl	800725c <conn_set_unused>
	return -EINVAL;
 80074b8:	f06f 0015 	mvn.w	r0, #21
 80074bc:	e76b      	b.n	8007396 <net_conn_register+0x106>
 80074be:	bf00      	nop
 80074c0:	24002b38 	.word	0x24002b38
 80074c4:	24002b30 	.word	0x24002b30

080074c8 <net_conn_unregister>:

int net_conn_unregister(struct net_conn_handle *handle)
{
	struct net_conn *conn = (struct net_conn *)handle;

	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
 80074c8:	4b1b      	ldr	r3, [pc, #108]	; (8007538 <net_conn_unregister+0x70>)
 80074ca:	4298      	cmp	r0, r3
{
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4604      	mov	r4, r0
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
 80074d0:	d32c      	bcc.n	800752c <net_conn_unregister+0x64>
 80074d2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80074d6:	4298      	cmp	r0, r3
 80074d8:	d828      	bhi.n	800752c <net_conn_unregister+0x64>
		return -EINVAL;
	}

	if (!(conn->flags & NET_CONN_IN_USE)) {
 80074da:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80074de:	07db      	lsls	r3, r3, #31
 80074e0:	d527      	bpl.n	8007532 <net_conn_unregister+0x6a>
		return -ENOENT;
	}

	NET_DBG("Connection handler %p removed", conn);

	k_mutex_lock(&conn_lock, K_FOREVER);
 80074e2:	f04f 31ff 	mov.w	r1, #4294967295
 80074e6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ea:	f7ff fea9 	bl	8007240 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 80074ee:	4b13      	ldr	r3, [pc, #76]	; (800753c <net_conn_unregister+0x74>)
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80074f0:	2100      	movs	r1, #0
	return list->head;
 80074f2:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80074f4:	b152      	cbz	r2, 800750c <net_conn_unregister+0x44>
 80074f6:	4294      	cmp	r4, r2
 80074f8:	d115      	bne.n	8007526 <net_conn_unregister+0x5e>
	return node->next;
 80074fa:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 80074fc:	b969      	cbnz	r1, 800751a <net_conn_unregister+0x52>
 80074fe:	6859      	ldr	r1, [r3, #4]
	list->head = node;
 8007500:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 8007502:	428c      	cmp	r4, r1
 8007504:	d100      	bne.n	8007508 <net_conn_unregister+0x40>
	list->tail = node;
 8007506:	605a      	str	r2, [r3, #4]
	parent->next = child;
 8007508:	2300      	movs	r3, #0
 800750a:	6023      	str	r3, [r4, #0]
	sys_slist_find_and_remove(&conn_used, &conn->node);
	k_mutex_unlock(&conn_lock);
 800750c:	f7ff fea0 	bl	8007250 <k_mutex_unlock.constprop.0.isra.0>

	conn_set_unused(conn);
 8007510:	4620      	mov	r0, r4
 8007512:	f7ff fea3 	bl	800725c <conn_set_unused>

	return 0;
 8007516:	2000      	movs	r0, #0
}
 8007518:	bd10      	pop	{r4, pc}
 800751a:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	4294      	cmp	r4, r2
	list->tail = node;
 8007520:	bf08      	it	eq
 8007522:	6059      	streq	r1, [r3, #4]
}
 8007524:	e7f0      	b.n	8007508 <net_conn_unregister+0x40>
	return node->next;
 8007526:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	e7e3      	b.n	80074f4 <net_conn_unregister+0x2c>
		return -EINVAL;
 800752c:	f06f 0015 	mvn.w	r0, #21
 8007530:	e7f2      	b.n	8007518 <net_conn_unregister+0x50>
		return -ENOENT;
 8007532:	f06f 0001 	mvn.w	r0, #1
 8007536:	e7ef      	b.n	8007518 <net_conn_unregister+0x50>
 8007538:	24002b40 	.word	0x24002b40
 800753c:	24002b38 	.word	0x24002b38

08007540 <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				uint8_t proto,
				union net_proto_header *proto_hdr)
{
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return pkt->family;
 8007544:	f890 9037 	ldrb.w	r9, [r0, #55]	; 0x37
 8007548:	469b      	mov	fp, r3
 800754a:	b089      	sub	sp, #36	; 0x24
 800754c:	4605      	mov	r5, r0
 800754e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8007552:	460e      	mov	r6, r1
 8007554:	4617      	mov	r7, r2
	struct net_if *pkt_iface = net_pkt_iface(pkt);
	uint8_t pkt_family = net_pkt_family(pkt);
	uint16_t src_port = 0U, dst_port = 0U;

	if (IS_ENABLED(CONFIG_NET_IP) && (pkt_family == AF_INET || pkt_family == AF_INET6)) {
 8007556:	f109 33ff 	add.w	r3, r9, #4294967295
 800755a:	2b01      	cmp	r3, #1
 800755c:	d901      	bls.n	8007562 <net_conn_input+0x22>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
 800755e:	2002      	movs	r0, #2
 8007560:	e0d1      	b.n	8007706 <net_conn_input+0x1c6>
		if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 8007562:	2a11      	cmp	r2, #17
 8007564:	d120      	bne.n	80075a8 <net_conn_input+0x68>
			src_port = proto_hdr->udp->src_port;
 8007566:	f8db 3000 	ldr.w	r3, [fp]
			src_port = proto_hdr->tcp->src_port;
 800756a:	881a      	ldrh	r2, [r3, #0]
 800756c:	9203      	str	r2, [sp, #12]
			dst_port = proto_hdr->tcp->dst_port;
 800756e:	885b      	ldrh	r3, [r3, #2]
 8007570:	9304      	str	r3, [sp, #16]
	return pkt->iface;
 8007572:	69ab      	ldr	r3, [r5, #24]
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 8007574:	f1b9 0f01 	cmp.w	r9, #1
			(struct in_addr *)ip_hdr->ipv4->src);
 8007578:	f8d6 a000 	ldr.w	sl, [r6]
 800757c:	9302      	str	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 800757e:	d01b      	beq.n	80075b8 <net_conn_input+0x78>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 8007580:	2100      	movs	r1, #0
 8007582:	f10a 0008 	add.w	r0, sl, #8
 8007586:	f7fd ff01 	bl	800538c <net_if_ipv6_addr_lookup>
 800758a:	1e04      	subs	r4, r0, #0
			ip_hdr->ipv6->src, ip_hdr->ipv6->dst);
 800758c:	6830      	ldr	r0, [r6, #0]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800758e:	f04f 0210 	mov.w	r2, #16
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 8007592:	bf18      	it	ne
 8007594:	2401      	movne	r4, #1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 8007596:	f100 0118 	add.w	r1, r0, #24
 800759a:	3008      	adds	r0, #8
 800759c:	f00d fb42 	bl	8014c24 <memcmp>
 80075a0:	fab0 f080 	clz	r0, r0
 80075a4:	0940      	lsrs	r0, r0, #5
 80075a6:	e029      	b.n	80075fc <net_conn_input+0xbc>
		} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 80075a8:	2a06      	cmp	r2, #6
 80075aa:	f040 8105 	bne.w	80077b8 <net_conn_input+0x278>
			if (proto_hdr->tcp == NULL) {
 80075ae:	f8db 3000 	ldr.w	r3, [fp]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1d9      	bne.n	800756a <net_conn_input+0x2a>
 80075b6:	e7d2      	b.n	800755e <net_conn_input+0x1e>
			(struct in_addr *)ip_hdr->ipv4->src);
 80075b8:	f10a 080c 	add.w	r8, sl, #12
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 80075bc:	2100      	movs	r1, #0
 80075be:	4640      	mov	r0, r8
 80075c0:	f7fe fd60 	bl	8006084 <net_if_ipv4_addr_lookup>
 80075c4:	1e02      	subs	r2, r0, #0
 80075c6:	bf14      	ite	ne
 80075c8:	2401      	movne	r4, #1
 80075ca:	2400      	moveq	r4, #0
	if (!ret) {
 80075cc:	d10d      	bne.n	80075ea <net_conn_input+0xaa>
 80075ce:	9205      	str	r2, [sp, #20]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 80075d0:	f7ff f906 	bl	80067e0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 80075d4:	f8da 100c 	ldr.w	r1, [sl, #12]
 80075d8:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 80075da:	4299      	cmp	r1, r3
 80075dc:	d068      	beq.n	80076b0 <net_conn_input+0x170>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 80075de:	9a05      	ldr	r2, [sp, #20]
 80075e0:	4641      	mov	r1, r8
 80075e2:	4610      	mov	r0, r2
 80075e4:	f7fe fcd2 	bl	8005f8c <net_if_ipv4_is_addr_bcast>
 80075e8:	4604      	mov	r4, r0
			ip_hdr->ipv4->src, ip_hdr->ipv4->dst);
 80075ea:	6833      	ldr	r3, [r6, #0]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 80075ec:	68d8      	ldr	r0, [r3, #12]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	eba0 0c03 	sub.w	ip, r0, r3
 80075f4:	f1dc 0000 	rsbs	r0, ip, #0
 80075f8:	eb40 000c 	adc.w	r0, r0, ip
		(is_same_src_and_dst_addr || is_my_src_addr) && is_same_src_and_dst_port;
 80075fc:	b900      	cbnz	r0, 8007600 <net_conn_input+0xc0>
 80075fe:	b11c      	cbz	r4, 8007608 <net_conn_input+0xc8>
		if (!conn_are_endpoints_valid(pkt, pkt_family, ip_hdr, src_port, dst_port)) {
 8007600:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8007604:	4293      	cmp	r3, r2
 8007606:	d0aa      	beq.n	800755e <net_conn_input+0x1e>
		if (IS_ENABLED(CONFIG_NET_IPV4) && pkt_family == AF_INET) {
 8007608:	f1b9 0f01 	cmp.w	r9, #1
			if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->ipv4->dst)) {
 800760c:	6831      	ldr	r1, [r6, #0]
		if (IS_ENABLED(CONFIG_NET_IPV4) && pkt_family == AF_INET) {
 800760e:	d151      	bne.n	80076b4 <net_conn_input+0x174>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8007610:	690b      	ldr	r3, [r1, #16]
 8007612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->ipv4->dst)) {
 8007616:	2be0      	cmp	r3, #224	; 0xe0
 8007618:	d057      	beq.n	80076ca <net_conn_input+0x18a>
	bool is_mcast_pkt = false;
 800761a:	f04f 0a00 	mov.w	sl, #0
			} else if (net_if_ipv4_is_addr_bcast(pkt_iface,
 800761e:	3110      	adds	r1, #16
 8007620:	9802      	ldr	r0, [sp, #8]
 8007622:	f7fe fcb3 	bl	8005f8c <net_if_ipv4_is_addr_bcast>
 8007626:	9002      	str	r0, [sp, #8]
	return list->head;
 8007628:	4b68      	ldr	r3, [pc, #416]	; (80077cc <net_conn_input+0x28c>)
 800762a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
 800762c:	2c00      	cmp	r4, #0
 800762e:	f000 80c7 	beq.w	80077c0 <net_conn_input+0x280>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	f04f 33ff 	mov.w	r3, #4294967295
		if (conn->proto != proto) {
 800763a:	b2bf      	uxth	r7, r7
 800763c:	e9cd 8305 	strd	r8, r3, [sp, #20]
		if (conn->context != NULL &&
 8007640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007642:	2b00      	cmp	r3, #0
 8007644:	d145      	bne.n	80076d2 <net_conn_input+0x192>
		if (conn->family != AF_UNSPEC &&
 8007646:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800764a:	2b00      	cmp	r3, #0
 800764c:	d15e      	bne.n	800770c <net_conn_input+0x1cc>
		if (conn->proto != proto) {
 800764e:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8007652:	42ba      	cmp	r2, r7
 8007654:	d14a      	bne.n	80076ec <net_conn_input+0x1ac>
		} else if ((IS_ENABLED(CONFIG_NET_UDP) || IS_ENABLED(CONFIG_NET_TCP)) &&
 8007656:	2b02      	cmp	r3, #2
 8007658:	d848      	bhi.n	80076ec <net_conn_input+0x1ac>
			if (net_sin(&conn->remote_addr)->sin_port &&
 800765a:	88e3      	ldrh	r3, [r4, #6]
 800765c:	b113      	cbz	r3, 8007664 <net_conn_input+0x124>
 800765e:	9a03      	ldr	r2, [sp, #12]
 8007660:	4293      	cmp	r3, r2
 8007662:	d143      	bne.n	80076ec <net_conn_input+0x1ac>
			if (net_sin(&conn->local_addr)->sin_port &&
 8007664:	8be3      	ldrh	r3, [r4, #30]
 8007666:	b113      	cbz	r3, 800766e <net_conn_input+0x12e>
 8007668:	9a04      	ldr	r2, [sp, #16]
 800766a:	4293      	cmp	r3, r2
 800766c:	d13e      	bne.n	80076ec <net_conn_input+0x1ac>
			if ((conn->flags & NET_CONN_REMOTE_ADDR_SET) &&
 800766e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007672:	0799      	lsls	r1, r3, #30
 8007674:	d44d      	bmi.n	8007712 <net_conn_input+0x1d2>
			if ((conn->flags & NET_CONN_LOCAL_ADDR_SET) &&
 8007676:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800767a:	075a      	lsls	r2, r3, #29
 800767c:	d507      	bpl.n	800768e <net_conn_input+0x14e>
			    !conn_addr_cmp(pkt, ip_hdr, &conn->local_addr, false)) {
 800767e:	2300      	movs	r3, #0
 8007680:	f104 021c 	add.w	r2, r4, #28
 8007684:	4631      	mov	r1, r6
 8007686:	4628      	mov	r0, r5
 8007688:	f010 f993 	bl	80179b2 <conn_addr_cmp>
			if ((conn->flags & NET_CONN_LOCAL_ADDR_SET) &&
 800768c:	b370      	cbz	r0, 80076ec <net_conn_input+0x1ac>
			if (best_match != NULL && best_match->flags & NET_CONN_REMOTE_PORT_SPEC) {
 800768e:	f1b8 0f00 	cmp.w	r8, #0
 8007692:	d147      	bne.n	8007724 <net_conn_input+0x1e4>
			if (best_rank < NET_CONN_RANK(conn->flags)) {
 8007694:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007698:	9a06      	ldr	r2, [sp, #24]
 800769a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800769e:	429a      	cmp	r2, r3
 80076a0:	da24      	bge.n	80076ec <net_conn_input+0x1ac>
				if (!is_mcast_pkt) {
 80076a2:	f1ba 0f00 	cmp.w	sl, #0
 80076a6:	d142      	bne.n	800772e <net_conn_input+0x1ee>
					best_rank = NET_CONN_RANK(conn->flags);
 80076a8:	b21b      	sxth	r3, r3
					continue; /* found a match - but maybe not yet the best */
 80076aa:	46a0      	mov	r8, r4
					best_rank = NET_CONN_RANK(conn->flags);
 80076ac:	9306      	str	r3, [sp, #24]
					continue; /* found a match - but maybe not yet the best */
 80076ae:	e01d      	b.n	80076ec <net_conn_input+0x1ac>
		return true;
 80076b0:	464c      	mov	r4, r9
 80076b2:	e79a      	b.n	80075ea <net_conn_input+0xaa>
	return addr->s6_addr[0] == 0xFF;
 80076b4:	f891 a018 	ldrb.w	sl, [r1, #24]
	bool is_bcast_pkt = false;
 80076b8:	2300      	movs	r3, #0
 80076ba:	f1aa 04ff 	sub.w	r4, sl, #255	; 0xff
 80076be:	9302      	str	r3, [sp, #8]
 80076c0:	f1d4 0a00 	rsbs	sl, r4, #0
 80076c4:	eb4a 0a04 	adc.w	sl, sl, r4
 80076c8:	e7ae      	b.n	8007628 <net_conn_input+0xe8>
 80076ca:	2300      	movs	r3, #0
				is_mcast_pkt = true;
 80076cc:	46ca      	mov	sl, r9
	bool is_bcast_pkt = false;
 80076ce:	9302      	str	r3, [sp, #8]
 80076d0:	e7aa      	b.n	8007628 <net_conn_input+0xe8>
		if (conn->context != NULL &&
 80076d2:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
 80076d6:	0510      	lsls	r0, r2, #20
 80076d8:	d5b5      	bpl.n	8007646 <net_conn_input+0x106>
 80076da:	69aa      	ldr	r2, [r5, #24]
	return net_if_get_by_index(context->iface);
 80076dc:	f993 0076 	ldrsb.w	r0, [r3, #118]	; 0x76
 80076e0:	9207      	str	r2, [sp, #28]
		union { uintptr_t x; int val; } parm0 = { .val = index };
		return (struct net_if *) arch_syscall_invoke1(parm0.x, K_SYSCALL_NET_IF_GET_BY_INDEX);
	}
#endif
	compiler_barrier();
	return z_impl_net_if_get_by_index(index);
 80076e2:	f7fd fcf7 	bl	80050d4 <z_impl_net_if_get_by_index>
		    net_context_is_bound_to_iface(conn->context) &&
 80076e6:	9a07      	ldr	r2, [sp, #28]
 80076e8:	4282      	cmp	r2, r0
 80076ea:	d0ac      	beq.n	8007646 <net_conn_input+0x106>
	return node->next;
 80076ec:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
 80076ee:	2c00      	cmp	r4, #0
 80076f0:	d1a6      	bne.n	8007640 <net_conn_input+0x100>
	if (IS_ENABLED(CONFIG_NET_IP) && is_mcast_pkt && mcast_pkt_delivered) {
 80076f2:	f1ba 0f00 	cmp.w	sl, #0
 80076f6:	d03c      	beq.n	8007772 <net_conn_input+0x232>
 80076f8:	9b05      	ldr	r3, [sp, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d04b      	beq.n	8007796 <net_conn_input+0x256>
		net_pkt_unref(pkt);
 80076fe:	4628      	mov	r0, r5
 8007700:	f00f fdef 	bl	80172e2 <net_pkt_unref>
		return NET_OK;
 8007704:	2000      	movs	r0, #0
}
 8007706:	b009      	add	sp, #36	; 0x24
 8007708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->family != AF_UNSPEC &&
 800770c:	454b      	cmp	r3, r9
 800770e:	d09e      	beq.n	800764e <net_conn_input+0x10e>
 8007710:	e7ec      	b.n	80076ec <net_conn_input+0x1ac>
			    !conn_addr_cmp(pkt, ip_hdr, &conn->remote_addr, true)) {
 8007712:	2301      	movs	r3, #1
 8007714:	1d22      	adds	r2, r4, #4
 8007716:	4631      	mov	r1, r6
 8007718:	4628      	mov	r0, r5
 800771a:	f010 f94a 	bl	80179b2 <conn_addr_cmp>
			if ((conn->flags & NET_CONN_REMOTE_ADDR_SET) &&
 800771e:	2800      	cmp	r0, #0
 8007720:	d1a9      	bne.n	8007676 <net_conn_input+0x136>
 8007722:	e7e3      	b.n	80076ec <net_conn_input+0x1ac>
			if (best_match != NULL && best_match->flags & NET_CONN_REMOTE_PORT_SPEC) {
 8007724:	f898 3043 	ldrb.w	r3, [r8, #67]	; 0x43
 8007728:	071b      	lsls	r3, r3, #28
 800772a:	d4df      	bmi.n	80076ec <net_conn_input+0x1ac>
 800772c:	e7b2      	b.n	8007694 <net_conn_input+0x154>
				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
 800772e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007732:	2300      	movs	r3, #0
 8007734:	4628      	mov	r0, r5
 8007736:	f010 f8b7 	bl	80178a8 <net_pkt_clone>
				if (!mcast_pkt) {
 800773a:	4601      	mov	r1, r0
 800773c:	2800      	cmp	r0, #0
 800773e:	f43f af0e 	beq.w	800755e <net_conn_input+0x1e>
				if (conn->cb(conn, mcast_pkt, ip_hdr, proto_hdr, conn->user_data) ==
 8007742:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007744:	4632      	mov	r2, r6
 8007746:	9005      	str	r0, [sp, #20]
 8007748:	4620      	mov	r0, r4
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	465b      	mov	r3, fp
 800774e:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
 8007752:	47e0      	blx	ip
 8007754:	2802      	cmp	r0, #2
 8007756:	9905      	ldr	r1, [sp, #20]
 8007758:	d102      	bne.n	8007760 <net_conn_input+0x220>
					net_pkt_unref(mcast_pkt);
 800775a:	4608      	mov	r0, r1
 800775c:	f00f fdc1 	bl	80172e2 <net_pkt_unref>
				mcast_pkt_delivered = true;
 8007760:	f8cd a014 	str.w	sl, [sp, #20]
 8007764:	e7c2      	b.n	80076ec <net_conn_input+0x1ac>
		net_icmpv4_send_error(pkt, NET_ICMPV4_DST_UNREACH,
 8007766:	2203      	movs	r2, #3
 8007768:	4628      	mov	r0, r5
 800776a:	4611      	mov	r1, r2
 800776c:	f010 fb62 	bl	8017e34 <net_icmpv4_send_error>
 8007770:	e6f5      	b.n	800755e <net_conn_input+0x1e>
	if (best_match) {
 8007772:	f1b8 0f00 	cmp.w	r8, #0
 8007776:	d112      	bne.n	800779e <net_conn_input+0x25e>
	    !(is_mcast_pkt || is_bcast_pkt)) {
 8007778:	9b02      	ldr	r3, [sp, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	f47f aeef 	bne.w	800755e <net_conn_input+0x1e>
	return pkt->family;
 8007780:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV6) && net_pkt_family(pkt) == AF_INET6) {
 8007784:	0944      	lsrs	r4, r0, #5
 8007786:	2c02      	cmp	r4, #2
 8007788:	d1ed      	bne.n	8007766 <net_conn_input+0x226>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
 800778a:	2204      	movs	r2, #4
 800778c:	2101      	movs	r1, #1
 800778e:	4628      	mov	r0, r5
 8007790:	f010 fddb 	bl	801834a <net_icmpv6_send_error>
 8007794:	e6e3      	b.n	800755e <net_conn_input+0x1e>
	if (best_match) {
 8007796:	f1b8 0f00 	cmp.w	r8, #0
 800779a:	f43f aee0 	beq.w	800755e <net_conn_input+0x1e>
		if (best_match->cb(best_match, pkt, ip_hdr, proto_hdr, best_match->user_data)
 800779e:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80077a2:	4632      	mov	r2, r6
 80077a4:	4629      	mov	r1, r5
 80077a6:	4640      	mov	r0, r8
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	465b      	mov	r3, fp
 80077ac:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 80077b0:	47a0      	blx	r4
 80077b2:	2802      	cmp	r0, #2
 80077b4:	d1a6      	bne.n	8007704 <net_conn_input+0x1c4>
 80077b6:	e6d2      	b.n	800755e <net_conn_input+0x1e>
	uint16_t src_port = 0U, dst_port = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80077be:	e6d8      	b.n	8007572 <net_conn_input+0x32>
	if (IS_ENABLED(CONFIG_NET_IP) && is_mcast_pkt && mcast_pkt_delivered) {
 80077c0:	f1ba 0f00 	cmp.w	sl, #0
 80077c4:	f47f aecb 	bne.w	800755e <net_conn_input+0x1e>
 80077c8:	e7d6      	b.n	8007778 <net_conn_input+0x238>
 80077ca:	bf00      	nop
 80077cc:	24002b38 	.word	0x24002b38

080077d0 <net_conn_init>:
	list->tail = NULL;
 80077d0:	2300      	movs	r3, #0
	list->head = NULL;
 80077d2:	4a0c      	ldr	r2, [pc, #48]	; (8007804 <net_conn_init+0x34>)
	list->tail = NULL;
 80077d4:	490c      	ldr	r1, [pc, #48]	; (8007808 <net_conn_init+0x38>)
 80077d6:	4618      	mov	r0, r3

	k_mutex_unlock(&conn_lock);
}

void net_conn_init(void)
{
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	e9c2 3300 	strd	r3, r3, [r2]
 80077de:	461d      	mov	r5, r3
 80077e0:	4a0a      	ldr	r2, [pc, #40]	; (800780c <net_conn_init+0x3c>)
	int i;

	sys_slist_init(&conn_unused);
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
 80077e2:	461c      	mov	r4, r3
 80077e4:	604b      	str	r3, [r1, #4]
		sys_slist_prepend(&conn_unused, &conns[i].node);
 80077e6:	462e      	mov	r6, r5
 80077e8:	4615      	mov	r5, r2
	parent->next = child;
 80077ea:	6016      	str	r6, [r2, #0]
Z_GENLIST_PREPEND(slist, snode)
 80077ec:	b908      	cbnz	r0, 80077f2 <net_conn_init+0x22>
 80077ee:	4610      	mov	r0, r2
 80077f0:	2301      	movs	r3, #1
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
 80077f2:	3401      	adds	r4, #1
 80077f4:	3244      	adds	r2, #68	; 0x44
 80077f6:	2c08      	cmp	r4, #8
 80077f8:	d1f5      	bne.n	80077e6 <net_conn_init+0x16>
 80077fa:	4a05      	ldr	r2, [pc, #20]	; (8007810 <net_conn_init+0x40>)
 80077fc:	600a      	str	r2, [r1, #0]
 80077fe:	b103      	cbz	r3, 8007802 <net_conn_init+0x32>
 8007800:	6048      	str	r0, [r1, #4]
	}
}
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	24002b38 	.word	0x24002b38
 8007808:	24002b30 	.word	0x24002b30
 800780c:	24002b40 	.word	0x24002b40
 8007810:	24002d1c 	.word	0x24002d1c

08007814 <dhcpv4_set_timeout>:
}

/* Must be invoked with lock held. */
static void dhcpv4_set_timeout(struct net_if_dhcpv4 *dhcpv4,
			       uint32_t timeout)
{
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	4604      	mov	r4, r0
 8007818:	460d      	mov	r5, r1
	return z_impl_k_uptime_ticks();
 800781a:	f014 faf5 	bl	801be08 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800781e:	220a      	movs	r2, #10
 8007820:	2300      	movs	r3, #0
 8007822:	f7f9 f807 	bl	8000834 <__aeabi_uldivmod>
	NET_DBG("sched timeout dhcvp4=%p timeout=%us", dhcpv4, timeout);
	dhcpv4->timer_start = k_uptime_get();
	dhcpv4->request_time = timeout;
 8007826:	6125      	str	r5, [r4, #16]

	/* NB: This interface may not be providing the next timeout
	 * event; also this timeout may replace the current timeout
	 * event.  Delegate scheduling to the timeout manager.
	 */
	k_work_reschedule(&timeout_work, K_NO_WAIT);
 8007828:	2200      	movs	r2, #0
 800782a:	2300      	movs	r3, #0
	dhcpv4->timer_start = k_uptime_get();
 800782c:	e9c4 0102 	strd	r0, r1, [r4, #8]
	k_work_reschedule(&timeout_work, K_NO_WAIT);
 8007830:	4802      	ldr	r0, [pc, #8]	; (800783c <dhcpv4_set_timeout+0x28>)
}
 8007832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&timeout_work, K_NO_WAIT);
 8007836:	f00a bdf1 	b.w	801241c <k_work_reschedule>
 800783a:	bf00      	nop
 800783c:	24001838 	.word	0x24001838

08007840 <dhcpv4_enter_bound>:
	dhcpv4_send_request(iface);
}

/* Must be invoked with lock held */
static void dhcpv4_enter_bound(struct net_if *iface)
{
 8007840:	b570      	push	{r4, r5, r6, lr}
	uint32_t renewal_time;
	uint32_t rebinding_time;

	renewal_time = iface->config.dhcpv4.renewal_time;
 8007842:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
{
 8007844:	4604      	mov	r4, r0
	if (!renewal_time) {
 8007846:	b911      	cbnz	r1, 800784e <dhcpv4_enter_bound+0xe>
		/* The default renewal time rfc2131 4.4.5 */
		renewal_time = iface->config.dhcpv4.lease_time / 2U;
 8007848:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800784a:	0849      	lsrs	r1, r1, #1
		iface->config.dhcpv4.renewal_time = renewal_time;
 800784c:	62c1      	str	r1, [r0, #44]	; 0x2c
	}

	rebinding_time = iface->config.dhcpv4.rebinding_time;
 800784e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if (!rebinding_time) {
 8007850:	b943      	cbnz	r3, 8007864 <dhcpv4_enter_bound+0x24>
		/* The default rebinding time rfc2131 4.4.5 */
		rebinding_time = iface->config.dhcpv4.lease_time * 875U / 1000;
 8007852:	f240 326b 	movw	r2, #875	; 0x36b
 8007856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007858:	4353      	muls	r3, r2
 800785a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800785e:	fbb3 f3f2 	udiv	r3, r3, r2
		iface->config.dhcpv4.rebinding_time = rebinding_time;
 8007862:	6323      	str	r3, [r4, #48]	; 0x30
	iface->config.dhcpv4.state = NET_DHCPV4_BOUND;
	NET_DBG("enter state=%s renewal=%us rebinding=%us",
		net_dhcpv4_state_name(iface->config.dhcpv4.state),
		renewal_time, rebinding_time);

	dhcpv4_set_timeout(&iface->config.dhcpv4,
 8007864:	4299      	cmp	r1, r3
	iface->config.dhcpv4.state = NET_DHCPV4_BOUND;
 8007866:	f04f 0206 	mov.w	r2, #6
	dhcpv4_set_timeout(&iface->config.dhcpv4,
 800786a:	f104 0510 	add.w	r5, r4, #16
 800786e:	bf28      	it	cs
 8007870:	4619      	movcs	r1, r3
	iface->config.dhcpv4.state = NET_DHCPV4_BOUND;
 8007872:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
	dhcpv4_set_timeout(&iface->config.dhcpv4,
 8007876:	4628      	mov	r0, r5
 8007878:	f7ff ffcc 	bl	8007814 <dhcpv4_set_timeout>
			   MIN(renewal_time, rebinding_time));

	net_mgmt_event_notify_with_info(NET_EVENT_IPV4_DHCP_BOUND, iface,
 800787c:	462a      	mov	r2, r5
 800787e:	4621      	mov	r1, r4
 8007880:	2338      	movs	r3, #56	; 0x38
 8007882:	4802      	ldr	r0, [pc, #8]	; (800788c <dhcpv4_enter_bound+0x4c>)
					&iface->config.dhcpv4,
					sizeof(iface->config.dhcpv4));
}
 8007884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_mgmt_event_notify_with_info(NET_EVENT_IPV4_DHCP_BOUND, iface,
 8007888:	f7ff b86e 	b.w	8006968 <net_mgmt_event_notify_with_info>
 800788c:	e0040008 	.word	0xe0040008

08007890 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 8007894:	4801      	ldr	r0, [pc, #4]	; (800789c <k_mutex_lock.constprop.0.isra.0+0xc>)
 8007896:	f00a bac7 	b.w	8011e28 <z_impl_k_mutex_lock>
 800789a:	bf00      	nop
 800789c:	240010ec 	.word	0x240010ec

080078a0 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 80078a0:	4801      	ldr	r0, [pc, #4]	; (80078a8 <k_mutex_unlock.constprop.0.isra.0+0x8>)
 80078a2:	f00a bb3b 	b.w	8011f1c <z_impl_k_mutex_unlock>
 80078a6:	bf00      	nop
 80078a8:	240010ec 	.word	0x240010ec

080078ac <dhcpv4_start_internal>:
 80078ac:	2300      	movs	r3, #0
	__ASSERT_NO_MSG(msg_type >= 1 && msg_type <= sizeof(name));
	return name[msg_type - 1];
}

static void dhcpv4_start_internal(struct net_if *iface, bool first_start)
{
 80078ae:	b570      	push	{r4, r5, r6, lr}
 80078b0:	461a      	mov	r2, r3
 80078b2:	4604      	mov	r4, r0
 80078b4:	460d      	mov	r5, r1
 80078b6:	4601      	mov	r1, r0
 80078b8:	4818      	ldr	r0, [pc, #96]	; (800791c <dhcpv4_start_internal+0x70>)
 80078ba:	f7ff f855 	bl	8006968 <net_mgmt_event_notify_with_info>
	uint32_t entropy;
	uint32_t timeout = 0;

	net_mgmt_event_notify(NET_EVENT_IPV4_DHCP_START, iface);

	k_mutex_lock(&lock, K_FOREVER);
 80078be:	f04f 30ff 	mov.w	r0, #4294967295
 80078c2:	f04f 31ff 	mov.w	r1, #4294967295
 80078c6:	f7ff ffe3 	bl	8007890 <k_mutex_lock.constprop.0.isra.0>

	switch (iface->config.dhcpv4.state) {
 80078ca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80078ce:	b9f3      	cbnz	r3, 800790e <dhcpv4_start_internal+0x62>
	case NET_DHCPV4_DISABLED:
		iface->config.dhcpv4.state = NET_DHCPV4_INIT;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80078d6:	f7fc fc1f 	bl	8004118 <z_impl_sys_rand32_get>
		/* A DHCP client MUST choose xid's in such a way as to
		 * minimize the change of using and xid identical to
		 * one used by another client.  Choose a random xid st
		 * startup and increment it on each new request.
		 */
		iface->config.dhcpv4.xid = entropy;
 80078da:	6260      	str	r0, [r4, #36]	; 0x24

		/* Use default */
		if (first_start) {
 80078dc:	b135      	cbz	r5, 80078ec <dhcpv4_start_internal+0x40>
			/* RFC2131 4.1.1 requires we wait a random period
			 * between 1 and 10 seconds before sending the initial
			 * discover.
			 */
			timeout = entropy % (CONFIG_NET_DHCPV4_INITIAL_DELAY_MAX -
 80078de:	2509      	movs	r5, #9
 80078e0:	fbb0 f5f5 	udiv	r5, r0, r5
 80078e4:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80078e8:	1b45      	subs	r5, r0, r5
 80078ea:	3501      	adds	r5, #1
	return list->head;
 80078ec:	4e0c      	ldr	r6, [pc, #48]	; (8007920 <dhcpv4_start_internal+0x74>)
					DHCPV4_INITIAL_DELAY_MIN) + DHCPV4_INITIAL_DELAY_MIN;
		}

		NET_DBG("wait timeout=%us", timeout);

		if (sys_slist_is_empty(&dhcpv4_ifaces)) {
 80078ee:	6833      	ldr	r3, [r6, #0]
 80078f0:	b913      	cbnz	r3, 80078f8 <dhcpv4_start_internal+0x4c>
			net_mgmt_add_event_callback(&mgmt4_cb);
 80078f2:	480c      	ldr	r0, [pc, #48]	; (8007924 <dhcpv4_start_internal+0x78>)
 80078f4:	f7fe ffde 	bl	80068b4 <net_mgmt_add_event_callback>
	parent->next = child;
 80078f8:	2300      	movs	r3, #0
		}

		sys_slist_append(&dhcpv4_ifaces,
 80078fa:	f104 0010 	add.w	r0, r4, #16
 80078fe:	6123      	str	r3, [r4, #16]
	return list->tail;
 8007900:	6873      	ldr	r3, [r6, #4]
Z_GENLIST_APPEND(slist, snode)
 8007902:	b943      	cbnz	r3, 8007916 <dhcpv4_start_internal+0x6a>
	list->head = node;
 8007904:	e9c6 0000 	strd	r0, r0, [r6]
				 &iface->config.dhcpv4.node);

		dhcpv4_set_timeout(&iface->config.dhcpv4, timeout);
 8007908:	4629      	mov	r1, r5
 800790a:	f7ff ff83 	bl	8007814 <dhcpv4_set_timeout>
	case NET_DHCPV4_BOUND:
		break;
	}

	k_mutex_unlock(&lock);
}
 800790e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_mutex_unlock(&lock);
 8007912:	f7ff bfc5 	b.w	80078a0 <k_mutex_unlock.constprop.0.isra.0>
	parent->next = child;
 8007916:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8007918:	6070      	str	r0, [r6, #4]
}
 800791a:	e7f5      	b.n	8007908 <dhcpv4_start_internal+0x5c>
 800791c:	e0040007 	.word	0xe0040007
 8007920:	24002d60 	.word	0x24002d60
 8007924:	24002d68 	.word	0x24002d68

08007928 <dhcpv4_create_message>:
{
 8007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	b091      	sub	sp, #68	; 0x44
 800792e:	4690      	mov	r8, r2
 8007930:	4606      	mov	r6, r0
 8007932:	460f      	mov	r7, r1
	NET_PKT_DATA_ACCESS_DEFINE(dhcp_access, struct dhcp_msg);
 8007934:	aa05      	add	r2, sp, #20
{
 8007936:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
 800793a:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
	if (src_addr == NULL) {
 800793e:	461d      	mov	r5, r3
	NET_PKT_DATA_ACCESS_DEFINE(dhcp_access, struct dhcp_msg);
 8007940:	9203      	str	r2, [sp, #12]
 8007942:	222c      	movs	r2, #44	; 0x2c
 8007944:	9204      	str	r2, [sp, #16]
	if (src_addr == NULL) {
 8007946:	b913      	cbnz	r3, 800794e <dhcpv4_create_message+0x26>
		addr = net_ipv4_unspecified_address();
 8007948:	f7fe ff46 	bl	80067d8 <net_ipv4_unspecified_address>
 800794c:	4605      	mov	r5, r0
		size += DHCPV4_OLV_MSG_SERVER_ID;
 800794e:	f1ba 0f00 	cmp.w	sl, #0
 8007952:	bf0c      	ite	eq
 8007954:	21f4      	moveq	r1, #244	; 0xf4
 8007956:	21fa      	movne	r1, #250	; 0xfa
	if (requested_ip) {
 8007958:	f1b9 0f00 	cmp.w	r9, #0
 800795c:	d000      	beq.n	8007960 <dhcpv4_create_message+0x38>
		size +=  DHCPV4_OLV_MSG_REQ_IPADDR;
 800795e:	3106      	adds	r1, #6
	if (type == NET_DHCPV4_MSG_TYPE_DISCOVER) {
 8007960:	2f01      	cmp	r7, #1
					IPPROTO_UDP, K_FOREVER);
 8007962:	f04f 32ff 	mov.w	r2, #4294967295
 8007966:	f04f 33ff 	mov.w	r3, #4294967295
	pkt = net_pkt_alloc_with_buffer(iface, size, AF_INET,
 800796a:	4630      	mov	r0, r6
		size +=  DHCPV4_OLV_MSG_REQ_LIST;
 800796c:	bf08      	it	eq
 800796e:	3105      	addeq	r1, #5
	pkt = net_pkt_alloc_with_buffer(iface, size, AF_INET,
 8007970:	e9cd 2300 	strd	r2, r3, [sp]
 8007974:	2311      	movs	r3, #17
 8007976:	2201      	movs	r2, #1
 8007978:	f7ff fbf6 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 800797c:	4604      	mov	r4, r0
 800797e:	2800      	cmp	r0, #0
 8007980:	f000 8089 	beq.w	8007a96 <dhcpv4_create_message+0x16e>
	pkt->ipv4_ttl = ttl;
 8007984:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv4_create(pkt, addr, server_addr) ||
 8007986:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007988:	4629      	mov	r1, r5
 800798a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800798e:	f010 fb31 	bl	8017ff4 <net_ipv4_create>
 8007992:	2800      	cmp	r0, #0
 8007994:	f040 808c 	bne.w	8007ab0 <dhcpv4_create_message+0x188>
	    net_udp_create(pkt, htons(DHCPV4_CLIENT_PORT),
 8007998:	f44f 4286 	mov.w	r2, #17152	; 0x4300
 800799c:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80079a0:	4620      	mov	r0, r4
 80079a2:	f012 f9fd 	bl	8019da0 <net_udp_create>
	if (net_ipv4_create(pkt, addr, server_addr) ||
 80079a6:	4683      	mov	fp, r0
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f040 8081 	bne.w	8007ab0 <dhcpv4_create_message+0x188>
	msg = (struct dhcp_msg *)net_pkt_get_data(pkt, &dhcp_access);
 80079ae:	a903      	add	r1, sp, #12
 80079b0:	4620      	mov	r0, r4
 80079b2:	f00f ffb9 	bl	8017928 <net_pkt_get_data>
	(void)memset(msg, 0, sizeof(struct dhcp_msg));
 80079b6:	222c      	movs	r2, #44	; 0x2c
 80079b8:	4659      	mov	r1, fp
	msg = (struct dhcp_msg *)net_pkt_get_data(pkt, &dhcp_access);
 80079ba:	4605      	mov	r5, r0
	(void)memset(msg, 0, sizeof(struct dhcp_msg));
 80079bc:	f00d f966 	bl	8014c8c <memset>
	msg->op    = DHCPV4_MSG_BOOT_REQUEST;
 80079c0:	2301      	movs	r3, #1
 80079c2:	702b      	strb	r3, [r5, #0]
	msg->htype = HARDWARE_ETHERNET_TYPE;
 80079c4:	706b      	strb	r3, [r5, #1]
	msg->hlen  = net_if_get_link_addr(iface)->len;
 80079c6:	6833      	ldr	r3, [r6, #0]
 80079c8:	7d1b      	ldrb	r3, [r3, #20]
 80079ca:	70ab      	strb	r3, [r5, #2]
	msg->xid   = htonl(iface->config.dhcpv4.xid);
 80079cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
	msg->flags = htons(DHCPV4_MSG_BROADCAST);
 80079ce:	f885 b00b 	strb.w	fp, [r5, #11]
 80079d2:	ba1b      	rev	r3, r3
	msg->xid   = htonl(iface->config.dhcpv4.xid);
 80079d4:	606b      	str	r3, [r5, #4]
	msg->flags = htons(DHCPV4_MSG_BROADCAST);
 80079d6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80079da:	72ab      	strb	r3, [r5, #10]
	if (ciaddr) {
 80079dc:	f1b8 0f00 	cmp.w	r8, #0
 80079e0:	d005      	beq.n	80079ee <dhcpv4_create_message+0xc6>
		memcpy(msg->ciaddr, ciaddr, 4);
 80079e2:	2204      	movs	r2, #4
 80079e4:	4641      	mov	r1, r8
 80079e6:	f105 000c 	add.w	r0, r5, #12
 80079ea:	f00d f944 	bl	8014c76 <memcpy>
	return &iface->if_dev->link_addr;
 80079ee:	6833      	ldr	r3, [r6, #0]
	memcpy(msg->chaddr, net_if_get_link_addr(iface)->addr,
 80079f0:	f105 001c 	add.w	r0, r5, #28
 80079f4:	6919      	ldr	r1, [r3, #16]
 80079f6:	7d1a      	ldrb	r2, [r3, #20]
 80079f8:	f00d f93d 	bl	8014c76 <memcpy>
	if (net_pkt_set_data(pkt, &dhcp_access)) {
 80079fc:	a903      	add	r1, sp, #12
 80079fe:	4620      	mov	r0, r4
 8007a00:	f00f ffb1 	bl	8017966 <net_pkt_set_data>
 8007a04:	4601      	mov	r1, r0
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d152      	bne.n	8007ab0 <dhcpv4_create_message+0x188>
	if (net_pkt_memset(pkt, 0, SIZE_OF_SNAME)) {
 8007a0a:	2240      	movs	r2, #64	; 0x40
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f00f fe0a 	bl	8017626 <net_pkt_memset>
 8007a12:	4601      	mov	r1, r0
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d14b      	bne.n	8007ab0 <dhcpv4_create_message+0x188>
	if (net_pkt_memset(pkt, 0, SIZE_OF_FILE)) {
 8007a18:	2280      	movs	r2, #128	; 0x80
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f00f fe03 	bl	8017626 <net_pkt_memset>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d145      	bne.n	8007ab0 <dhcpv4_create_message+0x188>
	if (net_pkt_write(pkt, (void *)magic_cookie,
 8007a24:	2204      	movs	r2, #4
 8007a26:	4925      	ldr	r1, [pc, #148]	; (8007abc <dhcpv4_create_message+0x194>)
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f00f ff62 	bl	80178f2 <net_pkt_write>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d13e      	bne.n	8007ab0 <dhcpv4_create_message+0x188>
	return dhcpv4_add_option_length_value(pkt, DHCPV4_OPTIONS_MSG_TYPE,
 8007a32:	f10d 030b 	add.w	r3, sp, #11
 8007a36:	2201      	movs	r2, #1
 8007a38:	2135      	movs	r1, #53	; 0x35
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f88d 700b 	strb.w	r7, [sp, #11]
 8007a40:	f010 f809 	bl	8017a56 <dhcpv4_add_option_length_value>
	    !dhcpv4_add_cookie(pkt) ||
 8007a44:	b3a0      	cbz	r0, 8007ab0 <dhcpv4_create_message+0x188>
	if ((server_id &&
 8007a46:	f1ba 0f00 	cmp.w	sl, #0
 8007a4a:	d128      	bne.n	8007a9e <dhcpv4_create_message+0x176>
	     !dhcpv4_add_server_id(pkt, &iface->config.dhcpv4.server_id)) ||
 8007a4c:	f1b9 0f00 	cmp.w	r9, #0
 8007a50:	d007      	beq.n	8007a62 <dhcpv4_create_message+0x13a>
	return dhcpv4_add_option_length_value(pkt, DHCPV4_OPTIONS_REQ_IPADDR,
 8007a52:	f106 0338 	add.w	r3, r6, #56	; 0x38
 8007a56:	2204      	movs	r2, #4
 8007a58:	2132      	movs	r1, #50	; 0x32
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f00f fffb 	bl	8017a56 <dhcpv4_add_option_length_value>
	    (requested_ip &&
 8007a60:	b330      	cbz	r0, 8007ab0 <dhcpv4_create_message+0x188>
	if (type == NET_DHCPV4_MSG_TYPE_DISCOVER && !dhcpv4_add_req_options(pkt)) {
 8007a62:	2f01      	cmp	r7, #1
 8007a64:	d106      	bne.n	8007a74 <dhcpv4_create_message+0x14c>
	return dhcpv4_add_option_length_value(pkt, DHCPV4_OPTIONS_REQ_LIST,
 8007a66:	4b16      	ldr	r3, [pc, #88]	; (8007ac0 <dhcpv4_create_message+0x198>)
 8007a68:	2203      	movs	r2, #3
 8007a6a:	2137      	movs	r1, #55	; 0x37
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f00f fff2 	bl	8017a56 <dhcpv4_add_option_length_value>
	if (type == NET_DHCPV4_MSG_TYPE_DISCOVER && !dhcpv4_add_req_options(pkt)) {
 8007a72:	b1e8      	cbz	r0, 8007ab0 <dhcpv4_create_message+0x188>
	if (net_pkt_write_u8(pkt, DHCPV4_OPTIONS_END)) {
 8007a74:	23ff      	movs	r3, #255	; 0xff
int net_pkt_write(struct net_pkt *pkt, const void *data, size_t length);

/* Write uint8_t data into a net_pkt. */
static inline int net_pkt_write_u8(struct net_pkt *pkt, uint8_t data)
{
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
 8007a76:	2201      	movs	r2, #1
 8007a78:	f10d 010b 	add.w	r1, sp, #11
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f88d 300b 	strb.w	r3, [sp, #11]
 8007a82:	f00f ff36 	bl	80178f2 <net_pkt_write>
 8007a86:	b998      	cbnz	r0, 8007ab0 <dhcpv4_create_message+0x188>
	net_pkt_cursor_init(pkt);
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f00f fcbc 	bl	8017406 <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_UDP);
 8007a8e:	2111      	movs	r1, #17
 8007a90:	4620      	mov	r0, r4
 8007a92:	f010 fac3 	bl	801801c <net_ipv4_finalize>
}
 8007a96:	4620      	mov	r0, r4
 8007a98:	b011      	add	sp, #68	; 0x44
 8007a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return dhcpv4_add_option_length_value(pkt, DHCPV4_OPTIONS_SERVER_ID,
 8007a9e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	2136      	movs	r1, #54	; 0x36
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f00f ffd5 	bl	8017a56 <dhcpv4_add_option_length_value>
	if ((server_id &&
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d1cd      	bne.n	8007a4c <dhcpv4_create_message+0x124>
	net_pkt_unref(pkt);
 8007ab0:	4620      	mov	r0, r4
	return NULL;
 8007ab2:	2400      	movs	r4, #0
	net_pkt_unref(pkt);
 8007ab4:	f00f fc15 	bl	80172e2 <net_pkt_unref>
	return NULL;
 8007ab8:	e7ed      	b.n	8007a96 <dhcpv4_create_message+0x16e>
 8007aba:	bf00      	nop
 8007abc:	0801ebc1 	.word	0x0801ebc1
 8007ac0:	24001048 	.word	0x24001048

08007ac4 <net_dhcpv4_input>:
{
 8007ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac8:	b095      	sub	sp, #84	; 0x54
 8007aca:	460d      	mov	r5, r1
 8007acc:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_DEFINE(dhcp_access, struct dhcp_msg);
 8007ace:	ab09      	add	r3, sp, #36	; 0x24
 8007ad0:	9303      	str	r3, [sp, #12]
 8007ad2:	232c      	movs	r3, #44	; 0x2c
 8007ad4:	9304      	str	r3, [sp, #16]
	if (!conn) {
 8007ad6:	b928      	cbnz	r0, 8007ae4 <net_dhcpv4_input+0x20>
		return NET_DROP;
 8007ad8:	f04f 0802 	mov.w	r8, #2
}
 8007adc:	4640      	mov	r0, r8
 8007ade:	b015      	add	sp, #84	; 0x54
 8007ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!pkt) {
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	d0f7      	beq.n	8007ad8 <net_dhcpv4_input+0x14>
	return pkt->iface;
 8007ae8:	698c      	ldr	r4, [r1, #24]
	if (!iface) {
 8007aea:	2c00      	cmp	r4, #0
 8007aec:	d0f4      	beq.n	8007ad8 <net_dhcpv4_input+0x14>
	if (net_pkt_get_len(pkt) < NET_IPV4UDPH_LEN + sizeof(struct dhcp_msg)) {
 8007aee:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
 8007af0:	2200      	movs	r2, #0
	while (buf) {
 8007af2:	bb0b      	cbnz	r3, 8007b38 <net_dhcpv4_input+0x74>
 8007af4:	2a47      	cmp	r2, #71	; 0x47
 8007af6:	d9ef      	bls.n	8007ad8 <net_dhcpv4_input+0x14>
	net_pkt_cursor_init(pkt);
 8007af8:	4628      	mov	r0, r5
 8007afa:	f00f fc84 	bl	8017406 <net_pkt_cursor_init>
	if (net_pkt_skip(pkt, NET_IPV4UDPH_LEN)) {
 8007afe:	211c      	movs	r1, #28
 8007b00:	4628      	mov	r0, r5
 8007b02:	f00f fce4 	bl	80174ce <net_pkt_skip>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d1e6      	bne.n	8007ad8 <net_dhcpv4_input+0x14>
	msg = (struct dhcp_msg *)net_pkt_get_data(pkt, &dhcp_access);
 8007b0a:	a903      	add	r1, sp, #12
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f00f ff0b 	bl	8017928 <net_pkt_get_data>
	if (!msg) {
 8007b12:	4607      	mov	r7, r0
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d0df      	beq.n	8007ad8 <net_dhcpv4_input+0x14>
	k_mutex_lock(&lock, K_FOREVER);
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8007b20:	f7ff feb6 	bl	8007890 <k_mutex_lock.constprop.0.isra.0>
	if (!(msg->op == DHCPV4_MSG_BOOT_REPLY &&
 8007b24:	f897 8000 	ldrb.w	r8, [r7]
 8007b28:	f1b8 0f02 	cmp.w	r8, #2
 8007b2c:	d008      	beq.n	8007b40 <net_dhcpv4_input+0x7c>
	enum net_verdict verdict = NET_DROP;
 8007b2e:	f04f 0802 	mov.w	r8, #2
	k_mutex_unlock(&lock);
 8007b32:	f7ff feb5 	bl	80078a0 <k_mutex_unlock.constprop.0.isra.0>
	return verdict;
 8007b36:	e7d1      	b.n	8007adc <net_dhcpv4_input+0x18>
		bytes += buf->len;
 8007b38:	8a19      	ldrh	r1, [r3, #16]
		buf = buf->frags;
 8007b3a:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 8007b3c:	440a      	add	r2, r1
		buf = buf->frags;
 8007b3e:	e7d8      	b.n	8007af2 <net_dhcpv4_input+0x2e>
 8007b40:	687b      	ldr	r3, [r7, #4]
	if (!(msg->op == DHCPV4_MSG_BOOT_REPLY &&
 8007b42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b44:	ba1b      	rev	r3, r3
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d1f1      	bne.n	8007b2e <net_dhcpv4_input+0x6a>
 8007b4a:	6823      	ldr	r3, [r4, #0]
	      !memcmp(msg->chaddr, net_if_get_link_addr(iface)->addr,
 8007b4c:	f107 001c 	add.w	r0, r7, #28
 8007b50:	7d1a      	ldrb	r2, [r3, #20]
 8007b52:	6919      	ldr	r1, [r3, #16]
 8007b54:	f00d f866 	bl	8014c24 <memcmp>
	if (!(msg->op == DHCPV4_MSG_BOOT_REPLY &&
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d1e8      	bne.n	8007b2e <net_dhcpv4_input+0x6a>
	if (msg->hlen != net_if_get_link_addr(iface)->len) {
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	78ba      	ldrb	r2, [r7, #2]
 8007b60:	7d1b      	ldrb	r3, [r3, #20]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d1e3      	bne.n	8007b2e <net_dhcpv4_input+0x6a>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
 8007b66:	9904      	ldr	r1, [sp, #16]
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f00f fcb0 	bl	80174ce <net_pkt_skip>
	if (net_pkt_skip(pkt, SIZE_OF_SNAME + SIZE_OF_FILE)) {
 8007b6e:	21c0      	movs	r1, #192	; 0xc0
 8007b70:	4628      	mov	r0, r5
 8007b72:	f00f fcac 	bl	80174ce <net_pkt_skip>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d1d9      	bne.n	8007b2e <net_dhcpv4_input+0x6a>
	if (net_pkt_read(pkt, cookie, sizeof(cookie)) ||
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	a902      	add	r1, sp, #8
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f00f fd5c 	bl	801763c <net_pkt_read>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d1d4      	bne.n	8007b32 <net_dhcpv4_input+0x6e>
	    memcmp(magic_cookie, cookie, sizeof(magic_cookie))) {
 8007b88:	2204      	movs	r2, #4
 8007b8a:	a902      	add	r1, sp, #8
 8007b8c:	48a8      	ldr	r0, [pc, #672]	; (8007e30 <net_dhcpv4_input+0x36c>)
 8007b8e:	f00d f849 	bl	8014c24 <memcmp>
	if (net_pkt_read(pkt, cookie, sizeof(cookie)) ||
 8007b92:	4606      	mov	r6, r0
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d1cc      	bne.n	8007b32 <net_dhcpv4_input+0x6e>
	bool router_present = false;
 8007b98:	4682      	mov	sl, r0
	return net_pkt_read(pkt, data, 1);
 8007b9a:	f04f 0b01 	mov.w	fp, #1
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f10d 0107 	add.w	r1, sp, #7
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f00f fd49 	bl	801763c <net_pkt_read>
	while (!net_pkt_read_u8(pkt, &type)) {
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d1c1      	bne.n	8007b32 <net_dhcpv4_input+0x6e>
		if (type == DHCPV4_OPTIONS_END) {
 8007bae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007bb2:	2bff      	cmp	r3, #255	; 0xff
 8007bb4:	d131      	bne.n	8007c1a <net_dhcpv4_input+0x156>
	if (*msg_type == NET_DHCPV4_MSG_TYPE_OFFER && !router_present) {
 8007bb6:	2e02      	cmp	r6, #2
 8007bb8:	d108      	bne.n	8007bcc <net_dhcpv4_input+0x108>
 8007bba:	f1ba 0f00 	cmp.w	sl, #0
 8007bbe:	d105      	bne.n	8007bcc <net_dhcpv4_input+0x108>
		net_if_ipv4_set_gw(iface, &any);
 8007bc0:	a907      	add	r1, sp, #28
 8007bc2:	4620      	mov	r0, r4
		struct in_addr any = INADDR_ANY_INIT;
 8007bc4:	f8cd a01c 	str.w	sl, [sp, #28]
		net_if_ipv4_set_gw(iface, &any);
 8007bc8:	f00e f9bf 	bl	8015f4a <net_if_ipv4_set_gw>
	memcpy(&iface->config.dhcpv4.response_src_addr, ip_hdr->ipv4->src,
 8007bcc:	f8d9 1000 	ldr.w	r1, [r9]
 8007bd0:	f104 0844 	add.w	r8, r4, #68	; 0x44
 8007bd4:	2204      	movs	r2, #4
 8007bd6:	310c      	adds	r1, #12
 8007bd8:	4640      	mov	r0, r8
 8007bda:	f00d f84c 	bl	8014c76 <memcpy>
	switch (msg_type) {
 8007bde:	2e05      	cmp	r6, #5
 8007be0:	f000 80ea 	beq.w	8007db8 <net_dhcpv4_input+0x2f4>
 8007be4:	2e06      	cmp	r6, #6
 8007be6:	f000 80fd 	beq.w	8007de4 <net_dhcpv4_input+0x320>
 8007bea:	2e02      	cmp	r6, #2
 8007bec:	d10f      	bne.n	8007c0e <net_dhcpv4_input+0x14a>
	switch (iface->config.dhcpv4.state) {
 8007bee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d10b      	bne.n	8007c0e <net_dhcpv4_input+0x14a>
	iface->config.dhcpv4.state = NET_DHCPV4_REQUESTING;
 8007bf6:	2303      	movs	r3, #3
	memcpy(iface->config.dhcpv4.requested_ip.s4_addr,
 8007bf8:	2204      	movs	r2, #4
 8007bfa:	f107 0110 	add.w	r1, r7, #16
 8007bfe:	f104 0038 	add.w	r0, r4, #56	; 0x38
	iface->config.dhcpv4.state = NET_DHCPV4_REQUESTING;
 8007c02:	87a3      	strh	r3, [r4, #60]	; 0x3c
	memcpy(iface->config.dhcpv4.requested_ip.s4_addr,
 8007c04:	f00d f837 	bl	8014c76 <memcpy>
	dhcpv4_send_request(iface);
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f00f ff71 	bl	8017af0 <dhcpv4_send_request>
	net_pkt_unref(pkt);
 8007c0e:	4628      	mov	r0, r5
	verdict = NET_OK;
 8007c10:	f04f 0800 	mov.w	r8, #0
	net_pkt_unref(pkt);
 8007c14:	f00f fb65 	bl	80172e2 <net_pkt_unref>
	verdict = NET_OK;
 8007c18:	e78b      	b.n	8007b32 <net_dhcpv4_input+0x6e>
 8007c1a:	f10d 0106 	add.w	r1, sp, #6
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4628      	mov	r0, r5
 8007c22:	f00f fd0b 	bl	801763c <net_pkt_read>
		if (net_pkt_read_u8(pkt, &length)) {
 8007c26:	4601      	mov	r1, r0
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d182      	bne.n	8007b32 <net_dhcpv4_input+0x6e>
		switch (type) {
 8007c2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
			if (length != 4U) {
 8007c30:	f89d 2006 	ldrb.w	r2, [sp, #6]
		switch (type) {
 8007c34:	2b3b      	cmp	r3, #59	; 0x3b
 8007c36:	d807      	bhi.n	8007c48 <net_dhcpv4_input+0x184>
 8007c38:	2b32      	cmp	r3, #50	; 0x32
 8007c3a:	d80a      	bhi.n	8007c52 <net_dhcpv4_input+0x18e>
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d030      	beq.n	8007ca2 <net_dhcpv4_input+0x1de>
 8007c40:	2b06      	cmp	r3, #6
 8007c42:	d04c      	beq.n	8007cde <net_dhcpv4_input+0x21a>
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d01d      	beq.n	8007c84 <net_dhcpv4_input+0x1c0>
			if (net_pkt_skip(pkt, length)) {
 8007c48:	4611      	mov	r1, r2
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f00f fc3f 	bl	80174ce <net_pkt_skip>
 8007c50:	e09e      	b.n	8007d90 <net_dhcpv4_input+0x2cc>
		switch (type) {
 8007c52:	3b33      	subs	r3, #51	; 0x33
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d8f7      	bhi.n	8007c48 <net_dhcpv4_input+0x184>
 8007c58:	a101      	add	r1, pc, #4	; (adr r1, 8007c60 <net_dhcpv4_input+0x19c>)
 8007c5a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c5e:	bf00      	nop
 8007c60:	08007d2d 	.word	0x08007d2d
 8007c64:	08007c49 	.word	0x08007c49
 8007c68:	08007d99 	.word	0x08007d99
 8007c6c:	08007d81 	.word	0x08007d81
 8007c70:	08007c49 	.word	0x08007c49
 8007c74:	08007c49 	.word	0x08007c49
 8007c78:	08007c49 	.word	0x08007c49
 8007c7c:	08007d4d 	.word	0x08007d4d
 8007c80:	08007d67 	.word	0x08007d67
			if (length != 4U) {
 8007c84:	2a04      	cmp	r2, #4
 8007c86:	f47f af54 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
			if (net_pkt_read(pkt, netmask.s4_addr, length)) {
 8007c8a:	a907      	add	r1, sp, #28
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f00f fcd5 	bl	801763c <net_pkt_read>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	f47f af4d 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
			net_if_ipv4_set_netmask(iface, &netmask);
 8007c98:	a907      	add	r1, sp, #28
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f00e f940 	bl	8015f20 <net_if_ipv4_set_netmask>
			break;
 8007ca0:	e77d      	b.n	8007b9e <net_dhcpv4_input+0xda>
			if (length % 4 != 0U || length < 4) {
 8007ca2:	0793      	lsls	r3, r2, #30
 8007ca4:	f47f af45 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
 8007ca8:	2a03      	cmp	r2, #3
 8007caa:	f67f af42 	bls.w	8007b32 <net_dhcpv4_input+0x6e>
			if (net_pkt_read(pkt, router.s4_addr, 4) ||
 8007cae:	2204      	movs	r2, #4
 8007cb0:	a907      	add	r1, sp, #28
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f00f fcc2 	bl	801763c <net_pkt_read>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	f47f af3a 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
			    net_pkt_skip(pkt, length - 4U)) {
 8007cbe:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	3904      	subs	r1, #4
 8007cc6:	f00f fc02 	bl	80174ce <net_pkt_skip>
			if (net_pkt_read(pkt, router.s4_addr, 4) ||
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	f47f af31 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
			net_if_ipv4_set_gw(iface, &router);
 8007cd0:	a907      	add	r1, sp, #28
 8007cd2:	4620      	mov	r0, r4
			router_present = true;
 8007cd4:	f04f 0a01 	mov.w	sl, #1
			net_if_ipv4_set_gw(iface, &router);
 8007cd8:	f00e f937 	bl	8015f4a <net_if_ipv4_set_gw>
			break;
 8007cdc:	e75f      	b.n	8007b9e <net_dhcpv4_input+0xda>
			const struct sockaddr *dns_servers[] = {
 8007cde:	a805      	add	r0, sp, #20
 8007ce0:	e9cd 0107 	strd	r0, r1, [sp, #28]
			if (length % 4 != 0U) {
 8007ce4:	f012 0103 	ands.w	r1, r2, #3
 8007ce8:	f47f af23 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
			(void)memset(&dns, 0, sizeof(dns));
 8007cec:	2208      	movs	r2, #8
 8007cee:	f00c ffcd 	bl	8014c8c <memset>
			if (net_pkt_read(pkt, dns.sin_addr.s4_addr, 4) ||
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	a906      	add	r1, sp, #24
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f00f fca0 	bl	801763c <net_pkt_read>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	f47f af18 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
			    net_pkt_skip(pkt, length - 4U)) {
 8007d02:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8007d06:	4628      	mov	r0, r5
 8007d08:	3904      	subs	r1, #4
 8007d0a:	f00f fbe0 	bl	80174ce <net_pkt_skip>
			if (net_pkt_read(pkt, dns.sin_addr.s4_addr, 4) ||
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f47f af0f 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
			ctx = dns_resolve_get_default();
 8007d14:	f006 ffd0 	bl	800ecb8 <dns_resolve_get_default>
			status = dns_resolve_reconfigure(ctx, NULL, dns_servers);
 8007d18:	aa07      	add	r2, sp, #28
 8007d1a:	2100      	movs	r1, #0
			dns.sin_family = AF_INET;
 8007d1c:	f8ad b014 	strh.w	fp, [sp, #20]
			status = dns_resolve_reconfigure(ctx, NULL, dns_servers);
 8007d20:	f012 fb7a 	bl	801a418 <dns_resolve_reconfigure>
			if (status < 0) {
 8007d24:	2800      	cmp	r0, #0
 8007d26:	f6bf af3a 	bge.w	8007b9e <net_dhcpv4_input+0xda>
 8007d2a:	e702      	b.n	8007b32 <net_dhcpv4_input+0x6e>
			if (length != 4U) {
 8007d2c:	2a04      	cmp	r2, #4
 8007d2e:	f47f af00 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
			if (net_pkt_read_be32(
 8007d32:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8007d36:	4628      	mov	r0, r5
 8007d38:	f00f fc89 	bl	801764e <net_pkt_read_be32>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f47f aef8 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
				    pkt, &iface->config.dhcpv4.lease_time) ||
 8007d42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
				    &iface->config.dhcpv4.rebinding_time) ||
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f47f af2a 	bne.w	8007b9e <net_dhcpv4_input+0xda>
 8007d4a:	e6f2      	b.n	8007b32 <net_dhcpv4_input+0x6e>
			if (length != 4U) {
 8007d4c:	2a04      	cmp	r2, #4
 8007d4e:	f47f aef0 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
			if (net_pkt_read_be32(
 8007d52:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8007d56:	4628      	mov	r0, r5
 8007d58:	f00f fc79 	bl	801764e <net_pkt_read_be32>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	f47f aee8 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
				    pkt, &iface->config.dhcpv4.renewal_time) ||
 8007d62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d64:	e7ee      	b.n	8007d44 <net_dhcpv4_input+0x280>
			if (length != 4U) {
 8007d66:	2a04      	cmp	r2, #4
 8007d68:	f47f aee3 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
			if (net_pkt_read_be32(
 8007d6c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8007d70:	4628      	mov	r0, r5
 8007d72:	f00f fc6c 	bl	801764e <net_pkt_read_be32>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f47f aedb 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
				    &iface->config.dhcpv4.rebinding_time) ||
 8007d7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007d7e:	e7e1      	b.n	8007d44 <net_dhcpv4_input+0x280>
			if (length != 4U) {
 8007d80:	2a04      	cmp	r2, #4
 8007d82:	f47f aed6 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
			if (net_pkt_read(
 8007d86:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f00f fc56 	bl	801763c <net_pkt_read>
			if (net_pkt_skip(pkt, length)) {
 8007d90:	2800      	cmp	r0, #0
 8007d92:	f43f af04 	beq.w	8007b9e <net_dhcpv4_input+0xda>
 8007d96:	e6cc      	b.n	8007b32 <net_dhcpv4_input+0x6e>
			if (length != 1U) {
 8007d98:	2a01      	cmp	r2, #1
 8007d9a:	f47f aeca 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
				uint8_t val = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	a907      	add	r1, sp, #28
 8007da2:	4628      	mov	r0, r5
 8007da4:	f88d 301c 	strb.w	r3, [sp, #28]
 8007da8:	f00f fc48 	bl	801763c <net_pkt_read>
				if (net_pkt_read_u8(pkt, &val)) {
 8007dac:	2800      	cmp	r0, #0
 8007dae:	f47f aec0 	bne.w	8007b32 <net_dhcpv4_input+0x6e>
				*msg_type = val;
 8007db2:	f89d 601c 	ldrb.w	r6, [sp, #28]
			break;
 8007db6:	e6f2      	b.n	8007b9e <net_dhcpv4_input+0xda>
	switch (iface->config.dhcpv4.state) {
 8007db8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d007      	beq.n	8007dd0 <net_dhcpv4_input+0x30c>
 8007dc0:	3b04      	subs	r3, #4
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	f63f af23 	bhi.w	8007c0e <net_dhcpv4_input+0x14a>
		dhcpv4_enter_bound(iface);
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f7ff fd39 	bl	8007840 <dhcpv4_enter_bound>
		break;
 8007dce:	e71e      	b.n	8007c0e <net_dhcpv4_input+0x14a>
		if (!net_if_ipv4_addr_add(iface,
 8007dd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f7fe f97d 	bl	80060d8 <net_if_ipv4_addr_add>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d1f2      	bne.n	8007dc8 <net_dhcpv4_input+0x304>
 8007de2:	e714      	b.n	8007c0e <net_dhcpv4_input+0x14a>
	switch (iface->config.dhcpv4.state) {
 8007de4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d90f      	bls.n	8007e0c <net_dhcpv4_input+0x348>
 8007dec:	3b04      	subs	r3, #4
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	f63f af0d 	bhi.w	8007c0e <net_dhcpv4_input+0x14a>
		if (!net_if_ipv4_addr_rm(iface,
 8007df4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f7fe f9bd 	bl	8006178 <net_if_ipv4_addr_rm>
	iface->config.dhcpv4.lease_time = 0U;
 8007dfe:	2300      	movs	r3, #0
	iface->config.dhcpv4.renewal_time = 0U;
 8007e00:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
	iface->config.dhcpv4.server_id.s_addr = INADDR_ANY;
 8007e04:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
	iface->config.dhcpv4.requested_ip.s_addr = INADDR_ANY;
 8007e08:	63a3      	str	r3, [r4, #56]	; 0x38
 8007e0a:	e00d      	b.n	8007e28 <net_dhcpv4_input+0x364>
		if (memcmp(&iface->config.dhcpv4.request_server_addr,
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	4641      	mov	r1, r8
 8007e10:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8007e14:	f00c ff06 	bl	8014c24 <memcmp>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	f47f aef8 	bne.w	8007c0e <net_dhcpv4_input+0x14a>
	iface->config.dhcpv4.requested_ip.s_addr = INADDR_ANY;
 8007e1e:	63a0      	str	r0, [r4, #56]	; 0x38
	iface->config.dhcpv4.renewal_time = 0U;
 8007e20:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
	iface->config.dhcpv4.server_id.s_addr = INADDR_ANY;
 8007e24:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
	iface->config.dhcpv4.state = NET_DHCPV4_SELECTING;
 8007e28:	2302      	movs	r3, #2
 8007e2a:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8007e2c:	e6ef      	b.n	8007c0e <net_dhcpv4_input+0x14a>
 8007e2e:	bf00      	nop
 8007e30:	0801ebc1 	.word	0x0801ebc1

08007e34 <dhcpv4_iface_event_handler>:
{
 8007e34:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&lock, K_FOREVER);
 8007e36:	f04f 30ff 	mov.w	r0, #4294967295
{
 8007e3a:	460d      	mov	r5, r1
	k_mutex_lock(&lock, K_FOREVER);
 8007e3c:	f04f 31ff 	mov.w	r1, #4294967295
{
 8007e40:	4614      	mov	r4, r2
	k_mutex_lock(&lock, K_FOREVER);
 8007e42:	f7ff fd25 	bl	8007890 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 8007e46:	4b17      	ldr	r3, [pc, #92]	; (8007ea4 <dhcpv4_iface_event_handler+0x70>)
		if (node == &iface->config.dhcpv4.node) {
 8007e48:	f104 0210 	add.w	r2, r4, #16
 8007e4c:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_NODE(&dhcpv4_ifaces, node) {
 8007e4e:	b91b      	cbnz	r3, 8007e58 <dhcpv4_iface_event_handler+0x24>
}
 8007e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&lock);
 8007e54:	f7ff bd24 	b.w	80078a0 <k_mutex_unlock.constprop.0.isra.0>
		if (node == &iface->config.dhcpv4.node) {
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d019      	beq.n	8007e90 <dhcpv4_iface_event_handler+0x5c>
	return node->next;
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	e7f6      	b.n	8007e4e <dhcpv4_iface_event_handler+0x1a>
	} else if (mgmt_event == NET_EVENT_IF_UP) {
 8007e60:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <dhcpv4_iface_event_handler+0x74>)
 8007e62:	429d      	cmp	r5, r3
 8007e64:	d1f4      	bne.n	8007e50 <dhcpv4_iface_event_handler+0x1c>
	return z_impl_k_uptime_ticks();
 8007e66:	f013 ffcf 	bl	801be08 <z_impl_k_uptime_ticks>
 8007e6a:	220a      	movs	r2, #10
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f7f8 fce1 	bl	8000834 <__aeabi_uldivmod>
	dhcpv4->timer_start = k_uptime_get() - 1;
 8007e72:	3801      	subs	r0, #1
	dhcpv4->request_time = 0U;
 8007e74:	f04f 0300 	mov.w	r3, #0
	k_work_reschedule(&timeout_work, K_NO_WAIT);
 8007e78:	f04f 0200 	mov.w	r2, #0
	dhcpv4->timer_start = k_uptime_get() - 1;
 8007e7c:	f161 0100 	sbc.w	r1, r1, #0
	dhcpv4->request_time = 0U;
 8007e80:	6223      	str	r3, [r4, #32]
	k_work_reschedule(&timeout_work, K_NO_WAIT);
 8007e82:	2300      	movs	r3, #0
	dhcpv4->timer_start = k_uptime_get() - 1;
 8007e84:	e9c4 0106 	strd	r0, r1, [r4, #24]
	k_work_reschedule(&timeout_work, K_NO_WAIT);
 8007e88:	4808      	ldr	r0, [pc, #32]	; (8007eac <dhcpv4_iface_event_handler+0x78>)
 8007e8a:	f00a fac7 	bl	801241c <k_work_reschedule>
}
 8007e8e:	e7df      	b.n	8007e50 <dhcpv4_iface_event_handler+0x1c>
	if (mgmt_event == NET_EVENT_IF_DOWN) {
 8007e90:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <dhcpv4_iface_event_handler+0x7c>)
 8007e92:	429d      	cmp	r5, r3
 8007e94:	d1e4      	bne.n	8007e60 <dhcpv4_iface_event_handler+0x2c>
		if (iface->config.dhcpv4.state == NET_DHCPV4_BOUND) {
 8007e96:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007e9a:	2b06      	cmp	r3, #6
 8007e9c:	d1d8      	bne.n	8007e50 <dhcpv4_iface_event_handler+0x1c>
			iface->config.dhcpv4.state = NET_DHCPV4_RENEWING;
 8007e9e:	2304      	movs	r3, #4
 8007ea0:	87a3      	strh	r3, [r4, #60]	; 0x3c
			NET_DBG("enter state=%s", net_dhcpv4_state_name(
 8007ea2:	e7d5      	b.n	8007e50 <dhcpv4_iface_event_handler+0x1c>
 8007ea4:	24002d60 	.word	0x24002d60
 8007ea8:	d0010002 	.word	0xd0010002
 8007eac:	24001838 	.word	0x24001838
 8007eb0:	d0010001 	.word	0xd0010001

08007eb4 <dhcpv4_timeout>:
{
 8007eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb8:	f013 ffa6 	bl	801be08 <z_impl_k_uptime_ticks>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	220a      	movs	r2, #10
 8007ec0:	f7f8 fcb8 	bl	8000834 <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	4689      	mov	r9, r1
	k_mutex_lock(&lock, K_FOREVER);
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8007ed0:	f7ff fcde 	bl	8007890 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 8007ed4:	4b72      	ldr	r3, [pc, #456]	; (80080a0 <dhcpv4_timeout+0x1ec>)
 8007ed6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&dhcpv4_ifaces, current, next, node) {
 8007ed8:	2c00      	cmp	r4, #0
 8007eda:	f000 8099 	beq.w	8008010 <dhcpv4_timeout+0x15c>
	return node->next;
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	f04f 33ff 	mov.w	r3, #4294967295
	iface->config.dhcpv4.lease_time = 0U;
 8007ee6:	f04f 0800 	mov.w	r8, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&dhcpv4_ifaces, current, next, node) {
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	b99c      	cbnz	r4, 8007f16 <dhcpv4_timeout+0x62>
	k_mutex_unlock(&lock);
 8007eee:	f7ff fcd7 	bl	80078a0 <k_mutex_unlock.constprop.0.isra.0>
	if (timeout_update != UINT32_MAX) {
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	f000 80d0 	beq.w	800809a <dhcpv4_timeout+0x1e6>
				  K_SECONDS(timeout_update));
 8007efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007efe:	9a01      	ldr	r2, [sp, #4]
		k_work_reschedule(&timeout_work,
 8007f00:	4868      	ldr	r0, [pc, #416]	; (80080a4 <dhcpv4_timeout+0x1f0>)
				  K_SECONDS(timeout_update));
 8007f02:	435a      	muls	r2, r3
 8007f04:	4613      	mov	r3, r2
			return t * ((uint64_t)to_hz / from_hz);
 8007f06:	220a      	movs	r2, #10
		k_work_reschedule(&timeout_work,
 8007f08:	fba3 2302 	umull	r2, r3, r3, r2
}
 8007f0c:	b003      	add	sp, #12
 8007f0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_work_reschedule(&timeout_work,
 8007f12:	f00a ba83 	b.w	801241c <k_work_reschedule>
	int64_t deadline = start + MSEC_PER_SEC * time;
 8007f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f1a:	6920      	ldr	r0, [r4, #16]
 8007f1c:	4358      	muls	r0, r3
 8007f1e:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8007f22:	18c0      	adds	r0, r0, r3
 8007f24:	f141 0100 	adc.w	r1, r1, #0
	if (deadline > now) {
 8007f28:	4287      	cmp	r7, r0
 8007f2a:	eb79 0301 	sbcs.w	r3, r9, r1
 8007f2e:	da10      	bge.n	8007f52 <dhcpv4_timeout+0x9e>
		ret = (uint32_t)DIV_ROUND_UP(deadline - now, MSEC_PER_SEC);
 8007f30:	1bc0      	subs	r0, r0, r7
 8007f32:	f240 33e7 	movw	r3, #999	; 0x3e7
 8007f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f3a:	eb61 0109 	sbc.w	r1, r1, r9
 8007f3e:	18c0      	adds	r0, r0, r3
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	f141 0100 	adc.w	r1, r1, #0
 8007f48:	f7f8 fc24 	bl	8000794 <__aeabi_ldivmod>
	if (timeleft != 0U) {
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d174      	bne.n	800803c <dhcpv4_timeout+0x188>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8007f52:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8007f56:	f3bf 8f5b 	dmb	ish
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f3bf 8f5b 	dmb	ish
	return net_if_flag_is_set(iface, NET_IF_UP) &&
 8007f60:	07da      	lsls	r2, r3, #31
 8007f62:	d402      	bmi.n	8007f6a <dhcpv4_timeout+0xb6>
	switch (iface->config.dhcpv4.state) {
 8007f64:	f04f 35ff 	mov.w	r5, #4294967295
 8007f68:	e068      	b.n	800803c <dhcpv4_timeout+0x188>
 8007f6a:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8007f6e:	f3bf 8f5b 	dmb	ish
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f3bf 8f5b 	dmb	ish
	if (!net_if_is_up(iface)) {
 8007f78:	05db      	lsls	r3, r3, #23
 8007f7a:	d5f3      	bpl.n	8007f64 <dhcpv4_timeout+0xb0>
	switch (iface->config.dhcpv4.state) {
 8007f7c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
		struct net_if *iface = CONTAINER_OF(
 8007f80:	f1a4 0b10 	sub.w	fp, r4, #16
	switch (iface->config.dhcpv4.state) {
 8007f84:	3b01      	subs	r3, #1
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	d8ec      	bhi.n	8007f64 <dhcpv4_timeout+0xb0>
 8007f8a:	e8df f003 	tbb	[pc, r3]
 8007f8e:	0f07      	.short	0x0f07
 8007f90:	14373703 	.word	0x14373703
		if (iface->config.dhcpv4.attempts >=
 8007f94:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d92b      	bls.n	8007ff4 <dhcpv4_timeout+0x140>
	iface->config.dhcpv4.state = NET_DHCPV4_SELECTING;
 8007f9c:	2302      	movs	r3, #2
	iface->config.dhcpv4.requested_ip.s_addr = INADDR_ANY;
 8007f9e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
	iface->config.dhcpv4.renewal_time = 0U;
 8007fa2:	e9c4 8806 	strd	r8, r8, [r4, #24]
	iface->config.dhcpv4.server_id.s_addr = INADDR_ANY;
 8007fa6:	e9c4 8808 	strd	r8, r8, [r4, #32]
	iface->config.dhcpv4.state = NET_DHCPV4_SELECTING;
 8007faa:	85a3      	strh	r3, [r4, #44]	; 0x2c
			return dhcpv4_send_discover(iface);
 8007fac:	4658      	mov	r0, fp
 8007fae:	f00f fd74 	bl	8017a9a <dhcpv4_send_discover>
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	e042      	b.n	800803c <dhcpv4_timeout+0x188>
	int64_t deadline = start + MSEC_PER_SEC * time;
 8007fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fba:	69e0      	ldr	r0, [r4, #28]
	uint32_t rem = dhcpv4_get_timeleft(iface->config.dhcpv4.timer_start,
 8007fbc:	e9d4 6a02 	ldrd	r6, sl, [r4, #8]
	int64_t deadline = start + MSEC_PER_SEC * time;
 8007fc0:	4358      	muls	r0, r3
 8007fc2:	1980      	adds	r0, r0, r6
 8007fc4:	f14a 0100 	adc.w	r1, sl, #0
	if (deadline > now) {
 8007fc8:	4287      	cmp	r7, r0
 8007fca:	eb79 0301 	sbcs.w	r3, r9, r1
 8007fce:	da0f      	bge.n	8007ff0 <dhcpv4_timeout+0x13c>
		ret = (uint32_t)DIV_ROUND_UP(deadline - now, MSEC_PER_SEC);
 8007fd0:	1bc0      	subs	r0, r0, r7
 8007fd2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8007fd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fda:	eb61 0109 	sbc.w	r1, r1, r9
 8007fde:	18c0      	adds	r0, r0, r3
 8007fe0:	f04f 0300 	mov.w	r3, #0
 8007fe4:	f141 0100 	adc.w	r1, r1, #0
 8007fe8:	f7f8 fbd4 	bl	8000794 <__aeabi_ldivmod>
	if (rem == 0U) {
 8007fec:	4605      	mov	r5, r0
 8007fee:	bb88      	cbnz	r0, 8008054 <dhcpv4_timeout+0x1a0>
		iface->config.dhcpv4.state = NET_DHCPV4_RENEWING;
 8007ff0:	2304      	movs	r3, #4
		iface->config.dhcpv4.state = NET_DHCPV4_REBINDING;
 8007ff2:	85a3      	strh	r3, [r4, #44]	; 0x2c
			return dhcpv4_send_request(iface);
 8007ff4:	4658      	mov	r0, fp
 8007ff6:	f00f fd7b 	bl	8017af0 <dhcpv4_send_request>
 8007ffa:	e7da      	b.n	8007fb2 <dhcpv4_timeout+0xfe>
		if (iface->config.dhcpv4.attempts >=
 8007ffc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8008000:	2b02      	cmp	r3, #2
 8008002:	d9f7      	bls.n	8007ff4 <dhcpv4_timeout+0x140>
			if (!net_if_ipv4_addr_rm(iface,
 8008004:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8008008:	4658      	mov	r0, fp
 800800a:	f7fe f8b5 	bl	8006178 <net_if_ipv4_addr_rm>
 800800e:	e7c5      	b.n	8007f9c <dhcpv4_timeout+0xe8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&dhcpv4_ifaces, current, next, node) {
 8008010:	9400      	str	r4, [sp, #0]
 8008012:	e766      	b.n	8007ee2 <dhcpv4_timeout+0x2e>
 8008014:	9b00      	ldr	r3, [sp, #0]
 8008016:	e01a      	b.n	800804e <dhcpv4_timeout+0x19a>
			timeleft = MIN(timeleft,
 8008018:	4285      	cmp	r5, r0
 800801a:	d30f      	bcc.n	800803c <dhcpv4_timeout+0x188>
		ret = (uint32_t)DIV_ROUND_UP(deadline - now, MSEC_PER_SEC);
 800801c:	1bf6      	subs	r6, r6, r7
 800801e:	f240 30e7 	movw	r0, #999	; 0x3e7
 8008022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008026:	f04f 0300 	mov.w	r3, #0
 800802a:	eb6a 0109 	sbc.w	r1, sl, r9
 800802e:	1830      	adds	r0, r6, r0
 8008030:	f141 0100 	adc.w	r1, r1, #0
 8008034:	f7f8 fbae 	bl	8000794 <__aeabi_ldivmod>
	if (rem == 0U) {
 8008038:	4605      	mov	r5, r0
 800803a:	b360      	cbz	r0, 8008096 <dhcpv4_timeout+0x1e2>
		if (next_timeout < timeout_update) {
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	42ab      	cmp	r3, r5
 8008040:	bf28      	it	cs
 8008042:	462b      	movcs	r3, r5
 8008044:	9301      	str	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&dhcpv4_ifaces, current, next, node) {
 8008046:	9b00      	ldr	r3, [sp, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0e3      	beq.n	8008014 <dhcpv4_timeout+0x160>
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	9c00      	ldr	r4, [sp, #0]
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	e74b      	b.n	8007eec <dhcpv4_timeout+0x38>
	int64_t deadline = start + MSEC_PER_SEC * time;
 8008054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008058:	6a20      	ldr	r0, [r4, #32]
 800805a:	4358      	muls	r0, r3
 800805c:	1986      	adds	r6, r0, r6
 800805e:	f14a 0a00 	adc.w	sl, sl, #0
	if (deadline > now) {
 8008062:	42b7      	cmp	r7, r6
 8008064:	eb79 030a 	sbcs.w	r3, r9, sl
 8008068:	da0f      	bge.n	800808a <dhcpv4_timeout+0x1d6>
		ret = (uint32_t)DIV_ROUND_UP(deadline - now, MSEC_PER_SEC);
 800806a:	1bf0      	subs	r0, r6, r7
 800806c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8008070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008074:	eb6a 0109 	sbc.w	r1, sl, r9
 8008078:	18c0      	adds	r0, r0, r3
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	f141 0100 	adc.w	r1, r1, #0
 8008082:	f7f8 fb87 	bl	8000794 <__aeabi_ldivmod>
	if (rem == 0U) {
 8008086:	2800      	cmp	r0, #0
 8008088:	d1c6      	bne.n	8008018 <dhcpv4_timeout+0x164>
		iface->config.dhcpv4.state = NET_DHCPV4_REBINDING;
 800808a:	2305      	movs	r3, #5
	if (deadline > now) {
 800808c:	42b7      	cmp	r7, r6
		iface->config.dhcpv4.state = NET_DHCPV4_REBINDING;
 800808e:	85a3      	strh	r3, [r4, #44]	; 0x2c
	if (deadline > now) {
 8008090:	eb79 030a 	sbcs.w	r3, r9, sl
 8008094:	dbc2      	blt.n	800801c <dhcpv4_timeout+0x168>
		iface->config.dhcpv4.state = NET_DHCPV4_REBINDING;
 8008096:	2305      	movs	r3, #5
 8008098:	e7ab      	b.n	8007ff2 <dhcpv4_timeout+0x13e>
}
 800809a:	b003      	add	sp, #12
 800809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a0:	24002d60 	.word	0x24002d60
 80080a4:	24001838 	.word	0x24001838

080080a8 <net_dhcpv4_state_name>:
}
 80080a8:	4b01      	ldr	r3, [pc, #4]	; (80080b0 <net_dhcpv4_state_name+0x8>)
 80080aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80080ae:	4770      	bx	lr
 80080b0:	0801d03c 	.word	0x0801d03c

080080b4 <net_dhcpv4_init>:
	net_dhcpv4_stop(iface);
	dhcpv4_start_internal(iface, false);
}

int net_dhcpv4_init(void)
{
 80080b4:	b510      	push	{r4, lr}
 80080b6:	b08c      	sub	sp, #48	; 0x30
	struct sockaddr local_addr;
	int ret;

	NET_DBG("");

	net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
 80080b8:	f7fe fb8e 	bl	80067d8 <net_ipv4_unspecified_address>
 80080bc:	6803      	ldr	r3, [r0, #0]
 80080be:	9307      	str	r3, [sp, #28]

	/* Register UDP input callback on
	 * DHCPV4_SERVER_PORT(67) and DHCPV4_CLIENT_PORT(68) for
	 * all dhcpv4 related incoming packets.
	 */
	ret = net_udp_register(AF_INET, NULL, &local_addr,
 80080c0:	2400      	movs	r4, #0
 80080c2:	4b0e      	ldr	r3, [pc, #56]	; (80080fc <net_dhcpv4_init+0x48>)
	local_addr.sa_family = AF_INET;
 80080c4:	2001      	movs	r0, #1
	ret = net_udp_register(AF_INET, NULL, &local_addr,
 80080c6:	aa06      	add	r2, sp, #24
 80080c8:	4621      	mov	r1, r4
	local_addr.sa_family = AF_INET;
 80080ca:	f8ad 0018 	strh.w	r0, [sp, #24]
	ret = net_udp_register(AF_INET, NULL, &local_addr,
 80080ce:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80080d2:	2344      	movs	r3, #68	; 0x44
 80080d4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	2343      	movs	r3, #67	; 0x43
 80080dc:	f011 feaf 	bl	8019e3e <net_udp_register>
			       DHCPV4_SERVER_PORT,
			       DHCPV4_CLIENT_PORT,
			       NULL, net_dhcpv4_input, NULL, NULL);
	if (ret < 0) {
 80080e0:	2800      	cmp	r0, #0
 80080e2:	db09      	blt.n	80080f8 <net_dhcpv4_init+0x44>
		NET_DBG("UDP callback registration failed");
		return ret;
	}

	k_work_init_delayable(&timeout_work, dhcpv4_timeout);
 80080e4:	4806      	ldr	r0, [pc, #24]	; (8008100 <net_dhcpv4_init+0x4c>)
 80080e6:	4907      	ldr	r1, [pc, #28]	; (8008104 <net_dhcpv4_init+0x50>)
 80080e8:	f013 fd0c 	bl	801bb04 <k_work_init_delayable>
	cb->handler = handler;
 80080ec:	4b06      	ldr	r3, [pc, #24]	; (8008108 <net_dhcpv4_init+0x54>)
 80080ee:	4a07      	ldr	r2, [pc, #28]	; (800810c <net_dhcpv4_init+0x58>)
#if defined(CONFIG_NET_DHCPV4_OPTION_CALLBACKS)
	k_mutex_lock(&lock, K_FOREVER);
	sys_slist_init(&option_callbacks);
	k_mutex_unlock(&lock);
#endif
	return 0;
 80080f0:	4620      	mov	r0, r4
 80080f2:	605a      	str	r2, [r3, #4]
	cb->event_mask = mgmt_event_mask;
 80080f4:	4a06      	ldr	r2, [pc, #24]	; (8008110 <net_dhcpv4_init+0x5c>)
 80080f6:	609a      	str	r2, [r3, #8]
}
 80080f8:	b00c      	add	sp, #48	; 0x30
 80080fa:	bd10      	pop	{r4, pc}
 80080fc:	08007ac5 	.word	0x08007ac5
 8008100:	24001838 	.word	0x24001838
 8008104:	08007eb5 	.word	0x08007eb5
 8008108:	24002d68 	.word	0x24002d68
 800810c:	08007e35 	.word	0x08007e35
 8008110:	d0010003 	.word	0xd0010003

08008114 <net_icmpv4_register_handler>:
	return list->head;
 8008114:	4b03      	ldr	r3, [pc, #12]	; (8008124 <net_icmpv4_register_handler+0x10>)
 8008116:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 8008118:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
 800811a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 800811c:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 800811e:	b902      	cbnz	r2, 8008122 <net_icmpv4_register_handler+0xe>
	list->tail = node;
 8008120:	6058      	str	r0, [r3, #4]
}

void net_icmpv4_register_handler(struct net_icmpv4_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
 8008122:	4770      	bx	lr
 8008124:	24002d74 	.word	0x24002d74

08008128 <net_icmpv4_unregister_handler>:
	return list->head;
 8008128:	4b0c      	ldr	r3, [pc, #48]	; (800815c <net_icmpv4_unregister_handler+0x34>)
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800812a:	2100      	movs	r1, #0
	return list->head;
 800812c:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800812e:	b902      	cbnz	r2, 8008132 <net_icmpv4_unregister_handler+0xa>

void net_icmpv4_unregister_handler(struct net_icmpv4_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
}
 8008130:	4770      	bx	lr
 8008132:	4290      	cmp	r0, r2
 8008134:	d10f      	bne.n	8008156 <net_icmpv4_unregister_handler+0x2e>
	return node->next;
 8008136:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 8008138:	b939      	cbnz	r1, 800814a <net_icmpv4_unregister_handler+0x22>
 800813a:	6859      	ldr	r1, [r3, #4]
	list->head = node;
 800813c:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 800813e:	4288      	cmp	r0, r1
 8008140:	d100      	bne.n	8008144 <net_icmpv4_unregister_handler+0x1c>
	list->tail = node;
 8008142:	605a      	str	r2, [r3, #4]
	parent->next = child;
 8008144:	2300      	movs	r3, #0
 8008146:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 8008148:	4770      	bx	lr
	parent->next = child;
 800814a:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	4290      	cmp	r0, r2
	list->tail = node;
 8008150:	bf08      	it	eq
 8008152:	6059      	streq	r1, [r3, #4]
}
 8008154:	e7f6      	b.n	8008144 <net_icmpv4_unregister_handler+0x1c>
	return node->next;
 8008156:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008158:	6812      	ldr	r2, [r2, #0]
 800815a:	e7e8      	b.n	800812e <net_icmpv4_unregister_handler+0x6>
 800815c:	24002d74 	.word	0x24002d74

08008160 <net_icmpv4_input>:

enum net_verdict net_icmpv4_input(struct net_pkt *pkt,
				  struct net_ipv4_hdr *ip_hdr)
{
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8008160:	2200      	movs	r2, #0
 8008162:	2304      	movs	r3, #4
{
 8008164:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008166:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv4_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 8008168:	4669      	mov	r1, sp
{
 800816a:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 800816c:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 8008170:	f00f fbda 	bl	8017928 <net_pkt_get_data>
	if (!icmp_hdr) {
 8008174:	4605      	mov	r5, r0
 8008176:	b910      	cbnz	r0, 800817e <net_icmpv4_input+0x1e>
		NET_DBG("DROP: NULL ICMPv4 header");
		return NET_DROP;
 8008178:	2002      	movs	r0, #2

drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
 800817a:	b002      	add	sp, #8
 800817c:	bd70      	pop	{r4, r5, r6, pc}
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
 800817e:	69a0      	ldr	r0, [r4, #24]
 8008180:	f00d ff5d 	bl	801603e <net_if_need_calc_rx_checksum>
 8008184:	b9e8      	cbnz	r0, 80081c2 <net_icmpv4_input+0x62>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
 8008186:	f106 0110 	add.w	r1, r6, #16
 800818a:	69a0      	ldr	r0, [r4, #24]
 800818c:	f00f fd13 	bl	8017bb6 <net_ipv4_is_addr_bcast>
 8008190:	2800      	cmp	r0, #0
 8008192:	d1f1      	bne.n	8008178 <net_icmpv4_input+0x18>
	return net_pkt_skip(pkt, access->size);
 8008194:	9901      	ldr	r1, [sp, #4]
 8008196:	4620      	mov	r0, r4
 8008198:	f00f f999 	bl	80174ce <net_pkt_skip>
	return list->head;
 800819c:	4b0e      	ldr	r3, [pc, #56]	; (80081d8 <net_icmpv4_input+0x78>)
 800819e:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0e9      	beq.n	8008178 <net_icmpv4_input+0x18>
		if (cb->type == icmp_hdr->type &&
 80081a4:	7829      	ldrb	r1, [r5, #0]
 80081a6:	7a1a      	ldrb	r2, [r3, #8]
 80081a8:	428a      	cmp	r2, r1
 80081aa:	d111      	bne.n	80081d0 <net_icmpv4_input+0x70>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 80081ac:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
 80081ae:	7868      	ldrb	r0, [r5, #1]
 80081b0:	4290      	cmp	r0, r2
 80081b2:	d000      	beq.n	80081b6 <net_icmpv4_input+0x56>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 80081b4:	b962      	cbnz	r2, 80081d0 <net_icmpv4_input+0x70>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	462a      	mov	r2, r5
 80081ba:	4631      	mov	r1, r6
 80081bc:	4620      	mov	r0, r4
 80081be:	4798      	blx	r3
 80081c0:	e7db      	b.n	800817a <net_icmpv4_input+0x1a>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
}

static inline uint16_t net_calc_chksum_icmpv4(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMP);
 80081c2:	2101      	movs	r1, #1
 80081c4:	4620      	mov	r0, r4
 80081c6:	f00e f98f 	bl	80164e8 <net_calc_chksum>
		if (net_calc_chksum_icmpv4(pkt) != 0U) {
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d0db      	beq.n	8008186 <net_icmpv4_input+0x26>
 80081ce:	e7d3      	b.n	8008178 <net_icmpv4_input+0x18>
	return node->next;
 80081d0:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e7      	bne.n	80081a6 <net_icmpv4_input+0x46>
 80081d6:	e7cf      	b.n	8008178 <net_icmpv4_input+0x18>
 80081d8:	24002d74 	.word	0x24002d74

080081dc <net_icmpv4_init>:
	.handler = icmpv4_handle_echo_request,
};

void net_icmpv4_init(void)
{
	net_icmpv4_register_handler(&echo_request_handler);
 80081dc:	4801      	ldr	r0, [pc, #4]	; (80081e4 <net_icmpv4_init+0x8>)
 80081de:	f7ff bf99 	b.w	8008114 <net_icmpv4_register_handler>
 80081e2:	bf00      	nop
 80081e4:	24000928 	.word	0x24000928

080081e8 <net_icmpv6_register_handler>:
	return list->head;
 80081e8:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <net_icmpv6_register_handler+0x10>)
 80081ea:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 80081ec:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
 80081ee:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 80081f0:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 80081f2:	b902      	cbnz	r2, 80081f6 <net_icmpv6_register_handler+0xe>
	list->tail = node;
 80081f4:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
 80081f6:	4770      	bx	lr
 80081f8:	24002d7c 	.word	0x24002d7c

080081fc <net_icmpv6_unregister_handler>:
	return list->head;
 80081fc:	4b0c      	ldr	r3, [pc, #48]	; (8008230 <net_icmpv6_unregister_handler+0x34>)
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80081fe:	2100      	movs	r1, #0
	return list->head;
 8008200:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008202:	b902      	cbnz	r2, 8008206 <net_icmpv6_unregister_handler+0xa>

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
}
 8008204:	4770      	bx	lr
 8008206:	4290      	cmp	r0, r2
 8008208:	d10f      	bne.n	800822a <net_icmpv6_unregister_handler+0x2e>
	return node->next;
 800820a:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 800820c:	b939      	cbnz	r1, 800821e <net_icmpv6_unregister_handler+0x22>
 800820e:	6859      	ldr	r1, [r3, #4]
	list->head = node;
 8008210:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 8008212:	4288      	cmp	r0, r1
 8008214:	d100      	bne.n	8008218 <net_icmpv6_unregister_handler+0x1c>
	list->tail = node;
 8008216:	605a      	str	r2, [r3, #4]
	parent->next = child;
 8008218:	2300      	movs	r3, #0
 800821a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 800821c:	4770      	bx	lr
	parent->next = child;
 800821e:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	4290      	cmp	r0, r2
	list->tail = node;
 8008224:	bf08      	it	eq
 8008226:	6059      	streq	r1, [r3, #4]
}
 8008228:	e7f6      	b.n	8008218 <net_icmpv6_unregister_handler+0x1c>
	return node->next;
 800822a:	4611      	mov	r1, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800822c:	6812      	ldr	r2, [r2, #0]
 800822e:	e7e8      	b.n	8008202 <net_icmpv6_unregister_handler+0x6>
 8008230:	24002d7c 	.word	0x24002d7c

08008234 <net_icmpv6_input>:
}

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  struct net_ipv6_hdr *ip_hdr)
{
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8008234:	2200      	movs	r2, #0
 8008236:	2304      	movs	r3, #4
{
 8008238:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800823a:	460e      	mov	r6, r1
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv6_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 800823c:	4669      	mov	r1, sp
{
 800823e:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8008240:	e9cd 2300 	strd	r2, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 8008244:	f00f fb70 	bl	8017928 <net_pkt_get_data>
	if (!icmp_hdr) {
 8008248:	4604      	mov	r4, r0
 800824a:	b910      	cbnz	r0, 8008252 <net_icmpv6_input+0x1e>
		NET_DBG("DROP: NULL ICMPv6 header");
		return NET_DROP;
 800824c:	2002      	movs	r0, #2
	}
drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
 800824e:	b002      	add	sp, #8
 8008250:	bd70      	pop	{r4, r5, r6, pc}
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
 8008252:	69a8      	ldr	r0, [r5, #24]
 8008254:	f00d fef3 	bl	801603e <net_if_need_calc_rx_checksum>
 8008258:	b9b0      	cbnz	r0, 8008288 <net_icmpv6_input+0x54>
 800825a:	9901      	ldr	r1, [sp, #4]
 800825c:	4628      	mov	r0, r5
 800825e:	f00f f936 	bl	80174ce <net_pkt_skip>
	return list->head;
 8008262:	4b0f      	ldr	r3, [pc, #60]	; (80082a0 <net_icmpv6_input+0x6c>)
 8008264:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f0      	beq.n	800824c <net_icmpv6_input+0x18>
		if (cb->type == icmp_hdr->type &&
 800826a:	7821      	ldrb	r1, [r4, #0]
 800826c:	7a1a      	ldrb	r2, [r3, #8]
 800826e:	428a      	cmp	r2, r1
 8008270:	d111      	bne.n	8008296 <net_icmpv6_input+0x62>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 8008272:	7a5a      	ldrb	r2, [r3, #9]
		if (cb->type == icmp_hdr->type &&
 8008274:	7860      	ldrb	r0, [r4, #1]
 8008276:	4290      	cmp	r0, r2
 8008278:	d000      	beq.n	800827c <net_icmpv6_input+0x48>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 800827a:	b962      	cbnz	r2, 8008296 <net_icmpv6_input+0x62>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	4622      	mov	r2, r4
 8008280:	4631      	mov	r1, r6
 8008282:	4628      	mov	r0, r5
 8008284:	4798      	blx	r3
 8008286:	e7e2      	b.n	800824e <net_icmpv6_input+0x1a>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
 8008288:	213a      	movs	r1, #58	; 0x3a
 800828a:	4628      	mov	r0, r5
 800828c:	f00e f92c 	bl	80164e8 <net_calc_chksum>
		if (net_calc_chksum_icmpv6(pkt) != 0U) {
 8008290:	2800      	cmp	r0, #0
 8008292:	d0e2      	beq.n	800825a <net_icmpv6_input+0x26>
 8008294:	e7da      	b.n	800824c <net_icmpv6_input+0x18>
	return node->next;
 8008296:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e7      	bne.n	800826c <net_icmpv6_input+0x38>
 800829c:	e7d6      	b.n	800824c <net_icmpv6_input+0x18>
 800829e:	bf00      	nop
 80082a0:	24002d7c 	.word	0x24002d7c

080082a4 <net_icmpv6_init>:
	.handler = icmpv6_handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <net_icmpv6_init+0x8>)
 80082a6:	f7ff bf9f 	b.w	80081e8 <net_icmpv6_register_handler>
 80082aa:	bf00      	nop
 80082ac:	24000934 	.word	0x24000934

080082b0 <net_nbr_link>:
	return NULL;
}

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 const struct net_linkaddr *lladdr)
{
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
 80082b4:	7843      	ldrb	r3, [r0, #1]
{
 80082b6:	4606      	mov	r6, r0
 80082b8:	4689      	mov	r9, r1
 80082ba:	4614      	mov	r4, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
 80082bc:	2bff      	cmp	r3, #255	; 0xff
 80082be:	d149      	bne.n	8008354 <net_nbr_link+0xa4>
 80082c0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8008360 <net_nbr_link+0xb0>
	int i, avail = -1;
 80082c4:	f04f 35ff 	mov.w	r5, #4294967295
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 80082c8:	2700      	movs	r7, #0
 80082ca:	46d0      	mov	r8, sl
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
 80082cc:	1c6a      	adds	r2, r5, #1
 80082ce:	f89a 3008 	ldrb.w	r3, [sl, #8]
 80082d2:	d115      	bne.n	8008300 <net_nbr_link+0x50>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d03b      	beq.n	8008350 <net_nbr_link+0xa0>
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
		    !memcmp(lladdr->addr,
 80082d8:	7922      	ldrb	r2, [r4, #4]
 80082da:	f10a 0102 	add.w	r1, sl, #2
 80082de:	6820      	ldr	r0, [r4, #0]
 80082e0:	f00c fca0 	bl	8014c24 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
 80082e4:	b970      	cbnz	r0, 8008304 <net_nbr_link+0x54>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
 80082e6:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 80082ea:	4498      	add	r8, r3
 80082ec:	f898 3008 	ldrb.w	r3, [r8, #8]
 80082f0:	3301      	adds	r3, #1
 80082f2:	f888 3008 	strb.w	r3, [r8, #8]

			nbr->idx = i;
 80082f6:	7077      	strb	r7, [r6, #1]
			nbr->iface = iface;
 80082f8:	f8c6 9008 	str.w	r9, [r6, #8]
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;

	nbr->iface = iface;

	return 0;
}
 80082fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (net_neighbor_lladdr[i].ref &&
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e9      	bne.n	80082d8 <net_nbr_link+0x28>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8008304:	3701      	adds	r7, #1
 8008306:	f10a 0a09 	add.w	sl, sl, #9
 800830a:	2f08      	cmp	r7, #8
 800830c:	d1de      	bne.n	80082cc <net_nbr_link+0x1c>
	if (avail < 0) {
 800830e:	1c6b      	adds	r3, r5, #1
 8008310:	d023      	beq.n	800835a <net_nbr_link+0xaa>
	net_neighbor_lladdr[avail].ref++;
 8008312:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8008316:	00ef      	lsls	r7, r5, #3
 8008318:	eb08 0300 	add.w	r3, r8, r0
 800831c:	7a1a      	ldrb	r2, [r3, #8]
 800831e:	3201      	adds	r2, #1
 8008320:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
 8008322:	7075      	strb	r5, [r6, #1]
	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
 8008324:	6821      	ldr	r1, [r4, #0]
 8008326:	7922      	ldrb	r2, [r4, #4]
	if (!lladdr_store || !new_addr) {
 8008328:	b131      	cbz	r1, 8008338 <net_nbr_link+0x88>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
 800832a:	2a06      	cmp	r2, #6
 800832c:	d804      	bhi.n	8008338 <net_nbr_link+0x88>
	memcpy(lladdr_store->addr, new_addr, new_len);
 800832e:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
 8008330:	705a      	strb	r2, [r3, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
 8008332:	4440      	add	r0, r8
 8008334:	f00c fc9f 	bl	8014c76 <memcpy>
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
 8008338:	443d      	add	r5, r7
 800833a:	7922      	ldrb	r2, [r4, #4]
	return 0;
 800833c:	2000      	movs	r0, #0
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
 800833e:	eb08 0305 	add.w	r3, r8, r5
 8008342:	705a      	strb	r2, [r3, #1]
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;
 8008344:	7963      	ldrb	r3, [r4, #5]
 8008346:	f808 3005 	strb.w	r3, [r8, r5]
	nbr->iface = iface;
 800834a:	f8c6 9008 	str.w	r9, [r6, #8]
	return 0;
 800834e:	e7d5      	b.n	80082fc <net_nbr_link+0x4c>
 8008350:	463d      	mov	r5, r7
 8008352:	e7d7      	b.n	8008304 <net_nbr_link+0x54>
		return -EALREADY;
 8008354:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8008358:	e7d0      	b.n	80082fc <net_nbr_link+0x4c>
		return -ENOENT;
 800835a:	f06f 0001 	mvn.w	r0, #1
 800835e:	e7cd      	b.n	80082fc <net_nbr_link+0x4c>
 8008360:	240030df 	.word	0x240030df

08008364 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
 8008364:	b510      	push	{r4, lr}
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
 8008366:	7843      	ldrb	r3, [r0, #1]
{
 8008368:	4604      	mov	r4, r0
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
 800836a:	2bff      	cmp	r3, #255	; 0xff
 800836c:	d018      	beq.n	80083a0 <net_nbr_unlink+0x3c>
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);

	net_neighbor_lladdr[nbr->idx].ref--;
 800836e:	480e      	ldr	r0, [pc, #56]	; (80083a8 <net_nbr_unlink+0x44>)
 8008370:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8008374:	4403      	add	r3, r0
 8008376:	7a1a      	ldrb	r2, [r3, #8]
 8008378:	3a01      	subs	r2, #1
 800837a:	721a      	strb	r2, [r3, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
 800837c:	7863      	ldrb	r3, [r4, #1]
 800837e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8008382:	4402      	add	r2, r0
 8008384:	7a11      	ldrb	r1, [r2, #8]
 8008386:	b931      	cbnz	r1, 8008396 <net_nbr_unlink+0x32>
		(void)memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
 8008388:	2209      	movs	r2, #9
 800838a:	fb02 0003 	mla	r0, r2, r3, r0
 800838e:	2206      	movs	r2, #6
 8008390:	3002      	adds	r0, #2
 8008392:	f00c fc7b 	bl	8014c8c <memset>
			     sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
 8008396:	23ff      	movs	r3, #255	; 0xff
	nbr->iface = NULL;
 8008398:	2000      	movs	r0, #0
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
 800839a:	7063      	strb	r3, [r4, #1]
	nbr->iface = NULL;
 800839c:	60a0      	str	r0, [r4, #8]

	return 0;
}
 800839e:	bd10      	pop	{r4, pc}
		return -EALREADY;
 80083a0:	f06f 0077 	mvn.w	r0, #119	; 0x77
 80083a4:	e7fb      	b.n	800839e <net_nbr_unlink+0x3a>
 80083a6:	bf00      	nop
 80083a8:	240030df 	.word	0x240030df

080083ac <net_nbr_get_lladdr>:
	NET_ASSERT(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
		   "idx %d >= max %d", idx,
		   CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <net_nbr_get_lladdr+0xc>)
	return &net_neighbor_lladdr[idx].lladdr;
 80083ae:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
 80083b2:	4418      	add	r0, r3
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	240030df 	.word	0x240030df

080083bc <net_ipv6_input>:
		return 0;
	}
}

enum net_verdict net_ipv6_input(struct net_pkt *pkt, bool is_loopback)
{
 80083bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 80083c0:	2328      	movs	r3, #40	; 0x28
{
 80083c2:	b097      	sub	sp, #92	; 0x5c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 80083c4:	2600      	movs	r6, #0
{
 80083c6:	4604      	mov	r4, r0
 80083c8:	4688      	mov	r8, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 80083ca:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 80083ce:	ab0b      	add	r3, sp, #44	; 0x2c
 80083d0:	930d      	str	r3, [sp, #52]	; 0x34
 80083d2:	2308      	movs	r3, #8
 80083d4:	930e      	str	r3, [sp, #56]	; 0x38
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 80083d6:	ab11      	add	r3, sp, #68	; 0x44
 80083d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80083da:	2314      	movs	r3, #20
 80083dc:	9310      	str	r3, [sp, #64]	; 0x40
	struct net_if *pkt_iface = net_pkt_iface(pkt);
 80083de:	6983      	ldr	r3, [r0, #24]
 80083e0:	9305      	str	r3, [sp, #20]
	enum net_verdict verdict = NET_DROP;
	int real_len = net_pkt_get_len(pkt);
 80083e2:	6883      	ldr	r3, [r0, #8]
	while (buf) {
 80083e4:	b93b      	cbnz	r3, 80083f6 <net_ipv6_input+0x3a>
	net_pkt_cursor_backup(pkt, &hdr_start);
#endif

	net_stats_update_ipv6_recv(pkt_iface);

	hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 80083e6:	a909      	add	r1, sp, #36	; 0x24
 80083e8:	4620      	mov	r0, r4
 80083ea:	f00f fa9d 	bl	8017928 <net_pkt_get_data>
	if (!hdr) {
 80083ee:	4605      	mov	r5, r0
 80083f0:	b928      	cbnz	r0, 80083fe <net_ipv6_input+0x42>
			      net_pkt_get_current_offset(pkt) - 1);

	NET_DBG("DROP: Unknown/wrong nexthdr type");
	net_stats_update_ip_errors_protoerr(pkt_iface);

	return NET_DROP;
 80083f2:	2002      	movs	r0, #2
 80083f4:	e09b      	b.n	800852e <net_ipv6_input+0x172>
		bytes += buf->len;
 80083f6:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
 80083f8:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 80083fa:	4416      	add	r6, r2
		buf = buf->frags;
 80083fc:	e7f2      	b.n	80083e4 <net_ipv6_input+0x28>
	pkt_len = ntohs(hdr->len) + sizeof(struct net_ipv6_hdr);
 80083fe:	8887      	ldrh	r7, [r0, #4]
 8008400:	ba7f      	rev16	r7, r7
 8008402:	b2bf      	uxth	r7, r7
 8008404:	3728      	adds	r7, #40	; 0x28
	if (real_len < pkt_len) {
 8008406:	42be      	cmp	r6, r7
 8008408:	dbf3      	blt.n	80083f2 <net_ipv6_input+0x36>
	} else if (real_len > pkt_len) {
 800840a:	dd03      	ble.n	8008414 <net_ipv6_input+0x58>
		net_pkt_update_length(pkt, pkt_len);
 800840c:	4639      	mov	r1, r7
 800840e:	4620      	mov	r0, r4
 8008410:	f00f f98f 	bl	8017732 <net_pkt_update_length>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8008414:	68ab      	ldr	r3, [r5, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8008416:	b933      	cbnz	r3, 8008426 <net_ipv6_input+0x6a>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8008418:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 800841a:	b923      	cbnz	r3, 8008426 <net_ipv6_input+0x6a>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800841c:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 800841e:	b913      	cbnz	r3, 8008426 <net_ipv6_input+0x6a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 8008420:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8008422:	2b00      	cmp	r3, #0
 8008424:	d0e5      	beq.n	80083f2 <net_ipv6_input+0x36>
	if (net_ipv6_is_addr_mcast((struct in6_addr *)hdr->src) ||
 8008426:	7a2b      	ldrb	r3, [r5, #8]
 8008428:	2bff      	cmp	r3, #255	; 0xff
 800842a:	d0e2      	beq.n	80083f2 <net_ipv6_input+0x36>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 800842c:	7e29      	ldrb	r1, [r5, #24]
	    net_ipv6_is_addr_mcast_scope((struct in6_addr *)hdr->dst, 0)) {
 800842e:	f105 0618 	add.w	r6, r5, #24
 8008432:	29ff      	cmp	r1, #255	; 0xff
 8008434:	d102      	bne.n	800843c <net_ipv6_input+0x80>
 8008436:	7e6b      	ldrb	r3, [r5, #25]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0da      	beq.n	80083f2 <net_ipv6_input+0x36>
	if (!is_loopback) {
 800843c:	f1b8 0f00 	cmp.w	r8, #0
 8008440:	d11e      	bne.n	8008480 <net_ipv6_input+0xc4>
		if (net_ipv6_is_addr_loopback((struct in6_addr *)hdr->dst) ||
 8008442:	4630      	mov	r0, r6
 8008444:	f010 f907 	bl	8018656 <net_ipv6_is_addr_loopback>
 8008448:	2800      	cmp	r0, #0
 800844a:	d1d2      	bne.n	80083f2 <net_ipv6_input+0x36>
		    net_ipv6_is_addr_loopback((struct in6_addr *)hdr->src)) {
 800844c:	f105 0008 	add.w	r0, r5, #8
 8008450:	f010 f901 	bl	8018656 <net_ipv6_is_addr_loopback>
		if (net_ipv6_is_addr_loopback((struct in6_addr *)hdr->dst) ||
 8008454:	2800      	cmp	r0, #0
 8008456:	d1cc      	bne.n	80083f2 <net_ipv6_input+0x36>
 8008458:	29ff      	cmp	r1, #255	; 0xff
 800845a:	d102      	bne.n	8008462 <net_ipv6_input+0xa6>
 800845c:	7e6b      	ldrb	r3, [r5, #25]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d0c7      	beq.n	80083f2 <net_ipv6_input+0x36>
		    (net_ipv6_is_addr_mcast_group(
 8008462:	f7fe f9c1 	bl	80067e8 <net_ipv6_unspecified_address>
 8008466:	4601      	mov	r1, r0
 8008468:	4630      	mov	r0, r6
 800846a:	f010 f905 	bl	8018678 <net_ipv6_is_addr_mcast_group>
		if (net_ipv6_is_addr_mcast_iface((struct in6_addr *)hdr->dst) ||
 800846e:	b138      	cbz	r0, 8008480 <net_ipv6_input+0xc4>
 8008470:	7e2b      	ldrb	r3, [r5, #24]
 8008472:	2bff      	cmp	r3, #255	; 0xff
 8008474:	d104      	bne.n	8008480 <net_ipv6_input+0xc4>
 8008476:	7e6b      	ldrb	r3, [r5, #25]
 8008478:	2b05      	cmp	r3, #5
 800847a:	d0ba      	beq.n	80083f2 <net_ipv6_input+0x36>
 800847c:	2b08      	cmp	r3, #8
 800847e:	d0b8      	beq.n	80083f2 <net_ipv6_input+0x36>
		uint8_t tc = ((hdr->vtc << 4) & 0xF0) | ((hdr->tcflow >> 4) & 0x0F);
 8008480:	786b      	ldrb	r3, [r5, #1]
	pkt->ipv6_ext_len = len;
 8008482:	2100      	movs	r1, #0
 8008484:	782a      	ldrb	r2, [r5, #0]
 8008486:	091b      	lsrs	r3, r3, #4
 8008488:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800848c:	b25a      	sxtb	r2, r3
 *
 * @return Decoded DSCP value.
 */
static inline uint8_t net_ipv6_get_dscp(uint8_t tc)
{
	return (tc & NET_IPV6_DSCP_MASK) >> NET_IPV6_DSCP_OFFSET;
 800848e:	f3c3 0385 	ubfx	r3, r3, #2, #6
	pkt->ip_dscp = dscp;
 8008492:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
	pkt->family = family;
 8008496:	2202      	movs	r2, #2
	pkt->ip_dscp = dscp;
 8008498:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	net_pkt_set_ipv6_next_hdr(pkt, hdr->nexthdr);
 800849c:	79ab      	ldrb	r3, [r5, #6]
	pkt->ipv6_ext_len = len;
 800849e:	8761      	strh	r1, [r4, #58]	; 0x3a
	pkt->ipv6_next_hdr = next_hdr;
 80084a0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	pkt->ip_hdr_len = len;
 80084a4:	2328      	movs	r3, #40	; 0x28
 80084a6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	return pkt->frags->data;
 80084aa:	68a3      	ldr	r3, [r4, #8]
	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_HDR(pkt)->hop_limit);
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	79db      	ldrb	r3, [r3, #7]
	pkt->ipv6_hop_limit = hop_limit;
 80084b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	pkt->family = family;
 80084b4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80084b8:	f362 1347 	bfi	r3, r2, #5, #3
 80084bc:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	if (!net_ipv6_is_addr_mcast((struct in6_addr *)hdr->dst)) {
 80084c0:	7e2b      	ldrb	r3, [r5, #24]
 80084c2:	2bff      	cmp	r3, #255	; 0xff
 80084c4:	d114      	bne.n	80084f0 <net_ipv6_input+0x134>
 80084c6:	7e6b      	ldrb	r3, [r5, #25]
	if (net_ipv6_is_addr_mcast((struct in6_addr *)hdr->dst) &&
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d047      	beq.n	800855c <net_ipv6_input+0x1a0>
	return net_ipv6_is_addr_mcast_link(addr) &&
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d105      	bne.n	80084dc <net_ipv6_input+0x120>
	return net_ipv6_is_addr_mcast_group(addr, &all_nodes_mcast_group);
 80084d0:	49ab      	ldr	r1, [pc, #684]	; (8008780 <net_ipv6_input+0x3c4>)
 80084d2:	4630      	mov	r0, r6
 80084d4:	f010 f8d0 	bl	8018678 <net_ipv6_is_addr_mcast_group>
	    !(net_ipv6_is_addr_mcast_iface((struct in6_addr *)hdr->dst) ||
 80084d8:	2800      	cmp	r0, #0
 80084da:	d13f      	bne.n	800855c <net_ipv6_input+0x1a0>
		if_mcast_addr = net_if_ipv6_maddr_lookup(
 80084dc:	a905      	add	r1, sp, #20
 80084de:	4630      	mov	r0, r6
 80084e0:	f7fd facc 	bl	8005a7c <net_if_ipv6_maddr_lookup>
		if (!if_mcast_addr ||
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d084      	beq.n	80083f2 <net_ipv6_input+0x36>
	return addr->is_joined;
 80084e8:	7d03      	ldrb	r3, [r0, #20]
 80084ea:	079b      	lsls	r3, r3, #30
 80084ec:	d436      	bmi.n	800855c <net_ipv6_input+0x1a0>
 80084ee:	e780      	b.n	80083f2 <net_ipv6_input+0x36>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7fc ff4b 	bl	800538c <net_if_ipv6_addr_lookup>
		if (!net_ipv6_is_my_addr((struct in6_addr *)hdr->dst)) {
 80084f6:	bb70      	cbnz	r0, 8008556 <net_ipv6_input+0x19a>
		found = net_route_get_info(net_pkt_iface(pkt),
 80084f8:	ab07      	add	r3, sp, #28
 80084fa:	aa06      	add	r2, sp, #24
 80084fc:	4631      	mov	r1, r6
 80084fe:	69a0      	ldr	r0, [r4, #24]
 8008500:	f010 ffbb 	bl	801947a <net_route_get_info>
	if (found) {
 8008504:	4605      	mov	r5, r0
 8008506:	b1a8      	cbz	r0, 8008534 <net_ipv6_input+0x178>
		if (route) {
 8008508:	9b06      	ldr	r3, [sp, #24]
 800850a:	b143      	cbz	r3, 800851e <net_ipv6_input+0x162>
			net_pkt_set_iface(pkt, route->iface);
 800850c:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
 800850e:	61a3      	str	r3, [r4, #24]
	if (iface) {
 8008510:	b12b      	cbz	r3, 800851e <net_ipv6_input+0x162>
		uint8_t type = net_if_get_link_addr(iface)->type;
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	7d5b      	ldrb	r3, [r3, #21]
		pkt->lladdr_src.type = type;
 8008516:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		pkt->lladdr_dst.type = type;
 800851a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		ret = net_route_packet(pkt, nexthop);
 800851e:	9907      	ldr	r1, [sp, #28]
 8008520:	4620      	mov	r0, r4
 8008522:	f010 ffd7 	bl	80194d4 <net_route_packet>
	return NET_DROP;
 8008526:	2800      	cmp	r0, #0
 8008528:	bfac      	ite	ge
 800852a:	2000      	movge	r0, #0
 800852c:	2002      	movlt	r0, #2
}
 800852e:	b017      	add	sp, #92	; 0x5c
 8008530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct net_if *iface = NULL;
 8008534:	9008      	str	r0, [sp, #32]
		if (net_if_ipv6_addr_onlink(&iface, (struct in6_addr *)hdr->dst)) {
 8008536:	4631      	mov	r1, r6
 8008538:	a808      	add	r0, sp, #32
 800853a:	f7fd fbcb 	bl	8005cd4 <net_if_ipv6_addr_onlink>
 800853e:	2800      	cmp	r0, #0
 8008540:	f43f af57 	beq.w	80083f2 <net_ipv6_input+0x36>
			ret = net_route_packet_if(pkt, iface);
 8008544:	9908      	ldr	r1, [sp, #32]
 8008546:	4620      	mov	r0, r4
 8008548:	f011 f818 	bl	801957c <net_route_packet_if>
			if (ret < 0) {
 800854c:	2800      	cmp	r0, #0
 800854e:	f6ff af50 	blt.w	80083f2 <net_ipv6_input+0x36>
				return NET_OK;
 8008552:	4628      	mov	r0, r5
 8008554:	e7eb      	b.n	800852e <net_ipv6_input+0x172>
	if (net_ipv6_is_addr_mcast((struct in6_addr *)hdr->dst) &&
 8008556:	7e2b      	ldrb	r3, [r5, #24]
 8008558:	2bff      	cmp	r3, #255	; 0xff
 800855a:	d0b4      	beq.n	80084c6 <net_ipv6_input+0x10a>
	return net_pkt_skip(pkt, access->size);
 800855c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800855e:	4620      	mov	r0, r4
 8008560:	f00e ffb5 	bl	80174ce <net_pkt_skip>
	current_hdr = hdr->nexthdr;
 8008564:	f895 9006 	ldrb.w	r9, [r5, #6]
	switch (header) {
 8008568:	f1b9 0f2c 	cmp.w	r9, #44	; 0x2c
 800856c:	d03c      	beq.n	80085e8 <net_ipv6_input+0x22c>
 800856e:	d835      	bhi.n	80085dc <net_ipv6_input+0x220>
 8008570:	f1b9 0f00 	cmp.w	r9, #0
 8008574:	d03b      	beq.n	80085ee <net_ipv6_input+0x232>
		return 0;
 8008576:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 800857a:	bf08      	it	eq
 800857c:	f04f 0804 	moveq.w	r8, #4
 8008580:	bf18      	it	ne
 8008582:	f04f 0800 	movne.w	r8, #0
	pkt->ipv6_prev_hdr_start = offset;
 8008586:	2306      	movs	r3, #6
	uint16_t ext_len = 0U;
 8008588:	f04f 0a00 	mov.w	sl, #0
 800858c:	87a3      	strh	r3, [r4, #60]	; 0x3c
		nexthdr == IPPROTO_TCP ||
 800858e:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
 8008592:	d005      	beq.n	80085a0 <net_ipv6_input+0x1e4>
	return (nexthdr == IPPROTO_ICMPV6 || nexthdr == IPPROTO_UDP ||
 8008594:	f1b9 0f11 	cmp.w	r9, #17
 8008598:	d002      	beq.n	80085a0 <net_ipv6_input+0x1e4>
	while (!net_ipv6_is_nexthdr_upper_layer(current_hdr)) {
 800859a:	f1b9 0f06 	cmp.w	r9, #6
 800859e:	d129      	bne.n	80085f4 <net_ipv6_input+0x238>
	switch (current_hdr) {
 80085a0:	f1b9 0f11 	cmp.w	r9, #17
	pkt->ipv6_ext_len = len;
 80085a4:	f8a4 a03a 	strh.w	sl, [r4, #58]	; 0x3a
 80085a8:	f000 80e3 	beq.w	8008772 <net_ipv6_input+0x3b6>
 80085ac:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
 80085b0:	f000 80da 	beq.w	8008768 <net_ipv6_input+0x3ac>
 80085b4:	f1b9 0f06 	cmp.w	r9, #6
 80085b8:	f47f af1b 	bne.w	80083f2 <net_ipv6_input+0x36>
		proto_hdr.tcp = net_tcp_input(pkt, &tcp_access);
 80085bc:	a90f      	add	r1, sp, #60	; 0x3c
 80085be:	4620      	mov	r0, r4
 80085c0:	f011 fa14 	bl	80199ec <net_tcp_input>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
 80085c4:	9007      	str	r0, [sp, #28]
		if (proto_hdr.udp) {
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f43f af13 	beq.w	80083f2 <net_ipv6_input+0x36>
	verdict = net_conn_input(pkt, &ip, current_hdr, &proto_hdr);
 80085cc:	ab07      	add	r3, sp, #28
 80085ce:	464a      	mov	r2, r9
 80085d0:	a908      	add	r1, sp, #32
 80085d2:	4620      	mov	r0, r4
	ip.ipv6 = hdr;
 80085d4:	9508      	str	r5, [sp, #32]
	verdict = net_conn_input(pkt, &ip, current_hdr, &proto_hdr);
 80085d6:	f7fe ffb3 	bl	8007540 <net_conn_input>
	if (verdict != NET_DROP) {
 80085da:	e7a8      	b.n	800852e <net_ipv6_input+0x172>
		return 0;
 80085dc:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
 80085e0:	bf08      	it	eq
 80085e2:	f04f 0802 	moveq.w	r8, #2
 80085e6:	e7cb      	b.n	8008580 <net_ipv6_input+0x1c4>
		return NET_IPV6_EXT_HDR_BITMAP_FRAG;
 80085e8:	f04f 0808 	mov.w	r8, #8
 80085ec:	e7cb      	b.n	8008586 <net_ipv6_input+0x1ca>
	switch (header) {
 80085ee:	f04f 0801 	mov.w	r8, #1
 80085f2:	e7c8      	b.n	8008586 <net_ipv6_input+0x1ca>
		if (current_hdr == NET_IPV6_NEXTHDR_NONE) {
 80085f4:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
 80085f8:	f43f aefb 	beq.w	80083f2 <net_ipv6_input+0x36>
		prev_hdr_offset = net_pkt_get_current_offset(pkt);
 80085fc:	4620      	mov	r0, r4
 80085fe:	f00f f8db 	bl	80177b8 <net_pkt_get_current_offset>
	return net_pkt_read(pkt, data, 1);
 8008602:	2201      	movs	r2, #1
 8008604:	9001      	str	r0, [sp, #4]
 8008606:	a906      	add	r1, sp, #24
 8008608:	4620      	mov	r0, r4
 800860a:	f00f f817 	bl	801763c <net_pkt_read>
		if (net_pkt_read_u8(pkt, &nexthdr)) {
 800860e:	4606      	mov	r6, r0
 8008610:	2800      	cmp	r0, #0
 8008612:	f47f aeee 	bne.w	80083f2 <net_ipv6_input+0x36>
		ext_bit = extension_to_bitmap(nexthdr, ext_bitmap);
 8008616:	f89d 3018 	ldrb.w	r3, [sp, #24]
	switch (header) {
 800861a:	2b2c      	cmp	r3, #44	; 0x2c
 800861c:	d01e      	beq.n	800865c <net_ipv6_input+0x2a0>
 800861e:	d815      	bhi.n	800864c <net_ipv6_input+0x290>
 8008620:	b1f3      	cbz	r3, 8008660 <net_ipv6_input+0x2a4>
		return 0;
 8008622:	2b2b      	cmp	r3, #43	; 0x2b
 8008624:	bf0c      	ite	eq
 8008626:	2604      	moveq	r6, #4
 8008628:	2600      	movne	r6, #0
		if (ext_bit & ext_bitmap) {
 800862a:	ea18 0f06 	tst.w	r8, r6
 800862e:	d107      	bne.n	8008640 <net_ipv6_input+0x284>
		switch (nexthdr) {
 8008630:	2b2c      	cmp	r3, #44	; 0x2c
 8008632:	d01c      	beq.n	800866e <net_ipv6_input+0x2b2>
 8008634:	d816      	bhi.n	8008664 <net_ipv6_input+0x2a8>
 8008636:	b11b      	cbz	r3, 8008640 <net_ipv6_input+0x284>
 8008638:	2b11      	cmp	r3, #17
 800863a:	d018      	beq.n	800866e <net_ipv6_input+0x2b2>
			if (net_ipv6_is_nexthdr_upper_layer(nexthdr)) {
 800863c:	2b06      	cmp	r3, #6
 800863e:	d016      	beq.n	800866e <net_ipv6_input+0x2b2>
			      net_pkt_get_current_offset(pkt) - 1);
 8008640:	4620      	mov	r0, r4
 8008642:	f00f f8b9 	bl	80177b8 <net_pkt_get_current_offset>
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
 8008646:	2201      	movs	r2, #1
 8008648:	1e43      	subs	r3, r0, #1
 800864a:	e088      	b.n	800875e <net_ipv6_input+0x3a2>
	switch (header) {
 800864c:	2b3c      	cmp	r3, #60	; 0x3c
 800864e:	d1ec      	bne.n	800862a <net_ipv6_input+0x26e>
			return NET_IPV6_EXT_HDR_BITMAP_DESTO2;
 8008650:	f018 0f02 	tst.w	r8, #2
 8008654:	bf0c      	ite	eq
 8008656:	2602      	moveq	r6, #2
 8008658:	2640      	movne	r6, #64	; 0x40
 800865a:	e7e6      	b.n	800862a <net_ipv6_input+0x26e>
		return NET_IPV6_EXT_HDR_BITMAP_FRAG;
 800865c:	2608      	movs	r6, #8
 800865e:	e7e4      	b.n	800862a <net_ipv6_input+0x26e>
	switch (header) {
 8008660:	2601      	movs	r6, #1
 8008662:	e7e2      	b.n	800862a <net_ipv6_input+0x26e>
		switch (nexthdr) {
 8008664:	f1a3 023b 	sub.w	r2, r3, #59	; 0x3b
 8008668:	2a01      	cmp	r2, #1
 800866a:	f200 8087 	bhi.w	800877c <net_ipv6_input+0x3c0>
		switch (current_hdr) {
 800866e:	f1b9 0f00 	cmp.w	r9, #0
 8008672:	d002      	beq.n	800867a <net_ipv6_input+0x2be>
 8008674:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
 8008678:	d1e2      	bne.n	8008640 <net_ipv6_input+0x284>
		uint8_t val = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	a908      	add	r1, sp, #32
 800867e:	2201      	movs	r2, #1
 8008680:	4620      	mov	r0, r4
 8008682:	f88d 3020 	strb.w	r3, [sp, #32]
		exthdr_len = ipv6_handle_ext_hdr_options(pkt, hdr, pkt_len);
 8008686:	fa1f fb87 	uxth.w	fp, r7
 800868a:	f00e ffd7 	bl	801763c <net_pkt_read>
		if (net_pkt_read_u8(pkt, &val)) {
 800868e:	a908      	add	r1, sp, #32
 8008690:	2800      	cmp	r0, #0
 8008692:	f47f aeae 	bne.w	80083f2 <net_ipv6_input+0x36>
		exthdr_len = val * 8U + 8;
 8008696:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800869a:	3301      	adds	r3, #1
	if (exthdr_len > pkt_len) {
 800869c:	ebbb 0fc3 	cmp.w	fp, r3, lsl #3
		exthdr_len = val * 8U + 8;
 80086a0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
	if (exthdr_len > pkt_len) {
 80086a4:	f4ff aea5 	bcc.w	80083f2 <net_ipv6_input+0x36>
	length += 2U;
 80086a8:	f04f 0b02 	mov.w	fp, #2
 80086ac:	9103      	str	r1, [sp, #12]
		opt_type_offset = net_pkt_get_current_offset(pkt);
 80086ae:	4620      	mov	r0, r4
 80086b0:	f00f f882 	bl	80177b8 <net_pkt_get_current_offset>
 80086b4:	2201      	movs	r2, #1
 80086b6:	9002      	str	r0, [sp, #8]
 80086b8:	a907      	add	r1, sp, #28
 80086ba:	4620      	mov	r0, r4
 80086bc:	f00e ffbe 	bl	801763c <net_pkt_read>
		if (net_pkt_read_u8(pkt, &opt_type)) {
 80086c0:	2800      	cmp	r0, #0
 80086c2:	f47f ae96 	bne.w	80083f2 <net_ipv6_input+0x36>
		if (opt_type != NET_IPV6_EXT_HDR_OPT_PAD1) {
 80086c6:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80086ca:	bb02      	cbnz	r2, 800870e <net_ipv6_input+0x352>
		switch (opt_type) {
 80086cc:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80086d0:	b32a      	cbz	r2, 800871e <net_ipv6_input+0x362>
 80086d2:	2a01      	cmp	r2, #1
 80086d4:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80086d8:	d026      	beq.n	8008728 <net_ipv6_input+0x36c>
			if (opt_len > (exthdr_len - (1 + 1 + 1 + 1))) {
 80086da:	f1a9 0003 	sub.w	r0, r9, #3
 80086de:	4288      	cmp	r0, r1
 80086e0:	f77f ae87 	ble.w	80083f2 <net_ipv6_input+0x36>
	switch (opt_type & 0xc0) {
 80086e4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80086e8:	2a80      	cmp	r2, #128	; 0x80
 80086ea:	d036      	beq.n	800875a <net_ipv6_input+0x39e>
 80086ec:	2ac0      	cmp	r2, #192	; 0xc0
 80086ee:	d030      	beq.n	8008752 <net_ipv6_input+0x396>
 80086f0:	2a00      	cmp	r2, #0
 80086f2:	f47f ae7e 	bne.w	80083f2 <net_ipv6_input+0x36>
			if (net_pkt_skip(pkt, opt_len)) {
 80086f6:	4620      	mov	r0, r4
 80086f8:	f00e fee9 	bl	80174ce <net_pkt_skip>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	f47f ae78 	bne.w	80083f2 <net_ipv6_input+0x36>
			length += opt_len + 2;
 8008702:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8008706:	3202      	adds	r2, #2
 8008708:	eb0b 0302 	add.w	r3, fp, r2
 800870c:	e009      	b.n	8008722 <net_ipv6_input+0x366>
 800870e:	2201      	movs	r2, #1
 8008710:	9903      	ldr	r1, [sp, #12]
 8008712:	4620      	mov	r0, r4
 8008714:	f00e ff92 	bl	801763c <net_pkt_read>
			if (net_pkt_read_u8(pkt, &opt_len)) {
 8008718:	2800      	cmp	r0, #0
 800871a:	d0d7      	beq.n	80086cc <net_ipv6_input+0x310>
 800871c:	e669      	b.n	80083f2 <net_ipv6_input+0x36>
			length++;
 800871e:	f10b 0301 	add.w	r3, fp, #1
			length += opt_len + 2;
 8008722:	fa1f fb83 	uxth.w	fp, r3
			break;
 8008726:	e007      	b.n	8008738 <net_ipv6_input+0x37c>
			length += opt_len + 2;
 8008728:	1c8a      	adds	r2, r1, #2
			net_pkt_skip(pkt, opt_len);
 800872a:	4620      	mov	r0, r4
			length += opt_len + 2;
 800872c:	eb0b 0302 	add.w	r3, fp, r2
 8008730:	fa1f fb83 	uxth.w	fp, r3
			net_pkt_skip(pkt, opt_len);
 8008734:	f00e fecb 	bl	80174ce <net_pkt_skip>
	while (length < exthdr_len) {
 8008738:	45d9      	cmp	r9, fp
 800873a:	d8b8      	bhi.n	80086ae <net_ipv6_input+0x2f2>
		ext_len += exthdr_len;
 800873c:	44ca      	add	sl, r9
	pkt->ipv6_prev_hdr_start = offset;
 800873e:	f89d 0004 	ldrb.w	r0, [sp, #4]
		ext_bitmap |= ext_bit;
 8008742:	ea48 0806 	orr.w	r8, r8, r6
		current_hdr = nexthdr;
 8008746:	f89d 9018 	ldrb.w	r9, [sp, #24]
		ext_len += exthdr_len;
 800874a:	fa1f fa8a 	uxth.w	sl, sl
 800874e:	87a0      	strh	r0, [r4, #60]	; 0x3c
}
 8008750:	e71d      	b.n	800858e <net_ipv6_input+0x1d2>
		if (net_ipv6_is_addr_mcast((struct in6_addr *)hdr->dst)) {
 8008752:	7e2b      	ldrb	r3, [r5, #24]
 8008754:	2bff      	cmp	r3, #255	; 0xff
 8008756:	f43f ae4c 	beq.w	80083f2 <net_ipv6_input+0x36>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
 800875a:	9b02      	ldr	r3, [sp, #8]
 800875c:	2202      	movs	r2, #2
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
 800875e:	2104      	movs	r1, #4
 8008760:	4620      	mov	r0, r4
 8008762:	f00f fdf2 	bl	801834a <net_icmpv6_send_error>
 8008766:	e644      	b.n	80083f2 <net_ipv6_input+0x36>
		verdict = net_icmpv6_input(pkt, hdr);
 8008768:	4629      	mov	r1, r5
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff fd62 	bl	8008234 <net_icmpv6_input>
	if (verdict == NET_DROP) {
 8008770:	e6dd      	b.n	800852e <net_ipv6_input+0x172>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
 8008772:	a90d      	add	r1, sp, #52	; 0x34
 8008774:	4620      	mov	r0, r4
 8008776:	f011 fb78 	bl	8019e6a <net_udp_input>
 800877a:	e723      	b.n	80085c4 <net_ipv6_input+0x208>
		nexthdr == IPPROTO_TCP ||
 800877c:	2b3a      	cmp	r3, #58	; 0x3a
 800877e:	e75e      	b.n	800863e <net_ipv6_input+0x282>
 8008780:	0801d058 	.word	0x0801d058

08008784 <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	4607      	mov	r7, r0
 8008788:	460d      	mov	r5, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800878a:	4c08      	ldr	r4, [pc, #32]	; (80087ac <iface_cb+0x28>)
{
 800878c:	2608      	movs	r6, #8
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
 800878e:	7823      	ldrb	r3, [r4, #0]
 8008790:	b133      	cbz	r3, 80087a0 <iface_cb+0x1c>
 8008792:	68a3      	ldr	r3, [r4, #8]
 8008794:	42bb      	cmp	r3, r7
 8008796:	d103      	bne.n	80087a0 <iface_cb+0x1c>
			continue;
		}

		data->cb(nbr, data->user_data);
 8008798:	4620      	mov	r0, r4
 800879a:	e9d5 3100 	ldrd	r3, r1, [r5]
 800879e:	4798      	blx	r3
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 80087a0:	3e01      	subs	r6, #1
 80087a2:	f104 0454 	add.w	r4, r4, #84	; 0x54
 80087a6:	d1f2      	bne.n	800878e <iface_cb+0xa>
	}
}
 80087a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087aa:	bf00      	nop
 80087ac:	24000958 	.word	0x24000958

080087b0 <ipv6_nd_restart_reachable_timer>:
}
#endif /* CONFIG_NET_IPV6_NBR_CACHE */

#if defined(CONFIG_NET_IPV6_ND)
static void ipv6_nd_restart_reachable_timer(struct net_nbr *nbr, int64_t time)
{
 80087b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b4:	4614      	mov	r4, r2
 80087b6:	461d      	mov	r5, r3
	int64_t remaining;

	if (nbr) {
 80087b8:	4606      	mov	r6, r0
 80087ba:	b130      	cbz	r0, 80087ca <ipv6_nd_restart_reachable_timer+0x1a>
	return (struct net_ipv6_nbr_data *)nbr->data;
 80087bc:	68c7      	ldr	r7, [r0, #12]
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
 80087be:	f010 f845 	bl	801884c <k_uptime_get>
 80087c2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80087c6:	68f3      	ldr	r3, [r6, #12]
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
 80087c8:	621c      	str	r4, [r3, #32]
	return z_timeout_remaining(&dwork->timeout);
 80087ca:	4817      	ldr	r0, [pc, #92]	; (8008828 <ipv6_nd_restart_reachable_timer+0x78>)
 80087cc:	f013 fb08 	bl	801bde0 <z_timeout_remaining>
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_ceil32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, true, false);
 80087d0:	2200      	movs	r2, #0
		t += off;
 80087d2:	3009      	adds	r0, #9
		if (result32 && (t < BIT64(32))) {
 80087d4:	f04f 33ff 	mov.w	r3, #4294967295
		t += off;
 80087d8:	f142 0100 	adc.w	r1, r2, #0
		if (result32 && (t < BIT64(32))) {
 80087dc:	4283      	cmp	r3, r0
 80087de:	eb72 0301 	sbcs.w	r3, r2, r1
 80087e2:	d318      	bcc.n	8008816 <ipv6_nd_restart_reachable_timer+0x66>
			return ((uint32_t)t) / (from_hz / to_hz);
 80087e4:	230a      	movs	r3, #10
	}

	remaining = k_ticks_to_ms_ceil32(
		k_work_delayable_remaining_get(&ipv6_nd_reachable_timer));
	if (!remaining || remaining > time) {
 80087e6:	2809      	cmp	r0, #9
 80087e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80087ec:	d903      	bls.n	80087f6 <ipv6_nd_restart_reachable_timer+0x46>
 80087ee:	429c      	cmp	r4, r3
 80087f0:	eb75 0302 	sbcs.w	r3, r5, r2
 80087f4:	da16      	bge.n	8008824 <ipv6_nd_restart_reachable_timer+0x74>
		k_work_reschedule(&ipv6_nd_reachable_timer, K_MSEC(time));
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	4622      	mov	r2, r4
			return t * ((uint64_t)to_hz / from_hz);
 80087fa:	f04f 010a 	mov.w	r1, #10
 80087fe:	480b      	ldr	r0, [pc, #44]	; (800882c <ipv6_nd_restart_reachable_timer+0x7c>)
 8008800:	bfbc      	itt	lt
 8008802:	2200      	movlt	r2, #0
 8008804:	4615      	movlt	r5, r2
 8008806:	fba2 2301 	umull	r2, r3, r2, r1
 800880a:	fb01 3305 	mla	r3, r1, r5, r3
	}
}
 800880e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&ipv6_nd_reachable_timer, K_MSEC(time));
 8008812:	f009 be03 	b.w	801241c <k_work_reschedule>
			return t / ((uint64_t)from_hz / to_hz);
 8008816:	220a      	movs	r2, #10
 8008818:	2300      	movs	r3, #0
 800881a:	f7f8 f80b 	bl	8000834 <__aeabi_uldivmod>
 800881e:	460a      	mov	r2, r1
 8008820:	4603      	mov	r3, r0
	if (!remaining || remaining > time) {
 8008822:	e7e4      	b.n	80087ee <ipv6_nd_restart_reachable_timer+0x3e>
}
 8008824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008828:	24001878 	.word	0x24001878
 800882c:	24001868 	.word	0x24001868

08008830 <ipv6_ns_reply_timeout>:
{
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	f8df a098 	ldr.w	sl, [pc, #152]	; 80088d0 <ipv6_ns_reply_timeout+0xa0>
 8008838:	b085      	sub	sp, #20
	int64_t current = k_uptime_get();
 800883a:	f010 f807 	bl	801884c <k_uptime_get>
 800883e:	4c25      	ldr	r4, [pc, #148]	; (80088d4 <ipv6_ns_reply_timeout+0xa4>)
 8008840:	460f      	mov	r7, r1
 8008842:	2608      	movs	r6, #8
		data->send_ns = 0;
 8008844:	f04f 0800 	mov.w	r8, #0
 8008848:	f04f 0900 	mov.w	r9, #0
				k_work_reschedule(&ipv6_ns_reply_timer,
 800884c:	f1aa 0b10 	sub.w	fp, sl, #16
	int64_t current = k_uptime_get();
 8008850:	9001      	str	r0, [sp, #4]
		if (!nbr || !nbr->ref) {
 8008852:	7823      	ldrb	r3, [r4, #0]
 8008854:	b323      	cbz	r3, 80088a0 <ipv6_ns_reply_timeout+0x70>
 8008856:	68e5      	ldr	r5, [r4, #12]
		if (!data) {
 8008858:	b315      	cbz	r5, 80088a0 <ipv6_ns_reply_timeout+0x70>
		if (!data->send_ns) {
 800885a:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 800885e:	ea52 0103 	orrs.w	r1, r2, r3
 8008862:	d01d      	beq.n	80088a0 <ipv6_ns_reply_timeout+0x70>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
 8008864:	f512 727a 	adds.w	r2, r2, #1000	; 0x3e8
 8008868:	9901      	ldr	r1, [sp, #4]
 800886a:	f143 0300 	adc.w	r3, r3, #0
 800886e:	1a52      	subs	r2, r2, r1
 8008870:	eb63 0307 	sbc.w	r3, r3, r7
		if (remaining > 0) {
 8008874:	2a01      	cmp	r2, #1
 8008876:	f173 0100 	sbcs.w	r1, r3, #0
 800887a:	db18      	blt.n	80088ae <ipv6_ns_reply_timeout+0x7e>
 800887c:	4650      	mov	r0, sl
 800887e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008882:	f013 faad 	bl	801bde0 <z_timeout_remaining>
			if (!k_work_delayable_remaining_get(
 8008886:	ea50 0301 	orrs.w	r3, r0, r1
 800888a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800888e:	d107      	bne.n	80088a0 <ipv6_ns_reply_timeout+0x70>
			return t * ((uint64_t)to_hz / from_hz);
 8008890:	210a      	movs	r1, #10
 8008892:	fba2 2001 	umull	r2, r0, r2, r1
				k_work_reschedule(&ipv6_ns_reply_timer,
 8008896:	fb01 0303 	mla	r3, r1, r3, r0
 800889a:	4658      	mov	r0, fp
 800889c:	f009 fdbe 	bl	801241c <k_work_reschedule>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 80088a0:	3e01      	subs	r6, #1
 80088a2:	f104 0454 	add.w	r4, r4, #84	; 0x54
 80088a6:	d1d4      	bne.n	8008852 <ipv6_ns_reply_timeout+0x22>
}
 80088a8:	b005      	add	sp, #20
 80088aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!data->pending) {
 80088ae:	6828      	ldr	r0, [r5, #0]
		data->send_ns = 0;
 80088b0:	e9c5 890a 	strd	r8, r9, [r5, #40]	; 0x28
		if (!data->pending) {
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d0f3      	beq.n	80088a0 <ipv6_ns_reply_timeout+0x70>
		net_pkt_unref(data->pending);
 80088b8:	f00e fd13 	bl	80172e2 <net_pkt_unref>
		net_pkt_unref(data->pending);
 80088bc:	6828      	ldr	r0, [r5, #0]
 80088be:	f00e fd10 	bl	80172e2 <net_pkt_unref>
		data->pending = NULL;
 80088c2:	2300      	movs	r3, #0
		net_nbr_unref(nbr);
 80088c4:	4620      	mov	r0, r4
		data->pending = NULL;
 80088c6:	602b      	str	r3, [r5, #0]
		net_nbr_unref(nbr);
 80088c8:	f00f fe9f 	bl	801860a <net_nbr_unref>
 80088cc:	e7e8      	b.n	80088a0 <ipv6_ns_reply_timeout+0x70>
 80088ce:	bf00      	nop
 80088d0:	240018a8 	.word	0x240018a8
 80088d4:	24000958 	.word	0x24000958

080088d8 <dbg_update_neighbor_lladdr.constprop.0>:
static void dbg_update_neighbor_lladdr(const struct net_linkaddr *new_lladdr,
 80088d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

static inline char *net_sprint_ll_addr(const uint8_t *ll, uint8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
 80088da:	2318      	movs	r3, #24
 80088dc:	7841      	ldrb	r1, [r0, #1]
 80088de:	4a06      	ldr	r2, [pc, #24]	; (80088f8 <dbg_update_neighbor_lladdr.constprop.0+0x20>)
 80088e0:	3002      	adds	r0, #2
 80088e2:	f7fd fe4b 	bl	800657c <net_sprint_ll_addr_buf>
	snprintk(out, sizeof(out), "%s",
 80088e6:	4a05      	ldr	r2, [pc, #20]	; (80088fc <dbg_update_neighbor_lladdr.constprop.0+0x24>)
 80088e8:	4603      	mov	r3, r0
 80088ea:	2118      	movs	r1, #24
 80088ec:	4668      	mov	r0, sp
 80088ee:	f00a fbd3 	bl	8013098 <snprintk>
}
 80088f2:	b007      	add	sp, #28
 80088f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80088f8:	24003127 	.word	0x24003127
 80088fc:	0801de94 	.word	0x0801de94

08008900 <nbr_lookup.constprop.0>:
static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
 8008900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008904:	4c0e      	ldr	r4, [pc, #56]	; (8008940 <nbr_lookup.constprop.0+0x40>)
 8008906:	4607      	mov	r7, r0
 8008908:	4688      	mov	r8, r1
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800890a:	2600      	movs	r6, #0
 800890c:	4625      	mov	r5, r4
		if (!nbr->ref) {
 800890e:	7823      	ldrb	r3, [r4, #0]
 8008910:	b933      	cbnz	r3, 8008920 <nbr_lookup.constprop.0+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8008912:	3601      	adds	r6, #1
 8008914:	3454      	adds	r4, #84	; 0x54
 8008916:	2e08      	cmp	r6, #8
 8008918:	d1f9      	bne.n	800890e <nbr_lookup.constprop.0+0xe>
	return NULL;
 800891a:	2000      	movs	r0, #0
}
 800891c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (iface && nbr->iface != iface) {
 8008920:	b117      	cbz	r7, 8008928 <nbr_lookup.constprop.0+0x28>
 8008922:	68a3      	ldr	r3, [r4, #8]
 8008924:	429f      	cmp	r7, r3
 8008926:	d1f4      	bne.n	8008912 <nbr_lookup.constprop.0+0x12>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
 8008928:	68e0      	ldr	r0, [r4, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800892a:	2210      	movs	r2, #16
 800892c:	4641      	mov	r1, r8
 800892e:	3004      	adds	r0, #4
 8008930:	f00c f978 	bl	8014c24 <memcmp>
 8008934:	2800      	cmp	r0, #0
 8008936:	d1ec      	bne.n	8008912 <nbr_lookup.constprop.0+0x12>
	return &net_neighbor_pool[idx].nbr;
 8008938:	2054      	movs	r0, #84	; 0x54
 800893a:	fb00 5006 	mla	r0, r0, r6, r5
 800893e:	e7ed      	b.n	800891c <nbr_lookup.constprop.0+0x1c>
 8008940:	24000958 	.word	0x24000958

08008944 <ipv6_nbr_set_state>:
{
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	68c3      	ldr	r3, [r0, #12]
 8008948:	4604      	mov	r4, r0
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
 800894a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800894e:	428a      	cmp	r2, r1
 8008950:	d00f      	beq.n	8008972 <ipv6_nbr_set_state+0x2e>
 8008952:	2a05      	cmp	r2, #5
 8008954:	d00d      	beq.n	8008972 <ipv6_nbr_set_state+0x2e>
	net_ipv6_nbr_data(nbr)->state = new_state;
 8008956:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
 800895a:	68c2      	ldr	r2, [r0, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
 800895c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8008960:	2b02      	cmp	r3, #2
 8008962:	d106      	bne.n	8008972 <ipv6_nbr_set_state+0x2e>
		if (stale_counter + 1 != UINT32_MAX) {
 8008964:	4d16      	ldr	r5, [pc, #88]	; (80089c0 <ipv6_nbr_set_state+0x7c>)
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	1c99      	adds	r1, r3, #2
 800896a:	d003      	beq.n	8008974 <ipv6_nbr_set_state+0x30>
			net_ipv6_nbr_data(nbr)->stale_counter = stale_counter++;
 800896c:	1c59      	adds	r1, r3, #1
 800896e:	6393      	str	r3, [r2, #56]	; 0x38
 8008970:	6029      	str	r1, [r5, #0]
}
 8008972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
 8008974:	f04f 32ff 	mov.w	r2, #4294967295
 8008978:	f04f 33ff 	mov.w	r3, #4294967295
 800897c:	4811      	ldr	r0, [pc, #68]	; (80089c4 <ipv6_nbr_set_state+0x80>)
				if (!n || !n->ref) {
 800897e:	2754      	movs	r7, #84	; 0x54
 8008980:	f009 fb64 	bl	801204c <z_impl_k_sem_take>
			stale_counter = 0U;
 8008984:	2300      	movs	r3, #0
				if (!n || !n->ref) {
 8008986:	4e10      	ldr	r6, [pc, #64]	; (80089c8 <ipv6_nbr_set_state+0x84>)
			stale_counter = 0U;
 8008988:	461a      	mov	r2, r3
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 800898a:	4619      	mov	r1, r3
			stale_counter = 0U;
 800898c:	602b      	str	r3, [r5, #0]
				if (!n || !n->ref) {
 800898e:	fb07 f001 	mul.w	r0, r7, r1
 8008992:	5d80      	ldrb	r0, [r0, r6]
 8008994:	b148      	cbz	r0, 80089aa <ipv6_nbr_set_state+0x66>
 8008996:	68e0      	ldr	r0, [r4, #12]
				if (!data) {
 8008998:	b138      	cbz	r0, 80089aa <ipv6_nbr_set_state+0x66>
				if (data->state != NET_IPV6_NBR_STATE_STALE) {
 800899a:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
 800899e:	f1bc 0f02 	cmp.w	ip, #2
				data->stale_counter = stale_counter++;
 80089a2:	bf02      	ittt	eq
 80089a4:	6382      	streq	r2, [r0, #56]	; 0x38
 80089a6:	2301      	moveq	r3, #1
 80089a8:	3201      	addeq	r2, #1
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 80089aa:	3101      	adds	r1, #1
 80089ac:	2908      	cmp	r1, #8
 80089ae:	d1ee      	bne.n	800898e <ipv6_nbr_set_state+0x4a>
 80089b0:	b103      	cbz	r3, 80089b4 <ipv6_nbr_set_state+0x70>
 80089b2:	602a      	str	r2, [r5, #0]
	z_impl_k_sem_give(sem);
 80089b4:	4803      	ldr	r0, [pc, #12]	; (80089c4 <ipv6_nbr_set_state+0x80>)
}
 80089b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089ba:	f009 bb21 	b.w	8012000 <z_impl_k_sem_give>
 80089be:	bf00      	nop
 80089c0:	24002d9c 	.word	0x24002d9c
 80089c4:	24002d84 	.word	0x24002d84
 80089c8:	24000958 	.word	0x24000958

080089cc <nbr_new>:
{
 80089cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089d0:	4606      	mov	r6, r0
 80089d2:	b085      	sub	sp, #20
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
 80089d4:	481e      	ldr	r0, [pc, #120]	; (8008a50 <nbr_new+0x84>)
{
 80089d6:	460d      	mov	r5, r1
 80089d8:	4690      	mov	r8, r2
 80089da:	4699      	mov	r9, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
 80089dc:	f00f fe22 	bl	8018624 <net_nbr_get>
	if (!nbr) {
 80089e0:	4604      	mov	r4, r0
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d030      	beq.n	8008a48 <nbr_new+0x7c>
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
 80089e6:	23ff      	movs	r3, #255	; 0xff
	nbr->iface = iface;
 80089e8:	6086      	str	r6, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
 80089ea:	f105 0c10 	add.w	ip, r5, #16
 80089ee:	68c6      	ldr	r6, [r0, #12]
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
 80089f0:	7043      	strb	r3, [r0, #1]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
 80089f2:	466b      	mov	r3, sp
 80089f4:	461f      	mov	r7, r3
 80089f6:	6828      	ldr	r0, [r5, #0]
 80089f8:	3508      	adds	r5, #8
 80089fa:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80089fe:	461a      	mov	r2, r3
 8008a00:	4565      	cmp	r5, ip
 8008a02:	c203      	stmia	r2!, {r0, r1}
 8008a04:	4613      	mov	r3, r2
 8008a06:	d1f6      	bne.n	80089f6 <nbr_new+0x2a>
 8008a08:	1d35      	adds	r5, r6, #4
 8008a0a:	ab04      	add	r3, sp, #16
 8008a0c:	463e      	mov	r6, r7
 8008a0e:	3508      	adds	r5, #8
 8008a10:	ce03      	ldmia	r6!, {r0, r1}
 8008a12:	429e      	cmp	r6, r3
 8008a14:	f845 0c08 	str.w	r0, [r5, #-8]
 8008a18:	f845 1c04 	str.w	r1, [r5, #-4]
 8008a1c:	4637      	mov	r7, r6
 8008a1e:	d1f5      	bne.n	8008a0c <nbr_new+0x40>
	ipv6_nbr_set_state(nbr, state);
 8008a20:	4649      	mov	r1, r9
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7ff ff8e 	bl	8008944 <ipv6_nbr_set_state>
 8008a28:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->send_ns = 0;
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	2100      	movs	r1, #0
	net_ipv6_nbr_data(nbr)->is_router = is_router;
 8008a2e:	f883 8035 	strb.w	r8, [r3, #53]	; 0x35
	net_ipv6_nbr_data(nbr)->pending = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	68e2      	ldr	r2, [r4, #12]
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	68e2      	ldr	r2, [r4, #12]
	net_ipv6_nbr_data(nbr)->send_ns = 0;
 8008a3a:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
 8008a3e:	68e2      	ldr	r2, [r4, #12]
	net_ipv6_nbr_data(nbr)->reachable = 0;
 8008a40:	e9c2 0106 	strd	r0, r1, [r2, #24]
 8008a44:	68e2      	ldr	r2, [r4, #12]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 8008a46:	6213      	str	r3, [r2, #32]
}
 8008a48:	4620      	mov	r0, r4
 8008a4a:	b005      	add	sp, #20
 8008a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a50:	2400094c 	.word	0x2400094c

08008a54 <net_ipv6_nbr_state2str>:
	switch (state) {
 8008a54:	2805      	cmp	r0, #5
 8008a56:	bf9a      	itte	ls
 8008a58:	4b02      	ldrls	r3, [pc, #8]	; (8008a64 <net_ipv6_nbr_state2str+0x10>)
 8008a5a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
 8008a5e:	4802      	ldrhi	r0, [pc, #8]	; (8008a68 <net_ipv6_nbr_state2str+0x14>)
}
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	0801d068 	.word	0x0801d068
 8008a68:	0801ebf5 	.word	0x0801ebf5

08008a6c <net_ipv6_nbr_foreach>:
{
 8008a6c:	b507      	push	{r0, r1, r2, lr}
	struct iface_cb_data cb_data = {
 8008a6e:	e9cd 0100 	strd	r0, r1, [sp]
	net_if_foreach(iface_cb, &cb_data);
 8008a72:	4669      	mov	r1, sp
 8008a74:	4802      	ldr	r0, [pc, #8]	; (8008a80 <net_ipv6_nbr_foreach+0x14>)
 8008a76:	f7fd fc5d 	bl	8006334 <net_if_foreach>
}
 8008a7a:	b003      	add	sp, #12
 8008a7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a80:	08008785 	.word	0x08008785

08008a84 <net_ipv6_nbr_rm>:
{
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	4605      	mov	r5, r0
 8008a88:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
 8008a8a:	f7ff ff39 	bl	8008900 <nbr_lookup.constprop.0>
	if (!nbr) {
 8008a8e:	4604      	mov	r4, r0
 8008a90:	b168      	cbz	r0, 8008aae <net_ipv6_nbr_rm+0x2a>
	net_route_del_by_nexthop(iface, addr);
 8008a92:	4631      	mov	r1, r6
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 fec7 	bl	8009828 <net_route_del_by_nexthop>
	nbr_free(nbr);
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f00f fec0 	bl	8018820 <nbr_free>
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4803      	ldr	r0, [pc, #12]	; (8008ab0 <net_ipv6_nbr_rm+0x2c>)
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f7fd ff5e 	bl	8006968 <net_mgmt_event_notify_with_info>
	return true;
 8008aac:	2001      	movs	r0, #1
}
 8008aae:	bd70      	pop	{r4, r5, r6, pc}
 8008ab0:	e0600010 	.word	0xe0600010

08008ab4 <add_nbr>:
{
 8008ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	4605      	mov	r5, r0
 8008aba:	460e      	mov	r6, r1
 8008abc:	4617      	mov	r7, r2
 8008abe:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
 8008ac0:	f7ff ff1e 	bl	8008900 <nbr_lookup.constprop.0>
	if (nbr) {
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d14b      	bne.n	8008b62 <add_nbr+0xae>
	nbr = nbr_new(iface, addr, is_router, state);
 8008aca:	4643      	mov	r3, r8
 8008acc:	463a      	mov	r2, r7
 8008ace:	4631      	mov	r1, r6
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f7ff ff7b 	bl	80089cc <nbr_new>
	if (nbr) {
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d142      	bne.n	8008b62 <add_nbr+0xae>
	return z_impl_k_sem_take(sem, timeout);
 8008adc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae4:	4820      	ldr	r0, [pc, #128]	; (8008b68 <add_nbr+0xb4>)
 8008ae6:	f009 fab1 	bl	801204c <z_impl_k_sem_take>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8008aea:	4a20      	ldr	r2, [pc, #128]	; (8008b6c <add_nbr+0xb8>)
	uint32_t oldest = UINT32_MAX;
 8008aec:	f04f 30ff 	mov.w	r0, #4294967295
 8008af0:	4611      	mov	r1, r2
	int nbr_idx = -1;
 8008af2:	4603      	mov	r3, r0
		if (!nbr || !nbr->ref) {
 8008af4:	f892 c000 	ldrb.w	ip, [r2]
 8008af8:	f1bc 0f00 	cmp.w	ip, #0
 8008afc:	d015      	beq.n	8008b2a <add_nbr+0x76>
 8008afe:	f8d2 c00c 	ldr.w	ip, [r2, #12]
		if (!data || data->is_router ||
 8008b02:	f1bc 0f00 	cmp.w	ip, #0
 8008b06:	d010      	beq.n	8008b2a <add_nbr+0x76>
 8008b08:	f89c e035 	ldrb.w	lr, [ip, #53]	; 0x35
 8008b0c:	f1be 0f00 	cmp.w	lr, #0
 8008b10:	d10b      	bne.n	8008b2a <add_nbr+0x76>
 8008b12:	f89c e030 	ldrb.w	lr, [ip, #48]	; 0x30
 8008b16:	f1be 0f02 	cmp.w	lr, #2
 8008b1a:	d106      	bne.n	8008b2a <add_nbr+0x76>
		if (nbr_idx == -1) {
 8008b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
			oldest = data->stale_counter;
 8008b20:	f8dc c038 	ldr.w	ip, [ip, #56]	; 0x38
		if (nbr_idx == -1) {
 8008b24:	d01a      	beq.n	8008b5c <add_nbr+0xa8>
		if (oldest == MIN(oldest, data->stale_counter)) {
 8008b26:	4584      	cmp	ip, r0
 8008b28:	d318      	bcc.n	8008b5c <add_nbr+0xa8>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8008b2a:	3401      	adds	r4, #1
 8008b2c:	3254      	adds	r2, #84	; 0x54
 8008b2e:	2c08      	cmp	r4, #8
 8008b30:	d1e0      	bne.n	8008af4 <add_nbr+0x40>
	if (nbr_idx != -1) {
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	d007      	beq.n	8008b46 <add_nbr+0x92>
 8008b36:	2254      	movs	r2, #84	; 0x54
 8008b38:	fb02 1303 	mla	r3, r2, r3, r1
		net_ipv6_nbr_rm(nbr->iface,
 8008b3c:	68d9      	ldr	r1, [r3, #12]
 8008b3e:	6898      	ldr	r0, [r3, #8]
 8008b40:	3104      	adds	r1, #4
 8008b42:	f7ff ff9f 	bl	8008a84 <net_ipv6_nbr_rm>
	z_impl_k_sem_give(sem);
 8008b46:	4808      	ldr	r0, [pc, #32]	; (8008b68 <add_nbr+0xb4>)
 8008b48:	f009 fa5a 	bl	8012000 <z_impl_k_sem_give>
	nbr = nbr_new(iface, addr, is_router, state);
 8008b4c:	4643      	mov	r3, r8
 8008b4e:	463a      	mov	r2, r7
 8008b50:	4631      	mov	r1, r6
 8008b52:	4628      	mov	r0, r5
}
 8008b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	nbr = nbr_new(iface, addr, is_router, state);
 8008b58:	f7ff bf38 	b.w	80089cc <nbr_new>
 8008b5c:	4660      	mov	r0, ip
 8008b5e:	4623      	mov	r3, r4
 8008b60:	e7e3      	b.n	8008b2a <add_nbr+0x76>
}
 8008b62:	4620      	mov	r0, r4
 8008b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b68:	24002d84 	.word	0x24002d84
 8008b6c:	24000958 	.word	0x24000958

08008b70 <net_ipv6_send_ns>:
		     struct net_pkt *pending,
		     const struct in6_addr *src,
		     const struct in6_addr *dst,
		     const struct in6_addr *tgt,
		     bool is_my_address)
{
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	460e      	mov	r6, r1
 8008b76:	b089      	sub	sp, #36	; 0x24
 8008b78:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	2214      	movs	r2, #20
{
 8008b7e:	4680      	mov	r8, r0
 8008b80:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
	struct net_icmpv6_ns_hdr *ns_hdr;
	struct in6_addr node_dst;
	struct net_nbr *nbr;
	uint8_t llao_len;

	if (!dst) {
 8008b84:	469b      	mov	fp, r3
{
 8008b86:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
 8008b8a:	e9cd 1202 	strd	r1, r2, [sp, #8]
	if (!dst) {
 8008b8e:	b9eb      	cbnz	r3, 8008bcc <net_ipv6_send_ns+0x5c>
	dst->s6_addr[0]   = 0xFF;
 8008b90:	f240 23ff 	movw	r3, #767	; 0x2ff
 8008b94:	9304      	str	r3, [sp, #16]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
 8008b96:	f8ad b014 	strh.w	fp, [sp, #20]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
 8008b9a:	f8ad b016 	strh.w	fp, [sp, #22]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
 8008b9e:	f8ad b018 	strh.w	fp, [sp, #24]
	dst->s6_addr[10]  = 0U;
 8008ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 8008ba6:	f899 200f 	ldrb.w	r2, [r9, #15]
	dst->s6_addr[10]  = 0U;
 8008baa:	f8ad 301a 	strh.w	r3, [sp, #26]
	dst->s6_addr[12]  = 0xFF;
 8008bae:	23ff      	movs	r3, #255	; 0xff
 8008bb0:	f88d 301c 	strb.w	r3, [sp, #28]
	dst->s6_addr[13]  = src->s6_addr[13];
 8008bb4:	f899 300d 	ldrb.w	r3, [r9, #13]
 8008bb8:	f88d 301d 	strb.w	r3, [sp, #29]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 8008bbc:	f899 300e 	ldrb.w	r3, [r9, #14]
 8008bc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008bc4:	f8ad 301e 	strh.w	r3, [sp, #30]
		net_ipv6_addr_create_solicited_node(tgt, &node_dst);
		dst = &node_dst;
 8008bc8:	f10d 0b10 	add.w	fp, sp, #16
	}

	llao_len = get_llao_len(iface);

	if (is_my_address) {
 8008bcc:	f1ba 0f00 	cmp.w	sl, #0
 8008bd0:	d058      	beq.n	8008c84 <net_ipv6_send_ns+0x114>
		src = net_ipv6_unspecified_address();
 8008bd2:	f7fd fe09 	bl	80067e8 <net_ipv6_unspecified_address>
		llao_len = 0U;
 8008bd6:	2700      	movs	r7, #0
		src = net_ipv6_unspecified_address();
 8008bd8:	4605      	mov	r5, r0

			goto drop;
		}
	}

	pkt = net_pkt_alloc_with_buffer(iface,
 8008bda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bde:	2300      	movs	r3, #0
 8008be0:	f107 0114 	add.w	r1, r7, #20
 8008be4:	4640      	mov	r0, r8
 8008be6:	e9cd 2300 	strd	r2, r3, [sp]
 8008bea:	233a      	movs	r3, #58	; 0x3a
 8008bec:	2202      	movs	r2, #2
 8008bee:	f7fe fabb 	bl	8007168 <net_pkt_alloc_with_buffer>
					sizeof(struct net_icmpv6_ns_hdr) +
					llao_len,
					AF_INET6, IPPROTO_ICMPV6,
					ND_NET_BUF_TIMEOUT);
	if (!pkt) {
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	f000 8092 	beq.w	8008d1e <net_ipv6_send_ns+0x1ae>
	pkt->ipv6_hop_limit = hop_limit;
 8008bfa:	23ff      	movs	r3, #255	; 0xff
		net_pkt_set_captured(pkt, net_pkt_is_captured(pending));
	}

	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_ND_HOP_LIMIT);

	if (net_ipv6_create(pkt, src, dst) ||
 8008bfc:	465a      	mov	r2, fp
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8008c04:	f00f fd53 	bl	80186ae <net_ipv6_create>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	bb60      	cbnz	r0, 8008c66 <net_ipv6_send_ns+0xf6>
	    net_icmpv6_create(pkt, NET_ICMPV6_NS, 0)) {
 8008c0c:	2187      	movs	r1, #135	; 0x87
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f00f fb21 	bl	8018256 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
 8008c14:	4605      	mov	r5, r0
 8008c16:	bb30      	cbnz	r0, 8008c66 <net_ipv6_send_ns+0xf6>
		goto drop;
	}

	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
 8008c18:	a902      	add	r1, sp, #8
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f00e fe84 	bl	8017928 <net_pkt_get_data>
	if (!ns_hdr) {
 8008c20:	b308      	cbz	r0, 8008c66 <net_ipv6_send_ns+0xf6>
		goto drop;
	}

	ns_hdr->reserved = 0U;
 8008c22:	7005      	strb	r5, [r0, #0]
	memcpy(dest, src, sizeof(struct in6_addr));
 8008c24:	2210      	movs	r2, #16
 8008c26:	7045      	strb	r5, [r0, #1]
 8008c28:	4649      	mov	r1, r9
 8008c2a:	7085      	strb	r5, [r0, #2]
 8008c2c:	3004      	adds	r0, #4
 8008c2e:	f800 5c01 	strb.w	r5, [r0, #-1]
 8008c32:	f00c f820 	bl	8014c76 <memcpy>
	net_ipv6_addr_copy_raw(ns_hdr->tgt, (uint8_t *)tgt);

	if (net_pkt_set_data(pkt, &ns_access)) {
 8008c36:	a902      	add	r1, sp, #8
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f00e fe94 	bl	8017966 <net_pkt_set_data>
 8008c3e:	4605      	mov	r5, r0
 8008c40:	b988      	cbnz	r0, 8008c66 <net_ipv6_send_ns+0xf6>
		goto drop;
	}

	if (!is_my_address) {
 8008c42:	f1ba 0f00 	cmp.w	sl, #0
 8008c46:	d02f      	beq.n	8008ca8 <net_ipv6_send_ns+0x138>
			      llao_len, NET_ICMPV6_ND_OPT_SLLAO)) {
			goto drop;
		}
	}

	net_pkt_cursor_init(pkt);
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f00e fbdc 	bl	8017406 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 8008c4e:	213a      	movs	r1, #58	; 0x3a
 8008c50:	4620      	mov	r0, r4
 8008c52:	f00f fd75 	bl	8018740 <net_ipv6_finalize>

	nbr = add_nbr(iface, tgt, false,
 8008c56:	2300      	movs	r3, #0
 8008c58:	4649      	mov	r1, r9
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	f7ff ff29 	bl	8008ab4 <add_nbr>
		      NET_IPV6_NBR_STATE_INCOMPLETE);
	if (!nbr) {
 8008c62:	4607      	mov	r7, r0
 8008c64:	bb58      	cbnz	r0, 8008cbe <net_ipv6_send_ns+0x14e>
	net_stats_update_ipv6_nd_sent(iface);

	return 0;

drop:
	if (pending) {
 8008c66:	2e00      	cmp	r6, #0
 8008c68:	d050      	beq.n	8008d0c <net_ipv6_send_ns+0x19c>
 8008c6a:	f06f 0568 	mvn.w	r5, #104	; 0x68
		net_pkt_unref(pending);
 8008c6e:	4630      	mov	r0, r6
 8008c70:	f00e fb37 	bl	80172e2 <net_pkt_unref>
	}

	if (pkt) {
 8008c74:	b114      	cbz	r4, 8008c7c <net_ipv6_send_ns+0x10c>
		net_pkt_unref(pkt);
 8008c76:	4620      	mov	r0, r4
 8008c78:	f00e fb33 	bl	80172e2 <net_pkt_unref>
	}

	net_stats_update_ipv6_nd_drop(iface);

	return ret;
}
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	b009      	add	sp, #36	; 0x24
 8008c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t total_len = net_if_get_link_addr(iface)->len +
 8008c84:	f8d8 3000 	ldr.w	r3, [r8]
 8008c88:	7d1f      	ldrb	r7, [r3, #20]
		if (!src) {
 8008c8a:	b925      	cbnz	r5, 8008c96 <net_ipv6_send_ns+0x126>
			src = net_if_ipv6_select_src_addr(iface, tgt);
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	4640      	mov	r0, r8
 8008c90:	f7fd f900 	bl	8005e94 <net_if_ipv6_select_src_addr>
 8008c94:	4605      	mov	r5, r0
		if (net_ipv6_is_addr_unspecified(src)) {
 8008c96:	4628      	mov	r0, r5
 8008c98:	f00f fda4 	bl	80187e4 <net_ipv6_is_addr_unspecified>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d138      	bne.n	8008d12 <net_ipv6_send_ns+0x1a2>
	return ROUND_UP(total_len, 8U);
 8008ca0:	3709      	adds	r7, #9
 8008ca2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8008ca6:	e798      	b.n	8008bda <net_ipv6_send_ns+0x6a>
	return &iface->if_dev->link_addr;
 8008ca8:	f8d8 1000 	ldr.w	r1, [r8]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
 8008cac:	2301      	movs	r3, #1
 8008cae:	463a      	mov	r2, r7
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	3110      	adds	r1, #16
 8008cb4:	f00f fdd2 	bl	801885c <set_llao>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d1c5      	bne.n	8008c48 <net_ipv6_send_ns+0xd8>
 8008cbc:	e7d3      	b.n	8008c66 <net_ipv6_send_ns+0xf6>
	if (pending) {
 8008cbe:	b1e6      	cbz	r6, 8008cfa <net_ipv6_send_ns+0x18a>
 8008cc0:	f8d0 800c 	ldr.w	r8, [r0, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
 8008cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1ce      	bne.n	8008c6a <net_ipv6_send_ns+0xfa>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f00e fae8 	bl	80172a2 <net_pkt_ref>
 8008cd2:	f8c8 0000 	str.w	r0, [r8]
 8008cd6:	f8d7 800c 	ldr.w	r8, [r7, #12]
		net_ipv6_nbr_data(nbr)->send_ns = k_uptime_get();
 8008cda:	f00f fdb7 	bl	801884c <k_uptime_get>
 8008cde:	e9c8 010a 	strd	r0, r1, [r8, #40]	; 0x28
 8008ce2:	4810      	ldr	r0, [pc, #64]	; (8008d24 <net_ipv6_send_ns+0x1b4>)
 8008ce4:	f013 f87c 	bl	801bde0 <z_timeout_remaining>
		if (!k_work_delayable_remaining_get(&ipv6_ns_reply_timer)) {
 8008ce8:	ea50 0301 	orrs.w	r3, r0, r1
 8008cec:	d105      	bne.n	8008cfa <net_ipv6_send_ns+0x18a>
			k_work_reschedule(&ipv6_ns_reply_timer,
 8008cee:	f242 7210 	movw	r2, #10000	; 0x2710
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	480c      	ldr	r0, [pc, #48]	; (8008d28 <net_ipv6_send_ns+0x1b8>)
 8008cf6:	f009 fb91 	bl	801241c <k_work_reschedule>
	if (net_send_data(pkt) < 0) {
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f00c fca3 	bl	8015646 <net_send_data>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	dabb      	bge.n	8008c7c <net_ipv6_send_ns+0x10c>
		if (pending) {
 8008d04:	b116      	cbz	r6, 8008d0c <net_ipv6_send_ns+0x19c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f00f fd7d 	bl	8018806 <nbr_clear_ns_pending>
	if (pending) {
 8008d0c:	f06f 0568 	mvn.w	r5, #104	; 0x68
 8008d10:	e7b1      	b.n	8008c76 <net_ipv6_send_ns+0x106>
			ret = -EINVAL;
 8008d12:	f06f 0515 	mvn.w	r5, #21
	if (pending) {
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	d0b0      	beq.n	8008c7c <net_ipv6_send_ns+0x10c>
 8008d1a:	2400      	movs	r4, #0
 8008d1c:	e7a7      	b.n	8008c6e <net_ipv6_send_ns+0xfe>
		ret = -ENOMEM;
 8008d1e:	f06f 050b 	mvn.w	r5, #11
 8008d22:	e7f8      	b.n	8008d16 <net_ipv6_send_ns+0x1a6>
 8008d24:	240018a8 	.word	0x240018a8
 8008d28:	24001898 	.word	0x24001898

08008d2c <net_ipv6_nbr_add>:
{
 8008d2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008d30:	4615      	mov	r5, r2
 8008d32:	461a      	mov	r2, r3
	nbr = add_nbr(iface, addr, is_router, state);
 8008d34:	f89d 3020 	ldrb.w	r3, [sp, #32]
{
 8008d38:	4606      	mov	r6, r0
 8008d3a:	4688      	mov	r8, r1
	nbr = add_nbr(iface, addr, is_router, state);
 8008d3c:	f7ff feba 	bl	8008ab4 <add_nbr>
	if (!nbr) {
 8008d40:	4604      	mov	r4, r0
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d038      	beq.n	8008db8 <net_ipv6_nbr_add+0x8c>
	if (lladdr && net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
 8008d46:	b305      	cbz	r5, 8008d8a <net_ipv6_nbr_add+0x5e>
 8008d48:	462a      	mov	r2, r5
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	f7ff fab0 	bl	80082b0 <net_nbr_link>
 8008d50:	3078      	adds	r0, #120	; 0x78
 8008d52:	d11a      	bne.n	8008d8a <net_ipv6_nbr_add+0x5e>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
 8008d54:	68e3      	ldr	r3, [r4, #12]
	if (lladdr && net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
 8008d56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d5a:	2b05      	cmp	r3, #5
 8008d5c:	d026      	beq.n	8008dac <net_ipv6_nbr_add+0x80>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
 8008d5e:	7860      	ldrb	r0, [r4, #1]
 8008d60:	f7ff fb24 	bl	80083ac <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
 8008d64:	792a      	ldrb	r2, [r5, #4]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
 8008d66:	4607      	mov	r7, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
 8008d68:	6829      	ldr	r1, [r5, #0]
 8008d6a:	3002      	adds	r0, #2
 8008d6c:	f00b ff5a 	bl	8014c24 <memcmp>
 8008d70:	b1b8      	cbz	r0, 8008da2 <net_ipv6_nbr_add+0x76>
			dbg_update_neighbor_lladdr(lladdr, cached_lladdr, addr);
 8008d72:	4638      	mov	r0, r7
 8008d74:	f7ff fdb0 	bl	80088d8 <dbg_update_neighbor_lladdr.constprop.0>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
 8008d78:	792a      	ldrb	r2, [r5, #4]
 8008d7a:	6829      	ldr	r1, [r5, #0]
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f00f fdbf 	bl	8018900 <net_linkaddr_set.isra.0>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
 8008d82:	2102      	movs	r1, #2
 8008d84:	4620      	mov	r0, r4
 8008d86:	f7ff fddd 	bl	8008944 <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
 8008d8a:	68e3      	ldr	r3, [r4, #12]
 8008d8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d90:	b963      	cbnz	r3, 8008dac <net_ipv6_nbr_add+0x80>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
 8008d92:	461a      	mov	r2, r3
 8008d94:	4619      	mov	r1, r3
 8008d96:	4630      	mov	r0, r6
 8008d98:	e9cd 8300 	strd	r8, r3, [sp]
 8008d9c:	f7ff fee8 	bl	8008b70 <net_ipv6_send_ns>
		if (ret < 0) {
 8008da0:	e004      	b.n	8008dac <net_ipv6_nbr_add+0x80>
		} else if (net_ipv6_nbr_data(nbr)->state ==
 8008da2:	68e3      	ldr	r3, [r4, #12]
 8008da4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d0ea      	beq.n	8008d82 <net_ipv6_nbr_add+0x56>
 8008dac:	2300      	movs	r3, #0
 8008dae:	4631      	mov	r1, r6
 8008db0:	4803      	ldr	r0, [pc, #12]	; (8008dc0 <net_ipv6_nbr_add+0x94>)
 8008db2:	461a      	mov	r2, r3
 8008db4:	f7fd fdd8 	bl	8006968 <net_mgmt_event_notify_with_info>
}
 8008db8:	4620      	mov	r0, r4
 8008dba:	b002      	add	sp, #8
 8008dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc0:	e060000f 	.word	0xe060000f

08008dc4 <handle_ra_input>:
#endif

static enum net_verdict handle_ra_input(struct net_pkt *pkt,
					struct net_ipv6_hdr *ip_hdr,
					struct net_icmp_hdr *icmp_hdr)
{
 8008dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
 8008dc8:	230c      	movs	r3, #12
{
 8008dca:	b09b      	sub	sp, #108	; 0x6c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
 8008dcc:	2500      	movs	r5, #0
{
 8008dce:	4604      	mov	r4, r0
 8008dd0:	460f      	mov	r7, r1
 8008dd2:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
 8008dd4:	e9cd 5308 	strd	r5, r3, [sp, #32]
					      struct net_icmpv6_ra_hdr);
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 8008dd8:	ab04      	add	r3, sp, #16
 8008dda:	930a      	str	r3, [sp, #40]	; 0x28
 8008ddc:	2302      	movs	r3, #2
 8008dde:	930b      	str	r3, [sp, #44]	; 0x2c
	uint16_t length = net_pkt_get_len(pkt);
 8008de0:	6883      	ldr	r3, [r0, #8]
	while (buf) {
 8008de2:	b943      	cbnz	r3, 8008df6 <handle_ra_input+0x32>
	struct net_icmpv6_ra_hdr *ra_hdr;
	struct net_if_router *router;
	uint32_t mtu, reachable_time, retrans_timer;
	uint16_t router_lifetime;

	if (net_if_flag_is_set(net_pkt_iface(pkt), NET_IF_IPV6_NO_ND)) {
 8008de4:	210b      	movs	r1, #11
 8008de6:	69a0      	ldr	r0, [r4, #24]
 8008de8:	f00f fd7d 	bl	80188e6 <net_if_flag_is_set>
 8008dec:	b138      	cbz	r0, 8008dfe <handle_ra_input+0x3a>
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
 8008dee:	2002      	movs	r0, #2
}
 8008df0:	b01b      	add	sp, #108	; 0x6c
 8008df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bytes += buf->len;
 8008df6:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
 8008df8:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 8008dfa:	4415      	add	r5, r2
		buf = buf->frags;
 8008dfc:	e7f1      	b.n	8008de2 <handle_ra_input+0x1e>
	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
 8008dfe:	a908      	add	r1, sp, #32
 8008e00:	4620      	mov	r0, r4
 8008e02:	f00e fd91 	bl	8017928 <net_pkt_get_data>
	if (!ra_hdr) {
 8008e06:	4606      	mov	r6, r0
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d0f0      	beq.n	8008dee <handle_ra_input+0x2a>
	if (((length < (sizeof(struct net_ipv6_hdr) +
 8008e0c:	b2ad      	uxth	r5, r5
 8008e0e:	2d39      	cmp	r5, #57	; 0x39
 8008e10:	d907      	bls.n	8008e22 <handle_ra_input+0x5e>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	2bff      	cmp	r3, #255	; 0xff
 8008e16:	d104      	bne.n	8008e22 <handle_ra_input+0x5e>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
 8008e18:	893a      	ldrh	r2, [r7, #8]
 8008e1a:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d003      	beq.n	8008e2a <handle_ra_input+0x66>
	     !net_ipv6_is_ll_addr((struct in6_addr *)ip_hdr->src)) &&
 8008e22:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e1      	bne.n	8008dee <handle_ra_input+0x2a>
	net_pkt_acknowledge_data(pkt, &ra_access);
 8008e2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f00f fd65 	bl	80188fc <net_pkt_acknowledge_data.isra.0>
	router_lifetime = ntohs(ra_hdr->router_lifetime);
 8008e32:	8873      	ldrh	r3, [r6, #2]
 8008e34:	6875      	ldr	r5, [r6, #4]
 8008e36:	f8d6 8008 	ldr.w	r8, [r6, #8]
	if (ra_hdr->cur_hop_limit) {
 8008e3a:	7831      	ldrb	r1, [r6, #0]
 8008e3c:	ba2d      	rev	r5, r5
 8008e3e:	fa98 f888 	rev.w	r8, r8
 8008e42:	9302      	str	r3, [sp, #8]
 8008e44:	b111      	cbz	r1, 8008e4c <handle_ra_input+0x88>
		net_ipv6_set_hop_limit(net_pkt_iface(pkt),
 8008e46:	69a0      	ldr	r0, [r4, #24]
 8008e48:	f00c ffb6 	bl	8015db8 <net_ipv6_set_hop_limit>
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
 8008e4c:	1e6a      	subs	r2, r5, #1
 8008e4e:	4ba0      	ldr	r3, [pc, #640]	; (80090d0 <handle_ra_input+0x30c>)
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d210      	bcs.n	8008e76 <handle_ra_input+0xb2>
	return pkt->iface;
 8008e54:	69a3      	ldr	r3, [r4, #24]
 8008e56:	689b      	ldr	r3, [r3, #8]
	if (!iface->config.ip.ipv6) {
 8008e58:	b12b      	cbz	r3, 8008e66 <handle_ra_input+0xa2>
 8008e5a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8008e5e:	4295      	cmp	r5, r2
 8008e60:	d009      	beq.n	8008e76 <handle_ra_input+0xb2>
	iface->config.ip.ipv6->base_reachable_time = reachable_time;
 8008e62:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
		net_if_ipv6_set_reachable_time(
 8008e66:	69a3      	ldr	r3, [r4, #24]
 8008e68:	689d      	ldr	r5, [r3, #8]
	if (ipv6 == NULL) {
 8008e6a:	b125      	cbz	r5, 8008e76 <handle_ra_input+0xb2>
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	f00c fff5 	bl	8015e5c <net_if_ipv6_calc_reachable_time>
 8008e72:	f8c5 0114 	str.w	r0, [r5, #276]	; 0x114
	if (retrans_timer) {
 8008e76:	f1b8 0f00 	cmp.w	r8, #0
 8008e7a:	d005      	beq.n	8008e88 <handle_ra_input+0xc4>
 8008e7c:	69a3      	ldr	r3, [r4, #24]
 8008e7e:	689b      	ldr	r3, [r3, #8]
	if (!iface->config.ip.ipv6) {
 8008e80:	b113      	cbz	r3, 8008e88 <handle_ra_input+0xc4>
		net_if_ipv6_set_retrans_timer(net_pkt_iface(pkt),
 8008e82:	68b2      	ldr	r2, [r6, #8]
	iface->config.ip.ipv6->retrans_timer = retrans_timer;
 8008e84:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	pkt->ipv6_ext_opt_len = len;
 8008e88:	230c      	movs	r3, #12
				net_pkt_get_data(pkt, &nd_access);
 8008e8a:	a90a      	add	r1, sp, #40	; 0x28
 8008e8c:	4620      	mov	r0, r4
			if (net_pkt_skip(pkt, 2) ||
 8008e8e:	f04f 0902 	mov.w	r9, #2
 8008e92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if (net_pkt_skip(pkt, nd_opt_hdr->len * 8U - 2)) {
 8008e96:	f04f 0a08 	mov.w	sl, #8
				net_pkt_get_data(pkt, &nd_access);
 8008e9a:	f00e fd45 	bl	8017928 <net_pkt_get_data>
	return pkt->frags->data;
 8008e9e:	68a3      	ldr	r3, [r4, #8]
	nbr = net_ipv6_nbr_add(net_pkt_iface(pkt), (struct in6_addr *)NET_IPV6_HDR(pkt)->src, NULL,
 8008ea0:	2200      	movs	r2, #0
				net_pkt_get_data(pkt, &nd_access);
 8008ea2:	4605      	mov	r5, r0
	nbr = net_ipv6_nbr_add(net_pkt_iface(pkt), (struct in6_addr *)NET_IPV6_HDR(pkt)->src, NULL,
 8008ea4:	68d9      	ldr	r1, [r3, #12]
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	69a0      	ldr	r0, [r4, #24]
 8008eaa:	3108      	adds	r1, #8
 8008eac:	9200      	str	r2, [sp, #0]
 8008eae:	f7ff ff3d 	bl	8008d2c <net_ipv6_nbr_add>
 8008eb2:	4606      	mov	r6, r0
	while (nd_opt_hdr) {
 8008eb4:	bb3d      	cbnz	r5, 8008f06 <handle_ra_input+0x142>
 8008eb6:	9b02      	ldr	r3, [sp, #8]
					   (struct in6_addr *)ip_hdr->src);
 8008eb8:	3708      	adds	r7, #8
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
 8008eba:	69a0      	ldr	r0, [r4, #24]
 8008ebc:	ba5d      	rev16	r5, r3
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	f00c ff4e 	bl	8015d60 <net_if_ipv6_router_lookup>
	if (router) {
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	b2ad      	uxth	r5, r5
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	f000 81f8 	beq.w	80092be <handle_ra_input+0x4fa>
		if (!router_lifetime) {
 8008ece:	2d00      	cmp	r5, #0
 8008ed0:	f040 81eb 	bne.w	80092aa <handle_ra_input+0x4e6>
			net_if_ipv6_router_rm(router);
 8008ed4:	f00c ff60 	bl	8015d98 <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
 8008ed8:	b16e      	cbz	r6, 8008ef6 <handle_ra_input+0x132>
 8008eda:	68f3      	ldr	r3, [r6, #12]
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	b150      	cbz	r0, 8008ef6 <handle_ra_input+0x132>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
 8008ee0:	f00c fbb1 	bl	8015646 <net_send_data>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	da03      	bge.n	8008ef0 <handle_ra_input+0x12c>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
 8008ee8:	68f3      	ldr	r3, [r6, #12]
 8008eea:	6818      	ldr	r0, [r3, #0]
 8008eec:	f00e f9f9 	bl	80172e2 <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
 8008ef0:	68f0      	ldr	r0, [r6, #12]
 8008ef2:	f00f fc88 	bl	8018806 <nbr_clear_ns_pending>
	net_if_stop_rs(net_pkt_iface(pkt));
 8008ef6:	69a0      	ldr	r0, [r4, #24]
 8008ef8:	f7fc fa28 	bl	800534c <net_if_stop_rs>
	net_pkt_unref(pkt);
 8008efc:	4620      	mov	r0, r4
 8008efe:	f00e f9f0 	bl	80172e2 <net_pkt_unref>
	return NET_OK;
 8008f02:	2000      	movs	r0, #0
 8008f04:	e774      	b.n	8008df0 <handle_ra_input+0x2c>
		net_pkt_acknowledge_data(pkt, &nd_access);
 8008f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f00f fcf7 	bl	80188fc <net_pkt_acknowledge_data.isra.0>
		switch (nd_opt_hdr->type) {
 8008f0e:	f895 8000 	ldrb.w	r8, [r5]
 8008f12:	f1b8 0f05 	cmp.w	r8, #5
 8008f16:	d078      	beq.n	800900a <handle_ra_input+0x246>
 8008f18:	786d      	ldrb	r5, [r5, #1]
 8008f1a:	d810      	bhi.n	8008f3e <handle_ra_input+0x17a>
 8008f1c:	f1b8 0f01 	cmp.w	r8, #1
 8008f20:	d050      	beq.n	8008fc4 <handle_ra_input+0x200>
 8008f22:	f1b8 0f03 	cmp.w	r8, #3
 8008f26:	f000 808c 	beq.w	8009042 <handle_ra_input+0x27e>
			if (net_pkt_skip(pkt, nd_opt_hdr->len * 8U - 2)) {
 8008f2a:	f06f 0101 	mvn.w	r1, #1
 8008f2e:	4620      	mov	r0, r4
 8008f30:	fb0a 1105 	mla	r1, sl, r5, r1
 8008f34:	f00e facb 	bl	80174ce <net_pkt_skip>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d060      	beq.n	8008ffe <handle_ra_input+0x23a>
 8008f3c:	e757      	b.n	8008dee <handle_ra_input+0x2a>
		switch (nd_opt_hdr->type) {
 8008f3e:	f1b8 0f18 	cmp.w	r8, #24
 8008f42:	f000 816b 	beq.w	800921c <handle_ra_input+0x458>
 8008f46:	f1b8 0f19 	cmp.w	r8, #25
 8008f4a:	d1ee      	bne.n	8008f2a <handle_ra_input+0x166>
	NET_PKT_DATA_ACCESS_DEFINE(rdnss_access, struct net_icmpv6_nd_opt_rdnss);
 8008f4c:	ab06      	add	r3, sp, #24
	struct sockaddr_in6 dns = {
 8008f4e:	2100      	movs	r1, #0
 8008f50:	2218      	movs	r2, #24
	NET_PKT_DATA_ACCESS_DEFINE(rdnss_access, struct net_icmpv6_nd_opt_rdnss);
 8008f52:	930c      	str	r3, [sp, #48]	; 0x30
 8008f54:	2306      	movs	r3, #6
 8008f56:	930d      	str	r3, [sp, #52]	; 0x34
	struct sockaddr_in6 dns = {
 8008f58:	ab12      	add	r3, sp, #72	; 0x48
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f00b fe96 	bl	8014c8c <memset>
	const struct sockaddr *dns_servers[] = {
 8008f60:	2300      	movs	r3, #0
 8008f62:	900e      	str	r0, [sp, #56]	; 0x38
	rdnss = (struct net_icmpv6_nd_opt_rdnss *) net_pkt_get_data(pkt, &rdnss_access);
 8008f64:	a90c      	add	r1, sp, #48	; 0x30
 8008f66:	4620      	mov	r0, r4
	struct sockaddr_in6 dns = {
 8008f68:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
	const struct sockaddr *dns_servers[] = {
 8008f6c:	930f      	str	r3, [sp, #60]	; 0x3c
	rdnss = (struct net_icmpv6_nd_opt_rdnss *) net_pkt_get_data(pkt, &rdnss_access);
 8008f6e:	f00e fcdb 	bl	8017928 <net_pkt_get_data>
	if (!rdnss) {
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f43f af3b 	beq.w	8008dee <handle_ra_input+0x2a>
	ret = net_pkt_acknowledge_data(pkt, &rdnss_access);
 8008f78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f00f fcbe 	bl	80188fc <net_pkt_acknowledge_data.isra.0>
	if (ret < 0) {
 8008f80:	2800      	cmp	r0, #0
 8008f82:	f6ff af34 	blt.w	8008dee <handle_ra_input+0x2a>
	rdnss_size = len * 8U - 2 - sizeof(struct net_icmpv6_nd_opt_rdnss);
 8008f86:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
 8008f8a:	3d01      	subs	r5, #1
	if ((rdnss_size % NET_IPV6_ADDR_SIZE) != 0) {
 8008f8c:	07eb      	lsls	r3, r5, #31
	rdnss_size = len * 8U - 2 - sizeof(struct net_icmpv6_nd_opt_rdnss);
 8008f8e:	ea4f 08c5 	mov.w	r8, r5, lsl #3
	if ((rdnss_size % NET_IPV6_ADDR_SIZE) != 0) {
 8008f92:	f53f af2c 	bmi.w	8008dee <handle_ra_input+0x2a>
	ret = net_pkt_read(pkt, dns.sin6_addr.s6_addr, NET_IPV6_ADDR_SIZE);
 8008f96:	2210      	movs	r2, #16
 8008f98:	a913      	add	r1, sp, #76	; 0x4c
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f00e fb4e 	bl	801763c <net_pkt_read>
	if (ret < 0) {
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	f6ff af24 	blt.w	8008dee <handle_ra_input+0x2a>
	if (net_pkt_skip(pkt, rdnss_size - NET_IPV6_ADDR_SIZE)) {
 8008fa6:	f1a8 0110 	sub.w	r1, r8, #16
 8008faa:	4620      	mov	r0, r4
 8008fac:	f00e fa8f 	bl	80174ce <net_pkt_skip>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	f47f af1c 	bne.w	8008dee <handle_ra_input+0x2a>
	ctx = dns_resolve_get_default();
 8008fb6:	f005 fe7f 	bl	800ecb8 <dns_resolve_get_default>
	ret = dns_resolve_reconfigure(ctx, NULL, dns_servers);
 8008fba:	aa0e      	add	r2, sp, #56	; 0x38
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	f011 fa2b 	bl	801a418 <dns_resolve_reconfigure>
	return true;
 8008fc2:	e01c      	b.n	8008ffe <handle_ra_input+0x23a>
	if (!read_llao(pkt, len, &llstorage)) {
 8008fc4:	aa12      	add	r2, sp, #72	; 0x48
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f00f fc6a 	bl	80188a2 <read_llao>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f43f af0d 	beq.w	8008dee <handle_ra_input+0x2a>
	lladdr.len = llstorage.len;
 8008fd4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
 8008fd8:	aa0e      	add	r2, sp, #56	; 0x38
 8008fda:	69a0      	ldr	r0, [r4, #24]
	lladdr.len = llstorage.len;
 8008fdc:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	lladdr.addr = llstorage.addr;
 8008fe0:	f10d 034a 	add.w	r3, sp, #74	; 0x4a
 8008fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8008fe6:	68a3      	ldr	r3, [r4, #8]
				(struct in6_addr *)NET_IPV6_HDR(pkt)->src,
 8008fe8:	68d9      	ldr	r1, [r3, #12]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
 8008fea:	4643      	mov	r3, r8
 8008fec:	f8cd 9000 	str.w	r9, [sp]
 8008ff0:	3108      	adds	r1, #8
 8008ff2:	f7ff fe9b 	bl	8008d2c <net_ipv6_nbr_add>
			if (!nbr) {
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	f43f aef8 	beq.w	8008dee <handle_ra_input+0x2a>
					net_pkt_get_data(pkt, &nd_access);
 8008ffe:	a90a      	add	r1, sp, #40	; 0x28
 8009000:	4620      	mov	r0, r4
 8009002:	f00e fc91 	bl	8017928 <net_pkt_get_data>
 8009006:	4605      	mov	r5, r0
 8009008:	e754      	b.n	8008eb4 <handle_ra_input+0xf0>
			if (net_pkt_skip(pkt, 2) ||
 800900a:	2102      	movs	r1, #2
 800900c:	4620      	mov	r0, r4
 800900e:	f00e fa5e 	bl	80174ce <net_pkt_skip>
 8009012:	2800      	cmp	r0, #0
 8009014:	f47f aeeb 	bne.w	8008dee <handle_ra_input+0x2a>
			    net_pkt_read_be32(pkt, &mtu)) {
 8009018:	a905      	add	r1, sp, #20
 800901a:	4620      	mov	r0, r4
 800901c:	f00e fb17 	bl	801764e <net_pkt_read_be32>
			if (net_pkt_skip(pkt, 2) ||
 8009020:	2800      	cmp	r0, #0
 8009022:	f47f aee4 	bne.w	8008dee <handle_ra_input+0x2a>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
 8009026:	9b05      	ldr	r3, [sp, #20]
 8009028:	f5a3 62a0 	sub.w	r2, r3, #1280	; 0x500
 800902c:	f5b2 4f7b 	cmp.w	r2, #64256	; 0xfb00
 8009030:	f4bf aedd 	bcs.w	8008dee <handle_ra_input+0x2a>
	return pkt->iface;
 8009034:	69a2      	ldr	r2, [r4, #24]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
 8009036:	b29b      	uxth	r3, r3
	if (iface == NULL) {
 8009038:	2a00      	cmp	r2, #0
 800903a:	d0e0      	beq.n	8008ffe <handle_ra_input+0x23a>
	iface->if_dev->mtu = mtu;
 800903c:	6812      	ldr	r2, [r2, #0]
 800903e:	8313      	strh	r3, [r2, #24]
 8009040:	e7dd      	b.n	8008ffe <handle_ra_input+0x23a>
			if (nd_opt_hdr->len != 4) {
 8009042:	2d04      	cmp	r5, #4
 8009044:	f47f aed3 	bne.w	8008dee <handle_ra_input+0x2a>
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
 8009048:	ab12      	add	r3, sp, #72	; 0x48
				net_pkt_get_data(pkt, &rapfx_access);
 800904a:	a90c      	add	r1, sp, #48	; 0x30
 800904c:	4620      	mov	r0, r4
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
 800904e:	930c      	str	r3, [sp, #48]	; 0x30
 8009050:	231e      	movs	r3, #30
 8009052:	930d      	str	r3, [sp, #52]	; 0x34
				net_pkt_get_data(pkt, &rapfx_access);
 8009054:	f00e fc68 	bl	8017928 <net_pkt_get_data>
	if (!pfx_info) {
 8009058:	4605      	mov	r5, r0
 800905a:	2800      	cmp	r0, #0
 800905c:	f43f aec7 	beq.w	8008dee <handle_ra_input+0x2a>
	net_pkt_acknowledge_data(pkt, &rapfx_access);
 8009060:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009062:	4620      	mov	r0, r4
 8009064:	f00f fc4a 	bl	80188fc <net_pkt_acknowledge_data.isra.0>
	valid_lifetime = ntohl(pfx_info->valid_lifetime);
 8009068:	f8d5 8002 	ldr.w	r8, [r5, #2]
 800906c:	f8d5 3006 	ldr.w	r3, [r5, #6]
 8009070:	fa98 f888 	rev.w	r8, r8
	preferred_lifetime = ntohl(pfx_info->preferred_lifetime);
 8009074:	ba1b      	rev	r3, r3
	if (valid_lifetime >= preferred_lifetime &&
 8009076:	4598      	cmp	r8, r3
 8009078:	d3c1      	bcc.n	8008ffe <handle_ra_input+0x23a>
 800907a:	89ea      	ldrh	r2, [r5, #14]
 800907c:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8009080:	429a      	cmp	r2, r3
 8009082:	d0bc      	beq.n	8008ffe <handle_ra_input+0x23a>
		if (pfx_info->flags & NET_ICMPV6_RA_FLAG_ONLINK) {
 8009084:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8009088:	2b00      	cmp	r3, #0
 800908a:	da2a      	bge.n	80090e2 <handle_ra_input+0x31e>
					   (struct in6_addr *)prefix_info->prefix,
 800908c:	46ab      	mov	fp, r5
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
 800908e:	69a0      	ldr	r0, [r4, #24]
 8009090:	f81b 2b0e 	ldrb.w	r2, [fp], #14
 8009094:	4659      	mov	r1, fp
 8009096:	f00c fe34 	bl	8015d02 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
 800909a:	b940      	cbnz	r0, 80090ae <handle_ra_input+0x2ea>
		if (!prefix_info->valid_lifetime) {
 800909c:	f8d5 3002 	ldr.w	r3, [r5, #2]
 80090a0:	b1fb      	cbz	r3, 80090e2 <handle_ra_input+0x31e>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
 80090a2:	782a      	ldrb	r2, [r5, #0]
 80090a4:	4659      	mov	r1, fp
 80090a6:	69a0      	ldr	r0, [r4, #24]
 80090a8:	f7fc fd7c 	bl	8005ba4 <net_if_ipv6_prefix_add>
		if (prefix) {
 80090ac:	b1c8      	cbz	r0, 80090e2 <handle_ra_input+0x31e>
	switch (prefix_info->valid_lifetime) {
 80090ae:	f8d5 3002 	ldr.w	r3, [r5, #2]
 80090b2:	b17b      	cbz	r3, 80090d4 <handle_ra_input+0x310>
 80090b4:	3301      	adds	r3, #1
 80090b6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80090ba:	d060      	beq.n	800917e <handle_ra_input+0x3ba>
	prefix->is_infinite = is_infinite;
 80090bc:	f36f 0300 	bfc	r3, #0, #1
 80090c0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
		net_if_ipv6_prefix_set_timer(prefix,
 80090c4:	f8d5 1002 	ldr.w	r1, [r5, #2]
 80090c8:	f7fc fe46 	bl	8005d58 <net_if_ipv6_prefix_set_timer>
		break;
 80090cc:	e009      	b.n	80090e2 <handle_ra_input+0x31e>
 80090ce:	bf00      	nop
 80090d0:	0036ee80 	.word	0x0036ee80
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
 80090d4:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80090d8:	f100 0110 	add.w	r1, r0, #16
 80090dc:	69a0      	ldr	r0, [r4, #24]
 80090de:	f7fc fe87 	bl	8005df0 <net_if_ipv6_prefix_rm>
		if ((pfx_info->flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
 80090e2:	786b      	ldrb	r3, [r5, #1]
 80090e4:	065a      	lsls	r2, r3, #25
 80090e6:	d58a      	bpl.n	8008ffe <handle_ra_input+0x23a>
 80090e8:	f1b8 0f00 	cmp.w	r8, #0
 80090ec:	d087      	beq.n	8008ffe <handle_ra_input+0x23a>
		    valid_lifetime &&
 80090ee:	782b      	ldrb	r3, [r5, #0]
 80090f0:	2b40      	cmp	r3, #64	; 0x40
 80090f2:	d184      	bne.n	8008ffe <handle_ra_input+0x23a>
	struct in6_addr addr = { };
 80090f4:	2210      	movs	r2, #16
 80090f6:	2100      	movs	r1, #0
 80090f8:	a80e      	add	r0, sp, #56	; 0x38
 80090fa:	f00b fdc7 	bl	8014c8c <memset>
	return &iface->if_dev->link_addr;
 80090fe:	69a3      	ldr	r3, [r4, #24]
 8009100:	f8d3 8000 	ldr.w	r8, [r3]
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	UNALIGNED_PUT(htonl(0xfe800000), &addr->s6_addr32[0]);
 8009104:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8009108:	930e      	str	r3, [sp, #56]	; 0x38
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
 800910a:	2300      	movs	r3, #0
 800910c:	930f      	str	r3, [sp, #60]	; 0x3c

	switch (lladdr->len) {
 800910e:	f898 2014 	ldrb.w	r2, [r8, #20]
 8009112:	2a06      	cmp	r2, #6
 8009114:	d038      	beq.n	8009188 <handle_ra_input+0x3c4>
 8009116:	2a08      	cmp	r2, #8
 8009118:	d055      	beq.n	80091c6 <handle_ra_input+0x402>
 800911a:	2a02      	cmp	r2, #2
 800911c:	d112      	bne.n	8009144 <handle_ra_input+0x380>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
 800911e:	f898 2015 	ldrb.w	r2, [r8, #21]
 8009122:	2a01      	cmp	r2, #1
 8009124:	d10e      	bne.n	8009144 <handle_ra_input+0x380>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
 8009126:	9310      	str	r3, [sp, #64]	; 0x40
			addr->s6_addr[11] = 0xff;
 8009128:	23ff      	movs	r3, #255	; 0xff
 800912a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
			addr->s6_addr[12] = 0xfe;
 800912e:	23fe      	movs	r3, #254	; 0xfe
 8009130:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
			addr->s6_addr[13] = 0U;
			addr->s6_addr[14] = lladdr->addr[0];
 8009134:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009138:	781a      	ldrb	r2, [r3, #0]
 800913a:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
			addr->s6_addr[15] = lladdr->addr[1];
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(&addr, prefix_info->prefix, sizeof(prefix_info->prefix) / 2);
 8009144:	2208      	movs	r2, #8
 8009146:	f105 010e 	add.w	r1, r5, #14
 800914a:	a80e      	add	r0, sp, #56	; 0x38
 800914c:	f00b fd93 	bl	8014c76 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
 8009150:	2100      	movs	r1, #0
 8009152:	a80e      	add	r0, sp, #56	; 0x38
 8009154:	f7fc f91a 	bl	800538c <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
 8009158:	f8d5 8002 	ldr.w	r8, [r5, #2]
 800915c:	4683      	mov	fp, r0
 800915e:	2800      	cmp	r0, #0
 8009160:	d050      	beq.n	8009204 <handle_ra_input+0x440>
 8009162:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009166:	2b01      	cmp	r3, #1
 8009168:	d14c      	bne.n	8009204 <handle_ra_input+0x440>
		if (prefix_info->valid_lifetime ==
 800916a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800916e:	d130      	bne.n	80091d2 <handle_ra_input+0x40e>
	ifaddr->is_infinite = is_infinite;
 8009170:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8009174:	f043 0301 	orr.w	r3, r3, #1
 8009178:	f88b 302f 	strb.w	r3, [fp, #47]	; 0x2f
}
 800917c:	e73f      	b.n	8008ffe <handle_ra_input+0x23a>
	prefix->is_infinite = is_infinite;
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
}
 8009186:	e7ac      	b.n	80090e2 <handle_ra_input+0x31e>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
 8009188:	2203      	movs	r2, #3
 800918a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800918e:	a810      	add	r0, sp, #64	; 0x40
 8009190:	f00b fd71 	bl	8014c76 <memcpy>
		addr->s6_addr[11] = 0xff;
 8009194:	23ff      	movs	r3, #255	; 0xff
		addr->s6_addr[12] = 0xfe;
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
 8009196:	2203      	movs	r2, #3
 8009198:	f10d 0045 	add.w	r0, sp, #69	; 0x45
		addr->s6_addr[11] = 0xff;
 800919c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		addr->s6_addr[12] = 0xfe;
 80091a0:	23fe      	movs	r3, #254	; 0xfe
 80091a2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
 80091a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80091aa:	4411      	add	r1, r2
 80091ac:	f00b fd63 	bl	8014c76 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
 80091b0:	f898 3015 	ldrb.w	r3, [r8, #21]
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d1c5      	bne.n	8009144 <handle_ra_input+0x380>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
		addr->s6_addr[8] ^= 0x02;
 80091b8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80091bc:	f083 0302 	eor.w	r3, r3, #2
 80091c0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 80091c4:	e7be      	b.n	8009144 <handle_ra_input+0x380>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
 80091c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80091ca:	a810      	add	r0, sp, #64	; 0x40
 80091cc:	f00b fd53 	bl	8014c76 <memcpy>
 80091d0:	e7f2      	b.n	80091b8 <handle_ra_input+0x3f4>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
 80091d2:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
 80091d6:	d909      	bls.n	80091ec <handle_ra_input+0x428>
			net_if_ipv6_addr_update_lifetime(
 80091d8:	f8d5 1002 	ldr.w	r1, [r5, #2]
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
 80091dc:	4658      	mov	r0, fp
 80091de:	f7fc f979 	bl	80054d4 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
 80091e2:	f89b 302f 	ldrb.w	r3, [fp, #47]	; 0x2f
 80091e6:	f36f 0300 	bfc	r3, #0, #1
 80091ea:	e7c5      	b.n	8009178 <handle_ra_input+0x3b4>
	return (uint32_t)k_uptime_get();
 80091ec:	f00f fb2e 	bl	801884c <k_uptime_get>
 80091f0:	4601      	mov	r1, r0
	return net_timeout_remaining(&ifaddr->lifetime, k_uptime_get_32());
 80091f2:	f10b 0014 	add.w	r0, fp, #20
 80091f6:	f00c ff66 	bl	80160c6 <net_timeout_remaining>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
 80091fa:	4580      	cmp	r8, r0
 80091fc:	d8ec      	bhi.n	80091d8 <handle_ra_input+0x414>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
 80091fe:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8009202:	e7eb      	b.n	80091dc <handle_ra_input+0x418>
		if (prefix_info->valid_lifetime ==
 8009204:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009208:	69a0      	ldr	r0, [r4, #24]
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
 800920a:	f04f 0201 	mov.w	r2, #1
 800920e:	a90e      	add	r1, sp, #56	; 0x38
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
 8009210:	bf0c      	ite	eq
 8009212:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
 8009214:	4643      	movne	r3, r8
 8009216:	f7fc f987 	bl	8005528 <net_if_ipv6_addr_add>
 800921a:	e6f0      	b.n	8008ffe <handle_ra_input+0x23a>
			if (nd_opt_hdr->len == 0U || nd_opt_hdr->len > 3U) {
 800921c:	3d01      	subs	r5, #1
 800921e:	b2ed      	uxtb	r5, r5
 8009220:	2d02      	cmp	r5, #2
 8009222:	f63f ade4 	bhi.w	8008dee <handle_ra_input+0x2a>
	NET_PKT_DATA_ACCESS_DEFINE(routeinfo_access,
 8009226:	ab0c      	add	r3, sp, #48	; 0x30
	struct in6_addr prefix_buf = { 0 };
 8009228:	2210      	movs	r2, #16
 800922a:	2100      	movs	r1, #0
 800922c:	a812      	add	r0, sp, #72	; 0x48
	NET_PKT_DATA_ACCESS_DEFINE(routeinfo_access,
 800922e:	930e      	str	r3, [sp, #56]	; 0x38
 8009230:	2306      	movs	r3, #6
 8009232:	930f      	str	r3, [sp, #60]	; 0x3c
	struct in6_addr prefix_buf = { 0 };
 8009234:	f00b fd2a 	bl	8014c8c <memset>
				net_pkt_get_data(pkt, &routeinfo_access);
 8009238:	a90e      	add	r1, sp, #56	; 0x38
 800923a:	4620      	mov	r0, r4
 800923c:	f00e fb74 	bl	8017928 <net_pkt_get_data>
	if (!route_info) {
 8009240:	4680      	mov	r8, r0
 8009242:	2800      	cmp	r0, #0
 8009244:	f43f add3 	beq.w	8008dee <handle_ra_input+0x2a>
	ret = net_pkt_acknowledge_data(pkt, &routeinfo_access);
 8009248:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800924a:	4620      	mov	r0, r4
 800924c:	f00f fb56 	bl	80188fc <net_pkt_acknowledge_data.isra.0>
	if (ret < 0) {
 8009250:	2800      	cmp	r0, #0
 8009252:	f6ff adcc 	blt.w	8008dee <handle_ra_input+0x2a>
	uint8_t prefix_field_len = (len - 1) * 8;
 8009256:	00ea      	lsls	r2, r5, #3
 8009258:	f8d8 3002 	ldr.w	r3, [r8, #2]
	ret = net_pkt_read(pkt, &prefix_buf, prefix_field_len);
 800925c:	a912      	add	r1, sp, #72	; 0x48
 800925e:	4620      	mov	r0, r4
 8009260:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
	prefix_len = route_info->prefix_len;
 8009264:	f898 b000 	ldrb.w	fp, [r8]
	route_lifetime = ntohl(route_info->route_lifetime);
 8009268:	9303      	str	r3, [sp, #12]
	preference = route_info->flags.prf;
 800926a:	f898 8001 	ldrb.w	r8, [r8, #1]
	ret = net_pkt_read(pkt, &prefix_buf, prefix_field_len);
 800926e:	f00e f9e5 	bl	801763c <net_pkt_read>
	if (ret < 0) {
 8009272:	2800      	cmp	r0, #0
	preference = route_info->flags.prf;
 8009274:	f3c8 08c1 	ubfx	r8, r8, #3, #2
	if (ret < 0) {
 8009278:	f6ff adb9 	blt.w	8008dee <handle_ra_input+0x2a>
 800927c:	9b03      	ldr	r3, [sp, #12]
	return pkt->iface;
 800927e:	69a0      	ldr	r0, [r4, #24]
 8009280:	ba1a      	rev	r2, r3
	if (route_lifetime == 0) {
 8009282:	b943      	cbnz	r3, 8009296 <handle_ra_input+0x4d2>
		route = net_route_lookup(net_pkt_orig_iface(pkt), &prefix_buf);
 8009284:	a912      	add	r1, sp, #72	; 0x48
 8009286:	f000 f99d 	bl	80095c4 <net_route_lookup>
		if (route != NULL) {
 800928a:	2800      	cmp	r0, #0
 800928c:	f43f aeb7 	beq.w	8008ffe <handle_ra_input+0x23a>
			ret = net_route_del(route);
 8009290:	f000 fa38 	bl	8009704 <net_route_del>
			if (ret < 0) {
 8009294:	e6b3      	b.n	8008ffe <handle_ra_input+0x23a>
	return pkt->frags->data;
 8009296:	68a3      	ldr	r3, [r4, #8]
		route = net_route_add(net_pkt_orig_iface(pkt),
 8009298:	a912      	add	r1, sp, #72	; 0x48
				      (struct in6_addr *)NET_IPV6_HDR(pkt)->src,
 800929a:	68db      	ldr	r3, [r3, #12]
		route = net_route_add(net_pkt_orig_iface(pkt),
 800929c:	e9cd 2800 	strd	r2, r8, [sp]
 80092a0:	3308      	adds	r3, #8
 80092a2:	465a      	mov	r2, fp
 80092a4:	f000 faf0 	bl	8009888 <net_route_add>
		if (route == NULL) {
 80092a8:	e6a9      	b.n	8008ffe <handle_ra_input+0x23a>
			if (nbr) {
 80092aa:	b11e      	cbz	r6, 80092b4 <handle_ra_input+0x4f0>
 80092ac:	68f2      	ldr	r2, [r6, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
 80092ae:	2101      	movs	r1, #1
 80092b0:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
			net_if_ipv6_router_update_lifetime(
 80092b4:	4629      	mov	r1, r5
 80092b6:	4618      	mov	r0, r3
 80092b8:	f00c fd59 	bl	8015d6e <net_if_ipv6_router_update_lifetime>
 80092bc:	e60c      	b.n	8008ed8 <handle_ra_input+0x114>
		net_if_ipv6_router_add(net_pkt_iface(pkt),
 80092be:	462a      	mov	r2, r5
 80092c0:	4639      	mov	r1, r7
 80092c2:	69a0      	ldr	r0, [r4, #24]
 80092c4:	f00c fd5e 	bl	8015d84 <net_if_ipv6_router_add>
 80092c8:	e606      	b.n	8008ed8 <handle_ra_input+0x114>
 80092ca:	bf00      	nop

080092cc <ipv6_nd_reachable_timeout>:
{
 80092cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 80092d0:	2600      	movs	r6, #0
	int64_t current = k_uptime_get();
 80092d2:	f00f fabb 	bl	801884c <k_uptime_get>
 80092d6:	4d33      	ldr	r5, [pc, #204]	; (80093a4 <ipv6_nd_reachable_timeout+0xd8>)
 80092d8:	4607      	mov	r7, r0
 80092da:	468a      	mov	sl, r1
		data->reachable = 0;
 80092dc:	f04f 0800 	mov.w	r8, #0
 80092e0:	f04f 0900 	mov.w	r9, #0
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
 80092e4:	46b3      	mov	fp, r6
		if (!nbr || !nbr->ref) {
 80092e6:	782b      	ldrb	r3, [r5, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d034      	beq.n	8009356 <ipv6_nd_reachable_timeout+0x8a>
 80092ec:	68ec      	ldr	r4, [r5, #12]
		if (!data) {
 80092ee:	b394      	cbz	r4, 8009356 <ipv6_nd_reachable_timeout+0x8a>
		if (!data->reachable) {
 80092f0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80092f4:	ea52 0103 	orrs.w	r1, r2, r3
 80092f8:	d02d      	beq.n	8009356 <ipv6_nd_reachable_timeout+0x8a>
		remaining = data->reachable + data->reachable_timeout - current;
 80092fa:	6a21      	ldr	r1, [r4, #32]
 80092fc:	188a      	adds	r2, r1, r2
 80092fe:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8009302:	1bd2      	subs	r2, r2, r7
 8009304:	eb63 030a 	sbc.w	r3, r3, sl
		if (remaining > 0) {
 8009308:	2a01      	cmp	r2, #1
 800930a:	f173 0100 	sbcs.w	r1, r3, #0
 800930e:	db03      	blt.n	8009318 <ipv6_nd_reachable_timeout+0x4c>
			ipv6_nd_restart_reachable_timer(NULL, remaining);
 8009310:	2000      	movs	r0, #0
				ipv6_nd_restart_reachable_timer(nbr,
 8009312:	f7ff fa4d 	bl	80087b0 <ipv6_nd_restart_reachable_timer>
 8009316:	e01e      	b.n	8009356 <ipv6_nd_reachable_timeout+0x8a>
		switch (data->state) {
 8009318:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
		data->reachable = 0;
 800931c:	e9c4 8906 	strd	r8, r9, [r4, #24]
		switch (data->state) {
 8009320:	2b04      	cmp	r3, #4
 8009322:	d818      	bhi.n	8009356 <ipv6_nd_reachable_timeout+0x8a>
 8009324:	e8df f003 	tbb	[pc, r3]
 8009328:	24221e03 	.word	0x24221e03
 800932c:	29          	.byte	0x29
 800932d:	00          	.byte	0x00
			if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
 800932e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
				net_ipv6_nbr_rm(nbr->iface, &data->addr);
 8009332:	1d21      	adds	r1, r4, #4
			if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
 8009334:	2b02      	cmp	r3, #2
 8009336:	d903      	bls.n	8009340 <ipv6_nd_reachable_timeout+0x74>
				net_ipv6_nbr_rm(nbr->iface, &data->addr);
 8009338:	68a8      	ldr	r0, [r5, #8]
 800933a:	f7ff fba3 	bl	8008a84 <net_ipv6_nbr_rm>
 800933e:	e00a      	b.n	8009356 <ipv6_nd_reachable_timeout+0x8a>
				data->ns_count++;
 8009340:	3301      	adds	r3, #1
 8009342:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
 8009346:	2300      	movs	r3, #0
 8009348:	68a8      	ldr	r0, [r5, #8]
 800934a:	461a      	mov	r2, r3
 800934c:	e9cd 1b00 	strd	r1, fp, [sp]
 8009350:	4619      	mov	r1, r3
 8009352:	f7ff fc0d 	bl	8008b70 <net_ipv6_send_ns>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8009356:	3601      	adds	r6, #1
 8009358:	3554      	adds	r5, #84	; 0x54
 800935a:	2e08      	cmp	r6, #8
 800935c:	d1c3      	bne.n	80092e6 <ipv6_nd_reachable_timeout+0x1a>
}
 800935e:	b003      	add	sp, #12
 8009360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			data->state = NET_IPV6_NBR_STATE_STALE;
 8009364:	2302      	movs	r3, #2
 8009366:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			break;
 800936a:	e7f4      	b.n	8009356 <ipv6_nd_reachable_timeout+0x8a>
			net_ipv6_nbr_rm(nbr->iface, &data->addr);
 800936c:	1d21      	adds	r1, r4, #4
 800936e:	e7e3      	b.n	8009338 <ipv6_nd_reachable_timeout+0x6c>
			data->state = NET_IPV6_NBR_STATE_PROBE;
 8009370:	2304      	movs	r3, #4
			data->ns_count = 0U;
 8009372:	f884 b034 	strb.w	fp, [r4, #52]	; 0x34
			data->state = NET_IPV6_NBR_STATE_PROBE;
 8009376:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			if (data->ns_count >= MAX_UNICAST_SOLICIT) {
 800937a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
				net_ipv6_nbr_rm(nbr->iface, &data->addr);
 800937e:	1d21      	adds	r1, r4, #4
			if (data->ns_count >= MAX_UNICAST_SOLICIT) {
 8009380:	2b02      	cmp	r3, #2
 8009382:	d8d9      	bhi.n	8009338 <ipv6_nd_reachable_timeout+0x6c>
				data->ns_count++;
 8009384:	3301      	adds	r3, #1
 8009386:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
 800938a:	2300      	movs	r3, #0
 800938c:	68a8      	ldr	r0, [r5, #8]
 800938e:	461a      	mov	r2, r3
 8009390:	e9cd 1b00 	strd	r1, fp, [sp]
 8009394:	4619      	mov	r1, r3
 8009396:	f7ff fbeb 	bl	8008b70 <net_ipv6_send_ns>
				ipv6_nd_restart_reachable_timer(nbr,
 800939a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800939e:	2300      	movs	r3, #0
 80093a0:	4628      	mov	r0, r5
 80093a2:	e7b6      	b.n	8009312 <ipv6_nd_reachable_timeout+0x46>
 80093a4:	24000958 	.word	0x24000958

080093a8 <net_ipv6_nbr_init>:
	.handler = handle_ra_input,
};
#endif /* CONFIG_NET_IPV6_ND */

void net_ipv6_nbr_init(void)
{
 80093a8:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
 80093aa:	480c      	ldr	r0, [pc, #48]	; (80093dc <net_ipv6_nbr_init+0x34>)
 80093ac:	f7fe ff1c 	bl	80081e8 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
 80093b0:	480b      	ldr	r0, [pc, #44]	; (80093e0 <net_ipv6_nbr_init+0x38>)
 80093b2:	f7fe ff19 	bl	80081e8 <net_icmpv6_register_handler>
	k_work_init_delayable(&ipv6_ns_reply_timer, ipv6_ns_reply_timeout);
 80093b6:	490b      	ldr	r1, [pc, #44]	; (80093e4 <net_ipv6_nbr_init+0x3c>)
 80093b8:	480b      	ldr	r0, [pc, #44]	; (80093e8 <net_ipv6_nbr_init+0x40>)
 80093ba:	f012 fba3 	bl	801bb04 <k_work_init_delayable>
	return z_impl_k_sem_init(sem, initial_count, limit);
 80093be:	2101      	movs	r1, #1
 80093c0:	f04f 32ff 	mov.w	r2, #4294967295
 80093c4:	4809      	ldr	r0, [pc, #36]	; (80093ec <net_ipv6_nbr_init+0x44>)
 80093c6:	f012 fadc 	bl	801b982 <z_impl_k_sem_init>
	k_sem_init(&nbr_lock, 1, K_SEM_MAX_LIMIT);
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
 80093ca:	4809      	ldr	r0, [pc, #36]	; (80093f0 <net_ipv6_nbr_init+0x48>)
 80093cc:	f7fe ff0c 	bl	80081e8 <net_icmpv6_register_handler>
	k_work_init_delayable(&ipv6_nd_reachable_timer,
 80093d0:	4908      	ldr	r1, [pc, #32]	; (80093f4 <net_ipv6_nbr_init+0x4c>)
 80093d2:	4809      	ldr	r0, [pc, #36]	; (80093f8 <net_ipv6_nbr_init+0x50>)
			      ipv6_nd_reachable_timeout);
#endif
}
 80093d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_init_delayable(&ipv6_nd_reachable_timer,
 80093d8:	f012 bb94 	b.w	801bb04 <k_work_init_delayable>
 80093dc:	24000bf8 	.word	0x24000bf8
 80093e0:	24000940 	.word	0x24000940
 80093e4:	08008831 	.word	0x08008831
 80093e8:	24001898 	.word	0x24001898
 80093ec:	24002d84 	.word	0x24002d84
 80093f0:	24000c04 	.word	0x24000c04
 80093f4:	080092cd 	.word	0x080092cd
 80093f8:	24001868 	.word	0x24001868

080093fc <net_ipv6_mld_join>:

	return ret;
}

int net_ipv6_mld_join(struct net_if *iface, const struct in6_addr *addr)
{
 80093fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093fe:	460d      	mov	r5, r1
 8009400:	9001      	str	r0, [sp, #4]
	struct net_if_mcast_addr *maddr;
	int ret;

	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
 8009402:	a901      	add	r1, sp, #4
 8009404:	4628      	mov	r0, r5
 8009406:	f7fc fb39 	bl	8005a7c <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
 800940a:	4604      	mov	r4, r0
 800940c:	b128      	cbz	r0, 800941a <net_ipv6_mld_join+0x1e>
	return addr->is_joined;
 800940e:	7d03      	ldrb	r3, [r0, #20]
 8009410:	079b      	lsls	r3, r3, #30
 8009412:	d508      	bpl.n	8009426 <net_ipv6_mld_join+0x2a>
		return -EALREADY;
 8009414:	f06f 0577 	mvn.w	r5, #119	; 0x77
 8009418:	e012      	b.n	8009440 <net_ipv6_mld_join+0x44>
	}

	if (!maddr) {
		maddr = net_if_ipv6_maddr_add(iface, addr);
 800941a:	4629      	mov	r1, r5
 800941c:	9801      	ldr	r0, [sp, #4]
 800941e:	f7fc fb79 	bl	8005b14 <net_if_ipv6_maddr_add>
		if (!maddr) {
 8009422:	4604      	mov	r4, r0
 8009424:	b360      	cbz	r0, 8009480 <net_ipv6_mld_join+0x84>
			return -ENOMEM;
		}
	}

	if (net_if_flag_is_set(iface, NET_IF_IPV6_NO_MLD)) {
 8009426:	210c      	movs	r1, #12
 8009428:	9801      	ldr	r0, [sp, #4]
 800942a:	f00f febf 	bl	80191ac <net_if_flag_is_set>
 800942e:	4601      	mov	r1, r0
 8009430:	bb48      	cbnz	r0, 8009486 <net_ipv6_mld_join+0x8a>
		return 0;
	}

	if (!net_if_is_up(iface)) {
 8009432:	9a01      	ldr	r2, [sp, #4]
	return net_if_flag_is_set(iface, NET_IF_UP) &&
 8009434:	4610      	mov	r0, r2
 8009436:	f00f feb9 	bl	80191ac <net_if_flag_is_set>
 800943a:	b920      	cbnz	r0, 8009446 <net_ipv6_mld_join+0x4a>
		return -ENETDOWN;
 800943c:	f06f 0572 	mvn.w	r5, #114	; 0x72
	net_mgmt_event_notify_with_info(NET_EVENT_IPV6_MCAST_JOIN, iface,
					&maddr->address.in6_addr,
					sizeof(struct in6_addr));

	return ret;
}
 8009440:	4628      	mov	r0, r5
 8009442:	b003      	add	sp, #12
 8009444:	bd30      	pop	{r4, r5, pc}
	       net_if_flag_is_set(iface, NET_IF_RUNNING);
 8009446:	2108      	movs	r1, #8
 8009448:	4610      	mov	r0, r2
 800944a:	f00f feaf 	bl	80191ac <net_if_flag_is_set>
	if (!net_if_is_up(iface)) {
 800944e:	2800      	cmp	r0, #0
 8009450:	d0f4      	beq.n	800943c <net_ipv6_mld_join+0x40>
	ret = mld_send_generic(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
 8009452:	4629      	mov	r1, r5
 8009454:	2202      	movs	r2, #2
 8009456:	9801      	ldr	r0, [sp, #4]
 8009458:	f00f ff1d 	bl	8019296 <mld_send_generic>
	if (ret < 0) {
 800945c:	1e05      	subs	r5, r0, #0
 800945e:	dbef      	blt.n	8009440 <net_ipv6_mld_join+0x44>
	net_if_ipv6_maddr_join(iface, maddr);
 8009460:	4621      	mov	r1, r4
 8009462:	9801      	ldr	r0, [sp, #4]
 8009464:	f00c fc05 	bl	8015c72 <net_if_ipv6_maddr_join>
	net_if_mcast_monitor(iface, &maddr->address, true);
 8009468:	4621      	mov	r1, r4
 800946a:	9801      	ldr	r0, [sp, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	f7fb fe67 	bl	8005140 <net_if_mcast_monitor>
	net_mgmt_event_notify_with_info(NET_EVENT_IPV6_MCAST_JOIN, iface,
 8009472:	2310      	movs	r3, #16
 8009474:	1d22      	adds	r2, r4, #4
 8009476:	9901      	ldr	r1, [sp, #4]
 8009478:	4804      	ldr	r0, [pc, #16]	; (800948c <net_ipv6_mld_join+0x90>)
 800947a:	f7fd fa75 	bl	8006968 <net_mgmt_event_notify_with_info>
	return ret;
 800947e:	e7df      	b.n	8009440 <net_ipv6_mld_join+0x44>
			return -ENOMEM;
 8009480:	f06f 050b 	mvn.w	r5, #11
 8009484:	e7dc      	b.n	8009440 <net_ipv6_mld_join+0x44>
		return 0;
 8009486:	2500      	movs	r5, #0
 8009488:	e7da      	b.n	8009440 <net_ipv6_mld_join+0x44>
 800948a:	bf00      	nop
 800948c:	e0600007 	.word	0xe0600007

08009490 <net_ipv6_mld_leave>:

int net_ipv6_mld_leave(struct net_if *iface, const struct in6_addr *addr)
{
 8009490:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009492:	460c      	mov	r4, r1
 8009494:	9001      	str	r0, [sp, #4]
	struct net_if_mcast_addr *maddr;
	int ret;

	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
 8009496:	a901      	add	r1, sp, #4
 8009498:	4620      	mov	r0, r4
 800949a:	f7fc faef 	bl	8005a7c <net_if_ipv6_maddr_lookup>
	if (!maddr) {
 800949e:	4605      	mov	r5, r0
 80094a0:	b1f8      	cbz	r0, 80094e2 <net_ipv6_mld_leave+0x52>
		return -ENOENT;
	}

	if (!net_if_ipv6_maddr_rm(iface, addr)) {
 80094a2:	4621      	mov	r1, r4
 80094a4:	9801      	ldr	r0, [sp, #4]
 80094a6:	f7fc f987 	bl	80057b8 <net_if_ipv6_maddr_rm>
 80094aa:	b1e8      	cbz	r0, 80094e8 <net_ipv6_mld_leave+0x58>
		return -EINVAL;
	}

	if (net_if_flag_is_set(iface, NET_IF_IPV6_NO_MLD)) {
 80094ac:	210c      	movs	r1, #12
 80094ae:	9801      	ldr	r0, [sp, #4]
 80094b0:	f00f fe7c 	bl	80191ac <net_if_flag_is_set>
 80094b4:	4606      	mov	r6, r0
 80094b6:	b9d0      	cbnz	r0, 80094ee <net_ipv6_mld_leave+0x5e>
		return 0;
	}

	ret = mld_send_generic(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
 80094b8:	4621      	mov	r1, r4
 80094ba:	2201      	movs	r2, #1
 80094bc:	9801      	ldr	r0, [sp, #4]
 80094be:	f00f feea 	bl	8019296 <mld_send_generic>
	if (ret < 0) {
 80094c2:	1e04      	subs	r4, r0, #0
 80094c4:	db0a      	blt.n	80094dc <net_ipv6_mld_leave+0x4c>
		return ret;
	}

	net_if_mcast_monitor(iface, &maddr->address, false);
 80094c6:	4632      	mov	r2, r6
 80094c8:	4629      	mov	r1, r5
 80094ca:	9801      	ldr	r0, [sp, #4]
 80094cc:	f7fb fe38 	bl	8005140 <net_if_mcast_monitor>

	net_mgmt_event_notify_with_info(NET_EVENT_IPV6_MCAST_LEAVE, iface,
 80094d0:	2310      	movs	r3, #16
 80094d2:	1d2a      	adds	r2, r5, #4
 80094d4:	9901      	ldr	r1, [sp, #4]
 80094d6:	4807      	ldr	r0, [pc, #28]	; (80094f4 <net_ipv6_mld_leave+0x64>)
 80094d8:	f7fd fa46 	bl	8006968 <net_mgmt_event_notify_with_info>
					&maddr->address.in6_addr,
					sizeof(struct in6_addr));

	return ret;
}
 80094dc:	4620      	mov	r0, r4
 80094de:	b002      	add	sp, #8
 80094e0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
 80094e2:	f06f 0401 	mvn.w	r4, #1
 80094e6:	e7f9      	b.n	80094dc <net_ipv6_mld_leave+0x4c>
		return -EINVAL;
 80094e8:	f06f 0415 	mvn.w	r4, #21
 80094ec:	e7f6      	b.n	80094dc <net_ipv6_mld_leave+0x4c>
		return 0;
 80094ee:	2400      	movs	r4, #0
 80094f0:	e7f4      	b.n	80094dc <net_ipv6_mld_leave+0x4c>
 80094f2:	bf00      	nop
 80094f4:	e0600008 	.word	0xe0600008

080094f8 <net_ipv6_mld_init>:
	.handler = handle_mld_query,
};

void net_ipv6_mld_init(void)
{
	net_icmpv6_register_handler(&mld_query_input_handler);
 80094f8:	4801      	ldr	r0, [pc, #4]	; (8009500 <net_ipv6_mld_init+0x8>)
 80094fa:	f7fe be75 	b.w	80081e8 <net_icmpv6_register_handler>
 80094fe:	bf00      	nop
 8009500:	24000c10 	.word	0x24000c10

08009504 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       uint8_t prefix_len)
{
 8009504:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009508:	4606      	mov	r6, r0
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
 800950a:	4815      	ldr	r0, [pc, #84]	; (8009560 <nbr_new+0x5c>)
{
 800950c:	460c      	mov	r4, r1
 800950e:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
 8009510:	f00f f888 	bl	8018624 <net_nbr_get>

	if (!nbr) {
 8009514:	4605      	mov	r5, r0
 8009516:	b1f8      	cbz	r0, 8009558 <nbr_new+0x54>
		return NULL;
	}

	nbr->iface = iface;

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
 8009518:	4623      	mov	r3, r4
 800951a:	466c      	mov	r4, sp
	nbr->iface = iface;
 800951c:	6086      	str	r6, [r0, #8]
	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
 800951e:	f103 0c10 	add.w	ip, r3, #16
	return (struct net_route_entry *)nbr->data;
 8009522:	68c6      	ldr	r6, [r0, #12]
	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
 8009524:	4627      	mov	r7, r4
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	3308      	adds	r3, #8
 800952a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800952e:	4622      	mov	r2, r4
 8009530:	4563      	cmp	r3, ip
 8009532:	c203      	stmia	r2!, {r0, r1}
 8009534:	4614      	mov	r4, r2
 8009536:	d1f6      	bne.n	8009526 <nbr_new+0x22>
 8009538:	f106 0320 	add.w	r3, r6, #32
 800953c:	aa04      	add	r2, sp, #16
 800953e:	463c      	mov	r4, r7
 8009540:	3308      	adds	r3, #8
 8009542:	cc03      	ldmia	r4!, {r0, r1}
 8009544:	4294      	cmp	r4, r2
 8009546:	f843 0c08 	str.w	r0, [r3, #-8]
 800954a:	f843 1c04 	str.w	r1, [r3, #-4]
 800954e:	4627      	mov	r7, r4
 8009550:	d1f5      	bne.n	800953e <nbr_new+0x3a>
	return (struct net_route_entry *)nbr->data;
 8009552:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
 8009554:	f883 8030 	strb.w	r8, [r3, #48]	; 0x30
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
 8009558:	4628      	mov	r0, r5
 800955a:	b004      	add	sp, #16
 800955c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009560:	24000c1c 	.word	0x24000c1c

08009564 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 8009568:	4801      	ldr	r0, [pc, #4]	; (8009570 <k_mutex_lock.constprop.0.isra.0+0xc>)
 800956a:	f008 bc5d 	b.w	8011e28 <z_impl_k_mutex_lock>
 800956e:	bf00      	nop
 8009570:	24001100 	.word	0x24001100

08009574 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8009574:	4801      	ldr	r0, [pc, #4]	; (800957c <k_mutex_unlock.constprop.0.isra.0+0x8>)
 8009576:	f008 bcd1 	b.w	8011f1c <z_impl_k_mutex_unlock>
 800957a:	bf00      	nop
 800957c:	24001100 	.word	0x24001100

08009580 <net_route_get_nbr>:
{
 8009580:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&lock, K_FOREVER);
 8009582:	f04f 31ff 	mov.w	r1, #4294967295
{
 8009586:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
 8009588:	f04f 30ff 	mov.w	r0, #4294967295
 800958c:	f7ff ffea 	bl	8009564 <k_mutex_lock.constprop.0.isra.0>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 8009590:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <net_route_get_nbr+0x40>)
 8009592:	2200      	movs	r2, #0
 8009594:	461c      	mov	r4, r3
		if (!nbr->ref) {
 8009596:	7819      	ldrb	r1, [r3, #0]
 8009598:	b149      	cbz	r1, 80095ae <net_route_get_nbr+0x2e>
		if (nbr->data == (uint8_t *)route) {
 800959a:	68d9      	ldr	r1, [r3, #12]
 800959c:	42a9      	cmp	r1, r5
 800959e:	d106      	bne.n	80095ae <net_route_get_nbr+0x2e>
	return &net_route_entries_pool[idx].nbr;
 80095a0:	2048      	movs	r0, #72	; 0x48
 80095a2:	fb00 4402 	mla	r4, r0, r2, r4
			k_mutex_unlock(&lock);
 80095a6:	f7ff ffe5 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
}
 80095aa:	4620      	mov	r0, r4
 80095ac:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 80095ae:	3201      	adds	r2, #1
 80095b0:	3348      	adds	r3, #72	; 0x48
 80095b2:	2a08      	cmp	r2, #8
 80095b4:	d1ef      	bne.n	8009596 <net_route_get_nbr+0x16>
	return NULL;
 80095b6:	2400      	movs	r4, #0
	k_mutex_unlock(&lock);
 80095b8:	f7ff ffdc 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
	return NULL;
 80095bc:	e7f5      	b.n	80095aa <net_route_get_nbr+0x2a>
 80095be:	bf00      	nop
 80095c0:	24000c28 	.word	0x24000c28

080095c4 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
 80095c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t longest_match = 0U;
	int i;

	k_mutex_lock(&lock, K_FOREVER);

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
 80095c8:	2700      	movs	r7, #0
 80095ca:	4e2a      	ldr	r6, [pc, #168]	; (8009674 <net_route_lookup+0xb0>)
{
 80095cc:	4680      	mov	r8, r0
 80095ce:	4689      	mov	r9, r1
	uint8_t longest_match = 0U;
 80095d0:	46bb      	mov	fp, r7
	struct net_route_entry *route, *found = NULL;
 80095d2:	463d      	mov	r5, r7
	k_mutex_lock(&lock, K_FOREVER);
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	f04f 31ff 	mov.w	r1, #4294967295
 80095dc:	f7ff ffc2 	bl	8009564 <k_mutex_lock.constprop.0.isra.0>
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
 80095e0:	7832      	ldrb	r2, [r6, #0]
 80095e2:	b36a      	cbz	r2, 8009640 <net_route_lookup+0x7c>
			continue;
		}

		if (iface && nbr->iface != iface) {
 80095e4:	f1b8 0f00 	cmp.w	r8, #0
 80095e8:	d002      	beq.n	80095f0 <net_route_lookup+0x2c>
 80095ea:	68b2      	ldr	r2, [r6, #8]
 80095ec:	4542      	cmp	r2, r8
 80095ee:	d127      	bne.n	8009640 <net_route_lookup+0x7c>
	return (struct net_route_entry *)nbr->data;
 80095f0:	f8d6 a00c 	ldr.w	sl, [r6, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
 80095f4:	f89a 4030 	ldrb.w	r4, [sl, #48]	; 0x30
 80095f8:	455c      	cmp	r4, fp
 80095fa:	d321      	bcc.n	8009640 <net_route_lookup+0x7c>
	if (length > 128) {
 80095fc:	2c80      	cmp	r4, #128	; 0x80
 80095fe:	d81f      	bhi.n	8009640 <net_route_lookup+0x7c>
		    net_ipv6_is_prefix(dst->s6_addr,
				       route->addr.s6_addr,
 8009600:	f10a 0120 	add.w	r1, sl, #32
	if (memcmp(addr1, addr2, bytes)) {
 8009604:	08e2      	lsrs	r2, r4, #3
 8009606:	4648      	mov	r0, r9
 8009608:	e9cd 1200 	strd	r1, r2, [sp]
 800960c:	f00b fb0a 	bl	8014c24 <memcmp>
 8009610:	23ff      	movs	r3, #255	; 0xff
 8009612:	b9a8      	cbnz	r0, 8009640 <net_route_lookup+0x7c>
	if (!remain) {
 8009614:	4264      	negs	r4, r4
 8009616:	f014 0407 	ands.w	r4, r4, #7
 800961a:	d00e      	beq.n	800963a <net_route_lookup+0x76>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 800961c:	9a01      	ldr	r2, [sp, #4]
 800961e:	9900      	ldr	r1, [sp, #0]
 8009620:	f819 0002 	ldrb.w	r0, [r9, r2]
 8009624:	5c8a      	ldrb	r2, [r1, r2]
 8009626:	4050      	eors	r0, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
 8009628:	f1c4 0208 	rsb	r2, r4, #8
 800962c:	fa03 f202 	lsl.w	r2, r3, r2
 8009630:	405a      	eors	r2, r3
 8009632:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
 8009636:	4220      	tst	r0, r4
 8009638:	d102      	bne.n	8009640 <net_route_lookup+0x7c>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
 800963a:	f89a b030 	ldrb.w	fp, [sl, #48]	; 0x30
 800963e:	4655      	mov	r5, sl
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
 8009640:	3701      	adds	r7, #1
 8009642:	2f08      	cmp	r7, #8
 8009644:	d004      	beq.n	8009650 <net_route_lookup+0x8c>
 8009646:	f01b 0f80 	tst.w	fp, #128	; 0x80
 800964a:	f106 0648 	add.w	r6, r6, #72	; 0x48
 800964e:	d0c7      	beq.n	80095e0 <net_route_lookup+0x1c>
		}
	}

	if (found) {
 8009650:	b14d      	cbz	r5, 8009666 <net_route_lookup+0xa2>
	sys_slist_find_and_remove(&routes, &route->node);
 8009652:	4809      	ldr	r0, [pc, #36]	; (8009678 <net_route_lookup+0xb4>)
 8009654:	4629      	mov	r1, r5
 8009656:	f00f fedc 	bl	8019412 <sys_slist_find_and_remove.isra.0>
	return list->head;
 800965a:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
 800965c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
 800965e:	6843      	ldr	r3, [r0, #4]
	list->head = node;
 8009660:	6005      	str	r5, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
 8009662:	b903      	cbnz	r3, 8009666 <net_route_lookup+0xa2>
	list->tail = node;
 8009664:	6045      	str	r5, [r0, #4]
		net_route_info("Found", found, dst);

		update_route_access(found);
	}

	k_mutex_unlock(&lock);
 8009666:	f7ff ff85 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
	return found;
}
 800966a:	4628      	mov	r0, r5
 800966c:	b003      	add	sp, #12
 800966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009672:	bf00      	nop
 8009674:	24000c28 	.word	0x24000c28
 8009678:	24002da8 	.word	0x24002da8

0800967c <net_route_update_lifetime>:

	k_mutex_unlock(&lock);
}

void net_route_update_lifetime(struct net_route_entry *route, uint32_t lifetime)
{
 800967c:	b570      	push	{r4, r5, r6, lr}
 800967e:	460e      	mov	r6, r1
	NET_DBG("Updating route lifetime of %s to %u secs",
		net_sprint_ipv6_addr(&route->addr),
		lifetime);

	if (!route) {
 8009680:	4604      	mov	r4, r0
 8009682:	2800      	cmp	r0, #0
 8009684:	d039      	beq.n	80096fa <net_route_update_lifetime+0x7e>
		return;
	}

	k_mutex_lock(&lock, K_FOREVER);
 8009686:	f04f 30ff 	mov.w	r0, #4294967295
 800968a:	f04f 31ff 	mov.w	r1, #4294967295
 800968e:	f7ff ff69 	bl	8009564 <k_mutex_lock.constprop.0.isra.0>

	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
 8009692:	1c73      	adds	r3, r6, #1
		route->is_infinite = true;

		(void)sys_slist_find_and_remove(&active_route_lifetime_timers,
 8009694:	f104 0510 	add.w	r5, r4, #16
 8009698:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
 800969c:	d10b      	bne.n	80096b6 <net_route_update_lifetime+0x3a>
		route->is_infinite = true;
 800969e:	f043 0304 	orr.w	r3, r3, #4
		(void)sys_slist_find_and_remove(&active_route_lifetime_timers,
 80096a2:	4629      	mov	r1, r5
 80096a4:	4815      	ldr	r0, [pc, #84]	; (80096fc <net_route_update_lifetime+0x80>)
		route->is_infinite = true;
 80096a6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		(void)sys_slist_find_and_remove(&active_route_lifetime_timers,
 80096aa:	f00f feb2 	bl	8019412 <sys_slist_find_and_remove.isra.0>
				 &route->lifetime.node);
		k_work_reschedule(&route_lifetime_timer, K_NO_WAIT);
	}

	k_mutex_unlock(&lock);
}
 80096ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_mutex_unlock(&lock);
 80096b2:	f7ff bf5f 	b.w	8009574 <k_mutex_unlock.constprop.0.isra.0>
		route->is_infinite = false;
 80096b6:	f36f 0382 	bfc	r3, #2, #1
 80096ba:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	return z_impl_k_uptime_ticks();
 80096be:	f012 fba3 	bl	801be08 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80096c2:	2300      	movs	r3, #0
 80096c4:	220a      	movs	r2, #10
 80096c6:	f7f7 f8b5 	bl	8000834 <__aeabi_uldivmod>
		net_timeout_set(&route->lifetime, lifetime, k_uptime_get_32());
 80096ca:	4631      	mov	r1, r6
 80096cc:	4602      	mov	r2, r0
 80096ce:	4628      	mov	r0, r5
 80096d0:	f00c fcdd 	bl	801608e <net_timeout_set>
		(void)sys_slist_find_and_remove(&active_route_lifetime_timers,
 80096d4:	4809      	ldr	r0, [pc, #36]	; (80096fc <net_route_update_lifetime+0x80>)
 80096d6:	4629      	mov	r1, r5
 80096d8:	f00f fe9b 	bl	8019412 <sys_slist_find_and_remove.isra.0>
	parent->next = child;
 80096dc:	2300      	movs	r3, #0
 80096de:	6123      	str	r3, [r4, #16]
	return list->tail;
 80096e0:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
 80096e2:	b93b      	cbnz	r3, 80096f4 <net_route_update_lifetime+0x78>
	list->head = node;
 80096e4:	e9c0 5500 	strd	r5, r5, [r0]
		k_work_reschedule(&route_lifetime_timer, K_NO_WAIT);
 80096e8:	2200      	movs	r2, #0
 80096ea:	2300      	movs	r3, #0
 80096ec:	4804      	ldr	r0, [pc, #16]	; (8009700 <net_route_update_lifetime+0x84>)
 80096ee:	f008 fe95 	bl	801241c <k_work_reschedule>
 80096f2:	e7dc      	b.n	80096ae <net_route_update_lifetime+0x32>
	parent->next = child;
 80096f4:	601d      	str	r5, [r3, #0]
	list->tail = node;
 80096f6:	6045      	str	r5, [r0, #4]
}
 80096f8:	e7f6      	b.n	80096e8 <net_route_update_lifetime+0x6c>
}
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	24002da0 	.word	0x24002da0
 8009700:	240018c8 	.word	0x240018c8

08009704 <net_route_del>:

int net_route_del(struct net_route_entry *route)
{
 8009704:	b538      	push	{r3, r4, r5, lr}
	struct net_route_nexthop *nexthop_route;
#if defined(CONFIG_NET_MGMT_EVENT_INFO)
       struct net_event_ipv6_route info;
#endif

	if (!route) {
 8009706:	4604      	mov	r4, r0
 8009708:	2800      	cmp	r0, #0
 800970a:	d03a      	beq.n	8009782 <net_route_del+0x7e>
		return -EINVAL;
	}

	k_mutex_lock(&lock, K_FOREVER);
 800970c:	f04f 30ff 	mov.w	r0, #4294967295
 8009710:	f04f 31ff 	mov.w	r1, #4294967295
 8009714:	f7ff ff26 	bl	8009564 <k_mutex_lock.constprop.0.isra.0>
 8009718:	2300      	movs	r3, #0
 800971a:	68e1      	ldr	r1, [r4, #12]
 800971c:	461a      	mov	r2, r3
 800971e:	481a      	ldr	r0, [pc, #104]	; (8009788 <net_route_del+0x84>)
 8009720:	f7fd f922 	bl	8006968 <net_mgmt_event_notify_with_info>
					sizeof(struct net_event_ipv6_route));
#else
	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, route->iface);
#endif

	if (!route->is_infinite) {
 8009724:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8009728:	075b      	lsls	r3, r3, #29
 800972a:	d409      	bmi.n	8009740 <net_route_del+0x3c>
		sys_slist_find_and_remove(&active_route_lifetime_timers,
 800972c:	4817      	ldr	r0, [pc, #92]	; (800978c <net_route_del+0x88>)
 800972e:	f104 0110 	add.w	r1, r4, #16
 8009732:	f00f fe6e 	bl	8019412 <sys_slist_find_and_remove.isra.0>
					  &route->lifetime.node);

		if (sys_slist_is_empty(&active_route_lifetime_timers)) {
 8009736:	6803      	ldr	r3, [r0, #0]
 8009738:	b913      	cbnz	r3, 8009740 <net_route_del+0x3c>
			k_work_cancel_delayable(&route_lifetime_timer);
 800973a:	4815      	ldr	r0, [pc, #84]	; (8009790 <net_route_del+0x8c>)
 800973c:	f012 f9f0 	bl	801bb20 <k_work_cancel_delayable>
		}
	}

	sys_slist_find_and_remove(&routes, &route->node);
 8009740:	4621      	mov	r1, r4
 8009742:	4814      	ldr	r0, [pc, #80]	; (8009794 <net_route_del+0x90>)
 8009744:	f00f fe65 	bl	8019412 <sys_slist_find_and_remove.isra.0>

	nbr = net_route_get_nbr(route);
 8009748:	4620      	mov	r0, r4
 800974a:	f7ff ff19 	bl	8009580 <net_route_get_nbr>
	if (!nbr) {
 800974e:	4605      	mov	r5, r0
 8009750:	b920      	cbnz	r0, 800975c <net_route_del+0x58>
		k_mutex_unlock(&lock);
 8009752:	f7ff ff0f 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOENT;
 8009756:	f06f 0001 	mvn.w	r0, #1

	nbr_free(nbr);

	k_mutex_unlock(&lock);
	return 0;
}
 800975a:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
 800975c:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
 800975e:	b934      	cbnz	r4, 800976e <net_route_del+0x6a>
	net_nbr_unref(nbr);
 8009760:	4628      	mov	r0, r5
 8009762:	f00e ff52 	bl	801860a <net_nbr_unref>
	k_mutex_unlock(&lock);
 8009766:	f7ff ff05 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
	return 0;
 800976a:	2000      	movs	r0, #0
 800976c:	e7f5      	b.n	800975a <net_route_del+0x56>
		if (!nexthop_route->nbr) {
 800976e:	6860      	ldr	r0, [r4, #4]
 8009770:	b128      	cbz	r0, 800977e <net_route_del+0x7a>
	net_nbr_unref(nbr);
 8009772:	f00e ff4a 	bl	801860a <net_nbr_unref>
	net_nbr_unref(nbr);
 8009776:	f1a4 0014 	sub.w	r0, r4, #20
 800977a:	f00e ff46 	bl	801860a <net_nbr_unref>
	return node->next;
 800977e:	6824      	ldr	r4, [r4, #0]
 8009780:	e7ed      	b.n	800975e <net_route_del+0x5a>
		return -EINVAL;
 8009782:	f06f 0015 	mvn.w	r0, #21
 8009786:	e7e8      	b.n	800975a <net_route_del+0x56>
 8009788:	e060000c 	.word	0xe060000c
 800978c:	24002da0 	.word	0x24002da0
 8009790:	240018c8 	.word	0x240018c8
 8009794:	24002da8 	.word	0x24002da8

08009798 <route_lifetime_timeout>:
{
 8009798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800979c:	f012 fb34 	bl	801be08 <z_impl_k_uptime_ticks>
 80097a0:	2300      	movs	r3, #0
 80097a2:	220a      	movs	r2, #10
 80097a4:	f7f7 f846 	bl	8000834 <__aeabi_uldivmod>
	k_mutex_lock(&lock, K_FOREVER);
 80097a8:	f04f 31ff 	mov.w	r1, #4294967295
 80097ac:	4607      	mov	r7, r0
 80097ae:	f04f 30ff 	mov.w	r0, #4294967295
 80097b2:	f7ff fed7 	bl	8009564 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 80097b6:	4b1a      	ldr	r3, [pc, #104]	; (8009820 <route_lifetime_timeout+0x88>)
 80097b8:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_route_lifetime_timers,
 80097ba:	4625      	mov	r5, r4
 80097bc:	b11c      	cbz	r4, 80097c6 <route_lifetime_timeout+0x2e>
	return node->next;
 80097be:	f855 4910 	ldr.w	r4, [r5], #-16
 80097c2:	b104      	cbz	r4, 80097c6 <route_lifetime_timeout+0x2e>
 80097c4:	3c10      	subs	r4, #16
 80097c6:	f04f 36ff 	mov.w	r6, #4294967295
	sys_slist_find_and_remove(&active_route_lifetime_timers,
 80097ca:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8009820 <route_lifetime_timeout+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_route_lifetime_timers,
 80097ce:	b95d      	cbnz	r5, 80097e8 <route_lifetime_timeout+0x50>
	if (next_update != UINT32_MAX) {
 80097d0:	1c73      	adds	r3, r6, #1
 80097d2:	d005      	beq.n	80097e0 <route_lifetime_timeout+0x48>
			return t * ((uint64_t)to_hz / from_hz);
 80097d4:	230a      	movs	r3, #10
		k_work_reschedule(&route_lifetime_timer, K_MSEC(next_update));
 80097d6:	4813      	ldr	r0, [pc, #76]	; (8009824 <route_lifetime_timeout+0x8c>)
 80097d8:	fba6 2303 	umull	r2, r3, r6, r3
 80097dc:	f008 fe1e 	bl	801241c <k_work_reschedule>
}
 80097e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	k_mutex_unlock(&lock);
 80097e4:	f7ff bec6 	b.w	8009574 <k_mutex_unlock.constprop.0.isra.0>
		struct net_timeout *timeout = &current->lifetime;
 80097e8:	f105 0910 	add.w	r9, r5, #16
		uint32_t this_update = net_timeout_evaluate(timeout,
 80097ec:	4639      	mov	r1, r7
 80097ee:	4648      	mov	r0, r9
 80097f0:	f00c fc83 	bl	80160fa <net_timeout_evaluate>
		if (this_update == 0U) {
 80097f4:	b968      	cbnz	r0, 8009812 <route_lifetime_timeout+0x7a>
	sys_slist_find_and_remove(&active_route_lifetime_timers,
 80097f6:	4640      	mov	r0, r8
 80097f8:	4649      	mov	r1, r9
 80097fa:	f00f fe0a 	bl	8019412 <sys_slist_find_and_remove.isra.0>
	net_route_del(route);
 80097fe:	4628      	mov	r0, r5
 8009800:	f7ff ff80 	bl	8009704 <net_route_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_route_lifetime_timers,
 8009804:	b14c      	cbz	r4, 800981a <route_lifetime_timeout+0x82>
 8009806:	6923      	ldr	r3, [r4, #16]
 8009808:	b103      	cbz	r3, 800980c <route_lifetime_timeout+0x74>
 800980a:	3b10      	subs	r3, #16
 800980c:	4625      	mov	r5, r4
 800980e:	461c      	mov	r4, r3
 8009810:	e7dd      	b.n	80097ce <route_lifetime_timeout+0x36>
		if (this_update < next_update) {
 8009812:	4286      	cmp	r6, r0
 8009814:	bf28      	it	cs
 8009816:	4606      	movcs	r6, r0
 8009818:	e7f4      	b.n	8009804 <route_lifetime_timeout+0x6c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_route_lifetime_timers,
 800981a:	4623      	mov	r3, r4
 800981c:	e7f6      	b.n	800980c <route_lifetime_timeout+0x74>
 800981e:	bf00      	nop
 8009820:	24002da0 	.word	0x24002da0
 8009824:	240018c8 	.word	0x240018c8

08009828 <net_route_del_by_nexthop>:

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
 8009828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800982c:	460d      	mov	r5, r1
 800982e:	4604      	mov	r4, r0
	int i, ret;

	NET_ASSERT(iface);
	NET_ASSERT(nexthop);

	k_mutex_lock(&lock, K_FOREVER);
 8009830:	f04f 31ff 	mov.w	r1, #4294967295
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	f7ff fe94 	bl	8009564 <k_mutex_lock.constprop.0.isra.0>
	int count = 0, status = 0;
 800983c:	2600      	movs	r6, #0

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
 800983e:	4629      	mov	r1, r5
 8009840:	4d10      	ldr	r5, [pc, #64]	; (8009884 <net_route_del_by_nexthop+0x5c>)
 8009842:	4620      	mov	r0, r4
	int count = 0, status = 0;
 8009844:	4634      	mov	r4, r6
	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
 8009846:	f00f f868 	bl	801891a <net_ipv6_nbr_lookup>
 800984a:	f505 7810 	add.w	r8, r5, #576	; 0x240
 800984e:	4607      	mov	r7, r0
	return (struct net_route_entry *)nbr->data;
 8009850:	68e8      	ldr	r0, [r5, #12]

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);

		if (!route) {
 8009852:	b140      	cbz	r0, 8009866 <net_route_del_by_nexthop+0x3e>
	return list->head;
 8009854:	6843      	ldr	r3, [r0, #4]
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
 8009856:	b133      	cbz	r3, 8009866 <net_route_del_by_nexthop+0x3e>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	42ba      	cmp	r2, r7
 800985c:	d10e      	bne.n	800987c <net_route_del_by_nexthop+0x54>
				/* This route contains this nexthop */
				ret = net_route_del(route);
 800985e:	f7ff ff51 	bl	8009704 <net_route_del>
				if (!ret) {
 8009862:	b968      	cbnz	r0, 8009880 <net_route_del_by_nexthop+0x58>
					count++;
 8009864:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 8009866:	3548      	adds	r5, #72	; 0x48
 8009868:	45a8      	cmp	r8, r5
 800986a:	d1f1      	bne.n	8009850 <net_route_del_by_nexthop+0x28>
				break;
			}
		}
	}

	k_mutex_unlock(&lock);
 800986c:	f7ff fe82 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>

	if (count) {
 8009870:	b90c      	cbnz	r4, 8009876 <net_route_del_by_nexthop+0x4e>
		return count;
	} else if (status < 0) {
 8009872:	ea06 74e6 	and.w	r4, r6, r6, asr #31
		return status;
	}

	return 0;
}
 8009876:	4620      	mov	r0, r4
 8009878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return node->next;
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	e7ea      	b.n	8009856 <net_route_del_by_nexthop+0x2e>
 8009880:	4606      	mov	r6, r0
 8009882:	e7f0      	b.n	8009866 <net_route_del_by_nexthop+0x3e>
 8009884:	24000c28 	.word	0x24000c28

08009888 <net_route_add>:
{
 8009888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800988c:	4689      	mov	r9, r1
 800988e:	4692      	mov	sl, r2
 8009890:	461e      	mov	r6, r3
 8009892:	4605      	mov	r5, r0
 8009894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009898:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
	if (net_ipv6_addr_cmp(addr, net_ipv6_unspecified_address())) {
 800989c:	f7fc ffa4 	bl	80067e8 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 80098a0:	2210      	movs	r2, #16
 80098a2:	4601      	mov	r1, r0
 80098a4:	4648      	mov	r0, r9
 80098a6:	f00b f9bd 	bl	8014c24 <memcmp>
 80098aa:	4604      	mov	r4, r0
 80098ac:	b168      	cbz	r0, 80098ca <net_route_add+0x42>
	k_mutex_lock(&lock, K_FOREVER);
 80098ae:	f04f 30ff 	mov.w	r0, #4294967295
 80098b2:	f04f 31ff 	mov.w	r1, #4294967295
 80098b6:	f7ff fe55 	bl	8009564 <k_mutex_lock.constprop.0.isra.0>
	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
 80098ba:	4631      	mov	r1, r6
 80098bc:	4628      	mov	r0, r5
 80098be:	f00f f82c 	bl	801891a <net_ipv6_nbr_lookup>
	if (!nbr_nexthop) {
 80098c2:	b928      	cbnz	r0, 80098d0 <net_route_add+0x48>
	struct net_route_entry *route = NULL;
 80098c4:	2400      	movs	r4, #0
	k_mutex_unlock(&lock);
 80098c6:	f7ff fe55 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
}
 80098ca:	4620      	mov	r0, r4
 80098cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (nbr_nexthop && nbr_nexthop->idx != NET_NBR_LLADDR_UNKNOWN) {
 80098d0:	7840      	ldrb	r0, [r0, #1]
 80098d2:	28ff      	cmp	r0, #255	; 0xff
 80098d4:	d001      	beq.n	80098da <net_route_add+0x52>
		nexthop_lladdr = net_nbr_get_lladdr(nbr_nexthop->idx);
 80098d6:	f7fe fd69 	bl	80083ac <net_nbr_get_lladdr>
	route = net_route_lookup(iface, addr);
 80098da:	4649      	mov	r1, r9
 80098dc:	4628      	mov	r0, r5
 80098de:	f7ff fe71 	bl	80095c4 <net_route_lookup>
	if (route) {
 80098e2:	4604      	mov	r4, r0
 80098e4:	b328      	cbz	r0, 8009932 <net_route_add+0xaa>
		nexthop_addr = net_route_get_nexthop(route);
 80098e6:	f00f fdaf 	bl	8019448 <net_route_get_nexthop>
		if (nexthop_addr && net_ipv6_addr_cmp(nexthop, nexthop_addr)) {
 80098ea:	4601      	mov	r1, r0
 80098ec:	b178      	cbz	r0, 800990e <net_route_add+0x86>
 80098ee:	2210      	movs	r2, #16
 80098f0:	4630      	mov	r0, r6
 80098f2:	f00b f997 	bl	8014c24 <memcmp>
 80098f6:	b950      	cbnz	r0, 800990e <net_route_add+0x86>
			net_route_update_lifetime(route, lifetime);
 80098f8:	4641      	mov	r1, r8
 80098fa:	4620      	mov	r0, r4
 80098fc:	f7ff febe 	bl	800967c <net_route_update_lifetime>
			route->preference = preference;
 8009900:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8009904:	f367 0301 	bfi	r3, r7, #0, #2
 8009908:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
			goto exit;
 800990c:	e7db      	b.n	80098c6 <net_route_add+0x3e>
	if (new == NET_ROUTE_PREFERENCE_RESERVED || (new & 0xfc) != 0) {
 800990e:	2f02      	cmp	r7, #2
 8009910:	d0d8      	beq.n	80098c4 <net_route_add+0x3c>
 8009912:	f017 0ffc 	tst.w	r7, #252	; 0xfc
 8009916:	d1d5      	bne.n	80098c4 <net_route_add+0x3c>
		if (route_preference_is_lower(route->preference, preference)) {
 8009918:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
	new = (new + 1) & 0x3;
 800991c:	1c7b      	adds	r3, r7, #1
	old = (old + 1) & 0x3;
 800991e:	3201      	adds	r2, #1
		if (route_preference_is_lower(route->preference, preference)) {
 8009920:	f003 0303 	and.w	r3, r3, #3
 8009924:	f002 0203 	and.w	r2, r2, #3
 8009928:	429a      	cmp	r2, r3
 800992a:	d8cb      	bhi.n	80098c4 <net_route_add+0x3c>
		net_route_del(route);
 800992c:	4620      	mov	r0, r4
 800992e:	f7ff fee9 	bl	8009704 <net_route_del>
	nbr = nbr_new(iface, addr, prefix_len);
 8009932:	4652      	mov	r2, sl
 8009934:	4649      	mov	r1, r9
 8009936:	4628      	mov	r0, r5
 8009938:	f7ff fde4 	bl	8009504 <nbr_new>
	if (!nbr) {
 800993c:	4604      	mov	r4, r0
 800993e:	b970      	cbnz	r0, 800995e <net_route_add+0xd6>
	return list->tail;
 8009940:	4825      	ldr	r0, [pc, #148]	; (80099d8 <net_route_add+0x150>)
		sys_slist_find_and_remove(&routes, last);
 8009942:	6841      	ldr	r1, [r0, #4]
 8009944:	f00f fd65 	bl	8019412 <sys_slist_find_and_remove.isra.0>
		net_route_del(route);
 8009948:	4608      	mov	r0, r1
 800994a:	f7ff fedb 	bl	8009704 <net_route_del>
		nbr = nbr_new(iface, addr, prefix_len);
 800994e:	4652      	mov	r2, sl
 8009950:	4649      	mov	r1, r9
 8009952:	4628      	mov	r0, r5
 8009954:	f7ff fdd6 	bl	8009504 <nbr_new>
		if (!nbr) {
 8009958:	4604      	mov	r4, r0
 800995a:	2800      	cmp	r0, #0
 800995c:	d0b2      	beq.n	80098c4 <net_route_add+0x3c>
			((sizeof(struct net_nbr) + start->size) * idx));
 800995e:	481f      	ldr	r0, [pc, #124]	; (80099dc <net_route_add+0x154>)
 8009960:	2308      	movs	r3, #8
 8009962:	8842      	ldrh	r2, [r0, #2]
 8009964:	3214      	adds	r2, #20
		if (!nbr->ref) {
 8009966:	7801      	ldrb	r1, [r0, #0]
 8009968:	bb91      	cbnz	r1, 80099d0 <net_route_add+0x148>
			nbr->data = nbr->__nbr;
 800996a:	f100 0314 	add.w	r3, r0, #20
 800996e:	60c3      	str	r3, [r0, #12]
			nbr->idx = NET_NBR_LLADDR_UNKNOWN;
 8009970:	23ff      	movs	r3, #255	; 0xff
 8009972:	7043      	strb	r3, [r0, #1]
			return net_nbr_ref(nbr);
 8009974:	f00e fe52 	bl	801861c <net_nbr_ref>
	if (!tmp) {
 8009978:	2800      	cmp	r0, #0
 800997a:	d0a3      	beq.n	80098c4 <net_route_add+0x3c>
	return (struct net_route_entry *)nbr->data;
 800997c:	68e4      	ldr	r4, [r4, #12]
	net_route_update_lifetime(route, lifetime);
 800997e:	4641      	mov	r1, r8
	return (struct net_route_nexthop *)nbr->data;
 8009980:	f8d0 900c 	ldr.w	r9, [r0, #12]
	route->preference = preference;
 8009984:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
	net_route_update_lifetime(route, lifetime);
 8009988:	4620      	mov	r0, r4
	route->iface = iface;
 800998a:	60e5      	str	r5, [r4, #12]
	route->preference = preference;
 800998c:	f367 0301 	bfi	r3, r7, #0, #2
 8009990:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	net_route_update_lifetime(route, lifetime);
 8009994:	f7ff fe72 	bl	800967c <net_route_update_lifetime>
	return list->head;
 8009998:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <net_route_add+0x150>)
 800999a:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 800999c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
 800999e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 80099a0:	601c      	str	r4, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
 80099a2:	b902      	cbnz	r2, 80099a6 <net_route_add+0x11e>
	list->tail = node;
 80099a4:	605c      	str	r4, [r3, #4]
	nbr = net_ipv6_nbr_lookup(iface, addr);
 80099a6:	4631      	mov	r1, r6
 80099a8:	4628      	mov	r0, r5
 80099aa:	f00e ffb6 	bl	801891a <net_ipv6_nbr_lookup>
	if (nbr == NULL) {
 80099ae:	4606      	mov	r6, r0
 80099b0:	b108      	cbz	r0, 80099b6 <net_route_add+0x12e>
	net_nbr_ref(nbr);
 80099b2:	f00e fe33 	bl	801861c <net_nbr_ref>
	parent->next = child;
 80099b6:	2300      	movs	r3, #0
	nexthop_route->nbr = tmp;
 80099b8:	f8c9 6004 	str.w	r6, [r9, #4]
 80099bc:	4629      	mov	r1, r5
 80099be:	4808      	ldr	r0, [pc, #32]	; (80099e0 <net_route_add+0x158>)
 80099c0:	f8c9 3000 	str.w	r3, [r9]
 80099c4:	461a      	mov	r2, r3
	list->tail = node;
 80099c6:	e9c4 9901 	strd	r9, r9, [r4, #4]
 80099ca:	f7fc ffcd 	bl	8006968 <net_mgmt_event_notify_with_info>
}
 80099ce:	e77a      	b.n	80098c6 <net_route_add+0x3e>
	for (i = 0; i < CONFIG_NET_MAX_NEXTHOPS; i++) {
 80099d0:	3b01      	subs	r3, #1
 80099d2:	4410      	add	r0, r2
 80099d4:	d1c7      	bne.n	8009966 <net_route_add+0xde>
 80099d6:	e775      	b.n	80098c4 <net_route_add+0x3c>
 80099d8:	24002da8 	.word	0x24002da8
 80099dc:	24000e68 	.word	0x24000e68
 80099e0:	e060000b 	.word	0xe060000b

080099e4 <net_route_foreach>:
	k_mutex_unlock(&lock);
	return NULL;
}

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
 80099e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e8:	4c0d      	ldr	r4, [pc, #52]	; (8009a20 <net_route_foreach+0x3c>)
	int i, ret = 0;
 80099ea:	2500      	movs	r5, #0
{
 80099ec:	4606      	mov	r6, r0
 80099ee:	460f      	mov	r7, r1
 80099f0:	f504 7810 	add.w	r8, r4, #576	; 0x240

	k_mutex_lock(&lock, K_FOREVER);
 80099f4:	f04f 30ff 	mov.w	r0, #4294967295
 80099f8:	f04f 31ff 	mov.w	r1, #4294967295
 80099fc:	f7ff fdb2 	bl	8009564 <k_mutex_lock.constprop.0.isra.0>
		nbr = get_nbr(i);
		if (!nbr) {
			continue;
		}

		if (!nbr->ref) {
 8009a00:	7823      	ldrb	r3, [r4, #0]
 8009a02:	b123      	cbz	r3, 8009a0e <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
 8009a04:	68e0      	ldr	r0, [r4, #12]
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
 8009a06:	b110      	cbz	r0, 8009a0e <net_route_foreach+0x2a>
			continue;
		}

		cb(route, user_data);

		ret++;
 8009a08:	3501      	adds	r5, #1
		cb(route, user_data);
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	47b0      	blx	r6
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 8009a0e:	3448      	adds	r4, #72	; 0x48
 8009a10:	45a0      	cmp	r8, r4
 8009a12:	d1f5      	bne.n	8009a00 <net_route_foreach+0x1c>
	}

	k_mutex_unlock(&lock);
 8009a14:	f7ff fdae 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
	return ret;
}
 8009a18:	4628      	mov	r0, r5
 8009a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a1e:	bf00      	nop
 8009a20:	24000c28 	.word	0x24000c28

08009a24 <net_route_init>:
		CONFIG_NET_MAX_ROUTES, sizeof(net_route_entries_pool));

	NET_DBG("Allocated %d nexthop entries (%zu bytes)",
		CONFIG_NET_MAX_NEXTHOPS, sizeof(net_route_nexthop_pool));

	k_work_init_delayable(&route_lifetime_timer, route_lifetime_timeout);
 8009a24:	4901      	ldr	r1, [pc, #4]	; (8009a2c <net_route_init+0x8>)
 8009a26:	4802      	ldr	r0, [pc, #8]	; (8009a30 <net_route_init+0xc>)
 8009a28:	f012 b86c 	b.w	801bb04 <k_work_init_delayable>
 8009a2c:	08009799 	.word	0x08009799
 8009a30:	240018c8 	.word	0x240018c8

08009a34 <tcp_send>:
	   net_pkt_lladdr_dst(pkt)->type == NET_LINK_BLUETOOTH) ||	\
	  (IS_ENABLED(CONFIG_NET_L2_IEEE802154) &&			\
	   net_pkt_lladdr_dst(pkt)->type == NET_LINK_IEEE802154)))

static void tcp_send(struct net_pkt *pkt)
{
 8009a34:	b510      	push	{r4, lr}
 8009a36:	4604      	mov	r4, r0
	NET_DBG("%s", tcp_th(pkt));

	tcp_pkt_ref(pkt);
 8009a38:	f00d fc33 	bl	80172a2 <net_pkt_ref>

	if (tcp_send_cb) {
 8009a3c:	4b08      	ldr	r3, [pc, #32]	; (8009a60 <tcp_send+0x2c>)
		if (tcp_send_cb(pkt) < 0) {
 8009a3e:	4620      	mov	r0, r4
	if (tcp_send_cb) {
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	b153      	cbz	r3, 8009a5a <tcp_send+0x26>
		if (tcp_send_cb(pkt) < 0) {
 8009a44:	4798      	blx	r3
 8009a46:	2800      	cmp	r0, #0
 8009a48:	da02      	bge.n	8009a50 <tcp_send+0x1c>
			NET_ERR("net_send_data()");
			tcp_pkt_unref(pkt);
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f00d fc49 	bl	80172e2 <net_pkt_unref>
			NET_ERR("net_send_data()");
			tcp_pkt_unref(pkt);
		}
	}
out:
	tcp_pkt_unref(pkt);
 8009a50:	4620      	mov	r0, r4
}
 8009a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tcp_pkt_unref(pkt);
 8009a56:	f00d bc44 	b.w	80172e2 <net_pkt_unref>
		if (net_send_data(pkt) < 0) {
 8009a5a:	f00b fdf4 	bl	8015646 <net_send_data>
 8009a5e:	e7f2      	b.n	8009a46 <tcp_send+0x12>
 8009a60:	24002dc0 	.word	0x24002dc0

08009a64 <tcp_send_timer_cancel>:
		tcp_conn_close(conn, -ETIMEDOUT);
	}
}

static void tcp_send_timer_cancel(struct tcp *conn)
{
 8009a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->in_retransmission == false) {
 8009a68:	f890 3239 	ldrb.w	r3, [r0, #569]	; 0x239
{
 8009a6c:	4604      	mov	r4, r0
	if (conn->in_retransmission == false) {
 8009a6e:	07db      	lsls	r3, r3, #31
 8009a70:	d524      	bpl.n	8009abc <tcp_send_timer_cancel+0x58>
		return;
	}

	k_work_cancel_delayable(&conn->send_timer);
 8009a72:	f100 0690 	add.w	r6, r0, #144	; 0x90

	{
		struct net_pkt *pkt = tcp_slist(conn, &conn->send_queue, get,
 8009a76:	f104 0728 	add.w	r7, r4, #40	; 0x28
	k_work_cancel_delayable(&conn->send_timer);
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f012 f850 	bl	801bb20 <k_work_cancel_delayable>
		struct net_pkt *pkt = tcp_slist(conn, &conn->send_queue, get,
 8009a80:	f04f 32ff 	mov.w	r2, #4294967295
 8009a84:	f04f 33ff 	mov.w	r3, #4294967295
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f00f fdbd 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
 8009a8e:	f104 0018 	add.w	r0, r4, #24
 8009a92:	f00f fd8e 	bl	80195b2 <sys_slist_get>
 8009a96:	4605      	mov	r5, r0
 8009a98:	b108      	cbz	r0, 8009a9e <tcp_send_timer_cancel+0x3a>
 8009a9a:	f1a0 051c 	sub.w	r5, r0, #28
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	f00f feef 	bl	8019882 <k_mutex_unlock.isra.0>
						struct net_pkt, next);
		if (pkt) {
 8009aa4:	b115      	cbz	r5, 8009aac <tcp_send_timer_cancel+0x48>
			NET_DBG("%s", tcp_th(pkt));
			tcp_pkt_unref(pkt);
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f00d fc1b 	bl	80172e2 <net_pkt_unref>
		}
	}

	if (sys_slist_is_empty(&conn->send_queue)) {
 8009aac:	69a2      	ldr	r2, [r4, #24]
 8009aae:	b93a      	cbnz	r2, 8009ac0 <tcp_send_timer_cancel+0x5c>
		conn->in_retransmission = false;
 8009ab0:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
 8009ab4:	f362 0300 	bfi	r3, r2, #0, #1
 8009ab8:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
	} else {
		conn->send_retries = tcp_retries;
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
					    K_MSEC(TCP_RTO_MS));
	}
}
 8009abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->send_retries = tcp_retries;
 8009ac0:	2309      	movs	r3, #9
 8009ac2:	f8b4 2234 	ldrh.w	r2, [r4, #564]	; 0x234
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4804      	ldr	r0, [pc, #16]	; (8009adc <tcp_send_timer_cancel+0x78>)
		conn->send_retries = tcp_retries;
 8009aca:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
 8009ace:	230a      	movs	r3, #10
}
 8009ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
 8009ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad8:	f008 bc72 	b.w	80123c0 <k_work_reschedule_for_queue>
 8009adc:	240018f8 	.word	0x240018f8

08009ae0 <tcp_send_process_no_lock>:
{
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pkt = tcp_slist(conn, &conn->send_queue, peek_head,
 8009ae2:	f100 0728 	add.w	r7, r0, #40	; 0x28
{
 8009ae6:	4605      	mov	r5, r0
	pkt = tcp_slist(conn, &conn->send_queue, peek_head,
 8009ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8009aec:	f04f 33ff 	mov.w	r3, #4294967295
 8009af0:	4638      	mov	r0, r7
 8009af2:	f00f fd89 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 8009af6:	69ac      	ldr	r4, [r5, #24]
 8009af8:	b104      	cbz	r4, 8009afc <tcp_send_process_no_lock+0x1c>
 8009afa:	3c1c      	subs	r4, #28
 8009afc:	4638      	mov	r0, r7
 8009afe:	f00f fec0 	bl	8019882 <k_mutex_unlock.isra.0>
	if (!pkt) {
 8009b02:	b90c      	cbnz	r4, 8009b08 <tcp_send_process_no_lock+0x28>
	bool unref = false;
 8009b04:	2000      	movs	r0, #0
 8009b06:	e048      	b.n	8009b9a <tcp_send_process_no_lock+0xba>
	if (conn->in_retransmission) {
 8009b08:	f895 3239 	ldrb.w	r3, [r5, #569]	; 0x239
 8009b0c:	07db      	lsls	r3, r3, #31
 8009b0e:	d522      	bpl.n	8009b56 <tcp_send_process_no_lock+0x76>
		if (conn->send_retries > 0) {
 8009b10:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d06a      	beq.n	8009bee <tcp_send_process_no_lock+0x10e>
			struct net_pkt *clone = tcp_pkt_clone(pkt);
 8009b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f00d fec2 	bl	80178a8 <net_pkt_clone>
			if (clone) {
 8009b24:	b130      	cbz	r0, 8009b34 <tcp_send_process_no_lock+0x54>
				tcp_send(clone);
 8009b26:	f7ff ff85 	bl	8009a34 <tcp_send>
				conn->send_retries--;
 8009b2a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
	bool local = false;
 8009b34:	2700      	movs	r7, #0
	if (conn->in_retransmission) {
 8009b36:	f895 4239 	ldrb.w	r4, [r5, #569]	; 0x239
 8009b3a:	f014 0401 	ands.w	r4, r4, #1
 8009b3e:	d04e      	beq.n	8009bde <tcp_send_process_no_lock+0xfe>
 8009b40:	f8b5 3234 	ldrh.w	r3, [r5, #564]	; 0x234
 8009b44:	220a      	movs	r2, #10
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
 8009b46:	fba3 2302 	umull	r2, r3, r3, r2
 8009b4a:	f105 0190 	add.w	r1, r5, #144	; 0x90
 8009b4e:	4829      	ldr	r0, [pc, #164]	; (8009bf4 <tcp_send_process_no_lock+0x114>)
 8009b50:	f008 fc36 	bl	80123c0 <k_work_reschedule_for_queue>
 8009b54:	e7d6      	b.n	8009b04 <tcp_send_process_no_lock+0x24>
		uint8_t fl = th_get(pkt)->th_flags;
 8009b56:	4620      	mov	r0, r4
 8009b58:	f00f fdbf 	bl	80196da <th_get>
 8009b5c:	7b43      	ldrb	r3, [r0, #13]
		bool forget = ACK == fl || PSH == fl || (ACK | PSH) == fl ||
 8009b5e:	2b10      	cmp	r3, #16
 8009b60:	d006      	beq.n	8009b70 <tcp_send_process_no_lock+0x90>
 8009b62:	f003 02ef 	and.w	r2, r3, #239	; 0xef
 8009b66:	2a08      	cmp	r2, #8
 8009b68:	d002      	beq.n	8009b70 <tcp_send_process_no_lock+0x90>
					 struct net_pkt, next) :
 8009b6a:	f013 0604 	ands.w	r6, r3, #4
 8009b6e:	d015      	beq.n	8009b9c <tcp_send_process_no_lock+0xbc>
		pkt = forget ? tcp_slist(conn, &conn->send_queue, get,
 8009b70:	f04f 32ff 	mov.w	r2, #4294967295
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f00f fd45 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
 8009b7e:	f105 0018 	add.w	r0, r5, #24
 8009b82:	f00f fd16 	bl	80195b2 <sys_slist_get>
 8009b86:	4604      	mov	r4, r0
 8009b88:	b108      	cbz	r0, 8009b8e <tcp_send_process_no_lock+0xae>
 8009b8a:	f1a0 041c 	sub.w	r4, r0, #28
 8009b8e:	2601      	movs	r6, #1
 8009b90:	4638      	mov	r0, r7
 8009b92:	f00f fe76 	bl	8019882 <k_mutex_unlock.isra.0>
	bool unref = false;
 8009b96:	4620      	mov	r0, r4
		if (!pkt) {
 8009b98:	b944      	cbnz	r4, 8009bac <tcp_send_process_no_lock+0xcc>
}
 8009b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			tcp_pkt_clone(pkt);
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f00d fe80 	bl	80178a8 <net_pkt_clone>
 8009ba8:	4604      	mov	r4, r0
 8009baa:	e7f4      	b.n	8009b96 <tcp_send_process_no_lock+0xb6>
		if (is_destination_local(pkt)) {
 8009bac:	f00f fd2e 	bl	801960c <is_destination_local>
 8009bb0:	4607      	mov	r7, r0
		tcp_send(pkt);
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f7ff ff3e 	bl	8009a34 <tcp_send>
		if (forget == false &&
 8009bb8:	2e00      	cmp	r6, #0
 8009bba:	d1bc      	bne.n	8009b36 <tcp_send_process_no_lock+0x56>
	return z_timeout_remaining(&dwork->timeout);
 8009bbc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8009bc0:	f012 f90e 	bl	801bde0 <z_timeout_remaining>
 8009bc4:	ea50 0301 	orrs.w	r3, r0, r1
 8009bc8:	d1b5      	bne.n	8009b36 <tcp_send_process_no_lock+0x56>
			conn->send_retries = tcp_retries;
 8009bca:	2309      	movs	r3, #9
 8009bcc:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
			conn->in_retransmission = true;
 8009bd0:	f895 3239 	ldrb.w	r3, [r5, #569]	; 0x239
 8009bd4:	f043 0301 	orr.w	r3, r3, #1
 8009bd8:	f885 3239 	strb.w	r3, [r5, #569]	; 0x239
 8009bdc:	e7ab      	b.n	8009b36 <tcp_send_process_no_lock+0x56>
	} else if (local && !sys_slist_is_empty(&conn->send_queue)) {
 8009bde:	2f00      	cmp	r7, #0
 8009be0:	d090      	beq.n	8009b04 <tcp_send_process_no_lock+0x24>
 8009be2:	69ab      	ldr	r3, [r5, #24]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d08d      	beq.n	8009b04 <tcp_send_process_no_lock+0x24>
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_timer,
 8009be8:	2200      	movs	r2, #0
 8009bea:	2300      	movs	r3, #0
 8009bec:	e7ad      	b.n	8009b4a <tcp_send_process_no_lock+0x6a>
			unref = true;
 8009bee:	2001      	movs	r0, #1
 8009bf0:	e7d3      	b.n	8009b9a <tcp_send_process_no_lock+0xba>
 8009bf2:	bf00      	nop
 8009bf4:	240018f8 	.word	0x240018f8

08009bf8 <tcp_init_isn>:

	return seq_scale(UNALIGNED_GET((uint32_t *)&hash[0]));
}

static uint32_t tcp_init_isn(struct sockaddr *saddr, struct sockaddr *daddr)
{
 8009bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (IS_ENABLED(CONFIG_NET_TCP_ISN_RFC6528)) {
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
		    saddr->sa_family == AF_INET6) {
 8009bfc:	8806      	ldrh	r6, [r0, #0]
{
 8009bfe:	b093      	sub	sp, #76	; 0x4c
 8009c00:	4604      	mov	r4, r0
 8009c02:	460d      	mov	r5, r1
		if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8009c04:	2e02      	cmp	r6, #2
 8009c06:	d134      	bne.n	8009c72 <tcp_init_isn+0x7a>
	} buf = {
 8009c08:	3404      	adds	r4, #4
			return tcpv6_init_isn(&net_sin6(saddr)->sin6_addr,
 8009c0a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8009c0e:	884f      	ldrh	r7, [r1, #2]
	} buf = {
 8009c10:	2210      	movs	r2, #16
 8009c12:	2100      	movs	r1, #0
 8009c14:	a805      	add	r0, sp, #20
 8009c16:	f00b f839 	bl	8014c8c <memset>
 8009c1a:	ae09      	add	r6, sp, #36	; 0x24
 8009c1c:	3504      	adds	r5, #4
 8009c1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009c22:	ac0d      	add	r4, sp, #52	; 0x34
 8009c24:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8009c28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009c2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (!once) {
 8009c30:	4c24      	ldr	r4, [pc, #144]	; (8009cc4 <tcp_init_isn+0xcc>)
	} buf = {
 8009c32:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
	if (!once) {
 8009c36:	7823      	ldrb	r3, [r4, #0]
	} buf = {
 8009c38:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
	if (!once) {
 8009c3c:	b92b      	cbnz	r3, 8009c4a <tcp_init_isn+0x52>
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SYS_RAND_GET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_sys_rand_get(dst, len);
 8009c3e:	2110      	movs	r1, #16
 8009c40:	4821      	ldr	r0, [pc, #132]	; (8009cc8 <tcp_init_isn+0xd0>)
 8009c42:	f7fa fa7d 	bl	8004140 <z_impl_sys_rand_get>
		once = true;
 8009c46:	2301      	movs	r3, #1
 8009c48:	7023      	strb	r3, [r4, #0]
	memcpy(buf.key, unique_key, sizeof(buf.key));
 8009c4a:	2210      	movs	r2, #16
 8009c4c:	491e      	ldr	r1, [pc, #120]	; (8009cc8 <tcp_init_isn+0xd0>)
 8009c4e:	a805      	add	r0, sp, #20
 8009c50:	f00b f811 	bl	8014c76 <memcpy>
	mbedtls_md5((const unsigned char *)&buf, sizeof(buf), hash);
 8009c54:	aa01      	add	r2, sp, #4
 8009c56:	2134      	movs	r1, #52	; 0x34
	mbedtls_md5((const unsigned char *)&buf, sizeof(buf), hash);
 8009c58:	a805      	add	r0, sp, #20
 8009c5a:	f007 fcff 	bl	801165c <mbedtls_md5>
	return seq_scale(UNALIGNED_GET((uint32_t *)&hash[0]));
 8009c5e:	9c01      	ldr	r4, [sp, #4]
 8009c60:	f012 f8d2 	bl	801be08 <z_impl_k_uptime_ticks>
			return ((uint32_t)t) * (to_hz / from_hz);
 8009c64:	4b19      	ldr	r3, [pc, #100]	; (8009ccc <tcp_init_isn+0xd4>)
 8009c66:	4358      	muls	r0, r3
	return seq + (k_ticks_to_ns_floor32(k_uptime_ticks()) >> 6);
 8009c68:	eb04 1090 	add.w	r0, r4, r0, lsr #6
					      net_sin(daddr)->sin_port);
		}
	}

	return sys_rand32_get();
}
 8009c6c:	b013      	add	sp, #76	; 0x4c
 8009c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8009c72:	2e01      	cmp	r6, #1
 8009c74:	d120      	bne.n	8009cb8 <tcp_init_isn+0xc0>
 *
 * @return Pointer to IPv4 socket address
 */
static inline struct sockaddr_in *net_sin(const struct sockaddr *addr)
{
	return (struct sockaddr_in *)addr;
 8009c76:	684c      	ldr	r4, [r1, #4]
	} buf = {
 8009c78:	2210      	movs	r2, #16
 8009c7a:	f8d0 9004 	ldr.w	r9, [r0, #4]
			return tcpv4_init_isn(&net_sin(saddr)->sin_addr,
 8009c7e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	} buf = {
 8009c82:	a805      	add	r0, sp, #20
			return tcpv4_init_isn(&net_sin(saddr)->sin_addr,
 8009c84:	884f      	ldrh	r7, [r1, #2]
	} buf = {
 8009c86:	2100      	movs	r1, #0
 8009c88:	f00b f800 	bl	8014c8c <memset>
 8009c8c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8009c90:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8009c94:	e9cd 9409 	strd	r9, r4, [sp, #36]	; 0x24
	if (!once) {
 8009c98:	4c0d      	ldr	r4, [pc, #52]	; (8009cd0 <tcp_init_isn+0xd8>)
 8009c9a:	7823      	ldrb	r3, [r4, #0]
 8009c9c:	b923      	cbnz	r3, 8009ca8 <tcp_init_isn+0xb0>
 8009c9e:	2110      	movs	r1, #16
 8009ca0:	4809      	ldr	r0, [pc, #36]	; (8009cc8 <tcp_init_isn+0xd0>)
 8009ca2:	f7fa fa4d 	bl	8004140 <z_impl_sys_rand_get>
		once = true;
 8009ca6:	7026      	strb	r6, [r4, #0]
	memcpy(buf.key, unique_key, sizeof(unique_key));
 8009ca8:	2210      	movs	r2, #16
 8009caa:	4907      	ldr	r1, [pc, #28]	; (8009cc8 <tcp_init_isn+0xd0>)
 8009cac:	a805      	add	r0, sp, #20
 8009cae:	f00a ffe2 	bl	8014c76 <memcpy>
	mbedtls_md5((const unsigned char *)&buf, sizeof(buf), hash);
 8009cb2:	aa01      	add	r2, sp, #4
 8009cb4:	211c      	movs	r1, #28
 8009cb6:	e7cf      	b.n	8009c58 <tcp_init_isn+0x60>
}
 8009cb8:	b013      	add	sp, #76	; 0x4c
 8009cba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return z_impl_sys_rand32_get();
 8009cbe:	f7fa ba2b 	b.w	8004118 <z_impl_sys_rand32_get>
 8009cc2:	bf00      	nop
 8009cc4:	24003140 	.word	0x24003140
 8009cc8:	24003141 	.word	0x24003141
 8009ccc:	000186a0 	.word	0x000186a0
 8009cd0:	2400313f 	.word	0x2400313f

08009cd4 <tcp_conn_unref.isra.0>:
static int tcp_conn_unref(struct tcp *conn)
 8009cd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009cd6:	9003      	str	r0, [sp, #12]
 8009cd8:	f3bf 8f5b 	dmb	ish
 8009cdc:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8009ce0:	f3bf 8f5b 	dmb	ish
	k_mutex_lock(&conn->lock, K_FOREVER);
 8009ce4:	9803      	ldr	r0, [sp, #12]
 8009ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cea:	f04f 33ff 	mov.w	r3, #4294967295
 8009cee:	3028      	adds	r0, #40	; 0x28
 8009cf0:	f00f fc8a 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	if (conn->in_connect) {
 8009cf4:	9803      	ldr	r0, [sp, #12]
 8009cf6:	f890 3239 	ldrb.w	r3, [r0, #569]	; 0x239
 8009cfa:	079a      	lsls	r2, r3, #30
 8009cfc:	d506      	bpl.n	8009d0c <tcp_conn_unref.isra.0+0x38>
		conn->in_connect = false;
 8009cfe:	f36f 0341 	bfc	r3, #1, #1
 8009d02:	f880 3239 	strb.w	r3, [r0, #569]	; 0x239
	z_impl_k_sem_reset(sem);
 8009d06:	303c      	adds	r0, #60	; 0x3c
 8009d08:	f008 f9c8 	bl	801209c <z_impl_k_sem_reset>
	k_mutex_unlock(&conn->lock);
 8009d0c:	9803      	ldr	r0, [sp, #12]
 8009d0e:	3028      	adds	r0, #40	; 0x28
 8009d10:	f00f fdb7 	bl	8019882 <k_mutex_unlock.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8009d14:	9b03      	ldr	r3, [sp, #12]
 8009d16:	f3bf 8f5b 	dmb	ish
 8009d1a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8009d1e:	e853 2f00 	ldrex	r2, [r3]
 8009d22:	1e51      	subs	r1, r2, #1
 8009d24:	e843 1000 	strex	r0, r1, [r3]
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d1f8      	bne.n	8009d1e <tcp_conn_unref.isra.0+0x4a>
	if (ref_count != 0) {
 8009d2c:	2a01      	cmp	r2, #1
 8009d2e:	f3bf 8f5b 	dmb	ish
 8009d32:	d176      	bne.n	8009e22 <tcp_conn_unref.isra.0+0x14e>
	k_mutex_lock(&tcp_lock, K_FOREVER);
 8009d34:	f04f 32ff 	mov.w	r2, #4294967295
 8009d38:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3c:	4848      	ldr	r0, [pc, #288]	; (8009e60 <tcp_conn_unref.isra.0+0x18c>)
 8009d3e:	f00f fc63 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	while ((pkt = k_fifo_get(&conn->recv_data, K_NO_WAIT)) != NULL) {
 8009d42:	9803      	ldr	r0, [sp, #12]
 8009d44:	306c      	adds	r0, #108	; 0x6c
	return z_impl_k_queue_get(queue, timeout);
 8009d46:	2300      	movs	r3, #0
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f008 f925 	bl	8011f98 <z_impl_k_queue_get>
 8009d4e:	9b03      	ldr	r3, [sp, #12]
 8009d50:	4604      	mov	r4, r0
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d167      	bne.n	8009e26 <tcp_conn_unref.isra.0+0x152>
	if (conn->context->conn_handler) {
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009d5a:	b120      	cbz	r0, 8009d66 <tcp_conn_unref.isra.0+0x92>
		net_conn_unregister(conn->context->conn_handler);
 8009d5c:	f7fd fbb4 	bl	80074c8 <net_conn_unregister>
		conn->context->conn_handler = NULL;
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	645c      	str	r4, [r3, #68]	; 0x44
	conn->context->tcp = NULL;
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	2100      	movs	r1, #0
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	6551      	str	r1, [r2, #84]	; 0x54
	net_context_unref(conn->context);
 8009d6e:	6858      	ldr	r0, [r3, #4]
 8009d70:	f00c fd5e 	bl	8016830 <net_context_unref>
	tcp_send_queue_flush(conn);
 8009d74:	9d03      	ldr	r5, [sp, #12]
	k_work_cancel_delayable(&conn->send_timer);
 8009d76:	f105 0090 	add.w	r0, r5, #144	; 0x90
	while ((pkt = tcp_slist(conn, &conn->send_queue, get,
 8009d7a:	f105 0628 	add.w	r6, r5, #40	; 0x28
 8009d7e:	3518      	adds	r5, #24
	k_work_cancel_delayable(&conn->send_timer);
 8009d80:	f011 fece 	bl	801bb20 <k_work_cancel_delayable>
	while ((pkt = tcp_slist(conn, &conn->send_queue, get,
 8009d84:	f04f 32ff 	mov.w	r2, #4294967295
 8009d88:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f00f fc3b 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
 8009d92:	4628      	mov	r0, r5
 8009d94:	f00f fc0d 	bl	80195b2 <sys_slist_get>
 8009d98:	4604      	mov	r4, r0
 8009d9a:	b108      	cbz	r0, 8009da0 <tcp_conn_unref.isra.0+0xcc>
 8009d9c:	f1a0 041c 	sub.w	r4, r0, #28
 8009da0:	4630      	mov	r0, r6
 8009da2:	f00f fd6e 	bl	8019882 <k_mutex_unlock.isra.0>
 8009da6:	2c00      	cmp	r4, #0
 8009da8:	d14c      	bne.n	8009e44 <tcp_conn_unref.isra.0+0x170>
	k_work_cancel_delayable(&conn->send_data_timer);
 8009daa:	9803      	ldr	r0, [sp, #12]
 8009dac:	30f0      	adds	r0, #240	; 0xf0
 8009dae:	f011 feb7 	bl	801bb20 <k_work_cancel_delayable>
	tcp_pkt_unref(conn->send_data);
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	6898      	ldr	r0, [r3, #8]
 8009db6:	f00d fa94 	bl	80172e2 <net_pkt_unref>
		tcp_pkt_unref(conn->queue_recv_data);
 8009dba:	9b03      	ldr	r3, [sp, #12]
 8009dbc:	68d8      	ldr	r0, [r3, #12]
 8009dbe:	f00d fa90 	bl	80172e2 <net_pkt_unref>
	(void)k_work_cancel_delayable(&conn->timewait_timer);
 8009dc2:	9803      	ldr	r0, [sp, #12]
 8009dc4:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8009dc8:	f011 feaa 	bl	801bb20 <k_work_cancel_delayable>
	(void)k_work_cancel_delayable(&conn->fin_timer);
 8009dcc:	9803      	ldr	r0, [sp, #12]
 8009dce:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 8009dd2:	f011 fea5 	bl	801bb20 <k_work_cancel_delayable>
	(void)k_work_cancel_delayable(&conn->persist_timer);
 8009dd6:	9803      	ldr	r0, [sp, #12]
 8009dd8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8009ddc:	f011 fea0 	bl	801bb20 <k_work_cancel_delayable>
	(void)k_work_cancel_delayable(&conn->ack_timer);
 8009de0:	9803      	ldr	r0, [sp, #12]
 8009de2:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8009de6:	f011 fe9b 	bl	801bb20 <k_work_cancel_delayable>
 8009dea:	4b1e      	ldr	r3, [pc, #120]	; (8009e64 <tcp_conn_unref.isra.0+0x190>)
	sys_slist_find_and_remove(&tcp_conns, &conn->next);
 8009dec:	9903      	ldr	r1, [sp, #12]
 8009dee:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8009df0:	b152      	cbz	r2, 8009e08 <tcp_conn_unref.isra.0+0x134>
 8009df2:	4291      	cmp	r1, r2
 8009df4:	d130      	bne.n	8009e58 <tcp_conn_unref.isra.0+0x184>
	return node->next;
 8009df6:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8009df8:	bb44      	cbnz	r4, 8009e4c <tcp_conn_unref.isra.0+0x178>
 8009dfa:	6858      	ldr	r0, [r3, #4]
	list->head = node;
 8009dfc:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 8009dfe:	4281      	cmp	r1, r0
 8009e00:	d100      	bne.n	8009e04 <tcp_conn_unref.isra.0+0x130>
	list->tail = node;
 8009e02:	605a      	str	r2, [r3, #4]
	parent->next = child;
 8009e04:	2300      	movs	r3, #0
 8009e06:	600b      	str	r3, [r1, #0]
	memset(conn, 0, sizeof(*conn));
 8009e08:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	9803      	ldr	r0, [sp, #12]
 8009e10:	f00a ff3c 	bl	8014c8c <memset>
	k_mem_slab_free(&tcp_conns_slab, (void **)&conn);
 8009e14:	4814      	ldr	r0, [pc, #80]	; (8009e68 <tcp_conn_unref.isra.0+0x194>)
 8009e16:	a903      	add	r1, sp, #12
 8009e18:	f011 fcab 	bl	801b772 <k_mem_slab_free>
	k_mutex_unlock(&tcp_lock);
 8009e1c:	4810      	ldr	r0, [pc, #64]	; (8009e60 <tcp_conn_unref.isra.0+0x18c>)
 8009e1e:	f00f fd30 	bl	8019882 <k_mutex_unlock.isra.0>
}
 8009e22:	b004      	add	sp, #16
 8009e24:	bd70      	pop	{r4, r5, r6, pc}
			    (struct net_conn *)conn->context->conn_handler,
 8009e26:	6858      	ldr	r0, [r3, #4]
		if (net_context_packet_received(
 8009e28:	4621      	mov	r1, r4
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8009e32:	461a      	mov	r2, r3
 8009e34:	f7fc fe42 	bl	8006abc <net_context_packet_received>
 8009e38:	2802      	cmp	r0, #2
 8009e3a:	d182      	bne.n	8009d42 <tcp_conn_unref.isra.0+0x6e>
			tcp_pkt_unref(pkt);
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f00d fa50 	bl	80172e2 <net_pkt_unref>
 8009e42:	e77e      	b.n	8009d42 <tcp_conn_unref.isra.0+0x6e>
		tcp_pkt_unref(pkt);
 8009e44:	4620      	mov	r0, r4
 8009e46:	f00d fa4c 	bl	80172e2 <net_pkt_unref>
 8009e4a:	e79b      	b.n	8009d84 <tcp_conn_unref.isra.0+0xb0>
 8009e4c:	6022      	str	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	4291      	cmp	r1, r2
	list->tail = node;
 8009e52:	bf08      	it	eq
 8009e54:	605c      	streq	r4, [r3, #4]
}
 8009e56:	e7d5      	b.n	8009e04 <tcp_conn_unref.isra.0+0x130>
	return node->next;
 8009e58:	4614      	mov	r4, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8009e5a:	6812      	ldr	r2, [r2, #0]
 8009e5c:	e7c8      	b.n	8009df0 <tcp_conn_unref.isra.0+0x11c>
 8009e5e:	bf00      	nop
 8009e60:	2400113c 	.word	0x2400113c
 8009e64:	24002db0 	.word	0x24002db0
 8009e68:	2400108c 	.word	0x2400108c

08009e6c <net_tcp_get>:
{
 8009e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	k_mutex_lock(&tcp_lock, K_FOREVER);
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e72:	f04f 32ff 	mov.w	r2, #4294967295
{
 8009e76:	4605      	mov	r5, r0
	k_mutex_lock(&tcp_lock, K_FOREVER);
 8009e78:	484f      	ldr	r0, [pc, #316]	; (8009fb8 <net_tcp_get+0x14c>)
 8009e7a:	f00f fbc5 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	struct tcp *conn = NULL;
 8009e7e:	2300      	movs	r3, #0
	ret = k_mem_slab_alloc(&tcp_conns_slab, (void **)&conn, K_NO_WAIT);
 8009e80:	2200      	movs	r2, #0
 8009e82:	a901      	add	r1, sp, #4
	struct tcp *conn = NULL;
 8009e84:	9301      	str	r3, [sp, #4]
	ret = k_mem_slab_alloc(&tcp_conns_slab, (void **)&conn, K_NO_WAIT);
 8009e86:	2300      	movs	r3, #0
 8009e88:	484c      	ldr	r0, [pc, #304]	; (8009fbc <net_tcp_get+0x150>)
 8009e8a:	f007 fd7d 	bl	8011988 <k_mem_slab_alloc>
	if (ret) {
 8009e8e:	4604      	mov	r4, r0
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d173      	bne.n	8009f7c <net_tcp_get+0x110>
	memset(conn, 0, sizeof(*conn));
 8009e94:	4601      	mov	r1, r0
 8009e96:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009e9a:	9801      	ldr	r0, [sp, #4]
 8009e9c:	f00a fef6 	bl	8014c8c <memset>
		conn->queue_recv_data = tcp_rx_pkt_alloc(conn, 0);
 8009ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	f7fd f893 	bl	8006fd0 <net_pkt_rx_alloc>
 8009eaa:	9b01      	ldr	r3, [sp, #4]
 8009eac:	60d8      	str	r0, [r3, #12]
		if (conn->queue_recv_data == NULL) {
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d06c      	beq.n	8009f8c <net_tcp_get+0x120>
	conn->send_data = tcp_pkt_alloc(conn, 0);
 8009eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	f7fd f882 	bl	8006fc0 <net_pkt_alloc>
 8009ebc:	9b01      	ldr	r3, [sp, #4]
 8009ebe:	6098      	str	r0, [r3, #8]
	if (conn->send_data == NULL) {
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d063      	beq.n	8009f8c <net_tcp_get+0x120>
	return z_impl_k_mutex_init(mutex);
 8009ec4:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009ec8:	f011 fcaf 	bl	801b82a <z_impl_k_mutex_init>
	k_fifo_init(&conn->recv_data);
 8009ecc:	9801      	ldr	r0, [sp, #4]
 8009ece:	306c      	adds	r0, #108	; 0x6c
	z_impl_k_queue_init(queue);
 8009ed0:	f011 fd23 	bl	801b91a <z_impl_k_queue_init>
	k_sem_init(&conn->connect_sem, 0, K_SEM_MAX_LIMIT);
 8009ed4:	9801      	ldr	r0, [sp, #4]
 8009ed6:	303c      	adds	r0, #60	; 0x3c
	return z_impl_k_sem_init(sem, initial_count, limit);
 8009ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8009edc:	4621      	mov	r1, r4
 8009ede:	f011 fd50 	bl	801b982 <z_impl_k_sem_init>
	k_sem_init(&conn->tx_sem, 1, 1);
 8009ee2:	9801      	ldr	r0, [sp, #4]
 8009ee4:	3054      	adds	r0, #84	; 0x54
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4611      	mov	r1, r2
 8009eea:	f011 fd4a 	bl	801b982 <z_impl_k_sem_init>
	conn->in_connect = false;
 8009eee:	9801      	ldr	r0, [sp, #4]
	conn->state = TCP_LISTEN;
 8009ef0:	2201      	movs	r2, #1
	conn->send_win_max = MAX(tcp_tx_window, NET_IPV6_MTU);
 8009ef2:	f04f 2306 	mov.w	r3, #100664832	; 0x6000600
	conn->dup_ack_cnt = 0;
 8009ef6:	f880 4237 	strb.w	r4, [r0, #567]	; 0x237
	conn->state = TCP_LISTEN;
 8009efa:	f880 2220 	strb.w	r2, [r0, #544]	; 0x220
	conn->send_win_max = MAX(tcp_tx_window, NET_IPV6_MTU);
 8009efe:	4a30      	ldr	r2, [pc, #192]	; (8009fc0 <net_tcp_get+0x154>)
	conn->seq = 0U;
 8009f00:	f8c0 4224 	str.w	r4, [r0, #548]	; 0x224
	k_work_init_delayable(&conn->send_timer, tcp_send_process);
 8009f04:	492f      	ldr	r1, [pc, #188]	; (8009fc4 <net_tcp_get+0x158>)
	conn->send_win_max = MAX(tcp_tx_window, NET_IPV6_MTU);
 8009f06:	e9c0 328b 	strd	r3, r2, [r0, #556]	; 0x22c
	conn->in_connect = false;
 8009f0a:	f890 2239 	ldrb.w	r2, [r0, #569]	; 0x239
 8009f0e:	f022 020a 	bic.w	r2, r2, #10
	list->tail = NULL;
 8009f12:	e9c0 4406 	strd	r4, r4, [r0, #24]
 8009f16:	f880 2239 	strb.w	r2, [r0, #569]	; 0x239
	k_work_init_delayable(&conn->send_timer, tcp_send_process);
 8009f1a:	3090      	adds	r0, #144	; 0x90
 8009f1c:	f011 fdf2 	bl	801bb04 <k_work_init_delayable>
	k_work_init_delayable(&conn->timewait_timer, tcp_timewait_timeout);
 8009f20:	9801      	ldr	r0, [sp, #4]
 8009f22:	4929      	ldr	r1, [pc, #164]	; (8009fc8 <net_tcp_get+0x15c>)
 8009f24:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8009f28:	f011 fdec 	bl	801bb04 <k_work_init_delayable>
	k_work_init_delayable(&conn->fin_timer, tcp_fin_timeout);
 8009f2c:	9801      	ldr	r0, [sp, #4]
 8009f2e:	4927      	ldr	r1, [pc, #156]	; (8009fcc <net_tcp_get+0x160>)
 8009f30:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 8009f34:	f011 fde6 	bl	801bb04 <k_work_init_delayable>
	k_work_init_delayable(&conn->send_data_timer, tcp_resend_data);
 8009f38:	9801      	ldr	r0, [sp, #4]
 8009f3a:	4925      	ldr	r1, [pc, #148]	; (8009fd0 <net_tcp_get+0x164>)
 8009f3c:	30f0      	adds	r0, #240	; 0xf0
 8009f3e:	f011 fde1 	bl	801bb04 <k_work_init_delayable>
	k_work_init_delayable(&conn->recv_queue_timer, tcp_cleanup_recv_queue);
 8009f42:	9801      	ldr	r0, [sp, #4]
 8009f44:	4923      	ldr	r1, [pc, #140]	; (8009fd4 <net_tcp_get+0x168>)
 8009f46:	30c0      	adds	r0, #192	; 0xc0
 8009f48:	f011 fddc 	bl	801bb04 <k_work_init_delayable>
	k_work_init_delayable(&conn->persist_timer, tcp_send_zwp);
 8009f4c:	9801      	ldr	r0, [sp, #4]
 8009f4e:	4922      	ldr	r1, [pc, #136]	; (8009fd8 <net_tcp_get+0x16c>)
 8009f50:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8009f54:	f011 fdd6 	bl	801bb04 <k_work_init_delayable>
	k_work_init_delayable(&conn->ack_timer, tcp_send_ack);
 8009f58:	9801      	ldr	r0, [sp, #4]
 8009f5a:	4920      	ldr	r1, [pc, #128]	; (8009fdc <net_tcp_get+0x170>)
 8009f5c:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8009f60:	f011 fdd0 	bl	801bb04 <k_work_init_delayable>
	int ref_count = atomic_inc(&conn->ref_count) + 1;
 8009f64:	9801      	ldr	r0, [sp, #4]
 8009f66:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 8009f6a:	f00f fca5 	bl	80198b8 <atomic_inc.isra.0>
	sys_slist_append(&tcp_conns, &conn->next);
 8009f6e:	9b01      	ldr	r3, [sp, #4]
	return list->tail;
 8009f70:	4a1b      	ldr	r2, [pc, #108]	; (8009fe0 <net_tcp_get+0x174>)
	parent->next = child;
 8009f72:	601c      	str	r4, [r3, #0]
	return list->tail;
 8009f74:	6851      	ldr	r1, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
 8009f76:	b931      	cbnz	r1, 8009f86 <net_tcp_get+0x11a>
	list->head = node;
 8009f78:	e9c2 3300 	strd	r3, r3, [r2]
	return conn;
 8009f7c:	9b01      	ldr	r3, [sp, #4]
	if (conn == NULL) {
 8009f7e:	b993      	cbnz	r3, 8009fa6 <net_tcp_get+0x13a>
		ret = -ENOMEM;
 8009f80:	f06f 040b 	mvn.w	r4, #11
 8009f84:	e012      	b.n	8009fac <net_tcp_get+0x140>
	parent->next = child;
 8009f86:	600b      	str	r3, [r1, #0]
	list->tail = node;
 8009f88:	6053      	str	r3, [r2, #4]
}
 8009f8a:	e7f7      	b.n	8009f7c <net_tcp_get+0x110>
	if (CONFIG_NET_TCP_RECV_QUEUE_TIMEOUT && conn->queue_recv_data) {
 8009f8c:	9b01      	ldr	r3, [sp, #4]
 8009f8e:	68d8      	ldr	r0, [r3, #12]
 8009f90:	b120      	cbz	r0, 8009f9c <net_tcp_get+0x130>
		tcp_pkt_unref(conn->queue_recv_data);
 8009f92:	f00d f9a6 	bl	80172e2 <net_pkt_unref>
		conn->queue_recv_data = NULL;
 8009f96:	9b01      	ldr	r3, [sp, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	60da      	str	r2, [r3, #12]
	k_mem_slab_free(&tcp_conns_slab, (void **)&conn);
 8009f9c:	a901      	add	r1, sp, #4
 8009f9e:	4807      	ldr	r0, [pc, #28]	; (8009fbc <net_tcp_get+0x150>)
 8009fa0:	f011 fbe7 	bl	801b772 <k_mem_slab_free>
	if (conn == NULL) {
 8009fa4:	e7ec      	b.n	8009f80 <net_tcp_get+0x114>
	int ret = 0;
 8009fa6:	2400      	movs	r4, #0
	conn->context = context;
 8009fa8:	605d      	str	r5, [r3, #4]
	context->tcp = conn;
 8009faa:	656b      	str	r3, [r5, #84]	; 0x54
	k_mutex_unlock(&tcp_lock);
 8009fac:	4802      	ldr	r0, [pc, #8]	; (8009fb8 <net_tcp_get+0x14c>)
 8009fae:	f00f fc68 	bl	8019882 <k_mutex_unlock.isra.0>
}
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	b003      	add	sp, #12
 8009fb6:	bd30      	pop	{r4, r5, pc}
 8009fb8:	2400113c 	.word	0x2400113c
 8009fbc:	2400108c 	.word	0x2400108c
 8009fc0:	08550855 	.word	0x08550855
 8009fc4:	08019931 	.word	0x08019931
 8009fc8:	08019969 	.word	0x08019969
 8009fcc:	08019975 	.word	0x08019975
 8009fd0:	0800a45d 	.word	0x0800a45d
 8009fd4:	08019887 	.word	0x08019887
 8009fd8:	0800a2fd 	.word	0x0800a2fd
 8009fdc:	08019a93 	.word	0x08019a93
 8009fe0:	24002db0 	.word	0x24002db0

08009fe4 <net_tcp_accept>:
	return ret;
}

int net_tcp_accept(struct net_context *context, net_tcp_accept_cb_t cb,
		   void *user_data)
{
 8009fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fe6:	b091      	sub	sp, #68	; 0x44
	struct tcp *conn = context->tcp;
 8009fe8:	6d45      	ldr	r5, [r0, #84]	; 0x54
{
 8009fea:	4604      	mov	r4, r0
 8009fec:	460f      	mov	r7, r1
 8009fee:	4616      	mov	r6, r2
	struct sockaddr local_addr = { };
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	2218      	movs	r2, #24
 8009ff4:	a80a      	add	r0, sp, #40	; 0x28
 8009ff6:	f00a fe49 	bl	8014c8c <memset>
	uint16_t local_port, remote_port;

	if (!conn) {
 8009ffa:	b175      	cbz	r5, 800a01a <net_tcp_accept+0x36>
		return -EINVAL;
	}

	NET_DBG("context: %p, tcp: %p, cb: %p", context, conn, cb);

	if (conn->state != TCP_LISTEN) {
 8009ffc:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
 800a000:	2b01      	cmp	r3, #1
 800a002:	d10a      	bne.n	800a01a <net_tcp_accept+0x36>
		return -EINVAL;
	}

	conn->accept_cb = cb;
 800a004:	622f      	str	r7, [r5, #32]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 800a006:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
 800a00a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	local_addr.sa_family = net_context_get_family(context);

	switch (local_addr.sa_family) {
 800a00e:	2b01      	cmp	r3, #1
	local_addr.sa_family = net_context_get_family(context);
 800a010:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	switch (local_addr.sa_family) {
 800a014:	d004      	beq.n	800a020 <net_tcp_accept+0x3c>
 800a016:	2b02      	cmp	r3, #2
 800a018:	d02b      	beq.n	800a072 <net_tcp_accept+0x8e>
		return -EINVAL;
 800a01a:	f06f 0015 	mvn.w	r0, #21
 800a01e:	e026      	b.n	800a06e <net_tcp_accept+0x8a>
			return -EINVAL;
		}

		in = (struct sockaddr_in *)&local_addr;

		if (net_sin_ptr(&context->local)->sin_addr) {
 800a020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a022:	b10b      	cbz	r3, 800a028 <net_tcp_accept+0x44>
			net_ipaddr_copy(&in->sin_addr,
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	930b      	str	r3, [sp, #44]	; 0x2c
	return (struct sockaddr_in6 *)addr;
 800a028:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a02a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
	context->user_data = user_data;

	/* Remove the temporary connection handler and register
	 * a proper now as we have an established connection.
	 */
	net_conn_unregister(context->conn_handler);
 800a02c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a02e:	ba5f      	rev16	r7, r3
	context->user_data = user_data;
 800a030:	6066      	str	r6, [r4, #4]
 800a032:	ba6d      	rev16	r5, r5
		in6->sin6_port =
 800a034:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	net_conn_unregister(context->conn_handler);
 800a038:	f7fd fa46 	bl	80074c8 <net_conn_unregister>

	return net_conn_register(net_context_get_proto(context),
 800a03c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a040:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
 800a044:	b2bf      	uxth	r7, r7
	return context->proto;
 800a046:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 800a04a:	b2ad      	uxth	r5, r5
 800a04c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800a050:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 800a054:	bf18      	it	ne
 800a056:	f104 022c 	addne.w	r2, r4, #44	; 0x2c
 800a05a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800a05e:	4b0f      	ldr	r3, [pc, #60]	; (800a09c <net_tcp_accept+0xb8>)
 800a060:	e9cd 5700 	strd	r5, r7, [sp]
 800a064:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800a068:	ab0a      	add	r3, sp, #40	; 0x28
 800a06a:	f7fd f911 	bl	8007290 <net_conn_register>
				 &context->remote : NULL,
				 &local_addr,
				 remote_port, local_port,
				 context, tcp_recv, context,
				 &context->conn_handler);
}
 800a06e:	b011      	add	sp, #68	; 0x44
 800a070:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (net_sin6_ptr(&context->local)->sin6_addr) {
 800a072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a074:	2b00      	cmp	r3, #0
 800a076:	d0d7      	beq.n	800a028 <net_tcp_accept+0x44>
			net_ipaddr_copy(&in6->sin6_addr,
 800a078:	ad06      	add	r5, sp, #24
 800a07a:	f103 0c10 	add.w	ip, r3, #16
 800a07e:	462a      	mov	r2, r5
 800a080:	6818      	ldr	r0, [r3, #0]
 800a082:	3308      	adds	r3, #8
 800a084:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800a088:	462f      	mov	r7, r5
 800a08a:	4563      	cmp	r3, ip
 800a08c:	c703      	stmia	r7!, {r0, r1}
 800a08e:	463d      	mov	r5, r7
 800a090:	d1f6      	bne.n	800a080 <net_tcp_accept+0x9c>
 800a092:	ad0b      	add	r5, sp, #44	; 0x2c
 800a094:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a096:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a09a:	e7c5      	b.n	800a028 <net_tcp_accept+0x44>
 800a09c:	0800b601 	.word	0x0800b601

0800a0a0 <net_tcp_foreach>:
	}
}
#endif /* CONFIG_NET_TEST_PROTOCOL */

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
 800a0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct tcp *conn;
	struct tcp *tmp;

	k_mutex_lock(&tcp_lock, K_FOREVER);
 800a0a4:	f04f 33ff 	mov.w	r3, #4294967295
{
 800a0a8:	4606      	mov	r6, r0
	k_mutex_lock(&tcp_lock, K_FOREVER);
 800a0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ae:	4814      	ldr	r0, [pc, #80]	; (800a100 <net_tcp_foreach+0x60>)
{
 800a0b0:	460f      	mov	r7, r1
	k_mutex_lock(&tcp_lock, K_FOREVER);
 800a0b2:	f00f faa9 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 800a0b6:	4b13      	ldr	r3, [pc, #76]	; (800a104 <net_tcp_foreach+0x64>)
 800a0b8:	681c      	ldr	r4, [r3, #0]

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
 800a0ba:	b924      	cbnz	r4, 800a0c6 <net_tcp_foreach+0x26>
			cb(conn, user_data);
			k_mutex_lock(&tcp_lock, K_FOREVER);
		}
	}

	k_mutex_unlock(&tcp_lock);
 800a0bc:	4810      	ldr	r0, [pc, #64]	; (800a100 <net_tcp_foreach+0x60>)
}
 800a0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_unlock(&tcp_lock);
 800a0c2:	f00f bbde 	b.w	8019882 <k_mutex_unlock.isra.0>
	return node->next;
 800a0c6:	6825      	ldr	r5, [r4, #0]
			k_mutex_unlock(&tcp_lock);
 800a0c8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800a100 <net_tcp_foreach+0x60>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800a0cc:	f3bf 8f5b 	dmb	ish
 800a0d0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800a0d4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&conn->ref_count) > 0) {
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	dd0c      	ble.n	800a0f6 <net_tcp_foreach+0x56>
			k_mutex_unlock(&tcp_lock);
 800a0dc:	4640      	mov	r0, r8
 800a0de:	f00f fbd0 	bl	8019882 <k_mutex_unlock.isra.0>
			cb(conn, user_data);
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	47b0      	blx	r6
			k_mutex_lock(&tcp_lock, K_FOREVER);
 800a0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	f00f fa89 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
 800a0f6:	2d00      	cmp	r5, #0
 800a0f8:	d0e0      	beq.n	800a0bc <net_tcp_foreach+0x1c>
 800a0fa:	462c      	mov	r4, r5
 800a0fc:	682d      	ldr	r5, [r5, #0]
 800a0fe:	e7e5      	b.n	800a0cc <net_tcp_foreach+0x2c>
 800a100:	2400113c 	.word	0x2400113c
 800a104:	24002db0 	.word	0x24002db0

0800a108 <tcp_out_ext>:
{
 800a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10c:	4698      	mov	r8, r3
	if (conn->send_options.mss_found) {
 800a10e:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
{
 800a112:	b08b      	sub	sp, #44	; 0x2c
 800a114:	4605      	mov	r5, r0
		alloc_len += sizeof(uint32_t);
 800a116:	f013 0f01 	tst.w	r3, #1
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 800a11a:	6843      	ldr	r3, [r0, #4]
{
 800a11c:	4689      	mov	r9, r1
	pkt = tcp_pkt_alloc(conn, alloc_len);
 800a11e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a122:	f04f 0100 	mov.w	r1, #0
{
 800a126:	4614      	mov	r4, r2
 800a128:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
	pkt = tcp_pkt_alloc(conn, alloc_len);
 800a12c:	f04f 0306 	mov.w	r3, #6
 800a130:	e9cd 0100 	strd	r0, r1, [sp]
 800a134:	f3c2 02c2 	ubfx	r2, r2, #3, #3
 800a138:	bf0c      	ite	eq
 800a13a:	2114      	moveq	r1, #20
 800a13c:	2118      	movne	r1, #24
 800a13e:	6928      	ldr	r0, [r5, #16]
 800a140:	f7fd f812 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 800a144:	4606      	mov	r6, r0
 800a146:	2800      	cmp	r0, #0
 800a148:	f000 80d1 	beq.w	800a2ee <tcp_out_ext+0x1e6>
	if (data) {
 800a14c:	b124      	cbz	r4, 800a158 <tcp_out_ext+0x50>
		net_pkt_append_buffer(pkt, data->buffer);
 800a14e:	68a1      	ldr	r1, [r4, #8]
 800a150:	f00d f96d 	bl	801742e <net_pkt_append_buffer>
		data->buffer = NULL;
 800a154:	2300      	movs	r3, #0
 800a156:	60a3      	str	r3, [r4, #8]
	return pkt->family;
 800a158:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
 800a15c:	095b      	lsrs	r3, r3, #5
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d111      	bne.n	800a186 <tcp_out_ext+0x7e>
		return net_context_create_ipv4_new(conn->context, pkt,
 800a162:	f505 73fe 	add.w	r3, r5, #508	; 0x1fc
 800a166:	f505 72f2 	add.w	r2, r5, #484	; 0x1e4
 800a16a:	4631      	mov	r1, r6
 800a16c:	6868      	ldr	r0, [r5, #4]
 800a16e:	f00c fc8c 	bl	8016a8a <net_context_create_ipv4_new>
	if (ret < 0) {
 800a172:	2800      	cmp	r0, #0
		return net_context_create_ipv6_new(conn->context, pkt,
 800a174:	4604      	mov	r4, r0
	if (ret < 0) {
 800a176:	da12      	bge.n	800a19e <tcp_out_ext+0x96>
		tcp_pkt_unref(pkt);
 800a178:	4630      	mov	r0, r6
 800a17a:	f00d f8b2 	bl	80172e2 <net_pkt_unref>
}
 800a17e:	4620      	mov	r0, r4
 800a180:	b00b      	add	sp, #44	; 0x2c
 800a182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (IS_ENABLED(CONFIG_NET_IPV6) && net_pkt_family(pkt) == AF_INET6) {
 800a186:	2b02      	cmp	r3, #2
 800a188:	f040 808c 	bne.w	800a2a4 <tcp_out_ext+0x19c>
		return net_context_create_ipv6_new(conn->context, pkt,
 800a18c:	f505 73fe 	add.w	r3, r5, #508	; 0x1fc
 800a190:	f505 72f2 	add.w	r2, r5, #484	; 0x1e4
 800a194:	4631      	mov	r1, r6
 800a196:	6868      	ldr	r0, [r5, #4]
 800a198:	f00c fcac 	bl	8016af4 <net_context_create_ipv6_new>
 800a19c:	e7e9      	b.n	800a172 <tcp_out_ext+0x6a>
	th = (struct tcphdr *)net_pkt_get_data(pkt, &tcp_access);
 800a19e:	f10d 0a0c 	add.w	sl, sp, #12
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct tcphdr);
 800a1a2:	af05      	add	r7, sp, #20
 800a1a4:	f04f 0b14 	mov.w	fp, #20
	th = (struct tcphdr *)net_pkt_get_data(pkt, &tcp_access);
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	4651      	mov	r1, sl
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct tcphdr);
 800a1ac:	9703      	str	r7, [sp, #12]
 800a1ae:	f8cd b010 	str.w	fp, [sp, #16]
	th = (struct tcphdr *)net_pkt_get_data(pkt, &tcp_access);
 800a1b2:	f00d fbb9 	bl	8017928 <net_pkt_get_data>
	if (!th) {
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	b910      	cbnz	r0, 800a1c0 <tcp_out_ext+0xb8>
		return -ENOBUFS;
 800a1ba:	f06f 0468 	mvn.w	r4, #104	; 0x68
 800a1be:	e7db      	b.n	800a178 <tcp_out_ext+0x70>
	memset(th, 0, sizeof(struct tcphdr));
 800a1c0:	465a      	mov	r2, fp
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	f00a fd62 	bl	8014c8c <memset>
	UNALIGNED_PUT(conn->src.sin.sin_port, &th->th_sport);
 800a1c8:	f8b5 31e2 	ldrh.w	r3, [r5, #482]	; 0x1e2
 800a1cc:	8023      	strh	r3, [r4, #0]
	UNALIGNED_PUT(conn->dst.sin.sin_port, &th->th_dport);
 800a1ce:	f8b5 31fa 	ldrh.w	r3, [r5, #506]	; 0x1fa
 800a1d2:	8063      	strh	r3, [r4, #2]
	th->th_off = 5;
 800a1d4:	2205      	movs	r2, #5
 800a1d6:	7b23      	ldrb	r3, [r4, #12]
 800a1d8:	f362 1307 	bfi	r3, r2, #4, #4
 800a1dc:	7323      	strb	r3, [r4, #12]
	if (conn->send_options.mss_found) {
 800a1de:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
	UNALIGNED_PUT(flags, &th->th_flags);
 800a1e2:	f884 900d 	strb.w	r9, [r4, #13]
	if (conn->send_options.mss_found) {
 800a1e6:	07da      	lsls	r2, r3, #31
		th->th_off++;
 800a1e8:	bf41      	itttt	mi
 800a1ea:	7b23      	ldrbmi	r3, [r4, #12]
 800a1ec:	2206      	movmi	r2, #6
 800a1ee:	f362 1307 	bfimi	r3, r2, #4, #4
 800a1f2:	7323      	strbmi	r3, [r4, #12]
	UNALIGNED_PUT(htons(conn->recv_win), &th->th_win);
 800a1f4:	f8b5 322e 	ldrh.w	r3, [r5, #558]	; 0x22e
 800a1f8:	ba5b      	rev16	r3, r3
 800a1fa:	81e3      	strh	r3, [r4, #14]
	UNALIGNED_PUT(htonl(seq), &th->th_seq);
 800a1fc:	fa98 f888 	rev.w	r8, r8
 800a200:	f8c4 8004 	str.w	r8, [r4, #4]
	if (ACK & flags) {
 800a204:	f019 0f10 	tst.w	r9, #16
 800a208:	d003      	beq.n	800a212 <tcp_out_ext+0x10a>
		UNALIGNED_PUT(htonl(conn->ack), &th->th_ack);
 800a20a:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
 800a20e:	ba1b      	rev	r3, r3
 800a210:	60a3      	str	r3, [r4, #8]
	return net_pkt_set_data(pkt, &tcp_access);
 800a212:	4651      	mov	r1, sl
 800a214:	4630      	mov	r0, r6
 800a216:	f00d fba6 	bl	8017966 <net_pkt_set_data>
	if (ret < 0) {
 800a21a:	1e04      	subs	r4, r0, #0
 800a21c:	dbac      	blt.n	800a178 <tcp_out_ext+0x70>
	if (conn->send_options.mss_found) {
 800a21e:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
 800a222:	07db      	lsls	r3, r3, #31
 800a224:	d51f      	bpl.n	800a266 <tcp_out_ext+0x15e>
	NET_PKT_DATA_ACCESS_DEFINE(mss_opt_access, struct tcp_mss_option);
 800a226:	2304      	movs	r3, #4
	mss = net_pkt_get_data(pkt, &mss_opt_access);
 800a228:	4639      	mov	r1, r7
 800a22a:	4630      	mov	r0, r6
	NET_PKT_DATA_ACCESS_DEFINE(mss_opt_access, struct tcp_mss_option);
 800a22c:	f8cd a014 	str.w	sl, [sp, #20]
 800a230:	9306      	str	r3, [sp, #24]
	mss = net_pkt_get_data(pkt, &mss_opt_access);
 800a232:	f00d fb79 	bl	8017928 <net_pkt_get_data>
	if (!mss) {
 800a236:	4604      	mov	r4, r0
 800a238:	2800      	cmp	r0, #0
 800a23a:	d0be      	beq.n	800a1ba <tcp_out_ext+0xb2>
	recv_mss = net_tcp_get_supported_mss(conn);
 800a23c:	4628      	mov	r0, r5
 800a23e:	f00f fbf3 	bl	8019a28 <net_tcp_get_supported_mss>
	recv_mss |= (NET_TCP_MSS_OPT << 24) | (NET_TCP_MSS_SIZE << 16);
 800a242:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
	UNALIGNED_PUT(htonl(recv_mss), (uint32_t *)mss);
 800a246:	0203      	lsls	r3, r0, #8
 800a248:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a24c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a254:	f043 0302 	orr.w	r3, r3, #2
 800a258:	6023      	str	r3, [r4, #0]
	return net_pkt_set_data(pkt, &mss_opt_access);
 800a25a:	4639      	mov	r1, r7
 800a25c:	4630      	mov	r0, r6
 800a25e:	f00d fb82 	bl	8017966 <net_pkt_set_data>
		if (ret < 0) {
 800a262:	1e04      	subs	r4, r0, #0
 800a264:	db88      	blt.n	800a178 <tcp_out_ext+0x70>
	net_pkt_cursor_init(pkt);
 800a266:	4630      	mov	r0, r6
 800a268:	f00d f8cd 	bl	8017406 <net_pkt_cursor_init>
 800a26c:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
 800a270:	095b      	lsrs	r3, r3, #5
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 800a272:	2b01      	cmp	r3, #1
 800a274:	d10f      	bne.n	800a296 <tcp_out_ext+0x18e>
		return net_ipv4_finalize(pkt, IPPROTO_TCP);
 800a276:	2106      	movs	r1, #6
 800a278:	4630      	mov	r0, r6
 800a27a:	f00d fecf 	bl	801801c <net_ipv4_finalize>
	if (ret < 0) {
 800a27e:	2800      	cmp	r0, #0
		return net_ipv6_finalize(pkt, IPPROTO_TCP);
 800a280:	4604      	mov	r4, r0
	if (ret < 0) {
 800a282:	f6ff af79 	blt.w	800a178 <tcp_out_ext+0x70>
	if (tcp_send_cb) {
 800a286:	4b1b      	ldr	r3, [pc, #108]	; (800a2f4 <tcp_out_ext+0x1ec>)
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	b172      	cbz	r2, 800a2aa <tcp_out_ext+0x1a2>
		ret = tcp_send_cb(pkt);
 800a28c:	4630      	mov	r0, r6
}
 800a28e:	b00b      	add	sp, #44	; 0x2c
 800a290:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ret = tcp_send_cb(pkt);
 800a294:	4710      	bx	r2
	if (IS_ENABLED(CONFIG_NET_IPV6) && net_pkt_family(pkt) == AF_INET6) {
 800a296:	2b02      	cmp	r3, #2
 800a298:	d104      	bne.n	800a2a4 <tcp_out_ext+0x19c>
		return net_ipv6_finalize(pkt, IPPROTO_TCP);
 800a29a:	2106      	movs	r1, #6
 800a29c:	4630      	mov	r0, r6
 800a29e:	f00e fa4f 	bl	8018740 <net_ipv6_finalize>
 800a2a2:	e7ec      	b.n	800a27e <tcp_out_ext+0x176>
	return -EINVAL;
 800a2a4:	f06f 0415 	mvn.w	r4, #21
 800a2a8:	e766      	b.n	800a178 <tcp_out_ext+0x70>
	parent->next = child;
 800a2aa:	61f2      	str	r2, [r6, #28]
	sys_slist_append(&conn->send_queue, &pkt->next);
 800a2ac:	f106 031c 	add.w	r3, r6, #28
	return list->tail;
 800a2b0:	69ea      	ldr	r2, [r5, #28]
Z_GENLIST_APPEND(slist, snode)
 800a2b2:	b96a      	cbnz	r2, 800a2d0 <tcp_out_ext+0x1c8>
	list->head = node;
 800a2b4:	e9c5 3306 	strd	r3, r3, [r5, #24]
	if (is_destination_local(pkt)) {
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f00f f9a7 	bl	801960c <is_destination_local>
 800a2be:	b150      	cbz	r0, 800a2d6 <tcp_out_ext+0x1ce>
		k_work_schedule_for_queue(&tcp_work_q,
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f105 0190 	add.w	r1, r5, #144	; 0x90
 800a2c8:	480b      	ldr	r0, [pc, #44]	; (800a2f8 <tcp_out_ext+0x1f0>)
 800a2ca:	f008 f84d 	bl	8012368 <k_work_schedule_for_queue>
 800a2ce:	e756      	b.n	800a17e <tcp_out_ext+0x76>
	parent->next = child;
 800a2d0:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800a2d2:	61eb      	str	r3, [r5, #28]
}
 800a2d4:	e7f0      	b.n	800a2b8 <tcp_out_ext+0x1b0>
	} else if (tcp_send_process_no_lock(conn)) {
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f7ff fc02 	bl	8009ae0 <tcp_send_process_no_lock>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	f43f af4e 	beq.w	800a17e <tcp_out_ext+0x76>
		tcp_conn_close(conn, -ETIMEDOUT);
 800a2e2:	f06f 0173 	mvn.w	r1, #115	; 0x73
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f00f faf2 	bl	80198d0 <tcp_conn_close.isra.0>
 800a2ec:	e747      	b.n	800a17e <tcp_out_ext+0x76>
		ret = -ENOBUFS;
 800a2ee:	f06f 0468 	mvn.w	r4, #104	; 0x68
	return ret;
 800a2f2:	e744      	b.n	800a17e <tcp_out_ext+0x76>
 800a2f4:	24002dc0 	.word	0x24002dc0
 800a2f8:	240018f8 	.word	0x240018f8

0800a2fc <tcp_send_zwp>:
{
 800a2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	k_mutex_lock(&conn->lock, K_FOREVER);
 800a2fe:	f5a0 7794 	sub.w	r7, r0, #296	; 0x128
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, persist_timer);
 800a302:	f5a0 75a8 	sub.w	r5, r0, #336	; 0x150
	k_mutex_lock(&conn->lock, K_FOREVER);
 800a306:	f04f 32ff 	mov.w	r2, #4294967295
 800a30a:	f04f 33ff 	mov.w	r3, #4294967295
{
 800a30e:	4606      	mov	r6, r0
	k_mutex_lock(&conn->lock, K_FOREVER);
 800a310:	4638      	mov	r0, r7
 800a312:	f00f f979 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	(void)tcp_out_ext(conn, ACK, NULL, conn->seq - 1);
 800a316:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
 800a31a:	2200      	movs	r2, #0
 800a31c:	2110      	movs	r1, #16
 800a31e:	3b01      	subs	r3, #1
 800a320:	4628      	mov	r0, r5
 800a322:	f7ff fef1 	bl	800a108 <tcp_out_ext>
	tcp_derive_rto(conn);
 800a326:	4628      	mov	r0, r5
 800a328:	f00f f95c 	bl	80195e4 <tcp_derive_rto>
	if (conn->send_win == 0) {
 800a32c:	f8b5 4232 	ldrh.w	r4, [r5, #562]	; 0x232
 800a330:	bb64      	cbnz	r4, 800a38c <tcp_send_zwp+0x90>
		if (conn->zwp_retries < 63) {
 800a332:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
		uint64_t timeout = TCP_RTO_MS;
 800a336:	f8b5 2234 	ldrh.w	r2, [r5, #564]	; 0x234
		if (conn->zwp_retries < 63) {
 800a33a:	2b3e      	cmp	r3, #62	; 0x3e
			conn->zwp_retries++;
 800a33c:	bf9c      	itt	ls
 800a33e:	3301      	addls	r3, #1
 800a340:	f885 3238 	strbls.w	r3, [r5, #568]	; 0x238
		timeout <<= conn->zwp_retries;
 800a344:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
		if (timeout == 0 || timeout > ZWP_MAX_DELAY_MS) {
 800a348:	4d13      	ldr	r5, [pc, #76]	; (800a398 <tcp_send_zwp+0x9c>)
		timeout <<= conn->zwp_retries;
 800a34a:	f1a3 0020 	sub.w	r0, r3, #32
 800a34e:	f1c3 0120 	rsb	r1, r3, #32
 800a352:	409c      	lsls	r4, r3
 800a354:	fa02 f000 	lsl.w	r0, r2, r0
 800a358:	fa22 f101 	lsr.w	r1, r2, r1
 800a35c:	409a      	lsls	r2, r3
		if (timeout == 0 || timeout > ZWP_MAX_DELAY_MS) {
 800a35e:	2300      	movs	r3, #0
		timeout <<= conn->zwp_retries;
 800a360:	4304      	orrs	r4, r0
		if (timeout == 0 || timeout > ZWP_MAX_DELAY_MS) {
 800a362:	1e50      	subs	r0, r2, #1
		timeout <<= conn->zwp_retries;
 800a364:	ea44 0401 	orr.w	r4, r4, r1
		if (timeout == 0 || timeout > ZWP_MAX_DELAY_MS) {
 800a368:	f144 31ff 	adc.w	r1, r4, #4294967295
 800a36c:	4285      	cmp	r5, r0
		(void)k_work_reschedule_for_queue(
 800a36e:	480b      	ldr	r0, [pc, #44]	; (800a39c <tcp_send_zwp+0xa0>)
		if (timeout == 0 || timeout > ZWP_MAX_DELAY_MS) {
 800a370:	eb73 0101 	sbcs.w	r1, r3, r1
			return t * ((uint64_t)to_hz / from_hz);
 800a374:	f04f 010a 	mov.w	r1, #10
			timeout = ZWP_MAX_DELAY_MS;
 800a378:	bf3c      	itt	cc
 800a37a:	4a09      	ldrcc	r2, [pc, #36]	; (800a3a0 <tcp_send_zwp+0xa4>)
 800a37c:	461c      	movcc	r4, r3
 800a37e:	fba2 2301 	umull	r2, r3, r2, r1
		(void)k_work_reschedule_for_queue(
 800a382:	fb01 3304 	mla	r3, r1, r4, r3
 800a386:	4631      	mov	r1, r6
 800a388:	f008 f81a 	bl	80123c0 <k_work_reschedule_for_queue>
	k_mutex_unlock(&conn->lock);
 800a38c:	4638      	mov	r0, r7
}
 800a38e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&conn->lock);
 800a392:	f00f ba76 	b.w	8019882 <k_mutex_unlock.isra.0>
 800a396:	bf00      	nop
 800a398:	0001d4bf 	.word	0x0001d4bf
 800a39c:	240018f8 	.word	0x240018f8
 800a3a0:	0001d4c0 	.word	0x0001d4c0

0800a3a4 <net_tcp_put>:
{
 800a3a4:	b570      	push	{r4, r5, r6, lr}
	struct tcp *conn = context->tcp;
 800a3a6:	6d44      	ldr	r4, [r0, #84]	; 0x54
	if (!conn) {
 800a3a8:	2c00      	cmp	r4, #0
 800a3aa:	d050      	beq.n	800a44e <net_tcp_put+0xaa>
	k_mutex_lock(&conn->lock, K_FOREVER);
 800a3ac:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800a3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f00f f925 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	if (conn && conn->state == TCP_ESTABLISHED) {
 800a3be:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 800a3c2:	2b04      	cmp	r3, #4
 800a3c4:	d13a      	bne.n	800a43c <net_tcp_put+0x98>
		if (conn->send_data_total > 0) {
 800a3c6:	f8d4 6210 	ldr.w	r6, [r4, #528]	; 0x210
 800a3ca:	b1be      	cbz	r6, 800a3fc <net_tcp_put+0x58>
			conn->in_close = true;
 800a3cc:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
 800a3d0:	220a      	movs	r2, #10
			k_work_reschedule_for_queue(&tcp_work_q,
 800a3d2:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 800a3d6:	481f      	ldr	r0, [pc, #124]	; (800a454 <net_tcp_put+0xb0>)
			conn->in_close = true;
 800a3d8:	f043 0304 	orr.w	r3, r3, #4
 800a3dc:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
 800a3e0:	f8b4 3234 	ldrh.w	r3, [r4, #564]	; 0x234
			k_work_reschedule_for_queue(&tcp_work_q,
 800a3e4:	fba3 2302 	umull	r2, r3, r3, r2
 800a3e8:	f007 ffea 	bl	80123c0 <k_work_reschedule_for_queue>
	k_mutex_unlock(&conn->lock);
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f00f fa48 	bl	8019882 <k_mutex_unlock.isra.0>
	tcp_conn_unref(conn);
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f7ff fc6e 	bl	8009cd4 <tcp_conn_unref.isra.0>
	return 0;
 800a3f8:	2000      	movs	r0, #0
}
 800a3fa:	bd70      	pop	{r4, r5, r6, pc}
						    FIN_TIMEOUT);
 800a3fc:	4b16      	ldr	r3, [pc, #88]	; (800a458 <net_tcp_put+0xb4>)
 800a3fe:	220a      	movs	r2, #10
			k_work_reschedule_for_queue(&tcp_work_q,
 800a400:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
 800a404:	4813      	ldr	r0, [pc, #76]	; (800a454 <net_tcp_put+0xb0>)
						    FIN_TIMEOUT);
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			k_work_reschedule_for_queue(&tcp_work_q,
 800a40c:	fb83 2302 	smull	r2, r3, r3, r2
 800a410:	f007 ffd6 	bl	80123c0 <k_work_reschedule_for_queue>
			ret = tcp_out_ext(conn, FIN | ACK, NULL,
 800a414:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 800a418:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800a41c:	2111      	movs	r1, #17
 800a41e:	4620      	mov	r0, r4
 800a420:	4413      	add	r3, r2
 800a422:	4632      	mov	r2, r6
 800a424:	f7ff fe70 	bl	800a108 <tcp_out_ext>
			if (ret == 0) {
 800a428:	b920      	cbnz	r0, 800a434 <net_tcp_put+0x90>
				conn_seq(conn, + 1);
 800a42a:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800a42e:	3301      	adds	r3, #1
 800a430:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
			conn_state(conn, TCP_FIN_WAIT_1);
 800a434:	2305      	movs	r3, #5
 800a436:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
 800a43a:	e7d7      	b.n	800a3ec <net_tcp_put+0x48>
	} else if (conn && conn->in_connect) {
 800a43c:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
 800a440:	079a      	lsls	r2, r3, #30
		conn->in_connect = false;
 800a442:	bf44      	itt	mi
 800a444:	f36f 0341 	bfcmi	r3, #1, #1
 800a448:	f884 3239 	strbmi.w	r3, [r4, #569]	; 0x239
 800a44c:	e7ce      	b.n	800a3ec <net_tcp_put+0x48>
		return -ENOENT;
 800a44e:	f06f 0001 	mvn.w	r0, #1
 800a452:	e7d2      	b.n	800a3fa <net_tcp_put+0x56>
 800a454:	240018f8 	.word	0x240018f8
 800a458:	24002db8 	.word	0x24002db8

0800a45c <tcp_resend_data>:
{
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	k_mutex_lock(&conn->lock, K_FOREVER);
 800a45e:	f1a0 07c8 	sub.w	r7, r0, #200	; 0xc8
{
 800a462:	4604      	mov	r4, r0
	k_mutex_lock(&conn->lock, K_FOREVER);
 800a464:	f04f 33ff 	mov.w	r3, #4294967295
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, send_data_timer);
 800a468:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	k_mutex_lock(&conn->lock, K_FOREVER);
 800a46c:	f04f 32ff 	mov.w	r2, #4294967295
 800a470:	4638      	mov	r0, r7
 800a472:	f00f f8c9 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	if (conn->send_data_retries >= tcp_retries) {
 800a476:	f894 3146 	ldrb.w	r3, [r4, #326]	; 0x146
 800a47a:	2b08      	cmp	r3, #8
 800a47c:	f04f 0301 	mov.w	r3, #1
 800a480:	d859      	bhi.n	800a536 <tcp_resend_data+0xda>
	conn->unacked_len = 0;
 800a482:	2500      	movs	r5, #0
	ret = tcp_send_data(conn);
 800a484:	4630      	mov	r0, r6
	conn->data_mode = TCP_DATA_MODE_RESEND;
 800a486:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
	conn->unacked_len = 0;
 800a48a:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
	ret = tcp_send_data(conn);
 800a48e:	f00f fb15 	bl	8019abc <tcp_send_data>
	conn->send_data_retries++;
 800a492:	f894 1146 	ldrb.w	r1, [r4, #326]	; 0x146
 800a496:	3101      	adds	r1, #1
 800a498:	b2c9      	uxtb	r1, r1
 800a49a:	f884 1146 	strb.w	r1, [r4, #326]	; 0x146
	if (ret == 0) {
 800a49e:	bb38      	cbnz	r0, 800a4f0 <tcp_resend_data+0x94>
		if (conn->in_close && conn->send_data_total == 0) {
 800a4a0:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
 800a4a4:	075b      	lsls	r3, r3, #29
 800a4a6:	d532      	bpl.n	800a50e <tcp_resend_data+0xb2>
 800a4a8:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 800a4ac:	bb7d      	cbnz	r5, 800a50e <tcp_resend_data+0xb2>
						    FIN_TIMEOUT);
 800a4ae:	4b23      	ldr	r3, [pc, #140]	; (800a53c <tcp_resend_data+0xe0>)
 800a4b0:	220a      	movs	r2, #10
			k_work_reschedule_for_queue(&tcp_work_q,
 800a4b2:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 800a4b6:	4822      	ldr	r0, [pc, #136]	; (800a540 <tcp_resend_data+0xe4>)
						    FIN_TIMEOUT);
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			k_work_reschedule_for_queue(&tcp_work_q,
 800a4be:	fb83 2302 	smull	r2, r3, r3, r2
 800a4c2:	f007 ff7d 	bl	80123c0 <k_work_reschedule_for_queue>
			conn_state(conn, TCP_FIN_WAIT_1);
 800a4c6:	2305      	movs	r3, #5
			ret = tcp_out_ext(conn, FIN | ACK, NULL,
 800a4c8:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 800a4cc:	2111      	movs	r1, #17
			conn_state(conn, TCP_FIN_WAIT_1);
 800a4ce:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
			ret = tcp_out_ext(conn, FIN | ACK, NULL,
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800a4d8:	4413      	add	r3, r2
 800a4da:	462a      	mov	r2, r5
 800a4dc:	f7ff fe14 	bl	800a108 <tcp_out_ext>
			if (ret == 0) {
 800a4e0:	b920      	cbnz	r0, 800a4ec <tcp_resend_data+0x90>
				conn_seq(conn, + 1);
 800a4e2:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	bool conn_unref = false;
 800a4ec:	2500      	movs	r5, #0
 800a4ee:	e003      	b.n	800a4f8 <tcp_resend_data+0x9c>
	} else if (ret == -ENODATA) {
 800a4f0:	303d      	adds	r0, #61	; 0x3d
 800a4f2:	d10c      	bne.n	800a50e <tcp_resend_data+0xb2>
		conn->data_mode = TCP_DATA_MODE_SEND;
 800a4f4:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
	k_mutex_unlock(&conn->lock);
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f00f f9c2 	bl	8019882 <k_mutex_unlock.isra.0>
	if (conn_unref) {
 800a4fe:	b1e5      	cbz	r5, 800a53a <tcp_resend_data+0xde>
		tcp_conn_close(conn, -ETIMEDOUT);
 800a500:	4630      	mov	r0, r6
 800a502:	f06f 0173 	mvn.w	r1, #115	; 0x73
}
 800a506:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		tcp_conn_close(conn, -ETIMEDOUT);
 800a50a:	f00f b9e1 	b.w	80198d0 <tcp_conn_close.isra.0>
	if (conn->send_data_retries < tcp_retries) {
 800a50e:	2908      	cmp	r1, #8
	exp_tcp_rto = TCP_RTO_MS;
 800a510:	f8b4 3144 	ldrh.w	r3, [r4, #324]	; 0x144
	if (conn->send_data_retries < tcp_retries) {
 800a514:	dd0d      	ble.n	800a532 <tcp_resend_data+0xd6>
 800a516:	220a      	movs	r2, #10
	k_work_reschedule_for_queue(&tcp_work_q, &conn->send_data_timer,
 800a518:	4621      	mov	r1, r4
 800a51a:	4809      	ldr	r0, [pc, #36]	; (800a540 <tcp_resend_data+0xe4>)
 800a51c:	fb83 2302 	smull	r2, r3, r3, r2
 800a520:	f007 ff4e 	bl	80123c0 <k_work_reschedule_for_queue>
 800a524:	e7e2      	b.n	800a4ec <tcp_resend_data+0x90>
			exp_tcp_rto += exp_tcp_rto >> 1;
 800a526:	eb03 0363 	add.w	r3, r3, r3, asr #1
		for (int i = 0; i < conn->send_data_retries; i++) {
 800a52a:	3201      	adds	r2, #1
 800a52c:	428a      	cmp	r2, r1
 800a52e:	dbfa      	blt.n	800a526 <tcp_resend_data+0xca>
 800a530:	e7f1      	b.n	800a516 <tcp_resend_data+0xba>
 800a532:	2200      	movs	r2, #0
 800a534:	e7fa      	b.n	800a52c <tcp_resend_data+0xd0>
		conn_unref = true;
 800a536:	461d      	mov	r5, r3
 800a538:	e7de      	b.n	800a4f8 <tcp_resend_data+0x9c>
}
 800a53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a53c:	24002db8 	.word	0x24002db8
 800a540:	240018f8 	.word	0x240018f8

0800a544 <tcp_data_get>:
	if (tcp_recv_cb) {
 800a544:	4b3f      	ldr	r3, [pc, #252]	; (800a644 <tcp_data_get+0x100>)
{
 800a546:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (tcp_recv_cb) {
 800a54a:	f8d3 9000 	ldr.w	r9, [r3]
{
 800a54e:	4604      	mov	r4, r0
 800a550:	460d      	mov	r5, r1
 800a552:	4690      	mov	r8, r2
	if (tcp_recv_cb) {
 800a554:	f1b9 0f00 	cmp.w	r9, #0
 800a558:	d002      	beq.n	800a560 <tcp_data_get+0x1c>
		tcp_recv_cb(conn, pkt);
 800a55a:	47c8      	blx	r9
	enum net_verdict ret = NET_DROP;
 800a55c:	2002      	movs	r0, #2
 800a55e:	e02a      	b.n	800a5b6 <tcp_data_get+0x72>
	if (conn->context->recv_cb) {
 800a560:	6843      	ldr	r3, [r0, #4]
 800a562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0f9      	beq.n	800a55c <tcp_data_get+0x18>
	if (CONFIG_NET_TCP_RECV_QUEUE_TIMEOUT &&
 800a568:	68c3      	ldr	r3, [r0, #12]
 800a56a:	689b      	ldr	r3, [r3, #8]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
 800a56c:	bb33      	cbnz	r3, 800a5bc <tcp_data_get+0x78>
	size_t pending_len = 0;
 800a56e:	2700      	movs	r7, #0
		*len += tcp_check_pending_data(conn, pkt, *len);
 800a570:	f8d8 0000 	ldr.w	r0, [r8]
 800a574:	4438      	add	r0, r7
 800a576:	f8c8 0000 	str.w	r0, [r8]
		net_pkt_cursor_init(pkt);
 800a57a:	4628      	mov	r0, r5
 800a57c:	f00c ff43 	bl	8017406 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
 800a580:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
		net_pkt_skip(pkt, net_pkt_get_len(pkt) - *len);
 800a584:	68a8      	ldr	r0, [r5, #8]
 800a586:	f043 0301 	orr.w	r3, r3, #1
 800a58a:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
 800a58e:	f00f f87d 	bl	801968c <net_pkt_get_len.isra.0>
 800a592:	f8d8 1000 	ldr.w	r1, [r8]
 800a596:	1a41      	subs	r1, r0, r1
 800a598:	4628      	mov	r0, r5
 800a59a:	f00c ff98 	bl	80174ce <net_pkt_skip>
		tcp_update_recv_wnd(conn, -*len);
 800a59e:	f8d8 1000 	ldr.w	r1, [r8]
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	4249      	negs	r1, r1
 800a5a6:	f00f fbbb 	bl	8019d20 <tcp_update_recv_wnd>
		k_fifo_put(&conn->recv_data, pkt);
 800a5aa:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	f011 f9bf 	bl	801b932 <k_queue_append>
 800a5b4:	2000      	movs	r0, #0
}
 800a5b6:	b003      	add	sp, #12
 800a5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
 800a5bc:	68da      	ldr	r2, [r3, #12]
 800a5be:	2a00      	cmp	r2, #0
 800a5c0:	d0d5      	beq.n	800a56e <tcp_data_get+0x2a>
	if (CONFIG_NET_TCP_RECV_QUEUE_TIMEOUT &&
 800a5c2:	8a1b      	ldrh	r3, [r3, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d0d2      	beq.n	800a56e <tcp_data_get+0x2a>
		struct tcphdr *th = th_get(pkt);
 800a5c8:	4608      	mov	r0, r1
		*len += tcp_check_pending_data(conn, pkt, *len);
 800a5ca:	f8d8 a000 	ldr.w	sl, [r8]
		struct tcphdr *th = th_get(pkt);
 800a5ce:	f00f f884 	bl	80196da <th_get>
		pending_seq = tcp_get_seq(conn->queue_recv_data->buffer);
 800a5d2:	68e2      	ldr	r2, [r4, #12]
 800a5d4:	6846      	ldr	r6, [r0, #4]
 800a5d6:	6891      	ldr	r1, [r2, #8]
 800a5d8:	ba33      	rev	r3, r6
	return *(uint32_t *)net_buf_user_data(buf);
 800a5da:	698e      	ldr	r6, [r1, #24]
		pending_len = net_pkt_get_len(conn->queue_recv_data);
 800a5dc:	4608      	mov	r0, r1
		uint32_t expected_seq = th_seq(th) + len;
 800a5de:	eb0a 0b03 	add.w	fp, sl, r3
 800a5e2:	9301      	str	r3, [sp, #4]
		end_offset = expected_seq - pending_seq;
 800a5e4:	ebab 0206 	sub.w	r2, fp, r6
 800a5e8:	9200      	str	r2, [sp, #0]
		pending_len = net_pkt_get_len(conn->queue_recv_data);
 800a5ea:	f00f f84f 	bl	801968c <net_pkt_get_len.isra.0>
		if (end_offset < pending_len) {
 800a5ee:	9a00      	ldr	r2, [sp, #0]
		pending_len = net_pkt_get_len(conn->queue_recv_data);
 800a5f0:	4607      	mov	r7, r0
		if (end_offset < pending_len) {
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	4282      	cmp	r2, r0
 800a5f6:	d214      	bcs.n	800a622 <tcp_data_get+0xde>
			if (end_offset) {
 800a5f8:	b132      	cbz	r2, 800a608 <tcp_data_get+0xc4>
				net_pkt_remove_tail(pkt, end_offset);
 800a5fa:	4437      	add	r7, r6
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4628      	mov	r0, r5
				pending_len -= end_offset;
 800a600:	eba7 070b 	sub.w	r7, r7, fp
				net_pkt_remove_tail(pkt, end_offset);
 800a604:	f00c fee3 	bl	80173ce <net_pkt_remove_tail>
			net_buf_frag_add(pkt->buffer,
 800a608:	68e3      	ldr	r3, [r4, #12]
 800a60a:	68a8      	ldr	r0, [r5, #8]
 800a60c:	6899      	ldr	r1, [r3, #8]
 800a60e:	f00a fcb7 	bl	8014f80 <net_buf_frag_add>
			conn->queue_recv_data->buffer = NULL;
 800a612:	68e3      	ldr	r3, [r4, #12]
 800a614:	2200      	movs	r2, #0
			k_work_cancel_delayable(&conn->recv_queue_timer);
 800a616:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
			conn->queue_recv_data->buffer = NULL;
 800a61a:	609a      	str	r2, [r3, #8]
			k_work_cancel_delayable(&conn->recv_queue_timer);
 800a61c:	f011 fa80 	bl	801bb20 <k_work_cancel_delayable>
 800a620:	e7a6      	b.n	800a570 <tcp_data_get+0x2c>
		gap_size = (int32_t)(pending_seq - th_seq(th) - ((uint32_t)len));
 800a622:	eba6 060a 	sub.w	r6, r6, sl
 800a626:	1af6      	subs	r6, r6, r3
			if (gap_size <= 0) {
 800a628:	2e00      	cmp	r6, #0
 800a62a:	dca0      	bgt.n	800a56e <tcp_data_get+0x2a>
				net_buf_unref(conn->queue_recv_data->buffer);
 800a62c:	4608      	mov	r0, r1
			pending_len = 0;
 800a62e:	464f      	mov	r7, r9
				net_buf_unref(conn->queue_recv_data->buffer);
 800a630:	f7f9 fe62 	bl	80042f8 <net_buf_unref>
				conn->queue_recv_data->buffer = NULL;
 800a634:	68e3      	ldr	r3, [r4, #12]
				k_work_cancel_delayable(&conn->recv_queue_timer);
 800a636:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
				conn->queue_recv_data->buffer = NULL;
 800a63a:	f8c3 9008 	str.w	r9, [r3, #8]
				k_work_cancel_delayable(&conn->recv_queue_timer);
 800a63e:	f011 fa6f 	bl	801bb20 <k_work_cancel_delayable>
 800a642:	e795      	b.n	800a570 <tcp_data_get+0x2c>
 800a644:	24002dbc 	.word	0x24002dbc

0800a648 <tcp_send_queued_data.part.0>:
static int tcp_send_queued_data(struct tcp *conn)
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	4604      	mov	r4, r0
	int ret = 0;
 800a64c:	2600      	movs	r6, #0
	if (conn->unacked_len > conn->send_data_total) {
 800a64e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800a652:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800a656:	4293      	cmp	r3, r2
 800a658:	d813      	bhi.n	800a682 <tcp_send_queued_data.part.0+0x3a>
	if (conn->unacked_len >= conn->send_win) {
 800a65a:	f8b4 5232 	ldrh.w	r5, [r4, #562]	; 0x232
 800a65e:	42ab      	cmp	r3, r5
 800a660:	da0f      	bge.n	800a682 <tcp_send_queued_data.part.0+0x3a>
		unsent_len = MIN(unsent_len, conn->send_win - conn->unacked_len);
 800a662:	1aed      	subs	r5, r5, r3
	unsent_len = conn->send_data_total - conn->unacked_len;
 800a664:	1ad2      	subs	r2, r2, r3
		unsent_len = MIN(unsent_len, conn->send_win - conn->unacked_len);
 800a666:	4295      	cmp	r5, r2
 800a668:	bfa8      	it	ge
 800a66a:	4615      	movge	r5, r2
	while (tcp_unsent_len(conn) > 0) {
 800a66c:	2d00      	cmp	r5, #0
 800a66e:	dd08      	ble.n	800a682 <tcp_send_queued_data.part.0+0x3a>
		if ((conn->tcp_nodelay == false) && (conn->unacked_len > 0)) {
 800a670:	f894 2239 	ldrb.w	r2, [r4, #569]	; 0x239
 800a674:	0711      	lsls	r1, r2, #28
 800a676:	d51e      	bpl.n	800a6b6 <tcp_send_queued_data.part.0+0x6e>
		ret = tcp_send_data(conn);
 800a678:	4620      	mov	r0, r4
 800a67a:	f00f fa1f 	bl	8019abc <tcp_send_data>
		if (ret < 0) {
 800a67e:	1e06      	subs	r6, r0, #0
 800a680:	dae5      	bge.n	800a64e <tcp_send_queued_data.part.0+0x6>
 800a682:	f504 7080 	add.w	r0, r4, #256	; 0x100
	if (conn->send_data_total) {
 800a686:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
 800a68a:	f011 fba9 	bl	801bde0 <z_timeout_remaining>
	if (k_work_delayable_remaining_get(&conn->send_data_timer)) {
 800a68e:	ea50 0301 	orrs.w	r3, r0, r1
 800a692:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 800a696:	d10c      	bne.n	800a6b2 <tcp_send_queued_data.part.0+0x6a>
	if (subscribe) {
 800a698:	b15f      	cbz	r7, 800a6b2 <tcp_send_queued_data.part.0+0x6a>
		conn->send_data_retries = 0;
 800a69a:	2300      	movs	r3, #0
 800a69c:	f8b4 2234 	ldrh.w	r2, [r4, #564]	; 0x234
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_data_timer,
 800a6a0:	4629      	mov	r1, r5
 800a6a2:	4814      	ldr	r0, [pc, #80]	; (800a6f4 <tcp_send_queued_data.part.0+0xac>)
		conn->send_data_retries = 0;
 800a6a4:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
 800a6a8:	230a      	movs	r3, #10
		k_work_reschedule_for_queue(&tcp_work_q, &conn->send_data_timer,
 800a6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ae:	f007 fe87 	bl	80123c0 <k_work_reschedule_for_queue>
}
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((conn->tcp_nodelay == false) && (conn->unacked_len > 0)) {
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	ddde      	ble.n	800a678 <tcp_send_queued_data.part.0+0x30>
			if (tcp_unsent_len(conn) < conn_mss(conn)) {
 800a6ba:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 800a6be:	4620      	mov	r0, r4
 800a6c0:	07da      	lsls	r2, r3, #31
 800a6c2:	bf4c      	ite	mi
 800a6c4:	f8b4 7084 	ldrhmi.w	r7, [r4, #132]	; 0x84
 800a6c8:	f44f 7706 	movpl.w	r7, #536	; 0x218
 800a6cc:	f00f f9ac 	bl	8019a28 <net_tcp_get_supported_mss>
 800a6d0:	42b8      	cmp	r0, r7
 800a6d2:	dd08      	ble.n	800a6e6 <tcp_send_queued_data.part.0+0x9e>
 800a6d4:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 800a6d8:	07db      	lsls	r3, r3, #31
 800a6da:	d508      	bpl.n	800a6ee <tcp_send_queued_data.part.0+0xa6>
 800a6dc:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800a6e0:	42a8      	cmp	r0, r5
 800a6e2:	ddc9      	ble.n	800a678 <tcp_send_queued_data.part.0+0x30>
 800a6e4:	e7cd      	b.n	800a682 <tcp_send_queued_data.part.0+0x3a>
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f00f f99e 	bl	8019a28 <net_tcp_get_supported_mss>
 800a6ec:	e7f8      	b.n	800a6e0 <tcp_send_queued_data.part.0+0x98>
 800a6ee:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a6f2:	e7f5      	b.n	800a6e0 <tcp_send_queued_data.part.0+0x98>
 800a6f4:	240018f8 	.word	0x240018f8

0800a6f8 <net_tcp_queue_data>:
{
 800a6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct tcp *conn = context->tcp;
 800a6fc:	6d44      	ldr	r4, [r0, #84]	; 0x54
{
 800a6fe:	460f      	mov	r7, r1
	if (!conn || conn->state != TCP_ESTABLISHED) {
 800a700:	2c00      	cmp	r4, #0
 800a702:	d062      	beq.n	800a7ca <net_tcp_queue_data+0xd2>
 800a704:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 800a708:	2b04      	cmp	r3, #4
 800a70a:	d15e      	bne.n	800a7ca <net_tcp_queue_data+0xd2>
	k_mutex_lock(&conn->lock, K_FOREVER);
 800a70c:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800a710:	f04f 32ff 	mov.w	r2, #4294967295
 800a714:	f04f 33ff 	mov.w	r3, #4294967295
 800a718:	4648      	mov	r0, r9
 800a71a:	f00e ff75 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	bool window_full = (conn->send_data_total >= conn->send_win);
 800a71e:	f8b4 3232 	ldrh.w	r3, [r4, #562]	; 0x232
	if (tcp_window_full(conn)) {
 800a722:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800a726:	429a      	cmp	r2, r3
 800a728:	d30f      	bcc.n	800a74a <net_tcp_queue_data+0x52>
		if (conn->send_win == 0) {
 800a72a:	b133      	cbz	r3, 800a73a <net_tcp_queue_data+0x42>
		(void)k_work_schedule_for_queue(&tcp_work_q,
 800a72c:	2200      	movs	r2, #0
 800a72e:	2300      	movs	r3, #0
 800a730:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 800a734:	4833      	ldr	r0, [pc, #204]	; (800a804 <net_tcp_queue_data+0x10c>)
 800a736:	f007 fe17 	bl	8012368 <k_work_schedule_for_queue>
		goto out;
 800a73a:	f06f 050a 	mvn.w	r5, #10
	k_mutex_unlock(&conn->lock);
 800a73e:	4648      	mov	r0, r9
 800a740:	f00f f89f 	bl	8019882 <k_mutex_unlock.isra.0>
}
 800a744:	4628      	mov	r0, r5
 800a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = net_pkt_get_len(pkt);
 800a74a:	68b8      	ldr	r0, [r7, #8]
 800a74c:	f00e ff9e 	bl	801968c <net_pkt_get_len.isra.0>
	if (conn->send_data->buffer) {
 800a750:	68a3      	ldr	r3, [r4, #8]
	len = net_pkt_get_len(pkt);
 800a752:	4680      	mov	r8, r0
	if (conn->send_data->buffer) {
 800a754:	689e      	ldr	r6, [r3, #8]
 800a756:	b11e      	cbz	r6, 800a760 <net_tcp_queue_data+0x68>
		orig_buf = net_buf_frag_last(conn->send_data->buffer);
 800a758:	4630      	mov	r0, r6
 800a75a:	f00a fc00 	bl	8014f5e <net_buf_frag_last>
 800a75e:	4606      	mov	r6, r0
	net_pkt_append_buffer(conn->send_data, pkt->buffer);
 800a760:	68b9      	ldr	r1, [r7, #8]
	pkt->buffer = NULL;
 800a762:	f04f 0a00 	mov.w	sl, #0
	net_pkt_append_buffer(conn->send_data, pkt->buffer);
 800a766:	68a0      	ldr	r0, [r4, #8]
 800a768:	f00c fe61 	bl	801742e <net_pkt_append_buffer>
	conn->send_data_total += len;
 800a76c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800a770:	4443      	add	r3, r8
 800a772:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
	pkt->buffer = NULL;
 800a776:	f8c7 a008 	str.w	sl, [r7, #8]
	if (conn->data_mode == TCP_DATA_MODE_RESEND) {
 800a77a:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d012      	beq.n	800a7a8 <net_tcp_queue_data+0xb0>
 800a782:	4620      	mov	r0, r4
 800a784:	f7ff ff60 	bl	800a648 <tcp_send_queued_data.part.0>
	if (ret < 0 && ret != -ENOBUFS) {
 800a788:	1e05      	subs	r5, r0, #0
 800a78a:	da0e      	bge.n	800a7aa <net_tcp_queue_data+0xb2>
 800a78c:	f115 0f69 	cmn.w	r5, #105	; 0x69
 800a790:	d01e      	beq.n	800a7d0 <net_tcp_queue_data+0xd8>
		tcp_conn_close(conn, ret);
 800a792:	4629      	mov	r1, r5
 800a794:	4620      	mov	r0, r4
 800a796:	f00f f89b 	bl	80198d0 <tcp_conn_close.isra.0>
		goto out;
 800a79a:	e7d0      	b.n	800a73e <net_tcp_queue_data+0x46>
			pkt->buffer = conn->send_data->buffer;
 800a79c:	68a3      	ldr	r3, [r4, #8]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	60bb      	str	r3, [r7, #8]
			conn->send_data->buffer = NULL;
 800a7a2:	68a3      	ldr	r3, [r4, #8]
 800a7a4:	609e      	str	r6, [r3, #8]
 800a7a6:	e024      	b.n	800a7f2 <net_tcp_queue_data+0xfa>
	int ret = 0;
 800a7a8:	2500      	movs	r5, #0
	bool window_full = (conn->send_data_total >= conn->send_win);
 800a7aa:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
		if (tcp_window_full(conn)) {
 800a7ae:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d805      	bhi.n	800a7c2 <net_tcp_queue_data+0xca>
	return z_impl_k_sem_take(sem, timeout);
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800a7be:	f007 fc45 	bl	801204c <z_impl_k_sem_take>
		tcp_pkt_unref(pkt);
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	f00c fd8d 	bl	80172e2 <net_pkt_unref>
 800a7c8:	e7b9      	b.n	800a73e <net_tcp_queue_data+0x46>
		return -ENOTCONN;
 800a7ca:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 800a7ce:	e7b9      	b.n	800a744 <net_tcp_queue_data+0x4c>
		(conn->send_data_total < (conn->unacked_len + len))) {
 800a7d0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800a7d4:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
 800a7d8:	4443      	add	r3, r8
	if ((ret == -ENOBUFS) &&
 800a7da:	4298      	cmp	r0, r3
 800a7dc:	d3e4      	bcc.n	800a7a8 <net_tcp_queue_data+0xb0>
		conn->send_data_total -= len;
 800a7de:	eba0 0008 	sub.w	r0, r0, r8
 800a7e2:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
		if (orig_buf) {
 800a7e6:	2e00      	cmp	r6, #0
 800a7e8:	d0d8      	beq.n	800a79c <net_tcp_queue_data+0xa4>
			pkt->buffer = orig_buf->frags;
 800a7ea:	6873      	ldr	r3, [r6, #4]
 800a7ec:	60bb      	str	r3, [r7, #8]
			orig_buf->frags = NULL;
 800a7ee:	f8c6 a004 	str.w	sl, [r6, #4]
		if (conn->send_data_total == 0) {
 800a7f2:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1a1      	bne.n	800a73e <net_tcp_queue_data+0x46>
			k_work_cancel_delayable(&conn->send_data_timer);
 800a7fa:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 800a7fe:	f011 f98f 	bl	801bb20 <k_work_cancel_delayable>
 800a802:	e79c      	b.n	800a73e <net_tcp_queue_data+0x46>
 800a804:	240018f8 	.word	0x240018f8

0800a808 <tcp_in>:
{
 800a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	4604      	mov	r4, r0
 800a80e:	b093      	sub	sp, #76	; 0x4c
	struct tcphdr *th = pkt ? th_get(pkt) : NULL;
 800a810:	460d      	mov	r5, r1
 800a812:	bb21      	cbnz	r1, 800a85e <tcp_in+0x56>
 800a814:	460e      	mov	r6, r1
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 800a816:	460f      	mov	r7, r1
	uint8_t next = 0, fl = 0;
 800a818:	f88d 101f 	strb.w	r1, [sp, #31]
	k_mutex_lock(&conn->lock, K_FOREVER);
 800a81c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800a820:	f04f 32ff 	mov.w	r2, #4294967295
 800a824:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a828:	9302      	str	r3, [sp, #8]
 800a82a:	f04f 33ff 	mov.w	r3, #4294967295
 800a82e:	f00e feeb 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	if (th && th_off(th) < 5) {
 800a832:	b346      	cbz	r6, 800a886 <tcp_in+0x7e>
 800a834:	7b33      	ldrb	r3, [r6, #12]
 800a836:	2b4f      	cmp	r3, #79	; 0x4f
 800a838:	d825      	bhi.n	800a886 <tcp_in+0x7e>
	enum net_verdict verdict = NET_DROP;
 800a83a:	2702      	movs	r7, #2
		close_status = -ECONNRESET;
 800a83c:	f06f 0967 	mvn.w	r9, #103	; 0x67
		do_close = true;
 800a840:	f04f 0801 	mov.w	r8, #1
		tcp_out(conn, RST);
 800a844:	2104      	movs	r1, #4
 800a846:	4620      	mov	r0, r4
 800a848:	f00f f91e 	bl	8019a88 <tcp_out>
	bool do_close = false;
 800a84c:	2300      	movs	r3, #0
		if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
 800a84e:	f8df a288 	ldr.w	sl, [pc, #648]	; 800aad8 <tcp_in+0x2d0>
	bool do_close = false;
 800a852:	9303      	str	r3, [sp, #12]
	len = pkt ? tcp_data_len(pkt) : 0;
 800a854:	2d00      	cmp	r5, #0
 800a856:	f040 80c6 	bne.w	800a9e6 <tcp_in+0x1de>
 800a85a:	2000      	movs	r0, #0
 800a85c:	e0d5      	b.n	800aa0a <tcp_in+0x202>
	struct tcphdr *th = pkt ? th_get(pkt) : NULL;
 800a85e:	4608      	mov	r0, r1
 800a860:	f00e ff3b 	bl	80196da <th_get>
	uint8_t next = 0, fl = 0;
 800a864:	2300      	movs	r3, #0
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 800a866:	4606      	mov	r6, r0
	uint8_t next = 0, fl = 0;
 800a868:	f88d 301f 	strb.w	r3, [sp, #31]
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 800a86c:	b148      	cbz	r0, 800a882 <tcp_in+0x7a>
 800a86e:	7b07      	ldrb	r7, [r0, #12]
		fl = th_flags(th) & ~(ECN | CWR);
 800a870:	7b43      	ldrb	r3, [r0, #13]
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 800a872:	093f      	lsrs	r7, r7, #4
		fl = th_flags(th) & ~(ECN | CWR);
 800a874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 800a878:	3f05      	subs	r7, #5
		fl = th_flags(th) & ~(ECN | CWR);
 800a87a:	f88d 301f 	strb.w	r3, [sp, #31]
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 800a87e:	00bf      	lsls	r7, r7, #2
		fl = th_flags(th) & ~(ECN | CWR);
 800a880:	e7cc      	b.n	800a81c <tcp_in+0x14>
	size_t tcp_options_len = th ? (th_off(th) - 5) * 4 : 0;
 800a882:	4607      	mov	r7, r0
 800a884:	e7ca      	b.n	800a81c <tcp_in+0x14>
	if (FL(&fl, &, RST)) {
 800a886:	f89d 901f 	ldrb.w	r9, [sp, #31]
 800a88a:	f1b9 0f00 	cmp.w	r9, #0
 800a88e:	d019      	beq.n	800a8c4 <tcp_in+0xbc>
 800a890:	4892      	ldr	r0, [pc, #584]	; (800aadc <tcp_in+0x2d4>)
 800a892:	f00a f9a3 	bl	8014bdc <strlen>
 800a896:	f019 0f04 	tst.w	r9, #4
 800a89a:	d013      	beq.n	800a8c4 <tcp_in+0xbc>
 800a89c:	f029 0304 	bic.w	r3, r9, #4
 800a8a0:	f88d 301f 	strb.w	r3, [sp, #31]
		if (!tcp_validate_seq(conn, th)) {
 800a8a4:	4631      	mov	r1, r6
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f00e fe8d 	bl	80195c6 <tcp_validate_seq>
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f040 8093 	bne.w	800a9da <tcp_in+0x1d2>
			return NET_DROP;
 800a8b4:	2702      	movs	r7, #2
			k_mutex_unlock(&conn->lock);
 800a8b6:	9802      	ldr	r0, [sp, #8]
 800a8b8:	f00e ffe3 	bl	8019882 <k_mutex_unlock.isra.0>
}
 800a8bc:	4638      	mov	r0, r7
 800a8be:	b013      	add	sp, #76	; 0x4c
 800a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
 800a8c4:	b357      	cbz	r7, 800a91c <tcp_in+0x114>
	net_pkt_cursor_init(pkt);
 800a8c6:	4628      	mov	r0, r5
	ret = net_pkt_read(pkt, buf, MIN(tcp_options_len, buf_len));
 800a8c8:	f10d 0b20 	add.w	fp, sp, #32
	backup->pos = pkt->cursor.pos;
 800a8cc:	e9d5 a803 	ldrd	sl, r8, [r5, #12]
	net_pkt_cursor_init(pkt);
 800a8d0:	f00c fd99 	bl	8017406 <net_pkt_cursor_init>
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt) +
 800a8d4:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 800a8d6:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
 800a8da:	4628      	mov	r0, r5
 800a8dc:	4419      	add	r1, r3
 800a8de:	3114      	adds	r1, #20
 800a8e0:	f00c fdf5 	bl	80174ce <net_pkt_skip>
	ret = net_pkt_read(pkt, buf, MIN(tcp_options_len, buf_len));
 800a8e4:	2f28      	cmp	r7, #40	; 0x28
 800a8e6:	463a      	mov	r2, r7
 800a8e8:	4659      	mov	r1, fp
 800a8ea:	bf28      	it	cs
 800a8ec:	2228      	movcs	r2, #40	; 0x28
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f00c fea4 	bl	801763c <net_pkt_read>
		buf = NULL;
 800a8f4:	2800      	cmp	r0, #0
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
 800a8f6:	463a      	mov	r2, r7
			recv_options->window = opt;
 800a8f8:	f04f 0c03 	mov.w	ip, #3
		buf = NULL;
 800a8fc:	bfac      	ite	ge
 800a8fe:	4659      	movge	r1, fp
 800a900:	2100      	movlt	r1, #0
	pkt->cursor.pos = backup->pos;
 800a902:	e9c5 a803 	strd	sl, r8, [r5, #12]
	recv_options->mss_found = false;
 800a906:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 800a90a:	f023 0303 	bic.w	r3, r3, #3
 800a90e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	for ( ; options && len >= 1; options += opt_len, len -= opt_len) {
 800a912:	b109      	cbz	r1, 800a918 <tcp_in+0x110>
 800a914:	2a00      	cmp	r2, #0
 800a916:	dc28      	bgt.n	800a96a <tcp_in+0x162>
	if (tcp_options_len && !tcp_options_check(&conn->recv_options, pkt,
 800a918:	2f00      	cmp	r7, #0
 800a91a:	dd8e      	ble.n	800a83a <tcp_in+0x32>
	if (th && (conn->state != TCP_LISTEN) && (conn->state != TCP_SYN_SENT) &&
 800a91c:	2e00      	cmp	r6, #0
 800a91e:	d05e      	beq.n	800a9de <tcp_in+0x1d6>
 800a920:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 800a924:	3b01      	subs	r3, #1
 800a926:	2b01      	cmp	r3, #1
 800a928:	f240 84fd 	bls.w	800b326 <tcp_in+0xb1e>
	    tcp_validate_seq(conn, th) && FL(&fl, &, SYN)) {
 800a92c:	4631      	mov	r1, r6
 800a92e:	4620      	mov	r0, r4
 800a930:	f00e fe49 	bl	80195c6 <tcp_validate_seq>
	if (th && (conn->state != TCP_LISTEN) && (conn->state != TCP_SYN_SENT) &&
 800a934:	4680      	mov	r8, r0
 800a936:	2800      	cmp	r0, #0
 800a938:	f000 84f5 	beq.w	800b326 <tcp_in+0xb1e>
	    tcp_validate_seq(conn, th) && FL(&fl, &, SYN)) {
 800a93c:	f1b9 0f00 	cmp.w	r9, #0
 800a940:	f000 84f1 	beq.w	800b326 <tcp_in+0xb1e>
 800a944:	4865      	ldr	r0, [pc, #404]	; (800aadc <tcp_in+0x2d4>)
 800a946:	f00a f949 	bl	8014bdc <strlen>
 800a94a:	f019 0f02 	tst.w	r9, #2
 800a94e:	f000 84ea 	beq.w	800b326 <tcp_in+0xb1e>
 800a952:	f029 0302 	bic.w	r3, r9, #2
 800a956:	f88d 301f 	strb.w	r3, [sp, #31]
	enum net_verdict verdict = NET_DROP;
 800a95a:	2702      	movs	r7, #2
		tcp_out(conn, RST);
 800a95c:	2104      	movs	r1, #4
 800a95e:	4620      	mov	r0, r4
 800a960:	f00f f892 	bl	8019a88 <tcp_out>
		close_status = -ECONNRESET;
 800a964:	f06f 0967 	mvn.w	r9, #103	; 0x67
 800a968:	e770      	b.n	800a84c <tcp_in+0x44>
		opt = options[0];
 800a96a:	7808      	ldrb	r0, [r1, #0]
		if (opt == NET_TCP_END_OPT) {
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d0d3      	beq.n	800a918 <tcp_in+0x110>
		} else if (opt == NET_TCP_NOP_OPT) {
 800a970:	2801      	cmp	r0, #1
 800a972:	d028      	beq.n	800a9c6 <tcp_in+0x1be>
			if (len < 2) { /* Only END and NOP can have length 1 */
 800a974:	2a01      	cmp	r2, #1
 800a976:	f43f af60 	beq.w	800a83a <tcp_in+0x32>
			opt_len = options[1];
 800a97a:	784b      	ldrb	r3, [r1, #1]
		if (opt_len < 2 || opt_len > len) {
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	f67f af5c 	bls.w	800a83a <tcp_in+0x32>
 800a982:	429a      	cmp	r2, r3
 800a984:	f6ff af59 	blt.w	800a83a <tcp_in+0x32>
		switch (opt) {
 800a988:	2802      	cmp	r0, #2
 800a98a:	d004      	beq.n	800a996 <tcp_in+0x18e>
 800a98c:	2803      	cmp	r0, #3
 800a98e:	d010      	beq.n	800a9b2 <tcp_in+0x1aa>
	for ( ; options && len >= 1; options += opt_len, len -= opt_len) {
 800a990:	4419      	add	r1, r3
 800a992:	1ad2      	subs	r2, r2, r3
 800a994:	e7bd      	b.n	800a912 <tcp_in+0x10a>
			if (opt_len != 4) {
 800a996:	2b04      	cmp	r3, #4
 800a998:	f47f af4f 	bne.w	800a83a <tcp_in+0x32>
			recv_options->mss =
 800a99c:	8848      	ldrh	r0, [r1, #2]
 800a99e:	ba40      	rev16	r0, r0
 800a9a0:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
			recv_options->mss_found = true;
 800a9a4:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
 800a9a8:	f040 0001 	orr.w	r0, r0, #1
			recv_options->wnd_found = true;
 800a9ac:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
			break;
 800a9b0:	e7ee      	b.n	800a990 <tcp_in+0x188>
			if (opt_len != 3) {
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	f47f af41 	bne.w	800a83a <tcp_in+0x32>
			recv_options->wnd_found = true;
 800a9b8:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
			recv_options->window = opt;
 800a9bc:	f8a4 c086 	strh.w	ip, [r4, #134]	; 0x86
			recv_options->wnd_found = true;
 800a9c0:	f040 0002 	orr.w	r0, r0, #2
 800a9c4:	e7f2      	b.n	800a9ac <tcp_in+0x1a4>
			opt_len = 1;
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	e7e2      	b.n	800a990 <tcp_in+0x188>
			(void)k_work_cancel_delayable(&conn->persist_timer);
 800a9ca:	f011 f8a9 	bl	801bb20 <k_work_cancel_delayable>
 800a9ce:	f000 bccb 	b.w	800b368 <tcp_in+0xb60>
	z_impl_k_sem_give(sem);
 800a9d2:	f007 fb15 	bl	8012000 <z_impl_k_sem_give>
 800a9d6:	f000 bcd4 	b.w	800b382 <tcp_in+0xb7a>
		verdict = NET_OK;
 800a9da:	2700      	movs	r7, #0
 800a9dc:	e7c2      	b.n	800a964 <tcp_in+0x15c>
	enum net_verdict verdict = NET_DROP;
 800a9de:	2702      	movs	r7, #2
	int close_status = 0;
 800a9e0:	46b1      	mov	r9, r6
	bool do_close = false;
 800a9e2:	46b0      	mov	r8, r6
 800a9e4:	e732      	b.n	800a84c <tcp_in+0x44>
	struct tcphdr *th = th_get(pkt);
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f00e fe77 	bl	80196da <th_get>
 800a9ec:	4601      	mov	r1, r0
	int len = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
 800a9ee:	68a8      	ldr	r0, [r5, #8]
 800a9f0:	f00e fe4c 	bl	801968c <net_pkt_get_len.isra.0>
		net_pkt_ip_opts_len(pkt) - sizeof(*th) - tcp_options_len;
 800a9f4:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
	int len = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
 800a9f6:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
		net_pkt_ip_opts_len(pkt) - sizeof(*th) - tcp_options_len;
 800a9fa:	441a      	add	r2, r3
	size_t tcp_options_len = (th_off(th) - 5) * 4;
 800a9fc:	7b0b      	ldrb	r3, [r1, #12]
		net_pkt_ip_opts_len(pkt) - sizeof(*th) - tcp_options_len;
 800a9fe:	1a82      	subs	r2, r0, r2
	size_t tcp_options_len = (th_off(th) - 5) * 4;
 800aa00:	091b      	lsrs	r3, r3, #4
		net_pkt_ip_opts_len(pkt) - sizeof(*th) - tcp_options_len;
 800aa02:	eba2 0083 	sub.w	r0, r2, r3, lsl #2
	return len > 0 ? (size_t)len : 0;
 800aa06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	switch (conn->state) {
 800aa0a:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
	len = pkt ? tcp_data_len(pkt) : 0;
 800aa0e:	9008      	str	r0, [sp, #32]
	switch (conn->state) {
 800aa10:	3b01      	subs	r3, #1
 800aa12:	2b0a      	cmp	r3, #10
 800aa14:	f200 8376 	bhi.w	800b104 <tcp_in+0x8fc>
 800aa18:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aa1c:	00be000b 	.word	0x00be000b
 800aa20:	01090064 	.word	0x01090064
 800aa24:	02fe02b5 	.word	0x02fe02b5
 800aa28:	032a0293 	.word	0x032a0293
 800aa2c:	03490295 	.word	0x03490295
 800aa30:	03d5      	.short	0x03d5
		if (FL(&fl, ==, SYN)) {
 800aa32:	f89d b01f 	ldrb.w	fp, [sp, #31]
 800aa36:	f1bb 0f00 	cmp.w	fp, #0
 800aa3a:	d033      	beq.n	800aaa4 <tcp_in+0x29c>
 800aa3c:	4827      	ldr	r0, [pc, #156]	; (800aadc <tcp_in+0x2d4>)
 800aa3e:	f00a f8cd 	bl	8014bdc <strlen>
 800aa42:	f1bb 0f02 	cmp.w	fp, #2
 800aa46:	d12d      	bne.n	800aaa4 <tcp_in+0x29c>
 800aa48:	2700      	movs	r7, #0
 800aa4a:	f88d 701f 	strb.w	r7, [sp, #31]
			conn->send_options.mss_found = true;
 800aa4e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
			tcp_out(conn, SYN | ACK);
 800aa52:	2112      	movs	r1, #18
 800aa54:	4620      	mov	r0, r4
			conn->send_options.mss_found = true;
 800aa56:	f043 0301 	orr.w	r3, r3, #1
 800aa5a:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
			conn_ack(conn, th_seq(th) + 1); /* capture peer's isn */
 800aa5e:	6873      	ldr	r3, [r6, #4]
 800aa60:	ba1a      	rev	r2, r3
 800aa62:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800aa66:	3301      	adds	r3, #1
 800aa68:	4413      	add	r3, r2
 800aa6a:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, SYN | ACK);
 800aa6e:	f00f f80b 	bl	8019a88 <tcp_out>
			conn->send_options.mss_found = false;
 800aa72:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
			k_work_reschedule_for_queue(&tcp_work_q,
 800aa76:	f242 7210 	movw	r2, #10000	; 0x2710
 800aa7a:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
			conn->send_options.mss_found = false;
 800aa7e:	f367 0300 	bfi	r3, r7, #0, #1
			k_work_reschedule_for_queue(&tcp_work_q,
 800aa82:	4817      	ldr	r0, [pc, #92]	; (800aae0 <tcp_in+0x2d8>)
			conn->send_options.mss_found = false;
 800aa84:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
			conn_seq(conn, + 1);
 800aa88:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
			k_work_reschedule_for_queue(&tcp_work_q,
 800aa92:	2300      	movs	r3, #0
 800aa94:	f007 fc94 	bl	80123c0 <k_work_reschedule_for_queue>
			next = TCP_SYN_RECEIVED;
 800aa98:	2303      	movs	r3, #3
	if (pkt) {
 800aa9a:	2d00      	cmp	r5, #0
 800aa9c:	f040 8398 	bne.w	800b1d0 <tcp_in+0x9c8>
 800aaa0:	462f      	mov	r7, r5
 800aaa2:	e39e      	b.n	800b1e2 <tcp_in+0x9da>
			conn->send_options.mss_found = true;
 800aaa4:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
			tcp_out(conn, SYN);
 800aaa8:	2102      	movs	r1, #2
 800aaaa:	4620      	mov	r0, r4
			conn->send_options.mss_found = true;
 800aaac:	f043 0301 	orr.w	r3, r3, #1
 800aab0:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
			tcp_out(conn, SYN);
 800aab4:	f00e ffe8 	bl	8019a88 <tcp_out>
			conn->send_options.mss_found = false;
 800aab8:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 800aabc:	f36f 0300 	bfc	r3, #0, #1
 800aac0:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
			conn_seq(conn, + 1);
 800aac4:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800aac8:	3301      	adds	r3, #1
 800aaca:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
			next = TCP_SYN_SENT;
 800aace:	2302      	movs	r3, #2
	if (pkt) {
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	f000 8386 	beq.w	800b1e2 <tcp_in+0x9da>
 800aad6:	e37a      	b.n	800b1ce <tcp_in+0x9c6>
 800aad8:	0801ec58 	.word	0x0801ec58
 800aadc:	0801ffee 	.word	0x0801ffee
 800aae0:	240018f8 	.word	0x240018f8
		if (FL(&fl, &, ACK, th_ack(th) == conn->seq &&
 800aae4:	f89d b01f 	ldrb.w	fp, [sp, #31]
 800aae8:	f1bb 0f00 	cmp.w	fp, #0
 800aaec:	f000 836b 	beq.w	800b1c6 <tcp_in+0x9be>
 800aaf0:	48c8      	ldr	r0, [pc, #800]	; (800ae14 <tcp_in+0x60c>)
 800aaf2:	f00a f873 	bl	8014bdc <strlen>
 800aaf6:	b168      	cbz	r0, 800ab14 <tcp_in+0x30c>
 800aaf8:	68b3      	ldr	r3, [r6, #8]
 800aafa:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 800aafe:	ba1b      	rev	r3, r3
 800ab00:	4293      	cmp	r3, r2
 800ab02:	f040 8360 	bne.w	800b1c6 <tcp_in+0x9be>
 800ab06:	6873      	ldr	r3, [r6, #4]
 800ab08:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800ab0c:	ba1b      	rev	r3, r3
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	f040 8359 	bne.w	800b1c6 <tcp_in+0x9be>
 800ab14:	f01b 0f10 	tst.w	fp, #16
 800ab18:	f000 8355 	beq.w	800b1c6 <tcp_in+0x9be>
 800ab1c:	f02b 0b10 	bic.w	fp, fp, #16
 800ab20:	f88d b01f 	strb.w	fp, [sp, #31]
			k_work_cancel_delayable(&conn->establish_timer);
 800ab24:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 800ab28:	f010 fffa 	bl	801bb20 <k_work_cancel_delayable>
			tcp_send_timer_cancel(conn);
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f7fe ff99 	bl	8009a64 <tcp_send_timer_cancel>
	int ref_count = atomic_inc(&conn->ref_count) + 1;
 800ab32:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800ab36:	f00e febf 	bl	80198b8 <atomic_inc.isra.0>
			net_context_set_state(conn->context,
 800ab3a:	6862      	ldr	r2, [r4, #4]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
 800ab3c:	f8b2 3074 	ldrh.w	r3, [r2, #116]	; 0x74
 800ab40:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
 800ab44:	f043 0304 	orr.w	r3, r3, #4
 800ab48:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
			if (conn->accepted_conn) {
 800ab4c:	6a23      	ldr	r3, [r4, #32]
 800ab4e:	b153      	cbz	r3, 800ab66 <tcp_in+0x35e>
				if (conn->accepted_conn->accept_cb) {
 800ab50:	6a1e      	ldr	r6, [r3, #32]
 800ab52:	b136      	cbz	r6, 800ab62 <tcp_in+0x35a>
						&conn->accepted_conn->context->remote,
 800ab54:	6859      	ldr	r1, [r3, #4]
					conn->accepted_conn->accept_cb(
 800ab56:	2218      	movs	r2, #24
 800ab58:	2300      	movs	r3, #0
 800ab5a:	6860      	ldr	r0, [r4, #4]
 800ab5c:	9100      	str	r1, [sp, #0]
 800ab5e:	312c      	adds	r1, #44	; 0x2c
 800ab60:	47b0      	blx	r6
				conn->accepted_conn = NULL;
 800ab62:	2300      	movs	r3, #0
 800ab64:	6223      	str	r3, [r4, #32]
			if (len) {
 800ab66:	9b08      	ldr	r3, [sp, #32]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f000 8458 	beq.w	800b41e <tcp_in+0xc16>
				verdict = tcp_data_get(conn, pkt, &len);
 800ab6e:	4629      	mov	r1, r5
 800ab70:	aa08      	add	r2, sp, #32
 800ab72:	4620      	mov	r0, r4
 800ab74:	f7ff fce6 	bl	800a544 <tcp_data_get>
				conn_ack(conn, + len);
 800ab78:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800ab7c:	9a08      	ldr	r2, [sp, #32]
					pkt = NULL;
 800ab7e:	1e07      	subs	r7, r0, #0
				tcp_out(conn, ACK);
 800ab80:	f04f 0110 	mov.w	r1, #16
 800ab84:	4620      	mov	r0, r4
				conn_ack(conn, + len);
 800ab86:	4413      	add	r3, r2
					pkt = NULL;
 800ab88:	bf08      	it	eq
 800ab8a:	2500      	moveq	r5, #0
				conn_ack(conn, + len);
 800ab8c:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
				tcp_out(conn, ACK);
 800ab90:	f00e ff7a 	bl	8019a88 <tcp_out>
			next = TCP_ESTABLISHED;
 800ab94:	2304      	movs	r3, #4
 800ab96:	e79b      	b.n	800aad0 <tcp_in+0x2c8>
		if (FL(&fl, &, SYN | ACK, th && th_ack(th) == conn->seq)) {
 800ab98:	f89d b01f 	ldrb.w	fp, [sp, #31]
 800ab9c:	f1bb 0f00 	cmp.w	fp, #0
 800aba0:	f000 8311 	beq.w	800b1c6 <tcp_in+0x9be>
 800aba4:	489c      	ldr	r0, [pc, #624]	; (800ae18 <tcp_in+0x610>)
 800aba6:	f00a f819 	bl	8014bdc <strlen>
 800abaa:	b148      	cbz	r0, 800abc0 <tcp_in+0x3b8>
 800abac:	2e00      	cmp	r6, #0
 800abae:	f000 830a 	beq.w	800b1c6 <tcp_in+0x9be>
 800abb2:	68b3      	ldr	r3, [r6, #8]
 800abb4:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 800abb8:	ba1b      	rev	r3, r3
 800abba:	4293      	cmp	r3, r2
 800abbc:	f040 8303 	bne.w	800b1c6 <tcp_in+0x9be>
 800abc0:	f01b 0f12 	tst.w	fp, #18
 800abc4:	f000 82ff 	beq.w	800b1c6 <tcp_in+0x9be>
 800abc8:	f02b 0b12 	bic.w	fp, fp, #18
 800abcc:	f88d b01f 	strb.w	fp, [sp, #31]
			tcp_send_timer_cancel(conn);
 800abd0:	4620      	mov	r0, r4
 800abd2:	f7fe ff47 	bl	8009a64 <tcp_send_timer_cancel>
			conn_ack(conn, th_seq(th) + 1);
 800abd6:	6873      	ldr	r3, [r6, #4]
			if (len) {
 800abd8:	9f08      	ldr	r7, [sp, #32]
 800abda:	ba1a      	rev	r2, r3
			conn_ack(conn, th_seq(th) + 1);
 800abdc:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800abe0:	3301      	adds	r3, #1
 800abe2:	4413      	add	r3, r2
 800abe4:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			if (len) {
 800abe8:	b16f      	cbz	r7, 800ac06 <tcp_in+0x3fe>
				verdict = tcp_data_get(conn, pkt, &len);
 800abea:	aa08      	add	r2, sp, #32
 800abec:	4629      	mov	r1, r5
 800abee:	4620      	mov	r0, r4
 800abf0:	f7ff fca8 	bl	800a544 <tcp_data_get>
				conn_ack(conn, + len);
 800abf4:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
					pkt = NULL;
 800abf8:	1e07      	subs	r7, r0, #0
				conn_ack(conn, + len);
 800abfa:	9a08      	ldr	r2, [sp, #32]
					pkt = NULL;
 800abfc:	bf08      	it	eq
 800abfe:	2500      	moveq	r5, #0
				conn_ack(conn, + len);
 800ac00:	4413      	add	r3, r2
 800ac02:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
	int ref_count = atomic_inc(&conn->ref_count) + 1;
 800ac06:	f504 7007 	add.w	r0, r4, #540	; 0x21c
			tcp_out(conn, ACK);
 800ac0a:	2110      	movs	r1, #16
	int ref_count = atomic_inc(&conn->ref_count) + 1;
 800ac0c:	f00e fe54 	bl	80198b8 <atomic_inc.isra.0>
			net_context_set_state(conn->context,
 800ac10:	6862      	ldr	r2, [r4, #4]
			tcp_out(conn, ACK);
 800ac12:	4620      	mov	r0, r4
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
 800ac14:	f8b2 3074 	ldrh.w	r3, [r2, #116]	; 0x74
 800ac18:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
 800ac1c:	f043 0304 	orr.w	r3, r3, #4
 800ac20:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
 800ac24:	f00e ff30 	bl	8019a88 <tcp_out>
			connection_ok = true;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	9303      	str	r3, [sp, #12]
 800ac2c:	e7b2      	b.n	800ab94 <tcp_in+0x38c>
		if (th && FL(&fl, ==, (FIN | ACK), th_seq(th) == conn->ack)) {
 800ac2e:	2e00      	cmp	r6, #0
 800ac30:	f000 82c9 	beq.w	800b1c6 <tcp_in+0x9be>
 800ac34:	f89d b01f 	ldrb.w	fp, [sp, #31]
 800ac38:	f1bb 0f00 	cmp.w	fp, #0
 800ac3c:	f000 828a 	beq.w	800b154 <tcp_in+0x94c>
 800ac40:	4650      	mov	r0, sl
 800ac42:	f009 ffcb 	bl	8014bdc <strlen>
 800ac46:	b130      	cbz	r0, 800ac56 <tcp_in+0x44e>
 800ac48:	6873      	ldr	r3, [r6, #4]
 800ac4a:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800ac4e:	ba1b      	rev	r3, r3
 800ac50:	4293      	cmp	r3, r2
 800ac52:	f040 83c8 	bne.w	800b3e6 <tcp_in+0xbde>
 800ac56:	f1bb 0f11 	cmp.w	fp, #17
 800ac5a:	f040 83c4 	bne.w	800b3e6 <tcp_in+0xbde>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f88d 301f 	strb.w	r3, [sp, #31]
			if (net_tcp_seq_cmp(th_ack(th), conn->seq) > 0) {
 800ac64:	68b3      	ldr	r3, [r6, #8]
			tcp_out(conn, FIN | ACK);
 800ac66:	2111      	movs	r1, #17
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline int32_t net_tcp_seq_cmp(uint32_t seq1, uint32_t seq2)
{
	return (int32_t)(seq1 - seq2);
 800ac68:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	ba1b      	rev	r3, r3
 800ac70:	1a9a      	subs	r2, r3, r2
			if (net_tcp_seq_cmp(th_ack(th), conn->seq) > 0) {
 800ac72:	2a00      	cmp	r2, #0
				conn_seq(conn, + len_acked);
 800ac74:	bfc8      	it	gt
 800ac76:	f8c4 3224 	strgt.w	r3, [r4, #548]	; 0x224
			conn_ack(conn, + 1);
 800ac7a:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800ac7e:	3301      	adds	r3, #1
 800ac80:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, FIN | ACK);
 800ac84:	f00e ff00 	bl	8019a88 <tcp_out>
			next = TCP_LAST_ACK;
 800ac88:	2309      	movs	r3, #9
			break;
 800ac8a:	e706      	b.n	800aa9a <tcp_in+0x292>
					(tcp_pkt_pull(conn->send_data,
 800ac8c:	68a0      	ldr	r0, [r4, #8]
 800ac8e:	e9cd 1304 	strd	r1, r3, [sp, #16]
 800ac92:	f00e fd03 	bl	801969c <tcp_pkt_pull>
			if ((conn->send_data_total < len_acked) ||
 800ac96:	2800      	cmp	r0, #0
 800ac98:	f2c0 828d 	blt.w	800b1b6 <tcp_in+0x9ae>
			conn->dup_ack_cnt = 0;
 800ac9c:	9b05      	ldr	r3, [sp, #20]
 800ac9e:	2200      	movs	r2, #0
			if (conn->unacked_len < len_acked) {
 800aca0:	9904      	ldr	r1, [sp, #16]
 800aca2:	ebab 0303 	sub.w	r3, fp, r3
 800aca6:	f8d4 b218 	ldr.w	fp, [r4, #536]	; 0x218
			conn->send_data_total -= len_acked;
 800acaa:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
			if (conn->unacked_len < len_acked) {
 800acae:	458b      	cmp	fp, r1
			conn->dup_ack_cnt = 0;
 800acb0:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
			conn->send_data_total -= len_acked;
 800acb4:	4418      	add	r0, r3
				conn->unacked_len -= len_acked;
 800acb6:	bf28      	it	cs
 800acb8:	eb0b 0203 	addcs.w	r2, fp, r3
	bool window_full = (conn->send_data_total >= conn->send_win);
 800acbc:	f8b4 3232 	ldrh.w	r3, [r4, #562]	; 0x232
			conn->send_data_total -= len_acked;
 800acc0:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
			if (!tcp_window_full(conn)) {
 800acc4:	4298      	cmp	r0, r3
 800acc6:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
 800acca:	d205      	bcs.n	800acd8 <tcp_in+0x4d0>
 800accc:	9104      	str	r1, [sp, #16]
 800acce:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800acd2:	f007 f995 	bl	8012000 <z_impl_k_sem_give>
 800acd6:	9904      	ldr	r1, [sp, #16]
			conn_seq(conn, + len_acked);
 800acd8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800acdc:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800ace0:	f104 0bf0 	add.w	fp, r4, #240	; 0xf0
 800ace4:	4419      	add	r1, r3
 800ace6:	f8c4 1224 	str.w	r1, [r4, #548]	; 0x224
 800acea:	f011 f879 	bl	801bde0 <z_timeout_remaining>
			if (!k_work_delayable_remaining_get(
 800acee:	ea50 0301 	orrs.w	r3, r0, r1
 800acf2:	f000 8268 	beq.w	800b1c6 <tcp_in+0x9be>
			conn->send_data_retries = 0;
 800acf6:	2700      	movs	r7, #0
			k_work_cancel_delayable(&conn->send_data_timer);
 800acf8:	4658      	mov	r0, fp
			conn->send_data_retries = 0;
 800acfa:	f884 7236 	strb.w	r7, [r4, #566]	; 0x236
			k_work_cancel_delayable(&conn->send_data_timer);
 800acfe:	f010 ff0f 	bl	801bb20 <k_work_cancel_delayable>
			if (conn->data_mode == TCP_DATA_MODE_RESEND) {
 800ad02:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d104      	bne.n	800ad14 <tcp_in+0x50c>
				tcp_derive_rto(conn);
 800ad0a:	4620      	mov	r0, r4
				conn->unacked_len = 0;
 800ad0c:	f8c4 7218 	str.w	r7, [r4, #536]	; 0x218
				tcp_derive_rto(conn);
 800ad10:	f00e fc68 	bl	80195e4 <tcp_derive_rto>
			if (conn->in_close && conn->send_data_total == 0) {
 800ad14:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
				tcp_send_timer_cancel(conn);
 800ad18:	4620      	mov	r0, r4
			conn->data_mode = TCP_DATA_MODE_SEND;
 800ad1a:	f884 7221 	strb.w	r7, [r4, #545]	; 0x221
			if (conn->in_close && conn->send_data_total == 0) {
 800ad1e:	075a      	lsls	r2, r3, #29
 800ad20:	d50f      	bpl.n	800ad42 <tcp_in+0x53a>
 800ad22:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800ad26:	b963      	cbnz	r3, 800ad42 <tcp_in+0x53a>
				tcp_send_timer_cancel(conn);
 800ad28:	f7fe fe9c 	bl	8009a64 <tcp_send_timer_cancel>
				tcp_out(conn, FIN | ACK);
 800ad2c:	2111      	movs	r1, #17
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f00e feaa 	bl	8019a88 <tcp_out>
				conn_seq(conn, + 1);
 800ad34:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800ad38:	3301      	adds	r3, #1
 800ad3a:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
				next = TCP_FIN_WAIT_1;
 800ad3e:	2305      	movs	r3, #5
				break;
 800ad40:	e6ab      	b.n	800aa9a <tcp_in+0x292>
	if (conn->data_mode == TCP_DATA_MODE_RESEND) {
 800ad42:	f7ff fc81 	bl	800a648 <tcp_send_queued_data.part.0>
			if (ret < 0 && ret != -ENOBUFS) {
 800ad46:	1e07      	subs	r7, r0, #0
 800ad48:	da0e      	bge.n	800ad68 <tcp_in+0x560>
 800ad4a:	f117 0f69 	cmn.w	r7, #105	; 0x69
 800ad4e:	d00b      	beq.n	800ad68 <tcp_in+0x560>
				break;
 800ad50:	46b9      	mov	r9, r7
				tcp_out(conn, RST);
 800ad52:	2104      	movs	r1, #4
 800ad54:	4620      	mov	r0, r4
 800ad56:	f00e fe97 	bl	8019a88 <tcp_out>
			do_close = true;
 800ad5a:	f04f 0801 	mov.w	r8, #1
	if (pkt) {
 800ad5e:	2d00      	cmp	r5, #0
 800ad60:	f040 8315 	bne.w	800b38e <tcp_in+0xb86>
 800ad64:	462f      	mov	r7, r5
 800ad66:	e031      	b.n	800adcc <tcp_in+0x5c4>
	bool window_full = (conn->send_data_total >= conn->send_win);
 800ad68:	f8b4 3232 	ldrh.w	r3, [r4, #562]	; 0x232
			if (tcp_window_full(conn)) {
 800ad6c:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d305      	bcc.n	800ad80 <tcp_in+0x578>
	return z_impl_k_sem_take(sem, timeout);
 800ad74:	2200      	movs	r2, #0
 800ad76:	2300      	movs	r3, #0
 800ad78:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800ad7c:	f007 f966 	bl	801204c <z_impl_k_sem_take>
			if (th_seq(th) == conn->ack) {
 800ad80:	f8d6 b004 	ldr.w	fp, [r6, #4]
 800ad84:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800ad88:	fa9b fb8b 	rev.w	fp, fp
 800ad8c:	459b      	cmp	fp, r3
 800ad8e:	d13b      	bne.n	800ae08 <tcp_in+0x600>
				if (len > 0) {
 800ad90:	9b08      	ldr	r3, [sp, #32]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d0e3      	beq.n	800ad5e <tcp_in+0x556>
	ret = tcp_data_get(conn, pkt, len);
 800ad96:	4629      	mov	r1, r5
 800ad98:	aa08      	add	r2, sp, #32
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f7ff fbd2 	bl	800a544 <tcp_data_get>
	conn_ack(conn, *len);
 800ada0:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800ada4:	9a08      	ldr	r2, [sp, #32]
	ret = tcp_data_get(conn, pkt, len);
 800ada6:	4607      	mov	r7, r0
	if (tcp_short_window(conn)) {
 800ada8:	4620      	mov	r0, r4
	conn_ack(conn, *len);
 800adaa:	4413      	add	r3, r2
 800adac:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
	if (tcp_short_window(conn)) {
 800adb0:	f00e ff71 	bl	8019c96 <tcp_short_window>
		k_work_schedule_for_queue(&tcp_work_q, &conn->ack_timer,
 800adb4:	f504 71c0 	add.w	r1, r4, #384	; 0x180
	if (tcp_short_window(conn)) {
 800adb8:	b1f0      	cbz	r0, 800adf8 <tcp_in+0x5f0>
		k_work_schedule_for_queue(&tcp_work_q, &conn->ack_timer,
 800adba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800adbe:	2300      	movs	r3, #0
 800adc0:	4816      	ldr	r0, [pc, #88]	; (800ae1c <tcp_in+0x614>)
 800adc2:	f007 fad1 	bl	8012368 <k_work_schedule_for_queue>
					if (verdict == NET_OK) {
 800adc6:	2f00      	cmp	r7, #0
 800adc8:	f040 81fd 	bne.w	800b1c6 <tcp_in+0x9be>
	if (conn->context) {
 800adcc:	6866      	ldr	r6, [r4, #4]
 800adce:	b106      	cbz	r6, 800add2 <tcp_in+0x5ca>
		conn_handler = (struct net_conn *)conn->context->conn_handler;
 800add0:	6c76      	ldr	r6, [r6, #68]	; 0x44
	       (recv_pkt = k_fifo_get(recv_data_fifo, K_NO_WAIT)) != NULL) {
 800add2:	f104 0b6c 	add.w	fp, r4, #108	; 0x6c
	k_mutex_unlock(&conn->lock);
 800add6:	9802      	ldr	r0, [sp, #8]
	recv_user_data = conn->recv_user_data;
 800add8:	f8d4 a014 	ldr.w	sl, [r4, #20]
	k_mutex_unlock(&conn->lock);
 800addc:	f00e fd51 	bl	8019882 <k_mutex_unlock.isra.0>
	while (conn_handler && atomic_get(&conn->ref_count) > 0 &&
 800ade0:	2e00      	cmp	r6, #0
 800ade2:	f040 8196 	bne.w	800b112 <tcp_in+0x90a>
	if (do_close) {
 800ade6:	f1b8 0f00 	cmp.w	r8, #0
 800adea:	f43f ad67 	beq.w	800a8bc <tcp_in+0xb4>
		tcp_conn_close(conn, close_status);
 800adee:	4649      	mov	r1, r9
 800adf0:	4620      	mov	r0, r4
 800adf2:	f00e fd6d 	bl	80198d0 <tcp_conn_close.isra.0>
 800adf6:	e561      	b.n	800a8bc <tcp_in+0xb4>
		k_work_cancel_delayable(&conn->ack_timer);
 800adf8:	4608      	mov	r0, r1
 800adfa:	f010 fe91 	bl	801bb20 <k_work_cancel_delayable>
		tcp_out(conn, ACK);
 800adfe:	2110      	movs	r1, #16
 800ae00:	4620      	mov	r0, r4
 800ae02:	f00e fe41 	bl	8019a88 <tcp_out>
 800ae06:	e7de      	b.n	800adc6 <tcp_in+0x5be>
 800ae08:	eba3 030b 	sub.w	r3, r3, fp
			} else if (net_tcp_seq_greater(conn->ack, th_seq(th))) {
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dd07      	ble.n	800ae20 <tcp_in+0x618>
				tcp_out(conn,  ACK);
 800ae10:	2110      	movs	r1, #16
 800ae12:	e0fd      	b.n	800b010 <tcp_in+0x808>
 800ae14:	0801ec3d 	.word	0x0801ec3d
 800ae18:	0801ec70 	.word	0x0801ec70
 800ae1c:	240018f8 	.word	0x240018f8
				tcp_out_of_order_data(conn, pkt, len,
 800ae20:	9f08      	ldr	r7, [sp, #32]
	if (data_len == 0) {
 800ae22:	b96f      	cbnz	r7, 800ae40 <tcp_in+0x638>
				if ((len > 0) || FL(&fl, &, FIN)) {
 800ae24:	f89d 601f 	ldrb.w	r6, [sp, #31]
 800ae28:	2e00      	cmp	r6, #0
 800ae2a:	d098      	beq.n	800ad5e <tcp_in+0x556>
 800ae2c:	48b1      	ldr	r0, [pc, #708]	; (800b0f4 <tcp_in+0x8ec>)
 800ae2e:	f009 fed5 	bl	8014bdc <strlen>
 800ae32:	07f3      	lsls	r3, r6, #31
 800ae34:	d593      	bpl.n	800ad5e <tcp_in+0x556>
 800ae36:	f026 0601 	bic.w	r6, r6, #1
 800ae3a:	f88d 601f 	strb.w	r6, [sp, #31]
					tcp_out(conn, ACK);
 800ae3e:	e7e7      	b.n	800ae10 <tcp_in+0x608>
	headers_len = net_pkt_get_len(pkt) - data_len;
 800ae40:	68a8      	ldr	r0, [r5, #8]
 800ae42:	f00e fc23 	bl	801968c <net_pkt_get_len.isra.0>
	if (tcp_pkt_pull(pkt, headers_len) < 0) {
 800ae46:	1bc1      	subs	r1, r0, r7
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f00e fc27 	bl	801969c <tcp_pkt_pull>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	db43      	blt.n	800aeda <tcp_in+0x6d2>
	tmp = pkt->buffer;
 800ae52:	68ab      	ldr	r3, [r5, #8]
	seq += tmp->len;
 800ae54:	8a19      	ldrh	r1, [r3, #16]
	tmp = tmp->frags;
 800ae56:	685e      	ldr	r6, [r3, #4]
	seq += tmp->len;
 800ae58:	4459      	add	r1, fp
	*(uint32_t *)net_buf_user_data(buf) = seq;
 800ae5a:	f8c3 b018 	str.w	fp, [r3, #24]
	while (tmp) {
 800ae5e:	2e00      	cmp	r6, #0
 800ae60:	d13f      	bne.n	800aee2 <tcp_in+0x6da>
	if (!net_pkt_is_empty(conn->queue_recv_data)) {
 800ae62:	68e0      	ldr	r0, [r4, #12]
 800ae64:	6883      	ldr	r3, [r0, #8]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d067      	beq.n	800af3a <tcp_in+0x732>
 800ae6a:	68da      	ldr	r2, [r3, #12]
 800ae6c:	2a00      	cmp	r2, #0
 800ae6e:	d064      	beq.n	800af3a <tcp_in+0x732>
 800ae70:	8a1a      	ldrh	r2, [r3, #16]
 800ae72:	2a00      	cmp	r2, #0
 800ae74:	d061      	beq.n	800af3a <tcp_in+0x732>
		end_offset = seq - pending_seq;
 800ae76:	699a      	ldr	r2, [r3, #24]
		pending_len = net_pkt_get_len(conn->queue_recv_data);
 800ae78:	4618      	mov	r0, r3
 800ae7a:	9304      	str	r3, [sp, #16]
		end_offset = seq - pending_seq;
 800ae7c:	1a89      	subs	r1, r1, r2
		pending_len = net_pkt_get_len(conn->queue_recv_data);
 800ae7e:	f00e fc05 	bl	801968c <net_pkt_get_len.isra.0>
		if (end_offset < pending_len) {
 800ae82:	9b04      	ldr	r3, [sp, #16]
 800ae84:	4281      	cmp	r1, r0
 800ae86:	d231      	bcs.n	800aeec <tcp_in+0x6e4>
			if (end_offset < len) {
 800ae88:	428f      	cmp	r7, r1
 800ae8a:	d926      	bls.n	800aeda <tcp_in+0x6d2>
				if (end_offset) {
 800ae8c:	b111      	cbz	r1, 800ae94 <tcp_in+0x68c>
					net_pkt_remove_tail(pkt, end_offset);
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f00c fa9d 	bl	80173ce <net_pkt_remove_tail>
				net_buf_frag_add(pkt->buffer,
 800ae94:	68e3      	ldr	r3, [r4, #12]
 800ae96:	68a8      	ldr	r0, [r5, #8]
 800ae98:	6899      	ldr	r1, [r3, #8]
 800ae9a:	f00a f871 	bl	8014f80 <net_buf_frag_add>
				conn->queue_recv_data->buffer = pkt->buffer;
 800ae9e:	68e3      	ldr	r3, [r4, #12]
 800aea0:	68aa      	ldr	r2, [r5, #8]
 800aea2:	609a      	str	r2, [r3, #8]
			if (check_seq_list(conn->queue_recv_data->buffer) == false) {
 800aea4:	68e3      	ldr	r3, [r4, #12]
	bool result = true;
 800aea6:	2701      	movs	r7, #1
	uint32_t next_seq = 0;
 800aea8:	2200      	movs	r2, #0
			if (check_seq_list(conn->queue_recv_data->buffer) == false) {
 800aeaa:	6898      	ldr	r0, [r3, #8]
	struct net_buf *tmp = buf;
 800aeac:	4603      	mov	r3, r0
	while (tmp) {
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d139      	bne.n	800af26 <tcp_in+0x71e>
			if (check_seq_list(conn->queue_recv_data->buffer) == false) {
 800aeb2:	b91f      	cbnz	r7, 800aebc <tcp_in+0x6b4>
				net_buf_unref(conn->queue_recv_data->buffer);
 800aeb4:	f7f9 fa20 	bl	80042f8 <net_buf_unref>
				conn->queue_recv_data->buffer = NULL;
 800aeb8:	68e3      	ldr	r3, [r4, #12]
 800aeba:	609f      	str	r7, [r3, #8]
		pkt->buffer = NULL;
 800aebc:	2300      	movs	r3, #0
		if (!k_work_delayable_is_pending(&conn->recv_queue_timer)) {
 800aebe:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
		pkt->buffer = NULL;
 800aec2:	60ab      	str	r3, [r5, #8]
	return k_work_delayable_busy_get(dwork) != 0;
 800aec4:	4630      	mov	r0, r6
 800aec6:	f010 fe29 	bl	801bb1c <k_work_delayable_busy_get>
		if (!k_work_delayable_is_pending(&conn->recv_queue_timer)) {
 800aeca:	b930      	cbnz	r0, 800aeda <tcp_in+0x6d2>
			k_work_reschedule_for_queue(
 800aecc:	f644 6220 	movw	r2, #20000	; 0x4e20
 800aed0:	2300      	movs	r3, #0
 800aed2:	4631      	mov	r1, r6
 800aed4:	4888      	ldr	r0, [pc, #544]	; (800b0f8 <tcp_in+0x8f0>)
 800aed6:	f007 fa73 	bl	80123c0 <k_work_reschedule_for_queue>
				if ((len > 0) || FL(&fl, &, FIN)) {
 800aeda:	9b08      	ldr	r3, [sp, #32]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d197      	bne.n	800ae10 <tcp_in+0x608>
 800aee0:	e7a0      	b.n	800ae24 <tcp_in+0x61c>
		seq += tmp->len;
 800aee2:	8a33      	ldrh	r3, [r6, #16]
	*(uint32_t *)net_buf_user_data(buf) = seq;
 800aee4:	61b1      	str	r1, [r6, #24]
		seq += tmp->len;
 800aee6:	4419      	add	r1, r3
		tmp = tmp->frags;
 800aee8:	6876      	ldr	r6, [r6, #4]
 800aeea:	e7b8      	b.n	800ae5e <tcp_in+0x656>
			last = net_buf_frag_last(conn->queue_recv_data->buffer);
 800aeec:	4618      	mov	r0, r3
 800aeee:	f00a f836 	bl	8014f5e <net_buf_frag_last>
			start_offset = pending_seq - seq_start;
 800aef2:	6983      	ldr	r3, [r0, #24]
			end_offset = (pending_seq + last->len) - seq_start;
 800aef4:	8a01      	ldrh	r1, [r0, #16]
			start_offset = pending_seq - seq_start;
 800aef6:	eba3 0b0b 	sub.w	fp, r3, fp
			if ((start_offset < len) && (end_offset <= len)) {
 800aefa:	455f      	cmp	r7, fp
			end_offset = (pending_seq + last->len) - seq_start;
 800aefc:	4459      	add	r1, fp
			if ((start_offset < len) && (end_offset <= len)) {
 800aefe:	d906      	bls.n	800af0e <tcp_in+0x706>
 800af00:	428f      	cmp	r7, r1
 800af02:	d3ea      	bcc.n	800aeda <tcp_in+0x6d2>
				net_buf_unref(conn->queue_recv_data->buffer);
 800af04:	68e3      	ldr	r3, [r4, #12]
 800af06:	6898      	ldr	r0, [r3, #8]
 800af08:	f7f9 f9f6 	bl	80042f8 <net_buf_unref>
 800af0c:	e7c7      	b.n	800ae9e <tcp_in+0x696>
				if (end_offset < len) {
 800af0e:	428f      	cmp	r7, r1
 800af10:	d9e3      	bls.n	800aeda <tcp_in+0x6d2>
					if (end_offset) {
 800af12:	b111      	cbz	r1, 800af1a <tcp_in+0x712>
						net_pkt_remove_tail(conn->queue_recv_data,
 800af14:	68e0      	ldr	r0, [r4, #12]
 800af16:	f00c fa5a 	bl	80173ce <net_pkt_remove_tail>
					net_buf_frag_add(conn->queue_recv_data->buffer,
 800af1a:	68e3      	ldr	r3, [r4, #12]
 800af1c:	68a9      	ldr	r1, [r5, #8]
 800af1e:	6898      	ldr	r0, [r3, #8]
 800af20:	f00a f82e 	bl	8014f80 <net_buf_frag_add>
		if (inserted) {
 800af24:	e7be      	b.n	800aea4 <tcp_in+0x69c>
	return *(uint32_t *)net_buf_user_data(buf);
 800af26:	6999      	ldr	r1, [r3, #24]
		if (last != NULL) {
 800af28:	b116      	cbz	r6, 800af30 <tcp_in+0x728>
				result = false;
 800af2a:	4291      	cmp	r1, r2
 800af2c:	bf18      	it	ne
 800af2e:	2700      	movne	r7, #0
		next_seq = seq + tmp->len;
 800af30:	8a1a      	ldrh	r2, [r3, #16]
		tmp = tmp->frags;
 800af32:	461e      	mov	r6, r3
 800af34:	685b      	ldr	r3, [r3, #4]
		next_seq = seq + tmp->len;
 800af36:	440a      	add	r2, r1
		tmp = tmp->frags;
 800af38:	e7b9      	b.n	800aeae <tcp_in+0x6a6>
		net_pkt_append_buffer(conn->queue_recv_data, pkt->buffer);
 800af3a:	68a9      	ldr	r1, [r5, #8]
 800af3c:	f00c fa77 	bl	801742e <net_pkt_append_buffer>
	if (inserted) {
 800af40:	e7bc      	b.n	800aebc <tcp_in+0x6b4>
		tcp_out(conn, FIN);
 800af42:	2101      	movs	r1, #1
 800af44:	e249      	b.n	800b3da <tcp_in+0xbd2>
		if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
 800af46:	2e00      	cmp	r6, #0
 800af48:	f000 813d 	beq.w	800b1c6 <tcp_in+0x9be>
 800af4c:	f89d b01f 	ldrb.w	fp, [sp, #31]
 800af50:	f1bb 0f00 	cmp.w	fp, #0
 800af54:	f000 8137 	beq.w	800b1c6 <tcp_in+0x9be>
 800af58:	4650      	mov	r0, sl
 800af5a:	f009 fe3f 	bl	8014bdc <strlen>
 800af5e:	b130      	cbz	r0, 800af6e <tcp_in+0x766>
 800af60:	6873      	ldr	r3, [r6, #4]
 800af62:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800af66:	ba1b      	rev	r3, r3
 800af68:	4293      	cmp	r3, r2
 800af6a:	f040 812c 	bne.w	800b1c6 <tcp_in+0x9be>
 800af6e:	f1bb 0f10 	cmp.w	fp, #16
 800af72:	f040 8128 	bne.w	800b1c6 <tcp_in+0x9be>
 800af76:	f04f 0900 	mov.w	r9, #0
 800af7a:	f88d 901f 	strb.w	r9, [sp, #31]
			tcp_send_timer_cancel(conn);
 800af7e:	4620      	mov	r0, r4
 800af80:	f7fe fd70 	bl	8009a64 <tcp_send_timer_cancel>
 800af84:	e6e9      	b.n	800ad5a <tcp_in+0x552>
		if (th) {
 800af86:	2e00      	cmp	r6, #0
 800af88:	f000 811d 	beq.w	800b1c6 <tcp_in+0x9be>
			if (len > 0) {
 800af8c:	b150      	cbz	r0, 800afa4 <tcp_in+0x79c>
				int32_t new_len = len - net_tcp_seq_cmp(conn->ack, th_seq(th));
 800af8e:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800af92:	6872      	ldr	r2, [r6, #4]
 800af94:	1ac0      	subs	r0, r0, r3
 800af96:	ba12      	rev	r2, r2
 800af98:	4410      	add	r0, r2
				if (new_len > 0) {
 800af9a:	2800      	cmp	r0, #0
					conn_ack(conn, + new_len);
 800af9c:	bfc4      	itt	gt
 800af9e:	181b      	addgt	r3, r3, r0
 800afa0:	f8c4 3228 	strgt.w	r3, [r4, #552]	; 0x228
			if (FL(&fl, ==, (FIN | ACK),
 800afa4:	f89d 701f 	ldrb.w	r7, [sp, #31]
 800afa8:	b357      	cbz	r7, 800b000 <tcp_in+0x7f8>
 800afaa:	4854      	ldr	r0, [pc, #336]	; (800b0fc <tcp_in+0x8f4>)
 800afac:	f009 fe16 	bl	8014bdc <strlen>
 800afb0:	b168      	cbz	r0, 800afce <tcp_in+0x7c6>
 800afb2:	68b3      	ldr	r3, [r6, #8]
 800afb4:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 800afb8:	ba1b      	rev	r3, r3
 800afba:	4293      	cmp	r3, r2
 800afbc:	f040 8153 	bne.w	800b266 <tcp_in+0xa5e>
 800afc0:	6873      	ldr	r3, [r6, #4]
 800afc2:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800afc6:	ba1b      	rev	r3, r3
 800afc8:	4293      	cmp	r3, r2
 800afca:	f040 814c 	bne.w	800b266 <tcp_in+0xa5e>
 800afce:	2f11      	cmp	r7, #17
 800afd0:	f040 8149 	bne.w	800b266 <tcp_in+0xa5e>
 800afd4:	2300      	movs	r3, #0
 800afd6:	f88d 301f 	strb.w	r3, [sp, #31]
				tcp_send_timer_cancel(conn);
 800afda:	4620      	mov	r0, r4
 800afdc:	f7fe fd42 	bl	8009a64 <tcp_send_timer_cancel>
				conn_ack(conn, + 1);
 800afe0:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
				tcp_out(conn, ACK);
 800afe4:	2110      	movs	r1, #16
 800afe6:	4620      	mov	r0, r4
				conn_ack(conn, + 1);
 800afe8:	3301      	adds	r3, #1
 800afea:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
				tcp_out(conn, ACK);
 800afee:	f00e fd4b 	bl	8019a88 <tcp_out>
			next = TCP_TIME_WAIT;
 800aff2:	230a      	movs	r3, #10
 800aff4:	e551      	b.n	800aa9a <tcp_in+0x292>
					tcp_out(conn, ACK);
 800aff6:	2110      	movs	r1, #16
 800aff8:	4620      	mov	r0, r4
 800affa:	f00e fd45 	bl	8019a88 <tcp_out>
 800affe:	e156      	b.n	800b2ae <tcp_in+0xaa6>
				if (len > 0) {
 800b000:	9b08      	ldr	r3, [sp, #32]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f43f aeab 	beq.w	800ad5e <tcp_in+0x556>
					tcp_send_timer_cancel(conn);
 800b008:	4620      	mov	r0, r4
 800b00a:	f7fe fd2b 	bl	8009a64 <tcp_send_timer_cancel>
					tcp_out(conn, FIN | ACK);
 800b00e:	2111      	movs	r1, #17
				tcp_out(conn,  ACK);
 800b010:	4620      	mov	r0, r4
 800b012:	f00e fd39 	bl	8019a88 <tcp_out>
				verdict = NET_OK;
 800b016:	e6a2      	b.n	800ad5e <tcp_in+0x556>
		if (th) {
 800b018:	2e00      	cmp	r6, #0
 800b01a:	f000 80d4 	beq.w	800b1c6 <tcp_in+0x9be>
			if (len > 0) {
 800b01e:	b150      	cbz	r0, 800b036 <tcp_in+0x82e>
				int32_t new_len = len - net_tcp_seq_cmp(conn->ack, th_seq(th));
 800b020:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800b024:	6872      	ldr	r2, [r6, #4]
 800b026:	1ac0      	subs	r0, r0, r3
 800b028:	ba12      	rev	r2, r2
 800b02a:	4410      	add	r0, r2
				if (new_len > 0) {
 800b02c:	2800      	cmp	r0, #0
					conn_ack(conn, + new_len);
 800b02e:	bfc4      	itt	gt
 800b030:	18c0      	addgt	r0, r0, r3
 800b032:	f8c4 0228 	strgt.w	r0, [r4, #552]	; 0x228
			if (FL(&fl, ==, FIN, th_seq(th) == conn->ack) ||
 800b036:	f89d b01f 	ldrb.w	fp, [sp, #31]
 800b03a:	f1bb 0f00 	cmp.w	fp, #0
 800b03e:	f000 8155 	beq.w	800b2ec <tcp_in+0xae4>
 800b042:	4650      	mov	r0, sl
 800b044:	f009 fdca 	bl	8014bdc <strlen>
 800b048:	b130      	cbz	r0, 800b058 <tcp_in+0x850>
 800b04a:	6873      	ldr	r3, [r6, #4]
 800b04c:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800b050:	ba1b      	rev	r3, r3
 800b052:	4293      	cmp	r3, r2
 800b054:	f040 812e 	bne.w	800b2b4 <tcp_in+0xaac>
 800b058:	f1bb 0f01 	cmp.w	fp, #1
 800b05c:	f040 812a 	bne.w	800b2b4 <tcp_in+0xaac>
				   FL(&fl, ==, FIN | PSH | ACK,
 800b060:	2300      	movs	r3, #0
 800b062:	f88d 301f 	strb.w	r3, [sp, #31]
				k_work_cancel_delayable(&conn->fin_timer);
 800b066:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
 800b06a:	f010 fd59 	bl	801bb20 <k_work_cancel_delayable>
 800b06e:	e7b7      	b.n	800afe0 <tcp_in+0x7d8>
		if (th && FL(&fl, ==, ACK, th_seq(th) == conn->ack)) {
 800b070:	2e00      	cmp	r6, #0
 800b072:	f000 80a8 	beq.w	800b1c6 <tcp_in+0x9be>
 800b076:	f89d b01f 	ldrb.w	fp, [sp, #31]
 800b07a:	f1bb 0f00 	cmp.w	fp, #0
 800b07e:	f000 80a2 	beq.w	800b1c6 <tcp_in+0x9be>
 800b082:	4650      	mov	r0, sl
 800b084:	f009 fdaa 	bl	8014bdc <strlen>
 800b088:	b130      	cbz	r0, 800b098 <tcp_in+0x890>
 800b08a:	6873      	ldr	r3, [r6, #4]
 800b08c:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800b090:	ba1b      	rev	r3, r3
 800b092:	4293      	cmp	r3, r2
 800b094:	f040 8097 	bne.w	800b1c6 <tcp_in+0x9be>
 800b098:	f1bb 0f10 	cmp.w	fp, #16
 800b09c:	f040 8093 	bne.w	800b1c6 <tcp_in+0x9be>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f88d 301f 	strb.w	r3, [sp, #31]
			tcp_send_timer_cancel(conn);
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f7fe fcdc 	bl	8009a64 <tcp_send_timer_cancel>
 800b0ac:	e7a1      	b.n	800aff2 <tcp_in+0x7ea>
		if (th && (FL(&fl, ==, (FIN | ACK), th_seq(th) + 1 == conn->ack) ||
 800b0ae:	2e00      	cmp	r6, #0
 800b0b0:	f000 8130 	beq.w	800b314 <tcp_in+0xb0c>
 800b0b4:	f89d b01f 	ldrb.w	fp, [sp, #31]
 800b0b8:	f1bb 0f00 	cmp.w	fp, #0
 800b0bc:	f000 812a 	beq.w	800b314 <tcp_in+0xb0c>
 800b0c0:	480f      	ldr	r0, [pc, #60]	; (800b100 <tcp_in+0x8f8>)
 800b0c2:	f009 fd8b 	bl	8014bdc <strlen>
 800b0c6:	b138      	cbz	r0, 800b0d8 <tcp_in+0x8d0>
 800b0c8:	6873      	ldr	r3, [r6, #4]
 800b0ca:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800b0ce:	ba1b      	rev	r3, r3
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	f040 810f 	bne.w	800b2f6 <tcp_in+0xaee>
 800b0d8:	f1bb 0f11 	cmp.w	fp, #17
 800b0dc:	f040 810b 	bne.w	800b2f6 <tcp_in+0xaee>
			   FL(&fl, ==, FIN, th_seq(th) + 1 == conn->ack))) {
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	f88d 301f 	strb.w	r3, [sp, #31]
			tcp_out(conn, ACK);
 800b0e6:	2110      	movs	r1, #16
 800b0e8:	4620      	mov	r0, r4
			verdict = NET_OK;
 800b0ea:	2700      	movs	r7, #0
			tcp_out(conn, ACK);
 800b0ec:	f00e fccc 	bl	8019a88 <tcp_out>
			verdict = NET_OK;
 800b0f0:	e110      	b.n	800b314 <tcp_in+0xb0c>
 800b0f2:	bf00      	nop
 800b0f4:	0801ffee 	.word	0x0801ffee
 800b0f8:	240018f8 	.word	0x240018f8
 800b0fc:	0801ec8e 	.word	0x0801ec8e
 800b100:	0801ecc5 	.word	0x0801ecc5
	if (pkt) {
 800b104:	2d00      	cmp	r5, #0
 800b106:	f43f ae61 	beq.w	800adcc <tcp_in+0x5c4>
		if (verdict == NET_OK) {
 800b10a:	2f00      	cmp	r7, #0
 800b10c:	f47f ae5e 	bne.w	800adcc <tcp_in+0x5c4>
 800b110:	e05f      	b.n	800b1d2 <tcp_in+0x9ca>
 800b112:	f3bf 8f5b 	dmb	ish
 800b116:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800b11a:	f3bf 8f5b 	dmb	ish
	while (conn_handler && atomic_get(&conn->ref_count) > 0 &&
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f77f ae61 	ble.w	800ade6 <tcp_in+0x5de>
	return z_impl_k_queue_get(queue, timeout);
 800b124:	2200      	movs	r2, #0
 800b126:	2300      	movs	r3, #0
 800b128:	4658      	mov	r0, fp
 800b12a:	f006 ff35 	bl	8011f98 <z_impl_k_queue_get>
 800b12e:	4605      	mov	r5, r0
 800b130:	2800      	cmp	r0, #0
 800b132:	f43f ae58 	beq.w	800ade6 <tcp_in+0x5de>
		if (net_context_packet_received(conn_handler, recv_pkt, NULL,
 800b136:	2300      	movs	r3, #0
 800b138:	4629      	mov	r1, r5
 800b13a:	4630      	mov	r0, r6
 800b13c:	f8cd a000 	str.w	sl, [sp]
 800b140:	461a      	mov	r2, r3
 800b142:	f7fb fcbb 	bl	8006abc <net_context_packet_received>
 800b146:	2802      	cmp	r0, #2
 800b148:	f47f ae4a 	bne.w	800ade0 <tcp_in+0x5d8>
			tcp_pkt_unref(recv_pkt);
 800b14c:	4628      	mov	r0, r5
 800b14e:	f00c f8c8 	bl	80172e2 <net_pkt_unref>
 800b152:	e645      	b.n	800ade0 <tcp_in+0x5d8>
		if (th && (net_tcp_seq_cmp(th_ack(th), conn->seq) == 0)) {
 800b154:	68b3      	ldr	r3, [r6, #8]
 800b156:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 800b15a:	ba1b      	rev	r3, r3
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d11c      	bne.n	800b19a <tcp_in+0x992>
			if (conn->send_data_total > 0) {
 800b160:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800b164:	b13b      	cbz	r3, 800b176 <tcp_in+0x96e>
				if (len == 0) {
 800b166:	9b08      	ldr	r3, [sp, #32]
 800b168:	b93b      	cbnz	r3, 800b17a <tcp_in+0x972>
					conn->dup_ack_cnt = MIN(conn->dup_ack_cnt + 1,
 800b16a:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800b16e:	2b03      	cmp	r3, #3
 800b170:	bf28      	it	cs
 800b172:	2303      	movcs	r3, #3
 800b174:	3301      	adds	r3, #1
				conn->dup_ack_cnt = 0;
 800b176:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
			if ((conn->data_mode == TCP_DATA_MODE_SEND) &&
 800b17a:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
 800b17e:	b963      	cbnz	r3, 800b19a <tcp_in+0x992>
 800b180:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 800b184:	2a03      	cmp	r2, #3
 800b186:	d108      	bne.n	800b19a <tcp_in+0x992>
				int temp_unacked_len = conn->unacked_len;
 800b188:	f8d4 b218 	ldr.w	fp, [r4, #536]	; 0x218
				(void)tcp_send_data(conn);
 800b18c:	4620      	mov	r0, r4
				conn->unacked_len = 0;
 800b18e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				(void)tcp_send_data(conn);
 800b192:	f00e fc93 	bl	8019abc <tcp_send_data>
				conn->unacked_len = temp_unacked_len;
 800b196:	f8c4 b218 	str.w	fp, [r4, #536]	; 0x218
		if (th && (net_tcp_seq_cmp(th_ack(th), conn->seq) > 0)) {
 800b19a:	68b3      	ldr	r3, [r6, #8]
 800b19c:	f8d4 b224 	ldr.w	fp, [r4, #548]	; 0x224
 800b1a0:	ba1b      	rev	r3, r3
 800b1a2:	eba3 010b 	sub.w	r1, r3, fp
 800b1a6:	2900      	cmp	r1, #0
 800b1a8:	f77f adea 	ble.w	800ad80 <tcp_in+0x578>
			if ((conn->send_data_total < len_acked) ||
 800b1ac:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800b1b0:	428a      	cmp	r2, r1
 800b1b2:	f4bf ad6b 	bcs.w	800ac8c <tcp_in+0x484>
				close_status = -ECONNRESET;
 800b1b6:	f06f 0967 	mvn.w	r9, #103	; 0x67
				do_close = true;
 800b1ba:	f04f 0801 	mov.w	r8, #1
				tcp_out(conn, RST);
 800b1be:	2104      	movs	r1, #4
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f00e fc61 	bl	8019a88 <tcp_out>
	if (pkt) {
 800b1c6:	2d00      	cmp	r5, #0
 800b1c8:	f43f ae00 	beq.w	800adcc <tcp_in+0x5c4>
 800b1cc:	2300      	movs	r3, #0
		if (verdict == NET_OK) {
 800b1ce:	b92f      	cbnz	r7, 800b1dc <tcp_in+0x9d4>
 800b1d0:	461f      	mov	r7, r3
			net_pkt_unref(pkt);
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f00c f885 	bl	80172e2 <net_pkt_unref>
 800b1d8:	463b      	mov	r3, r7
 800b1da:	2700      	movs	r7, #0
	if (next) {
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f43f adf5 	beq.w	800adcc <tcp_in+0x5c4>
		conn_state(conn, next);
 800b1e2:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
		if (connection_ok) {
 800b1e6:	9b03      	ldr	r3, [sp, #12]
 800b1e8:	b18b      	cbz	r3, 800b20e <tcp_in+0xa06>
			conn->in_connect = false;
 800b1ea:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
 800b1ee:	f36f 0341 	bfc	r3, #1, #1
 800b1f2:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
			if (conn->connect_cb) {
 800b1f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1f8:	b12b      	cbz	r3, 800b206 <tcp_in+0x9fe>
				conn->connect_cb(conn->context, 0, conn->context->user_data);
 800b1fa:	6860      	ldr	r0, [r4, #4]
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	6842      	ldr	r2, [r0, #4]
 800b200:	4798      	blx	r3
				conn->connect_cb = NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	6263      	str	r3, [r4, #36]	; 0x24
	z_impl_k_sem_give(sem);
 800b206:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800b20a:	f006 fef9 	bl	8012000 <z_impl_k_sem_give>
	bool do_close = false;
 800b20e:	2600      	movs	r6, #0
 800b210:	4635      	mov	r5, r6
 800b212:	f7ff bb22 	b.w	800a85a <tcp_in+0x52>
				    FL(&fl, ==, (FIN | ACK), th_seq(th) == conn->ack))) {
 800b216:	4650      	mov	r0, sl
 800b218:	f009 fce0 	bl	8014bdc <strlen>
 800b21c:	b128      	cbz	r0, 800b22a <tcp_in+0xa22>
 800b21e:	6873      	ldr	r3, [r6, #4]
 800b220:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800b224:	ba1b      	rev	r3, r3
 800b226:	4293      	cmp	r3, r2
 800b228:	d101      	bne.n	800b22e <tcp_in+0xa26>
 800b22a:	2f11      	cmp	r7, #17
 800b22c:	d027      	beq.n	800b27e <tcp_in+0xa76>
			} else if (th && FL(&fl, ==, ACK, th_ack(th) == conn->seq)) {
 800b22e:	487d      	ldr	r0, [pc, #500]	; (800b424 <tcp_in+0xc1c>)
 800b230:	f009 fcd4 	bl	8014bdc <strlen>
 800b234:	b130      	cbz	r0, 800b244 <tcp_in+0xa3c>
 800b236:	68b3      	ldr	r3, [r6, #8]
 800b238:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 800b23c:	ba1b      	rev	r3, r3
 800b23e:	4293      	cmp	r3, r2
 800b240:	f47f aede 	bne.w	800b000 <tcp_in+0x7f8>
 800b244:	2f10      	cmp	r7, #16
 800b246:	f47f aedb 	bne.w	800b000 <tcp_in+0x7f8>
 800b24a:	2300      	movs	r3, #0
 800b24c:	f88d 301f 	strb.w	r3, [sp, #31]
				tcp_send_timer_cancel(conn);
 800b250:	4620      	mov	r0, r4
 800b252:	f7fe fc07 	bl	8009a64 <tcp_send_timer_cancel>
				if (len > 0) {
 800b256:	9b08      	ldr	r3, [sp, #32]
 800b258:	b11b      	cbz	r3, 800b262 <tcp_in+0xa5a>
					tcp_out(conn, ACK);
 800b25a:	4639      	mov	r1, r7
 800b25c:	4620      	mov	r0, r4
 800b25e:	f00e fc13 	bl	8019a88 <tcp_out>
				next = TCP_FIN_WAIT_2;
 800b262:	2306      	movs	r3, #6
 800b264:	e419      	b.n	800aa9a <tcp_in+0x292>
				   (FL(&fl, ==, FIN, th_seq(th) == conn->ack) ||
 800b266:	4650      	mov	r0, sl
 800b268:	f009 fcb8 	bl	8014bdc <strlen>
 800b26c:	b128      	cbz	r0, 800b27a <tcp_in+0xa72>
 800b26e:	6873      	ldr	r3, [r6, #4]
 800b270:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800b274:	ba1b      	rev	r3, r3
 800b276:	4293      	cmp	r3, r2
 800b278:	d1cd      	bne.n	800b216 <tcp_in+0xa0e>
 800b27a:	2f01      	cmp	r7, #1
 800b27c:	d1cb      	bne.n	800b216 <tcp_in+0xa0e>
				    FL(&fl, ==, (FIN | ACK), th_seq(th) == conn->ack))) {
 800b27e:	2300      	movs	r3, #0
 800b280:	f88d 301f 	strb.w	r3, [sp, #31]
				tcp_send_timer_cancel(conn);
 800b284:	4620      	mov	r0, r4
 800b286:	f7fe fbed 	bl	8009a64 <tcp_send_timer_cancel>
				conn_ack(conn, + 1);
 800b28a:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800b28e:	3301      	adds	r3, #1
 800b290:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
				if (th_ack(th) != conn->seq) {
 800b294:	68b2      	ldr	r2, [r6, #8]
 800b296:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800b29a:	ba12      	rev	r2, r2
 800b29c:	429a      	cmp	r2, r3
 800b29e:	f43f aeaa 	beq.w	800aff6 <tcp_in+0x7ee>
					tcp_out_ext(conn, (FIN | ACK), NULL, conn->seq - 1);
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2111      	movs	r1, #17
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f7fe ff2d 	bl	800a108 <tcp_out_ext>
				next = TCP_CLOSING;
 800b2ae:	2308      	movs	r3, #8
 800b2b0:	f7ff bbf3 	b.w	800aa9a <tcp_in+0x292>
				   FL(&fl, ==, FIN | ACK, th_seq(th) == conn->ack) ||
 800b2b4:	4650      	mov	r0, sl
 800b2b6:	f009 fc91 	bl	8014bdc <strlen>
 800b2ba:	b128      	cbz	r0, 800b2c8 <tcp_in+0xac0>
 800b2bc:	6873      	ldr	r3, [r6, #4]
 800b2be:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800b2c2:	ba1b      	rev	r3, r3
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d103      	bne.n	800b2d0 <tcp_in+0xac8>
 800b2c8:	f1bb 0f11 	cmp.w	fp, #17
 800b2cc:	f43f aec8 	beq.w	800b060 <tcp_in+0x858>
				   FL(&fl, ==, FIN | PSH | ACK,
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	f009 fc83 	bl	8014bdc <strlen>
 800b2d6:	b128      	cbz	r0, 800b2e4 <tcp_in+0xadc>
 800b2d8:	6873      	ldr	r3, [r6, #4]
 800b2da:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800b2de:	ba1b      	rev	r3, r3
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d103      	bne.n	800b2ec <tcp_in+0xae4>
 800b2e4:	f1bb 0f19 	cmp.w	fp, #25
 800b2e8:	f43f aeba 	beq.w	800b060 <tcp_in+0x858>
			} else if (len > 0) {
 800b2ec:	9b08      	ldr	r3, [sp, #32]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f43f af69 	beq.w	800b1c6 <tcp_in+0x9be>
 800b2f4:	e58c      	b.n	800ae10 <tcp_in+0x608>
			   FL(&fl, ==, FIN, th_seq(th) + 1 == conn->ack))) {
 800b2f6:	484c      	ldr	r0, [pc, #304]	; (800b428 <tcp_in+0xc20>)
 800b2f8:	f009 fc70 	bl	8014bdc <strlen>
 800b2fc:	b130      	cbz	r0, 800b30c <tcp_in+0xb04>
 800b2fe:	6873      	ldr	r3, [r6, #4]
 800b300:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800b304:	ba1b      	rev	r3, r3
 800b306:	3301      	adds	r3, #1
 800b308:	4293      	cmp	r3, r2
 800b30a:	d103      	bne.n	800b314 <tcp_in+0xb0c>
 800b30c:	f1bb 0f01 	cmp.w	fp, #1
 800b310:	f43f aee6 	beq.w	800b0e0 <tcp_in+0x8d8>
		k_work_reschedule_for_queue(
 800b314:	f643 2298 	movw	r2, #15000	; 0x3a98
 800b318:	2300      	movs	r3, #0
 800b31a:	f504 7190 	add.w	r1, r4, #288	; 0x120
 800b31e:	4843      	ldr	r0, [pc, #268]	; (800b42c <tcp_in+0xc24>)
 800b320:	f007 f84e 	bl	80123c0 <k_work_reschedule_for_queue>
		break;
 800b324:	e74f      	b.n	800b1c6 <tcp_in+0x9be>
		conn->send_win = ntohs(th_win(th));
 800b326:	89f3      	ldrh	r3, [r6, #14]
 800b328:	ba5b      	rev16	r3, r3
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
		if (conn->send_win > conn->send_win_max) {
 800b330:	f8b4 3230 	ldrh.w	r3, [r4, #560]	; 0x230
 800b334:	4293      	cmp	r3, r2
 800b336:	d201      	bcs.n	800b33c <tcp_in+0xb34>
			conn->send_win = conn->send_win_max;
 800b338:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
			if (!k_work_delayable_is_pending(&conn->persist_timer)) {
 800b33c:	f504 77a8 	add.w	r7, r4, #336	; 0x150
		if (conn->send_win == 0) {
 800b340:	f8b4 3232 	ldrh.w	r3, [r4, #562]	; 0x232
 800b344:	4638      	mov	r0, r7
 800b346:	2b00      	cmp	r3, #0
 800b348:	f47f ab3f 	bne.w	800a9ca <tcp_in+0x1c2>
 800b34c:	f010 fbe6 	bl	801bb1c <k_work_delayable_busy_get>
			if (!k_work_delayable_is_pending(&conn->persist_timer)) {
 800b350:	b950      	cbnz	r0, 800b368 <tcp_in+0xb60>
 800b352:	f8b4 2234 	ldrh.w	r2, [r4, #564]	; 0x234
 800b356:	230a      	movs	r3, #10
				conn->zwp_retries = 0;
 800b358:	f884 0238 	strb.w	r0, [r4, #568]	; 0x238
				(void)k_work_reschedule_for_queue(
 800b35c:	4639      	mov	r1, r7
 800b35e:	fba2 2303 	umull	r2, r3, r2, r3
 800b362:	4832      	ldr	r0, [pc, #200]	; (800b42c <tcp_in+0xc24>)
 800b364:	f007 f82c 	bl	80123c0 <k_work_reschedule_for_queue>
	bool window_full = (conn->send_data_total >= conn->send_win);
 800b368:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
			(void)k_sem_take(&conn->tx_sem, K_NO_WAIT);
 800b36c:	f104 0054 	add.w	r0, r4, #84	; 0x54
		if (tcp_window_full(conn)) {
 800b370:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800b374:	429a      	cmp	r2, r3
 800b376:	f63f ab2c 	bhi.w	800a9d2 <tcp_in+0x1ca>
	return z_impl_k_sem_take(sem, timeout);
 800b37a:	2200      	movs	r2, #0
 800b37c:	2300      	movs	r3, #0
 800b37e:	f006 fe65 	bl	801204c <z_impl_k_sem_take>
	int close_status = 0;
 800b382:	f04f 0900 	mov.w	r9, #0
	enum net_verdict verdict = NET_DROP;
 800b386:	2702      	movs	r7, #2
	bool do_close = false;
 800b388:	46c8      	mov	r8, r9
}
 800b38a:	f7ff ba5f 	b.w	800a84c <tcp_in+0x44>
	if (pkt) {
 800b38e:	2300      	movs	r3, #0
		if (verdict == NET_OK) {
 800b390:	e71e      	b.n	800b1d0 <tcp_in+0x9c8>
		} else if (th && FL(&fl, ==, (FIN | ACK | PSH),
 800b392:	4650      	mov	r0, sl
 800b394:	f009 fc22 	bl	8014bdc <strlen>
 800b398:	b130      	cbz	r0, 800b3a8 <tcp_in+0xba0>
 800b39a:	6873      	ldr	r3, [r6, #4]
 800b39c:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800b3a0:	ba1b      	rev	r3, r3
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	f47f aed6 	bne.w	800b154 <tcp_in+0x94c>
 800b3a8:	f1bb 0f19 	cmp.w	fp, #25
 800b3ac:	f47f aed2 	bne.w	800b154 <tcp_in+0x94c>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	f88d 301f 	strb.w	r3, [sp, #31]
			if (len) {
 800b3b6:	9f08      	ldr	r7, [sp, #32]
 800b3b8:	b13f      	cbz	r7, 800b3ca <tcp_in+0xbc2>
				verdict = tcp_data_get(conn, pkt, &len);
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	aa08      	add	r2, sp, #32
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7ff f8c0 	bl	800a544 <tcp_data_get>
					pkt = NULL;
 800b3c4:	1e07      	subs	r7, r0, #0
 800b3c6:	bf08      	it	eq
 800b3c8:	2500      	moveq	r5, #0
			conn_ack(conn, + len + 1);
 800b3ca:	9b08      	ldr	r3, [sp, #32]
			tcp_out(conn, FIN | ACK);
 800b3cc:	2111      	movs	r1, #17
			conn_ack(conn, + len + 1);
 800b3ce:	1c5a      	adds	r2, r3, #1
 800b3d0:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
		tcp_out(conn, FIN);
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f00e fb54 	bl	8019a88 <tcp_out>
		next = TCP_LAST_ACK;
 800b3e0:	2309      	movs	r3, #9
		break;
 800b3e2:	f7ff bb75 	b.w	800aad0 <tcp_in+0x2c8>
		} else if (th && FL(&fl, ==, FIN, th_seq(th) == conn->ack)) {
 800b3e6:	4650      	mov	r0, sl
 800b3e8:	f009 fbf8 	bl	8014bdc <strlen>
 800b3ec:	b128      	cbz	r0, 800b3fa <tcp_in+0xbf2>
 800b3ee:	6873      	ldr	r3, [r6, #4]
 800b3f0:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800b3f4:	ba1b      	rev	r3, r3
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d1cb      	bne.n	800b392 <tcp_in+0xb8a>
 800b3fa:	f1bb 0f01 	cmp.w	fp, #1
 800b3fe:	d1c8      	bne.n	800b392 <tcp_in+0xb8a>
 800b400:	2300      	movs	r3, #0
 800b402:	f88d 301f 	strb.w	r3, [sp, #31]
			conn_ack(conn, + 1);
 800b406:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
 800b40a:	2110      	movs	r1, #16
 800b40c:	4620      	mov	r0, r4
			conn_ack(conn, + 1);
 800b40e:	3301      	adds	r3, #1
 800b410:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
			tcp_out(conn, ACK);
 800b414:	f00e fb38 	bl	8019a88 <tcp_out>
			next = TCP_CLOSE_WAIT;
 800b418:	2307      	movs	r3, #7
			break;
 800b41a:	f7ff bb3e 	b.w	800aa9a <tcp_in+0x292>
			next = TCP_ESTABLISHED;
 800b41e:	2304      	movs	r3, #4
 800b420:	f7ff bb3b 	b.w	800aa9a <tcp_in+0x292>
 800b424:	0801ec76 	.word	0x0801ec76
 800b428:	0801ecc5 	.word	0x0801ecc5
 800b42c:	240018f8 	.word	0x240018f8

0800b430 <net_tcp_connect>:
{
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	b08f      	sub	sp, #60	; 0x3c
 800b436:	469a      	mov	sl, r3
	conn = context->tcp;
 800b438:	6d44      	ldr	r4, [r0, #84]	; 0x54
{
 800b43a:	4605      	mov	r5, r0
 800b43c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b43e:	460f      	mov	r7, r1
	conn->iface = net_context_get_iface(context);
 800b440:	f990 0076 	ldrsb.w	r0, [r0, #118]	; 0x76
		memset(&conn->src, 0, sizeof(struct sockaddr_in));
 800b444:	f504 78f0 	add.w	r8, r4, #480	; 0x1e0
{
 800b448:	9307      	str	r3, [sp, #28]
		memset(&conn->dst, 0, sizeof(struct sockaddr_in));
 800b44a:	f504 79fc 	add.w	r9, r4, #504	; 0x1f8
{
 800b44e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b450:	9209      	str	r2, [sp, #36]	; 0x24
 800b452:	9308      	str	r3, [sp, #32]
 800b454:	f8bd b060 	ldrh.w	fp, [sp, #96]	; 0x60
	conn->iface = net_context_get_iface(context);
 800b458:	f00e f93d 	bl	80196d6 <net_context_get_iface.isra.0>
 800b45c:	6120      	str	r0, [r4, #16]
	tcp_derive_rto(conn);
 800b45e:	4620      	mov	r0, r4
 800b460:	f00e f8c0 	bl	80195e4 <tcp_derive_rto>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 800b464:	f8b5 6074 	ldrh.w	r6, [r5, #116]	; 0x74
 800b468:	f3c6 06c2 	ubfx	r6, r6, #3, #3
	switch (net_context_get_family(context)) {
 800b46c:	2e01      	cmp	r6, #1
 800b46e:	d05d      	beq.n	800b52c <net_tcp_connect+0xfc>
 800b470:	2e02      	cmp	r6, #2
 800b472:	d07b      	beq.n	800b56c <net_tcp_connect+0x13c>
		conn->seq = tcp_init_isn(&conn->src.sa, &conn->dst.sa);
 800b474:	4649      	mov	r1, r9
 800b476:	4640      	mov	r0, r8
 800b478:	f7fe fbbe 	bl	8009bf8 <tcp_init_isn>
	ret = net_conn_register(net_context_get_proto(context),
 800b47c:	f105 0344 	add.w	r3, r5, #68	; 0x44
		conn->seq = tcp_init_isn(&conn->src.sa, &conn->dst.sa);
 800b480:	f8c4 0224 	str.w	r0, [r4, #548]	; 0x224
	ret = net_conn_register(net_context_get_proto(context),
 800b484:	463a      	mov	r2, r7
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
 800b486:	f8b5 1074 	ldrh.w	r1, [r5, #116]	; 0x74
 800b48a:	f8b5 0072 	ldrh.w	r0, [r5, #114]	; 0x72
 800b48e:	f021 0106 	bic.w	r1, r1, #6
 800b492:	e9cd 5304 	strd	r5, r3, [sp, #16]
 800b496:	4b59      	ldr	r3, [pc, #356]	; (800b5fc <net_tcp_connect+0x1cc>)
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
 800b498:	f041 0102 	orr.w	r1, r1, #2
 800b49c:	e9cd 5302 	strd	r5, r3, [sp, #8]
 800b4a0:	fa9b f39b 	rev16.w	r3, fp
 800b4a4:	b289      	uxth	r1, r1
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	f8a5 1074 	strh.w	r1, [r5, #116]	; 0x74
 800b4ac:	f3c1 01c2 	ubfx	r1, r1, #3, #3
 800b4b0:	9301      	str	r3, [sp, #4]
 800b4b2:	fa9a f39a 	rev16.w	r3, sl
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4bc:	f7fb fee8 	bl	8007290 <net_conn_register>
	if (ret < 0) {
 800b4c0:	1e06      	subs	r6, r0, #0
 800b4c2:	f2c0 8094 	blt.w	800b5ee <net_tcp_connect+0x1be>
	conn->connect_cb = cb;
 800b4c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	(void)tcp_in(conn, NULL);
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	4620      	mov	r0, r4
	conn->connect_cb = cb;
 800b4cc:	6263      	str	r3, [r4, #36]	; 0x24
	context->user_data = user_data;
 800b4ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4d0:	606b      	str	r3, [r5, #4]
	conn->in_connect = !IS_ENABLED(CONFIG_NET_TEST_PROTOCOL);
 800b4d2:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
 800b4d6:	f043 0302 	orr.w	r3, r3, #2
 800b4da:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
	(void)tcp_in(conn, NULL);
 800b4de:	f7ff f993 	bl	800a808 <tcp_in>
		if ((K_TIMEOUT_EQ(timeout, K_NO_WAIT)) &&
 800b4e2:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	d104      	bne.n	800b4f4 <net_tcp_connect+0xc4>
 800b4ea:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 800b4ee:	2b04      	cmp	r3, #4
 800b4f0:	f040 8081 	bne.w	800b5f6 <net_tcp_connect+0x1c6>
	return z_impl_k_sem_take(sem, timeout);
 800b4f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b4f8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800b4fc:	f006 fda6 	bl	801204c <z_impl_k_sem_take>
		} else if (k_sem_take(&conn->connect_sem, timeout) != 0 &&
 800b500:	2800      	cmp	r0, #0
 800b502:	d06e      	beq.n	800b5e2 <net_tcp_connect+0x1b2>
 800b504:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 800b508:	2b04      	cmp	r3, #4
 800b50a:	d06a      	beq.n	800b5e2 <net_tcp_connect+0x1b2>
			if (conn->in_connect) {
 800b50c:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
 800b510:	079a      	lsls	r2, r3, #30
 800b512:	d508      	bpl.n	800b526 <net_tcp_connect+0xf6>
				conn->in_connect = false;
 800b514:	f36f 0341 	bfc	r3, #1, #1
				tcp_conn_close(conn, -ETIMEDOUT);
 800b518:	f06f 0173 	mvn.w	r1, #115	; 0x73
 800b51c:	4620      	mov	r0, r4
				conn->in_connect = false;
 800b51e:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
				tcp_conn_close(conn, -ETIMEDOUT);
 800b522:	f00e f9d5 	bl	80198d0 <tcp_conn_close.isra.0>
			ret = -ETIMEDOUT;
 800b526:	f06f 0673 	mvn.w	r6, #115	; 0x73
	return ret;
 800b52a:	e060      	b.n	800b5ee <net_tcp_connect+0x1be>
		memset(&conn->src, 0, sizeof(struct sockaddr_in));
 800b52c:	2208      	movs	r2, #8
 800b52e:	2100      	movs	r1, #0
 800b530:	4640      	mov	r0, r8
 800b532:	f009 fbab 	bl	8014c8c <memset>
		memset(&conn->dst, 0, sizeof(struct sockaddr_in));
 800b536:	2208      	movs	r2, #8
 800b538:	2100      	movs	r1, #0
 800b53a:	4648      	mov	r0, r9
 800b53c:	f009 fba6 	bl	8014c8c <memset>
		conn->src.sa.sa_family = AF_INET;
 800b540:	f8a4 61e0 	strh.w	r6, [r4, #480]	; 0x1e0
		conn->dst.sa.sa_family = AF_INET;
 800b544:	f8a4 61f8 	strh.w	r6, [r4, #504]	; 0x1f8
		conn->dst.sin.sin_port = remote_port;
 800b548:	f8a4 a1fa 	strh.w	sl, [r4, #506]	; 0x1fa
		conn->src.sin.sin_port = local_port;
 800b54c:	f8a4 b1e2 	strh.w	fp, [r4, #482]	; 0x1e2
		ip4 = net_if_ipv4_select_src_addr(
 800b550:	f995 0076 	ldrsb.w	r0, [r5, #118]	; 0x76
 800b554:	f00e f8bf 	bl	80196d6 <net_context_get_iface.isra.0>
 800b558:	1d39      	adds	r1, r7, #4
 800b55a:	f7fa fd47 	bl	8005fec <net_if_ipv4_select_src_addr>
		conn->src.sin.sin_addr = *ip4;
 800b55e:	6803      	ldr	r3, [r0, #0]
 800b560:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
		net_ipaddr_copy(&conn->dst.sin.sin_addr,
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
		break;
 800b56a:	e783      	b.n	800b474 <net_tcp_connect+0x44>
		memset(&conn->src, 0, sizeof(struct sockaddr_in6));
 800b56c:	2218      	movs	r2, #24
 800b56e:	2100      	movs	r1, #0
 800b570:	4640      	mov	r0, r8
 800b572:	f009 fb8b 	bl	8014c8c <memset>
		memset(&conn->dst, 0, sizeof(struct sockaddr_in6));
 800b576:	2218      	movs	r2, #24
 800b578:	2100      	movs	r1, #0
 800b57a:	4648      	mov	r0, r9
 800b57c:	f009 fb86 	bl	8014c8c <memset>
		conn->src.sin6.sin6_family = AF_INET6;
 800b580:	f8a4 61e0 	strh.w	r6, [r4, #480]	; 0x1e0
		conn->dst.sin6.sin6_family = AF_INET6;
 800b584:	f8a4 61f8 	strh.w	r6, [r4, #504]	; 0x1f8
					&net_sin6(remote_addr)->sin6_addr);
 800b588:	1d3e      	adds	r6, r7, #4
		conn->dst.sin6.sin6_port = remote_port;
 800b58a:	f8a4 a1fa 	strh.w	sl, [r4, #506]	; 0x1fa
		conn->src.sin6.sin6_port = local_port;
 800b58e:	f8a4 b1e2 	strh.w	fp, [r4, #482]	; 0x1e2
		ip6 = net_if_ipv6_select_src_addr(
 800b592:	f995 0076 	ldrsb.w	r0, [r5, #118]	; 0x76
 800b596:	f00e f89e 	bl	80196d6 <net_context_get_iface.isra.0>
 800b59a:	4631      	mov	r1, r6
 800b59c:	f7fa fc7a 	bl	8005e94 <net_if_ipv6_select_src_addr>
		conn->src.sin6.sin6_addr = *ip6;
 800b5a0:	f504 7cf2 	add.w	ip, r4, #484	; 0x1e4
 800b5a4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800b5a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		net_ipaddr_copy(&conn->dst.sin6.sin6_addr,
 800b5aa:	aa0a      	add	r2, sp, #40	; 0x28
 800b5ac:	f107 0c14 	add.w	ip, r7, #20
 800b5b0:	6830      	ldr	r0, [r6, #0]
 800b5b2:	3608      	adds	r6, #8
 800b5b4:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	4566      	cmp	r6, ip
 800b5bc:	c303      	stmia	r3!, {r0, r1}
 800b5be:	461a      	mov	r2, r3
 800b5c0:	d1f6      	bne.n	800b5b0 <net_tcp_connect+0x180>
 800b5c2:	ae0a      	add	r6, sp, #40	; 0x28
 800b5c4:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
 800b5c8:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 800b5cc:	4633      	mov	r3, r6
 800b5ce:	3208      	adds	r2, #8
 800b5d0:	cb03      	ldmia	r3!, {r0, r1}
 800b5d2:	4563      	cmp	r3, ip
 800b5d4:	f842 0c08 	str.w	r0, [r2, #-8]
 800b5d8:	f842 1c04 	str.w	r1, [r2, #-4]
 800b5dc:	461e      	mov	r6, r3
 800b5de:	d1f5      	bne.n	800b5cc <net_tcp_connect+0x19c>
 800b5e0:	e7c3      	b.n	800b56a <net_tcp_connect+0x13a>
		conn->in_connect = false;
 800b5e2:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
 800b5e6:	f36f 0341 	bfc	r3, #1, #1
 800b5ea:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
}
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	b00f      	add	sp, #60	; 0x3c
 800b5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = -EINPROGRESS;
 800b5f6:	f06f 0676 	mvn.w	r6, #118	; 0x76
 800b5fa:	e7f8      	b.n	800b5ee <net_tcp_connect+0x1be>
 800b5fc:	0800b601 	.word	0x0800b601

0800b600 <tcp_recv>:
	return list->head;
 800b600:	4b72      	ldr	r3, [pc, #456]	; (800b7cc <tcp_recv+0x1cc>)
{
 800b602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b606:	b093      	sub	sp, #76	; 0x4c
 800b608:	681c      	ldr	r4, [r3, #0]
 800b60a:	460d      	mov	r5, r1
 800b60c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
 800b60e:	b94c      	cbnz	r4, 800b624 <tcp_recv+0x24>
	th = th_get(pkt);
 800b610:	4628      	mov	r0, r5
 800b612:	f00e f862 	bl	80196da <th_get>
	if (th_flags(th) & SYN && !(th_flags(th) & ACK)) {
 800b616:	7b46      	ldrb	r6, [r0, #13]
 800b618:	07b3      	lsls	r3, r6, #30
 800b61a:	d41f      	bmi.n	800b65c <tcp_recv+0x5c>
}
 800b61c:	2002      	movs	r0, #2
 800b61e:	b013      	add	sp, #76	; 0x4c
 800b620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return node->next;
 800b624:	6826      	ldr	r6, [r4, #0]
	return tcp_endpoint_cmp(&conn->src, pkt, TCP_EP_DST) &&
 800b626:	2200      	movs	r2, #0
 800b628:	4629      	mov	r1, r5
 800b62a:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 800b62e:	f00e f910 	bl	8019852 <tcp_endpoint_cmp>
 800b632:	b920      	cbnz	r0, 800b63e <tcp_recv+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp_conns, conn, tmp, next) {
 800b634:	2e00      	cmp	r6, #0
 800b636:	d0eb      	beq.n	800b610 <tcp_recv+0x10>
 800b638:	4634      	mov	r4, r6
 800b63a:	6836      	ldr	r6, [r6, #0]
 800b63c:	e7f3      	b.n	800b626 <tcp_recv+0x26>
		tcp_endpoint_cmp(&conn->dst, pkt, TCP_EP_SRC);
 800b63e:	2201      	movs	r2, #1
 800b640:	4629      	mov	r1, r5
 800b642:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 800b646:	f00e f904 	bl	8019852 <tcp_endpoint_cmp>
		if (found) {
 800b64a:	2800      	cmp	r0, #0
 800b64c:	d0f2      	beq.n	800b634 <tcp_recv+0x34>
		verdict = tcp_in(conn, pkt);
 800b64e:	4629      	mov	r1, r5
 800b650:	4620      	mov	r0, r4
}
 800b652:	b013      	add	sp, #76	; 0x4c
 800b654:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		verdict = tcp_in(conn, pkt);
 800b658:	f7ff b8d6 	b.w	800a808 <tcp_in>
	if (th_flags(th) & SYN && !(th_flags(th) & ACK)) {
 800b65c:	f016 0610 	ands.w	r6, r6, #16
 800b660:	d1dc      	bne.n	800b61c <tcp_recv+0x1c>
	return pkt->family;
 800b662:	f895 9037 	ldrb.w	r9, [r5, #55]	; 0x37
	struct sockaddr local_addr = { 0 };
 800b666:	2218      	movs	r2, #24
 800b668:	4631      	mov	r1, r6
 800b66a:	a80c      	add	r0, sp, #48	; 0x30
 800b66c:	ea4f 1859 	mov.w	r8, r9, lsr #5
		struct tcp *conn_old = ((struct net_context *)user_data)->tcp;
 800b670:	6d7f      	ldr	r7, [r7, #84]	; 0x54
	struct net_context *context = NULL;
 800b672:	9607      	str	r6, [sp, #28]
	struct sockaddr local_addr = { 0 };
 800b674:	f009 fb0a 	bl	8014c8c <memset>
	ret = net_context_get(af, SOCK_STREAM, IPPROTO_TCP, &context);
 800b678:	ab07      	add	r3, sp, #28
 800b67a:	2206      	movs	r2, #6
 800b67c:	2101      	movs	r1, #1
 800b67e:	4640      	mov	r0, r8
 800b680:	f7fb fa74 	bl	8006b6c <net_context_get>
	if (ret < 0) {
 800b684:	2800      	cmp	r0, #0
 800b686:	dbc9      	blt.n	800b61c <tcp_recv+0x1c>
	conn = context->tcp;
 800b688:	9b07      	ldr	r3, [sp, #28]
 800b68a:	6d5c      	ldr	r4, [r3, #84]	; 0x54
	conn->iface = pkt->iface;
 800b68c:	69ab      	ldr	r3, [r5, #24]
	tcp_derive_rto(conn);
 800b68e:	4620      	mov	r0, r4
	conn->iface = pkt->iface;
 800b690:	6123      	str	r3, [r4, #16]
	tcp_derive_rto(conn);
 800b692:	f00d ffa7 	bl	80195e4 <tcp_derive_rto>
 800b696:	f895 2037 	ldrb.w	r2, [r5, #55]	; 0x37
	net_context_set_family(conn->context, net_pkt_family(pkt));
 800b69a:	6863      	ldr	r3, [r4, #4]
	if (family == AF_UNSPEC || family == AF_INET || family == AF_INET6 ||
 800b69c:	2a9f      	cmp	r2, #159	; 0x9f
 800b69e:	ea4f 1152 	mov.w	r1, r2, lsr #5
	context->flags |= flag;
 800b6a2:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
		flag = family << 3;
 800b6a6:	bf98      	it	ls
 800b6a8:	00ce      	lslls	r6, r1, #3
	if (tcp_endpoint_set(&conn->dst, pkt, TCP_EP_SRC) < 0) {
 800b6aa:	4629      	mov	r1, r5
	context->flags |= flag;
 800b6ac:	4316      	orrs	r6, r2
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f8a3 6074 	strh.w	r6, [r3, #116]	; 0x74
 800b6b4:	f504 76fc 	add.w	r6, r4, #504	; 0x1f8
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f00e f880 	bl	80197be <tcp_endpoint_set>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	da03      	bge.n	800b6ca <tcp_recv+0xca>
		net_context_put(context);
 800b6c2:	9807      	ldr	r0, [sp, #28]
 800b6c4:	f7fb fb0e 	bl	8006ce4 <net_context_put>
		if (!conn) {
 800b6c8:	e7a8      	b.n	800b61c <tcp_recv+0x1c>
	if (tcp_endpoint_set(&conn->src, pkt, TCP_EP_DST) < 0) {
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 800b6d2:	f00e f874 	bl	80197be <tcp_endpoint_set>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	dbf3      	blt.n	800b6c2 <tcp_recv+0xc2>
	memcpy(&context->remote, &conn->dst, sizeof(context->remote));
 800b6da:	9807      	ldr	r0, [sp, #28]
 800b6dc:	2218      	movs	r2, #24
 800b6de:	4631      	mov	r1, r6
 800b6e0:	302c      	adds	r0, #44	; 0x2c
 800b6e2:	f009 fac8 	bl	8014c76 <memcpy>
	context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
 800b6e6:	9a07      	ldr	r2, [sp, #28]
 800b6e8:	f8b2 3074 	ldrh.w	r3, [r2, #116]	; 0x74
	net_sin_ptr(&context->local)->sin_family = af;
 800b6ec:	f8a2 8020 	strh.w	r8, [r2, #32]
	context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
 800b6f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6f4:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 800b6f8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800b6fc:	2b02      	cmp	r3, #2
	local_addr.sa_family = net_context_get_family(context);
 800b6fe:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800b702:	d15c      	bne.n	800b7be <tcp_recv+0x1be>
		net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
 800b704:	f10d 0c20 	add.w	ip, sp, #32
 800b708:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800b70c:	f504 79fa 	add.w	r9, r4, #500	; 0x1f4
 800b710:	4662      	mov	r2, ip
 800b712:	6818      	ldr	r0, [r3, #0]
 800b714:	3308      	adds	r3, #8
 800b716:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800b71a:	46e6      	mov	lr, ip
 800b71c:	454b      	cmp	r3, r9
 800b71e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800b722:	46f4      	mov	ip, lr
 800b724:	d1f5      	bne.n	800b712 <tcp_recv+0x112>
 800b726:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800b72a:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b72c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ret = net_context_bind(context, &local_addr, sizeof(local_addr));
 800b730:	2218      	movs	r2, #24
 800b732:	a90c      	add	r1, sp, #48	; 0x30
 800b734:	9807      	ldr	r0, [sp, #28]
 800b736:	f00b f8a8 	bl	801688a <net_context_bind>
	if (ret < 0) {
 800b73a:	2800      	cmp	r0, #0
 800b73c:	dbc1      	blt.n	800b6c2 <tcp_recv+0xc2>
		conn->seq = tcp_init_isn(&local_addr, &context->remote);
 800b73e:	9907      	ldr	r1, [sp, #28]
 800b740:	a80c      	add	r0, sp, #48	; 0x30
 800b742:	312c      	adds	r1, #44	; 0x2c
 800b744:	f7fe fa58 	bl	8009bf8 <tcp_init_isn>
				&context->remote, &local_addr,
 800b748:	9a07      	ldr	r2, [sp, #28]
		conn->seq = tcp_init_isn(&local_addr, &context->remote);
 800b74a:	f8c4 0224 	str.w	r0, [r4, #548]	; 0x224
	ret = net_conn_register(IPPROTO_TCP, af,
 800b74e:	4641      	mov	r1, r8
 800b750:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800b754:	2006      	movs	r0, #6
 800b756:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b75a:	4b1d      	ldr	r3, [pc, #116]	; (800b7d0 <tcp_recv+0x1d0>)
 800b75c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b760:	f8b4 31e2 	ldrh.w	r3, [r4, #482]	; 0x1e2
 800b764:	322c      	adds	r2, #44	; 0x2c
 800b766:	ba5b      	rev16	r3, r3
 800b768:	b29b      	uxth	r3, r3
 800b76a:	9301      	str	r3, [sp, #4]
 800b76c:	f8b4 31fa 	ldrh.w	r3, [r4, #506]	; 0x1fa
 800b770:	ba5b      	rev16	r3, r3
 800b772:	b29b      	uxth	r3, r3
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	ab0c      	add	r3, sp, #48	; 0x30
 800b778:	f7fb fd8a 	bl	8007290 <net_conn_register>
	if (ret < 0) {
 800b77c:	2800      	cmp	r0, #0
 800b77e:	dba0      	blt.n	800b6c2 <tcp_recv+0xc2>
		net_ipaddr_copy(&conn_old->context->remote, &conn->dst.sa);
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	4633      	mov	r3, r6
 800b784:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800b788:	f504 7e04 	add.w	lr, r4, #528	; 0x210
 800b78c:	6818      	ldr	r0, [r3, #0]
 800b78e:	3308      	adds	r3, #8
 800b790:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800b794:	4666      	mov	r6, ip
 800b796:	4573      	cmp	r3, lr
 800b798:	c603      	stmia	r6!, {r0, r1}
 800b79a:	46b4      	mov	ip, r6
 800b79c:	d1f6      	bne.n	800b78c <tcp_recv+0x18c>
 800b79e:	ab0c      	add	r3, sp, #48	; 0x30
 800b7a0:	322c      	adds	r2, #44	; 0x2c
 800b7a2:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 800b7a6:	461e      	mov	r6, r3
 800b7a8:	3208      	adds	r2, #8
 800b7aa:	ce03      	ldmia	r6!, {r0, r1}
 800b7ac:	4566      	cmp	r6, ip
 800b7ae:	f842 0c08 	str.w	r0, [r2, #-8]
 800b7b2:	f842 1c04 	str.w	r1, [r2, #-4]
 800b7b6:	4633      	mov	r3, r6
 800b7b8:	d1f5      	bne.n	800b7a6 <tcp_recv+0x1a6>
		conn->accepted_conn = conn_old;
 800b7ba:	6227      	str	r7, [r4, #32]
 800b7bc:	e747      	b.n	800b64e <tcp_recv+0x4e>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d1b6      	bne.n	800b730 <tcp_recv+0x130>
		net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
 800b7c2:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 800b7c6:	930d      	str	r3, [sp, #52]	; 0x34
 800b7c8:	e7b2      	b.n	800b730 <tcp_recv+0x130>
 800b7ca:	bf00      	nop
 800b7cc:	24002db0 	.word	0x24002db0
 800b7d0:	0800b601 	.word	0x0800b601

0800b7d4 <net_tcp_state_str>:
	switch (state) {
 800b7d4:	3801      	subs	r0, #1
 800b7d6:	b2c0      	uxtb	r0, r0
 800b7d8:	280a      	cmp	r0, #10
 800b7da:	bf96      	itet	ls
 800b7dc:	4b02      	ldrls	r3, [pc, #8]	; (800b7e8 <net_tcp_state_str+0x14>)

	return ret;
}

const char *net_tcp_state_str(enum tcp_state state)
{
 800b7de:	2000      	movhi	r0, #0
 800b7e0:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	return tcp_state_to_str(state, false);
}
 800b7e4:	3004      	adds	r0, #4
 800b7e6:	4770      	bx	lr
 800b7e8:	0801d080 	.word	0x0801d080

0800b7ec <net_tcp_init>:

	return &conn->connect_sem;
}

void net_tcp_init(void)
{
 800b7ec:	b513      	push	{r0, r1, r4, lr}
#define THREAD_PRIORITY K_PRIO_PREEMPT(0)
#endif

	/* Use private workqueue in order not to block the system work queue.
	 */
	k_work_queue_start(&tcp_work_q, work_q_stack,
 800b7ee:	2400      	movs	r4, #0
 800b7f0:	f06f 030f 	mvn.w	r3, #15
 800b7f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7f8:	490c      	ldr	r1, [pc, #48]	; (800b82c <net_tcp_init+0x40>)
 800b7fa:	480d      	ldr	r0, [pc, #52]	; (800b830 <net_tcp_init+0x44>)
 800b7fc:	9400      	str	r4, [sp, #0]
 800b7fe:	f006 fd7b 	bl	80122f8 <k_work_queue_start>
 800b802:	2109      	movs	r1, #9
 800b804:	4623      	mov	r3, r4
			   K_KERNEL_STACK_SIZEOF(work_q_stack), THREAD_PRIORITY,
			   NULL);

	/* Compute the largest possible retransmission timeout */
	tcp_fin_timeout_ms = 0;
	rto = tcp_rto;
 800b806:	22c8      	movs	r2, #200	; 0xc8
	for (i = 0; i < tcp_retries; i++) {
 800b808:	3901      	subs	r1, #1
		tcp_fin_timeout_ms += rto;
 800b80a:	4413      	add	r3, r2
		rto += rto >> 1;
 800b80c:	eb02 0262 	add.w	r2, r2, r2, asr #1
	for (i = 0; i < tcp_retries; i++) {
 800b810:	d1fa      	bne.n	800b808 <net_tcp_init+0x1c>
	}
	/* At the last timeout cicle */
	tcp_fin_timeout_ms += tcp_rto;
 800b812:	33c8      	adds	r3, #200	; 0xc8

	/* When CONFIG_NET_TCP_RANDOMIZED_RTO is active in can be worse case 1.5 times larger */
	if (IS_ENABLED(CONFIG_NET_TCP_RANDOMIZED_RTO)) {
		tcp_fin_timeout_ms += tcp_fin_timeout_ms >> 1;
 800b814:	4a07      	ldr	r2, [pc, #28]	; (800b834 <net_tcp_init+0x48>)
 800b816:	eb03 0363 	add.w	r3, r3, r3, asr #1
 800b81a:	6013      	str	r3, [r2, #0]
	return z_impl_k_thread_name_set(thread, str);
 800b81c:	4906      	ldr	r1, [pc, #24]	; (800b838 <net_tcp_init+0x4c>)
 800b81e:	4804      	ldr	r0, [pc, #16]	; (800b830 <net_tcp_init+0x44>)
	}

	k_thread_name_set(&tcp_work_q.thread, "tcp_work");
	NET_DBG("Workq started. Thread ID: %p", &tcp_work_q.thread);
}
 800b820:	b002      	add	sp, #8
 800b822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b826:	f006 b915 	b.w	8011a54 <z_impl_k_thread_name_set>
 800b82a:	bf00      	nop
 800b82c:	24004d40 	.word	0x24004d40
 800b830:	240018f8 	.word	0x240018f8
 800b834:	24002db8 	.word	0x24002db8
 800b838:	0801ece1 	.word	0x0801ece1

0800b83c <nbr_address_get>:

#define NBR_ADDRESS_CMD &nbr_address

static void nbr_address_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
 800b83c:	2300      	movs	r3, #0
{
 800b83e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	entry->handler = NULL;
 800b840:	60cb      	str	r3, [r1, #12]
{
 800b842:	460d      	mov	r5, r1
	entry->help  = NULL;
 800b844:	604b      	str	r3, [r1, #4]
	if (idx == 0) {
 800b846:	4604      	mov	r4, r0
	entry->subcmd = &nbr_address;
 800b848:	4b0d      	ldr	r3, [pc, #52]	; (800b880 <nbr_address_get+0x44>)
 800b84a:	608b      	str	r3, [r1, #8]
	if (idx == 0) {
 800b84c:	b988      	cbnz	r0, 800b872 <nbr_address_get+0x36>
		memset(nbr_address_buffer, 0, sizeof(nbr_address_buffer));
 800b84e:	4601      	mov	r1, r0
 800b850:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800b854:	480b      	ldr	r0, [pc, #44]	; (800b884 <nbr_address_get+0x48>)
 800b856:	f009 fa19 	bl	8014c8c <memset>
	net_ipv6_nbr_foreach(nbr_address_cb, &count);
 800b85a:	a901      	add	r1, sp, #4
 800b85c:	480a      	ldr	r0, [pc, #40]	; (800b888 <nbr_address_get+0x4c>)
	int count = 0;
 800b85e:	9401      	str	r4, [sp, #4]
	net_ipv6_nbr_foreach(nbr_address_cb, &count);
 800b860:	f7fd f904 	bl	8008a6c <net_ipv6_nbr_foreach>
	if (!nbr_address_buffer[idx][0]) {
 800b864:	2028      	movs	r0, #40	; 0x28
 800b866:	4a07      	ldr	r2, [pc, #28]	; (800b884 <nbr_address_get+0x48>)
 800b868:	4344      	muls	r4, r0
 800b86a:	1913      	adds	r3, r2, r4
 800b86c:	5d12      	ldrb	r2, [r2, r4]
 800b86e:	b91a      	cbnz	r2, 800b878 <nbr_address_get+0x3c>
 800b870:	e001      	b.n	800b876 <nbr_address_get+0x3a>
	if (idx >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
 800b872:	2807      	cmp	r0, #7
 800b874:	d9f6      	bls.n	800b864 <nbr_address_get+0x28>
		return NULL;
 800b876:	2300      	movs	r3, #0
	entry->syntax = set_nbr_address(idx);
 800b878:	602b      	str	r3, [r5, #0]
}
 800b87a:	b003      	add	sp, #12
 800b87c:	bd30      	pop	{r4, r5, pc}
 800b87e:	bf00      	nop
 800b880:	0801cae0 	.word	0x0801cae0
 800b884:	24003189 	.word	0x24003189
 800b888:	0800b88d 	.word	0x0800b88d

0800b88c <nbr_address_cb>:
{
 800b88c:	b538      	push	{r3, r4, r5, lr}
	if (*count >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
 800b88e:	680d      	ldr	r5, [r1, #0]
{
 800b890:	460c      	mov	r4, r1
	if (*count >= CONFIG_NET_IPV6_MAX_NEIGHBORS) {
 800b892:	2d07      	cmp	r5, #7
 800b894:	dc0f      	bgt.n	800b8b6 <nbr_address_cb+0x2a>
		 "%s", net_sprint_ipv6_addr(&net_ipv6_nbr_data(nbr)->addr));
 800b896:	68c1      	ldr	r1, [r0, #12]
	snprintk(nbr_address_buffer[*count], NET_IPV6_ADDR_LEN,
 800b898:	2002      	movs	r0, #2
 800b89a:	3104      	adds	r1, #4
 800b89c:	f7fa ff86 	bl	80067ac <net_sprint_addr>
 800b8a0:	2128      	movs	r1, #40	; 0x28
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	4804      	ldr	r0, [pc, #16]	; (800b8b8 <nbr_address_cb+0x2c>)
 800b8a6:	4a05      	ldr	r2, [pc, #20]	; (800b8bc <nbr_address_cb+0x30>)
 800b8a8:	fb01 0005 	mla	r0, r1, r5, r0
 800b8ac:	f007 fbf4 	bl	8013098 <snprintk>
	(*count)++;
 800b8b0:	6823      	ldr	r3, [r4, #0]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	6023      	str	r3, [r4, #0]
}
 800b8b6:	bd38      	pop	{r3, r4, r5, pc}
 800b8b8:	24003189 	.word	0x24003189
 800b8bc:	0801de94 	.word	0x0801de94

0800b8c0 <cmd_net_websocket>:
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_WEBSOCKET_CLIENT",
 800b8c0:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <cmd_net_websocket+0x18>)
{
 800b8c2:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_WEBSOCKET_CLIENT",
 800b8c4:	4a05      	ldr	r2, [pc, #20]	; (800b8dc <cmd_net_websocket+0x1c>)
 800b8c6:	2102      	movs	r1, #2
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <cmd_net_websocket+0x20>)
 800b8cc:	f008 f996 	bl	8013bfc <shell_fprintf>
}
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	b003      	add	sp, #12
 800b8d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8d8:	0801edc8 	.word	0x0801edc8
 800b8dc:	0801edaa 	.word	0x0801edaa
 800b8e0:	0801ed92 	.word	0x0801ed92

0800b8e4 <cmd_net_vlan>:
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_VLAN", "VLAN");
 800b8e4:	4b05      	ldr	r3, [pc, #20]	; (800b8fc <cmd_net_vlan+0x18>)
{
 800b8e6:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_VLAN", "VLAN");
 800b8e8:	4a05      	ldr	r2, [pc, #20]	; (800b900 <cmd_net_vlan+0x1c>)
 800b8ea:	2102      	movs	r1, #2
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	4b05      	ldr	r3, [pc, #20]	; (800b904 <cmd_net_vlan+0x20>)
 800b8f0:	f008 f984 	bl	8013bfc <shell_fprintf>
}
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	b003      	add	sp, #12
 800b8f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8fc:	0801eddd 	.word	0x0801eddd
 800b900:	0801edaa 	.word	0x0801edaa
 800b904:	0801edd2 	.word	0x0801edd2

0800b908 <cmd_net_virtual>:
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_L2_VIRTUAL",
 800b908:	4b05      	ldr	r3, [pc, #20]	; (800b920 <cmd_net_virtual+0x18>)
{
 800b90a:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_L2_VIRTUAL",
 800b90c:	4a05      	ldr	r2, [pc, #20]	; (800b924 <cmd_net_virtual+0x1c>)
 800b90e:	2102      	movs	r1, #2
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	4b05      	ldr	r3, [pc, #20]	; (800b928 <cmd_net_virtual+0x20>)
 800b914:	f008 f972 	bl	8013bfc <shell_fprintf>
}
 800b918:	2000      	movs	r0, #0
 800b91a:	b003      	add	sp, #12
 800b91c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b920:	0801edf8 	.word	0x0801edf8
 800b924:	0801edaa 	.word	0x0801edaa
 800b928:	0801ede2 	.word	0x0801ede2

0800b92c <tcp_sent_cb>:
	PR_SHELL(tcp_shell, "Message sent\n");
 800b92c:	4b02      	ldr	r3, [pc, #8]	; (800b938 <tcp_sent_cb+0xc>)
 800b92e:	2108      	movs	r1, #8
 800b930:	4a02      	ldr	r2, [pc, #8]	; (800b93c <tcp_sent_cb+0x10>)
 800b932:	6818      	ldr	r0, [r3, #0]
 800b934:	f008 b962 	b.w	8013bfc <shell_fprintf>
 800b938:	24002dc8 	.word	0x24002dc8
 800b93c:	0801ee12 	.word	0x0801ee12

0800b940 <cmd_net_suspend>:
	PR_INFO("You need a network driver supporting Power Management.\n");
 800b940:	4a03      	ldr	r2, [pc, #12]	; (800b950 <cmd_net_suspend+0x10>)
 800b942:	2102      	movs	r1, #2
{
 800b944:	b508      	push	{r3, lr}
	PR_INFO("You need a network driver supporting Power Management.\n");
 800b946:	f008 f959 	bl	8013bfc <shell_fprintf>
}
 800b94a:	2000      	movs	r0, #0
 800b94c:	bd08      	pop	{r3, pc}
 800b94e:	bf00      	nop
 800b950:	0801ee20 	.word	0x0801ee20

0800b954 <cmd_net_stats_all>:
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_STATISTICS",
 800b954:	4b05      	ldr	r3, [pc, #20]	; (800b96c <cmd_net_stats_all+0x18>)
{
 800b956:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_STATISTICS",
 800b958:	4a05      	ldr	r2, [pc, #20]	; (800b970 <cmd_net_stats_all+0x1c>)
 800b95a:	2102      	movs	r1, #2
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	4b05      	ldr	r3, [pc, #20]	; (800b974 <cmd_net_stats_all+0x20>)
 800b960:	f008 f94c 	bl	8013bfc <shell_fprintf>
}
 800b964:	2000      	movs	r0, #0
 800b966:	b003      	add	sp, #12
 800b968:	f85d fb04 	ldr.w	pc, [sp], #4
 800b96c:	0801ee6e 	.word	0x0801ee6e
 800b970:	0801edaa 	.word	0x0801edaa
 800b974:	0801ee58 	.word	0x0801ee58

0800b978 <cmd_net_stacks>:
	PR("Type \"kernel stacks\" to see stack information.\n");
 800b978:	4a03      	ldr	r2, [pc, #12]	; (800b988 <cmd_net_stacks+0x10>)
 800b97a:	2108      	movs	r1, #8
{
 800b97c:	b508      	push	{r3, lr}
	PR("Type \"kernel stacks\" to see stack information.\n");
 800b97e:	f008 f93d 	bl	8013bfc <shell_fprintf>
}
 800b982:	2000      	movs	r0, #0
 800b984:	bd08      	pop	{r3, pc}
 800b986:	bf00      	nop
 800b988:	0801ee79 	.word	0x0801ee79

0800b98c <cmd_net_ppp_status>:
	PR_INFO("Set %s to enable %s support.\n",
 800b98c:	4b05      	ldr	r3, [pc, #20]	; (800b9a4 <cmd_net_ppp_status+0x18>)
{
 800b98e:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
 800b990:	4a05      	ldr	r2, [pc, #20]	; (800b9a8 <cmd_net_ppp_status+0x1c>)
 800b992:	2102      	movs	r1, #2
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	4b05      	ldr	r3, [pc, #20]	; (800b9ac <cmd_net_ppp_status+0x20>)
 800b998:	f008 f930 	bl	8013bfc <shell_fprintf>
}
 800b99c:	2000      	movs	r0, #0
 800b99e:	b003      	add	sp, #12
 800b9a0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9a4:	0801eedc 	.word	0x0801eedc
 800b9a8:	0801edaa 	.word	0x0801edaa
 800b9ac:	0801eea9 	.word	0x0801eea9

0800b9b0 <cmd_net_ppp_ping>:
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_L2_PPP", "PPP");
 800b9b0:	4b05      	ldr	r3, [pc, #20]	; (800b9c8 <cmd_net_ppp_ping+0x18>)
{
 800b9b2:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_L2_PPP", "PPP");
 800b9b4:	4a05      	ldr	r2, [pc, #20]	; (800b9cc <cmd_net_ppp_ping+0x1c>)
 800b9b6:	2102      	movs	r1, #2
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <cmd_net_ppp_ping+0x20>)
 800b9bc:	f008 f91e 	bl	8013bfc <shell_fprintf>
}
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	b003      	add	sp, #12
 800b9c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9c8:	0801eedc 	.word	0x0801eedc
 800b9cc:	0801edaa 	.word	0x0801edaa
 800b9d0:	0801eece 	.word	0x0801eece

0800b9d4 <cmd_net_set_mac>:
	PR_WARNING("Unsupported command, please enable CONFIG_NET_L2_ETHERNET "
 800b9d4:	4a03      	ldr	r2, [pc, #12]	; (800b9e4 <cmd_net_set_mac+0x10>)
 800b9d6:	2103      	movs	r1, #3
{
 800b9d8:	b508      	push	{r3, lr}
	PR_WARNING("Unsupported command, please enable CONFIG_NET_L2_ETHERNET "
 800b9da:	f008 f90f 	bl	8013bfc <shell_fprintf>
}
 800b9de:	f06f 0007 	mvn.w	r0, #7
 800b9e2:	bd08      	pop	{r3, pc}
 800b9e4:	0801eee0 	.word	0x0801eee0

0800b9e8 <cmd_net_gptp_port>:
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_GPTP", "gPTP");
 800b9e8:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <cmd_net_gptp_port+0x18>)
{
 800b9ea:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n", "CONFIG_NET_GPTP", "gPTP");
 800b9ec:	4a05      	ldr	r2, [pc, #20]	; (800ba04 <cmd_net_gptp_port+0x1c>)
 800b9ee:	2102      	movs	r1, #2
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <cmd_net_gptp_port+0x20>)
 800b9f4:	f008 f902 	bl	8013bfc <shell_fprintf>
}
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	b003      	add	sp, #12
 800b9fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba00:	0801ef4b 	.word	0x0801ef4b
 800ba04:	0801edaa 	.word	0x0801edaa
 800ba08:	0801ef3b 	.word	0x0801ef3b

0800ba0c <cmd_net_events_on>:
	PR_INFO("Network management events are not supported. "
 800ba0c:	4a03      	ldr	r2, [pc, #12]	; (800ba1c <cmd_net_events_on+0x10>)
 800ba0e:	2102      	movs	r1, #2
{
 800ba10:	b508      	push	{r3, lr}
	PR_INFO("Network management events are not supported. "
 800ba12:	f008 f8f3 	bl	8013bfc <shell_fprintf>
}
 800ba16:	2000      	movs	r0, #0
 800ba18:	bd08      	pop	{r3, pc}
 800ba1a:	bf00      	nop
 800ba1c:	0801ef50 	.word	0x0801ef50

0800ba20 <cmd_net_capture>:
	PR_INFO("Set %s to enable %s support.\n",
 800ba20:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <cmd_net_capture+0x18>)
{
 800ba22:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
 800ba24:	4a05      	ldr	r2, [pc, #20]	; (800ba3c <cmd_net_capture+0x1c>)
 800ba26:	2102      	movs	r1, #2
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <cmd_net_capture+0x20>)
 800ba2c:	f008 f8e6 	bl	8013bfc <shell_fprintf>
}
 800ba30:	2000      	movs	r0, #0
 800ba32:	b003      	add	sp, #12
 800ba34:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba38:	0801efc1 	.word	0x0801efc1
 800ba3c:	0801edaa 	.word	0x0801edaa
 800ba40:	0801efae 	.word	0x0801efae

0800ba44 <cmd_net_allocs>:
	PR_INFO("Set %s to enable %s support.\n",
 800ba44:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <cmd_net_allocs+0x18>)
{
 800ba46:	b507      	push	{r0, r1, r2, lr}
	PR_INFO("Set %s to enable %s support.\n",
 800ba48:	4a05      	ldr	r2, [pc, #20]	; (800ba60 <cmd_net_allocs+0x1c>)
 800ba4a:	2102      	movs	r1, #2
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	4b05      	ldr	r3, [pc, #20]	; (800ba64 <cmd_net_allocs+0x20>)
 800ba50:	f008 f8d4 	bl	8013bfc <shell_fprintf>
}
 800ba54:	2000      	movs	r0, #0
 800ba56:	b003      	add	sp, #12
 800ba58:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba5c:	0801eff7 	.word	0x0801eff7
 800ba60:	0801edaa 	.word	0x0801edaa
 800ba64:	0801efd8 	.word	0x0801efd8

0800ba68 <get_iface_idx>:
{
 800ba68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba6a:	4605      	mov	r5, r0
	if (!index_str) {
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	b939      	cbnz	r1, 800ba80 <get_iface_idx+0x18>
		PR_WARNING("Interface index is missing.\n");
 800ba70:	4a11      	ldr	r2, [pc, #68]	; (800bab8 <get_iface_idx+0x50>)
 800ba72:	2103      	movs	r1, #3
 800ba74:	f008 f8c2 	bl	8013bfc <shell_fprintf>
		return -EINVAL;
 800ba78:	f06f 0015 	mvn.w	r0, #21
}
 800ba7c:	b003      	add	sp, #12
 800ba7e:	bd30      	pop	{r4, r5, pc}
	idx = strtol(index_str, &endptr, 10);
 800ba80:	220a      	movs	r2, #10
 800ba82:	a901      	add	r1, sp, #4
 800ba84:	4620      	mov	r0, r4
 800ba86:	f008 ff66 	bl	8014956 <strtol>
	if (*endptr != '\0') {
 800ba8a:	9b01      	ldr	r3, [sp, #4]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	b143      	cbz	r3, 800baa2 <get_iface_idx+0x3a>
		PR_WARNING("Invalid index %s\n", index_str);
 800ba90:	4628      	mov	r0, r5
 800ba92:	4623      	mov	r3, r4
 800ba94:	4a09      	ldr	r2, [pc, #36]	; (800babc <get_iface_idx+0x54>)
 800ba96:	2103      	movs	r1, #3
 800ba98:	f008 f8b0 	bl	8013bfc <shell_fprintf>
		return -ENOENT;
 800ba9c:	f06f 0001 	mvn.w	r0, #1
 800baa0:	e7ec      	b.n	800ba7c <get_iface_idx+0x14>
	if (idx < 0 || idx > 255) {
 800baa2:	28ff      	cmp	r0, #255	; 0xff
 800baa4:	d9ea      	bls.n	800ba7c <get_iface_idx+0x14>
		PR_WARNING("Invalid index %d\n", idx);
 800baa6:	4603      	mov	r3, r0
 800baa8:	4a05      	ldr	r2, [pc, #20]	; (800bac0 <get_iface_idx+0x58>)
 800baaa:	4628      	mov	r0, r5
 800baac:	2103      	movs	r1, #3
 800baae:	f008 f8a5 	bl	8013bfc <shell_fprintf>
		return -ERANGE;
 800bab2:	f06f 0021 	mvn.w	r0, #33	; 0x21
 800bab6:	e7e1      	b.n	800ba7c <get_iface_idx+0x14>
 800bab8:	0801f00a 	.word	0x0801f00a
 800babc:	0801f027 	.word	0x0801f027
 800bac0:	0801f039 	.word	0x0801f039

0800bac4 <cmd_net_tcp_recv>:
{
 800bac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 800bac6:	4b11      	ldr	r3, [pc, #68]	; (800bb0c <cmd_net_tcp_recv+0x48>)
{
 800bac8:	4604      	mov	r4, r0
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 800baca:	6818      	ldr	r0, [r3, #0]
 800bacc:	b118      	cbz	r0, 800bad6 <cmd_net_tcp_recv+0x12>
	return context->flags & NET_CONTEXT_IN_USE;
 800bace:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
 800bad2:	07db      	lsls	r3, r3, #31
 800bad4:	d408      	bmi.n	800bae8 <cmd_net_tcp_recv+0x24>
		PR_WARNING("Not connected\n");
 800bad6:	4a0e      	ldr	r2, [pc, #56]	; (800bb10 <cmd_net_tcp_recv+0x4c>)
 800bad8:	2103      	movs	r1, #3
 800bada:	4620      	mov	r0, r4
 800badc:	f008 f88e 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800bae0:	f06f 0007 	mvn.w	r0, #7
}
 800bae4:	b004      	add	sp, #16
 800bae6:	bd10      	pop	{r4, pc}
	ret = net_context_recv(tcp_ctx, tcp_recv_cb, K_NO_WAIT, &user_data);
 800bae8:	ab02      	add	r3, sp, #8
 800baea:	2200      	movs	r2, #0
 800baec:	4909      	ldr	r1, [pc, #36]	; (800bb14 <cmd_net_tcp_recv+0x50>)
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	2300      	movs	r3, #0
	user_data.sh = sh;
 800baf2:	9402      	str	r4, [sp, #8]
	ret = net_context_recv(tcp_ctx, tcp_recv_cb, K_NO_WAIT, &user_data);
 800baf4:	f7fb f91e 	bl	8006d34 <net_context_recv>
	if (ret < 0) {
 800baf8:	1e03      	subs	r3, r0, #0
 800bafa:	da05      	bge.n	800bb08 <cmd_net_tcp_recv+0x44>
		PR_WARNING("Cannot recv data (%d)\n", ret);
 800bafc:	4a06      	ldr	r2, [pc, #24]	; (800bb18 <cmd_net_tcp_recv+0x54>)
 800bafe:	2103      	movs	r1, #3
 800bb00:	4620      	mov	r0, r4
 800bb02:	f008 f87b 	bl	8013bfc <shell_fprintf>
 800bb06:	e7eb      	b.n	800bae0 <cmd_net_tcp_recv+0x1c>
	return 0;
 800bb08:	2000      	movs	r0, #0
 800bb0a:	e7eb      	b.n	800bae4 <cmd_net_tcp_recv+0x20>
 800bb0c:	24002dc4 	.word	0x24002dc4
 800bb10:	0801f04b 	.word	0x0801f04b
 800bb14:	0800cced 	.word	0x0800cced
 800bb18:	0801f05a 	.word	0x0801f05a

0800bb1c <cmd_net_tcp_close>:
{
 800bb1c:	b538      	push	{r3, r4, r5, lr}
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 800bb1e:	4d11      	ldr	r5, [pc, #68]	; (800bb64 <cmd_net_tcp_close+0x48>)
{
 800bb20:	4604      	mov	r4, r0
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 800bb22:	6828      	ldr	r0, [r5, #0]
 800bb24:	b118      	cbz	r0, 800bb2e <cmd_net_tcp_close+0x12>
 800bb26:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
 800bb2a:	07db      	lsls	r3, r3, #31
 800bb2c:	d407      	bmi.n	800bb3e <cmd_net_tcp_close+0x22>
		PR_WARNING("Not connected\n");
 800bb2e:	4a0e      	ldr	r2, [pc, #56]	; (800bb68 <cmd_net_tcp_close+0x4c>)
 800bb30:	2103      	movs	r1, #3
 800bb32:	4620      	mov	r0, r4
 800bb34:	f008 f862 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800bb38:	f06f 0007 	mvn.w	r0, #7
}
 800bb3c:	bd38      	pop	{r3, r4, r5, pc}
	ret = net_context_put(tcp_ctx);
 800bb3e:	f7fb f8d1 	bl	8006ce4 <net_context_put>
	if (ret < 0) {
 800bb42:	1e03      	subs	r3, r0, #0
 800bb44:	da05      	bge.n	800bb52 <cmd_net_tcp_close+0x36>
		PR_WARNING("Cannot close the connection (%d)\n", ret);
 800bb46:	4a09      	ldr	r2, [pc, #36]	; (800bb6c <cmd_net_tcp_close+0x50>)
 800bb48:	2103      	movs	r1, #3
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	f008 f856 	bl	8013bfc <shell_fprintf>
 800bb50:	e7f2      	b.n	800bb38 <cmd_net_tcp_close+0x1c>
	PR("Connection closed.\n");
 800bb52:	4620      	mov	r0, r4
 800bb54:	4a06      	ldr	r2, [pc, #24]	; (800bb70 <cmd_net_tcp_close+0x54>)
 800bb56:	2108      	movs	r1, #8
 800bb58:	f008 f850 	bl	8013bfc <shell_fprintf>
	tcp_ctx = NULL;
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	6028      	str	r0, [r5, #0]
	return 0;
 800bb60:	e7ec      	b.n	800bb3c <cmd_net_tcp_close+0x20>
 800bb62:	bf00      	nop
 800bb64:	24002dc4 	.word	0x24002dc4
 800bb68:	0801f04b 	.word	0x0801f04b
 800bb6c:	0801f071 	.word	0x0801f071
 800bb70:	0801f093 	.word	0x0801f093

0800bb74 <cmd_net_tcp_send>:
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 800bb74:	4b19      	ldr	r3, [pc, #100]	; (800bbdc <cmd_net_tcp_send+0x68>)
{
 800bb76:	b570      	push	{r4, r5, r6, lr}
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 800bb78:	681d      	ldr	r5, [r3, #0]
{
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	4604      	mov	r4, r0
	if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 800bb7e:	b11d      	cbz	r5, 800bb88 <cmd_net_tcp_send+0x14>
 800bb80:	f8b5 3074 	ldrh.w	r3, [r5, #116]	; 0x74
 800bb84:	07db      	lsls	r3, r3, #31
 800bb86:	d408      	bmi.n	800bb9a <cmd_net_tcp_send+0x26>
		PR_WARNING("Not connected\n");
 800bb88:	4a15      	ldr	r2, [pc, #84]	; (800bbe0 <cmd_net_tcp_send+0x6c>)
 800bb8a:	2103      	movs	r1, #3
 800bb8c:	4620      	mov	r0, r4
		PR_WARNING("No data to send.\n");
 800bb8e:	f008 f835 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800bb92:	f06f 0007 	mvn.w	r0, #7
}
 800bb96:	b006      	add	sp, #24
 800bb98:	bd70      	pop	{r4, r5, r6, pc}
	if (!argv[++arg]) {
 800bb9a:	6856      	ldr	r6, [r2, #4]
 800bb9c:	b916      	cbnz	r6, 800bba4 <cmd_net_tcp_send+0x30>
		PR_WARNING("No data to send.\n");
 800bb9e:	4a11      	ldr	r2, [pc, #68]	; (800bbe4 <cmd_net_tcp_send+0x70>)
 800bba0:	2103      	movs	r1, #3
 800bba2:	e7f4      	b.n	800bb8e <cmd_net_tcp_send+0x1a>
	user_data.sh = sh;
 800bba4:	9004      	str	r0, [sp, #16]
	ret = net_context_send(tcp_ctx, (uint8_t *)argv[arg],
 800bba6:	4630      	mov	r0, r6
 800bba8:	f009 f818 	bl	8014bdc <strlen>
 800bbac:	ab04      	add	r3, sp, #16
 800bbae:	4602      	mov	r2, r0
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	f644 6020 	movw	r0, #20000	; 0x4e20
 800bbb6:	9302      	str	r3, [sp, #8]
 800bbb8:	4b0b      	ldr	r3, [pc, #44]	; (800bbe8 <cmd_net_tcp_send+0x74>)
 800bbba:	e9cd 0100 	strd	r0, r1, [sp]
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	f00b fa03 	bl	8016fcc <net_context_send>
	if (ret < 0) {
 800bbc6:	1e03      	subs	r3, r0, #0
 800bbc8:	da05      	bge.n	800bbd6 <cmd_net_tcp_send+0x62>
		PR_WARNING("Cannot send msg (%d)\n", ret);
 800bbca:	4a08      	ldr	r2, [pc, #32]	; (800bbec <cmd_net_tcp_send+0x78>)
 800bbcc:	2103      	movs	r1, #3
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f008 f814 	bl	8013bfc <shell_fprintf>
 800bbd4:	e7dd      	b.n	800bb92 <cmd_net_tcp_send+0x1e>
	return 0;
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	e7dd      	b.n	800bb96 <cmd_net_tcp_send+0x22>
 800bbda:	bf00      	nop
 800bbdc:	24002dc4 	.word	0x24002dc4
 800bbe0:	0801f04b 	.word	0x0801f04b
 800bbe4:	0801f0a7 	.word	0x0801f0a7
 800bbe8:	0800b92d 	.word	0x0800b92d
 800bbec:	0801f0b9 	.word	0x0801f0b9

0800bbf0 <cmd_net_route>:
{
 800bbf0:	b507      	push	{r0, r1, r2, lr}
	user_data.sh = sh;
 800bbf2:	9000      	str	r0, [sp, #0]
	net_if_foreach(iface_per_route_cb, &user_data);
 800bbf4:	4669      	mov	r1, sp
 800bbf6:	4803      	ldr	r0, [pc, #12]	; (800bc04 <cmd_net_route+0x14>)
 800bbf8:	f7fa fb9c 	bl	8006334 <net_if_foreach>
}
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	b003      	add	sp, #12
 800bc00:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc04:	0800d091 	.word	0x0800d091

0800bc08 <cmd_net_ipv4>:
{
 800bc08:	b513      	push	{r0, r1, r4, lr}
 800bc0a:	4604      	mov	r4, r0
	PR("IPv4 support                              : %s\n",
 800bc0c:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <cmd_net_ipv4+0x54>)
 800bc0e:	4a14      	ldr	r2, [pc, #80]	; (800bc60 <cmd_net_ipv4+0x58>)
 800bc10:	2108      	movs	r1, #8
 800bc12:	f007 fff3 	bl	8013bfc <shell_fprintf>
	PR("IPv4 fragmentation support                : %s\n",
 800bc16:	4620      	mov	r0, r4
 800bc18:	4b12      	ldr	r3, [pc, #72]	; (800bc64 <cmd_net_ipv4+0x5c>)
 800bc1a:	2108      	movs	r1, #8
 800bc1c:	4a12      	ldr	r2, [pc, #72]	; (800bc68 <cmd_net_ipv4+0x60>)
 800bc1e:	f007 ffed 	bl	8013bfc <shell_fprintf>
	PR("Max number of IPv4 network interfaces "
 800bc22:	4620      	mov	r0, r4
 800bc24:	2301      	movs	r3, #1
 800bc26:	4a11      	ldr	r2, [pc, #68]	; (800bc6c <cmd_net_ipv4+0x64>)
 800bc28:	2108      	movs	r1, #8
 800bc2a:	f007 ffe7 	bl	8013bfc <shell_fprintf>
	PR("Max number of unicast IPv4 addresses "
 800bc2e:	4620      	mov	r0, r4
 800bc30:	2301      	movs	r3, #1
 800bc32:	4a0f      	ldr	r2, [pc, #60]	; (800bc70 <cmd_net_ipv4+0x68>)
 800bc34:	2108      	movs	r1, #8
 800bc36:	f007 ffe1 	bl	8013bfc <shell_fprintf>
	PR("Max number of multicast IPv4 addresses "
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	4a0d      	ldr	r2, [pc, #52]	; (800bc74 <cmd_net_ipv4+0x6c>)
 800bc3e:	4620      	mov	r0, r4
 800bc40:	2108      	movs	r1, #8
 800bc42:	f007 ffdb 	bl	8013bfc <shell_fprintf>
	user_data.sh = sh;
 800bc46:	9400      	str	r4, [sp, #0]
	user_data.user_data = NULL;
 800bc48:	2400      	movs	r4, #0
	net_if_foreach(ip_address_lifetime_cb, &user_data);
 800bc4a:	4669      	mov	r1, sp
 800bc4c:	480a      	ldr	r0, [pc, #40]	; (800bc78 <cmd_net_ipv4+0x70>)
	user_data.user_data = NULL;
 800bc4e:	9401      	str	r4, [sp, #4]
	net_if_foreach(ip_address_lifetime_cb, &user_data);
 800bc50:	f7fa fb70 	bl	8006334 <net_if_foreach>
}
 800bc54:	4620      	mov	r0, r4
 800bc56:	b002      	add	sp, #8
 800bc58:	bd10      	pop	{r4, pc}
 800bc5a:	bf00      	nop
 800bc5c:	0801f0cf 	.word	0x0801f0cf
 800bc60:	0801f0d7 	.word	0x0801f0d7
 800bc64:	0801eb7a 	.word	0x0801eb7a
 800bc68:	0801f107 	.word	0x0801f107
 800bc6c:	0801f137 	.word	0x0801f137
 800bc70:	0801f17a 	.word	0x0801f17a
 800bc74:	0801f1bd 	.word	0x0801f1bd
 800bc78:	0800cfbd 	.word	0x0800cfbd

0800bc7c <cmd_net_ipv6>:
{
 800bc7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	PR("IPv6 support                              : %s\n",
 800bc7e:	4d2a      	ldr	r5, [pc, #168]	; (800bd28 <cmd_net_ipv6+0xac>)
{
 800bc80:	4604      	mov	r4, r0
	PR("IPv6 fragmentation support                : %s\n",
 800bc82:	4e2a      	ldr	r6, [pc, #168]	; (800bd2c <cmd_net_ipv6+0xb0>)
	PR("IPv6 support                              : %s\n",
 800bc84:	2108      	movs	r1, #8
 800bc86:	462b      	mov	r3, r5
 800bc88:	4a29      	ldr	r2, [pc, #164]	; (800bd30 <cmd_net_ipv6+0xb4>)
 800bc8a:	f007 ffb7 	bl	8013bfc <shell_fprintf>
	PR("IPv6 fragmentation support                : %s\n",
 800bc8e:	4633      	mov	r3, r6
 800bc90:	4620      	mov	r0, r4
 800bc92:	4a28      	ldr	r2, [pc, #160]	; (800bd34 <cmd_net_ipv6+0xb8>)
 800bc94:	2108      	movs	r1, #8
 800bc96:	f007 ffb1 	bl	8013bfc <shell_fprintf>
	PR("Multicast Listener Discovery support      : %s\n",
 800bc9a:	462b      	mov	r3, r5
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	4a26      	ldr	r2, [pc, #152]	; (800bd38 <cmd_net_ipv6+0xbc>)
 800bca0:	2108      	movs	r1, #8
 800bca2:	f007 ffab 	bl	8013bfc <shell_fprintf>
	PR("Neighbor cache support                    : %s\n",
 800bca6:	462b      	mov	r3, r5
 800bca8:	4620      	mov	r0, r4
 800bcaa:	4a24      	ldr	r2, [pc, #144]	; (800bd3c <cmd_net_ipv6+0xc0>)
 800bcac:	2108      	movs	r1, #8
 800bcae:	f007 ffa5 	bl	8013bfc <shell_fprintf>
	PR("Neighbor discovery support                : %s\n",
 800bcb2:	462b      	mov	r3, r5
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	4a22      	ldr	r2, [pc, #136]	; (800bd40 <cmd_net_ipv6+0xc4>)
 800bcb8:	2108      	movs	r1, #8
 800bcba:	f007 ff9f 	bl	8013bfc <shell_fprintf>
	PR("Duplicate address detection (DAD) support : %s\n",
 800bcbe:	462b      	mov	r3, r5
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	4a20      	ldr	r2, [pc, #128]	; (800bd44 <cmd_net_ipv6+0xc8>)
 800bcc4:	2108      	movs	r1, #8
 800bcc6:	f007 ff99 	bl	8013bfc <shell_fprintf>
	PR("Router advertisement RDNSS option support : %s\n",
 800bcca:	462b      	mov	r3, r5
 800bccc:	4620      	mov	r0, r4
 800bcce:	4a1e      	ldr	r2, [pc, #120]	; (800bd48 <cmd_net_ipv6+0xcc>)
 800bcd0:	2108      	movs	r1, #8
 800bcd2:	f007 ff93 	bl	8013bfc <shell_fprintf>
	PR("6lo header compression support            : %s\n",
 800bcd6:	4633      	mov	r3, r6
 800bcd8:	4620      	mov	r0, r4
 800bcda:	4a1c      	ldr	r2, [pc, #112]	; (800bd4c <cmd_net_ipv6+0xd0>)
 800bcdc:	2108      	movs	r1, #8
 800bcde:	f007 ff8d 	bl	8013bfc <shell_fprintf>
	PR("Max number of IPv6 network interfaces "
 800bce2:	4620      	mov	r0, r4
 800bce4:	2301      	movs	r3, #1
 800bce6:	4a1a      	ldr	r2, [pc, #104]	; (800bd50 <cmd_net_ipv6+0xd4>)
 800bce8:	2108      	movs	r1, #8
 800bcea:	f007 ff87 	bl	8013bfc <shell_fprintf>
	PR("Max number of unicast IPv6 addresses "
 800bcee:	4620      	mov	r0, r4
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	4a18      	ldr	r2, [pc, #96]	; (800bd54 <cmd_net_ipv6+0xd8>)
 800bcf4:	2108      	movs	r1, #8
 800bcf6:	f007 ff81 	bl	8013bfc <shell_fprintf>
	PR("Max number of multicast IPv6 addresses "
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	4a16      	ldr	r2, [pc, #88]	; (800bd58 <cmd_net_ipv6+0xdc>)
 800bd00:	2108      	movs	r1, #8
 800bd02:	f007 ff7b 	bl	8013bfc <shell_fprintf>
	PR("Max number of IPv6 prefixes per network "
 800bd06:	2302      	movs	r3, #2
 800bd08:	4a14      	ldr	r2, [pc, #80]	; (800bd5c <cmd_net_ipv6+0xe0>)
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	2108      	movs	r1, #8
 800bd0e:	f007 ff75 	bl	8013bfc <shell_fprintf>
	user_data.sh = sh;
 800bd12:	9400      	str	r4, [sp, #0]
	user_data.user_data = NULL;
 800bd14:	2400      	movs	r4, #0
	net_if_foreach(address_lifetime_cb, &user_data);
 800bd16:	4669      	mov	r1, sp
 800bd18:	4811      	ldr	r0, [pc, #68]	; (800bd60 <cmd_net_ipv6+0xe4>)
	user_data.user_data = NULL;
 800bd1a:	9401      	str	r4, [sp, #4]
	net_if_foreach(address_lifetime_cb, &user_data);
 800bd1c:	f7fa fb0a 	bl	8006334 <net_if_foreach>
}
 800bd20:	4620      	mov	r0, r4
 800bd22:	b002      	add	sp, #8
 800bd24:	bd70      	pop	{r4, r5, r6, pc}
 800bd26:	bf00      	nop
 800bd28:	0801f0cf 	.word	0x0801f0cf
 800bd2c:	0801eb7a 	.word	0x0801eb7a
 800bd30:	0801f200 	.word	0x0801f200
 800bd34:	0801f230 	.word	0x0801f230
 800bd38:	0801f260 	.word	0x0801f260
 800bd3c:	0801f290 	.word	0x0801f290
 800bd40:	0801f2c0 	.word	0x0801f2c0
 800bd44:	0801f2f0 	.word	0x0801f2f0
 800bd48:	0801f320 	.word	0x0801f320
 800bd4c:	0801f350 	.word	0x0801f350
 800bd50:	0801f380 	.word	0x0801f380
 800bd54:	0801f3c3 	.word	0x0801f3c3
 800bd58:	0801f406 	.word	0x0801f406
 800bd5c:	0801f449 	.word	0x0801f449
 800bd60:	0800d805 	.word	0x0800d805

0800bd64 <cmd_net_iface>:
{
 800bd64:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (argv[1]) {
 800bd66:	6851      	ldr	r1, [r2, #4]
{
 800bd68:	4604      	mov	r4, r0
	if (argv[1]) {
 800bd6a:	b181      	cbz	r1, 800bd8e <cmd_net_iface+0x2a>
		idx = get_iface_idx(sh, argv[1]);
 800bd6c:	f7ff fe7c 	bl	800ba68 <get_iface_idx>
		if (idx < 0) {
 800bd70:	1e05      	subs	r5, r0, #0
 800bd72:	db09      	blt.n	800bd88 <cmd_net_iface+0x24>
		iface = net_if_get_by_index(idx);
 800bd74:	f00e f8c5 	bl	8019f02 <net_if_get_by_index>
		if (!iface) {
 800bd78:	4601      	mov	r1, r0
 800bd7a:	b940      	cbnz	r0, 800bd8e <cmd_net_iface+0x2a>
			PR_WARNING("No such interface in index %d\n", idx);
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	4a08      	ldr	r2, [pc, #32]	; (800bda0 <cmd_net_iface+0x3c>)
 800bd80:	2103      	movs	r1, #3
 800bd82:	4620      	mov	r0, r4
 800bd84:	f007 ff3a 	bl	8013bfc <shell_fprintf>
			return -ENOEXEC;
 800bd88:	f06f 0007 	mvn.w	r0, #7
 800bd8c:	e006      	b.n	800bd9c <cmd_net_iface+0x38>
	net_if_foreach(iface_cb, &user_data);
 800bd8e:	4805      	ldr	r0, [pc, #20]	; (800bda4 <cmd_net_iface+0x40>)
	user_data.user_data = iface;
 800bd90:	e9cd 4100 	strd	r4, r1, [sp]
	net_if_foreach(iface_cb, &user_data);
 800bd94:	4669      	mov	r1, sp
 800bd96:	f7fa facd 	bl	8006334 <net_if_foreach>
	return 0;
 800bd9a:	2000      	movs	r0, #0
}
 800bd9c:	b003      	add	sp, #12
 800bd9e:	bd30      	pop	{r4, r5, pc}
 800bda0:	0801f48c 	.word	0x0801f48c
 800bda4:	0800d95d 	.word	0x0800d95d

0800bda8 <cmd_net_ip6_route_del>:
{
 800bda8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bdac:	460c      	mov	r4, r1
 800bdae:	4605      	mov	r5, r0
 800bdb0:	4616      	mov	r6, r2
	struct in6_addr prefix = { 0 };
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	2210      	movs	r2, #16
 800bdb6:	4668      	mov	r0, sp
 800bdb8:	f008 ff68 	bl	8014c8c <memset>
	if (argc != 3) {
 800bdbc:	2c03      	cmp	r4, #3
 800bdbe:	d00a      	beq.n	800bdd6 <cmd_net_ip6_route_del+0x2e>
		PR_ERROR("Correct usage: net route del <index> <destination>\n");
 800bdc0:	4a1a      	ldr	r2, [pc, #104]	; (800be2c <cmd_net_ip6_route_del+0x84>)
 800bdc2:	2101      	movs	r1, #1
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	f007 ff19 	bl	8013bfc <shell_fprintf>
		return -EINVAL;
 800bdca:	f06f 0415 	mvn.w	r4, #21
}
 800bdce:	4620      	mov	r0, r4
 800bdd0:	b004      	add	sp, #16
 800bdd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	idx = get_iface_idx(sh, argv[1]);
 800bdd6:	6871      	ldr	r1, [r6, #4]
 800bdd8:	4628      	mov	r0, r5
 800bdda:	f7ff fe45 	bl	800ba68 <get_iface_idx>
	if (idx < 0) {
 800bdde:	f1b0 0800 	subs.w	r8, r0, #0
 800bde2:	db09      	blt.n	800bdf8 <cmd_net_ip6_route_del+0x50>
	iface = net_if_get_by_index(idx);
 800bde4:	f00e f88d 	bl	8019f02 <net_if_get_by_index>
	if (!iface) {
 800bde8:	4607      	mov	r7, r0
 800bdea:	b940      	cbnz	r0, 800bdfe <cmd_net_ip6_route_del+0x56>
		PR_WARNING("No such interface in index %d\n", idx);
 800bdec:	4643      	mov	r3, r8
 800bdee:	4a10      	ldr	r2, [pc, #64]	; (800be30 <cmd_net_ip6_route_del+0x88>)
 800bdf0:	4621      	mov	r1, r4
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	f007 ff02 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800bdf8:	f06f 0407 	mvn.w	r4, #7
 800bdfc:	e7e7      	b.n	800bdce <cmd_net_ip6_route_del+0x26>
	if (net_addr_pton(AF_INET6, argv[2], &prefix)) {
 800bdfe:	466a      	mov	r2, sp
 800be00:	68b1      	ldr	r1, [r6, #8]
 800be02:	2002      	movs	r0, #2
 800be04:	f00e f891 	bl	8019f2a <net_addr_pton>
 800be08:	4604      	mov	r4, r0
 800be0a:	b130      	cbz	r0, 800be1a <cmd_net_ip6_route_del+0x72>
		PR_ERROR("Invalid address: %s\n", argv[2]);
 800be0c:	68b3      	ldr	r3, [r6, #8]
 800be0e:	2101      	movs	r1, #1
 800be10:	4a08      	ldr	r2, [pc, #32]	; (800be34 <cmd_net_ip6_route_del+0x8c>)
 800be12:	4628      	mov	r0, r5
 800be14:	f007 fef2 	bl	8013bfc <shell_fprintf>
 800be18:	e7d7      	b.n	800bdca <cmd_net_ip6_route_del+0x22>
	route = net_route_lookup(iface, &prefix);
 800be1a:	4669      	mov	r1, sp
 800be1c:	4638      	mov	r0, r7
 800be1e:	f7fd fbd1 	bl	80095c4 <net_route_lookup>
	if (route) {
 800be22:	2800      	cmp	r0, #0
 800be24:	d0d3      	beq.n	800bdce <cmd_net_ip6_route_del+0x26>
		net_route_del(route);
 800be26:	f7fd fc6d 	bl	8009704 <net_route_del>
 800be2a:	e7d0      	b.n	800bdce <cmd_net_ip6_route_del+0x26>
 800be2c:	0801f4ab 	.word	0x0801f4ab
 800be30:	0801f48c 	.word	0x0801f48c
 800be34:	0801f4df 	.word	0x0801f4df

0800be38 <cmd_net_ip6_route_add>:
{
 800be38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be3a:	b08b      	sub	sp, #44	; 0x2c
 800be3c:	460c      	mov	r4, r1
 800be3e:	4605      	mov	r5, r0
	struct in6_addr gw = {0};
 800be40:	2100      	movs	r1, #0
{
 800be42:	4616      	mov	r6, r2
	struct in6_addr gw = {0};
 800be44:	a802      	add	r0, sp, #8
 800be46:	2210      	movs	r2, #16
 800be48:	f008 ff20 	bl	8014c8c <memset>
	struct in6_addr prefix = {0};
 800be4c:	2210      	movs	r2, #16
 800be4e:	2100      	movs	r1, #0
 800be50:	a806      	add	r0, sp, #24
 800be52:	f008 ff1b 	bl	8014c8c <memset>
	if (argc != 4) {
 800be56:	2c04      	cmp	r4, #4
 800be58:	d009      	beq.n	800be6e <cmd_net_ip6_route_add+0x36>
		PR_ERROR("Correct usage: net route add <index> "
 800be5a:	4a23      	ldr	r2, [pc, #140]	; (800bee8 <cmd_net_ip6_route_add+0xb0>)
 800be5c:	2101      	movs	r1, #1
 800be5e:	4628      	mov	r0, r5
 800be60:	f007 fecc 	bl	8013bfc <shell_fprintf>
		return -EINVAL;
 800be64:	f06f 0415 	mvn.w	r4, #21
}
 800be68:	4620      	mov	r0, r4
 800be6a:	b00b      	add	sp, #44	; 0x2c
 800be6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	idx = get_iface_idx(sh, argv[1]);
 800be6e:	6871      	ldr	r1, [r6, #4]
 800be70:	4628      	mov	r0, r5
 800be72:	f7ff fdf9 	bl	800ba68 <get_iface_idx>
	if (idx < 0) {
 800be76:	1e04      	subs	r4, r0, #0
 800be78:	db09      	blt.n	800be8e <cmd_net_ip6_route_add+0x56>
	iface = net_if_get_by_index(idx);
 800be7a:	f00e f842 	bl	8019f02 <net_if_get_by_index>
	if (!iface) {
 800be7e:	4607      	mov	r7, r0
 800be80:	b940      	cbnz	r0, 800be94 <cmd_net_ip6_route_add+0x5c>
		PR_WARNING("No such interface in index %d\n", idx);
 800be82:	4623      	mov	r3, r4
 800be84:	4a19      	ldr	r2, [pc, #100]	; (800beec <cmd_net_ip6_route_add+0xb4>)
 800be86:	2103      	movs	r1, #3
 800be88:	4628      	mov	r0, r5
 800be8a:	f007 feb7 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800be8e:	f06f 0407 	mvn.w	r4, #7
 800be92:	e7e9      	b.n	800be68 <cmd_net_ip6_route_add+0x30>
	if (net_addr_pton(AF_INET6, argv[2], &prefix)) {
 800be94:	aa06      	add	r2, sp, #24
 800be96:	68b1      	ldr	r1, [r6, #8]
 800be98:	2002      	movs	r0, #2
 800be9a:	f00e f846 	bl	8019f2a <net_addr_pton>
 800be9e:	b130      	cbz	r0, 800beae <cmd_net_ip6_route_add+0x76>
		PR_ERROR("Invalid address: %s\n", argv[2]);
 800bea0:	68b3      	ldr	r3, [r6, #8]
 800bea2:	4a13      	ldr	r2, [pc, #76]	; (800bef0 <cmd_net_ip6_route_add+0xb8>)
		PR_ERROR("Invalid gateway: %s\n", argv[3]);
 800bea4:	2101      	movs	r1, #1
 800bea6:	4628      	mov	r0, r5
 800bea8:	f007 fea8 	bl	8013bfc <shell_fprintf>
 800beac:	e7da      	b.n	800be64 <cmd_net_ip6_route_add+0x2c>
	if (net_addr_pton(AF_INET6, argv[3], &gw)) {
 800beae:	aa02      	add	r2, sp, #8
 800beb0:	68f1      	ldr	r1, [r6, #12]
 800beb2:	2002      	movs	r0, #2
 800beb4:	f00e f839 	bl	8019f2a <net_addr_pton>
 800beb8:	4604      	mov	r4, r0
 800beba:	b110      	cbz	r0, 800bec2 <cmd_net_ip6_route_add+0x8a>
		PR_ERROR("Invalid gateway: %s\n", argv[3]);
 800bebc:	68f3      	ldr	r3, [r6, #12]
 800bebe:	4a0d      	ldr	r2, [pc, #52]	; (800bef4 <cmd_net_ip6_route_add+0xbc>)
 800bec0:	e7f0      	b.n	800bea4 <cmd_net_ip6_route_add+0x6c>
	route = net_route_add(iface, &prefix, NET_IPV6_DEFAULT_PREFIX_LEN,
 800bec2:	f04f 33ff 	mov.w	r3, #4294967295
 800bec6:	9001      	str	r0, [sp, #4]
 800bec8:	2240      	movs	r2, #64	; 0x40
 800beca:	a906      	add	r1, sp, #24
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	4638      	mov	r0, r7
 800bed0:	ab02      	add	r3, sp, #8
 800bed2:	f7fd fcd9 	bl	8009888 <net_route_add>
	if (route == NULL) {
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d1c6      	bne.n	800be68 <cmd_net_ip6_route_add+0x30>
		PR_ERROR("Failed to add route\n");
 800beda:	4a07      	ldr	r2, [pc, #28]	; (800bef8 <cmd_net_ip6_route_add+0xc0>)
 800bedc:	2101      	movs	r1, #1
 800bede:	4628      	mov	r0, r5
 800bee0:	f007 fe8c 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800bee4:	e7d3      	b.n	800be8e <cmd_net_ip6_route_add+0x56>
 800bee6:	bf00      	nop
 800bee8:	0801f4f4 	.word	0x0801f4f4
 800beec:	0801f48c 	.word	0x0801f48c
 800bef0:	0801f4df 	.word	0x0801f4df
 800bef4:	0801f532 	.word	0x0801f532
 800bef8:	0801f547 	.word	0x0801f547

0800befc <cmd_net_mem>:
{
 800befc:	b510      	push	{r4, lr}
 800befe:	b086      	sub	sp, #24
 800bf00:	4604      	mov	r4, r0
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
 800bf02:	ab05      	add	r3, sp, #20
 800bf04:	aa04      	add	r2, sp, #16
 800bf06:	a903      	add	r1, sp, #12
 800bf08:	a802      	add	r0, sp, #8
 800bf0a:	f7fb f80f 	bl	8006f2c <net_pkt_get_info>
	PR("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
 800bf0e:	2380      	movs	r3, #128	; 0x80
 800bf10:	4620      	mov	r0, r4
 800bf12:	4a1c      	ldr	r2, [pc, #112]	; (800bf84 <cmd_net_mem+0x88>)
 800bf14:	2108      	movs	r1, #8
 800bf16:	f007 fe71 	bl	8013bfc <shell_fprintf>
	PR("Network buffer pools:\n");
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	4a1a      	ldr	r2, [pc, #104]	; (800bf88 <cmd_net_mem+0x8c>)
 800bf1e:	2108      	movs	r1, #8
 800bf20:	f007 fe6c 	bl	8013bfc <shell_fprintf>
	PR("Address\t\tTotal\tName\n");
 800bf24:	4620      	mov	r0, r4
 800bf26:	4a19      	ldr	r2, [pc, #100]	; (800bf8c <cmd_net_mem+0x90>)
 800bf28:	2108      	movs	r1, #8
 800bf2a:	f007 fe67 	bl	8013bfc <shell_fprintf>
	PR("%p\t%d\tRX\n", rx, rx->num_blocks);
 800bf2e:	9b02      	ldr	r3, [sp, #8]
 800bf30:	4620      	mov	r0, r4
 800bf32:	2108      	movs	r1, #8
 800bf34:	689a      	ldr	r2, [r3, #8]
 800bf36:	9200      	str	r2, [sp, #0]
 800bf38:	4a15      	ldr	r2, [pc, #84]	; (800bf90 <cmd_net_mem+0x94>)
 800bf3a:	f007 fe5f 	bl	8013bfc <shell_fprintf>
	PR("%p\t%d\tTX\n", tx, tx->num_blocks);
 800bf3e:	9b03      	ldr	r3, [sp, #12]
 800bf40:	4620      	mov	r0, r4
 800bf42:	2108      	movs	r1, #8
 800bf44:	689a      	ldr	r2, [r3, #8]
 800bf46:	9200      	str	r2, [sp, #0]
 800bf48:	4a12      	ldr	r2, [pc, #72]	; (800bf94 <cmd_net_mem+0x98>)
 800bf4a:	f007 fe57 	bl	8013bfc <shell_fprintf>
	PR("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
 800bf4e:	9b04      	ldr	r3, [sp, #16]
 800bf50:	4620      	mov	r0, r4
 800bf52:	2108      	movs	r1, #8
 800bf54:	8b1a      	ldrh	r2, [r3, #24]
 800bf56:	9200      	str	r2, [sp, #0]
 800bf58:	4a0f      	ldr	r2, [pc, #60]	; (800bf98 <cmd_net_mem+0x9c>)
 800bf5a:	f007 fe4f 	bl	8013bfc <shell_fprintf>
	PR("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
 800bf5e:	9b05      	ldr	r3, [sp, #20]
 800bf60:	4620      	mov	r0, r4
 800bf62:	2108      	movs	r1, #8
 800bf64:	8b1a      	ldrh	r2, [r3, #24]
 800bf66:	9200      	str	r2, [sp, #0]
 800bf68:	4a0c      	ldr	r2, [pc, #48]	; (800bf9c <cmd_net_mem+0xa0>)
 800bf6a:	f007 fe47 	bl	8013bfc <shell_fprintf>
	PR_INFO("Set %s to enable %s support.\n",
 800bf6e:	4b0c      	ldr	r3, [pc, #48]	; (800bfa0 <cmd_net_mem+0xa4>)
 800bf70:	4620      	mov	r0, r4
 800bf72:	4a0c      	ldr	r2, [pc, #48]	; (800bfa4 <cmd_net_mem+0xa8>)
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	2102      	movs	r1, #2
 800bf78:	4b0b      	ldr	r3, [pc, #44]	; (800bfa8 <cmd_net_mem+0xac>)
 800bf7a:	f007 fe3f 	bl	8013bfc <shell_fprintf>
}
 800bf7e:	2000      	movs	r0, #0
 800bf80:	b006      	add	sp, #24
 800bf82:	bd10      	pop	{r4, pc}
 800bf84:	0801f55c 	.word	0x0801f55c
 800bf88:	0801f576 	.word	0x0801f576
 800bf8c:	0801f58d 	.word	0x0801f58d
 800bf90:	0801f5a2 	.word	0x0801f5a2
 800bf94:	0801f5ac 	.word	0x0801f5ac
 800bf98:	0801f5b6 	.word	0x0801f5b6
 800bf9c:	0801f5c5 	.word	0x0801f5c5
 800bfa0:	0801f5ee 	.word	0x0801f5ee
 800bfa4:	0801edaa 	.word	0x0801edaa
 800bfa8:	0801f5d4 	.word	0x0801f5d4

0800bfac <ping_cleanup>:
{
 800bfac:	b510      	push	{r4, lr}
 800bfae:	4604      	mov	r4, r0
	net_icmpv6_unregister_handler(&ping6_handler);
 800bfb0:	4805      	ldr	r0, [pc, #20]	; (800bfc8 <ping_cleanup+0x1c>)
 800bfb2:	f7fc f923 	bl	80081fc <net_icmpv6_unregister_handler>
	net_icmpv4_unregister_handler(&ping4_handler);
 800bfb6:	4805      	ldr	r0, [pc, #20]	; (800bfcc <ping_cleanup+0x20>)
 800bfb8:	f7fc f8b6 	bl	8008128 <net_icmpv4_unregister_handler>
	shell_set_bypass(ctx->sh, NULL);
 800bfbc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bfbe:	2100      	movs	r1, #0
}
 800bfc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_set_bypass(ctx->sh, NULL);
 800bfc4:	f007 be6c 	b.w	8013ca0 <shell_set_bypass>
 800bfc8:	24000f54 	.word	0x24000f54
 800bfcc:	24000f48 	.word	0x24000f48

0800bfd0 <ping_done>:
{
 800bfd0:	b510      	push	{r4, lr}
 800bfd2:	4604      	mov	r4, r0
	k_work_cancel_delayable(&ctx->work);
 800bfd4:	f00f fda4 	bl	801bb20 <k_work_cancel_delayable>
	ping_cleanup(ctx);
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f7ff ffe7 	bl	800bfac <ping_cleanup>
	shell_fprintf(ctx->sh, SHELL_NORMAL, "");
 800bfde:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bfe0:	4a02      	ldr	r2, [pc, #8]	; (800bfec <ping_done+0x1c>)
 800bfe2:	2108      	movs	r1, #8
}
 800bfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_fprintf(ctx->sh, SHELL_NORMAL, "");
 800bfe8:	f007 be08 	b.w	8013bfc <shell_fprintf>
 800bfec:	0801ffee 	.word	0x0801ffee

0800bff0 <handle_ipv4_echo_reply>:
{
 800bff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff4:	b08e      	sub	sp, #56	; 0x38
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 800bff6:	2300      	movs	r3, #0
 800bff8:	2404      	movs	r4, #4
{
 800bffa:	460e      	mov	r6, r1
	icmp_echo = (struct net_icmpv4_echo_req *)net_pkt_get_data(pkt,
 800bffc:	a908      	add	r1, sp, #32
{
 800bffe:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 800c000:	e9cd 3408 	strd	r3, r4, [sp, #32]
	char time_buf[16] = { 0 };
 800c004:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800c008:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
	icmp_echo = (struct net_icmpv4_echo_req *)net_pkt_get_data(pkt,
 800c00c:	f00b fc8c 	bl	8017928 <net_pkt_get_data>
	if (icmp_echo == NULL) {
 800c010:	4607      	mov	r7, r0
 800c012:	b918      	cbnz	r0, 800c01c <handle_ipv4_echo_reply+0x2c>
		return -NET_DROP;
 800c014:	20fe      	movs	r0, #254	; 0xfe
}
 800c016:	b00e      	add	sp, #56	; 0x38
 800c018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	net_pkt_skip(pkt, sizeof(*icmp_echo));
 800c01c:	4621      	mov	r1, r4
 800c01e:	4628      	mov	r0, r5
 800c020:	f00b fa55 	bl	80174ce <net_pkt_skip>
	if (net_pkt_remaining_data(pkt) >= sizeof(uint32_t)) {
 800c024:	4628      	mov	r0, r5
 800c026:	f00b fb73 	bl	8017710 <net_pkt_remaining_data>
 800c02a:	2803      	cmp	r0, #3
 800c02c:	d92f      	bls.n	800c08e <handle_ipv4_echo_reply+0x9e>
		if (net_pkt_read_be32(pkt, &cycles)) {
 800c02e:	a907      	add	r1, sp, #28
 800c030:	4628      	mov	r0, r5
 800c032:	f00b fb0c 	bl	801764e <net_pkt_read_be32>
 800c036:	4604      	mov	r4, r0
 800c038:	2800      	cmp	r0, #0
 800c03a:	d1eb      	bne.n	800c014 <handle_ipv4_echo_reply+0x24>
 800c03c:	f004 fa22 	bl	8010484 <sys_clock_cycle_get_32>
		cycles = k_cycle_get_32() - cycles;
 800c040:	9b07      	ldr	r3, [sp, #28]
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
 800c042:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800c0f8 <handle_ipv4_echo_reply+0x108>
 800c046:	4621      	mov	r1, r4
 800c048:	eba0 0803 	sub.w	r8, r0, r3
 800c04c:	4a2b      	ldr	r2, [pc, #172]	; (800c0fc <handle_ipv4_echo_reply+0x10c>)
 800c04e:	2300      	movs	r3, #0
 800c050:	4640      	mov	r0, r8
 800c052:	f8cd 801c 	str.w	r8, [sp, #28]
 800c056:	f7f4 fbed 	bl	8000834 <__aeabi_uldivmod>
 800c05a:	469c      	mov	ip, r3
 800c05c:	fba2 0109 	umull	r0, r1, r2, r9
 800c060:	2300      	movs	r3, #0
 800c062:	4a26      	ldr	r2, [pc, #152]	; (800c0fc <handle_ipv4_echo_reply+0x10c>)
 800c064:	fb09 110c 	mla	r1, r9, ip, r1
 800c068:	f7f4 fbe4 	bl	8000834 <__aeabi_uldivmod>
 800c06c:	4682      	mov	sl, r0
 800c06e:	4a23      	ldr	r2, [pc, #140]	; (800c0fc <handle_ipv4_echo_reply+0x10c>)
 800c070:	2300      	movs	r3, #0
 800c072:	4640      	mov	r0, r8
 800c074:	4621      	mov	r1, r4
 800c076:	f7f4 fbdd 	bl	8000834 <__aeabi_uldivmod>
		snprintf(time_buf, sizeof(time_buf),
 800c07a:	4b21      	ldr	r3, [pc, #132]	; (800c100 <handle_ipv4_echo_reply+0x110>)
 800c07c:	fb00 a909 	mla	r9, r0, r9, sl
 800c080:	4a20      	ldr	r2, [pc, #128]	; (800c104 <handle_ipv4_echo_reply+0x114>)
 800c082:	2110      	movs	r1, #16
 800c084:	a80a      	add	r0, sp, #40	; 0x28
 800c086:	fbb9 f3f3 	udiv	r3, r9, r3
 800c08a:	f7f8 f82b 	bl	80040e4 <snprintf>
	PR_SHELL(ping_ctx.sh, "%d bytes from %s to %s: icmp_seq=%d ttl=%d "
 800c08e:	8874      	ldrh	r4, [r6, #2]
 800c090:	f106 010c 	add.w	r1, r6, #12
 800c094:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 800c096:	2001      	movs	r0, #1
 800c098:	ba64      	rev16	r4, r4
 800c09a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800c108 <handle_ipv4_echo_reply+0x118>
 800c09e:	b2a4      	uxth	r4, r4
 800c0a0:	f8d8 9048 	ldr.w	r9, [r8, #72]	; 0x48
 800c0a4:	1ae4      	subs	r4, r4, r3
 800c0a6:	f7fa fb81 	bl	80067ac <net_sprint_addr>
 800c0aa:	f106 0110 	add.w	r1, r6, #16
 800c0ae:	4682      	mov	sl, r0
 800c0b0:	2001      	movs	r0, #1
 800c0b2:	3c04      	subs	r4, #4
 800c0b4:	f7fa fb7a 	bl	80067ac <net_sprint_addr>
 800c0b8:	ab0a      	add	r3, sp, #40	; 0x28
 800c0ba:	4a14      	ldr	r2, [pc, #80]	; (800c10c <handle_ipv4_echo_reply+0x11c>)
 800c0bc:	2108      	movs	r1, #8
 800c0be:	9304      	str	r3, [sp, #16]
 800c0c0:	7a33      	ldrb	r3, [r6, #8]
 800c0c2:	9303      	str	r3, [sp, #12]
 800c0c4:	887b      	ldrh	r3, [r7, #2]
 800c0c6:	f8cd a000 	str.w	sl, [sp]
 800c0ca:	ba5b      	rev16	r3, r3
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800c0d2:	4623      	mov	r3, r4
 800c0d4:	4648      	mov	r0, r9
 800c0d6:	f007 fd91 	bl	8013bfc <shell_fprintf>
	if (ntohs(icmp_echo->sequence) == ping_ctx.count) {
 800c0da:	887b      	ldrh	r3, [r7, #2]
 800c0dc:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 800c0e0:	ba5b      	rev16	r3, r3
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d102      	bne.n	800c0ee <handle_ipv4_echo_reply+0xfe>
		ping_done(&ping_ctx);
 800c0e8:	4640      	mov	r0, r8
 800c0ea:	f7ff ff71 	bl	800bfd0 <ping_done>
	net_pkt_unref(pkt);
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	f00b f8f7 	bl	80172e2 <net_pkt_unref>
	return NET_OK;
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	e78e      	b.n	800c016 <handle_ipv4_echo_reply+0x26>
 800c0f8:	3b9aca00 	.word	0x3b9aca00
 800c0fc:	05b8d800 	.word	0x05b8d800
 800c100:	000f4240 	.word	0x000f4240
 800c104:	0801f601 	.word	0x0801f601
 800c108:	240019d0 	.word	0x240019d0
 800c10c:	0801f60c 	.word	0x0801f60c

0800c110 <cmd_net_nbr_rm>:
{
 800c110:	b530      	push	{r4, r5, lr}
	if (!argv[1]) {
 800c112:	6851      	ldr	r1, [r2, #4]
{
 800c114:	b085      	sub	sp, #20
 800c116:	4604      	mov	r4, r0
 800c118:	4615      	mov	r5, r2
	if (!argv[1]) {
 800c11a:	b939      	cbnz	r1, 800c12c <cmd_net_nbr_rm+0x1c>
		PR_WARNING("Neighbor IPv6 address missing.\n");
 800c11c:	4a15      	ldr	r2, [pc, #84]	; (800c174 <cmd_net_nbr_rm+0x64>)
 800c11e:	2103      	movs	r1, #3
 800c120:	f007 fd6c 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800c124:	f06f 0007 	mvn.w	r0, #7
}
 800c128:	b005      	add	sp, #20
 800c12a:	bd30      	pop	{r4, r5, pc}
	ret = net_addr_pton(AF_INET6, argv[1], &addr);
 800c12c:	466a      	mov	r2, sp
 800c12e:	2002      	movs	r0, #2
 800c130:	f00d fefb 	bl	8019f2a <net_addr_pton>
	if (ret < 0) {
 800c134:	2800      	cmp	r0, #0
 800c136:	da06      	bge.n	800c146 <cmd_net_nbr_rm+0x36>
		PR_WARNING("Cannot parse '%s'\n", argv[1]);
 800c138:	686b      	ldr	r3, [r5, #4]
 800c13a:	4a0f      	ldr	r2, [pc, #60]	; (800c178 <cmd_net_nbr_rm+0x68>)
		PR_WARNING("Cannot remove neighbor %s\n",
 800c13c:	2103      	movs	r1, #3
 800c13e:	4620      	mov	r0, r4
 800c140:	f007 fd5c 	bl	8013bfc <shell_fprintf>
 800c144:	e7ee      	b.n	800c124 <cmd_net_nbr_rm+0x14>
	if (!net_ipv6_nbr_rm(NULL, &addr)) {
 800c146:	4669      	mov	r1, sp
 800c148:	2000      	movs	r0, #0
 800c14a:	f7fc fc9b 	bl	8008a84 <net_ipv6_nbr_rm>
		PR_WARNING("Cannot remove neighbor %s\n",
 800c14e:	4669      	mov	r1, sp
	if (!net_ipv6_nbr_rm(NULL, &addr)) {
 800c150:	b928      	cbnz	r0, 800c15e <cmd_net_nbr_rm+0x4e>
		PR_WARNING("Cannot remove neighbor %s\n",
 800c152:	2002      	movs	r0, #2
 800c154:	f7fa fb2a 	bl	80067ac <net_sprint_addr>
 800c158:	4a08      	ldr	r2, [pc, #32]	; (800c17c <cmd_net_nbr_rm+0x6c>)
 800c15a:	4603      	mov	r3, r0
 800c15c:	e7ee      	b.n	800c13c <cmd_net_nbr_rm+0x2c>
		PR("Neighbor %s removed.\n", net_sprint_ipv6_addr(&addr));
 800c15e:	2002      	movs	r0, #2
 800c160:	f7fa fb24 	bl	80067ac <net_sprint_addr>
 800c164:	4a06      	ldr	r2, [pc, #24]	; (800c180 <cmd_net_nbr_rm+0x70>)
 800c166:	4603      	mov	r3, r0
 800c168:	2108      	movs	r1, #8
 800c16a:	4620      	mov	r0, r4
 800c16c:	f007 fd46 	bl	8013bfc <shell_fprintf>
	return 0;
 800c170:	2000      	movs	r0, #0
 800c172:	e7d9      	b.n	800c128 <cmd_net_nbr_rm+0x18>
 800c174:	0801f63b 	.word	0x0801f63b
 800c178:	0801f65b 	.word	0x0801f65b
 800c17c:	0801f66e 	.word	0x0801f66e
 800c180:	0801f689 	.word	0x0801f689

0800c184 <cmd_net_ip_del>:
	if (argc != 3) {
 800c184:	2903      	cmp	r1, #3
{
 800c186:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c18a:	4606      	mov	r6, r0
 800c18c:	460c      	mov	r4, r1
 800c18e:	4615      	mov	r5, r2
	if (argc != 3) {
 800c190:	d009      	beq.n	800c1a6 <cmd_net_ip_del+0x22>
		PR_ERROR("Correct usage: net ipv4 del <index> <address>");
 800c192:	4a1a      	ldr	r2, [pc, #104]	; (800c1fc <cmd_net_ip_del+0x78>)
 800c194:	2101      	movs	r1, #1
 800c196:	f007 fd31 	bl	8013bfc <shell_fprintf>
		return -EINVAL;
 800c19a:	f06f 0415 	mvn.w	r4, #21
}
 800c19e:	4620      	mov	r0, r4
 800c1a0:	b002      	add	sp, #8
 800c1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	idx = get_iface_idx(sh, argv[1]);
 800c1a6:	6851      	ldr	r1, [r2, #4]
 800c1a8:	f7ff fc5e 	bl	800ba68 <get_iface_idx>
	if (idx < 0) {
 800c1ac:	f1b0 0800 	subs.w	r8, r0, #0
 800c1b0:	db09      	blt.n	800c1c6 <cmd_net_ip_del+0x42>
	iface = net_if_get_by_index(idx);
 800c1b2:	f00d fea6 	bl	8019f02 <net_if_get_by_index>
	if (!iface) {
 800c1b6:	4607      	mov	r7, r0
 800c1b8:	b940      	cbnz	r0, 800c1cc <cmd_net_ip_del+0x48>
		PR_WARNING("No such interface in index %d\n", idx);
 800c1ba:	4643      	mov	r3, r8
 800c1bc:	4a10      	ldr	r2, [pc, #64]	; (800c200 <cmd_net_ip_del+0x7c>)
 800c1be:	4621      	mov	r1, r4
		PR_ERROR("Failed to delete %s\n", argv[2]);
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	f007 fd1b 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800c1c6:	f06f 0407 	mvn.w	r4, #7
 800c1ca:	e7e8      	b.n	800c19e <cmd_net_ip_del+0x1a>
	if (net_addr_pton(AF_INET, argv[2], &addr)) {
 800c1cc:	aa01      	add	r2, sp, #4
 800c1ce:	68a9      	ldr	r1, [r5, #8]
 800c1d0:	2001      	movs	r0, #1
 800c1d2:	f00d feaa 	bl	8019f2a <net_addr_pton>
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	b130      	cbz	r0, 800c1e8 <cmd_net_ip_del+0x64>
		PR_ERROR("Invalid address: %s\n", argv[2]);
 800c1da:	68ab      	ldr	r3, [r5, #8]
 800c1dc:	2101      	movs	r1, #1
 800c1de:	4a09      	ldr	r2, [pc, #36]	; (800c204 <cmd_net_ip_del+0x80>)
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	f007 fd0b 	bl	8013bfc <shell_fprintf>
 800c1e6:	e7d8      	b.n	800c19a <cmd_net_ip_del+0x16>
	if (!net_if_ipv4_addr_rm(iface, &addr)) {
 800c1e8:	a901      	add	r1, sp, #4
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	f7f9 ffc4 	bl	8006178 <net_if_ipv4_addr_rm>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d1d4      	bne.n	800c19e <cmd_net_ip_del+0x1a>
		PR_ERROR("Failed to delete %s\n", argv[2]);
 800c1f4:	68ab      	ldr	r3, [r5, #8]
 800c1f6:	2101      	movs	r1, #1
 800c1f8:	4a03      	ldr	r2, [pc, #12]	; (800c208 <cmd_net_ip_del+0x84>)
 800c1fa:	e7e1      	b.n	800c1c0 <cmd_net_ip_del+0x3c>
 800c1fc:	0801f69f 	.word	0x0801f69f
 800c200:	0801f48c 	.word	0x0801f48c
 800c204:	0801f4df 	.word	0x0801f4df
 800c208:	0801f6cd 	.word	0x0801f6cd

0800c20c <cmd_net_ip_add>:
	if (argc != 4) {
 800c20c:	2904      	cmp	r1, #4
{
 800c20e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c210:	4607      	mov	r7, r0
 800c212:	4615      	mov	r5, r2
	if (argc != 4) {
 800c214:	d008      	beq.n	800c228 <cmd_net_ip_add+0x1c>
		PR_ERROR("Correct usage: net ipv4 add <index> <address> <netmask>\n");
 800c216:	4a1e      	ldr	r2, [pc, #120]	; (800c290 <cmd_net_ip_add+0x84>)
 800c218:	2101      	movs	r1, #1
 800c21a:	f007 fcef 	bl	8013bfc <shell_fprintf>
		return -EINVAL;
 800c21e:	f06f 0415 	mvn.w	r4, #21
}
 800c222:	4620      	mov	r0, r4
 800c224:	b003      	add	sp, #12
 800c226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	idx = get_iface_idx(sh, argv[1]);
 800c228:	6851      	ldr	r1, [r2, #4]
 800c22a:	f7ff fc1d 	bl	800ba68 <get_iface_idx>
	if (idx < 0) {
 800c22e:	1e04      	subs	r4, r0, #0
 800c230:	db09      	blt.n	800c246 <cmd_net_ip_add+0x3a>
	iface = net_if_get_by_index(idx);
 800c232:	f00d fe66 	bl	8019f02 <net_if_get_by_index>
	if (!iface) {
 800c236:	4606      	mov	r6, r0
 800c238:	b940      	cbnz	r0, 800c24c <cmd_net_ip_add+0x40>
		PR_WARNING("No such interface in index %d\n", idx);
 800c23a:	4623      	mov	r3, r4
 800c23c:	4a15      	ldr	r2, [pc, #84]	; (800c294 <cmd_net_ip_add+0x88>)
 800c23e:	2103      	movs	r1, #3
 800c240:	4638      	mov	r0, r7
 800c242:	f007 fcdb 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800c246:	f06f 0407 	mvn.w	r4, #7
 800c24a:	e7ea      	b.n	800c222 <cmd_net_ip_add+0x16>
	if (net_addr_pton(AF_INET, argv[2], &addr)) {
 800c24c:	aa01      	add	r2, sp, #4
 800c24e:	68a9      	ldr	r1, [r5, #8]
 800c250:	2001      	movs	r0, #1
 800c252:	f00d fe6a 	bl	8019f2a <net_addr_pton>
 800c256:	4603      	mov	r3, r0
 800c258:	b130      	cbz	r0, 800c268 <cmd_net_ip_add+0x5c>
		PR_ERROR("Invalid address: %s\n", argv[2]);
 800c25a:	68ab      	ldr	r3, [r5, #8]
 800c25c:	4a0e      	ldr	r2, [pc, #56]	; (800c298 <cmd_net_ip_add+0x8c>)
		PR_ERROR("Invalid netmask: %s", argv[3]);
 800c25e:	2101      	movs	r1, #1
 800c260:	4638      	mov	r0, r7
 800c262:	f007 fccb 	bl	8013bfc <shell_fprintf>
 800c266:	e7da      	b.n	800c21e <cmd_net_ip_add+0x12>
	net_if_ipv4_addr_add(iface, &addr, NET_ADDR_MANUAL, 0);
 800c268:	2203      	movs	r2, #3
 800c26a:	a901      	add	r1, sp, #4
 800c26c:	4630      	mov	r0, r6
 800c26e:	f7f9 ff33 	bl	80060d8 <net_if_ipv4_addr_add>
	if (net_addr_pton(AF_INET, argv[3], &addr)) {
 800c272:	aa01      	add	r2, sp, #4
 800c274:	68e9      	ldr	r1, [r5, #12]
 800c276:	2001      	movs	r0, #1
 800c278:	f00d fe57 	bl	8019f2a <net_addr_pton>
 800c27c:	4604      	mov	r4, r0
 800c27e:	b110      	cbz	r0, 800c286 <cmd_net_ip_add+0x7a>
		PR_ERROR("Invalid netmask: %s", argv[3]);
 800c280:	68eb      	ldr	r3, [r5, #12]
 800c282:	4a06      	ldr	r2, [pc, #24]	; (800c29c <cmd_net_ip_add+0x90>)
 800c284:	e7eb      	b.n	800c25e <cmd_net_ip_add+0x52>
	net_if_ipv4_set_netmask(iface, &addr);
 800c286:	a901      	add	r1, sp, #4
 800c288:	4630      	mov	r0, r6
 800c28a:	f009 fe49 	bl	8015f20 <net_if_ipv4_set_netmask>
	return 0;
 800c28e:	e7c8      	b.n	800c222 <cmd_net_ip_add+0x16>
 800c290:	0801f6e2 	.word	0x0801f6e2
 800c294:	0801f48c 	.word	0x0801f48c
 800c298:	0801f4df 	.word	0x0801f4df
 800c29c:	0801f71b 	.word	0x0801f71b

0800c2a0 <cmd_net_ip6_del>:
	if (argc != 3) {
 800c2a0:	2903      	cmp	r1, #3
{
 800c2a2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	460c      	mov	r4, r1
 800c2aa:	4615      	mov	r5, r2
	if (argc != 3) {
 800c2ac:	d009      	beq.n	800c2c2 <cmd_net_ip6_del+0x22>
		PR_ERROR("Correct usage: net ipv6 del <index> <address>\n");
 800c2ae:	4a1d      	ldr	r2, [pc, #116]	; (800c324 <cmd_net_ip6_del+0x84>)
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	f007 fca3 	bl	8013bfc <shell_fprintf>
		return -EINVAL;
 800c2b6:	f06f 0415 	mvn.w	r4, #21
}
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	b004      	add	sp, #16
 800c2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	idx = get_iface_idx(sh, argv[1]);
 800c2c2:	6851      	ldr	r1, [r2, #4]
 800c2c4:	f7ff fbd0 	bl	800ba68 <get_iface_idx>
	if (idx < 0) {
 800c2c8:	f1b0 0800 	subs.w	r8, r0, #0
 800c2cc:	db09      	blt.n	800c2e2 <cmd_net_ip6_del+0x42>
	iface = net_if_get_by_index(idx);
 800c2ce:	f00d fe18 	bl	8019f02 <net_if_get_by_index>
	if (!iface) {
 800c2d2:	4607      	mov	r7, r0
 800c2d4:	b940      	cbnz	r0, 800c2e8 <cmd_net_ip6_del+0x48>
		PR_WARNING("No such interface in index %d\n", idx);
 800c2d6:	4643      	mov	r3, r8
 800c2d8:	4a13      	ldr	r2, [pc, #76]	; (800c328 <cmd_net_ip6_del+0x88>)
 800c2da:	4621      	mov	r1, r4
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f007 fc8d 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800c2e2:	f06f 0407 	mvn.w	r4, #7
 800c2e6:	e7e8      	b.n	800c2ba <cmd_net_ip6_del+0x1a>
	if (net_addr_pton(AF_INET6, argv[2], &addr)) {
 800c2e8:	466a      	mov	r2, sp
 800c2ea:	68a9      	ldr	r1, [r5, #8]
 800c2ec:	2002      	movs	r0, #2
 800c2ee:	f00d fe1c 	bl	8019f2a <net_addr_pton>
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	b130      	cbz	r0, 800c304 <cmd_net_ip6_del+0x64>
		PR_ERROR("Invalid address: %s\n", argv[2]);
 800c2f6:	68ab      	ldr	r3, [r5, #8]
 800c2f8:	2101      	movs	r1, #1
 800c2fa:	4a0c      	ldr	r2, [pc, #48]	; (800c32c <cmd_net_ip6_del+0x8c>)
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f007 fc7d 	bl	8013bfc <shell_fprintf>
 800c302:	e7d8      	b.n	800c2b6 <cmd_net_ip6_del+0x16>
	if (!net_if_ipv6_addr_rm(iface, &addr)) {
 800c304:	4669      	mov	r1, sp
 800c306:	4638      	mov	r0, r7
 800c308:	f7f9 fa92 	bl	8005830 <net_if_ipv6_addr_rm>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d1d4      	bne.n	800c2ba <cmd_net_ip6_del+0x1a>
		PR_ERROR("Failed to delete %s\n", argv[2]);
 800c310:	68ab      	ldr	r3, [r5, #8]
 800c312:	2101      	movs	r1, #1
 800c314:	4a06      	ldr	r2, [pc, #24]	; (800c330 <cmd_net_ip6_del+0x90>)
 800c316:	4630      	mov	r0, r6
		return -1;
 800c318:	f04f 34ff 	mov.w	r4, #4294967295
		PR_ERROR("Failed to delete %s\n", argv[2]);
 800c31c:	f007 fc6e 	bl	8013bfc <shell_fprintf>
		return -1;
 800c320:	e7cb      	b.n	800c2ba <cmd_net_ip6_del+0x1a>
 800c322:	bf00      	nop
 800c324:	0801f72f 	.word	0x0801f72f
 800c328:	0801f48c 	.word	0x0801f48c
 800c32c:	0801f4df 	.word	0x0801f4df
 800c330:	0801f6cd 	.word	0x0801f6cd

0800c334 <cmd_net_ip6_add>:
	if (argc != 3) {
 800c334:	2903      	cmp	r1, #3
{
 800c336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c33a:	4606      	mov	r6, r0
 800c33c:	b086      	sub	sp, #24
 800c33e:	4688      	mov	r8, r1
 800c340:	4615      	mov	r5, r2
	if (argc != 3) {
 800c342:	d006      	beq.n	800c352 <cmd_net_ip6_add+0x1e>
		PR_ERROR("Correct usage: net ipv6 add <index> <address>\n");
 800c344:	4a1e      	ldr	r2, [pc, #120]	; (800c3c0 <cmd_net_ip6_add+0x8c>)
 800c346:	2101      	movs	r1, #1
 800c348:	f007 fc58 	bl	8013bfc <shell_fprintf>
		return -EINVAL;
 800c34c:	f06f 0415 	mvn.w	r4, #21
 800c350:	e010      	b.n	800c374 <cmd_net_ip6_add+0x40>
	idx = get_iface_idx(sh, argv[1]);
 800c352:	6851      	ldr	r1, [r2, #4]
 800c354:	f7ff fb88 	bl	800ba68 <get_iface_idx>
	if (idx < 0) {
 800c358:	1e04      	subs	r4, r0, #0
 800c35a:	db2d      	blt.n	800c3b8 <cmd_net_ip6_add+0x84>
	iface = net_if_get_by_index(idx);
 800c35c:	f00d fdd1 	bl	8019f02 <net_if_get_by_index>
	if (!iface) {
 800c360:	4607      	mov	r7, r0
 800c362:	b958      	cbnz	r0, 800c37c <cmd_net_ip6_add+0x48>
		PR_WARNING("No such interface in index %d\n", idx);
 800c364:	4623      	mov	r3, r4
		return -ENOENT;
 800c366:	f06f 0401 	mvn.w	r4, #1
		PR_WARNING("No such interface in index %d\n", idx);
 800c36a:	4a16      	ldr	r2, [pc, #88]	; (800c3c4 <cmd_net_ip6_add+0x90>)
 800c36c:	4641      	mov	r1, r8
 800c36e:	4630      	mov	r0, r6
 800c370:	f007 fc44 	bl	8013bfc <shell_fprintf>
}
 800c374:	4620      	mov	r0, r4
 800c376:	b006      	add	sp, #24
 800c378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (net_addr_pton(AF_INET6, argv[2], &addr)) {
 800c37c:	aa02      	add	r2, sp, #8
 800c37e:	68a9      	ldr	r1, [r5, #8]
 800c380:	2002      	movs	r0, #2
 800c382:	f00d fdd2 	bl	8019f2a <net_addr_pton>
 800c386:	4604      	mov	r4, r0
 800c388:	b130      	cbz	r0, 800c398 <cmd_net_ip6_add+0x64>
		PR_ERROR("Invalid address: %s\n", argv[2]);
 800c38a:	68ab      	ldr	r3, [r5, #8]
 800c38c:	2101      	movs	r1, #1
 800c38e:	4a0e      	ldr	r2, [pc, #56]	; (800c3c8 <cmd_net_ip6_add+0x94>)
 800c390:	4630      	mov	r0, r6
 800c392:	f007 fc33 	bl	8013bfc <shell_fprintf>
 800c396:	e7d9      	b.n	800c34c <cmd_net_ip6_add+0x18>
	if (!net_if_ipv6_addr_add(iface, &addr, NET_ADDR_MANUAL, 0)) {
 800c398:	4603      	mov	r3, r0
 800c39a:	4642      	mov	r2, r8
 800c39c:	a902      	add	r1, sp, #8
 800c39e:	4638      	mov	r0, r7
 800c3a0:	f7f9 f8c2 	bl	8005528 <net_if_ipv6_addr_add>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d1e5      	bne.n	800c374 <cmd_net_ip6_add+0x40>
		PR_ERROR("Failed to add %s address to interface %p\n", argv[2], iface);
 800c3a8:	68ab      	ldr	r3, [r5, #8]
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	4a07      	ldr	r2, [pc, #28]	; (800c3cc <cmd_net_ip6_add+0x98>)
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	9700      	str	r7, [sp, #0]
 800c3b2:	f007 fc23 	bl	8013bfc <shell_fprintf>
 800c3b6:	e7dd      	b.n	800c374 <cmd_net_ip6_add+0x40>
		return -ENOEXEC;
 800c3b8:	f06f 0407 	mvn.w	r4, #7
 800c3bc:	e7da      	b.n	800c374 <cmd_net_ip6_add+0x40>
 800c3be:	bf00      	nop
 800c3c0:	0801f75e 	.word	0x0801f75e
 800c3c4:	0801f48c 	.word	0x0801f48c
 800c3c8:	0801f4df 	.word	0x0801f4df
 800c3cc:	0801f78d 	.word	0x0801f78d

0800c3d0 <cmd_net_iface_down>:
{
 800c3d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	idx = get_iface_idx(sh, argv[1]);
 800c3d2:	6851      	ldr	r1, [r2, #4]
{
 800c3d4:	4606      	mov	r6, r0
	idx = get_iface_idx(sh, argv[1]);
 800c3d6:	f7ff fb47 	bl	800ba68 <get_iface_idx>
	if (idx < 0) {
 800c3da:	1e05      	subs	r5, r0, #0
 800c3dc:	db08      	blt.n	800c3f0 <cmd_net_iface_down+0x20>
	iface = net_if_get_by_index(idx);
 800c3de:	f00d fd90 	bl	8019f02 <net_if_get_by_index>
	if (!iface) {
 800c3e2:	b940      	cbnz	r0, 800c3f6 <cmd_net_iface_down+0x26>
		PR_WARNING("No such interface in index %d\n", idx);
 800c3e4:	462b      	mov	r3, r5
 800c3e6:	4a0e      	ldr	r2, [pc, #56]	; (800c420 <cmd_net_iface_down+0x50>)
 800c3e8:	2103      	movs	r1, #3
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f007 fc06 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800c3f0:	f06f 0407 	mvn.w	r4, #7
 800c3f4:	e011      	b.n	800c41a <cmd_net_iface_down+0x4a>
	ret = net_if_down(iface);
 800c3f6:	f7f9 ffdd 	bl	80063b4 <net_if_down>
	if (ret) {
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	b138      	cbz	r0, 800c40e <cmd_net_iface_down+0x3e>
		PR_WARNING("Cannot take interface %d down (%d)\n", idx, ret);
 800c3fe:	9000      	str	r0, [sp, #0]
 800c400:	462b      	mov	r3, r5
 800c402:	4a08      	ldr	r2, [pc, #32]	; (800c424 <cmd_net_iface_down+0x54>)
 800c404:	2103      	movs	r1, #3
 800c406:	4630      	mov	r0, r6
 800c408:	f007 fbf8 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800c40c:	e7f0      	b.n	800c3f0 <cmd_net_iface_down+0x20>
		PR("Interface %d is down\n", idx);
 800c40e:	462b      	mov	r3, r5
 800c410:	4a05      	ldr	r2, [pc, #20]	; (800c428 <cmd_net_iface_down+0x58>)
 800c412:	2108      	movs	r1, #8
 800c414:	4630      	mov	r0, r6
 800c416:	f007 fbf1 	bl	8013bfc <shell_fprintf>
}
 800c41a:	4620      	mov	r0, r4
 800c41c:	b002      	add	sp, #8
 800c41e:	bd70      	pop	{r4, r5, r6, pc}
 800c420:	0801f48c 	.word	0x0801f48c
 800c424:	0801f7b7 	.word	0x0801f7b7
 800c428:	0801f7db 	.word	0x0801f7db

0800c42c <cmd_net_dns_cancel>:
{
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4605      	mov	r5, r0
	ctx = dns_resolve_get_default();
 800c430:	f002 fc42 	bl	800ecb8 <dns_resolve_get_default>
	if (!ctx) {
 800c434:	4603      	mov	r3, r0
 800c436:	b978      	cbnz	r0, 800c458 <cmd_net_dns_cancel+0x2c>
		return -ENOEXEC;
 800c438:	f06f 0407 	mvn.w	r4, #7
		PR_WARNING("No default DNS context found.\n");
 800c43c:	4a0e      	ldr	r2, [pc, #56]	; (800c478 <cmd_net_dns_cancel+0x4c>)
 800c43e:	2103      	movs	r1, #3
 800c440:	4628      	mov	r0, r5
 800c442:	f007 fbdb 	bl	8013bfc <shell_fprintf>
}
 800c446:	4620      	mov	r0, r4
 800c448:	bd38      	pop	{r3, r4, r5, pc}
		PR("Cancelled %d pending requests.\n", ret);
 800c44a:	2301      	movs	r3, #1
 800c44c:	4a0b      	ldr	r2, [pc, #44]	; (800c47c <cmd_net_dns_cancel+0x50>)
 800c44e:	2108      	movs	r1, #8
 800c450:	4628      	mov	r0, r5
 800c452:	f007 fbd3 	bl	8013bfc <shell_fprintf>
 800c456:	e7f6      	b.n	800c446 <cmd_net_dns_cancel+0x1a>
		if (!ctx->queries[i].cb) {
 800c458:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800c45a:	b132      	cbz	r2, 800c46a <cmd_net_dns_cancel+0x3e>
		if (!dns_resolve_cancel(ctx, ctx->queries[i].id)) {
 800c45c:	f8b3 108e 	ldrh.w	r1, [r3, #142]	; 0x8e
 800c460:	f00d ffd7 	bl	801a412 <dns_resolve_cancel>
 800c464:	4604      	mov	r4, r0
 800c466:	2800      	cmp	r0, #0
 800c468:	d0ef      	beq.n	800c44a <cmd_net_dns_cancel+0x1e>
		PR("No pending DNS requests.\n");
 800c46a:	4a05      	ldr	r2, [pc, #20]	; (800c480 <cmd_net_dns_cancel+0x54>)
 800c46c:	2108      	movs	r1, #8
 800c46e:	4628      	mov	r0, r5
	return 0;
 800c470:	2400      	movs	r4, #0
		PR("No pending DNS requests.\n");
 800c472:	f007 fbc3 	bl	8013bfc <shell_fprintf>
 800c476:	e7e6      	b.n	800c446 <cmd_net_dns_cancel+0x1a>
 800c478:	0801f7f1 	.word	0x0801f7f1
 800c47c:	0801f82a 	.word	0x0801f82a
 800c480:	0801f810 	.word	0x0801f810

0800c484 <cmd_net_conn>:
{
 800c484:	b510      	push	{r4, lr}
	int count = 0;
 800c486:	2300      	movs	r3, #0
{
 800c488:	b086      	sub	sp, #24
	PR("     Context   \tIface  Flags            Local             Remote\n");
 800c48a:	4a18      	ldr	r2, [pc, #96]	; (800c4ec <cmd_net_conn+0x68>)
 800c48c:	2108      	movs	r1, #8
{
 800c48e:	4604      	mov	r4, r0
	int count = 0;
 800c490:	9303      	str	r3, [sp, #12]
	PR("     Context   \tIface  Flags            Local             Remote\n");
 800c492:	f007 fbb3 	bl	8013bfc <shell_fprintf>
	user_data.user_data = &count;
 800c496:	ab03      	add	r3, sp, #12
	net_context_foreach(context_cb, &user_data);
 800c498:	a904      	add	r1, sp, #16
 800c49a:	4815      	ldr	r0, [pc, #84]	; (800c4f0 <cmd_net_conn+0x6c>)
	user_data.user_data = &count;
 800c49c:	9305      	str	r3, [sp, #20]
	user_data.sh = sh;
 800c49e:	9404      	str	r4, [sp, #16]
	net_context_foreach(context_cb, &user_data);
 800c4a0:	f7fa fcf2 	bl	8006e88 <net_context_foreach>
	if (count == 0) {
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	b923      	cbnz	r3, 800c4b2 <cmd_net_conn+0x2e>
		PR("No connections\n");
 800c4a8:	4a12      	ldr	r2, [pc, #72]	; (800c4f4 <cmd_net_conn+0x70>)
 800c4aa:	2108      	movs	r1, #8
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f007 fba5 	bl	8013bfc <shell_fprintf>
	PR("\nTCP        Context   Src port Dst port   "
 800c4b2:	4a11      	ldr	r2, [pc, #68]	; (800c4f8 <cmd_net_conn+0x74>)
 800c4b4:	2108      	movs	r1, #8
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f007 fba0 	bl	8013bfc <shell_fprintf>
	count = 0;
 800c4bc:	2300      	movs	r3, #0
	net_tcp_foreach(tcp_cb, &user_data);
 800c4be:	a904      	add	r1, sp, #16
 800c4c0:	480e      	ldr	r0, [pc, #56]	; (800c4fc <cmd_net_conn+0x78>)
	count = 0;
 800c4c2:	9303      	str	r3, [sp, #12]
	net_tcp_foreach(tcp_cb, &user_data);
 800c4c4:	f7fd fdec 	bl	800a0a0 <net_tcp_foreach>
	if (count == 0) {
 800c4c8:	9b03      	ldr	r3, [sp, #12]
 800c4ca:	b923      	cbnz	r3, 800c4d6 <cmd_net_conn+0x52>
		PR("No TCP connections\n");
 800c4cc:	4a0c      	ldr	r2, [pc, #48]	; (800c500 <cmd_net_conn+0x7c>)
 800c4ce:	2108      	movs	r1, #8
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f007 fb93 	bl	8013bfc <shell_fprintf>
	PR_INFO("Set %s to enable %s support.\n",
 800c4d6:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <cmd_net_conn+0x80>)
 800c4d8:	4620      	mov	r0, r4
 800c4da:	4a0b      	ldr	r2, [pc, #44]	; (800c508 <cmd_net_conn+0x84>)
 800c4dc:	2102      	movs	r1, #2
 800c4de:	9300      	str	r3, [sp, #0]
 800c4e0:	4b0a      	ldr	r3, [pc, #40]	; (800c50c <cmd_net_conn+0x88>)
 800c4e2:	f007 fb8b 	bl	8013bfc <shell_fprintf>
}
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	b006      	add	sp, #24
 800c4ea:	bd10      	pop	{r4, pc}
 800c4ec:	0801f84a 	.word	0x0801f84a
 800c4f0:	0800cd71 	.word	0x0800cd71
 800c4f4:	0801f88c 	.word	0x0801f88c
 800c4f8:	0801f89c 	.word	0x0801f89c
 800c4fc:	0800c511 	.word	0x0800c511
 800c500:	0801f8e9 	.word	0x0801f8e9
 800c504:	0801f91a 	.word	0x0801f91a
 800c508:	0801edaa 	.word	0x0801edaa
 800c50c:	0801f8fd 	.word	0x0801f8fd

0800c510 <tcp_cb>:
{
 800c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c514:	4604      	mov	r4, r0
 800c516:	b08b      	sub	sp, #44	; 0x2c
	int *count = data->user_data;
 800c518:	e9d1 8700 	ldrd	r8, r7, [r1]
	uint16_t recv_mss = net_tcp_get_supported_mss(conn);
 800c51c:	f00d fa84 	bl	8019a28 <net_tcp_get_supported_mss>
	PR("%p %p   %5u    %5u %10u %10u %5u   %s\n",
 800c520:	f8d4 9004 	ldr.w	r9, [r4, #4]
	uint16_t recv_mss = net_tcp_get_supported_mss(conn);
 800c524:	4682      	mov	sl, r0
	PR("%p %p   %5u    %5u %10u %10u %5u   %s\n",
 800c526:	f894 0220 	ldrb.w	r0, [r4, #544]	; 0x220
 800c52a:	f8b9 5022 	ldrh.w	r5, [r9, #34]	; 0x22
 800c52e:	f8b9 602e 	ldrh.w	r6, [r9, #46]	; 0x2e
 800c532:	ba6d      	rev16	r5, r5
 800c534:	ba76      	rev16	r6, r6
 800c536:	b2ad      	uxth	r5, r5
 800c538:	b2b6      	uxth	r6, r6
 800c53a:	e9d4 b389 	ldrd	fp, r3, [r4, #548]	; 0x224
 800c53e:	9309      	str	r3, [sp, #36]	; 0x24
 800c540:	f7ff f948 	bl	800b7d4 <net_tcp_state_str>
 800c544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c546:	2108      	movs	r1, #8
 800c548:	4a09      	ldr	r2, [pc, #36]	; (800c570 <tcp_cb+0x60>)
 800c54a:	f8cd 9000 	str.w	r9, [sp]
 800c54e:	e9cd a005 	strd	sl, r0, [sp, #20]
 800c552:	e9cd b303 	strd	fp, r3, [sp, #12]
 800c556:	4640      	mov	r0, r8
 800c558:	4623      	mov	r3, r4
 800c55a:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800c55e:	f007 fb4d 	bl	8013bfc <shell_fprintf>
	(*count)++;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	3301      	adds	r3, #1
 800c566:	603b      	str	r3, [r7, #0]
}
 800c568:	b00b      	add	sp, #44	; 0x2c
 800c56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56e:	bf00      	nop
 800c570:	0801f928 	.word	0x0801f928

0800c574 <cmd_net_arp_flush>:
	PR("Flushing ARP cache.\n");
 800c574:	4a04      	ldr	r2, [pc, #16]	; (800c588 <cmd_net_arp_flush+0x14>)
 800c576:	2108      	movs	r1, #8
{
 800c578:	b508      	push	{r3, lr}
	PR("Flushing ARP cache.\n");
 800c57a:	f007 fb3f 	bl	8013bfc <shell_fprintf>
	net_arp_clear_cache(NULL);
 800c57e:	2000      	movs	r0, #0
 800c580:	f7f8 f9f2 	bl	8004968 <net_arp_clear_cache>
}
 800c584:	2000      	movs	r0, #0
 800c586:	bd08      	pop	{r3, pc}
 800c588:	0801f94f 	.word	0x0801f94f

0800c58c <cmd_net_nbr>:
{
 800c58c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int count = 0;
 800c58e:	2300      	movs	r3, #0
{
 800c590:	4604      	mov	r4, r0
	net_ipv6_nbr_foreach(nbr_cb, &user_data);
 800c592:	a902      	add	r1, sp, #8
	user_data.sh = sh;
 800c594:	e9cd 3001 	strd	r3, r0, [sp, #4]
	user_data.user_data = &count;
 800c598:	ab01      	add	r3, sp, #4
	net_ipv6_nbr_foreach(nbr_cb, &user_data);
 800c59a:	4807      	ldr	r0, [pc, #28]	; (800c5b8 <cmd_net_nbr+0x2c>)
	user_data.user_data = &count;
 800c59c:	9303      	str	r3, [sp, #12]
	net_ipv6_nbr_foreach(nbr_cb, &user_data);
 800c59e:	f7fc fa65 	bl	8008a6c <net_ipv6_nbr_foreach>
	if (count == 0) {
 800c5a2:	9b01      	ldr	r3, [sp, #4]
 800c5a4:	b923      	cbnz	r3, 800c5b0 <cmd_net_nbr+0x24>
		PR("No neighbors.\n");
 800c5a6:	4a05      	ldr	r2, [pc, #20]	; (800c5bc <cmd_net_nbr+0x30>)
 800c5a8:	2108      	movs	r1, #8
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f007 fb26 	bl	8013bfc <shell_fprintf>
}
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	b004      	add	sp, #16
 800c5b4:	bd10      	pop	{r4, pc}
 800c5b6:	bf00      	nop
 800c5b8:	0800dfdd 	.word	0x0800dfdd
 800c5bc:	0801f964 	.word	0x0801f964

0800c5c0 <cmd_net_udp_close>:
	if (!udp_ctx || !net_context_is_used(udp_ctx)) {
 800c5c0:	4b0d      	ldr	r3, [pc, #52]	; (800c5f8 <cmd_net_udp_close+0x38>)
{
 800c5c2:	b510      	push	{r4, lr}
 800c5c4:	4604      	mov	r4, r0
	if (!udp_ctx || !net_context_is_used(udp_ctx)) {
 800c5c6:	6818      	ldr	r0, [r3, #0]
 800c5c8:	b118      	cbz	r0, 800c5d2 <cmd_net_udp_close+0x12>
 800c5ca:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
 800c5ce:	07db      	lsls	r3, r3, #31
 800c5d0:	d407      	bmi.n	800c5e2 <cmd_net_udp_close+0x22>
		PR_WARNING("Network context is not used. Cannot close.\n");
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	4a09      	ldr	r2, [pc, #36]	; (800c5fc <cmd_net_udp_close+0x3c>)
 800c5d6:	2103      	movs	r1, #3
 800c5d8:	f007 fb10 	bl	8013bfc <shell_fprintf>
 800c5dc:	f06f 0015 	mvn.w	r0, #21
}
 800c5e0:	bd10      	pop	{r4, pc}
	ret = net_context_put(udp_ctx);
 800c5e2:	f7fa fb7f 	bl	8006ce4 <net_context_put>
	if (ret < 0) {
 800c5e6:	1e03      	subs	r3, r0, #0
 800c5e8:	da04      	bge.n	800c5f4 <cmd_net_udp_close+0x34>
		PR_WARNING("Cannot close UDP port (%d)\n", ret);
 800c5ea:	4a05      	ldr	r2, [pc, #20]	; (800c600 <cmd_net_udp_close+0x40>)
 800c5ec:	2103      	movs	r1, #3
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f007 fb04 	bl	8013bfc <shell_fprintf>
	return 0;
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	e7f3      	b.n	800c5e0 <cmd_net_udp_close+0x20>
 800c5f8:	24002dcc 	.word	0x24002dcc
 800c5fc:	0801f973 	.word	0x0801f973
 800c600:	0801f99f 	.word	0x0801f99f

0800c604 <tcp_connected>:
		PR_SHELL(tcp_shell, "TCP connection failed (%d)\n", status);
 800c604:	4b0b      	ldr	r3, [pc, #44]	; (800c634 <tcp_connected+0x30>)
{
 800c606:	b510      	push	{r4, lr}
 800c608:	4604      	mov	r4, r0
		PR_SHELL(tcp_shell, "TCP connection failed (%d)\n", status);
 800c60a:	6818      	ldr	r0, [r3, #0]
	if (status < 0) {
 800c60c:	1e0b      	subs	r3, r1, #0
 800c60e:	da0a      	bge.n	800c626 <tcp_connected+0x22>
		PR_SHELL(tcp_shell, "TCP connection failed (%d)\n", status);
 800c610:	4a09      	ldr	r2, [pc, #36]	; (800c638 <tcp_connected+0x34>)
 800c612:	2108      	movs	r1, #8
 800c614:	f007 faf2 	bl	8013bfc <shell_fprintf>
		net_context_put(context);
 800c618:	4620      	mov	r0, r4
 800c61a:	f7fa fb63 	bl	8006ce4 <net_context_put>
		tcp_ctx = NULL;
 800c61e:	4b07      	ldr	r3, [pc, #28]	; (800c63c <tcp_connected+0x38>)
 800c620:	2200      	movs	r2, #0
 800c622:	601a      	str	r2, [r3, #0]
}
 800c624:	bd10      	pop	{r4, pc}
		PR_SHELL(tcp_shell, "TCP connected\n");
 800c626:	4a06      	ldr	r2, [pc, #24]	; (800c640 <tcp_connected+0x3c>)
 800c628:	2108      	movs	r1, #8
}
 800c62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PR_SHELL(tcp_shell, "TCP connected\n");
 800c62e:	f007 bae5 	b.w	8013bfc <shell_fprintf>
 800c632:	bf00      	nop
 800c634:	24002dc8 	.word	0x24002dc8
 800c638:	0801f9bb 	.word	0x0801f9bb
 800c63c:	24002dc4 	.word	0x24002dc4
 800c640:	0801f9d7 	.word	0x0801f9d7

0800c644 <ping_bypass>:
	for (size_t i = 0; i < len; i++) {
 800c644:	440a      	add	r2, r1
{
 800c646:	b508      	push	{r3, lr}
	for (size_t i = 0; i < len; i++) {
 800c648:	4291      	cmp	r1, r2
 800c64a:	d100      	bne.n	800c64e <ping_bypass+0xa>
}
 800c64c:	bd08      	pop	{r3, pc}
		if (data[i] == ASCII_CTRL_C) {
 800c64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c652:	2b03      	cmp	r3, #3
 800c654:	d1f8      	bne.n	800c648 <ping_bypass+0x4>
			k_work_cancel_delayable(&ping_ctx.work);
 800c656:	4804      	ldr	r0, [pc, #16]	; (800c668 <ping_bypass+0x24>)
 800c658:	f00f fa62 	bl	801bb20 <k_work_cancel_delayable>
			ping_cleanup(&ping_ctx);
 800c65c:	4802      	ldr	r0, [pc, #8]	; (800c668 <ping_bypass+0x24>)
}
 800c65e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			ping_cleanup(&ping_ctx);
 800c662:	f7ff bca3 	b.w	800bfac <ping_cleanup>
 800c666:	bf00      	nop
 800c668:	240019d0 	.word	0x240019d0

0800c66c <cmd_net_arp>:
{
 800c66c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!argv[arg]) {
 800c66e:	6853      	ldr	r3, [r2, #4]
{
 800c670:	4604      	mov	r4, r0
	if (!argv[arg]) {
 800c672:	b96b      	cbnz	r3, 800c690 <cmd_net_arp+0x24>
		if (net_arp_foreach(arp_cb, &user_data) == 0) {
 800c674:	a902      	add	r1, sp, #8
		user_data.sh = sh;
 800c676:	e9cd 3001 	strd	r3, r0, [sp, #4]
		user_data.user_data = &count;
 800c67a:	ab01      	add	r3, sp, #4
		if (net_arp_foreach(arp_cb, &user_data) == 0) {
 800c67c:	4806      	ldr	r0, [pc, #24]	; (800c698 <cmd_net_arp+0x2c>)
		user_data.user_data = &count;
 800c67e:	9303      	str	r3, [sp, #12]
		if (net_arp_foreach(arp_cb, &user_data) == 0) {
 800c680:	f7f8 f9e4 	bl	8004a4c <net_arp_foreach>
 800c684:	b920      	cbnz	r0, 800c690 <cmd_net_arp+0x24>
			PR("ARP cache is empty.\n");
 800c686:	4a05      	ldr	r2, [pc, #20]	; (800c69c <cmd_net_arp+0x30>)
 800c688:	2108      	movs	r1, #8
 800c68a:	4620      	mov	r0, r4
 800c68c:	f007 fab6 	bl	8013bfc <shell_fprintf>
}
 800c690:	2000      	movs	r0, #0
 800c692:	b004      	add	sp, #16
 800c694:	bd10      	pop	{r4, pc}
 800c696:	bf00      	nop
 800c698:	0800e0ed 	.word	0x0800e0ed
 800c69c:	0801f9e6 	.word	0x0801f9e6

0800c6a0 <cmd_net_dns_query>:
{
 800c6a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	host = argv[arg++];
 800c6a2:	6855      	ldr	r5, [r2, #4]
{
 800c6a4:	4604      	mov	r4, r0
	if (!host) {
 800c6a6:	b93d      	cbnz	r5, 800c6b8 <cmd_net_dns_query+0x18>
		PR_WARNING("Hostname not specified.\n");
 800c6a8:	4a21      	ldr	r2, [pc, #132]	; (800c730 <cmd_net_dns_query+0x90>)
 800c6aa:	2103      	movs	r1, #3
			PR_WARNING("Unknown query type, specify either "
 800c6ac:	f007 faa6 	bl	8013bfc <shell_fprintf>
			return -ENOEXEC;
 800c6b0:	f06f 0007 	mvn.w	r0, #7
}
 800c6b4:	b004      	add	sp, #16
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}
	if (argv[arg]) {
 800c6b8:	6896      	ldr	r6, [r2, #8]
 800c6ba:	b14e      	cbz	r6, 800c6d0 <cmd_net_dns_query+0x30>
		if (strcmp(type, "A") == 0) {
 800c6bc:	491d      	ldr	r1, [pc, #116]	; (800c734 <cmd_net_dns_query+0x94>)
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f008 fa93 	bl	8014bea <strcmp>
 800c6c4:	b930      	cbnz	r0, 800c6d4 <cmd_net_dns_query+0x34>
			PR("IPv4 address type\n");
 800c6c6:	4a1c      	ldr	r2, [pc, #112]	; (800c738 <cmd_net_dns_query+0x98>)
 800c6c8:	2108      	movs	r1, #8
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f007 fa96 	bl	8013bfc <shell_fprintf>
	enum dns_query_type qtype = DNS_QUERY_TYPE_A;
 800c6d0:	2601      	movs	r6, #1
 800c6d2:	e00a      	b.n	800c6ea <cmd_net_dns_query+0x4a>
		} else if (strcmp(type, "AAAA") == 0) {
 800c6d4:	4919      	ldr	r1, [pc, #100]	; (800c73c <cmd_net_dns_query+0x9c>)
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f008 fa87 	bl	8014bea <strcmp>
 800c6dc:	b9e8      	cbnz	r0, 800c71a <cmd_net_dns_query+0x7a>
			qtype = DNS_QUERY_TYPE_AAAA;
 800c6de:	261c      	movs	r6, #28
			PR("IPv6 address type\n");
 800c6e0:	4a17      	ldr	r2, [pc, #92]	; (800c740 <cmd_net_dns_query+0xa0>)
 800c6e2:	2108      	movs	r1, #8
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	f007 fa89 	bl	8013bfc <shell_fprintf>
				    uint16_t *dns_id,
				    dns_resolve_cb_t cb,
				    void *user_data,
				    int32_t timeout)
{
	return dns_resolve_name(dns_resolve_get_default(),
 800c6ea:	f002 fae5 	bl	800ecb8 <dns_resolve_get_default>
 800c6ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c6f2:	4632      	mov	r2, r6
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800c6fa:	4b12      	ldr	r3, [pc, #72]	; (800c744 <cmd_net_dns_query+0xa4>)
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	2300      	movs	r3, #0
 800c700:	f002 f9fc 	bl	800eafc <dns_resolve_name>
	if (ret < 0) {
 800c704:	2800      	cmp	r0, #0
 800c706:	da0c      	bge.n	800c722 <cmd_net_dns_query+0x82>
		PR_WARNING("Cannot resolve '%s' (%d)\n", host, ret);
 800c708:	9000      	str	r0, [sp, #0]
 800c70a:	462b      	mov	r3, r5
 800c70c:	4a0e      	ldr	r2, [pc, #56]	; (800c748 <cmd_net_dns_query+0xa8>)
 800c70e:	2103      	movs	r1, #3
 800c710:	4620      	mov	r0, r4
 800c712:	f007 fa73 	bl	8013bfc <shell_fprintf>
	return 0;
 800c716:	2000      	movs	r0, #0
 800c718:	e7cc      	b.n	800c6b4 <cmd_net_dns_query+0x14>
			PR_WARNING("Unknown query type, specify either "
 800c71a:	4a0c      	ldr	r2, [pc, #48]	; (800c74c <cmd_net_dns_query+0xac>)
 800c71c:	2103      	movs	r1, #3
 800c71e:	4620      	mov	r0, r4
 800c720:	e7c4      	b.n	800c6ac <cmd_net_dns_query+0xc>
		PR("Query for '%s' sent.\n", host);
 800c722:	462b      	mov	r3, r5
 800c724:	4a0a      	ldr	r2, [pc, #40]	; (800c750 <cmd_net_dns_query+0xb0>)
 800c726:	2108      	movs	r1, #8
 800c728:	4620      	mov	r0, r4
 800c72a:	f007 fa67 	bl	8013bfc <shell_fprintf>
 800c72e:	e7f2      	b.n	800c716 <cmd_net_dns_query+0x76>
 800c730:	0801f9fb 	.word	0x0801f9fb
 800c734:	0801fa2a 	.word	0x0801fa2a
 800c738:	0801fa14 	.word	0x0801fa14
 800c73c:	0801fa27 	.word	0x0801fa27
 800c740:	0801fa2c 	.word	0x0801fa2c
 800c744:	0800d769 	.word	0x0800d769
 800c748:	0801fa6d 	.word	0x0801fa6d
 800c74c:	0801fa3f 	.word	0x0801fa3f
 800c750:	0801fa87 	.word	0x0801fa87

0800c754 <cmd_net_dns>:
{
 800c754:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (argv[1]) {
 800c756:	6853      	ldr	r3, [r2, #4]
{
 800c758:	4605      	mov	r5, r0
	if (argv[1]) {
 800c75a:	b11b      	cbz	r3, 800c764 <cmd_net_dns+0x10>
		cmd_net_dns_query(sh, argc, argv);
 800c75c:	f7ff ffa0 	bl	800c6a0 <cmd_net_dns_query>
	return 0;
 800c760:	2000      	movs	r0, #0
 800c762:	e00a      	b.n	800c77a <cmd_net_dns+0x26>
	ctx = dns_resolve_get_default();
 800c764:	f002 faa8 	bl	800ecb8 <dns_resolve_get_default>
	if (!ctx) {
 800c768:	4604      	mov	r4, r0
 800c76a:	b940      	cbnz	r0, 800c77e <cmd_net_dns+0x2a>
		PR_WARNING("No default DNS context found.\n");
 800c76c:	4628      	mov	r0, r5
 800c76e:	4a32      	ldr	r2, [pc, #200]	; (800c838 <cmd_net_dns+0xe4>)
 800c770:	2103      	movs	r1, #3
 800c772:	f007 fa43 	bl	8013bfc <shell_fprintf>
 800c776:	f06f 0007 	mvn.w	r0, #7
}
 800c77a:	b003      	add	sp, #12
 800c77c:	bd30      	pop	{r4, r5, pc}
	PR("DNS servers:\n");
 800c77e:	4628      	mov	r0, r5
 800c780:	4a2e      	ldr	r2, [pc, #184]	; (800c83c <cmd_net_dns+0xe8>)
 800c782:	2108      	movs	r1, #8
 800c784:	f007 fa3a 	bl	8013bfc <shell_fprintf>
		if (ctx->servers[i].dns_server.sa_family == AF_INET) {
 800c788:	8820      	ldrh	r0, [r4, #0]
 800c78a:	2801      	cmp	r0, #1
 800c78c:	d138      	bne.n	800c800 <cmd_net_dns+0xac>
			PR("\t%s:%u\n",
 800c78e:	1d21      	adds	r1, r4, #4
 800c790:	f7fa f80c 	bl	80067ac <net_sprint_addr>
 800c794:	8862      	ldrh	r2, [r4, #2]
 800c796:	4603      	mov	r3, r0
 800c798:	ba52      	rev16	r2, r2
 800c79a:	b292      	uxth	r2, r2
 800c79c:	9200      	str	r2, [sp, #0]
 800c79e:	4a28      	ldr	r2, [pc, #160]	; (800c840 <cmd_net_dns+0xec>)
			PR("\t[%s]:%u\n",
 800c7a0:	2108      	movs	r1, #8
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f007 fa2a 	bl	8013bfc <shell_fprintf>
	PR("Pending queries:\n");
 800c7a8:	4a26      	ldr	r2, [pc, #152]	; (800c844 <cmd_net_dns+0xf0>)
 800c7aa:	2108      	movs	r1, #8
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f007 fa25 	bl	8013bfc <shell_fprintf>
		if (!ctx->queries[i].cb || !ctx->queries[i].query) {
 800c7b2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d0d3      	beq.n	800c760 <cmd_net_dns+0xc>
 800c7b8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d0cf      	beq.n	800c760 <cmd_net_dns+0xc>
	return z_timeout_remaining(&dwork->timeout);
 800c7c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c7c4:	f00f fb0c 	bl	801bde0 <z_timeout_remaining>
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, true, false);
 800c7c8:	2300      	movs	r3, #0
		t += off;
 800c7ca:	3009      	adds	r0, #9
		if (result32 && (t < BIT64(32))) {
 800c7cc:	f04f 32ff 	mov.w	r2, #4294967295
		t += off;
 800c7d0:	f143 0100 	adc.w	r1, r3, #0
		if (result32 && (t < BIT64(32))) {
 800c7d4:	4282      	cmp	r2, r0
 800c7d6:	418b      	sbcs	r3, r1
 800c7d8:	d31e      	bcc.n	800c818 <cmd_net_dns+0xc4>
			return ((uint32_t)t) / (from_hz / to_hz);
 800c7da:	230a      	movs	r3, #10
 800c7dc:	fbb0 f0f3 	udiv	r0, r0, r3
		if (ctx->queries[i].query_type == DNS_QUERY_TYPE_A) {
 800c7e0:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d11c      	bne.n	800c822 <cmd_net_dns+0xce>
			PR("\tIPv4[%u]: %s remaining %d\n",
 800c7e8:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800c7ec:	9001      	str	r0, [sp, #4]
 800c7ee:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800c7f2:	9200      	str	r2, [sp, #0]
 800c7f4:	4a14      	ldr	r2, [pc, #80]	; (800c848 <cmd_net_dns+0xf4>)
			PR("\tIPv6[%u]: %s remaining %d\n",
 800c7f6:	2108      	movs	r1, #8
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	f007 f9ff 	bl	8013bfc <shell_fprintf>
 800c7fe:	e7af      	b.n	800c760 <cmd_net_dns+0xc>
		} else if (ctx->servers[i].dns_server.sa_family == AF_INET6) {
 800c800:	2802      	cmp	r0, #2
 800c802:	d1d1      	bne.n	800c7a8 <cmd_net_dns+0x54>
			PR("\t[%s]:%u\n",
 800c804:	1d21      	adds	r1, r4, #4
 800c806:	f7f9 ffd1 	bl	80067ac <net_sprint_addr>
 800c80a:	8862      	ldrh	r2, [r4, #2]
 800c80c:	4603      	mov	r3, r0
 800c80e:	ba52      	rev16	r2, r2
 800c810:	b292      	uxth	r2, r2
 800c812:	9200      	str	r2, [sp, #0]
 800c814:	4a0d      	ldr	r2, [pc, #52]	; (800c84c <cmd_net_dns+0xf8>)
 800c816:	e7c3      	b.n	800c7a0 <cmd_net_dns+0x4c>
			return t / ((uint64_t)from_hz / to_hz);
 800c818:	220a      	movs	r2, #10
 800c81a:	2300      	movs	r3, #0
 800c81c:	f7f4 f80a 	bl	8000834 <__aeabi_uldivmod>
 800c820:	e7de      	b.n	800c7e0 <cmd_net_dns+0x8c>
		} else if (ctx->queries[i].query_type == DNS_QUERY_TYPE_AAAA) {
 800c822:	2b1c      	cmp	r3, #28
 800c824:	d19c      	bne.n	800c760 <cmd_net_dns+0xc>
			PR("\tIPv6[%u]: %s remaining %d\n",
 800c826:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800c82a:	9001      	str	r0, [sp, #4]
 800c82c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800c830:	9200      	str	r2, [sp, #0]
 800c832:	4a07      	ldr	r2, [pc, #28]	; (800c850 <cmd_net_dns+0xfc>)
 800c834:	e7df      	b.n	800c7f6 <cmd_net_dns+0xa2>
 800c836:	bf00      	nop
 800c838:	0801f7f1 	.word	0x0801f7f1
 800c83c:	0801fa9d 	.word	0x0801fa9d
 800c840:	0801faab 	.word	0x0801faab
 800c844:	0801fabd 	.word	0x0801fabd
 800c848:	0801facf 	.word	0x0801facf
 800c84c:	0801fab3 	.word	0x0801fab3
 800c850:	0801faeb 	.word	0x0801faeb

0800c854 <udp_sent>:
{
 800c854:	b508      	push	{r3, lr}
	PR_SHELL(udp_shell, "Message sent\n");
 800c856:	4b05      	ldr	r3, [pc, #20]	; (800c86c <udp_sent+0x18>)
 800c858:	2108      	movs	r1, #8
 800c85a:	4a05      	ldr	r2, [pc, #20]	; (800c870 <udp_sent+0x1c>)
 800c85c:	6818      	ldr	r0, [r3, #0]
 800c85e:	f007 f9cd 	bl	8013bfc <shell_fprintf>
	z_impl_k_sem_give(sem);
 800c862:	4804      	ldr	r0, [pc, #16]	; (800c874 <udp_sent+0x20>)
}
 800c864:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c868:	f005 bbca 	b.w	8012000 <z_impl_k_sem_give>
 800c86c:	24002dd0 	.word	0x24002dd0
 800c870:	0801ee12 	.word	0x0801ee12
 800c874:	24001198 	.word	0x24001198

0800c878 <cmd_net_udp_send>:
{
 800c878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (argc < 4) {
 800c87c:	2903      	cmp	r1, #3
{
 800c87e:	b08f      	sub	sp, #60	; 0x3c
 800c880:	4615      	mov	r5, r2
	char *endptr = NULL;
 800c882:	f04f 0200 	mov.w	r2, #0
{
 800c886:	4604      	mov	r4, r0
	char *endptr = NULL;
 800c888:	9207      	str	r2, [sp, #28]
	if (argc < 4) {
 800c88a:	d809      	bhi.n	800c8a0 <cmd_net_udp_send+0x28>
		PR_WARNING("Not enough arguments given for udp send command\n");
 800c88c:	4a54      	ldr	r2, [pc, #336]	; (800c9e0 <cmd_net_udp_send+0x168>)
 800c88e:	2103      	movs	r1, #3
		return -EINVAL;
 800c890:	f06f 0515 	mvn.w	r5, #21
		PR_WARNING("Invalid port number\n");
 800c894:	f007 f9b2 	bl	8013bfc <shell_fprintf>
}
 800c898:	4628      	mov	r0, r5
 800c89a:	b00f      	add	sp, #60	; 0x3c
 800c89c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	port = strtol(argv[2], &endptr, 0);
 800c8a0:	a907      	add	r1, sp, #28
 800c8a2:	68a8      	ldr	r0, [r5, #8]
	host = argv[1];
 800c8a4:	f8d5 9004 	ldr.w	r9, [r5, #4]
	port = strtol(argv[2], &endptr, 0);
 800c8a8:	f008 f855 	bl	8014956 <strtol>
	if (endptr == argv[2]) {
 800c8ac:	9b07      	ldr	r3, [sp, #28]
	port = strtol(argv[2], &endptr, 0);
 800c8ae:	b286      	uxth	r6, r0
	if (endptr == argv[2]) {
 800c8b0:	e9d5 2802 	ldrd	r2, r8, [r5, #8]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d103      	bne.n	800c8c0 <cmd_net_udp_send+0x48>
		PR_WARNING("Invalid port number\n");
 800c8b8:	4a4a      	ldr	r2, [pc, #296]	; (800c9e4 <cmd_net_udp_send+0x16c>)
 800c8ba:	2103      	movs	r1, #3
 800c8bc:	4620      	mov	r0, r4
 800c8be:	e7e7      	b.n	800c890 <cmd_net_udp_send+0x18>
	if (udp_ctx && net_context_is_used(udp_ctx)) {
 800c8c0:	4f49      	ldr	r7, [pc, #292]	; (800c9e8 <cmd_net_udp_send+0x170>)
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	b15b      	cbz	r3, 800c8de <cmd_net_udp_send+0x66>
 800c8c6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c8ca:	07db      	lsls	r3, r3, #31
 800c8cc:	d507      	bpl.n	800c8de <cmd_net_udp_send+0x66>
		PR_WARNING("Network context already in use\n");
 800c8ce:	4a47      	ldr	r2, [pc, #284]	; (800c9ec <cmd_net_udp_send+0x174>)
 800c8d0:	2103      	movs	r1, #3
 800c8d2:	4620      	mov	r0, r4
		return -EALREADY;
 800c8d4:	f06f 0577 	mvn.w	r5, #119	; 0x77
		PR_WARNING("Network context already in use\n");
 800c8d8:	f007 f990 	bl	8013bfc <shell_fprintf>
		return -EALREADY;
 800c8dc:	e7dc      	b.n	800c898 <cmd_net_udp_send+0x20>
	memset(&addr, 0, sizeof(addr));
 800c8de:	2218      	movs	r2, #24
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	a808      	add	r0, sp, #32
 800c8e4:	f008 f9d2 	bl	8014c8c <memset>
	ret = net_ipaddr_parse(host, strlen(host), &addr);
 800c8e8:	4648      	mov	r0, r9
 800c8ea:	f008 f977 	bl	8014bdc <strlen>
 800c8ee:	aa08      	add	r2, sp, #32
 800c8f0:	4601      	mov	r1, r0
 800c8f2:	4648      	mov	r0, r9
 800c8f4:	f009 fea5 	bl	8016642 <net_ipaddr_parse>
	ret = net_context_get(addr.sa_family, SOCK_DGRAM, IPPROTO_UDP,
 800c8f8:	4b3b      	ldr	r3, [pc, #236]	; (800c9e8 <cmd_net_udp_send+0x170>)
 800c8fa:	2211      	movs	r2, #17
 800c8fc:	2102      	movs	r1, #2
 800c8fe:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800c902:	f7fa f933 	bl	8006b6c <net_context_get>
	if (ret < 0) {
 800c906:	1e05      	subs	r5, r0, #0
 800c908:	da06      	bge.n	800c918 <cmd_net_udp_send+0xa0>
		PR_WARNING("Cannot get UDP context (%d)\n", ret);
 800c90a:	462b      	mov	r3, r5
 800c90c:	4a38      	ldr	r2, [pc, #224]	; (800c9f0 <cmd_net_udp_send+0x178>)
 800c90e:	2103      	movs	r1, #3
 800c910:	4620      	mov	r0, r4
 800c912:	f007 f973 	bl	8013bfc <shell_fprintf>
		return ret;
 800c916:	e7bf      	b.n	800c898 <cmd_net_udp_send+0x20>
	udp_shell = sh;
 800c918:	4b36      	ldr	r3, [pc, #216]	; (800c9f4 <cmd_net_udp_send+0x17c>)
 800c91a:	601c      	str	r4, [r3, #0]
	if (IS_ENABLED(CONFIG_NET_IPV6) && addr.sa_family == AF_INET6) {
 800c91c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c920:	2b02      	cmp	r3, #2
 800c922:	d10d      	bne.n	800c940 <cmd_net_udp_send+0xc8>
		net_sin6(&addr)->sin6_port = htons(port);
 800c924:	ba76      	rev16	r6, r6
		addrlen = sizeof(struct sockaddr_in6);
 800c926:	2518      	movs	r5, #24
		iface = net_if_ipv6_select_src_iface(
 800c928:	a809      	add	r0, sp, #36	; 0x24
		net_sin6(&addr)->sin6_port = htons(port);
 800c92a:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
		iface = net_if_ipv6_select_src_iface(
 800c92e:	f009 fa7e 	bl	8015e2e <net_if_ipv6_select_src_iface>
	if (!iface) {
 800c932:	bb08      	cbnz	r0, 800c978 <cmd_net_udp_send+0x100>
		PR_WARNING("No interface to send to given host\n");
 800c934:	4a30      	ldr	r2, [pc, #192]	; (800c9f8 <cmd_net_udp_send+0x180>)
		PR_WARNING("UDP packet sending failed\n");
 800c936:	2103      	movs	r1, #3
 800c938:	4620      	mov	r0, r4
 800c93a:	f007 f95f 	bl	8013bfc <shell_fprintf>
 800c93e:	e00f      	b.n	800c960 <cmd_net_udp_send+0xe8>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && addr.sa_family == AF_INET) {
 800c940:	2b01      	cmp	r3, #1
 800c942:	d107      	bne.n	800c954 <cmd_net_udp_send+0xdc>
		net_sin(&addr)->sin_port = htons(port);
 800c944:	ba76      	rev16	r6, r6
		iface = net_if_ipv4_select_src_iface(
 800c946:	a809      	add	r0, sp, #36	; 0x24
		addrlen = sizeof(struct sockaddr_in);
 800c948:	2508      	movs	r5, #8
		net_sin(&addr)->sin_port = htons(port);
 800c94a:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
		iface = net_if_ipv4_select_src_iface(
 800c94e:	f7f9 fb35 	bl	8005fbc <net_if_ipv4_select_src_iface>
 800c952:	e7ee      	b.n	800c932 <cmd_net_udp_send+0xba>
		PR_WARNING("IPv6 and IPv4 are disabled, cannot %s.\n", "send");
 800c954:	4b29      	ldr	r3, [pc, #164]	; (800c9fc <cmd_net_udp_send+0x184>)
 800c956:	4a2a      	ldr	r2, [pc, #168]	; (800ca00 <cmd_net_udp_send+0x188>)
		PR_WARNING("Setting rcv callback failed (%d)\n", ret);
 800c958:	2103      	movs	r1, #3
 800c95a:	4620      	mov	r0, r4
 800c95c:	f007 f94e 	bl	8013bfc <shell_fprintf>
	ret = net_context_put(udp_ctx);
 800c960:	6838      	ldr	r0, [r7, #0]
 800c962:	f7fa f9bf 	bl	8006ce4 <net_context_put>
	if (ret < 0) {
 800c966:	1e03      	subs	r3, r0, #0
 800c968:	da04      	bge.n	800c974 <cmd_net_udp_send+0xfc>
		PR_WARNING("Cannot put UDP context (%d)\n", ret);
 800c96a:	4a26      	ldr	r2, [pc, #152]	; (800ca04 <cmd_net_udp_send+0x18c>)
 800c96c:	2103      	movs	r1, #3
 800c96e:	4620      	mov	r0, r4
 800c970:	f007 f944 	bl	8013bfc <shell_fprintf>
	return 0;
 800c974:	2500      	movs	r5, #0
 800c976:	e78f      	b.n	800c898 <cmd_net_udp_send+0x20>
	net_context_set_iface(udp_ctx, iface);
 800c978:	683e      	ldr	r6, [r7, #0]
	context->iface = net_if_get_by_iface(iface);
 800c97a:	f7f9 fcc5 	bl	8006308 <net_if_get_by_iface>
	ret = net_context_recv(udp_ctx, udp_rcvd, K_NO_WAIT, NULL);
 800c97e:	2300      	movs	r3, #0
 800c980:	2200      	movs	r2, #0
 800c982:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 800c986:	2600      	movs	r6, #0
 800c988:	491f      	ldr	r1, [pc, #124]	; (800ca08 <cmd_net_udp_send+0x190>)
 800c98a:	6838      	ldr	r0, [r7, #0]
 800c98c:	9600      	str	r6, [sp, #0]
 800c98e:	f7fa f9d1 	bl	8006d34 <net_context_recv>
	if (ret < 0) {
 800c992:	1e03      	subs	r3, r0, #0
 800c994:	da01      	bge.n	800c99a <cmd_net_udp_send+0x122>
		PR_WARNING("Setting rcv callback failed (%d)\n", ret);
 800c996:	4a1d      	ldr	r2, [pc, #116]	; (800ca0c <cmd_net_udp_send+0x194>)
 800c998:	e7de      	b.n	800c958 <cmd_net_udp_send+0xe0>
	ret = net_context_sendto(udp_ctx, payload, strlen(payload), &addr,
 800c99a:	4640      	mov	r0, r8
 800c99c:	f8d7 9000 	ldr.w	r9, [r7]
 800c9a0:	f008 f91c 	bl	8014bdc <strlen>
 800c9a4:	f04f 31ff 	mov.w	r1, #4294967295
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	4b19      	ldr	r3, [pc, #100]	; (800ca10 <cmd_net_udp_send+0x198>)
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b0:	9604      	str	r6, [sp, #16]
 800c9b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9b6:	e9cd 5300 	strd	r5, r3, [sp]
 800c9ba:	4641      	mov	r1, r8
 800c9bc:	ab08      	add	r3, sp, #32
 800c9be:	4648      	mov	r0, r9
 800c9c0:	f00a fb3b 	bl	801703a <net_context_sendto>
	if (ret < 0) {
 800c9c4:	1e03      	subs	r3, r0, #0
 800c9c6:	da01      	bge.n	800c9cc <cmd_net_udp_send+0x154>
		PR_WARNING("Sending packet failed (%d)\n", ret);
 800c9c8:	4a12      	ldr	r2, [pc, #72]	; (800ca14 <cmd_net_udp_send+0x19c>)
 800c9ca:	e7c5      	b.n	800c958 <cmd_net_udp_send+0xe0>
	return z_impl_k_sem_take(sem, timeout);
 800c9cc:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	4811      	ldr	r0, [pc, #68]	; (800ca18 <cmd_net_udp_send+0x1a0>)
 800c9d4:	f005 fb3a 	bl	801204c <z_impl_k_sem_take>
	if (ret == -EAGAIN) {
 800c9d8:	300b      	adds	r0, #11
 800c9da:	d1c1      	bne.n	800c960 <cmd_net_udp_send+0xe8>
		PR_WARNING("UDP packet sending failed\n");
 800c9dc:	4a0f      	ldr	r2, [pc, #60]	; (800ca1c <cmd_net_udp_send+0x1a4>)
 800c9de:	e7aa      	b.n	800c936 <cmd_net_udp_send+0xbe>
 800c9e0:	0801fb07 	.word	0x0801fb07
 800c9e4:	0801fb38 	.word	0x0801fb38
 800c9e8:	24002dcc 	.word	0x24002dcc
 800c9ec:	0801fb4d 	.word	0x0801fb4d
 800c9f0:	0801fb6d 	.word	0x0801fb6d
 800c9f4:	24002dd0 	.word	0x24002dd0
 800c9f8:	0801fbb7 	.word	0x0801fbb7
 800c9fc:	0801fb8a 	.word	0x0801fb8a
 800ca00:	0801fb8f 	.word	0x0801fb8f
 800ca04:	0801fc34 	.word	0x0801fc34
 800ca08:	0800cc81 	.word	0x0800cc81
 800ca0c:	0801fbdb 	.word	0x0801fbdb
 800ca10:	0800c855 	.word	0x0800c855
 800ca14:	0801fbfd 	.word	0x0801fbfd
 800ca18:	24001198 	.word	0x24001198
 800ca1c:	0801fc19 	.word	0x0801fc19

0800ca20 <cmd_net_iface_up>:
{
 800ca20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	idx = get_iface_idx(sh, argv[1]);
 800ca22:	6851      	ldr	r1, [r2, #4]
{
 800ca24:	4606      	mov	r6, r0
	idx = get_iface_idx(sh, argv[1]);
 800ca26:	f7ff f81f 	bl	800ba68 <get_iface_idx>
	if (idx < 0) {
 800ca2a:	1e05      	subs	r5, r0, #0
 800ca2c:	db09      	blt.n	800ca42 <cmd_net_iface_up+0x22>
	iface = net_if_get_by_index(idx);
 800ca2e:	f00d fa68 	bl	8019f02 <net_if_get_by_index>
	if (!iface) {
 800ca32:	4604      	mov	r4, r0
 800ca34:	b940      	cbnz	r0, 800ca48 <cmd_net_iface_up+0x28>
		PR_WARNING("No such interface in index %d\n", idx);
 800ca36:	462b      	mov	r3, r5
 800ca38:	4a11      	ldr	r2, [pc, #68]	; (800ca80 <cmd_net_iface_up+0x60>)
		PR_WARNING("Interface %d is already up.\n", idx);
 800ca3a:	2103      	movs	r1, #3
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f007 f8dd 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800ca42:	f06f 0407 	mvn.w	r4, #7
 800ca46:	e018      	b.n	800ca7a <cmd_net_iface_up+0x5a>
	if (net_if_is_up(iface)) {
 800ca48:	f00d fa7e 	bl	8019f48 <net_if_is_up>
 800ca4c:	b110      	cbz	r0, 800ca54 <cmd_net_iface_up+0x34>
		PR_WARNING("Interface %d is already up.\n", idx);
 800ca4e:	462b      	mov	r3, r5
 800ca50:	4a0c      	ldr	r2, [pc, #48]	; (800ca84 <cmd_net_iface_up+0x64>)
 800ca52:	e7f2      	b.n	800ca3a <cmd_net_iface_up+0x1a>
	ret = net_if_up(iface);
 800ca54:	4620      	mov	r0, r4
 800ca56:	f7f9 fc7f 	bl	8006358 <net_if_up>
	if (ret) {
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	b138      	cbz	r0, 800ca6e <cmd_net_iface_up+0x4e>
		PR_WARNING("Cannot take interface %d up (%d)\n", idx, ret);
 800ca5e:	9000      	str	r0, [sp, #0]
 800ca60:	462b      	mov	r3, r5
 800ca62:	4a09      	ldr	r2, [pc, #36]	; (800ca88 <cmd_net_iface_up+0x68>)
 800ca64:	2103      	movs	r1, #3
 800ca66:	4630      	mov	r0, r6
 800ca68:	f007 f8c8 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800ca6c:	e7e9      	b.n	800ca42 <cmd_net_iface_up+0x22>
		PR("Interface %d is up\n", idx);
 800ca6e:	462b      	mov	r3, r5
 800ca70:	4a06      	ldr	r2, [pc, #24]	; (800ca8c <cmd_net_iface_up+0x6c>)
 800ca72:	2108      	movs	r1, #8
 800ca74:	4630      	mov	r0, r6
 800ca76:	f007 f8c1 	bl	8013bfc <shell_fprintf>
}
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	b002      	add	sp, #8
 800ca7e:	bd70      	pop	{r4, r5, r6, pc}
 800ca80:	0801f48c 	.word	0x0801f48c
 800ca84:	0801fc51 	.word	0x0801fc51
 800ca88:	0801fc6e 	.word	0x0801fc6e
 800ca8c:	0801fc90 	.word	0x0801fc90

0800ca90 <cmd_net_tcp_connect>:
{
 800ca90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (tcp_ctx && net_context_is_used(tcp_ctx)) {
 800ca94:	4e6c      	ldr	r6, [pc, #432]	; (800cc48 <cmd_net_tcp_connect+0x1b8>)
{
 800ca96:	b093      	sub	sp, #76	; 0x4c
 800ca98:	4605      	mov	r5, r0
 800ca9a:	4617      	mov	r7, r2
	if (tcp_ctx && net_context_is_used(tcp_ctx)) {
 800ca9c:	6833      	ldr	r3, [r6, #0]
 800ca9e:	b163      	cbz	r3, 800caba <cmd_net_tcp_connect+0x2a>
	return context->flags & NET_CONTEXT_IN_USE;
 800caa0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800caa4:	07db      	lsls	r3, r3, #31
 800caa6:	d508      	bpl.n	800caba <cmd_net_tcp_connect+0x2a>
		PR("Already connected\n");
 800caa8:	4a68      	ldr	r2, [pc, #416]	; (800cc4c <cmd_net_tcp_connect+0x1bc>)
 800caaa:	2108      	movs	r1, #8
		PR_WARNING("Peer port missing.\n");
 800caac:	f007 f8a6 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800cab0:	f06f 0007 	mvn.w	r0, #7
}
 800cab4:	b013      	add	sp, #76	; 0x4c
 800cab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!argv[++arg]) {
 800caba:	f8d7 9004 	ldr.w	r9, [r7, #4]
 800cabe:	f1b9 0f00 	cmp.w	r9, #0
 800cac2:	d103      	bne.n	800cacc <cmd_net_tcp_connect+0x3c>
		PR_WARNING("Peer IP address missing.\n");
 800cac4:	4a62      	ldr	r2, [pc, #392]	; (800cc50 <cmd_net_tcp_connect+0x1c0>)
		PR_WARNING("Peer port missing.\n");
 800cac6:	2103      	movs	r1, #3
 800cac8:	4628      	mov	r0, r5
 800caca:	e7ef      	b.n	800caac <cmd_net_tcp_connect+0x1c>
	if (!argv[++arg]) {
 800cacc:	68b8      	ldr	r0, [r7, #8]
 800cace:	b908      	cbnz	r0, 800cad4 <cmd_net_tcp_connect+0x44>
		PR_WARNING("Peer port missing.\n");
 800cad0:	4a60      	ldr	r2, [pc, #384]	; (800cc54 <cmd_net_tcp_connect+0x1c4>)
 800cad2:	e7f8      	b.n	800cac6 <cmd_net_tcp_connect+0x36>
	port = strtol(argv[arg], &endptr, 10);
 800cad4:	220a      	movs	r2, #10
 800cad6:	a905      	add	r1, sp, #20
 800cad8:	f007 ff3d 	bl	8014956 <strtol>
	if (*endptr != '\0') {
 800cadc:	9b05      	ldr	r3, [sp, #20]
	port = strtol(argv[arg], &endptr, 10);
 800cade:	b284      	uxth	r4, r0
	if (*endptr != '\0') {
 800cae0:	f893 8000 	ldrb.w	r8, [r3]
 800cae4:	f1b8 0f00 	cmp.w	r8, #0
 800cae8:	d006      	beq.n	800caf8 <cmd_net_tcp_connect+0x68>
		PR_WARNING("Invalid port %s\n", argv[arg]);
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	2103      	movs	r1, #3
 800caee:	4a5a      	ldr	r2, [pc, #360]	; (800cc58 <cmd_net_tcp_connect+0x1c8>)
 800caf0:	4628      	mov	r0, r5
 800caf2:	f007 f883 	bl	8013bfc <shell_fprintf>
 800caf6:	e7db      	b.n	800cab0 <cmd_net_tcp_connect+0x20>
	struct net_if *iface = net_if_get_default();
 800caf8:	f7f8 fb10 	bl	800511c <net_if_get_default>
		ret = net_addr_pton(AF_INET6, host,
 800cafc:	aa0d      	add	r2, sp, #52	; 0x34
	struct net_if *iface = net_if_get_default();
 800cafe:	4607      	mov	r7, r0
		ret = net_addr_pton(AF_INET6, host,
 800cb00:	4649      	mov	r1, r9
 800cb02:	2002      	movs	r0, #2
 800cb04:	f00d fa11 	bl	8019f2a <net_addr_pton>
		if (ret < 0) {
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	da4a      	bge.n	800cba2 <cmd_net_tcp_connect+0x112>
			ret = net_addr_pton(AF_INET, host,
 800cb0c:	aa0d      	add	r2, sp, #52	; 0x34
 800cb0e:	4649      	mov	r1, r9
 800cb10:	2001      	movs	r0, #1
 800cb12:	f00d fa0a 	bl	8019f2a <net_addr_pton>
			if (ret < 0) {
 800cb16:	2800      	cmp	r0, #0
 800cb18:	da06      	bge.n	800cb28 <cmd_net_tcp_connect+0x98>
				PR_WARNING("Invalid IP address\n");
 800cb1a:	4a50      	ldr	r2, [pc, #320]	; (800cc5c <cmd_net_tcp_connect+0x1cc>)
 800cb1c:	2103      	movs	r1, #3
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f007 f86c 	bl	8013bfc <shell_fprintf>
	return 0;
 800cb24:	2000      	movs	r0, #0
 800cb26:	e7c5      	b.n	800cab4 <cmd_net_tcp_connect+0x24>
			net_sin(&addr)->sin_port = htons(port);
 800cb28:	ba64      	rev16	r4, r4
	memcpy(&net_sin(myaddr)->sin_addr,
 800cb2a:	2204      	movs	r2, #4
	       &iface->config.ip.ipv4->unicast[0].address.in_addr,
 800cb2c:	68f9      	ldr	r1, [r7, #12]
	memcpy(&net_sin(myaddr)->sin_addr,
 800cb2e:	a807      	add	r0, sp, #28
			net_sin(&addr)->sin_port = htons(port);
 800cb30:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
			family = addr.sa_family = myaddr.sa_family = AF_INET;
 800cb34:	2401      	movs	r4, #1
	memcpy(&net_sin(myaddr)->sin_addr,
 800cb36:	4411      	add	r1, r2
			addrlen = sizeof(struct sockaddr_in);
 800cb38:	2708      	movs	r7, #8
	memcpy(&net_sin(myaddr)->sin_addr,
 800cb3a:	f008 f89c 	bl	8014c76 <memcpy>
			PR("Connecting from %s:%u ",
 800cb3e:	a907      	add	r1, sp, #28
 800cb40:	4620      	mov	r0, r4
	net_sin(myaddr)->sin_port = 0U; /* let the IP stack to select */
 800cb42:	f8ad 801a 	strh.w	r8, [sp, #26]
			family = addr.sa_family = myaddr.sa_family = AF_INET;
 800cb46:	f8ad 4018 	strh.w	r4, [sp, #24]
 800cb4a:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
			PR("Connecting from %s:%u ",
 800cb4e:	f7f9 fe2d 	bl	80067ac <net_sprint_addr>
 800cb52:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800cb56:	4603      	mov	r3, r0
 800cb58:	2108      	movs	r1, #8
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	ba52      	rev16	r2, r2
 800cb5e:	b292      	uxth	r2, r2
 800cb60:	9200      	str	r2, [sp, #0]
 800cb62:	4a3f      	ldr	r2, [pc, #252]	; (800cc60 <cmd_net_tcp_connect+0x1d0>)
 800cb64:	f007 f84a 	bl	8013bfc <shell_fprintf>
			PR("to %s:%u\n",
 800cb68:	a90d      	add	r1, sp, #52	; 0x34
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f7f9 fe1e 	bl	80067ac <net_sprint_addr>
 800cb70:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800cb74:	4603      	mov	r3, r0
 800cb76:	2108      	movs	r1, #8
 800cb78:	ba52      	rev16	r2, r2
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	b292      	uxth	r2, r2
 800cb7e:	9200      	str	r2, [sp, #0]
 800cb80:	4a38      	ldr	r2, [pc, #224]	; (800cc64 <cmd_net_tcp_connect+0x1d4>)
 800cb82:	f007 f83b 	bl	8013bfc <shell_fprintf>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
 800cb86:	4b30      	ldr	r3, [pc, #192]	; (800cc48 <cmd_net_tcp_connect+0x1b8>)
			family = addr.sa_family = myaddr.sa_family = AF_INET6;
 800cb88:	4620      	mov	r0, r4
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
 800cb8a:	2206      	movs	r2, #6
 800cb8c:	2101      	movs	r1, #1
 800cb8e:	f7f9 ffed 	bl	8006b6c <net_context_get>
	if (ret < 0) {
 800cb92:	1e03      	subs	r3, r0, #0
 800cb94:	da3f      	bge.n	800cc16 <cmd_net_tcp_connect+0x186>
		PR_WARNING("Cannot get TCP context (%d)\n", ret);
 800cb96:	4a34      	ldr	r2, [pc, #208]	; (800cc68 <cmd_net_tcp_connect+0x1d8>)
		PR_WARNING("Cannot bind TCP (%d)\n", ret);
 800cb98:	2103      	movs	r1, #3
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f007 f82e 	bl	8013bfc <shell_fprintf>
		return;
 800cba0:	e7c0      	b.n	800cb24 <cmd_net_tcp_connect+0x94>
			net_sin6(&addr)->sin6_port = htons(port);
 800cba2:	ba64      	rev16	r4, r4
			nbr = net_ipv6_nbr_lookup(NULL,
 800cba4:	a90d      	add	r1, sp, #52	; 0x34
 800cba6:	4640      	mov	r0, r8
			net_sin6(&addr)->sin6_port = htons(port);
 800cba8:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
			nbr = net_ipv6_nbr_lookup(NULL,
 800cbac:	f00b feb5 	bl	801891a <net_ipv6_nbr_lookup>
			if (nbr) {
 800cbb0:	b100      	cbz	r0, 800cbb4 <cmd_net_tcp_connect+0x124>
				iface = nbr->iface;
 800cbb2:	6887      	ldr	r7, [r0, #8]
	my6addr = net_if_ipv6_select_src_addr(iface,
 800cbb4:	a907      	add	r1, sp, #28
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	f7f9 f96c 	bl	8005e94 <net_if_ipv6_select_src_addr>
			family = addr.sa_family = myaddr.sa_family = AF_INET6;
 800cbbc:	2402      	movs	r4, #2
	my6addr = net_if_ipv6_select_src_addr(iface,
 800cbbe:	4601      	mov	r1, r0
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
 800cbc0:	2210      	movs	r2, #16
 800cbc2:	a807      	add	r0, sp, #28
			addrlen = sizeof(struct sockaddr_in6);
 800cbc4:	2718      	movs	r7, #24
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
 800cbc6:	f008 f856 	bl	8014c76 <memcpy>
	net_sin6(myaddr)->sin6_port = 0U; /* let the IP stack to select */
 800cbca:	2300      	movs	r3, #0
			PR("Connecting from [%s]:%u ",
 800cbcc:	a907      	add	r1, sp, #28
 800cbce:	4620      	mov	r0, r4
	net_sin6(myaddr)->sin6_port = 0U; /* let the IP stack to select */
 800cbd0:	f8ad 301a 	strh.w	r3, [sp, #26]
			family = addr.sa_family = myaddr.sa_family = AF_INET6;
 800cbd4:	f8ad 4018 	strh.w	r4, [sp, #24]
 800cbd8:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
			PR("Connecting from [%s]:%u ",
 800cbdc:	f7f9 fde6 	bl	80067ac <net_sprint_addr>
 800cbe0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2108      	movs	r1, #8
 800cbe8:	4628      	mov	r0, r5
 800cbea:	ba52      	rev16	r2, r2
 800cbec:	b292      	uxth	r2, r2
 800cbee:	9200      	str	r2, [sp, #0]
 800cbf0:	4a1e      	ldr	r2, [pc, #120]	; (800cc6c <cmd_net_tcp_connect+0x1dc>)
 800cbf2:	f007 f803 	bl	8013bfc <shell_fprintf>
			PR("to [%s]:%u\n",
 800cbf6:	a90d      	add	r1, sp, #52	; 0x34
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f7f9 fdd7 	bl	80067ac <net_sprint_addr>
 800cbfe:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800cc02:	4603      	mov	r3, r0
 800cc04:	2108      	movs	r1, #8
 800cc06:	ba52      	rev16	r2, r2
 800cc08:	4628      	mov	r0, r5
 800cc0a:	b292      	uxth	r2, r2
 800cc0c:	9200      	str	r2, [sp, #0]
 800cc0e:	4a18      	ldr	r2, [pc, #96]	; (800cc70 <cmd_net_tcp_connect+0x1e0>)
 800cc10:	f006 fff4 	bl	8013bfc <shell_fprintf>
		break;
 800cc14:	e7b7      	b.n	800cb86 <cmd_net_tcp_connect+0xf6>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
 800cc16:	463a      	mov	r2, r7
 800cc18:	a906      	add	r1, sp, #24
 800cc1a:	6830      	ldr	r0, [r6, #0]
 800cc1c:	f009 fe35 	bl	801688a <net_context_bind>
	if (ret < 0) {
 800cc20:	1e03      	subs	r3, r0, #0
 800cc22:	da01      	bge.n	800cc28 <cmd_net_tcp_connect+0x198>
		PR_WARNING("Cannot bind TCP (%d)\n", ret);
 800cc24:	4a13      	ldr	r2, [pc, #76]	; (800cc74 <cmd_net_tcp_connect+0x1e4>)
 800cc26:	e7b7      	b.n	800cb98 <cmd_net_tcp_connect+0x108>
	tcp_shell = sh;
 800cc28:	4b13      	ldr	r3, [pc, #76]	; (800cc78 <cmd_net_tcp_connect+0x1e8>)
	net_context_connect(*ctx, &addr, addrlen, tcp_connected,
 800cc2a:	2400      	movs	r4, #0
 800cc2c:	f247 5230 	movw	r2, #30000	; 0x7530
 800cc30:	a90c      	add	r1, sp, #48	; 0x30
	tcp_shell = sh;
 800cc32:	601d      	str	r5, [r3, #0]
	net_context_connect(*ctx, &addr, addrlen, tcp_connected,
 800cc34:	2300      	movs	r3, #0
 800cc36:	6830      	ldr	r0, [r6, #0]
 800cc38:	9402      	str	r4, [sp, #8]
 800cc3a:	e9cd 2300 	strd	r2, r3, [sp]
 800cc3e:	4b0f      	ldr	r3, [pc, #60]	; (800cc7c <cmd_net_tcp_connect+0x1ec>)
 800cc40:	463a      	mov	r2, r7
 800cc42:	f00a f8bc 	bl	8016dbe <net_context_connect>
 800cc46:	e76d      	b.n	800cb24 <cmd_net_tcp_connect+0x94>
 800cc48:	24002dc4 	.word	0x24002dc4
 800cc4c:	0801fca4 	.word	0x0801fca4
 800cc50:	0801fcb7 	.word	0x0801fcb7
 800cc54:	0801fcd1 	.word	0x0801fcd1
 800cc58:	0801fce5 	.word	0x0801fce5
 800cc5c:	0801fcf6 	.word	0x0801fcf6
 800cc60:	0801fd0a 	.word	0x0801fd0a
 800cc64:	0801fd21 	.word	0x0801fd21
 800cc68:	0801fd50 	.word	0x0801fd50
 800cc6c:	0801fd2b 	.word	0x0801fd2b
 800cc70:	0801fd44 	.word	0x0801fd44
 800cc74:	0801fd6d 	.word	0x0801fd6d
 800cc78:	24002dc8 	.word	0x24002dc8
 800cc7c:	0800c605 	.word	0x0800c605

0800cc80 <udp_rcvd>:
{
 800cc80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (pkt) {
 800cc84:	460c      	mov	r4, r1
 800cc86:	b1b1      	cbz	r1, 800ccb6 <udp_rcvd+0x36>
		PR_SHELL(udp_shell, "Received UDP packet: ");
 800cc88:	4d14      	ldr	r5, [pc, #80]	; (800ccdc <udp_rcvd+0x5c>)
		size_t len = net_pkt_remaining_data(pkt);
 800cc8a:	4608      	mov	r0, r1
		for (size_t i = 0; i < len; ++i) {
 800cc8c:	2600      	movs	r6, #0
			PR_SHELL(udp_shell, "%02x ", byte);
 800cc8e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800cce0 <udp_rcvd+0x60>
		size_t len = net_pkt_remaining_data(pkt);
 800cc92:	f00a fd3d 	bl	8017710 <net_pkt_remaining_data>
		PR_SHELL(udp_shell, "Received UDP packet: ");
 800cc96:	4a13      	ldr	r2, [pc, #76]	; (800cce4 <udp_rcvd+0x64>)
		size_t len = net_pkt_remaining_data(pkt);
 800cc98:	4607      	mov	r7, r0
		PR_SHELL(udp_shell, "Received UDP packet: ");
 800cc9a:	2108      	movs	r1, #8
 800cc9c:	6828      	ldr	r0, [r5, #0]
 800cc9e:	f006 ffad 	bl	8013bfc <shell_fprintf>
		for (size_t i = 0; i < len; ++i) {
 800cca2:	42b7      	cmp	r7, r6
 800cca4:	d10a      	bne.n	800ccbc <udp_rcvd+0x3c>
		PR_SHELL(udp_shell, "\n");
 800cca6:	6828      	ldr	r0, [r5, #0]
 800cca8:	2108      	movs	r1, #8
 800ccaa:	4a0f      	ldr	r2, [pc, #60]	; (800cce8 <udp_rcvd+0x68>)
 800ccac:	f006 ffa6 	bl	8013bfc <shell_fprintf>
		net_pkt_unref(pkt);
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	f00a fb16 	bl	80172e2 <net_pkt_unref>
}
 800ccb6:	b002      	add	sp, #8
 800ccb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_pkt_read(pkt, data, 1);
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	f10d 0107 	add.w	r1, sp, #7
 800ccc2:	4620      	mov	r0, r4
		for (size_t i = 0; i < len; ++i) {
 800ccc4:	3601      	adds	r6, #1
 800ccc6:	f00a fcb9 	bl	801763c <net_pkt_read>
			PR_SHELL(udp_shell, "%02x ", byte);
 800ccca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ccce:	4642      	mov	r2, r8
 800ccd0:	2108      	movs	r1, #8
 800ccd2:	6828      	ldr	r0, [r5, #0]
 800ccd4:	f006 ff92 	bl	8013bfc <shell_fprintf>
		for (size_t i = 0; i < len; ++i) {
 800ccd8:	e7e3      	b.n	800cca2 <udp_rcvd+0x22>
 800ccda:	bf00      	nop
 800ccdc:	24002dd0 	.word	0x24002dd0
 800cce0:	0801e479 	.word	0x0801e479
 800cce4:	0801fd83 	.word	0x0801fd83
 800cce8:	0801dcfa 	.word	0x0801dcfa

0800ccec <tcp_recv_cb>:
{
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	4605      	mov	r5, r0
	if (pkt == NULL) {
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	b9c9      	cbnz	r1, 800cd28 <tcp_recv_cb+0x3c>
		if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
 800ccf4:	4d19      	ldr	r5, [pc, #100]	; (800cd5c <tcp_recv_cb+0x70>)
 800ccf6:	6828      	ldr	r0, [r5, #0]
 800ccf8:	b1a8      	cbz	r0, 800cd26 <tcp_recv_cb+0x3a>
 800ccfa:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
 800ccfe:	07db      	lsls	r3, r3, #31
 800cd00:	d511      	bpl.n	800cd26 <tcp_recv_cb+0x3a>
		ret = net_context_put(tcp_ctx);
 800cd02:	f7f9 ffef 	bl	8006ce4 <net_context_put>
		if (ret < 0) {
 800cd06:	1e03      	subs	r3, r0, #0
 800cd08:	4815      	ldr	r0, [pc, #84]	; (800cd60 <tcp_recv_cb+0x74>)
 800cd0a:	da06      	bge.n	800cd1a <tcp_recv_cb+0x2e>
			PR_SHELL(tcp_shell,
 800cd0c:	4a15      	ldr	r2, [pc, #84]	; (800cd64 <tcp_recv_cb+0x78>)
 800cd0e:	2108      	movs	r1, #8
 800cd10:	6800      	ldr	r0, [r0, #0]
}
 800cd12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			PR_SHELL(tcp_shell,
 800cd16:	f006 bf71 	b.w	8013bfc <shell_fprintf>
		PR_SHELL(tcp_shell, "Connection closed by remote peer.\n");
 800cd1a:	4a13      	ldr	r2, [pc, #76]	; (800cd68 <tcp_recv_cb+0x7c>)
 800cd1c:	2108      	movs	r1, #8
 800cd1e:	6800      	ldr	r0, [r0, #0]
 800cd20:	f006 ff6c 	bl	8013bfc <shell_fprintf>
		tcp_ctx = NULL;
 800cd24:	602c      	str	r4, [r5, #0]
}
 800cd26:	bd70      	pop	{r4, r5, r6, pc}
	len = net_pkt_remaining_data(pkt);
 800cd28:	4608      	mov	r0, r1
 800cd2a:	f00a fcf1 	bl	8017710 <net_pkt_remaining_data>
 800cd2e:	4601      	mov	r1, r0
	(void)net_context_update_recv_wnd(context, len);
 800cd30:	4628      	mov	r0, r5
 800cd32:	f00a f9a7 	bl	8017084 <net_context_update_recv_wnd>
	PR_SHELL(tcp_shell, "%zu bytes received\n", net_pkt_get_len(pkt));
 800cd36:	4b0a      	ldr	r3, [pc, #40]	; (800cd60 <tcp_recv_cb+0x74>)
 800cd38:	68a2      	ldr	r2, [r4, #8]
 800cd3a:	6818      	ldr	r0, [r3, #0]
	size_t bytes = 0;
 800cd3c:	2300      	movs	r3, #0
	while (buf) {
 800cd3e:	b942      	cbnz	r2, 800cd52 <tcp_recv_cb+0x66>
 800cd40:	4a0a      	ldr	r2, [pc, #40]	; (800cd6c <tcp_recv_cb+0x80>)
 800cd42:	2108      	movs	r1, #8
 800cd44:	f006 ff5a 	bl	8013bfc <shell_fprintf>
	net_pkt_unref(pkt);
 800cd48:	4620      	mov	r0, r4
}
 800cd4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_pkt_unref(pkt);
 800cd4e:	f00a bac8 	b.w	80172e2 <net_pkt_unref>
		bytes += buf->len;
 800cd52:	8a11      	ldrh	r1, [r2, #16]
		buf = buf->frags;
 800cd54:	6852      	ldr	r2, [r2, #4]
		bytes += buf->len;
 800cd56:	440b      	add	r3, r1
		buf = buf->frags;
 800cd58:	e7f1      	b.n	800cd3e <tcp_recv_cb+0x52>
 800cd5a:	bf00      	nop
 800cd5c:	24002dc4 	.word	0x24002dc4
 800cd60:	24002dc8 	.word	0x24002dc8
 800cd64:	0801f071 	.word	0x0801f071
 800cd68:	0801fd99 	.word	0x0801fd99
 800cd6c:	0801fdbc 	.word	0x0801fdbc

0800cd70 <context_cb>:
{
 800cd70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd74:	b0a1      	sub	sp, #132	; 0x84
 800cd76:	4604      	mov	r4, r0
	char addr_remote[ADDR_LEN + 7] = "";
 800cd78:	222b      	movs	r2, #43	; 0x2b
 800cd7a:	a815      	add	r0, sp, #84	; 0x54
 800cd7c:	ae08      	add	r6, sp, #32
 800cd7e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
	int *count = data->user_data;
 800cd82:	e9d1 9700 	ldrd	r9, r7, [r1]
	char addr_remote[ADDR_LEN + 7] = "";
 800cd86:	2100      	movs	r1, #0
 800cd88:	9114      	str	r1, [sp, #80]	; 0x50
 800cd8a:	f007 ff7f 	bl	8014c8c <memset>
	if (context->local.family == AF_INET6) {
 800cd8e:	8c25      	ldrh	r5, [r4, #32]
 800cd90:	2d02      	cmp	r5, #2
 800cd92:	d154      	bne.n	800ce3e <context_cb+0xce>
		snprintk(addr_local, local_len, "[%s]:%u",
 800cd94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cd96:	4628      	mov	r0, r5
 800cd98:	f7f9 fd08 	bl	80067ac <net_sprint_addr>
 800cd9c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800cd9e:	4603      	mov	r3, r0
 800cda0:	212f      	movs	r1, #47	; 0x2f
 800cda2:	ba52      	rev16	r2, r2
 800cda4:	4630      	mov	r0, r6
 800cda6:	b292      	uxth	r2, r2
 800cda8:	9200      	str	r2, [sp, #0]
 800cdaa:	4a42      	ldr	r2, [pc, #264]	; (800ceb4 <context_cb+0x144>)
 800cdac:	f006 f974 	bl	8013098 <snprintk>
		snprintk(addr_remote, remote_len, "[%s]:%u",
 800cdb0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	f7f9 fcf9 	bl	80067ac <net_sprint_addr>
 800cdba:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	ba52      	rev16	r2, r2
 800cdc0:	b292      	uxth	r2, r2
 800cdc2:	9200      	str	r2, [sp, #0]
 800cdc4:	4a3b      	ldr	r2, [pc, #236]	; (800ceb4 <context_cb+0x144>)
		snprintk(addr_remote, remote_len, "%s:%d",
 800cdc6:	212f      	movs	r1, #47	; 0x2f
 800cdc8:	4640      	mov	r0, r8
 800cdca:	f006 f965 	bl	8013098 <snprintk>
	return net_if_get_by_index(context->iface);
 800cdce:	f994 0076 	ldrsb.w	r0, [r4, #118]	; 0x76
	PR("[%2d] %p\t%d      %c%c%c   %16s\t%16s\n",
 800cdd2:	683d      	ldr	r5, [r7, #0]
 800cdd4:	f00d f895 	bl	8019f02 <net_if_get_by_index>
 800cdd8:	f7f9 fa96 	bl	8006308 <net_if_get_by_iface>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 800cddc:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
 800cde0:	3501      	adds	r5, #1
 800cde2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d05b      	beq.n	800cea2 <context_cb+0x132>
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	bf0c      	ite	eq
 800cdee:	2134      	moveq	r1, #52	; 0x34
 800cdf0:	2120      	movne	r1, #32
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 800cdf2:	f3c2 1281 	ubfx	r2, r2, #6, #2
 800cdf6:	2a02      	cmp	r2, #2
 800cdf8:	d055      	beq.n	800cea6 <context_cb+0x136>
 800cdfa:	2a01      	cmp	r2, #1
 800cdfc:	b2d3      	uxtb	r3, r2
 800cdfe:	d054      	beq.n	800ceaa <context_cb+0x13a>
 800ce00:	2b03      	cmp	r3, #3
 800ce02:	bf0c      	ite	eq
 800ce04:	2352      	moveq	r3, #82	; 0x52
 800ce06:	2320      	movne	r3, #32
	return context->proto;
 800ce08:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
 800ce0c:	2a11      	cmp	r2, #17
 800ce0e:	d04e      	beq.n	800ceae <context_cb+0x13e>
 800ce10:	2a06      	cmp	r2, #6
 800ce12:	bf0c      	ite	eq
 800ce14:	2254      	moveq	r2, #84	; 0x54
 800ce16:	2220      	movne	r2, #32
 800ce18:	9400      	str	r4, [sp, #0]
 800ce1a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ce1e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800ce22:	462b      	mov	r3, r5
 800ce24:	4a24      	ldr	r2, [pc, #144]	; (800ceb8 <context_cb+0x148>)
 800ce26:	2108      	movs	r1, #8
 800ce28:	4648      	mov	r0, r9
 800ce2a:	e9cd 6805 	strd	r6, r8, [sp, #20]
 800ce2e:	f006 fee5 	bl	8013bfc <shell_fprintf>
	(*count)++;
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	3301      	adds	r3, #1
 800ce36:	603b      	str	r3, [r7, #0]
}
 800ce38:	b021      	add	sp, #132	; 0x84
 800ce3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (context->local.family == AF_INET) {
 800ce3e:	2d01      	cmp	r5, #1
 800ce40:	d119      	bne.n	800ce76 <context_cb+0x106>
		snprintk(addr_local, local_len, "%s:%d",
 800ce42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ce44:	4628      	mov	r0, r5
 800ce46:	f7f9 fcb1 	bl	80067ac <net_sprint_addr>
 800ce4a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	212f      	movs	r1, #47	; 0x2f
 800ce50:	ba52      	rev16	r2, r2
 800ce52:	4630      	mov	r0, r6
 800ce54:	b292      	uxth	r2, r2
 800ce56:	9200      	str	r2, [sp, #0]
 800ce58:	4a18      	ldr	r2, [pc, #96]	; (800cebc <context_cb+0x14c>)
 800ce5a:	f006 f91d 	bl	8013098 <snprintk>
		snprintk(addr_remote, remote_len, "%s:%d",
 800ce5e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800ce62:	4628      	mov	r0, r5
 800ce64:	f7f9 fca2 	bl	80067ac <net_sprint_addr>
 800ce68:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	ba52      	rev16	r2, r2
 800ce6e:	b292      	uxth	r2, r2
 800ce70:	9200      	str	r2, [sp, #0]
 800ce72:	4a12      	ldr	r2, [pc, #72]	; (800cebc <context_cb+0x14c>)
 800ce74:	e7a7      	b.n	800cdc6 <context_cb+0x56>
	if (context->local.family == AF_UNSPEC) {
 800ce76:	b92d      	cbnz	r5, 800ce84 <context_cb+0x114>
		snprintk(addr_local, local_len, "AF_UNSPEC");
 800ce78:	4a11      	ldr	r2, [pc, #68]	; (800cec0 <context_cb+0x150>)
		snprintk(addr_local, local_len, "AF_CAN");
 800ce7a:	212f      	movs	r1, #47	; 0x2f
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f006 f90b 	bl	8013098 <snprintk>
 800ce82:	e7a4      	b.n	800cdce <context_cb+0x5e>
	} else if (context->local.family == AF_PACKET) {
 800ce84:	2d03      	cmp	r5, #3
 800ce86:	d101      	bne.n	800ce8c <context_cb+0x11c>
		snprintk(addr_local, local_len, "AF_PACKET");
 800ce88:	4a0e      	ldr	r2, [pc, #56]	; (800cec4 <context_cb+0x154>)
 800ce8a:	e7f6      	b.n	800ce7a <context_cb+0x10a>
	} else if (context->local.family == AF_CAN) {
 800ce8c:	2d04      	cmp	r5, #4
 800ce8e:	d101      	bne.n	800ce94 <context_cb+0x124>
		snprintk(addr_local, local_len, "AF_CAN");
 800ce90:	4a0d      	ldr	r2, [pc, #52]	; (800cec8 <context_cb+0x158>)
 800ce92:	e7f2      	b.n	800ce7a <context_cb+0x10a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
 800ce94:	462b      	mov	r3, r5
 800ce96:	4a0d      	ldr	r2, [pc, #52]	; (800cecc <context_cb+0x15c>)
 800ce98:	212f      	movs	r1, #47	; 0x2f
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	f006 f8fc 	bl	8013098 <snprintk>
 800cea0:	e795      	b.n	800cdce <context_cb+0x5e>
	PR("[%2d] %p\t%d      %c%c%c   %16s\t%16s\n",
 800cea2:	2136      	movs	r1, #54	; 0x36
 800cea4:	e7a5      	b.n	800cdf2 <context_cb+0x82>
 800cea6:	2344      	movs	r3, #68	; 0x44
 800cea8:	e7ae      	b.n	800ce08 <context_cb+0x98>
 800ceaa:	2353      	movs	r3, #83	; 0x53
 800ceac:	e7ac      	b.n	800ce08 <context_cb+0x98>
 800ceae:	2255      	movs	r2, #85	; 0x55
 800ceb0:	e7b2      	b.n	800ce18 <context_cb+0xa8>
 800ceb2:	bf00      	nop
 800ceb4:	0801fdd0 	.word	0x0801fdd0
 800ceb8:	0801fde9 	.word	0x0801fde9
 800cebc:	0801fdd8 	.word	0x0801fdd8
 800cec0:	0801eaba 	.word	0x0801eaba
 800cec4:	0801ead5 	.word	0x0801ead5
 800cec8:	0801eadf 	.word	0x0801eadf
 800cecc:	0801fdde 	.word	0x0801fdde

0800ced0 <cmd_net_resume>:
 800ced0:	4a03      	ldr	r2, [pc, #12]	; (800cee0 <cmd_net_resume+0x10>)
 800ced2:	2102      	movs	r1, #2
 800ced4:	b508      	push	{r3, lr}
 800ced6:	f006 fe91 	bl	8013bfc <shell_fprintf>
 800ceda:	2000      	movs	r0, #0
 800cedc:	bd08      	pop	{r3, pc}
 800cede:	bf00      	nop
 800cee0:	0801ee20 	.word	0x0801ee20

0800cee4 <cmd_net_events_off>:
 800cee4:	4a03      	ldr	r2, [pc, #12]	; (800cef4 <cmd_net_events_off+0x10>)
 800cee6:	2102      	movs	r1, #2
 800cee8:	b508      	push	{r3, lr}
 800ceea:	f006 fe87 	bl	8013bfc <shell_fprintf>
 800ceee:	2000      	movs	r0, #0
 800cef0:	bd08      	pop	{r3, pc}
 800cef2:	bf00      	nop
 800cef4:	0801ef50 	.word	0x0801ef50

0800cef8 <cmd_net_events>:
 800cef8:	4a03      	ldr	r2, [pc, #12]	; (800cf08 <cmd_net_events+0x10>)
 800cefa:	2102      	movs	r1, #2
 800cefc:	b508      	push	{r3, lr}
 800cefe:	f006 fe7d 	bl	8013bfc <shell_fprintf>
 800cf02:	2000      	movs	r0, #0
 800cf04:	bd08      	pop	{r3, pc}
 800cf06:	bf00      	nop
 800cf08:	0801ef50 	.word	0x0801ef50

0800cf0c <iface2str>:
	if (!iface || !iface->if_dev) {
 800cf0c:	b150      	cbz	r0, 800cf24 <iface2str+0x18>
 800cf0e:	6803      	ldr	r3, [r0, #0]
 800cf10:	b143      	cbz	r3, 800cf24 <iface2str+0x18>
	if (net_if_l2(iface) == &NET_L2_GET_NAME(ETHERNET)) {
 800cf12:	685a      	ldr	r2, [r3, #4]
 800cf14:	4b06      	ldr	r3, [pc, #24]	; (800cf30 <iface2str+0x24>)
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d104      	bne.n	800cf24 <iface2str+0x18>
		if (extra) {
 800cf1a:	b109      	cbz	r1, 800cf20 <iface2str+0x14>
			*extra = "========";
 800cf1c:	4b05      	ldr	r3, [pc, #20]	; (800cf34 <iface2str+0x28>)
 800cf1e:	600b      	str	r3, [r1, #0]
		return "Ethernet";
 800cf20:	4805      	ldr	r0, [pc, #20]	; (800cf38 <iface2str+0x2c>)
 800cf22:	4770      	bx	lr
	if (extra) {
 800cf24:	b109      	cbz	r1, 800cf2a <iface2str+0x1e>
		*extra = "==============";
 800cf26:	4b05      	ldr	r3, [pc, #20]	; (800cf3c <iface2str+0x30>)
 800cf28:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
 800cf2a:	4805      	ldr	r0, [pc, #20]	; (800cf40 <iface2str+0x34>)
}
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	240012f4 	.word	0x240012f4
 800cf34:	0801fe2c 	.word	0x0801fe2c
 800cf38:	0801fe0e 	.word	0x0801fe0e
 800cf3c:	0801fe26 	.word	0x0801fe26
 800cf40:	0801fe17 	.word	0x0801fe17

0800cf44 <iface_index_get>:
{
 800cf44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	entry->handler = NULL;
 800cf48:	f04f 0900 	mov.w	r9, #0
{
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	460d      	mov	r5, r1
	entry->handler = NULL;
 800cf50:	f8c1 900c 	str.w	r9, [r1, #12]
	struct net_if *iface = net_if_get_by_index(idx);
 800cf54:	f00c ffd5 	bl	8019f02 <net_if_get_by_index>
	if (!iface) {
 800cf58:	4604      	mov	r4, r0
 800cf5a:	b178      	cbz	r0, 800cf7c <iface_index_get+0x38>
	snprintk(iface_help_buffer[idx], MAX_IFACE_HELP_STR_LEN,
 800cf5c:	f04f 081c 	mov.w	r8, #28
 800cf60:	4f11      	ldr	r7, [pc, #68]	; (800cfa8 <iface_index_get+0x64>)
 800cf62:	4649      	mov	r1, r9
 800cf64:	fb08 7706 	mla	r7, r8, r6, r7
 800cf68:	f7ff ffd0 	bl	800cf0c <iface2str>
 800cf6c:	9400      	str	r4, [sp, #0]
 800cf6e:	4603      	mov	r3, r0
	return iface_help_buffer[idx];
 800cf70:	463c      	mov	r4, r7
	snprintk(iface_help_buffer[idx], MAX_IFACE_HELP_STR_LEN,
 800cf72:	4a0e      	ldr	r2, [pc, #56]	; (800cfac <iface_index_get+0x68>)
 800cf74:	4641      	mov	r1, r8
 800cf76:	4638      	mov	r0, r7
 800cf78:	f006 f88e 	bl	8013098 <snprintk>
	entry->subcmd = &iface_index;
 800cf7c:	4b0c      	ldr	r3, [pc, #48]	; (800cfb0 <iface_index_get+0x6c>)
	struct net_if *iface = net_if_get_by_index(idx);
 800cf7e:	4630      	mov	r0, r6
	entry->help  = set_iface_index_help(idx);
 800cf80:	606c      	str	r4, [r5, #4]
	entry->subcmd = &iface_index;
 800cf82:	60ab      	str	r3, [r5, #8]
	struct net_if *iface = net_if_get_by_index(idx);
 800cf84:	f00c ffbd 	bl	8019f02 <net_if_get_by_index>
	if (!iface) {
 800cf88:	4604      	mov	r4, r0
 800cf8a:	b140      	cbz	r0, 800cf9e <iface_index_get+0x5a>
	snprintk(iface_index_buffer[idx], MAX_IFACE_STR_LEN, "%zu", idx);
 800cf8c:	4c09      	ldr	r4, [pc, #36]	; (800cfb4 <iface_index_get+0x70>)
 800cf8e:	4633      	mov	r3, r6
 800cf90:	4a09      	ldr	r2, [pc, #36]	; (800cfb8 <iface_index_get+0x74>)
 800cf92:	2104      	movs	r1, #4
 800cf94:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f006 f87d 	bl	8013098 <snprintk>
	entry->syntax = set_iface_index_buffer(idx);
 800cf9e:	602c      	str	r4, [r5, #0]
}
 800cfa0:	b003      	add	sp, #12
 800cfa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfa6:	bf00      	nop
 800cfa8:	24003169 	.word	0x24003169
 800cfac:	0801fe35 	.word	0x0801fe35
 800cfb0:	0801cadc 	.word	0x0801cadc
 800cfb4:	24003185 	.word	0x24003185
 800cfb8:	0801fe3d 	.word	0x0801fe3d

0800cfbc <ip_address_lifetime_cb>:
{
 800cfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc0:	4606      	mov	r6, r0
 800cfc2:	b086      	sub	sp, #24
	const struct shell *sh = data->sh;
 800cfc4:	680d      	ldr	r5, [r1, #0]
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 800cfc6:	68c4      	ldr	r4, [r0, #12]
	PR("\nIPv4 addresses for interface %d (%p) (%s)\n",
 800cfc8:	f7f9 f99e 	bl	8006308 <net_if_get_by_iface>
 800cfcc:	4607      	mov	r7, r0
 800cfce:	a905      	add	r1, sp, #20
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7ff ff9b 	bl	800cf0c <iface2str>
 800cfd6:	463b      	mov	r3, r7
 800cfd8:	4a24      	ldr	r2, [pc, #144]	; (800d06c <ip_address_lifetime_cb+0xb0>)
 800cfda:	2108      	movs	r1, #8
 800cfdc:	e9cd 6000 	strd	r6, r0, [sp]
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f006 fe0b 	bl	8013bfc <shell_fprintf>
	PR("============================================%s\n", extra);
 800cfe6:	9b05      	ldr	r3, [sp, #20]
 800cfe8:	4a21      	ldr	r2, [pc, #132]	; (800d070 <ip_address_lifetime_cb+0xb4>)
 800cfea:	2108      	movs	r1, #8
 800cfec:	4628      	mov	r0, r5
 800cfee:	f006 fe05 	bl	8013bfc <shell_fprintf>
	if (!ipv4) {
 800cff2:	b93c      	cbnz	r4, 800d004 <ip_address_lifetime_cb+0x48>
		PR("No IPv4 config found for this interface.\n");
 800cff4:	4a1f      	ldr	r2, [pc, #124]	; (800d074 <ip_address_lifetime_cb+0xb8>)
 800cff6:	2108      	movs	r1, #8
 800cff8:	4628      	mov	r0, r5
 800cffa:	f006 fdff 	bl	8013bfc <shell_fprintf>
}
 800cffe:	b006      	add	sp, #24
 800d000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	PR("Type      \tState    \tLifetime (sec)\tAddress\n");
 800d004:	4a1c      	ldr	r2, [pc, #112]	; (800d078 <ip_address_lifetime_cb+0xbc>)
 800d006:	2108      	movs	r1, #8
 800d008:	4628      	mov	r0, r5
 800d00a:	f006 fdf7 	bl	8013bfc <shell_fprintf>
		if (!ipv4->unicast[i].is_used ||
 800d00e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800d012:	079b      	lsls	r3, r3, #30
 800d014:	d5f3      	bpl.n	800cffe <ip_address_lifetime_cb+0x42>
 800d016:	8823      	ldrh	r3, [r4, #0]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d1f0      	bne.n	800cffe <ip_address_lifetime_cb+0x42>
		PR("%s  \t%s    \t%12s/%12s\n",
 800d01c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d020:	1d21      	adds	r1, r4, #4
 800d022:	2001      	movs	r0, #1
 800d024:	2b04      	cmp	r3, #4
 800d026:	bf96      	itet	ls
 800d028:	4a14      	ldrls	r2, [pc, #80]	; (800d07c <ip_address_lifetime_cb+0xc0>)
 800d02a:	4f15      	ldrhi	r7, [pc, #84]	; (800d080 <ip_address_lifetime_cb+0xc4>)
	switch (addr_state) {
 800d02c:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
 800d030:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800d034:	3201      	adds	r2, #1
 800d036:	b2d2      	uxtb	r2, r2
 800d038:	2a03      	cmp	r2, #3
 800d03a:	bf96      	itet	ls
 800d03c:	4b11      	ldrls	r3, [pc, #68]	; (800d084 <ip_address_lifetime_cb+0xc8>)
 800d03e:	f8df 8048 	ldrhi.w	r8, [pc, #72]	; 800d088 <ip_address_lifetime_cb+0xcc>
 800d042:	f853 8022 	ldrls.w	r8, [r3, r2, lsl #2]
		PR("%s  \t%s    \t%12s/%12s\n",
 800d046:	f7f9 fbb1 	bl	80067ac <net_sprint_addr>
 800d04a:	4606      	mov	r6, r0
 800d04c:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800d050:	2001      	movs	r0, #1
 800d052:	f7f9 fbab 	bl	80067ac <net_sprint_addr>
 800d056:	463b      	mov	r3, r7
 800d058:	4a0c      	ldr	r2, [pc, #48]	; (800d08c <ip_address_lifetime_cb+0xd0>)
 800d05a:	2108      	movs	r1, #8
 800d05c:	f8cd 8000 	str.w	r8, [sp]
 800d060:	e9cd 6001 	strd	r6, r0, [sp, #4]
 800d064:	4628      	mov	r0, r5
 800d066:	f006 fdc9 	bl	8013bfc <shell_fprintf>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 800d06a:	e7c8      	b.n	800cffe <ip_address_lifetime_cb+0x42>
 800d06c:	0801fe50 	.word	0x0801fe50
 800d070:	0801fe7c 	.word	0x0801fe7c
 800d074:	0801feac 	.word	0x0801feac
 800d078:	0801fed6 	.word	0x0801fed6
 800d07c:	0801d0ac 	.word	0x0801d0ac
 800d080:	0801fe41 	.word	0x0801fe41
 800d084:	0801d0c0 	.word	0x0801d0c0
 800d088:	0801ebf5 	.word	0x0801ebf5
 800d08c:	0801ff03 	.word	0x0801ff03

0800d090 <iface_per_route_cb>:
{
 800d090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d092:	4605      	mov	r5, r0
 800d094:	b085      	sub	sp, #20
 800d096:	460c      	mov	r4, r1
	const struct shell *sh = data->sh;
 800d098:	680f      	ldr	r7, [r1, #0]
	PR("\nIPv6 routes for interface %d (%p) (%s)\n",
 800d09a:	f7f9 f935 	bl	8006308 <net_if_get_by_iface>
 800d09e:	4606      	mov	r6, r0
 800d0a0:	a903      	add	r1, sp, #12
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f7ff ff32 	bl	800cf0c <iface2str>
 800d0a8:	4633      	mov	r3, r6
 800d0aa:	4a0a      	ldr	r2, [pc, #40]	; (800d0d4 <iface_per_route_cb+0x44>)
 800d0ac:	2108      	movs	r1, #8
 800d0ae:	e9cd 5000 	strd	r5, r0, [sp]
 800d0b2:	4638      	mov	r0, r7
 800d0b4:	f006 fda2 	bl	8013bfc <shell_fprintf>
	PR("=========================================%s\n", extra);
 800d0b8:	9b03      	ldr	r3, [sp, #12]
 800d0ba:	4a07      	ldr	r2, [pc, #28]	; (800d0d8 <iface_per_route_cb+0x48>)
 800d0bc:	4638      	mov	r0, r7
 800d0be:	2108      	movs	r1, #8
 800d0c0:	f006 fd9c 	bl	8013bfc <shell_fprintf>
	net_route_foreach(route_cb, data);
 800d0c4:	4621      	mov	r1, r4
	data->user_data = iface;
 800d0c6:	6065      	str	r5, [r4, #4]
	net_route_foreach(route_cb, data);
 800d0c8:	4804      	ldr	r0, [pc, #16]	; (800d0dc <iface_per_route_cb+0x4c>)
 800d0ca:	f7fc fc8b 	bl	80099e4 <net_route_foreach>
}
 800d0ce:	b005      	add	sp, #20
 800d0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	0801ff1a 	.word	0x0801ff1a
 800d0d8:	0801fe7f 	.word	0x0801fe7f
 800d0dc:	0800d3d9 	.word	0x0800d3d9

0800d0e0 <parse_arg>:
{
 800d0e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const char *str = argv[*i] + 2;
 800d0e2:	6803      	ldr	r3, [r0, #0]
 800d0e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d0e8:	009d      	lsls	r5, r3, #2
	if (*str == 0) {
 800d0ea:	78a6      	ldrb	r6, [r4, #2]
 800d0ec:	b1e6      	cbz	r6, 800d128 <parse_arg+0x48>
	const char *str = argv[*i] + 2;
 800d0ee:	3402      	adds	r4, #2
 800d0f0:	f004 fb1a 	bl	8011728 <z_impl_z_errno>
	errno = 0;
 800d0f4:	2300      	movs	r3, #0
	if (strncmp(str, "0x", 2) == 0) {
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	4910      	ldr	r1, [pc, #64]	; (800d13c <parse_arg+0x5c>)
	errno = 0;
 800d0fa:	6003      	str	r3, [r0, #0]
	if (strncmp(str, "0x", 2) == 0) {
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f007 fd80 	bl	8014c02 <strncmp>
 800d102:	b9c0      	cbnz	r0, 800d136 <parse_arg+0x56>
		res = strtol(str, &endptr, 16);
 800d104:	2210      	movs	r2, #16
		res = strtol(str, &endptr, 10);
 800d106:	a901      	add	r1, sp, #4
 800d108:	4620      	mov	r0, r4
 800d10a:	f007 fc24 	bl	8014956 <strtol>
 800d10e:	4605      	mov	r5, r0
 800d110:	f004 fb0a 	bl	8011728 <z_impl_z_errno>
	if (errno || (endptr == str)) {
 800d114:	6803      	ldr	r3, [r0, #0]
 800d116:	b913      	cbnz	r3, 800d11e <parse_arg+0x3e>
 800d118:	9b01      	ldr	r3, [sp, #4]
 800d11a:	42a3      	cmp	r3, r4
 800d11c:	d101      	bne.n	800d122 <parse_arg+0x42>
		return -1;
 800d11e:	f04f 35ff 	mov.w	r5, #4294967295
}
 800d122:	4628      	mov	r0, r5
 800d124:	b002      	add	sp, #8
 800d126:	bd70      	pop	{r4, r5, r6, pc}
		if (*i + 1 >= argc) {
 800d128:	3301      	adds	r3, #1
 800d12a:	428b      	cmp	r3, r1
 800d12c:	d2f7      	bcs.n	800d11e <parse_arg+0x3e>
		str = argv[*i];
 800d12e:	442a      	add	r2, r5
		*i += 1;
 800d130:	6003      	str	r3, [r0, #0]
		str = argv[*i];
 800d132:	6854      	ldr	r4, [r2, #4]
 800d134:	e7dc      	b.n	800d0f0 <parse_arg+0x10>
		res = strtol(str, &endptr, 10);
 800d136:	220a      	movs	r2, #10
 800d138:	e7e5      	b.n	800d106 <parse_arg+0x26>
 800d13a:	bf00      	nop
 800d13c:	0802189b 	.word	0x0802189b

0800d140 <cmd_net_ping>:
{
 800d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 1; i < argc; ++i) {
 800d144:	2301      	movs	r3, #1
{
 800d146:	b085      	sub	sp, #20
	int tos = 0;
 800d148:	2700      	movs	r7, #0
{
 800d14a:	4604      	mov	r4, r0
	for (size_t i = 1; i < argc; ++i) {
 800d14c:	9303      	str	r3, [sp, #12]
{
 800d14e:	468a      	mov	sl, r1
	int interval = 1000;
 800d150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 800d154:	4615      	mov	r5, r2
	int payload_size = 4;
 800d156:	f04f 0904 	mov.w	r9, #4
	int iface_idx = -1;
 800d15a:	f04f 38ff 	mov.w	r8, #4294967295
	int count = 3;
 800d15e:	f04f 0b03 	mov.w	fp, #3
	char *host = NULL;
 800d162:	463e      	mov	r6, r7
	int interval = 1000;
 800d164:	9301      	str	r3, [sp, #4]
	for (size_t i = 1; i < argc; ++i) {
 800d166:	9b03      	ldr	r3, [sp, #12]
 800d168:	4553      	cmp	r3, sl
 800d16a:	d307      	bcc.n	800d17c <cmd_net_ping+0x3c>
	if (!host) {
 800d16c:	2e00      	cmp	r6, #0
 800d16e:	d15a      	bne.n	800d226 <cmd_net_ping+0xe6>
		PR_WARNING("Target host missing\n");
 800d170:	4a60      	ldr	r2, [pc, #384]	; (800d2f4 <cmd_net_ping+0x1b4>)
 800d172:	2103      	movs	r1, #3
 800d174:	4620      	mov	r0, r4
 800d176:	f006 fd41 	bl	8013bfc <shell_fprintf>
 800d17a:	e02c      	b.n	800d1d6 <cmd_net_ping+0x96>
		if (*argv[i] != '-') {
 800d17c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800d180:	781a      	ldrb	r2, [r3, #0]
 800d182:	2a2d      	cmp	r2, #45	; 0x2d
 800d184:	d14d      	bne.n	800d222 <cmd_net_ping+0xe2>
		switch (argv[i][1]) {
 800d186:	785a      	ldrb	r2, [r3, #1]
 800d188:	2a63      	cmp	r2, #99	; 0x63
 800d18a:	d014      	beq.n	800d1b6 <cmd_net_ping+0x76>
 800d18c:	d805      	bhi.n	800d19a <cmd_net_ping+0x5a>
 800d18e:	2a49      	cmp	r2, #73	; 0x49
 800d190:	d02e      	beq.n	800d1f0 <cmd_net_ping+0xb0>
 800d192:	2a51      	cmp	r2, #81	; 0x51
 800d194:	d03c      	beq.n	800d210 <cmd_net_ping+0xd0>
			PR_WARNING("Unrecognized argument: %s\n", argv[i]);
 800d196:	4a58      	ldr	r2, [pc, #352]	; (800d2f8 <cmd_net_ping+0x1b8>)
 800d198:	e019      	b.n	800d1ce <cmd_net_ping+0x8e>
		switch (argv[i][1]) {
 800d19a:	2a69      	cmp	r2, #105	; 0x69
 800d19c:	d020      	beq.n	800d1e0 <cmd_net_ping+0xa0>
 800d19e:	2a73      	cmp	r2, #115	; 0x73
 800d1a0:	d1f9      	bne.n	800d196 <cmd_net_ping+0x56>
			payload_size = parse_arg(&i, argc, argv);
 800d1a2:	462a      	mov	r2, r5
 800d1a4:	4651      	mov	r1, sl
 800d1a6:	a803      	add	r0, sp, #12
 800d1a8:	f7ff ff9a 	bl	800d0e0 <parse_arg>
			if (payload_size < 0 || payload_size > UINT16_MAX) {
 800d1ac:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
			payload_size = parse_arg(&i, argc, argv);
 800d1b0:	4681      	mov	r9, r0
			if (payload_size < 0 || payload_size > UINT16_MAX) {
 800d1b2:	d329      	bcc.n	800d208 <cmd_net_ping+0xc8>
 800d1b4:	e007      	b.n	800d1c6 <cmd_net_ping+0x86>
			count = parse_arg(&i, argc, argv);
 800d1b6:	462a      	mov	r2, r5
 800d1b8:	4651      	mov	r1, sl
 800d1ba:	a803      	add	r0, sp, #12
 800d1bc:	f7ff ff90 	bl	800d0e0 <parse_arg>
			if (count < 0) {
 800d1c0:	f1b0 0b00 	subs.w	fp, r0, #0
			if (interval < 0) {
 800d1c4:	da20      	bge.n	800d208 <cmd_net_ping+0xc8>
				PR_WARNING("Parse error: %s\n", argv[i]);
 800d1c6:	9b03      	ldr	r3, [sp, #12]
 800d1c8:	4a4c      	ldr	r2, [pc, #304]	; (800d2fc <cmd_net_ping+0x1bc>)
 800d1ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			PR_WARNING("Unrecognized argument: %s\n", argv[i]);
 800d1ce:	2103      	movs	r1, #3
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f006 fd13 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800d1d6:	f06f 0007 	mvn.w	r0, #7
}
 800d1da:	b005      	add	sp, #20
 800d1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			interval = parse_arg(&i, argc, argv);
 800d1e0:	462a      	mov	r2, r5
 800d1e2:	4651      	mov	r1, sl
 800d1e4:	a803      	add	r0, sp, #12
 800d1e6:	f7ff ff7b 	bl	800d0e0 <parse_arg>
			if (interval < 0) {
 800d1ea:	1e03      	subs	r3, r0, #0
 800d1ec:	9301      	str	r3, [sp, #4]
 800d1ee:	e7e9      	b.n	800d1c4 <cmd_net_ping+0x84>
			iface_idx = parse_arg(&i, argc, argv);
 800d1f0:	462a      	mov	r2, r5
 800d1f2:	4651      	mov	r1, sl
 800d1f4:	a803      	add	r0, sp, #12
 800d1f6:	f7ff ff73 	bl	800d0e0 <parse_arg>
			if (iface_idx < 0 || !net_if_get_by_index(iface_idx)) {
 800d1fa:	f1b0 0800 	subs.w	r8, r0, #0
 800d1fe:	dbe2      	blt.n	800d1c6 <cmd_net_ping+0x86>
 800d200:	f00c fe7f 	bl	8019f02 <net_if_get_by_index>
 800d204:	2800      	cmp	r0, #0
 800d206:	d0de      	beq.n	800d1c6 <cmd_net_ping+0x86>
	for (size_t i = 1; i < argc; ++i) {
 800d208:	9b03      	ldr	r3, [sp, #12]
 800d20a:	3301      	adds	r3, #1
 800d20c:	9303      	str	r3, [sp, #12]
 800d20e:	e7aa      	b.n	800d166 <cmd_net_ping+0x26>
			tos = parse_arg(&i, argc, argv);
 800d210:	462a      	mov	r2, r5
 800d212:	4651      	mov	r1, sl
 800d214:	a803      	add	r0, sp, #12
 800d216:	f7ff ff63 	bl	800d0e0 <parse_arg>
			if (tos < 0 || tos > UINT8_MAX) {
 800d21a:	28ff      	cmp	r0, #255	; 0xff
			tos = parse_arg(&i, argc, argv);
 800d21c:	4607      	mov	r7, r0
			if (tos < 0 || tos > UINT8_MAX) {
 800d21e:	d9f3      	bls.n	800d208 <cmd_net_ping+0xc8>
 800d220:	e7d1      	b.n	800d1c6 <cmd_net_ping+0x86>
 800d222:	461e      	mov	r6, r3
 800d224:	e7f0      	b.n	800d208 <cmd_net_ping+0xc8>
	memset(&ping_ctx, 0, sizeof(ping_ctx));
 800d226:	4d36      	ldr	r5, [pc, #216]	; (800d300 <cmd_net_ping+0x1c0>)
 800d228:	2260      	movs	r2, #96	; 0x60
 800d22a:	2100      	movs	r1, #0
 800d22c:	4628      	mov	r0, r5
 800d22e:	f007 fd2d 	bl	8014c8c <memset>
	k_work_init_delayable(&ping_ctx.work, ping_work);
 800d232:	4934      	ldr	r1, [pc, #208]	; (800d304 <cmd_net_ping+0x1c4>)
 800d234:	4628      	mov	r0, r5
 800d236:	f00e fc65 	bl	801bb04 <k_work_init_delayable>
	ping_ctx.interval = interval;
 800d23a:	9b01      	ldr	r3, [sp, #4]
	    net_addr_pton(AF_INET6, host, &ping_ctx.addr.in6_addr) == 0) {
 800d23c:	f105 0234 	add.w	r2, r5, #52	; 0x34
 800d240:	4631      	mov	r1, r6
 800d242:	2002      	movs	r0, #2
	ping_ctx.interval = interval;
 800d244:	652b      	str	r3, [r5, #80]	; 0x50
	ping_ctx.tos = tos;
 800d246:	f885 705a 	strb.w	r7, [r5, #90]	; 0x5a
	ping_ctx.payload_size = payload_size;
 800d24a:	f8a5 9058 	strh.w	r9, [r5, #88]	; 0x58
	ping_ctx.count = count;
 800d24e:	e9c5 4b12 	strd	r4, fp, [r5, #72]	; 0x48
	    net_addr_pton(AF_INET6, host, &ping_ctx.addr.in6_addr) == 0) {
 800d252:	f00c fe6a 	bl	8019f2a <net_addr_pton>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800d256:	b9a8      	cbnz	r0, 800d284 <cmd_net_ping+0x144>
		ping_ctx.addr.family = AF_INET6;
 800d258:	2302      	movs	r3, #2
		net_icmpv6_register_handler(&ping6_handler);
 800d25a:	482b      	ldr	r0, [pc, #172]	; (800d308 <cmd_net_ping+0x1c8>)
		ping_ctx.addr.family = AF_INET6;
 800d25c:	862b      	strh	r3, [r5, #48]	; 0x30
		net_icmpv6_register_handler(&ping6_handler);
 800d25e:	f7fa ffc3 	bl	80081e8 <net_icmpv6_register_handler>
	struct net_if *iface = net_if_get_by_index(id);
 800d262:	4640      	mov	r0, r8
 800d264:	f00c fe4d 	bl	8019f02 <net_if_get_by_index>
	if (iface != NULL) {
 800d268:	4603      	mov	r3, r0
 800d26a:	bb58      	cbnz	r0, 800d2c4 <cmd_net_ping+0x184>
	if (IS_ENABLED(CONFIG_NET_IPV4) && target->family == AF_INET) {
 800d26c:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 800d26e:	2a01      	cmp	r2, #1
 800d270:	d11c      	bne.n	800d2ac <cmd_net_ping+0x16c>
		iface = net_if_ipv4_select_src_iface(&target->in_addr);
 800d272:	4826      	ldr	r0, [pc, #152]	; (800d30c <cmd_net_ping+0x1cc>)
 800d274:	f7f8 fea2 	bl	8005fbc <net_if_ipv4_select_src_iface>
		if (iface != NULL) {
 800d278:	4603      	mov	r3, r0
 800d27a:	bb18      	cbnz	r0, 800d2c4 <cmd_net_ping+0x184>
		iface = net_if_get_default();
 800d27c:	f7f7 ff4e 	bl	800511c <net_if_get_default>
 800d280:	4603      	mov	r3, r0
 800d282:	e01f      	b.n	800d2c4 <cmd_net_ping+0x184>
		   net_addr_pton(AF_INET, host, &ping_ctx.addr.in_addr) == 0) {
 800d284:	f105 0234 	add.w	r2, r5, #52	; 0x34
 800d288:	4631      	mov	r1, r6
 800d28a:	2001      	movs	r0, #1
 800d28c:	f00c fe4d 	bl	8019f2a <net_addr_pton>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 800d290:	b928      	cbnz	r0, 800d29e <cmd_net_ping+0x15e>
		ping_ctx.addr.family = AF_INET;
 800d292:	2301      	movs	r3, #1
		net_icmpv4_register_handler(&ping4_handler);
 800d294:	481e      	ldr	r0, [pc, #120]	; (800d310 <cmd_net_ping+0x1d0>)
		ping_ctx.addr.family = AF_INET;
 800d296:	862b      	strh	r3, [r5, #48]	; 0x30
		net_icmpv4_register_handler(&ping4_handler);
 800d298:	f7fa ff3c 	bl	8008114 <net_icmpv4_register_handler>
 800d29c:	e7e1      	b.n	800d262 <cmd_net_ping+0x122>
		PR_WARNING("Invalid IP address\n");
 800d29e:	4a1d      	ldr	r2, [pc, #116]	; (800d314 <cmd_net_ping+0x1d4>)
 800d2a0:	2103      	movs	r1, #3
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f006 fcaa 	bl	8013bfc <shell_fprintf>
	return 0;
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	e796      	b.n	800d1da <cmd_net_ping+0x9a>
	if (IS_ENABLED(CONFIG_NET_IPV6) && target->family == AF_INET6) {
 800d2ac:	2a02      	cmp	r2, #2
 800d2ae:	d109      	bne.n	800d2c4 <cmd_net_ping+0x184>
		iface = net_if_ipv6_select_src_iface(&target->in6_addr);
 800d2b0:	4816      	ldr	r0, [pc, #88]	; (800d30c <cmd_net_ping+0x1cc>)
 800d2b2:	f008 fdbc 	bl	8015e2e <net_if_ipv6_select_src_iface>
		if (iface != NULL) {
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	b920      	cbnz	r0, 800d2c4 <cmd_net_ping+0x184>
		nbr = net_ipv6_nbr_lookup(NULL, &target->in6_addr);
 800d2ba:	4914      	ldr	r1, [pc, #80]	; (800d30c <cmd_net_ping+0x1cc>)
 800d2bc:	f00b fb2d 	bl	801891a <net_ipv6_nbr_lookup>
		if (nbr) {
 800d2c0:	b188      	cbz	r0, 800d2e6 <cmd_net_ping+0x1a6>
			iface = nbr->iface;
 800d2c2:	6883      	ldr	r3, [r0, #8]
	PR("PING %s\n", host);
 800d2c4:	4a14      	ldr	r2, [pc, #80]	; (800d318 <cmd_net_ping+0x1d8>)
 800d2c6:	4620      	mov	r0, r4
	ping_ctx.iface = ping_select_iface(iface_idx, &ping_ctx.addr);
 800d2c8:	646b      	str	r3, [r5, #68]	; 0x44
	PR("PING %s\n", host);
 800d2ca:	2108      	movs	r1, #8
 800d2cc:	4633      	mov	r3, r6
 800d2ce:	f006 fc95 	bl	8013bfc <shell_fprintf>
	shell_set_bypass(sh, ping_bypass);
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	4911      	ldr	r1, [pc, #68]	; (800d31c <cmd_net_ping+0x1dc>)
 800d2d6:	f006 fce3 	bl	8013ca0 <shell_set_bypass>
	k_work_reschedule(&ping_ctx.work, K_NO_WAIT);
 800d2da:	2200      	movs	r2, #0
 800d2dc:	2300      	movs	r3, #0
 800d2de:	4808      	ldr	r0, [pc, #32]	; (800d300 <cmd_net_ping+0x1c0>)
 800d2e0:	f005 f89c 	bl	801241c <k_work_reschedule>
 800d2e4:	e7e0      	b.n	800d2a8 <cmd_net_ping+0x168>
		route = net_route_lookup(NULL, &target->in6_addr);
 800d2e6:	4909      	ldr	r1, [pc, #36]	; (800d30c <cmd_net_ping+0x1cc>)
 800d2e8:	f7fc f96c 	bl	80095c4 <net_route_lookup>
		if (route) {
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d0c5      	beq.n	800d27c <cmd_net_ping+0x13c>
			iface = route->iface;
 800d2f0:	68c3      	ldr	r3, [r0, #12]
			goto out;
 800d2f2:	e7e7      	b.n	800d2c4 <cmd_net_ping+0x184>
 800d2f4:	0801ff6f 	.word	0x0801ff6f
 800d2f8:	0801ff54 	.word	0x0801ff54
 800d2fc:	0801ff43 	.word	0x0801ff43
 800d300:	240019d0 	.word	0x240019d0
 800d304:	0800d321 	.word	0x0800d321
 800d308:	24000f54 	.word	0x24000f54
 800d30c:	24001a04 	.word	0x24001a04
 800d310:	24000f48 	.word	0x24000f48
 800d314:	0801fcf6 	.word	0x0801fcf6
 800d318:	0801ff84 	.word	0x0801ff84
 800d31c:	0800c645 	.word	0x0800c645

0800d320 <ping_work>:
{
 800d320:	b5f0      	push	{r4, r5, r6, r7, lr}
	ctx->sequence++;
 800d322:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 800d324:	b085      	sub	sp, #20
	if (ctx->sequence > ctx->count) {
 800d326:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 800d328:	4604      	mov	r4, r0
	ctx->sequence++;
 800d32a:	3301      	adds	r3, #1
	const struct shell *sh = ctx->sh;
 800d32c:	6c85      	ldr	r5, [r0, #72]	; 0x48
	if (ctx->sequence > ctx->count) {
 800d32e:	4293      	cmp	r3, r2
	ctx->sequence++;
 800d330:	6543      	str	r3, [r0, #84]	; 0x54
	if (ctx->sequence > ctx->count) {
 800d332:	d90a      	bls.n	800d34a <ping_work+0x2a>
		PR_INFO("Ping timeout\n");
 800d334:	4a26      	ldr	r2, [pc, #152]	; (800d3d0 <ping_work+0xb0>)
 800d336:	2102      	movs	r1, #2
 800d338:	4628      	mov	r0, r5
 800d33a:	f006 fc5f 	bl	8013bfc <shell_fprintf>
		ping_done(ctx);
 800d33e:	4620      	mov	r0, r4
}
 800d340:	b005      	add	sp, #20
 800d342:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		ping_done(ctx);
 800d346:	f7fe be43 	b.w	800bfd0 <ping_done>
	if (ctx->addr.family == AF_INET6) {
 800d34a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
		ret = net_icmpv6_send_echo_request(ctx->iface,
 800d34c:	f100 0734 	add.w	r7, r0, #52	; 0x34
 800d350:	6c46      	ldr	r6, [r0, #68]	; 0x44
	if (ctx->addr.family == AF_INET6) {
 800d352:	2b02      	cmp	r3, #2
 800d354:	d118      	bne.n	800d388 <ping_work+0x68>
 800d356:	f7f6 fedf 	bl	8004118 <z_impl_sys_rand32_get>
		ret = net_icmpv6_send_echo_request(ctx->iface,
 800d35a:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 800d35e:	b282      	uxth	r2, r0
 800d360:	4639      	mov	r1, r7
 800d362:	9302      	str	r3, [sp, #8]
 800d364:	2300      	movs	r3, #0
 800d366:	4630      	mov	r0, r6
 800d368:	9301      	str	r3, [sp, #4]
 800d36a:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
 800d374:	f00b f8b4 	bl	80184e0 <net_icmpv6_send_echo_request>
		ret = net_icmpv4_send_echo_request(ctx->iface,
 800d378:	4603      	mov	r3, r0
	if (ret != 0) {
 800d37a:	b1b8      	cbz	r0, 800d3ac <ping_work+0x8c>
		PR_WARNING("Failed to send ping, err: %d", ret);
 800d37c:	4a15      	ldr	r2, [pc, #84]	; (800d3d4 <ping_work+0xb4>)
 800d37e:	2103      	movs	r1, #3
 800d380:	4628      	mov	r0, r5
 800d382:	f006 fc3b 	bl	8013bfc <shell_fprintf>
 800d386:	e7da      	b.n	800d33e <ping_work+0x1e>
 800d388:	f7f6 fec6 	bl	8004118 <z_impl_sys_rand32_get>
		ret = net_icmpv4_send_echo_request(ctx->iface,
 800d38c:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 800d390:	b282      	uxth	r2, r0
 800d392:	4639      	mov	r1, r7
 800d394:	9302      	str	r3, [sp, #8]
 800d396:	2300      	movs	r3, #0
 800d398:	4630      	mov	r0, r6
 800d39a:	9301      	str	r3, [sp, #4]
 800d39c:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
 800d3a6:	f00a fcae 	bl	8017d06 <net_icmpv4_send_echo_request>
 800d3aa:	e7e5      	b.n	800d378 <ping_work+0x58>
	if (ctx->sequence < ctx->count) {
 800d3ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
		k_work_reschedule(&ctx->work, K_SECONDS(2));
 800d3ae:	4620      	mov	r0, r4
	if (ctx->sequence < ctx->count) {
 800d3b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d3b2:	429a      	cmp	r2, r3
			return t * ((uint64_t)to_hz / from_hz);
 800d3b4:	bf39      	ittee	cc
 800d3b6:	6d22      	ldrcc	r2, [r4, #80]	; 0x50
 800d3b8:	230a      	movcc	r3, #10
		k_work_reschedule(&ctx->work, K_SECONDS(2));
 800d3ba:	f644 6220 	movwcs	r2, #20000	; 0x4e20
 800d3be:	2300      	movcs	r3, #0
		k_work_reschedule(&ctx->work, K_MSEC(ctx->interval));
 800d3c0:	bf38      	it	cc
 800d3c2:	fba2 2303 	umullcc	r2, r3, r2, r3
}
 800d3c6:	b005      	add	sp, #20
 800d3c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		k_work_reschedule(&ctx->work, K_SECONDS(2));
 800d3cc:	f005 b826 	b.w	801241c <k_work_reschedule>
 800d3d0:	0801ff8d 	.word	0x0801ff8d
 800d3d4:	0801ff9b 	.word	0x0801ff9b

0800d3d8 <route_cb>:
{
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	4604      	mov	r4, r0
 800d3de:	b087      	sub	sp, #28
	struct net_if *iface = data->user_data;
 800d3e0:	e9d1 5600 	ldrd	r5, r6, [r1]
	return z_impl_k_uptime_ticks();
 800d3e4:	f00e fd10 	bl	801be08 <z_impl_k_uptime_ticks>
	if (entry->iface != iface) {
 800d3e8:	68e3      	ldr	r3, [r4, #12]
 800d3ea:	42b3      	cmp	r3, r6
 800d3ec:	d162      	bne.n	800d4b4 <route_cb+0xdc>
			return t / ((uint64_t)from_hz / to_hz);
 800d3ee:	220a      	movs	r2, #10
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f7f3 fa1f 	bl	8000834 <__aeabi_uldivmod>
	PR("IPv6 prefix : %s/%d\n", net_sprint_ipv6_addr(&entry->addr),
 800d3f6:	f104 0120 	add.w	r1, r4, #32
 800d3fa:	4680      	mov	r8, r0
 800d3fc:	2002      	movs	r0, #2
 800d3fe:	f7f9 f9d5 	bl	80067ac <net_sprint_addr>
 800d402:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800d406:	4603      	mov	r3, r0
 800d408:	2108      	movs	r1, #8
 800d40a:	9200      	str	r2, [sp, #0]
 800d40c:	4628      	mov	r0, r5
 800d40e:	4a2b      	ldr	r2, [pc, #172]	; (800d4bc <route_cb+0xe4>)
 800d410:	2700      	movs	r7, #0
 800d412:	f006 fbf3 	bl	8013bfc <shell_fprintf>
	return list->head;
 800d416:	6866      	ldr	r6, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
 800d418:	b34e      	cbz	r6, 800d46e <route_cb+0x96>
		PR("\tneighbor : %p\t", nexthop_route->nbr);
 800d41a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800d4c0 <route_cb+0xe8>
		PR("lifetime : %s\n", remaining_str);
 800d41e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 800d4c4 <route_cb+0xec>
			snprintk(remaining_str, sizeof(remaining_str) - 1,
 800d422:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 800d4c8 <route_cb+0xf0>
		if (!nexthop_route->nbr) {
 800d426:	6873      	ldr	r3, [r6, #4]
 800d428:	b1eb      	cbz	r3, 800d466 <route_cb+0x8e>
		PR("\tneighbor : %p\t", nexthop_route->nbr);
 800d42a:	4628      	mov	r0, r5
 800d42c:	464a      	mov	r2, r9
 800d42e:	2108      	movs	r1, #8
 800d430:	f006 fbe4 	bl	8013bfc <shell_fprintf>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
 800d434:	6873      	ldr	r3, [r6, #4]
 800d436:	7858      	ldrb	r0, [r3, #1]
 800d438:	28ff      	cmp	r0, #255	; 0xff
 800d43a:	d120      	bne.n	800d47e <route_cb+0xa6>
			PR("addr : <unknown>\t");
 800d43c:	4a23      	ldr	r2, [pc, #140]	; (800d4cc <route_cb+0xf4>)
 800d43e:	2108      	movs	r1, #8
 800d440:	4628      	mov	r0, r5
 800d442:	f006 fbdb 	bl	8013bfc <shell_fprintf>
		if (entry->is_infinite) {
 800d446:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800d44a:	075b      	lsls	r3, r3, #29
 800d44c:	d526      	bpl.n	800d49c <route_cb+0xc4>
			snprintk(remaining_str, sizeof(remaining_str) - 1,
 800d44e:	4a20      	ldr	r2, [pc, #128]	; (800d4d0 <route_cb+0xf8>)
 800d450:	210f      	movs	r1, #15
 800d452:	a802      	add	r0, sp, #8
 800d454:	f005 fe20 	bl	8013098 <snprintk>
		count++;
 800d458:	3701      	adds	r7, #1
		PR("lifetime : %s\n", remaining_str);
 800d45a:	ab02      	add	r3, sp, #8
 800d45c:	4652      	mov	r2, sl
 800d45e:	2108      	movs	r1, #8
 800d460:	4628      	mov	r0, r5
 800d462:	f006 fbcb 	bl	8013bfc <shell_fprintf>
	return node->next;
 800d466:	6836      	ldr	r6, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
 800d468:	2e00      	cmp	r6, #0
 800d46a:	d1dc      	bne.n	800d426 <route_cb+0x4e>
	if (count == 0) {
 800d46c:	bb17      	cbnz	r7, 800d4b4 <route_cb+0xdc>
		PR("\t<none>\n");
 800d46e:	4a19      	ldr	r2, [pc, #100]	; (800d4d4 <route_cb+0xfc>)
 800d470:	2108      	movs	r1, #8
 800d472:	4628      	mov	r0, r5
}
 800d474:	b007      	add	sp, #28
 800d476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		PR("\t<none>\n");
 800d47a:	f006 bbbf 	b.w	8013bfc <shell_fprintf>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
 800d47e:	f7fa ff95 	bl	80083ac <net_nbr_get_lladdr>
 800d482:	2318      	movs	r3, #24
 800d484:	7841      	ldrb	r1, [r0, #1]
 800d486:	3002      	adds	r0, #2
 800d488:	4a13      	ldr	r2, [pc, #76]	; (800d4d8 <route_cb+0x100>)
 800d48a:	f7f9 f877 	bl	800657c <net_sprint_ll_addr_buf>
			PR("addr : %s\t", net_sprint_ll_addr(lladdr->addr,
 800d48e:	4a13      	ldr	r2, [pc, #76]	; (800d4dc <route_cb+0x104>)
 800d490:	4603      	mov	r3, r0
 800d492:	2108      	movs	r1, #8
 800d494:	4628      	mov	r0, r5
 800d496:	f006 fbb1 	bl	8013bfc <shell_fprintf>
 800d49a:	e7d4      	b.n	800d446 <route_cb+0x6e>
			remaining = net_timeout_remaining(&entry->lifetime, now);
 800d49c:	4641      	mov	r1, r8
 800d49e:	f104 0010 	add.w	r0, r4, #16
 800d4a2:	f008 fe10 	bl	80160c6 <net_timeout_remaining>
			snprintk(remaining_str, sizeof(remaining_str) - 1,
 800d4a6:	465a      	mov	r2, fp
			remaining = net_timeout_remaining(&entry->lifetime, now);
 800d4a8:	4603      	mov	r3, r0
			snprintk(remaining_str, sizeof(remaining_str) - 1,
 800d4aa:	210f      	movs	r1, #15
 800d4ac:	a802      	add	r0, sp, #8
 800d4ae:	f005 fdf3 	bl	8013098 <snprintk>
 800d4b2:	e7d1      	b.n	800d458 <route_cb+0x80>
}
 800d4b4:	b007      	add	sp, #28
 800d4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ba:	bf00      	nop
 800d4bc:	0801ffb8 	.word	0x0801ffb8
 800d4c0:	0801ffcd 	.word	0x0801ffcd
 800d4c4:	08020001 	.word	0x08020001
 800d4c8:	0801fffa 	.word	0x0801fffa
 800d4cc:	0801ffdd 	.word	0x0801ffdd
 800d4d0:	0802019f 	.word	0x0802019f
 800d4d4:	08020010 	.word	0x08020010
 800d4d8:	24003151 	.word	0x24003151
 800d4dc:	0801ffef 	.word	0x0801ffef

0800d4e0 <handle_ipv6_echo_reply>:
{
 800d4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4e4:	b08e      	sub	sp, #56	; 0x38
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	2404      	movs	r4, #4
{
 800d4ea:	460e      	mov	r6, r1
	icmp_echo = (struct net_icmpv6_echo_req *)net_pkt_get_data(pkt,
 800d4ec:	a908      	add	r1, sp, #32
{
 800d4ee:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 800d4f0:	e9cd 3408 	strd	r3, r4, [sp, #32]
	char time_buf[16] = { 0 };
 800d4f4:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800d4f8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
	icmp_echo = (struct net_icmpv6_echo_req *)net_pkt_get_data(pkt,
 800d4fc:	f00a fa14 	bl	8017928 <net_pkt_get_data>
	if (icmp_echo == NULL) {
 800d500:	4607      	mov	r7, r0
 800d502:	b918      	cbnz	r0, 800d50c <handle_ipv6_echo_reply+0x2c>
		return -NET_DROP;
 800d504:	20fe      	movs	r0, #254	; 0xfe
}
 800d506:	b00e      	add	sp, #56	; 0x38
 800d508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	net_pkt_skip(pkt, sizeof(*icmp_echo));
 800d50c:	4621      	mov	r1, r4
 800d50e:	4628      	mov	r0, r5
 800d510:	f009 ffdd 	bl	80174ce <net_pkt_skip>
	if (net_pkt_remaining_data(pkt) >= sizeof(uint32_t)) {
 800d514:	4628      	mov	r0, r5
 800d516:	f00a f8fb 	bl	8017710 <net_pkt_remaining_data>
 800d51a:	2803      	cmp	r0, #3
 800d51c:	d92f      	bls.n	800d57e <handle_ipv6_echo_reply+0x9e>
		if (net_pkt_read_be32(pkt, &cycles)) {
 800d51e:	a907      	add	r1, sp, #28
 800d520:	4628      	mov	r0, r5
 800d522:	f00a f894 	bl	801764e <net_pkt_read_be32>
 800d526:	4604      	mov	r4, r0
 800d528:	2800      	cmp	r0, #0
 800d52a:	d1eb      	bne.n	800d504 <handle_ipv6_echo_reply+0x24>
 800d52c:	f002 ffaa 	bl	8010484 <sys_clock_cycle_get_32>
		cycles = k_cycle_get_32() - cycles;
 800d530:	9b07      	ldr	r3, [sp, #28]
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
 800d532:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800d5e8 <handle_ipv6_echo_reply+0x108>
 800d536:	4621      	mov	r1, r4
 800d538:	eba0 0803 	sub.w	r8, r0, r3
 800d53c:	4a2b      	ldr	r2, [pc, #172]	; (800d5ec <handle_ipv6_echo_reply+0x10c>)
 800d53e:	2300      	movs	r3, #0
 800d540:	4640      	mov	r0, r8
 800d542:	f8cd 801c 	str.w	r8, [sp, #28]
 800d546:	f7f3 f975 	bl	8000834 <__aeabi_uldivmod>
 800d54a:	469c      	mov	ip, r3
 800d54c:	fba2 0109 	umull	r0, r1, r2, r9
 800d550:	2300      	movs	r3, #0
 800d552:	4a26      	ldr	r2, [pc, #152]	; (800d5ec <handle_ipv6_echo_reply+0x10c>)
 800d554:	fb09 110c 	mla	r1, r9, ip, r1
 800d558:	f7f3 f96c 	bl	8000834 <__aeabi_uldivmod>
 800d55c:	4682      	mov	sl, r0
 800d55e:	4a23      	ldr	r2, [pc, #140]	; (800d5ec <handle_ipv6_echo_reply+0x10c>)
 800d560:	2300      	movs	r3, #0
 800d562:	4640      	mov	r0, r8
 800d564:	4621      	mov	r1, r4
 800d566:	f7f3 f965 	bl	8000834 <__aeabi_uldivmod>
		snprintf(time_buf, sizeof(time_buf),
 800d56a:	4b21      	ldr	r3, [pc, #132]	; (800d5f0 <handle_ipv6_echo_reply+0x110>)
 800d56c:	fb00 a909 	mla	r9, r0, r9, sl
 800d570:	4a20      	ldr	r2, [pc, #128]	; (800d5f4 <handle_ipv6_echo_reply+0x114>)
 800d572:	2110      	movs	r1, #16
 800d574:	a80a      	add	r0, sp, #40	; 0x28
 800d576:	fbb9 f3f3 	udiv	r3, r9, r3
 800d57a:	f7f6 fdb3 	bl	80040e4 <snprintf>
	PR_SHELL(ping_ctx.sh, "%d bytes from %s to %s: icmp_seq=%d ttl=%d "
 800d57e:	88b4      	ldrh	r4, [r6, #4]
 800d580:	f106 0108 	add.w	r1, r6, #8
 800d584:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 800d586:	2002      	movs	r0, #2
 800d588:	ba64      	rev16	r4, r4
 800d58a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800d5f8 <handle_ipv6_echo_reply+0x118>
 800d58e:	b2a4      	uxth	r4, r4
 800d590:	f8d8 9048 	ldr.w	r9, [r8, #72]	; 0x48
 800d594:	1ae4      	subs	r4, r4, r3
 800d596:	f7f9 f909 	bl	80067ac <net_sprint_addr>
 800d59a:	f106 0118 	add.w	r1, r6, #24
 800d59e:	4682      	mov	sl, r0
 800d5a0:	2002      	movs	r0, #2
 800d5a2:	3c04      	subs	r4, #4
 800d5a4:	f7f9 f902 	bl	80067ac <net_sprint_addr>
 800d5a8:	ab0a      	add	r3, sp, #40	; 0x28
 800d5aa:	4a14      	ldr	r2, [pc, #80]	; (800d5fc <handle_ipv6_echo_reply+0x11c>)
 800d5ac:	2108      	movs	r1, #8
 800d5ae:	9304      	str	r3, [sp, #16]
 800d5b0:	79f3      	ldrb	r3, [r6, #7]
 800d5b2:	9303      	str	r3, [sp, #12]
 800d5b4:	887b      	ldrh	r3, [r7, #2]
 800d5b6:	f8cd a000 	str.w	sl, [sp]
 800d5ba:	ba5b      	rev16	r3, r3
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800d5c2:	4623      	mov	r3, r4
 800d5c4:	4648      	mov	r0, r9
 800d5c6:	f006 fb19 	bl	8013bfc <shell_fprintf>
	if (ntohs(icmp_echo->sequence) == ping_ctx.count) {
 800d5ca:	887b      	ldrh	r3, [r7, #2]
 800d5cc:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
 800d5d0:	ba5b      	rev16	r3, r3
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d102      	bne.n	800d5de <handle_ipv6_echo_reply+0xfe>
		ping_done(&ping_ctx);
 800d5d8:	4640      	mov	r0, r8
 800d5da:	f7fe fcf9 	bl	800bfd0 <ping_done>
	net_pkt_unref(pkt);
 800d5de:	4628      	mov	r0, r5
 800d5e0:	f009 fe7f 	bl	80172e2 <net_pkt_unref>
	return NET_OK;
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	e78e      	b.n	800d506 <handle_ipv6_echo_reply+0x26>
 800d5e8:	3b9aca00 	.word	0x3b9aca00
 800d5ec:	05b8d800 	.word	0x05b8d800
 800d5f0:	000f4240 	.word	0x000f4240
 800d5f4:	0801f601 	.word	0x0801f601
 800d5f8:	240019d0 	.word	0x240019d0
 800d5fc:	0801f60c 	.word	0x0801f60c

0800d600 <cmd_net_udp_bind>:
{
 800d600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (argc < 3) {
 800d604:	2902      	cmp	r1, #2
{
 800d606:	b08a      	sub	sp, #40	; 0x28
 800d608:	4615      	mov	r5, r2
	char *endptr = NULL;
 800d60a:	f04f 0200 	mov.w	r2, #0
{
 800d60e:	4604      	mov	r4, r0
	char *endptr = NULL;
 800d610:	9203      	str	r2, [sp, #12]
	if (argc < 3) {
 800d612:	d809      	bhi.n	800d628 <cmd_net_udp_bind+0x28>
		PR_WARNING("Not enough arguments given for udp bind command\n");
 800d614:	4a47      	ldr	r2, [pc, #284]	; (800d734 <cmd_net_udp_bind+0x134>)
 800d616:	2103      	movs	r1, #3
		return -EINVAL;
 800d618:	f06f 0515 	mvn.w	r5, #21
		PR_WARNING("Invalid port number\n");
 800d61c:	f006 faee 	bl	8013bfc <shell_fprintf>
}
 800d620:	4628      	mov	r0, r5
 800d622:	b00a      	add	sp, #40	; 0x28
 800d624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	port = strtol(argv[2], &endptr, 0);
 800d628:	a903      	add	r1, sp, #12
 800d62a:	68a8      	ldr	r0, [r5, #8]
	addr_str = argv[1];
 800d62c:	f8d5 8004 	ldr.w	r8, [r5, #4]
	port = strtol(argv[2], &endptr, 0);
 800d630:	f007 f991 	bl	8014956 <strtol>
	if (endptr == argv[2]) {
 800d634:	68aa      	ldr	r2, [r5, #8]
	port = strtol(argv[2], &endptr, 0);
 800d636:	b286      	uxth	r6, r0
	if (endptr == argv[2]) {
 800d638:	9b03      	ldr	r3, [sp, #12]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d103      	bne.n	800d646 <cmd_net_udp_bind+0x46>
		PR_WARNING("Invalid port number\n");
 800d63e:	4a3e      	ldr	r2, [pc, #248]	; (800d738 <cmd_net_udp_bind+0x138>)
 800d640:	2103      	movs	r1, #3
 800d642:	4620      	mov	r0, r4
 800d644:	e7e8      	b.n	800d618 <cmd_net_udp_bind+0x18>
	if (udp_ctx && net_context_is_used(udp_ctx)) {
 800d646:	4f3d      	ldr	r7, [pc, #244]	; (800d73c <cmd_net_udp_bind+0x13c>)
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	b15b      	cbz	r3, 800d664 <cmd_net_udp_bind+0x64>
	return context->flags & NET_CONTEXT_IN_USE;
 800d64c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800d650:	07db      	lsls	r3, r3, #31
 800d652:	d507      	bpl.n	800d664 <cmd_net_udp_bind+0x64>
		PR_WARNING("Network context already in use\n");
 800d654:	4a3a      	ldr	r2, [pc, #232]	; (800d740 <cmd_net_udp_bind+0x140>)
 800d656:	2103      	movs	r1, #3
 800d658:	4620      	mov	r0, r4
		return -EALREADY;
 800d65a:	f06f 0577 	mvn.w	r5, #119	; 0x77
		PR_WARNING("Network context already in use\n");
 800d65e:	f006 facd 	bl	8013bfc <shell_fprintf>
		return -EALREADY;
 800d662:	e7dd      	b.n	800d620 <cmd_net_udp_bind+0x20>
	memset(&addr, 0, sizeof(addr));
 800d664:	2218      	movs	r2, #24
 800d666:	2100      	movs	r1, #0
 800d668:	a804      	add	r0, sp, #16
 800d66a:	f007 fb0f 	bl	8014c8c <memset>
	ret = net_ipaddr_parse(addr_str, strlen(addr_str), &addr);
 800d66e:	4640      	mov	r0, r8
 800d670:	f007 fab4 	bl	8014bdc <strlen>
 800d674:	aa04      	add	r2, sp, #16
 800d676:	4601      	mov	r1, r0
 800d678:	4640      	mov	r0, r8
 800d67a:	f008 ffe2 	bl	8016642 <net_ipaddr_parse>
	ret = net_context_get(addr.sa_family, SOCK_DGRAM, IPPROTO_UDP,
 800d67e:	4b2f      	ldr	r3, [pc, #188]	; (800d73c <cmd_net_udp_bind+0x13c>)
 800d680:	2211      	movs	r2, #17
 800d682:	2102      	movs	r1, #2
 800d684:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800d688:	f7f9 fa70 	bl	8006b6c <net_context_get>
	if (ret < 0) {
 800d68c:	1e05      	subs	r5, r0, #0
 800d68e:	da06      	bge.n	800d69e <cmd_net_udp_bind+0x9e>
		PR_WARNING("Cannot get UDP context (%d)\n", ret);
 800d690:	462b      	mov	r3, r5
 800d692:	4a2c      	ldr	r2, [pc, #176]	; (800d744 <cmd_net_udp_bind+0x144>)
 800d694:	2103      	movs	r1, #3
 800d696:	4620      	mov	r0, r4
 800d698:	f006 fab0 	bl	8013bfc <shell_fprintf>
		return ret;
 800d69c:	e7c0      	b.n	800d620 <cmd_net_udp_bind+0x20>
	udp_shell = sh;
 800d69e:	4b2a      	ldr	r3, [pc, #168]	; (800d748 <cmd_net_udp_bind+0x148>)
 800d6a0:	601c      	str	r4, [r3, #0]
	if (IS_ENABLED(CONFIG_NET_IPV6) && addr.sa_family == AF_INET6) {
 800d6a2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	d117      	bne.n	800d6da <cmd_net_udp_bind+0xda>
		net_sin6(&addr)->sin6_port = htons(port);
 800d6aa:	ba76      	rev16	r6, r6
		addrlen = sizeof(struct sockaddr_in6);
 800d6ac:	2518      	movs	r5, #24
		iface = net_if_ipv6_select_src_iface(
 800d6ae:	a805      	add	r0, sp, #20
		net_sin6(&addr)->sin6_port = htons(port);
 800d6b0:	f8ad 6012 	strh.w	r6, [sp, #18]
		iface = net_if_ipv6_select_src_iface(
 800d6b4:	f008 fbbb 	bl	8015e2e <net_if_ipv6_select_src_iface>
	if (!iface) {
 800d6b8:	bb00      	cbnz	r0, 800d6fc <cmd_net_udp_bind+0xfc>
		PR_WARNING("No interface to send to given host\n");
 800d6ba:	4a24      	ldr	r2, [pc, #144]	; (800d74c <cmd_net_udp_bind+0x14c>)
 800d6bc:	2103      	movs	r1, #3
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f006 fa9c 	bl	8013bfc <shell_fprintf>
	ret = net_context_put(udp_ctx);
 800d6c4:	6838      	ldr	r0, [r7, #0]
 800d6c6:	f7f9 fb0d 	bl	8006ce4 <net_context_put>
	if (ret < 0) {
 800d6ca:	1e03      	subs	r3, r0, #0
 800d6cc:	da2e      	bge.n	800d72c <cmd_net_udp_bind+0x12c>
		PR_WARNING("Cannot put UDP context (%d)\n", ret);
 800d6ce:	4a20      	ldr	r2, [pc, #128]	; (800d750 <cmd_net_udp_bind+0x150>)
 800d6d0:	2103      	movs	r1, #3
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f006 fa92 	bl	8013bfc <shell_fprintf>
 800d6d8:	e028      	b.n	800d72c <cmd_net_udp_bind+0x12c>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && addr.sa_family == AF_INET) {
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d107      	bne.n	800d6ee <cmd_net_udp_bind+0xee>
		net_sin(&addr)->sin_port = htons(port);
 800d6de:	ba76      	rev16	r6, r6
		iface = net_if_ipv4_select_src_iface(
 800d6e0:	a805      	add	r0, sp, #20
		addrlen = sizeof(struct sockaddr_in);
 800d6e2:	2508      	movs	r5, #8
		net_sin(&addr)->sin_port = htons(port);
 800d6e4:	f8ad 6012 	strh.w	r6, [sp, #18]
		iface = net_if_ipv4_select_src_iface(
 800d6e8:	f7f8 fc68 	bl	8005fbc <net_if_ipv4_select_src_iface>
 800d6ec:	e7e4      	b.n	800d6b8 <cmd_net_udp_bind+0xb8>
		PR_WARNING("IPv6 and IPv4 are disabled, cannot %s.\n", "bind");
 800d6ee:	4b19      	ldr	r3, [pc, #100]	; (800d754 <cmd_net_udp_bind+0x154>)
 800d6f0:	4a19      	ldr	r2, [pc, #100]	; (800d758 <cmd_net_udp_bind+0x158>)
		PR_WARNING("Receiving from UDP port failed (%d)\n", ret);
 800d6f2:	2103      	movs	r1, #3
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f006 fa81 	bl	8013bfc <shell_fprintf>
		goto release_ctx;
 800d6fa:	e7e3      	b.n	800d6c4 <cmd_net_udp_bind+0xc4>
	net_context_set_iface(udp_ctx, iface);
 800d6fc:	683e      	ldr	r6, [r7, #0]
	context->iface = net_if_get_by_iface(iface);
 800d6fe:	f7f8 fe03 	bl	8006308 <net_if_get_by_iface>
	ret = net_context_bind(udp_ctx, &addr, addrlen);
 800d702:	462a      	mov	r2, r5
 800d704:	a904      	add	r1, sp, #16
 800d706:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 800d70a:	6838      	ldr	r0, [r7, #0]
 800d70c:	f009 f8bd 	bl	801688a <net_context_bind>
	if (ret < 0) {
 800d710:	1e03      	subs	r3, r0, #0
 800d712:	da01      	bge.n	800d718 <cmd_net_udp_bind+0x118>
		PR_WARNING("Binding to UDP port failed (%d)\n", ret);
 800d714:	4a11      	ldr	r2, [pc, #68]	; (800d75c <cmd_net_udp_bind+0x15c>)
 800d716:	e7ec      	b.n	800d6f2 <cmd_net_udp_bind+0xf2>
	ret = net_context_recv(udp_ctx, udp_rcvd, K_NO_WAIT, NULL);
 800d718:	2300      	movs	r3, #0
 800d71a:	2200      	movs	r2, #0
 800d71c:	4910      	ldr	r1, [pc, #64]	; (800d760 <cmd_net_udp_bind+0x160>)
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	2300      	movs	r3, #0
 800d722:	6838      	ldr	r0, [r7, #0]
 800d724:	f7f9 fb06 	bl	8006d34 <net_context_recv>
	if (ret < 0) {
 800d728:	1e03      	subs	r3, r0, #0
 800d72a:	db01      	blt.n	800d730 <cmd_net_udp_bind+0x130>
	return 0;
 800d72c:	2500      	movs	r5, #0
 800d72e:	e777      	b.n	800d620 <cmd_net_udp_bind+0x20>
		PR_WARNING("Receiving from UDP port failed (%d)\n", ret);
 800d730:	4a0c      	ldr	r2, [pc, #48]	; (800d764 <cmd_net_udp_bind+0x164>)
 800d732:	e7de      	b.n	800d6f2 <cmd_net_udp_bind+0xf2>
 800d734:	08020019 	.word	0x08020019
 800d738:	0801fb38 	.word	0x0801fb38
 800d73c:	24002dcc 	.word	0x24002dcc
 800d740:	0801fb4d 	.word	0x0801fb4d
 800d744:	0801fb6d 	.word	0x0801fb6d
 800d748:	24002dd0 	.word	0x24002dd0
 800d74c:	0801fbb7 	.word	0x0801fbb7
 800d750:	0801fc34 	.word	0x0801fc34
 800d754:	0802004a 	.word	0x0802004a
 800d758:	0801fb8f 	.word	0x0801fb8f
 800d75c:	0802004f 	.word	0x0802004f
 800d760:	0800cc81 	.word	0x0800cc81
 800d764:	08020070 	.word	0x08020070

0800d768 <dns_result_cb>:
	if (status == DNS_EAI_CANCELED) {
 800d768:	f110 0f65 	cmn.w	r0, #101	; 0x65
{
 800d76c:	4603      	mov	r3, r0
 800d76e:	b510      	push	{r4, lr}
 800d770:	4614      	mov	r4, r2
 800d772:	b08a      	sub	sp, #40	; 0x28
	if (status == DNS_EAI_CANCELED) {
 800d774:	d102      	bne.n	800d77c <dns_result_cb+0x14>
		PR_WARNING("dns: Timeout while resolving name.\n");
 800d776:	4a1d      	ldr	r2, [pc, #116]	; (800d7ec <dns_result_cb+0x84>)
		PR_WARNING("dns: No such name found.\n");
 800d778:	2103      	movs	r1, #3
 800d77a:	e025      	b.n	800d7c8 <dns_result_cb+0x60>
	if (status == DNS_EAI_INPROGRESS && info) {
 800d77c:	f110 0f64 	cmn.w	r0, #100	; 0x64
 800d780:	d11d      	bne.n	800d7be <dns_result_cb+0x56>
 800d782:	b359      	cbz	r1, 800d7dc <dns_result_cb+0x74>
		if (info->ai_family == AF_INET) {
 800d784:	7f08      	ldrb	r0, [r1, #28]
 800d786:	2801      	cmp	r0, #1
 800d788:	d10c      	bne.n	800d7a4 <dns_result_cb+0x3c>
 800d78a:	2310      	movs	r3, #16
 800d78c:	466a      	mov	r2, sp
 800d78e:	3104      	adds	r1, #4
 800d790:	f7f8 ff24 	bl	80065dc <z_impl_net_addr_ntop>
		PR("dns: %s\n", addr);
 800d794:	466b      	mov	r3, sp
 800d796:	4a16      	ldr	r2, [pc, #88]	; (800d7f0 <dns_result_cb+0x88>)
 800d798:	2108      	movs	r1, #8
 800d79a:	4620      	mov	r0, r4
 800d79c:	f006 fa2e 	bl	8013bfc <shell_fprintf>
}
 800d7a0:	b00a      	add	sp, #40	; 0x28
 800d7a2:	bd10      	pop	{r4, pc}
		} else if (info->ai_family == AF_INET6) {
 800d7a4:	2802      	cmp	r0, #2
 800d7a6:	d101      	bne.n	800d7ac <dns_result_cb+0x44>
 800d7a8:	2328      	movs	r3, #40	; 0x28
 800d7aa:	e7ef      	b.n	800d78c <dns_result_cb+0x24>
			strncpy(addr, "Invalid protocol family",
 800d7ac:	2228      	movs	r2, #40	; 0x28
 800d7ae:	4911      	ldr	r1, [pc, #68]	; (800d7f4 <dns_result_cb+0x8c>)
 800d7b0:	4668      	mov	r0, sp
 800d7b2:	f007 f9e7 	bl	8014b84 <strncpy>
			addr[sizeof(addr) - 1] = 0;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800d7bc:	e7ea      	b.n	800d794 <dns_result_cb+0x2c>
	if (status == DNS_EAI_ALLDONE) {
 800d7be:	f110 0f67 	cmn.w	r0, #103	; 0x67
 800d7c2:	d107      	bne.n	800d7d4 <dns_result_cb+0x6c>
		PR("dns: All results received\n");
 800d7c4:	4a0c      	ldr	r2, [pc, #48]	; (800d7f8 <dns_result_cb+0x90>)
 800d7c6:	2108      	movs	r1, #8
 800d7c8:	4620      	mov	r0, r4
}
 800d7ca:	b00a      	add	sp, #40	; 0x28
 800d7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PR("dns: All results received\n");
 800d7d0:	f006 ba14 	b.w	8013bfc <shell_fprintf>
	if (status == DNS_EAI_FAIL) {
 800d7d4:	1d02      	adds	r2, r0, #4
 800d7d6:	d101      	bne.n	800d7dc <dns_result_cb+0x74>
		PR_WARNING("dns: No such name found.\n");
 800d7d8:	4a08      	ldr	r2, [pc, #32]	; (800d7fc <dns_result_cb+0x94>)
 800d7da:	e7cd      	b.n	800d778 <dns_result_cb+0x10>
	PR_WARNING("dns: Unhandled status %d received\n", status);
 800d7dc:	4a08      	ldr	r2, [pc, #32]	; (800d800 <dns_result_cb+0x98>)
 800d7de:	2103      	movs	r1, #3
 800d7e0:	4620      	mov	r0, r4
}
 800d7e2:	b00a      	add	sp, #40	; 0x28
 800d7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_WARNING("dns: Unhandled status %d received\n", status);
 800d7e8:	f006 ba08 	b.w	8013bfc <shell_fprintf>
 800d7ec:	08020095 	.word	0x08020095
 800d7f0:	080200d1 	.word	0x080200d1
 800d7f4:	080200b9 	.word	0x080200b9
 800d7f8:	080200da 	.word	0x080200da
 800d7fc:	080200f5 	.word	0x080200f5
 800d800:	0802010f 	.word	0x0802010f

0800d804 <address_lifetime_cb>:
{
 800d804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d808:	4605      	mov	r5, r0
 800d80a:	b08b      	sub	sp, #44	; 0x2c
	const struct shell *sh = data->sh;
 800d80c:	680f      	ldr	r7, [r1, #0]
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800d80e:	f8d0 8008 	ldr.w	r8, [r0, #8]
	PR("\nIPv6 addresses for interface %d (%p) (%s)\n",
 800d812:	f7f8 fd79 	bl	8006308 <net_if_get_by_iface>
 800d816:	4604      	mov	r4, r0
 800d818:	a906      	add	r1, sp, #24
 800d81a:	4628      	mov	r0, r5
 800d81c:	f7ff fb76 	bl	800cf0c <iface2str>
 800d820:	4623      	mov	r3, r4
 800d822:	4a43      	ldr	r2, [pc, #268]	; (800d930 <address_lifetime_cb+0x12c>)
 800d824:	2108      	movs	r1, #8
 800d826:	e9cd 5000 	strd	r5, r0, [sp]
 800d82a:	4638      	mov	r0, r7
 800d82c:	f006 f9e6 	bl	8013bfc <shell_fprintf>
	PR("============================================%s\n", extra);
 800d830:	9b06      	ldr	r3, [sp, #24]
 800d832:	4a40      	ldr	r2, [pc, #256]	; (800d934 <address_lifetime_cb+0x130>)
 800d834:	2108      	movs	r1, #8
 800d836:	4638      	mov	r0, r7
 800d838:	f006 f9e0 	bl	8013bfc <shell_fprintf>
	if (!ipv6) {
 800d83c:	f1b8 0f00 	cmp.w	r8, #0
 800d840:	d107      	bne.n	800d852 <address_lifetime_cb+0x4e>
		PR("No IPv6 config found for this interface.\n");
 800d842:	4a3d      	ldr	r2, [pc, #244]	; (800d938 <address_lifetime_cb+0x134>)
 800d844:	2108      	movs	r1, #8
 800d846:	4638      	mov	r0, r7
 800d848:	f006 f9d8 	bl	8013bfc <shell_fprintf>
}
 800d84c:	b00b      	add	sp, #44	; 0x2c
 800d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PR("Type      \tState    \tLifetime (sec)\tAddress\n");
 800d852:	f108 0404 	add.w	r4, r8, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800d856:	2600      	movs	r6, #0
	PR("Type      \tState    \tLifetime (sec)\tAddress\n");
 800d858:	4a38      	ldr	r2, [pc, #224]	; (800d93c <address_lifetime_cb+0x138>)
 800d85a:	2108      	movs	r1, #8
 800d85c:	4638      	mov	r0, r7
 800d85e:	f006 f9cd 	bl	8013bfc <shell_fprintf>
		if (!ipv6->unicast[i].is_used ||
 800d862:	2330      	movs	r3, #48	; 0x30
 800d864:	fb03 8306 	mla	r3, r3, r6, r8
 800d868:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d86c:	079b      	lsls	r3, r3, #30
 800d86e:	d54a      	bpl.n	800d906 <address_lifetime_cb+0x102>
 800d870:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 800d874:	2b02      	cmp	r3, #2
 800d876:	d146      	bne.n	800d906 <address_lifetime_cb+0x102>
 800d878:	f00e fac6 	bl	801be08 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800d87c:	220a      	movs	r2, #10
 800d87e:	2300      	movs	r3, #0
 800d880:	f7f2 ffd8 	bl	8000834 <__aeabi_uldivmod>
 800d884:	4601      	mov	r1, r0
		remaining = net_timeout_remaining(&ipv6->unicast[i].lifetime,
 800d886:	f104 0010 	add.w	r0, r4, #16
 800d88a:	f008 fc1c 	bl	80160c6 <net_timeout_remaining>
		prefix = net_if_ipv6_prefix_get(iface,
 800d88e:	4621      	mov	r1, r4
		remaining = net_timeout_remaining(&ipv6->unicast[i].lifetime,
 800d890:	4682      	mov	sl, r0
		prefix = net_if_ipv6_prefix_get(iface,
 800d892:	4628      	mov	r0, r5
 800d894:	f008 f9fc 	bl	8015c90 <net_if_ipv6_prefix_get>
		if (prefix) {
 800d898:	2800      	cmp	r0, #0
 800d89a:	d039      	beq.n	800d910 <address_lifetime_cb+0x10c>
			prefix_len = prefix->len;
 800d89c:	f890 b024 	ldrb.w	fp, [r0, #36]	; 0x24
		if (ipv6->unicast[i].is_infinite) {
 800d8a0:	2330      	movs	r3, #48	; 0x30
 800d8a2:	f10d 091c 	add.w	r9, sp, #28
 800d8a6:	fb03 8306 	mla	r3, r3, r6, r8
 800d8aa:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800d8ae:	f011 0101 	ands.w	r1, r1, #1
 800d8b2:	d030      	beq.n	800d916 <address_lifetime_cb+0x112>
			snprintk(remaining_str, sizeof(remaining_str) - 1,
 800d8b4:	4a22      	ldr	r2, [pc, #136]	; (800d940 <address_lifetime_cb+0x13c>)
 800d8b6:	210b      	movs	r1, #11
 800d8b8:	4648      	mov	r0, r9
 800d8ba:	f005 fbed 	bl	8013098 <snprintk>
		PR("%s  \t%s\t%s    \t%s/%d\n",
 800d8be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d8c2:	4621      	mov	r1, r4
 800d8c4:	2002      	movs	r0, #2
 800d8c6:	2b04      	cmp	r3, #4
 800d8c8:	bf96      	itet	ls
 800d8ca:	4a1e      	ldrls	r2, [pc, #120]	; (800d944 <address_lifetime_cb+0x140>)
 800d8cc:	f8df a078 	ldrhi.w	sl, [pc, #120]	; 800d948 <address_lifetime_cb+0x144>
	switch (addr_state) {
 800d8d0:	f852 a023 	ldrls.w	sl, [r2, r3, lsl #2]
 800d8d4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800d8d8:	3201      	adds	r2, #1
 800d8da:	b2d2      	uxtb	r2, r2
 800d8dc:	2a03      	cmp	r2, #3
 800d8de:	bf96      	itet	ls
 800d8e0:	4b1a      	ldrls	r3, [pc, #104]	; (800d94c <address_lifetime_cb+0x148>)
 800d8e2:	4b1b      	ldrhi	r3, [pc, #108]	; (800d950 <address_lifetime_cb+0x14c>)
 800d8e4:	f853 3022 	ldrls.w	r3, [r3, r2, lsl #2]
 800d8e8:	9305      	str	r3, [sp, #20]
		PR("%s  \t%s\t%s    \t%s/%d\n",
 800d8ea:	f7f8 ff5f 	bl	80067ac <net_sprint_addr>
 800d8ee:	9b05      	ldr	r3, [sp, #20]
 800d8f0:	2108      	movs	r1, #8
 800d8f2:	4a18      	ldr	r2, [pc, #96]	; (800d954 <address_lifetime_cb+0x150>)
 800d8f4:	9300      	str	r3, [sp, #0]
 800d8f6:	4653      	mov	r3, sl
 800d8f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800d8fc:	e9cd 0b02 	strd	r0, fp, [sp, #8]
 800d900:	4638      	mov	r0, r7
 800d902:	f006 f97b 	bl	8013bfc <shell_fprintf>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800d906:	3601      	adds	r6, #1
 800d908:	3430      	adds	r4, #48	; 0x30
 800d90a:	2e03      	cmp	r6, #3
 800d90c:	d1a9      	bne.n	800d862 <address_lifetime_cb+0x5e>
 800d90e:	e79d      	b.n	800d84c <address_lifetime_cb+0x48>
			prefix_len = 128U;
 800d910:	f04f 0b80 	mov.w	fp, #128	; 0x80
 800d914:	e7c4      	b.n	800d8a0 <address_lifetime_cb+0x9c>
				 "%u", (uint32_t)(remaining / 1000U));
 800d916:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d91a:	2300      	movs	r3, #0
 800d91c:	4650      	mov	r0, sl
 800d91e:	f7f2 ff89 	bl	8000834 <__aeabi_uldivmod>
			snprintk(remaining_str, sizeof(remaining_str) - 1,
 800d922:	4a0d      	ldr	r2, [pc, #52]	; (800d958 <address_lifetime_cb+0x154>)
				 "%u", (uint32_t)(remaining / 1000U));
 800d924:	4603      	mov	r3, r0
			snprintk(remaining_str, sizeof(remaining_str) - 1,
 800d926:	210b      	movs	r1, #11
 800d928:	4648      	mov	r0, r9
 800d92a:	f005 fbb5 	bl	8013098 <snprintk>
 800d92e:	e7c6      	b.n	800d8be <address_lifetime_cb+0xba>
 800d930:	08020132 	.word	0x08020132
 800d934:	0801fe7c 	.word	0x0801fe7c
 800d938:	0802015e 	.word	0x0802015e
 800d93c:	0801fed6 	.word	0x0801fed6
 800d940:	0802019f 	.word	0x0802019f
 800d944:	0801d0ac 	.word	0x0801d0ac
 800d948:	0801fe41 	.word	0x0801fe41
 800d94c:	0801d0c0 	.word	0x0801d0c0
 800d950:	0801ebf5 	.word	0x0801ebf5
 800d954:	08020188 	.word	0x08020188
 800d958:	0801fdd5 	.word	0x0801fdd5

0800d95c <iface_cb>:
{
 800d95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (data->user_data && data->user_data != iface) {
 800d960:	684b      	ldr	r3, [r1, #4]
{
 800d962:	b087      	sub	sp, #28
 800d964:	4605      	mov	r5, r0
 800d966:	460e      	mov	r6, r1
	if (data->user_data && data->user_data != iface) {
 800d968:	b113      	cbz	r3, 800d970 <iface_cb+0x14>
 800d96a:	4283      	cmp	r3, r0
 800d96c:	f040 8101 	bne.w	800db72 <iface_cb+0x216>
	PR("\nInterface %p (%s) [%d]\n", iface, iface2str(iface, &extra),
 800d970:	a905      	add	r1, sp, #20
 800d972:	4628      	mov	r0, r5
	const struct shell *sh = data->sh;
 800d974:	6834      	ldr	r4, [r6, #0]
	PR("\nInterface %p (%s) [%d]\n", iface, iface2str(iface, &extra),
 800d976:	f7ff fac9 	bl	800cf0c <iface2str>
 800d97a:	4607      	mov	r7, r0
 800d97c:	4628      	mov	r0, r5
 800d97e:	f7f8 fcc3 	bl	8006308 <net_if_get_by_iface>
 800d982:	462b      	mov	r3, r5
 800d984:	4a96      	ldr	r2, [pc, #600]	; (800dbe0 <iface_cb+0x284>)
 800d986:	2108      	movs	r1, #8
 800d988:	e9cd 7000 	strd	r7, r0, [sp]
 800d98c:	4620      	mov	r0, r4
 800d98e:	f006 f935 	bl	8013bfc <shell_fprintf>
	PR("===========================%s\n", extra);
 800d992:	4620      	mov	r0, r4
 800d994:	9b05      	ldr	r3, [sp, #20]
 800d996:	2108      	movs	r1, #8
 800d998:	4a92      	ldr	r2, [pc, #584]	; (800dbe4 <iface_cb+0x288>)
 800d99a:	f006 f92f 	bl	8013bfc <shell_fprintf>
	if (!net_if_is_up(iface)) {
 800d99e:	4628      	mov	r0, r5
 800d9a0:	f00c fad2 	bl	8019f48 <net_if_is_up>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	f000 80db 	beq.w	800db60 <iface_cb+0x204>
	(void)k_mutex_lock(&iface->lock, K_FOREVER);
 800d9aa:	f105 0648 	add.w	r6, r5, #72	; 0x48
	return z_impl_k_mutex_lock(mutex, timeout);
 800d9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	f004 fa36 	bl	8011e28 <z_impl_k_mutex_lock>
	return &iface->if_dev->link_addr;
 800d9bc:	6829      	ldr	r1, [r5, #0]
	    net_if_get_link_addr(iface)->addr) {
 800d9be:	6908      	ldr	r0, [r1, #16]
	if (net_if_get_link_addr(iface) &&
 800d9c0:	2800      	cmp	r0, #0
 800d9c2:	f040 80d9 	bne.w	800db78 <iface_cb+0x21c>
	return z_impl_k_mutex_unlock(mutex);
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	f004 faa8 	bl	8011f1c <z_impl_k_mutex_unlock>
	return iface->if_dev->mtu;
 800d9cc:	682b      	ldr	r3, [r5, #0]
	PR("MTU       : %d\n", net_if_get_mtu(iface));
 800d9ce:	2108      	movs	r1, #8
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	8b1b      	ldrh	r3, [r3, #24]
 800d9d4:	4a84      	ldr	r2, [pc, #528]	; (800dbe8 <iface_cb+0x28c>)
 800d9d6:	f006 f911 	bl	8013bfc <shell_fprintf>
	if (net_if_flag_is_set(iface, NET_IF_POINTOPOINT)) {
 800d9da:	2101      	movs	r1, #1
 800d9dc:	4628      	mov	r0, r5
 800d9de:	f00c faa8 	bl	8019f32 <net_if_flag_is_set>
 800d9e2:	4606      	mov	r6, r0
 800d9e4:	b128      	cbz	r0, 800d9f2 <iface_cb+0x96>
		pos += snprintk(str + pos, sizeof(str) - pos,
 800d9e6:	4a81      	ldr	r2, [pc, #516]	; (800dbec <iface_cb+0x290>)
 800d9e8:	2151      	movs	r1, #81	; 0x51
 800d9ea:	4881      	ldr	r0, [pc, #516]	; (800dbf0 <iface_cb+0x294>)
 800d9ec:	f005 fb54 	bl	8013098 <snprintk>
 800d9f0:	4606      	mov	r6, r0
	if (net_if_flag_is_set(iface, NET_IF_PROMISC)) {
 800d9f2:	2102      	movs	r1, #2
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	4f7e      	ldr	r7, [pc, #504]	; (800dbf0 <iface_cb+0x294>)
 800d9f8:	f00c fa9b 	bl	8019f32 <net_if_flag_is_set>
 800d9fc:	b130      	cbz	r0, 800da0c <iface_cb+0xb0>
		pos += snprintk(str + pos, sizeof(str) - pos,
 800d9fe:	f1c6 0151 	rsb	r1, r6, #81	; 0x51
 800da02:	19b8      	adds	r0, r7, r6
 800da04:	4a7b      	ldr	r2, [pc, #492]	; (800dbf4 <iface_cb+0x298>)
 800da06:	f005 fb47 	bl	8013098 <snprintk>
 800da0a:	4406      	add	r6, r0
	if (net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
 800da0c:	2103      	movs	r1, #3
 800da0e:	4628      	mov	r0, r5
 800da10:	f00c fa8f 	bl	8019f32 <net_if_flag_is_set>
 800da14:	4603      	mov	r3, r0
		pos += snprintk(str + pos, sizeof(str) - pos,
 800da16:	f1c6 0151 	rsb	r1, r6, #81	; 0x51
 800da1a:	19b8      	adds	r0, r7, r6
	if (net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f000 80b7 	beq.w	800db90 <iface_cb+0x234>
		pos += snprintk(str + pos, sizeof(str) - pos,
 800da22:	4a75      	ldr	r2, [pc, #468]	; (800dbf8 <iface_cb+0x29c>)
		pos += snprintk(str + pos, sizeof(str) - pos,
 800da24:	f005 fb38 	bl	8013098 <snprintk>
	if (net_if_flag_is_set(iface, NET_IF_FORWARD_MULTICASTS)) {
 800da28:	2105      	movs	r1, #5
		pos += snprintk(str + pos, sizeof(str) - pos,
 800da2a:	4406      	add	r6, r0
	if (net_if_flag_is_set(iface, NET_IF_FORWARD_MULTICASTS)) {
 800da2c:	4628      	mov	r0, r5
 800da2e:	f00c fa80 	bl	8019f32 <net_if_flag_is_set>
 800da32:	b130      	cbz	r0, 800da42 <iface_cb+0xe6>
		pos += snprintk(str + pos, sizeof(str) - pos,
 800da34:	f1c6 0151 	rsb	r1, r6, #81	; 0x51
 800da38:	19b8      	adds	r0, r7, r6
 800da3a:	4a70      	ldr	r2, [pc, #448]	; (800dbfc <iface_cb+0x2a0>)
 800da3c:	f005 fb2c 	bl	8013098 <snprintk>
 800da40:	4406      	add	r6, r0
	if (net_if_flag_is_set(iface, NET_IF_IPV4)) {
 800da42:	2106      	movs	r1, #6
 800da44:	4628      	mov	r0, r5
 800da46:	f00c fa74 	bl	8019f32 <net_if_flag_is_set>
 800da4a:	b130      	cbz	r0, 800da5a <iface_cb+0xfe>
		pos += snprintk(str + pos, sizeof(str) - pos,
 800da4c:	f1c6 0151 	rsb	r1, r6, #81	; 0x51
 800da50:	19b8      	adds	r0, r7, r6
 800da52:	4a6b      	ldr	r2, [pc, #428]	; (800dc00 <iface_cb+0x2a4>)
 800da54:	f005 fb20 	bl	8013098 <snprintk>
 800da58:	4406      	add	r6, r0
	if (net_if_flag_is_set(iface, NET_IF_IPV6)) {
 800da5a:	2107      	movs	r1, #7
 800da5c:	4628      	mov	r0, r5
 800da5e:	f00c fa68 	bl	8019f32 <net_if_flag_is_set>
 800da62:	b130      	cbz	r0, 800da72 <iface_cb+0x116>
		pos += snprintk(str + pos, sizeof(str) - pos,
 800da64:	f1c6 0151 	rsb	r1, r6, #81	; 0x51
 800da68:	19b8      	adds	r0, r7, r6
 800da6a:	4a66      	ldr	r2, [pc, #408]	; (800dc04 <iface_cb+0x2a8>)
 800da6c:	f005 fb14 	bl	8013098 <snprintk>
 800da70:	4406      	add	r6, r0
	if (net_if_flag_is_set(iface, NET_IF_IPV6_NO_ND)) {
 800da72:	210b      	movs	r1, #11
 800da74:	4628      	mov	r0, r5
 800da76:	f00c fa5c 	bl	8019f32 <net_if_flag_is_set>
 800da7a:	b130      	cbz	r0, 800da8a <iface_cb+0x12e>
		pos += snprintk(str + pos, sizeof(str) - pos,
 800da7c:	f1c6 0151 	rsb	r1, r6, #81	; 0x51
 800da80:	19b8      	adds	r0, r7, r6
 800da82:	4a61      	ldr	r2, [pc, #388]	; (800dc08 <iface_cb+0x2ac>)
 800da84:	f005 fb08 	bl	8013098 <snprintk>
 800da88:	4406      	add	r6, r0
	if (net_if_flag_is_set(iface, NET_IF_IPV6_NO_MLD)) {
 800da8a:	210c      	movs	r1, #12
 800da8c:	4628      	mov	r0, r5
 800da8e:	f00c fa50 	bl	8019f32 <net_if_flag_is_set>
 800da92:	b130      	cbz	r0, 800daa2 <iface_cb+0x146>
		pos += snprintk(str + pos, sizeof(str) - pos,
 800da94:	f1c6 0151 	rsb	r1, r6, #81	; 0x51
 800da98:	19b8      	adds	r0, r7, r6
 800da9a:	4a5c      	ldr	r2, [pc, #368]	; (800dc0c <iface_cb+0x2b0>)
 800da9c:	f005 fafc 	bl	8013098 <snprintk>
 800daa0:	4406      	add	r6, r0
	str[pos - 1] = '\0';
 800daa2:	2300      	movs	r3, #0
 800daa4:	443e      	add	r6, r7
	PR("Flags     : %s\n", iface_flags2str(iface));
 800daa6:	4a5a      	ldr	r2, [pc, #360]	; (800dc10 <iface_cb+0x2b4>)
 800daa8:	2108      	movs	r1, #8
	str[pos - 1] = '\0';
 800daaa:	f806 3c01 	strb.w	r3, [r6, #-1]
	PR("Flags     : %s\n", iface_flags2str(iface));
 800daae:	4620      	mov	r0, r4
 800dab0:	4b4f      	ldr	r3, [pc, #316]	; (800dbf0 <iface_cb+0x294>)
 800dab2:	f006 f8a3 	bl	8013bfc <shell_fprintf>
	if (!iface || !iface->if_dev) {
 800dab6:	682b      	ldr	r3, [r5, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d16b      	bne.n	800db94 <iface_cb+0x238>
	if (!net_if_flag_is_set(iface, NET_IF_IPV6)) {
 800dabc:	2107      	movs	r1, #7
 800dabe:	4628      	mov	r0, r5
 800dac0:	f00c fa37 	bl	8019f32 <net_if_flag_is_set>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	f040 80c9 	bne.w	800dc5c <iface_cb+0x300>
		PR("%s not %s for this interface.\n", "IPv6", "enabled");
 800daca:	4b52      	ldr	r3, [pc, #328]	; (800dc14 <iface_cb+0x2b8>)
 800dacc:	2108      	movs	r1, #8
 800dace:	4a52      	ldr	r2, [pc, #328]	; (800dc18 <iface_cb+0x2bc>)
 800dad0:	4620      	mov	r0, r4
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	4b51      	ldr	r3, [pc, #324]	; (800dc1c <iface_cb+0x2c0>)
 800dad6:	f006 f891 	bl	8013bfc <shell_fprintf>
	if (!net_if_flag_is_set(iface, NET_IF_IPV4)) {
 800dada:	2106      	movs	r1, #6
 800dadc:	4628      	mov	r0, r5
 800dade:	f00c fa28 	bl	8019f32 <net_if_flag_is_set>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	f040 81bd 	bne.w	800de62 <iface_cb+0x506>
		PR("%s not %s for this interface.\n", "IPv4", "enabled");
 800dae8:	4b4a      	ldr	r3, [pc, #296]	; (800dc14 <iface_cb+0x2b8>)
 800daea:	2108      	movs	r1, #8
 800daec:	4a4a      	ldr	r2, [pc, #296]	; (800dc18 <iface_cb+0x2bc>)
 800daee:	4620      	mov	r0, r4
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	4b4b      	ldr	r3, [pc, #300]	; (800dc20 <iface_cb+0x2c4>)
 800daf4:	f006 f882 	bl	8013bfc <shell_fprintf>
	PR("DHCPv4 lease time : %u\n",
 800daf8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800dafa:	4620      	mov	r0, r4
 800dafc:	4a49      	ldr	r2, [pc, #292]	; (800dc24 <iface_cb+0x2c8>)
 800dafe:	2108      	movs	r1, #8
 800db00:	f006 f87c 	bl	8013bfc <shell_fprintf>
	PR("DHCPv4 renew time : %u\n",
 800db04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800db06:	4a48      	ldr	r2, [pc, #288]	; (800dc28 <iface_cb+0x2cc>)
 800db08:	4620      	mov	r0, r4
 800db0a:	2108      	movs	r1, #8
 800db0c:	f006 f876 	bl	8013bfc <shell_fprintf>
	PR("DHCPv4 server     : %s\n",
 800db10:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800db14:	2001      	movs	r0, #1
 800db16:	f7f8 fe49 	bl	80067ac <net_sprint_addr>
 800db1a:	4a44      	ldr	r2, [pc, #272]	; (800dc2c <iface_cb+0x2d0>)
 800db1c:	4603      	mov	r3, r0
 800db1e:	2108      	movs	r1, #8
 800db20:	4620      	mov	r0, r4
 800db22:	f006 f86b 	bl	8013bfc <shell_fprintf>
	PR("DHCPv4 requested  : %s\n",
 800db26:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800db2a:	2001      	movs	r0, #1
 800db2c:	f7f8 fe3e 	bl	80067ac <net_sprint_addr>
 800db30:	4a3f      	ldr	r2, [pc, #252]	; (800dc30 <iface_cb+0x2d4>)
 800db32:	4603      	mov	r3, r0
 800db34:	2108      	movs	r1, #8
 800db36:	4620      	mov	r0, r4
 800db38:	f006 f860 	bl	8013bfc <shell_fprintf>
	PR("DHCPv4 state      : %s\n",
 800db3c:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
 800db40:	f7fa fab2 	bl	80080a8 <net_dhcpv4_state_name>
 800db44:	4a3b      	ldr	r2, [pc, #236]	; (800dc34 <iface_cb+0x2d8>)
 800db46:	4603      	mov	r3, r0
 800db48:	2108      	movs	r1, #8
 800db4a:	4620      	mov	r0, r4
 800db4c:	f006 f856 	bl	8013bfc <shell_fprintf>
	PR("DHCPv4 attempts   : %d\n",
 800db50:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800db54:	4a38      	ldr	r2, [pc, #224]	; (800dc38 <iface_cb+0x2dc>)
 800db56:	2108      	movs	r1, #8
 800db58:	4620      	mov	r0, r4
 800db5a:	f006 f84f 	bl	8013bfc <shell_fprintf>
 800db5e:	e008      	b.n	800db72 <iface_cb+0x216>
		PR_INFO("Interface is down.\n");
 800db60:	4a36      	ldr	r2, [pc, #216]	; (800dc3c <iface_cb+0x2e0>)
 800db62:	2102      	movs	r1, #2
 800db64:	4620      	mov	r0, r4
 800db66:	f006 f849 	bl	8013bfc <shell_fprintf>
		if (data->user_data == NULL) {
 800db6a:	6873      	ldr	r3, [r6, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	f47f af1c 	bne.w	800d9aa <iface_cb+0x4e>
}
 800db72:	b007      	add	sp, #28
 800db74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db78:	2318      	movs	r3, #24
 800db7a:	4a31      	ldr	r2, [pc, #196]	; (800dc40 <iface_cb+0x2e4>)
 800db7c:	7d09      	ldrb	r1, [r1, #20]
 800db7e:	f7f8 fcfd 	bl	800657c <net_sprint_ll_addr_buf>
		PR("Link addr : %s\n",
 800db82:	4a30      	ldr	r2, [pc, #192]	; (800dc44 <iface_cb+0x2e8>)
 800db84:	4603      	mov	r3, r0
 800db86:	2108      	movs	r1, #8
 800db88:	4620      	mov	r0, r4
 800db8a:	f006 f837 	bl	8013bfc <shell_fprintf>
 800db8e:	e71a      	b.n	800d9c6 <iface_cb+0x6a>
		pos += snprintk(str + pos, sizeof(str) - pos,
 800db90:	4a2d      	ldr	r2, [pc, #180]	; (800dc48 <iface_cb+0x2ec>)
 800db92:	e747      	b.n	800da24 <iface_cb+0xc8>
	if (net_if_l2(iface) == &NET_L2_GET_NAME(ETHERNET)) {
 800db94:	685a      	ldr	r2, [r3, #4]
 800db96:	4b2d      	ldr	r3, [pc, #180]	; (800dc4c <iface_cb+0x2f0>)
 800db98:	429a      	cmp	r2, r3
 800db9a:	d18f      	bne.n	800dabc <iface_cb+0x160>
		PR("Ethernet capabilities supported:\n");
 800db9c:	4620      	mov	r0, r4
 800db9e:	4a2c      	ldr	r2, [pc, #176]	; (800dc50 <iface_cb+0x2f4>)
 800dba0:	2108      	movs	r1, #8
 800dba2:	f006 f82b 	bl	8013bfc <shell_fprintf>
	return iface->if_dev->dev;
 800dba6:	682b      	ldr	r3, [r5, #0]
 800dba8:	6818      	ldr	r0, [r3, #0]
	if (!eth->get_capabilities) {
 800dbaa:	6883      	ldr	r3, [r0, #8]
 800dbac:	68de      	ldr	r6, [r3, #12]
 800dbae:	b10e      	cbz	r6, 800dbb4 <iface_cb+0x258>
	return eth->get_capabilities(net_if_get_device(iface));
 800dbb0:	47b0      	blx	r6
 800dbb2:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(eth_hw_caps); i++) {
 800dbb4:	4f27      	ldr	r7, [pc, #156]	; (800dc54 <iface_cb+0x2f8>)
 800dbb6:	f04f 0800 	mov.w	r8, #0
			PR("\t%s\n", eth_hw_caps[i].description);
 800dbba:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800dc58 <iface_cb+0x2fc>
		if (caps & eth_hw_caps[i].capability) {
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	421e      	tst	r6, r3
 800dbc2:	d005      	beq.n	800dbd0 <iface_cb+0x274>
			PR("\t%s\n", eth_hw_caps[i].description);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	464a      	mov	r2, r9
 800dbc8:	2108      	movs	r1, #8
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f006 f816 	bl	8013bfc <shell_fprintf>
	for (i = 0; i < ARRAY_SIZE(eth_hw_caps); i++) {
 800dbd0:	f108 0801 	add.w	r8, r8, #1
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	f1b8 0f13 	cmp.w	r8, #19
 800dbda:	d1f0      	bne.n	800dbbe <iface_cb+0x262>
 800dbdc:	e76e      	b.n	800dabc <iface_cb+0x160>
 800dbde:	bf00      	nop
 800dbe0:	080201b3 	.word	0x080201b3
 800dbe4:	0801fe8d 	.word	0x0801fe8d
 800dbe8:	080201f0 	.word	0x080201f0
 800dbec:	08020200 	.word	0x08020200
 800dbf0:	240032c9 	.word	0x240032c9
 800dbf4:	0802020d 	.word	0x0802020d
 800dbf8:	08020216 	.word	0x08020216
 800dbfc:	08020225 	.word	0x08020225
 800dc00:	08020234 	.word	0x08020234
 800dc04:	0802023a 	.word	0x0802023a
 800dc08:	08020240 	.word	0x08020240
 800dc0c:	08020247 	.word	0x08020247
 800dc10:	0802024f 	.word	0x0802024f
 800dc14:	0801f0cf 	.word	0x0801f0cf
 800dc18:	0802028b 	.word	0x0802028b
 800dc1c:	08020286 	.word	0x08020286
 800dc20:	080203bc 	.word	0x080203bc
 800dc24:	0802043a 	.word	0x0802043a
 800dc28:	08020452 	.word	0x08020452
 800dc2c:	0802046a 	.word	0x0802046a
 800dc30:	08020482 	.word	0x08020482
 800dc34:	0802049a 	.word	0x0802049a
 800dc38:	080204b2 	.word	0x080204b2
 800dc3c:	080201cc 	.word	0x080201cc
 800dc40:	24003151 	.word	0x24003151
 800dc44:	080201e0 	.word	0x080201e0
 800dc48:	08020219 	.word	0x08020219
 800dc4c:	240012f4 	.word	0x240012f4
 800dc50:	0802025f 	.word	0x0802025f
 800dc54:	0801d0e4 	.word	0x0801d0e4
 800dc58:	08020281 	.word	0x08020281
	ipv6 = iface->config.ip.ipv6;
 800dc5c:	68ae      	ldr	r6, [r5, #8]
	count = 0;
 800dc5e:	f04f 0900 	mov.w	r9, #0
		PR("\t%s %s %s%s%s\n",
 800dc62:	f8df a314 	ldr.w	sl, [pc, #788]	; 800df78 <iface_cb+0x61c>
	PR("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
 800dc66:	2303      	movs	r3, #3
 800dc68:	f106 0804 	add.w	r8, r6, #4
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_ADDR; i++) {
 800dc6c:	464f      	mov	r7, r9
		PR("\t%s %s %s%s%s\n",
 800dc6e:	f8df b30c 	ldr.w	fp, [pc, #780]	; 800df7c <iface_cb+0x620>
	PR("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
 800dc72:	2108      	movs	r1, #8
 800dc74:	4ac2      	ldr	r2, [pc, #776]	; (800df80 <iface_cb+0x624>)
 800dc76:	4620      	mov	r0, r4
 800dc78:	f005 ffc0 	bl	8013bfc <shell_fprintf>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_ADDR; i++) {
 800dc7c:	b10e      	cbz	r6, 800dc82 <iface_cb+0x326>
 800dc7e:	2f03      	cmp	r7, #3
 800dc80:	d176      	bne.n	800dd70 <iface_cb+0x414>
	if (count == 0) {
 800dc82:	f1b9 0f00 	cmp.w	r9, #0
 800dc86:	d104      	bne.n	800dc92 <iface_cb+0x336>
		PR("\t<none>\n");
 800dc88:	4abe      	ldr	r2, [pc, #760]	; (800df84 <iface_cb+0x628>)
 800dc8a:	2108      	movs	r1, #8
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	f005 ffb5 	bl	8013bfc <shell_fprintf>
	count = 0;
 800dc92:	2700      	movs	r7, #0
 800dc94:	f106 0994 	add.w	r9, r6, #148	; 0x94
		if (!mcast->is_used) {
 800dc98:	f04f 0a18 	mov.w	sl, #24
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
 800dc9c:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 800df88 <iface_cb+0x62c>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
 800dca0:	46b8      	mov	r8, r7
	PR("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
 800dca2:	2302      	movs	r3, #2
 800dca4:	4ab9      	ldr	r2, [pc, #740]	; (800df8c <iface_cb+0x630>)
 800dca6:	2108      	movs	r1, #8
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f005 ffa7 	bl	8013bfc <shell_fprintf>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
 800dcae:	b11e      	cbz	r6, 800dcb8 <iface_cb+0x35c>
 800dcb0:	f1b8 0f02 	cmp.w	r8, #2
 800dcb4:	f040 8099 	bne.w	800ddea <iface_cb+0x48e>
	if (count == 0) {
 800dcb8:	b927      	cbnz	r7, 800dcc4 <iface_cb+0x368>
		PR("\t<none>\n");
 800dcba:	4ab2      	ldr	r2, [pc, #712]	; (800df84 <iface_cb+0x628>)
 800dcbc:	2108      	movs	r1, #8
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f005 ff9c 	bl	8013bfc <shell_fprintf>
	count = 0;
 800dcc4:	2700      	movs	r7, #0
 800dcc6:	f106 09d0 	add.w	r9, r6, #208	; 0xd0
		PR("\t%s/%d%s\n",
 800dcca:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 800df90 <iface_cb+0x634>
	PR("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
 800dcce:	2302      	movs	r3, #2
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800dcd0:	46b8      	mov	r8, r7
	PR("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
 800dcd2:	4ab0      	ldr	r2, [pc, #704]	; (800df94 <iface_cb+0x638>)
 800dcd4:	2108      	movs	r1, #8
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f005 ff90 	bl	8013bfc <shell_fprintf>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800dcdc:	b11e      	cbz	r6, 800dce6 <iface_cb+0x38a>
 800dcde:	f1b8 0f02 	cmp.w	r8, #2
 800dce2:	f040 8098 	bne.w	800de16 <iface_cb+0x4ba>
	if (count == 0) {
 800dce6:	b927      	cbnz	r7, 800dcf2 <iface_cb+0x396>
		PR("\t<none>\n");
 800dce8:	4aa6      	ldr	r2, [pc, #664]	; (800df84 <iface_cb+0x628>)
 800dcea:	2108      	movs	r1, #8
 800dcec:	4620      	mov	r0, r4
 800dcee:	f005 ff85 	bl	8013bfc <shell_fprintf>
	router = net_if_ipv6_router_find_default(iface, NULL);
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	f008 f837 	bl	8015d68 <net_if_ipv6_router_find_default>
	if (router) {
 800dcfa:	4607      	mov	r7, r0
 800dcfc:	b1c0      	cbz	r0, 800dd30 <iface_cb+0x3d4>
		PR("IPv6 default router :\n");
 800dcfe:	4aa6      	ldr	r2, [pc, #664]	; (800df98 <iface_cb+0x63c>)
 800dd00:	2108      	movs	r1, #8
 800dd02:	4620      	mov	r0, r4
 800dd04:	f005 ff7a 	bl	8013bfc <shell_fprintf>
		PR("\t%s%s\n",
 800dd08:	f107 0108 	add.w	r1, r7, #8
 800dd0c:	2002      	movs	r0, #2
 800dd0e:	f7f8 fd4d 	bl	80067ac <net_sprint_addr>
 800dd12:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800dd16:	4998      	ldr	r1, [pc, #608]	; (800df78 <iface_cb+0x61c>)
 800dd18:	4603      	mov	r3, r0
 800dd1a:	f012 0f04 	tst.w	r2, #4
 800dd1e:	4a9f      	ldr	r2, [pc, #636]	; (800df9c <iface_cb+0x640>)
 800dd20:	4620      	mov	r0, r4
 800dd22:	bf08      	it	eq
 800dd24:	460a      	moveq	r2, r1
 800dd26:	2108      	movs	r1, #8
 800dd28:	9200      	str	r2, [sp, #0]
 800dd2a:	4a9d      	ldr	r2, [pc, #628]	; (800dfa0 <iface_cb+0x644>)
 800dd2c:	f005 ff66 	bl	8013bfc <shell_fprintf>
	if (ipv6) {
 800dd30:	2e00      	cmp	r6, #0
 800dd32:	f43f aed2 	beq.w	800dada <iface_cb+0x17e>
		PR("IPv6 hop limit           : %d\n",
 800dd36:	f896 3125 	ldrb.w	r3, [r6, #293]	; 0x125
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	4a99      	ldr	r2, [pc, #612]	; (800dfa4 <iface_cb+0x648>)
 800dd3e:	2108      	movs	r1, #8
 800dd40:	f005 ff5c 	bl	8013bfc <shell_fprintf>
		PR("IPv6 base reachable time : %d\n",
 800dd44:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 800dd48:	4620      	mov	r0, r4
 800dd4a:	4a97      	ldr	r2, [pc, #604]	; (800dfa8 <iface_cb+0x64c>)
 800dd4c:	2108      	movs	r1, #8
 800dd4e:	f005 ff55 	bl	8013bfc <shell_fprintf>
		PR("IPv6 reachable time      : %d\n",
 800dd52:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 800dd56:	4620      	mov	r0, r4
 800dd58:	4a94      	ldr	r2, [pc, #592]	; (800dfac <iface_cb+0x650>)
 800dd5a:	2108      	movs	r1, #8
 800dd5c:	f005 ff4e 	bl	8013bfc <shell_fprintf>
		PR("IPv6 retransmit timer    : %d\n",
 800dd60:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
 800dd64:	4a92      	ldr	r2, [pc, #584]	; (800dfb0 <iface_cb+0x654>)
 800dd66:	2108      	movs	r1, #8
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f005 ff47 	bl	8013bfc <shell_fprintf>
 800dd6e:	e6b4      	b.n	800dada <iface_cb+0x17e>
		if (!unicast->is_used) {
 800dd70:	2330      	movs	r3, #48	; 0x30
 800dd72:	fb03 6307 	mla	r3, r3, r7, r6
 800dd76:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dd7a:	079b      	lsls	r3, r3, #30
 800dd7c:	d531      	bpl.n	800dde2 <iface_cb+0x486>
		PR("\t%s %s %s%s%s\n",
 800dd7e:	4641      	mov	r1, r8
 800dd80:	2002      	movs	r0, #2
 800dd82:	f7f8 fd13 	bl	80067ac <net_sprint_addr>
 800dd86:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800df9c <iface_cb+0x640>
 800dd90:	2a04      	cmp	r2, #4
		count++;
 800dd92:	f109 0901 	add.w	r9, r9, #1
 800dd96:	bf96      	itet	ls
 800dd98:	4986      	ldrls	r1, [pc, #536]	; (800dfb4 <iface_cb+0x658>)
		PR("\t%s %s %s%s%s\n",
 800dd9a:	4987      	ldrhi	r1, [pc, #540]	; (800dfb8 <iface_cb+0x65c>)
	switch (addr_state) {
 800dd9c:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
 800dda0:	f898 2029 	ldrb.w	r2, [r8, #41]	; 0x29
 800dda4:	3201      	adds	r2, #1
 800dda6:	b2d2      	uxtb	r2, r2
 800dda8:	2a03      	cmp	r2, #3
 800ddaa:	bf96      	itet	ls
 800ddac:	4883      	ldrls	r0, [pc, #524]	; (800dfbc <iface_cb+0x660>)
 800ddae:	4884      	ldrhi	r0, [pc, #528]	; (800dfc0 <iface_cb+0x664>)
 800ddb0:	f850 0022 	ldrls.w	r0, [r0, r2, lsl #2]
		PR("\t%s %s %s%s%s\n",
 800ddb4:	2230      	movs	r2, #48	; 0x30
 800ddb6:	fb02 6207 	mla	r2, r2, r7, r6
 800ddba:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800ddbe:	f012 0f01 	tst.w	r2, #1
 800ddc2:	bf08      	it	eq
 800ddc4:	46d4      	moveq	ip, sl
 800ddc6:	f012 0f04 	tst.w	r2, #4
 800ddca:	bf14      	ite	ne
 800ddcc:	465a      	movne	r2, fp
 800ddce:	4652      	moveq	r2, sl
 800ddd0:	e9cd 1000 	strd	r1, r0, [sp]
 800ddd4:	e9cd c202 	strd	ip, r2, [sp, #8]
 800ddd8:	2108      	movs	r1, #8
 800ddda:	4a7a      	ldr	r2, [pc, #488]	; (800dfc4 <iface_cb+0x668>)
 800dddc:	4620      	mov	r0, r4
 800ddde:	f005 ff0d 	bl	8013bfc <shell_fprintf>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_ADDR; i++) {
 800dde2:	3701      	adds	r7, #1
 800dde4:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800dde8:	e748      	b.n	800dc7c <iface_cb+0x320>
		if (!mcast->is_used) {
 800ddea:	fb0a 6308 	mla	r3, sl, r8, r6
 800ddee:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800ddf2:	07d8      	lsls	r0, r3, #31
 800ddf4:	d50a      	bpl.n	800de0c <iface_cb+0x4b0>
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
 800ddf6:	4649      	mov	r1, r9
 800ddf8:	2002      	movs	r0, #2
		count++;
 800ddfa:	3701      	adds	r7, #1
		PR("\t%s\n", net_sprint_ipv6_addr(&mcast->address.in6_addr));
 800ddfc:	f7f8 fcd6 	bl	80067ac <net_sprint_addr>
 800de00:	465a      	mov	r2, fp
 800de02:	4603      	mov	r3, r0
 800de04:	2108      	movs	r1, #8
 800de06:	4620      	mov	r0, r4
 800de08:	f005 fef8 	bl	8013bfc <shell_fprintf>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_MADDR; i++) {
 800de0c:	f108 0801 	add.w	r8, r8, #1
 800de10:	f109 0918 	add.w	r9, r9, #24
 800de14:	e74b      	b.n	800dcae <iface_cb+0x352>
		if (!prefix->is_used) {
 800de16:	2328      	movs	r3, #40	; 0x28
 800de18:	fb03 6308 	mla	r3, r3, r8, r6
 800de1c:	f103 0ac0 	add.w	sl, r3, #192	; 0xc0
 800de20:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 800de24:	0799      	lsls	r1, r3, #30
 800de26:	d517      	bpl.n	800de58 <iface_cb+0x4fc>
		PR("\t%s/%d%s\n",
 800de28:	4649      	mov	r1, r9
 800de2a:	2002      	movs	r0, #2
 800de2c:	f7f8 fcbe 	bl	80067ac <net_sprint_addr>
 800de30:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
 800de34:	4603      	mov	r3, r0
 800de36:	4850      	ldr	r0, [pc, #320]	; (800df78 <iface_cb+0x61c>)
 800de38:	f012 0f01 	tst.w	r2, #1
 800de3c:	f899 1014 	ldrb.w	r1, [r9, #20]
 800de40:	4a56      	ldr	r2, [pc, #344]	; (800df9c <iface_cb+0x640>)
		count++;
 800de42:	f107 0701 	add.w	r7, r7, #1
		PR("\t%s/%d%s\n",
 800de46:	bf08      	it	eq
 800de48:	4602      	moveq	r2, r0
 800de4a:	4620      	mov	r0, r4
 800de4c:	e9cd 1200 	strd	r1, r2, [sp]
 800de50:	465a      	mov	r2, fp
 800de52:	2108      	movs	r1, #8
 800de54:	f005 fed2 	bl	8013bfc <shell_fprintf>
	for (i = 0; ipv6 && i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800de58:	f108 0801 	add.w	r8, r8, #1
 800de5c:	f109 0928 	add.w	r9, r9, #40	; 0x28
 800de60:	e73c      	b.n	800dcdc <iface_cb+0x380>
	count = 0;
 800de62:	2700      	movs	r7, #0
	PR("IPv4 unicast addresses (max %d):\n", NET_IF_MAX_IPV4_ADDR);
 800de64:	4620      	mov	r0, r4
 800de66:	2301      	movs	r3, #1
 800de68:	4a57      	ldr	r2, [pc, #348]	; (800dfc8 <iface_cb+0x66c>)
 800de6a:	2108      	movs	r1, #8
	ipv4 = iface->config.ip.ipv4;
 800de6c:	68ee      	ldr	r6, [r5, #12]
		PR("\t%s %s %s%s\n",
 800de6e:	f8df 8148 	ldr.w	r8, [pc, #328]	; 800dfb8 <iface_cb+0x65c>
	PR("IPv4 unicast addresses (max %d):\n", NET_IF_MAX_IPV4_ADDR);
 800de72:	f005 fec3 	bl	8013bfc <shell_fprintf>
	for (i = 0; ipv4 && i < NET_IF_MAX_IPV4_ADDR; i++) {
 800de76:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800dfb4 <iface_cb+0x658>
 800de7a:	4638      	mov	r0, r7
 800de7c:	b106      	cbz	r6, 800de80 <iface_cb+0x524>
 800de7e:	b3b0      	cbz	r0, 800deee <iface_cb+0x592>
	if (count == 0) {
 800de80:	b927      	cbnz	r7, 800de8c <iface_cb+0x530>
		PR("\t<none>\n");
 800de82:	4a40      	ldr	r2, [pc, #256]	; (800df84 <iface_cb+0x628>)
 800de84:	2108      	movs	r1, #8
 800de86:	4620      	mov	r0, r4
 800de88:	f005 feb8 	bl	8013bfc <shell_fprintf>
	count = 0;
 800de8c:	2700      	movs	r7, #0
		PR("\t%s\n", net_sprint_ipv4_addr(&mcast->address.in_addr));
 800de8e:	f106 0934 	add.w	r9, r6, #52	; 0x34
 800de92:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800df88 <iface_cb+0x62c>
	PR("IPv4 multicast addresses (max %d):\n", NET_IF_MAX_IPV4_MADDR);
 800de96:	2301      	movs	r3, #1
	for (i = 0; ipv4 && i < NET_IF_MAX_IPV4_MADDR; i++) {
 800de98:	46b8      	mov	r8, r7
	PR("IPv4 multicast addresses (max %d):\n", NET_IF_MAX_IPV4_MADDR);
 800de9a:	4a4c      	ldr	r2, [pc, #304]	; (800dfcc <iface_cb+0x670>)
 800de9c:	2108      	movs	r1, #8
 800de9e:	4620      	mov	r0, r4
 800dea0:	f005 feac 	bl	8013bfc <shell_fprintf>
	for (i = 0; ipv4 && i < NET_IF_MAX_IPV4_MADDR; i++) {
 800dea4:	2e00      	cmp	r6, #0
 800dea6:	d062      	beq.n	800df6e <iface_cb+0x612>
 800dea8:	f1b8 0f00 	cmp.w	r8, #0
 800deac:	d04d      	beq.n	800df4a <iface_cb+0x5ee>
	if (count == 0) {
 800deae:	b93f      	cbnz	r7, 800dec0 <iface_cb+0x564>
		PR("\t<none>\n");
 800deb0:	4a34      	ldr	r2, [pc, #208]	; (800df84 <iface_cb+0x628>)
 800deb2:	2108      	movs	r1, #8
 800deb4:	4620      	mov	r0, r4
 800deb6:	f005 fea1 	bl	8013bfc <shell_fprintf>
	if (ipv4) {
 800deba:	2e00      	cmp	r6, #0
 800debc:	f43f ae1c 	beq.w	800daf8 <iface_cb+0x19c>
		PR("IPv4 gateway : %s\n",
 800dec0:	f106 0148 	add.w	r1, r6, #72	; 0x48
 800dec4:	2001      	movs	r0, #1
 800dec6:	f7f8 fc71 	bl	80067ac <net_sprint_addr>
 800deca:	4a41      	ldr	r2, [pc, #260]	; (800dfd0 <iface_cb+0x674>)
 800decc:	4603      	mov	r3, r0
 800dece:	2108      	movs	r1, #8
 800ded0:	4620      	mov	r0, r4
 800ded2:	f005 fe93 	bl	8013bfc <shell_fprintf>
		PR("IPv4 netmask : %s\n",
 800ded6:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 800deda:	2001      	movs	r0, #1
 800dedc:	f7f8 fc66 	bl	80067ac <net_sprint_addr>
 800dee0:	4a3c      	ldr	r2, [pc, #240]	; (800dfd4 <iface_cb+0x678>)
 800dee2:	4603      	mov	r3, r0
 800dee4:	2108      	movs	r1, #8
 800dee6:	4620      	mov	r0, r4
 800dee8:	f005 fe88 	bl	8013bfc <shell_fprintf>
 800deec:	e604      	b.n	800daf8 <iface_cb+0x19c>
		if (!unicast->is_used) {
 800deee:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800def2:	2001      	movs	r0, #1
 800def4:	079a      	lsls	r2, r3, #30
 800def6:	d5c1      	bpl.n	800de7c <iface_cb+0x520>
		PR("\t%s %s %s%s\n",
 800def8:	1d31      	adds	r1, r6, #4
		count++;
 800defa:	3701      	adds	r7, #1
		PR("\t%s %s %s%s\n",
 800defc:	f7f8 fc56 	bl	80067ac <net_sprint_addr>
 800df00:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 800df04:	4603      	mov	r3, r0
 800df06:	f8df c070 	ldr.w	ip, [pc, #112]	; 800df78 <iface_cb+0x61c>
 800df0a:	2a04      	cmp	r2, #4
 800df0c:	bf94      	ite	ls
 800df0e:	f859 1022 	ldrls.w	r1, [r9, r2, lsl #2]
 800df12:	4641      	movhi	r1, r8
	switch (addr_state) {
 800df14:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 800df18:	3201      	adds	r2, #1
 800df1a:	b2d2      	uxtb	r2, r2
 800df1c:	2a03      	cmp	r2, #3
 800df1e:	bf96      	itet	ls
 800df20:	4826      	ldrls	r0, [pc, #152]	; (800dfbc <iface_cb+0x660>)
 800df22:	4827      	ldrhi	r0, [pc, #156]	; (800dfc0 <iface_cb+0x664>)
 800df24:	f850 0022 	ldrls.w	r0, [r0, r2, lsl #2]
		PR("\t%s %s %s%s\n",
 800df28:	f896 202f 	ldrb.w	r2, [r6, #47]	; 0x2f
 800df2c:	9100      	str	r1, [sp, #0]
 800df2e:	2108      	movs	r1, #8
 800df30:	f012 0f01 	tst.w	r2, #1
 800df34:	4a19      	ldr	r2, [pc, #100]	; (800df9c <iface_cb+0x640>)
 800df36:	bf08      	it	eq
 800df38:	4662      	moveq	r2, ip
 800df3a:	e9cd 0201 	strd	r0, r2, [sp, #4]
 800df3e:	4620      	mov	r0, r4
 800df40:	4a25      	ldr	r2, [pc, #148]	; (800dfd8 <iface_cb+0x67c>)
 800df42:	f005 fe5b 	bl	8013bfc <shell_fprintf>
		count++;
 800df46:	2001      	movs	r0, #1
 800df48:	e798      	b.n	800de7c <iface_cb+0x520>
		if (!mcast->is_used) {
 800df4a:	f896 3044 	ldrb.w	r3, [r6, #68]	; 0x44
 800df4e:	f04f 0801 	mov.w	r8, #1
 800df52:	07db      	lsls	r3, r3, #31
 800df54:	d5a6      	bpl.n	800dea4 <iface_cb+0x548>
		PR("\t%s\n", net_sprint_ipv4_addr(&mcast->address.in_addr));
 800df56:	4649      	mov	r1, r9
 800df58:	4640      	mov	r0, r8
 800df5a:	f7f8 fc27 	bl	80067ac <net_sprint_addr>
 800df5e:	4652      	mov	r2, sl
 800df60:	4603      	mov	r3, r0
 800df62:	2108      	movs	r1, #8
 800df64:	4620      	mov	r0, r4
		count++;
 800df66:	4447      	add	r7, r8
		PR("\t%s\n", net_sprint_ipv4_addr(&mcast->address.in_addr));
 800df68:	f005 fe48 	bl	8013bfc <shell_fprintf>
		count++;
 800df6c:	e79a      	b.n	800dea4 <iface_cb+0x548>
	if (count == 0) {
 800df6e:	2f00      	cmp	r7, #0
 800df70:	f47f adc2 	bne.w	800daf8 <iface_cb+0x19c>
 800df74:	e79c      	b.n	800deb0 <iface_cb+0x554>
 800df76:	bf00      	nop
 800df78:	0801ffee 	.word	0x0801ffee
 800df7c:	080201a8 	.word	0x080201a8
 800df80:	080202aa 	.word	0x080202aa
 800df84:	08020010 	.word	0x08020010
 800df88:	08020281 	.word	0x08020281
 800df8c:	080202db 	.word	0x080202db
 800df90:	08020318 	.word	0x08020318
 800df94:	080202ff 	.word	0x080202ff
 800df98:	08020322 	.word	0x08020322
 800df9c:	0802019e 	.word	0x0802019e
 800dfa0:	08020339 	.word	0x08020339
 800dfa4:	08020340 	.word	0x08020340
 800dfa8:	0802035f 	.word	0x0802035f
 800dfac:	0802037e 	.word	0x0802037e
 800dfb0:	0802039d 	.word	0x0802039d
 800dfb4:	0801d0ac 	.word	0x0801d0ac
 800dfb8:	0801fe41 	.word	0x0801fe41
 800dfbc:	0801d0c0 	.word	0x0801d0c0
 800dfc0:	0801ebf5 	.word	0x0801ebf5
 800dfc4:	080202cc 	.word	0x080202cc
 800dfc8:	080203c1 	.word	0x080203c1
 800dfcc:	080203f0 	.word	0x080203f0
 800dfd0:	08020414 	.word	0x08020414
 800dfd4:	08020427 	.word	0x08020427
 800dfd8:	080203e3 	.word	0x080203e3

0800dfdc <nbr_cb>:
{
 800dfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int *count = data->user_data;
 800dfe0:	e9d1 9a00 	ldrd	r9, sl, [r1]
{
 800dfe4:	b091      	sub	sp, #68	; 0x44
 800dfe6:	4604      	mov	r4, r0
	if (*count == 0) {
 800dfe8:	f8da 3000 	ldr.w	r3, [sl]
 800dfec:	b92b      	cbnz	r3, 800dffa <nbr_cb+0x1e>
		PR("     Neighbor  Interface  Flags    State     "
 800dfee:	4b39      	ldr	r3, [pc, #228]	; (800e0d4 <nbr_cb+0xf8>)
 800dff0:	2108      	movs	r1, #8
 800dff2:	4a39      	ldr	r2, [pc, #228]	; (800e0d8 <nbr_cb+0xfc>)
 800dff4:	4648      	mov	r0, r9
 800dff6:	f005 fe01 	bl	8013bfc <shell_fprintf>
	(*count)++;
 800dffa:	f8da 3000 	ldr.w	r3, [sl]
 800dffe:	3301      	adds	r3, #1
 800e000:	f8ca 3000 	str.w	r3, [sl]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
 800e004:	68e3      	ldr	r3, [r4, #12]
 800e006:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 800e00a:	f7fa fd23 	bl	8008a54 <net_ipv6_nbr_state2str>
 800e00e:	4607      	mov	r7, r0
	if (strlen(state_str) == 5) {
 800e010:	f006 fde4 	bl	8014bdc <strlen>
		state_pad = "    ";
 800e014:	4a2f      	ldr	r2, [pc, #188]	; (800e0d4 <nbr_cb+0xf8>)
 800e016:	4b31      	ldr	r3, [pc, #196]	; (800e0dc <nbr_cb+0x100>)
 800e018:	2805      	cmp	r0, #5
 800e01a:	bf14      	ite	ne
 800e01c:	4690      	movne	r8, r2
 800e01e:	4698      	moveq	r8, r3
 800e020:	68e2      	ldr	r2, [r4, #12]
		    net_ipv6_nbr_data(nbr)->reachable_timeout -
 800e022:	6a13      	ldr	r3, [r2, #32]
	remaining = net_ipv6_nbr_data(nbr)->reachable +
 800e024:	e9d2 5606 	ldrd	r5, r6, [r2, #24]
 800e028:	195d      	adds	r5, r3, r5
 800e02a:	eb46 76e3 	adc.w	r6, r6, r3, asr #31
	return z_impl_k_uptime_ticks();
 800e02e:	f00d feeb 	bl	801be08 <z_impl_k_uptime_ticks>
 800e032:	220a      	movs	r2, #10
 800e034:	2300      	movs	r3, #0
 800e036:	f7f2 fbfd 	bl	8000834 <__aeabi_uldivmod>
 800e03a:	1a2d      	subs	r5, r5, r0
	PR("[%2d] %p  %d      %5d/%d/%d/%d  %s%s %6d  %17s%s %s\n",
 800e03c:	68a0      	ldr	r0, [r4, #8]
	remaining = net_ipv6_nbr_data(nbr)->reachable +
 800e03e:	eb66 0601 	sbc.w	r6, r6, r1
	PR("[%2d] %p  %d      %5d/%d/%d/%d  %s%s %6d  %17s%s %s\n",
 800e042:	f8da a000 	ldr.w	sl, [sl]
 800e046:	f7f8 f95f 	bl	8006308 <net_if_get_by_iface>
 800e04a:	68e3      	ldr	r3, [r4, #12]
 800e04c:	2e00      	cmp	r6, #0
 800e04e:	900c      	str	r0, [sp, #48]	; 0x30
 800e050:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e052:	7860      	ldrb	r0, [r4, #1]
 800e054:	bfb8      	it	lt
 800e056:	2500      	movlt	r5, #0
 800e058:	920d      	str	r2, [sp, #52]	; 0x34
 800e05a:	7822      	ldrb	r2, [r4, #0]
 800e05c:	28ff      	cmp	r0, #255	; 0xff
 800e05e:	f893 b035 	ldrb.w	fp, [r3, #53]	; 0x35
 800e062:	920e      	str	r2, [sp, #56]	; 0x38
 800e064:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800e068:	920f      	str	r2, [sp, #60]	; 0x3c
 800e06a:	d030      	beq.n	800e0ce <nbr_cb+0xf2>
 800e06c:	f7fa f99e 	bl	80083ac <net_nbr_get_lladdr>
 800e070:	4606      	mov	r6, r0
 800e072:	7860      	ldrb	r0, [r4, #1]
 800e074:	f7fa f99a 	bl	80083ac <net_nbr_get_lladdr>
 800e078:	2318      	movs	r3, #24
 800e07a:	7841      	ldrb	r1, [r0, #1]
 800e07c:	1cb0      	adds	r0, r6, #2
 800e07e:	4a18      	ldr	r2, [pc, #96]	; (800e0e0 <nbr_cb+0x104>)
 800e080:	f7f8 fa7c 	bl	800657c <net_sprint_ll_addr_buf>
 800e084:	4606      	mov	r6, r0
 800e086:	7860      	ldrb	r0, [r4, #1]
 800e088:	28ff      	cmp	r0, #255	; 0xff
 800e08a:	d001      	beq.n	800e090 <nbr_cb+0xb4>
 800e08c:	f7fa f98e 	bl	80083ac <net_nbr_get_lladdr>
 800e090:	68e1      	ldr	r1, [r4, #12]
 800e092:	2002      	movs	r0, #2
 800e094:	3104      	adds	r1, #4
 800e096:	f7f8 fb89 	bl	80067ac <net_sprint_addr>
 800e09a:	4b0e      	ldr	r3, [pc, #56]	; (800e0d4 <nbr_cb+0xf8>)
 800e09c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e09e:	2108      	movs	r1, #8
 800e0a0:	4a10      	ldr	r2, [pc, #64]	; (800e0e4 <nbr_cb+0x108>)
 800e0a2:	4648      	mov	r0, r9
 800e0a4:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
 800e0a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0aa:	9304      	str	r3, [sp, #16]
 800e0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0ae:	9303      	str	r3, [sp, #12]
 800e0b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0b2:	9302      	str	r3, [sp, #8]
 800e0b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0b6:	e9cd 4300 	strd	r4, r3, [sp]
 800e0ba:	4653      	mov	r3, sl
 800e0bc:	e9cd 8507 	strd	r8, r5, [sp, #28]
 800e0c0:	e9cd b705 	strd	fp, r7, [sp, #20]
 800e0c4:	f005 fd9a 	bl	8013bfc <shell_fprintf>
}
 800e0c8:	b011      	add	sp, #68	; 0x44
 800e0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	PR("[%2d] %p  %d      %5d/%d/%d/%d  %s%s %6d  %17s%s %s\n",
 800e0ce:	4e06      	ldr	r6, [pc, #24]	; (800e0e8 <nbr_cb+0x10c>)
 800e0d0:	e7d9      	b.n	800e086 <nbr_cb+0xaa>
 800e0d2:	bf00      	nop
 800e0d4:	0801ffee 	.word	0x0801ffee
 800e0d8:	080204d1 	.word	0x080204d1
 800e0dc:	080204ca 	.word	0x080204ca
 800e0e0:	24003151 	.word	0x24003151
 800e0e4:	08020523 	.word	0x08020523
 800e0e8:	080204cf 	.word	0x080204cf

0800e0ec <arp_cb>:
{
 800e0ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int *count = data->user_data;
 800e0f0:	e9d1 8500 	ldrd	r8, r5, [r1]
{
 800e0f4:	b085      	sub	sp, #20
 800e0f6:	4604      	mov	r4, r0
	if (*count == 0) {
 800e0f8:	682b      	ldr	r3, [r5, #0]
 800e0fa:	b923      	cbnz	r3, 800e106 <arp_cb+0x1a>
		PR("     Interface  Link              Address\n");
 800e0fc:	4a13      	ldr	r2, [pc, #76]	; (800e14c <arp_cb+0x60>)
 800e0fe:	2108      	movs	r1, #8
 800e100:	4640      	mov	r0, r8
 800e102:	f005 fd7b 	bl	8013bfc <shell_fprintf>
	PR("[%2d] %d          %s %s\n", *count,
 800e106:	68a0      	ldr	r0, [r4, #8]
 800e108:	f8d5 9000 	ldr.w	r9, [r5]
 800e10c:	f7f8 f8fc 	bl	8006308 <net_if_get_by_iface>
 800e110:	2318      	movs	r3, #24
 800e112:	4606      	mov	r6, r0
 800e114:	4a0e      	ldr	r2, [pc, #56]	; (800e150 <arp_cb+0x64>)
 800e116:	2106      	movs	r1, #6
 800e118:	f104 0010 	add.w	r0, r4, #16
 800e11c:	f7f8 fa2e 	bl	800657c <net_sprint_ll_addr_buf>
 800e120:	4607      	mov	r7, r0
 800e122:	f104 010c 	add.w	r1, r4, #12
 800e126:	2001      	movs	r0, #1
 800e128:	f7f8 fb40 	bl	80067ac <net_sprint_addr>
 800e12c:	464b      	mov	r3, r9
 800e12e:	4a09      	ldr	r2, [pc, #36]	; (800e154 <arp_cb+0x68>)
 800e130:	2108      	movs	r1, #8
 800e132:	9600      	str	r6, [sp, #0]
 800e134:	e9cd 7001 	strd	r7, r0, [sp, #4]
 800e138:	4640      	mov	r0, r8
 800e13a:	f005 fd5f 	bl	8013bfc <shell_fprintf>
	(*count)++;
 800e13e:	682b      	ldr	r3, [r5, #0]
 800e140:	3301      	adds	r3, #1
 800e142:	602b      	str	r3, [r5, #0]
}
 800e144:	b005      	add	sp, #20
 800e146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e14a:	bf00      	nop
 800e14c:	08020558 	.word	0x08020558
 800e150:	24003151 	.word	0x24003151
 800e154:	08020583 	.word	0x08020583

0800e158 <cmd_net_pkt>:
{
 800e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (argv[1]) {
 800e15c:	6855      	ldr	r5, [r2, #4]
{
 800e15e:	b087      	sub	sp, #28
 800e160:	4604      	mov	r4, r0
 800e162:	4616      	mov	r6, r2
	if (argv[1]) {
 800e164:	2d00      	cmp	r5, #0
 800e166:	f000 80a4 	beq.w	800e2b2 <cmd_net_pkt+0x15a>
	if (ptr_str[0] == '0' && ptr_str[1] == 'x') {
 800e16a:	782b      	ldrb	r3, [r5, #0]
 800e16c:	2b30      	cmp	r3, #48	; 0x30
 800e16e:	d103      	bne.n	800e178 <cmd_net_pkt+0x20>
 800e170:	786b      	ldrb	r3, [r5, #1]
 800e172:	2b78      	cmp	r3, #120	; 0x78
		ptr_str += 2;
 800e174:	bf08      	it	eq
 800e176:	3502      	addeq	r5, #2
	len = hex2bin(ptr_str, strlen(ptr_str), buf, sizeof(buf));
 800e178:	af05      	add	r7, sp, #20
 800e17a:	4628      	mov	r0, r5
 800e17c:	f006 fd2e 	bl	8014bdc <strlen>
 800e180:	2304      	movs	r3, #4
 800e182:	4601      	mov	r1, r0
 800e184:	463a      	mov	r2, r7
 800e186:	4628      	mov	r0, r5
 800e188:	f004 ff2e 	bl	8012fe8 <hex2bin>
	if (!len) {
 800e18c:	b128      	cbz	r0, 800e19a <cmd_net_pkt+0x42>
	for (i = len - 1; i >= 0; i--) {
 800e18e:	2300      	movs	r3, #0
 800e190:	3801      	subs	r0, #1
	intptr_t ptr = 0;
 800e192:	461d      	mov	r5, r3
	for (i = len - 1; i >= 0; i--) {
 800e194:	2800      	cmp	r0, #0
 800e196:	da09      	bge.n	800e1ac <cmd_net_pkt+0x54>
		if (!pkt) {
 800e198:	b975      	cbnz	r5, 800e1b8 <cmd_net_pkt+0x60>
			PR_ERROR("Invalid ptr value (%s). "
 800e19a:	6873      	ldr	r3, [r6, #4]
 800e19c:	4a47      	ldr	r2, [pc, #284]	; (800e2bc <cmd_net_pkt+0x164>)
			PR_ERROR("Pointer is not recognized as net_pkt (%s).\n",
 800e19e:	2101      	movs	r1, #1
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f005 fd2b 	bl	8013bfc <shell_fprintf>
		return -ENOEXEC;
 800e1a6:	f06f 0007 	mvn.w	r0, #7
 800e1aa:	e038      	b.n	800e21e <cmd_net_pkt+0xc6>
		ptr |= buf[i] << 8 * (len - 1 - i);
 800e1ac:	5c3a      	ldrb	r2, [r7, r0]
	for (i = len - 1; i >= 0; i--) {
 800e1ae:	3801      	subs	r0, #1
		ptr |= buf[i] << 8 * (len - 1 - i);
 800e1b0:	409a      	lsls	r2, r3
 800e1b2:	3308      	adds	r3, #8
 800e1b4:	4315      	orrs	r5, r2
	for (i = len - 1; i >= 0; i--) {
 800e1b6:	e7ed      	b.n	800e194 <cmd_net_pkt+0x3c>
	net_pkt_get_info(&rx, &tx, NULL, NULL);
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	4639      	mov	r1, r7
 800e1bc:	a804      	add	r0, sp, #16
 800e1be:	461a      	mov	r2, r3
 800e1c0:	f7f8 feb4 	bl	8006f2c <net_pkt_get_info>
	if (is_pkt_part_of_slab(rx, ptr) || is_pkt_part_of_slab(tx, ptr)) {
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	9804      	ldr	r0, [sp, #16]
 800e1c8:	f00b fe84 	bl	8019ed4 <is_pkt_part_of_slab>
 800e1cc:	b920      	cbnz	r0, 800e1d8 <cmd_net_pkt+0x80>
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	9805      	ldr	r0, [sp, #20]
 800e1d2:	f00b fe7f 	bl	8019ed4 <is_pkt_part_of_slab>
 800e1d6:	b328      	cbz	r0, 800e224 <cmd_net_pkt+0xcc>
	PR("net_pkt %p buffer chain:\n", pkt);
 800e1d8:	462b      	mov	r3, r5
 800e1da:	4a39      	ldr	r2, [pc, #228]	; (800e2c0 <cmd_net_pkt+0x168>)
 800e1dc:	2108      	movs	r1, #8
 800e1de:	4620      	mov	r0, r4
	struct net_buf *buf = pkt->buffer;
 800e1e0:	68ae      	ldr	r6, [r5, #8]
	PR("net_pkt %p buffer chain:\n", pkt);
 800e1e2:	f005 fd0b 	bl	8013bfc <shell_fprintf>
 800e1e6:	f3bf 8f5b 	dmb	ish
 800e1ea:	6a2b      	ldr	r3, [r5, #32]
	PR("%p[%ld]", pkt, atomic_get(&pkt->atomic_ref));
 800e1ec:	4a35      	ldr	r2, [pc, #212]	; (800e2c4 <cmd_net_pkt+0x16c>)
 800e1ee:	f3bf 8f5b 	dmb	ish
 800e1f2:	2108      	movs	r1, #8
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	462b      	mov	r3, r5
 800e1fa:	f105 0820 	add.w	r8, r5, #32
 800e1fe:	f005 fcfd 	bl	8013bfc <shell_fprintf>
	if (buf) {
 800e202:	b996      	cbnz	r6, 800e22a <cmd_net_pkt+0xd2>
	PR("\n");
 800e204:	4a30      	ldr	r2, [pc, #192]	; (800e2c8 <cmd_net_pkt+0x170>)
 800e206:	2108      	movs	r1, #8
 800e208:	4620      	mov	r0, r4
 800e20a:	f005 fcf7 	bl	8013bfc <shell_fprintf>
		PR("\n");
 800e20e:	4a2e      	ldr	r2, [pc, #184]	; (800e2c8 <cmd_net_pkt+0x170>)
 800e210:	2108      	movs	r1, #8
 800e212:	4620      	mov	r0, r4
 800e214:	f005 fcf2 	bl	8013bfc <shell_fprintf>
	struct net_buf *buf = pkt->buffer;
 800e218:	68ae      	ldr	r6, [r5, #8]
	if (!buf || buf->ref == 0) {
 800e21a:	bb76      	cbnz	r6, 800e27a <cmd_net_pkt+0x122>
	return 0;
 800e21c:	2000      	movs	r0, #0
}
 800e21e:	b007      	add	sp, #28
 800e220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			PR_ERROR("Pointer is not recognized as net_pkt (%s).\n",
 800e224:	6873      	ldr	r3, [r6, #4]
 800e226:	4a29      	ldr	r2, [pc, #164]	; (800e2cc <cmd_net_pkt+0x174>)
 800e228:	e7b9      	b.n	800e19e <cmd_net_pkt+0x46>
		PR("%p[%ld/%u (%u/%u)]", buf, atomic_get(&pkt->atomic_ref),
 800e22a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800e2d0 <cmd_net_pkt+0x178>
		PR("->");
 800e22e:	2108      	movs	r1, #8
			PR("->");
 800e230:	4f28      	ldr	r7, [pc, #160]	; (800e2d4 <cmd_net_pkt+0x17c>)
		PR("->");
 800e232:	4620      	mov	r0, r4
 800e234:	4a27      	ldr	r2, [pc, #156]	; (800e2d4 <cmd_net_pkt+0x17c>)
 800e236:	f005 fce1 	bl	8013bfc <shell_fprintf>
 800e23a:	f3bf 8f5b 	dmb	ish
	return net_buf_simple_max_len(&buf->b);
 800e23e:	f106 000c 	add.w	r0, r6, #12
 800e242:	f8d8 a000 	ldr.w	sl, [r8]
 800e246:	f3bf 8f5b 	dmb	ish
		PR("%p[%ld/%u (%u/%u)]", buf, atomic_get(&pkt->atomic_ref),
 800e24a:	f8b6 b010 	ldrh.w	fp, [r6, #16]
 800e24e:	f006 fef2 	bl	8015036 <net_buf_simple_max_len>
 800e252:	8a73      	ldrh	r3, [r6, #18]
 800e254:	464a      	mov	r2, r9
 800e256:	2108      	movs	r1, #8
 800e258:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e25c:	e9cd ab00 	strd	sl, fp, [sp]
 800e260:	4633      	mov	r3, r6
 800e262:	4620      	mov	r0, r4
 800e264:	f005 fcca 	bl	8013bfc <shell_fprintf>
		buf = buf->frags;
 800e268:	6876      	ldr	r6, [r6, #4]
		if (buf) {
 800e26a:	2e00      	cmp	r6, #0
 800e26c:	d0ca      	beq.n	800e204 <cmd_net_pkt+0xac>
			PR("->");
 800e26e:	463a      	mov	r2, r7
 800e270:	2108      	movs	r1, #8
 800e272:	4620      	mov	r0, r4
 800e274:	f005 fcc2 	bl	8013bfc <shell_fprintf>
	while (buf) {
 800e278:	e7df      	b.n	800e23a <cmd_net_pkt+0xe2>
	if (!buf || buf->ref == 0) {
 800e27a:	7a33      	ldrb	r3, [r6, #8]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d0cd      	beq.n	800e21c <cmd_net_pkt+0xc4>
	PR("net_pkt %p buffer chain hexdump:\n", pkt);
 800e280:	462b      	mov	r3, r5
		PR("net_buf[%d] %p\n", i++, buf);
 800e282:	4f15      	ldr	r7, [pc, #84]	; (800e2d8 <cmd_net_pkt+0x180>)
	int i = 0;
 800e284:	2500      	movs	r5, #0
	PR("net_pkt %p buffer chain hexdump:\n", pkt);
 800e286:	4a15      	ldr	r2, [pc, #84]	; (800e2dc <cmd_net_pkt+0x184>)
 800e288:	2108      	movs	r1, #8
 800e28a:	4620      	mov	r0, r4
 800e28c:	f005 fcb6 	bl	8013bfc <shell_fprintf>
		PR("net_buf[%d] %p\n", i++, buf);
 800e290:	462b      	mov	r3, r5
 800e292:	463a      	mov	r2, r7
 800e294:	2108      	movs	r1, #8
 800e296:	4620      	mov	r0, r4
 800e298:	9600      	str	r6, [sp, #0]
 800e29a:	3501      	adds	r5, #1
 800e29c:	f005 fcae 	bl	8013bfc <shell_fprintf>
		shell_hexdump(sh, buf->data, buf->len);
 800e2a0:	8a32      	ldrh	r2, [r6, #16]
 800e2a2:	68f1      	ldr	r1, [r6, #12]
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f005 fcb6 	bl	8013c16 <shell_hexdump>
		buf = buf->frags;
 800e2aa:	6876      	ldr	r6, [r6, #4]
	while (buf) {
 800e2ac:	2e00      	cmp	r6, #0
 800e2ae:	d1ef      	bne.n	800e290 <cmd_net_pkt+0x138>
 800e2b0:	e7b4      	b.n	800e21c <cmd_net_pkt+0xc4>
		PR_INFO("Pointer value must be given.\n");
 800e2b2:	4a0b      	ldr	r2, [pc, #44]	; (800e2e0 <cmd_net_pkt+0x188>)
 800e2b4:	2102      	movs	r1, #2
 800e2b6:	f005 fca1 	bl	8013bfc <shell_fprintf>
 800e2ba:	e774      	b.n	800e1a6 <cmd_net_pkt+0x4e>
 800e2bc:	0802059c 	.word	0x0802059c
 800e2c0:	080205c9 	.word	0x080205c9
 800e2c4:	080205e3 	.word	0x080205e3
 800e2c8:	0801dcfa 	.word	0x0801dcfa
 800e2cc:	080205eb 	.word	0x080205eb
 800e2d0:	0802061a 	.word	0x0802061a
 800e2d4:	08020617 	.word	0x08020617
 800e2d8:	0802064f 	.word	0x0802064f
 800e2dc:	0802062d 	.word	0x0802062d
 800e2e0:	0802065f 	.word	0x0802065f

0800e2e4 <services_notify_ready>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800e2e4:	4b07      	ldr	r3, [pc, #28]	; (800e304 <services_notify_ready+0x20>)
 800e2e6:	f3bf 8f5b 	dmb	ish
 800e2ea:	e853 2f00 	ldrex	r2, [r3]
 800e2ee:	4302      	orrs	r2, r0
 800e2f0:	e843 2100 	strex	r1, r2, [r3]
 800e2f4:	2900      	cmp	r1, #0
 800e2f6:	d1f8      	bne.n	800e2ea <services_notify_ready+0x6>
 800e2f8:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
 800e2fc:	4802      	ldr	r0, [pc, #8]	; (800e308 <services_notify_ready+0x24>)
 800e2fe:	f003 be7f 	b.w	8012000 <z_impl_k_sem_give>
 800e302:	bf00      	nop
 800e304:	24002dec 	.word	0x24002dec
 800e308:	240011b0 	.word	0x240011b0

0800e30c <ipv4_addr_add_handler>:
#if CONFIG_NET_CONFIG_LOG_LEVEL >= LOG_LEVEL_INF
	char hr_addr[NET_IPV4_ADDR_LEN];
#endif
	int i;

	if (mgmt_event != NET_EVENT_IPV4_ADDR_ADD) {
 800e30c:	4b03      	ldr	r3, [pc, #12]	; (800e31c <ipv4_addr_add_handler+0x10>)
 800e30e:	4299      	cmp	r1, r3
 800e310:	d102      	bne.n	800e318 <ipv4_addr_add_handler+0xc>
					hr_addr, sizeof(hr_addr)));
#endif
		break;
	}

	services_notify_ready(NET_CONFIG_NEED_IPV4);
 800e312:	2004      	movs	r0, #4
 800e314:	f7ff bfe6 	b.w	800e2e4 <services_notify_ready>
}
 800e318:	4770      	bx	lr
 800e31a:	bf00      	nop
 800e31c:	e0040001 	.word	0xe0040001

0800e320 <iface_up_handler>:
#endif /* CONFIG_NET_IPV6 */

#if defined(CONFIG_NET_NATIVE)
static void iface_up_handler(struct net_mgmt_event_callback *cb,
			     uint32_t mgmt_event, struct net_if *iface)
{
 800e320:	b508      	push	{r3, lr}
	if (mgmt_event == NET_EVENT_IF_UP) {
 800e322:	4b06      	ldr	r3, [pc, #24]	; (800e33c <iface_up_handler+0x1c>)
 800e324:	4299      	cmp	r1, r3
 800e326:	d107      	bne.n	800e338 <iface_up_handler+0x18>
	z_impl_k_sem_reset(sem);
 800e328:	4805      	ldr	r0, [pc, #20]	; (800e340 <iface_up_handler+0x20>)
 800e32a:	f003 feb7 	bl	801209c <z_impl_k_sem_reset>
	z_impl_k_sem_give(sem);
 800e32e:	4805      	ldr	r0, [pc, #20]	; (800e344 <iface_up_handler+0x24>)
			 net_if_get_by_iface(iface), iface);

		k_sem_reset(&counter);
		k_sem_give(&waiter);
	}
}
 800e330:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e334:	f003 be64 	b.w	8012000 <z_impl_k_sem_give>
 800e338:	bd08      	pop	{r3, pc}
 800e33a:	bf00      	nop
 800e33c:	d0010002 	.word	0xd0010002
 800e340:	24001180 	.word	0x24001180
 800e344:	240011b0 	.word	0x240011b0

0800e348 <net_config_init_by_iface>:
}
#endif

int net_config_init_by_iface(struct net_if *iface, const char *app_info,
			     uint32_t flags, int32_t timeout)
{
 800e348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#define LOOP_DIVIDER 10
	int loop = timeout / LOOP_DIVIDER;
 800e34c:	260a      	movs	r6, #10
{
 800e34e:	4690      	mov	r8, r2
 800e350:	461f      	mov	r7, r3

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
 800e352:	4605      	mov	r5, r0
	int loop = timeout / LOOP_DIVIDER;
 800e354:	fb93 f6f6 	sdiv	r6, r3, r6
	if (!iface) {
 800e358:	b910      	cbnz	r0, 800e360 <net_config_init_by_iface+0x18>
		iface = net_if_get_default();
 800e35a:	f7f6 fedf 	bl	800511c <net_if_get_default>
 800e35e:	4605      	mov	r5, r0
	}

	if (timeout < 0) {
 800e360:	2f00      	cmp	r7, #0
 800e362:	db28      	blt.n	800e3b6 <net_config_init_by_iface+0x6e>
		count = -1;
	} else if (timeout == 0) {
 800e364:	d02a      	beq.n	800e3bc <net_config_init_by_iface+0x74>
		count = 0;
	} else {
		count = LOOP_DIVIDER;
 800e366:	240a      	movs	r4, #10
	return net_if_flag_is_set(iface, NET_IF_UP) &&
 800e368:	2100      	movs	r1, #0
 800e36a:	4628      	mov	r0, r5
 800e36c:	f00b fdfb 	bl	8019f66 <net_if_flag_is_set>
 800e370:	bb30      	cbnz	r0, 800e3c0 <net_config_init_by_iface+0x78>
	cb->handler = handler;
 800e372:	4842      	ldr	r0, [pc, #264]	; (800e47c <net_config_init_by_iface+0x134>)
 800e374:	4b42      	ldr	r3, [pc, #264]	; (800e480 <net_config_init_by_iface+0x138>)
 800e376:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
 800e378:	4b42      	ldr	r3, [pc, #264]	; (800e484 <net_config_init_by_iface+0x13c>)
 800e37a:	6083      	str	r3, [r0, #8]
	net_mgmt_add_event_callback(&mgmt_iface_cb);
 800e37c:	f7f8 fa9a 	bl	80068b4 <net_mgmt_add_event_callback>
	return z_impl_k_sem_init(sem, initial_count, limit);
 800e380:	2101      	movs	r1, #1
 800e382:	f04f 32ff 	mov.w	r2, #4294967295
 800e386:	4840      	ldr	r0, [pc, #256]	; (800e488 <net_config_init_by_iface+0x140>)
			return t * ((uint64_t)to_hz / from_hz);
 800e388:	f04f 090a 	mov.w	r9, #10
 800e38c:	f00d faf9 	bl	801b982 <z_impl_k_sem_init>
		while (count-- > 0) {
			if (!k_sem_count_get(&counter)) {
				break;
			}

			if (k_sem_take(&waiter, K_MSEC(loop))) {
 800e390:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
	return sem->count;
 800e394:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 800e488 <net_config_init_by_iface+0x140>
 800e398:	fb83 9309 	smull	r9, r3, r3, r9
	return z_impl_k_sem_take(sem, timeout);
 800e39c:	493b      	ldr	r1, [pc, #236]	; (800e48c <net_config_init_by_iface+0x144>)
		while (count-- > 0) {
 800e39e:	2c00      	cmp	r4, #0
 800e3a0:	f104 3aff 	add.w	sl, r4, #4294967295
 800e3a4:	dd02      	ble.n	800e3ac <net_config_init_by_iface+0x64>
			if (!k_sem_count_get(&counter)) {
 800e3a6:	f8db 2008 	ldr.w	r2, [fp, #8]
 800e3aa:	bb72      	cbnz	r2, 800e40a <net_config_init_by_iface+0xc2>
				}
			}
		}

#if defined(CONFIG_NET_NATIVE)
		net_mgmt_del_event_callback(&mgmt_iface_cb);
 800e3ac:	4833      	ldr	r0, [pc, #204]	; (800e47c <net_config_init_by_iface+0x134>)
 800e3ae:	4654      	mov	r4, sl
 800e3b0:	f7f8 faa0 	bl	80068f4 <net_mgmt_del_event_callback>
 800e3b4:	e010      	b.n	800e3d8 <net_config_init_by_iface+0x90>
		count = -1;
 800e3b6:	f04f 34ff 	mov.w	r4, #4294967295
 800e3ba:	e7d5      	b.n	800e368 <net_config_init_by_iface+0x20>
		count = 0;
 800e3bc:	463c      	mov	r4, r7
 800e3be:	e7d3      	b.n	800e368 <net_config_init_by_iface+0x20>
	       net_if_flag_is_set(iface, NET_IF_RUNNING);
 800e3c0:	2108      	movs	r1, #8
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	f00b fdcf 	bl	8019f66 <net_if_flag_is_set>
	if (net_if_is_up(iface)) {
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d0d2      	beq.n	800e372 <net_config_init_by_iface+0x2a>
	z_impl_k_sem_reset(sem);
 800e3cc:	482e      	ldr	r0, [pc, #184]	; (800e488 <net_config_init_by_iface+0x140>)
 800e3ce:	f003 fe65 	bl	801209c <z_impl_k_sem_reset>
	z_impl_k_sem_give(sem);
 800e3d2:	482e      	ldr	r0, [pc, #184]	; (800e48c <net_config_init_by_iface+0x144>)
 800e3d4:	f003 fe14 	bl	8012000 <z_impl_k_sem_give>
	cb->handler = handler;
 800e3d8:	482d      	ldr	r0, [pc, #180]	; (800e490 <net_config_init_by_iface+0x148>)
 800e3da:	4b2e      	ldr	r3, [pc, #184]	; (800e494 <net_config_init_by_iface+0x14c>)
 800e3dc:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
 800e3de:	4b2e      	ldr	r3, [pc, #184]	; (800e498 <net_config_init_by_iface+0x150>)
 800e3e0:	6083      	str	r3, [r0, #8]
	net_mgmt_add_event_callback(&mgmt4_cb);
 800e3e2:	f7f8 fa67 	bl	80068b4 <net_mgmt_add_event_callback>
	net_dhcpv4_start(iface);
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	f009 fbc9 	bl	8017b7e <net_dhcpv4_start>
	    net_if_flag_is_set(iface, NET_IF_IPV6_NO_ND)) {
 800e3ec:	210b      	movs	r1, #11
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f00b fdb9 	bl	8019f66 <net_if_flag_is_set>
	if (!IS_ENABLED(CONFIG_NET_IPV6_DAD) ||
 800e3f4:	b110      	cbz	r0, 800e3fc <net_config_init_by_iface+0xb4>
		services_notify_ready(NET_CONFIG_NEED_IPV6);
 800e3f6:	2002      	movs	r0, #2
 800e3f8:	f7ff ff74 	bl	800e2e4 <services_notify_ready>
	setup_ipv4(iface);
	setup_dhcpv4(iface);
	setup_ipv6(iface, flags);

	/* Network interface did not come up. */
	if (timeout > 0 && count < 0) {
 800e3fc:	2f00      	cmp	r7, #0
 800e3fe:	dd31      	ble.n	800e464 <net_config_init_by_iface+0x11c>
 800e400:	2c00      	cmp	r4, #0
 800e402:	da2f      	bge.n	800e464 <net_config_init_by_iface+0x11c>
		NET_ERR("Timeout while waiting network %s", "interface");
		return -ENETDOWN;
 800e404:	f06f 0072 	mvn.w	r0, #114	; 0x72
 800e408:	e029      	b.n	800e45e <net_config_init_by_iface+0x116>
	return z_impl_k_sem_take(sem, timeout);
 800e40a:	4608      	mov	r0, r1
 800e40c:	464a      	mov	r2, r9
 800e40e:	9301      	str	r3, [sp, #4]
 800e410:	f003 fe1c 	bl	801204c <z_impl_k_sem_take>
			if (k_sem_take(&waiter, K_MSEC(loop))) {
 800e414:	491d      	ldr	r1, [pc, #116]	; (800e48c <net_config_init_by_iface+0x144>)
 800e416:	9b01      	ldr	r3, [sp, #4]
 800e418:	b908      	cbnz	r0, 800e41e <net_config_init_by_iface+0xd6>
		while (count-- > 0) {
 800e41a:	4654      	mov	r4, sl
 800e41c:	e7bf      	b.n	800e39e <net_config_init_by_iface+0x56>
				if (!k_sem_count_get(&counter)) {
 800e41e:	f8db 2008 	ldr.w	r2, [fp, #8]
 800e422:	2a00      	cmp	r2, #0
 800e424:	d1f9      	bne.n	800e41a <net_config_init_by_iface+0xd2>
 800e426:	e7c1      	b.n	800e3ac <net_config_init_by_iface+0x64>
	}

	/* Loop here until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (!services_are_ready(flags) && count-- > 0) {
 800e428:	464c      	mov	r4, r9
 800e42a:	4632      	mov	r2, r6
 800e42c:	462b      	mov	r3, r5
 800e42e:	4658      	mov	r0, fp
 800e430:	f003 fe0c 	bl	801204c <z_impl_k_sem_take>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800e434:	f3bf 8f5b 	dmb	ish
 800e438:	f8da 3000 	ldr.w	r3, [sl]
 800e43c:	f3bf 8f5b 	dmb	ish
 800e440:	ea38 0303 	bics.w	r3, r8, r3
 800e444:	d004      	beq.n	800e450 <net_config_init_by_iface+0x108>
 800e446:	2c00      	cmp	r4, #0
 800e448:	f104 39ff 	add.w	r9, r4, #4294967295
 800e44c:	dcec      	bgt.n	800e428 <net_config_init_by_iface+0xe0>
 800e44e:	464c      	mov	r4, r9
		k_sem_take(&waiter, K_MSEC(loop));
	}

	if (count == -1 && timeout > 0) {
 800e450:	3401      	adds	r4, #1
 800e452:	d111      	bne.n	800e478 <net_config_init_by_iface+0x130>
		NET_ERR("Timeout while waiting network %s", "setup");
		return -ETIMEDOUT;
 800e454:	2f00      	cmp	r7, #0
 800e456:	bfd4      	ite	le
 800e458:	2000      	movle	r0, #0
 800e45a:	f06f 0073 	mvngt.w	r0, #115	; 0x73
	}

	return 0;
}
 800e45e:	b003      	add	sp, #12
 800e460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_sem_take(&waiter, K_MSEC(loop));
 800e464:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800e468:	230a      	movs	r3, #10
 800e46a:	f8df a030 	ldr.w	sl, [pc, #48]	; 800e49c <net_config_init_by_iface+0x154>
 800e46e:	fb86 6503 	smull	r6, r5, r6, r3
 800e472:	f8df b018 	ldr.w	fp, [pc, #24]	; 800e48c <net_config_init_by_iface+0x144>
 800e476:	e7dd      	b.n	800e434 <net_config_init_by_iface+0xec>
	return 0;
 800e478:	2000      	movs	r0, #0
 800e47a:	e7f0      	b.n	800e45e <net_config_init_by_iface+0x116>
 800e47c:	24002de0 	.word	0x24002de0
 800e480:	0800e321 	.word	0x0800e321
 800e484:	d0010002 	.word	0xd0010002
 800e488:	24001180 	.word	0x24001180
 800e48c:	240011b0 	.word	0x240011b0
 800e490:	24002dd4 	.word	0x24002dd4
 800e494:	0800e30d 	.word	0x0800e30d
 800e498:	e0040001 	.word	0xe0040001
 800e49c:	24002dec 	.word	0x24002dec

0800e4a0 <net_config_init_app>:
	}
}

int net_config_init_app(const struct device *dev, const char *app_info)
{
	struct net_if *iface = NULL;
 800e4a0:	2300      	movs	r3, #0
{
 800e4a2:	b513      	push	{r0, r1, r4, lr}
 800e4a4:	460c      	mov	r4, r1
	struct net_if *iface = NULL;
 800e4a6:	9301      	str	r3, [sp, #4]
	uint32_t flags = 0U;
	int ret;

	if (dev) {
 800e4a8:	b960      	cbnz	r0, 800e4c4 <net_config_init_app+0x24>
		flags |= NET_CONFIG_NEED_IPV4;
	}

	/* Only try to use a network interface that is auto started */
	if (iface == NULL) {
		net_if_foreach(iface_find_cb, &iface);
 800e4aa:	a901      	add	r1, sp, #4
 800e4ac:	4808      	ldr	r0, [pc, #32]	; (800e4d0 <net_config_init_app+0x30>)
 800e4ae:	f7f7 ff41 	bl	8006334 <net_if_foreach>
	}

	/* Initialize the application automatically if needed */
	ret = net_config_init_by_iface(iface, app_info, flags,
 800e4b2:	f247 5330 	movw	r3, #30000	; 0x7530
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	4621      	mov	r1, r4
 800e4ba:	9801      	ldr	r0, [sp, #4]
 800e4bc:	f7ff ff44 	bl	800e348 <net_config_init_by_iface>
			log_backend_activate(backend, NULL);
		}
	}

	return ret;
}
 800e4c0:	b002      	add	sp, #8
 800e4c2:	bd10      	pop	{r4, pc}
		iface = net_if_lookup_by_dev(dev);
 800e4c4:	f7f6 fe18 	bl	80050f8 <net_if_lookup_by_dev>
 800e4c8:	9001      	str	r0, [sp, #4]
	if (iface == NULL) {
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	d1f1      	bne.n	800e4b2 <net_config_init_app+0x12>
 800e4ce:	e7ec      	b.n	800e4aa <net_config_init_app+0xa>
 800e4d0:	08019f7d 	.word	0x08019f7d

0800e4d4 <init_app>:

#if defined(CONFIG_NET_CONFIG_AUTO_INIT)
static int init_app(void)
{

	(void)net_config_init_app(NULL, "Initializing network");
 800e4d4:	4903      	ldr	r1, [pc, #12]	; (800e4e4 <init_app+0x10>)
 800e4d6:	2000      	movs	r0, #0
{
 800e4d8:	b508      	push	{r3, lr}
	(void)net_config_init_app(NULL, "Initializing network");
 800e4da:	f7ff ffe1 	bl	800e4a0 <net_config_init_app>

	return 0;
}
 800e4de:	2000      	movs	r0, #0
 800e4e0:	bd08      	pop	{r3, pc}
 800e4e2:	bf00      	nop
 800e4e4:	080215f3 	.word	0x080215f3

0800e4e8 <dns_resolve_init_locked>:

/* Must be invoked with context lock held */
static int dns_resolve_init_locked(struct dns_resolve_context *ctx,
				   const char *servers[],
				   const struct sockaddr *servers_sa[])
{
 800e4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4ea:	b089      	sub	sp, #36	; 0x24
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	460d      	mov	r5, r1
 800e4f0:	4616      	mov	r6, r2
#if defined(CONFIG_NET_IPV6)
	struct sockaddr_in6 local_addr6 = {
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	2218      	movs	r2, #24
 800e4f6:	a802      	add	r0, sp, #8
 800e4f8:	f006 fbc8 	bl	8014c8c <memset>
 800e4fc:	2302      	movs	r3, #2
 800e4fe:	f8ad 3008 	strh.w	r3, [sp, #8]
		.sin6_family = AF_INET6,
		.sin6_port = 0,
	};
#endif
#if defined(CONFIG_NET_IPV4)
	struct sockaddr_in local_addr4 = {
 800e502:	2300      	movs	r3, #0
 800e504:	e9cd 3300 	strd	r3, r3, [sp]
 800e508:	2301      	movs	r3, #1
 800e50a:	f8ad 3000 	strh.w	r3, [sp]
	socklen_t addr_len = 0;
	int i = 0, idx = 0;
	struct net_if *iface;
	int ret, count;

	if (!ctx) {
 800e50e:	2c00      	cmp	r4, #0
 800e510:	d051      	beq.n	800e5b6 <dns_resolve_init_locked+0xce>
		return -ENOENT;
	}

	if (ctx->state != DNS_RESOLVE_CONTEXT_INACTIVE) {
 800e512:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800e516:	2b02      	cmp	r3, #2
 800e518:	d150      	bne.n	800e5bc <dns_resolve_init_locked+0xd4>
		ret = -ENOTEMPTY;
		goto fail;
	}

	if (servers) {
 800e51a:	b11d      	cbz	r5, 800e524 <dns_resolve_init_locked+0x3c>
 800e51c:	3d04      	subs	r5, #4
		for (i = 0; idx < SERVER_COUNT && servers[i]; i++) {
 800e51e:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800e522:	b93b      	cbnz	r3, 800e534 <dns_resolve_init_locked+0x4c>
							 " LLMNR" : "") : "");
			idx++;
		}
	}

	if (servers_sa) {
 800e524:	b1d6      	cbz	r6, 800e55c <dns_resolve_init_locked+0x74>
		for (i = 0; idx < SERVER_COUNT && servers_sa[i]; i++) {
 800e526:	6831      	ldr	r1, [r6, #0]
 800e528:	b1c1      	cbz	r1, 800e55c <dns_resolve_init_locked+0x74>
			memcpy(&ctx->servers[idx].dns_server, servers_sa[i],
 800e52a:	2218      	movs	r2, #24
 800e52c:	4620      	mov	r0, r4
 800e52e:	f006 fba2 	bl	8014c76 <memcpy>
 800e532:	e00f      	b.n	800e554 <dns_resolve_init_locked+0x6c>
			(void)memset(addr, 0, sizeof(*addr));
 800e534:	2218      	movs	r2, #24
 800e536:	2100      	movs	r1, #0
 800e538:	4620      	mov	r0, r4
 800e53a:	f006 fba7 	bl	8014c8c <memset>
			ret = net_ipaddr_parse(servers[i], strlen(servers[i]),
 800e53e:	682f      	ldr	r7, [r5, #0]
 800e540:	4638      	mov	r0, r7
 800e542:	f006 fb4b 	bl	8014bdc <strlen>
 800e546:	4622      	mov	r2, r4
 800e548:	4601      	mov	r1, r0
 800e54a:	4638      	mov	r0, r7
 800e54c:	f008 f879 	bl	8016642 <net_ipaddr_parse>
			if (!ret) {
 800e550:	2800      	cmp	r0, #0
 800e552:	d0e4      	beq.n	800e51e <dns_resolve_init_locked+0x36>
			       sizeof(ctx->servers[idx].dns_server));
			dns_postprocess_server(ctx, idx);
 800e554:	2100      	movs	r1, #0
 800e556:	4620      	mov	r0, r4
 800e558:	f00b feac 	bl	801a2b4 <dns_postprocess_server>
			idx++;
		}
	}

	for (i = 0, count = 0;
	     i < SERVER_COUNT && ctx->servers[i].dns_server.sa_family; i++) {
 800e55c:	8820      	ldrh	r0, [r4, #0]
 800e55e:	b380      	cbz	r0, 800e5c2 <dns_resolve_init_locked+0xda>

		if (ctx->servers[i].dns_server.sa_family == AF_INET6) {
 800e560:	2802      	cmp	r0, #2
 800e562:	d131      	bne.n	800e5c8 <dns_resolve_init_locked+0xe0>
#if defined(CONFIG_NET_IPV6)
			local_addr = (struct sockaddr *)&local_addr6;
 800e564:	ad02      	add	r5, sp, #8
			addr_len = sizeof(struct sockaddr_in6);
 800e566:	2618      	movs	r6, #24
			NET_DBG("Local address not set");
			ret = -EAFNOSUPPORT;
			goto fail;
		}

		ret = net_context_get(ctx->servers[i].dns_server.sa_family,
 800e568:	f104 0318 	add.w	r3, r4, #24
 800e56c:	2211      	movs	r2, #17
 800e56e:	2102      	movs	r1, #2
 800e570:	f7f8 fafc 	bl	8006b6c <net_context_get>
				      SOCK_DGRAM, IPPROTO_UDP,
				      &ctx->servers[i].net_ctx);
		if (ret < 0) {
 800e574:	2800      	cmp	r0, #0
 800e576:	db19      	blt.n	800e5ac <dns_resolve_init_locked+0xc4>
			NET_DBG("Cannot get net_context (%d)", ret);
			goto fail;
		}

		ret = net_context_bind(ctx->servers[i].net_ctx,
 800e578:	4632      	mov	r2, r6
 800e57a:	4629      	mov	r1, r5
 800e57c:	69a0      	ldr	r0, [r4, #24]
 800e57e:	f008 f984 	bl	801688a <net_context_bind>
				       local_addr, addr_len);
		if (ret < 0) {
 800e582:	2800      	cmp	r0, #0
 800e584:	db12      	blt.n	800e5ac <dns_resolve_init_locked+0xc4>
	return net_if_get_by_index(context->iface);
 800e586:	69a3      	ldr	r3, [r4, #24]
 800e588:	f993 0076 	ldrsb.w	r0, [r3, #118]	; 0x76
 800e58c:	f7f6 fda2 	bl	80050d4 <z_impl_net_if_get_by_index>
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
 800e590:	2300      	movs	r3, #0
 800e592:	4601      	mov	r1, r0
 800e594:	480f      	ldr	r0, [pc, #60]	; (800e5d4 <dns_resolve_init_locked+0xec>)
 800e596:	461a      	mov	r2, r3
 800e598:	f7f8 f9e6 	bl	8006968 <net_mgmt_event_notify_with_info>
		NET_DBG("No DNS servers defined.");
		ret = -EINVAL;
		goto fail;
	}

	ctx->state = DNS_RESOLVE_CONTEXT_ACTIVE;
 800e59c:	2000      	movs	r0, #0
	ctx->buf_timeout = DNS_BUF_TIMEOUT;
 800e59e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5a2:	2300      	movs	r3, #0
	ctx->state = DNS_RESOLVE_CONTEXT_ACTIVE;
 800e5a4:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
	ctx->buf_timeout = DNS_BUF_TIMEOUT;
 800e5a8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	ret = 0;

fail:
	return ret;
}
 800e5ac:	b009      	add	sp, #36	; 0x24
 800e5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			local_addr = (struct sockaddr *)&local_addr4;
 800e5b0:	466d      	mov	r5, sp
			addr_len = sizeof(struct sockaddr_in);
 800e5b2:	2608      	movs	r6, #8
 800e5b4:	e7d8      	b.n	800e568 <dns_resolve_init_locked+0x80>
		return -ENOENT;
 800e5b6:	f06f 0001 	mvn.w	r0, #1
 800e5ba:	e7f7      	b.n	800e5ac <dns_resolve_init_locked+0xc4>
		ret = -ENOTEMPTY;
 800e5bc:	f06f 0059 	mvn.w	r0, #89	; 0x59
 800e5c0:	e7f4      	b.n	800e5ac <dns_resolve_init_locked+0xc4>
		ret = -EINVAL;
 800e5c2:	f06f 0015 	mvn.w	r0, #21
 800e5c6:	e7f1      	b.n	800e5ac <dns_resolve_init_locked+0xc4>
		if (ctx->servers[i].dns_server.sa_family == AF_INET) {
 800e5c8:	2801      	cmp	r0, #1
 800e5ca:	d0f1      	beq.n	800e5b0 <dns_resolve_init_locked+0xc8>
			ret = -EAFNOSUPPORT;
 800e5cc:	f06f 0069 	mvn.w	r0, #105	; 0x69
 800e5d0:	e7ec      	b.n	800e5ac <dns_resolve_init_locked+0xc4>
 800e5d2:	bf00      	nop
 800e5d4:	f1140003 	.word	0xf1140003

0800e5d8 <dns_resolve_close_locked>:
	return ret;
}

/* Must be invoked with context lock held */
static int dns_resolve_close_locked(struct dns_resolve_context *ctx)
{
 800e5d8:	b570      	push	{r4, r5, r6, lr}
	int i;

	if (ctx->state != DNS_RESOLVE_CONTEXT_ACTIVE) {
 800e5da:	f890 5098 	ldrb.w	r5, [r0, #152]	; 0x98
{
 800e5de:	4604      	mov	r4, r0
	if (ctx->state != DNS_RESOLVE_CONTEXT_ACTIVE) {
 800e5e0:	bb1d      	cbnz	r5, 800e62a <dns_resolve_close_locked+0x52>
		return -ENOENT;
	}

	ctx->state = DNS_RESOLVE_CONTEXT_DEACTIVATING;
 800e5e2:	2301      	movs	r3, #1
	 *
	 * Released mutex will prevent lower networking layers from deadlock
	 * when calling cb_recv() (which acquires ctx->lock) just before closing
	 * network context.
	 */
	k_mutex_unlock(&ctx->lock);
 800e5e4:	f100 0620 	add.w	r6, r0, #32
	ctx->state = DNS_RESOLVE_CONTEXT_DEACTIVATING;
 800e5e8:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
	k_mutex_unlock(&ctx->lock);
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f00b fea9 	bl	801a344 <k_mutex_unlock.isra.0>

	for (i = 0; i < SERVER_COUNT; i++) {
		if (ctx->servers[i].net_ctx) {
 800e5f2:	69a3      	ldr	r3, [r4, #24]
 800e5f4:	b16b      	cbz	r3, 800e612 <dns_resolve_close_locked+0x3a>
 800e5f6:	f993 0076 	ldrsb.w	r0, [r3, #118]	; 0x76
 800e5fa:	f7f6 fd6b 	bl	80050d4 <z_impl_net_if_get_by_index>
 800e5fe:	462b      	mov	r3, r5
 800e600:	4601      	mov	r1, r0
 800e602:	462a      	mov	r2, r5
 800e604:	480a      	ldr	r0, [pc, #40]	; (800e630 <dns_resolve_close_locked+0x58>)
 800e606:	f7f8 f9af 	bl	8006968 <net_mgmt_event_notify_with_info>
			} else {
				net_mgmt_event_notify(NET_EVENT_DNS_SERVER_DEL,
						      iface);
			}

			net_context_put(ctx->servers[i].net_ctx);
 800e60a:	69a0      	ldr	r0, [r4, #24]
 800e60c:	f7f8 fb6a 	bl	8006ce4 <net_context_put>
			ctx->servers[i].net_ctx = NULL;
 800e610:	61a5      	str	r5, [r4, #24]
		}
	}

	k_mutex_lock(&ctx->lock, K_FOREVER);
 800e612:	f04f 33ff 	mov.w	r3, #4294967295
 800e616:	f04f 32ff 	mov.w	r2, #4294967295
 800e61a:	4630      	mov	r0, r6
 800e61c:	f00b fe20 	bl	801a260 <k_mutex_lock>

	ctx->state = DNS_RESOLVE_CONTEXT_INACTIVE;
 800e620:	2302      	movs	r3, #2

	return 0;
 800e622:	2000      	movs	r0, #0
	ctx->state = DNS_RESOLVE_CONTEXT_INACTIVE;
 800e624:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
}
 800e628:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
 800e62a:	f06f 0001 	mvn.w	r0, #1
 800e62e:	e7fb      	b.n	800e628 <dns_resolve_close_locked+0x50>
 800e630:	f1140004 	.word	0xf1140004

0800e634 <dns_write.constprop.0>:
static int dns_write(struct dns_resolve_context *ctx,
 800e634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	query_type = ctx->queries[query_idx].query_type;
 800e638:	f04f 0858 	mov.w	r8, #88	; 0x58
static int dns_write(struct dns_resolve_context *ctx,
 800e63c:	b087      	sub	sp, #28
 800e63e:	4699      	mov	r9, r3
	net_ctx = ctx->servers[server_idx].net_ctx;
 800e640:	6987      	ldr	r7, [r0, #24]
	query_type = ctx->queries[query_idx].query_type;
 800e642:	fb08 0801 	mla	r8, r8, r1, r0
static int dns_write(struct dns_resolve_context *ctx,
 800e646:	4616      	mov	r6, r2
 800e648:	4604      	mov	r4, r0
 800e64a:	460d      	mov	r5, r1
	ret = dns_msg_pack_query(dns_data->data, &dns_data->len, dns_data->size,
 800e64c:	f898 308c 	ldrb.w	r3, [r8, #140]	; 0x8c
 800e650:	f106 0110 	add.w	r1, r6, #16
 800e654:	68f0      	ldr	r0, [r6, #12]
 800e656:	9302      	str	r3, [sp, #8]
 800e658:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
 800e65c:	9301      	str	r3, [sp, #4]
 800e65e:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800e668:	8a52      	ldrh	r2, [r2, #18]
 800e66a:	f00b fd36 	bl	801a0da <dns_msg_pack_query>
	if (ret < 0) {
 800e66e:	2800      	cmp	r0, #0
 800e670:	db4b      	blt.n	800e70a <dns_write.constprop.0+0xd6>
			   dns_qname->len + 2);
 800e672:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 *
 * @return The computed CRC16 value
 */
static inline uint16_t crc16_ansi(const uint8_t *src, size_t len)
{
	return crc16_reflect(0xA001, 0xffff, src, len);
 800e676:	f64f 71ff 	movw	r1, #65535	; 0xffff
		crc16_ansi(dns_data->data + DNS_MSG_HEADER_SIZE,
 800e67a:	68f2      	ldr	r2, [r6, #12]
 800e67c:	f24a 0001 	movw	r0, #40961	; 0xa001
 800e680:	3302      	adds	r3, #2
 800e682:	320c      	adds	r2, #12
 800e684:	f004 ffd3 	bl	801362e <crc16_reflect>
	ctx->queries[query_idx].query_hash =
 800e688:	f8a8 0090 	strh.w	r0, [r8, #144]	; 0x90
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 800e68c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800e690:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800e694:	2b02      	cmp	r3, #2
 800e696:	d103      	bne.n	800e6a0 <dns_write.constprop.0+0x6c>
}

static inline void net_context_set_ipv4_ttl(struct net_context *context,
					    uint8_t ttl)
{
	context->ipv4_ttl = ttl;
 800e698:	2300      	movs	r3, #0
 800e69a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
}
 800e69e:	e001      	b.n	800e6a4 <dns_write.constprop.0+0x70>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 800e6a0:	2b01      	cmp	r3, #1
 800e6a2:	d0f9      	beq.n	800e698 <dns_write.constprop.0+0x64>
	ret = net_context_recv(net_ctx, cb_recv, K_NO_WAIT, ctx);
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	4919      	ldr	r1, [pc, #100]	; (800e710 <dns_write.constprop.0+0xdc>)
 800e6aa:	4638      	mov	r0, r7
 800e6ac:	9400      	str	r4, [sp, #0]
 800e6ae:	f7f8 fb41 	bl	8006d34 <net_context_recv>
	if (ret < 0 && ret != -EALREADY) {
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	da02      	bge.n	800e6bc <dns_write.constprop.0+0x88>
 800e6b6:	f110 0f78 	cmn.w	r0, #120	; 0x78
 800e6ba:	d123      	bne.n	800e704 <dns_write.constprop.0+0xd0>
	ret = k_work_reschedule(&ctx->queries[query_idx].timer,
 800e6bc:	2058      	movs	r0, #88	; 0x58
	if (server->sa_family == AF_INET) {
 800e6be:	8823      	ldrh	r3, [r4, #0]
	ret = k_work_reschedule(&ctx->queries[query_idx].timer,
 800e6c0:	4345      	muls	r5, r0
		server_addr_len = sizeof(struct sockaddr_in6);
 800e6c2:	2b01      	cmp	r3, #1
	ret = k_work_reschedule(&ctx->queries[query_idx].timer,
 800e6c4:	eb04 0305 	add.w	r3, r4, r5
 800e6c8:	f105 0540 	add.w	r5, r5, #64	; 0x40
		server_addr_len = sizeof(struct sockaddr_in6);
 800e6cc:	bf0c      	ite	eq
 800e6ce:	f04f 0808 	moveq.w	r8, #8
 800e6d2:	f04f 0818 	movne.w	r8, #24
	ret = k_work_reschedule(&ctx->queries[query_idx].timer,
 800e6d6:	1960      	adds	r0, r4, r5
 800e6d8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800e6dc:	f003 fe9e 	bl	801241c <k_work_reschedule>
	if (ret < 0) {
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	db0f      	blt.n	800e704 <dns_write.constprop.0+0xd0>
	ret = net_context_sendto(net_ctx, dns_data->data, dns_data->len,
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	2000      	movs	r0, #0
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	8a32      	ldrh	r2, [r6, #16]
 800e6ec:	9304      	str	r3, [sp, #16]
 800e6ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6f2:	e9cd 8300 	strd	r8, r3, [sp]
 800e6f6:	68f1      	ldr	r1, [r6, #12]
 800e6f8:	4623      	mov	r3, r4
 800e6fa:	4638      	mov	r0, r7
 800e6fc:	f008 fc9d 	bl	801703a <net_context_sendto>
	if (ret < 0) {
 800e700:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
 800e704:	b007      	add	sp, #28
 800e706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
 800e70a:	f06f 0015 	mvn.w	r0, #21
 800e70e:	e7f9      	b.n	800e704 <dns_write.constprop.0+0xd0>
 800e710:	0800e7b1 	.word	0x0800e7b1

0800e714 <dns_resolve_cancel_with_name>:
{
 800e714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e718:	4607      	mov	r7, r0
 800e71a:	4688      	mov	r8, r1
 800e71c:	4699      	mov	r9, r3
	if (query_name) {
 800e71e:	4614      	mov	r4, r2
 800e720:	2a00      	cmp	r2, #0
 800e722:	d03a      	beq.n	800e79a <dns_resolve_cancel_with_name+0x86>
	return net_buf_alloc_fixed(pool, timeout);
 800e724:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
 800e728:	4820      	ldr	r0, [pc, #128]	; (800e7ac <dns_resolve_cancel_with_name+0x98>)
 800e72a:	f006 fc13 	bl	8014f54 <net_buf_alloc_fixed>
		if (!buf) {
 800e72e:	4605      	mov	r5, r0
 800e730:	b188      	cbz	r0, 800e756 <dns_resolve_cancel_with_name+0x42>
		ret = dns_msg_pack_qname(&len, buf->data, buf->size,
 800e732:	8a42      	ldrh	r2, [r0, #18]
 800e734:	4623      	mov	r3, r4
 800e736:	68c1      	ldr	r1, [r0, #12]
 800e738:	f10d 0006 	add.w	r0, sp, #6
 800e73c:	f00b fc29 	bl	8019f92 <dns_msg_pack_qname>
		if (ret >= 0) {
 800e740:	1e06      	subs	r6, r0, #0
 800e742:	db28      	blt.n	800e796 <dns_resolve_cancel_with_name+0x82>
			if ((len + 2) > buf->size) {
 800e744:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800e748:	8a6b      	ldrh	r3, [r5, #18]
 800e74a:	1c4a      	adds	r2, r1, #1
 800e74c:	429a      	cmp	r2, r3
 800e74e:	db05      	blt.n	800e75c <dns_resolve_cancel_with_name+0x48>
				net_buf_unref(buf);
 800e750:	4628      	mov	r0, r5
 800e752:	f7f5 fdd1 	bl	80042f8 <net_buf_unref>
			return -ENOMEM;
 800e756:	f06f 060b 	mvn.w	r6, #11
 800e75a:	e018      	b.n	800e78e <dns_resolve_cancel_with_name+0x7a>
	return net_buf_simple_add(&buf->b, len);
 800e75c:	f105 040c 	add.w	r4, r5, #12
 800e760:	4620      	mov	r0, r4
 800e762:	f006 fc48 	bl	8014ff6 <net_buf_simple_add>
	net_buf_simple_add_be16(&buf->b, val);
 800e766:	4620      	mov	r0, r4
 800e768:	4649      	mov	r1, r9
 800e76a:	f006 fc4a 	bl	8015002 <net_buf_simple_add_be16>
			query_hash = crc16_ansi(buf->data, len + 2);
 800e76e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e772:	68ea      	ldr	r2, [r5, #12]
 800e774:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e778:	3302      	adds	r3, #2
 800e77a:	f24a 0001 	movw	r0, #40961	; 0xa001
 800e77e:	f004 ff56 	bl	801362e <crc16_reflect>
 800e782:	4604      	mov	r4, r0
		net_buf_unref(buf);
 800e784:	4628      	mov	r0, r5
 800e786:	f7f5 fdb7 	bl	80042f8 <net_buf_unref>
		if (ret < 0) {
 800e78a:	2e00      	cmp	r6, #0
 800e78c:	da05      	bge.n	800e79a <dns_resolve_cancel_with_name+0x86>
}
 800e78e:	4630      	mov	r0, r6
 800e790:	b003      	add	sp, #12
 800e792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint16_t query_hash = 0;
 800e796:	2400      	movs	r4, #0
 800e798:	e7f4      	b.n	800e784 <dns_resolve_cancel_with_name+0x70>
	return dns_resolve_cancel_with_hash(ctx, dns_id, query_hash,
 800e79a:	4622      	mov	r2, r4
 800e79c:	4641      	mov	r1, r8
 800e79e:	4638      	mov	r0, r7
}
 800e7a0:	b003      	add	sp, #12
 800e7a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return dns_resolve_cancel_with_hash(ctx, dns_id, query_hash,
 800e7a6:	f00b bdcf 	b.w	801a348 <dns_resolve_cancel_with_hash.constprop.0>
 800e7aa:	bf00      	nop
 800e7ac:	240011c8 	.word	0x240011c8

0800e7b0 <cb_recv>:
{
 800e7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b4:	b09b      	sub	sp, #108	; 0x6c
	k_mutex_lock(&ctx->lock, K_FOREVER);
 800e7b6:	f04f 32ff 	mov.w	r2, #4294967295
{
 800e7ba:	468b      	mov	fp, r1
 800e7bc:	e9dd 4824 	ldrd	r4, r8, [sp, #144]	; 0x90
	k_mutex_lock(&ctx->lock, K_FOREVER);
 800e7c0:	f108 0320 	add.w	r3, r8, #32
 800e7c4:	9304      	str	r3, [sp, #16]
 800e7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ca:	9804      	ldr	r0, [sp, #16]
 800e7cc:	f00b fd48 	bl	801a260 <k_mutex_lock>
	if (ctx->state != DNS_RESOLVE_CONTEXT_ACTIVE) {
 800e7d0:	f898 5098 	ldrb.w	r5, [r8, #152]	; 0x98
 800e7d4:	2d00      	cmp	r5, #0
 800e7d6:	f040 8176 	bne.w	800eac6 <cb_recv+0x316>
	if (status) {
 800e7da:	2c00      	cmp	r4, #0
 800e7dc:	f040 812c 	bne.w	800ea38 <cb_recv+0x288>
	return net_buf_alloc_fixed(pool, timeout);
 800e7e0:	48c1      	ldr	r0, [pc, #772]	; (800eae8 <cb_recv+0x338>)
 800e7e2:	e9d8 230e 	ldrd	r2, r3, [r8, #56]	; 0x38
 800e7e6:	f006 fbb5 	bl	8014f54 <net_buf_alloc_fixed>
	if (!dns_data) {
 800e7ea:	4682      	mov	sl, r0
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	f000 8129 	beq.w	800ea44 <cb_recv+0x294>
 800e7f2:	48be      	ldr	r0, [pc, #760]	; (800eaec <cb_recv+0x33c>)
 800e7f4:	e9d8 230e 	ldrd	r2, r3, [r8, #56]	; 0x38
 800e7f8:	f006 fbac 	bl	8014f54 <net_buf_alloc_fixed>
	if (!dns_cname) {
 800e7fc:	4681      	mov	r9, r0
 800e7fe:	2800      	cmp	r0, #0
 800e800:	f000 8126 	beq.w	800ea50 <cb_recv+0x2a0>
	data_len = MIN(net_pkt_remaining_data(pkt), DNS_RESOLVER_MAX_BUF_SIZE);
 800e804:	4658      	mov	r0, fp
 800e806:	f008 ff83 	bl	8017710 <net_pkt_remaining_data>
 800e80a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800e80e:	f080 8085 	bcs.w	800e91c <cb_recv+0x16c>
 800e812:	4658      	mov	r0, fp
 800e814:	f008 ff7c 	bl	8017710 <net_pkt_remaining_data>
 800e818:	4605      	mov	r5, r0
	ret = net_pkt_read(pkt, dns_data->data, data_len);
 800e81a:	462a      	mov	r2, r5
 800e81c:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e820:	4658      	mov	r0, fp
 800e822:	f008 ff0b 	bl	801763c <net_pkt_read>
	if (ret < 0) {
 800e826:	2800      	cmp	r0, #0
 800e828:	f2c0 80f1 	blt.w	800ea0e <cb_recv+0x25e>
	struct dns_addrinfo info = { 0 };
 800e82c:	2234      	movs	r2, #52	; 0x34
	dns_msg.msg = dns_data->data;
 800e82e:	f8da 600c 	ldr.w	r6, [sl, #12]
	dns_msg.msg_size = data_len;
 800e832:	b2ad      	uxth	r5, r5
	struct dns_addrinfo info = { 0 };
 800e834:	2100      	movs	r1, #0
 800e836:	eb0d 0002 	add.w	r0, sp, r2
	dns_msg.msg = dns_data->data;
 800e83a:	9608      	str	r6, [sp, #32]
	dns_msg.msg_size = data_len;
 800e83c:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
	struct dns_addrinfo info = { 0 };
 800e840:	f006 fa24 	bl	8014c8c <memset>
	if (dns_msg->msg_size < (sizeof(*dns_id) + sizeof(uint16_t))) {
 800e844:	2d03      	cmp	r5, #3
 800e846:	f240 8144 	bls.w	800ead2 <cb_recv+0x322>
	if (dns_header_rcode(dns_msg->msg) == DNS_HEADER_REFUSED) {
 800e84a:	78f3      	ldrb	r3, [r6, #3]
 800e84c:	8835      	ldrh	r5, [r6, #0]
 800e84e:	f003 030f 	and.w	r3, r3, #15
 800e852:	ba6d      	rev16	r5, r5
 800e854:	2b05      	cmp	r3, #5
 800e856:	b2ad      	uxth	r5, r5
 800e858:	f000 813e 	beq.w	800ead8 <cb_recv+0x328>
	if (dns_header_qr(dns_msg->msg) == DNS_QUERY) {
 800e85c:	78b6      	ldrb	r6, [r6, #2]
 800e85e:	09f6      	lsrs	r6, r6, #7
 800e860:	f000 80d9 	beq.w	800ea16 <cb_recv+0x266>
	ret = dns_unpack_response_header(dns_msg, *dns_id);
 800e864:	4629      	mov	r1, r5
 800e866:	a808      	add	r0, sp, #32
 800e868:	f00b fc0b 	bl	801a082 <dns_unpack_response_header>
	if (ret < 0) {
 800e86c:	2800      	cmp	r0, #0
 800e86e:	f2c0 8133 	blt.w	800ead8 <cb_recv+0x328>
	if (dns_header_qdcount(dns_msg->msg) != 1) {
 800e872:	9b08      	ldr	r3, [sp, #32]
 800e874:	889b      	ldrh	r3, [r3, #4]
 800e876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e87a:	d002      	beq.n	800e882 <cb_recv+0xd2>
		if (*dns_id > 0) {
 800e87c:	2d00      	cmp	r5, #0
 800e87e:	f040 812b 	bne.w	800ead8 <cb_recv+0x328>
	ret = dns_unpack_response_query(dns_msg);
 800e882:	a808      	add	r0, sp, #32
 800e884:	f00b fc62 	bl	801a14c <dns_unpack_response_query>
	if (ret < 0) {
 800e888:	2800      	cmp	r0, #0
 800e88a:	da06      	bge.n	800e89a <cb_recv+0xea>
		if (*dns_id > 0) {
 800e88c:	2d00      	cmp	r5, #0
 800e88e:	f040 8123 	bne.w	800ead8 <cb_recv+0x328>
		dns_msg->answer_offset = dns_msg->query_offset;
 800e892:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800e896:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	enum dns_rr_type answer_type = DNS_RR_TYPE_INVALID;
 800e89a:	2300      	movs	r3, #0
	int query_idx = -1;
 800e89c:	f04f 37ff 	mov.w	r7, #4294967295
	uint16_t query_hash = 0U;
 800e8a0:	461e      	mov	r6, r3
	enum dns_rr_type answer_type = DNS_RR_TYPE_INVALID;
 800e8a2:	f88d 301b 	strb.w	r3, [sp, #27]
	server_idx = 0;
 800e8a6:	9303      	str	r3, [sp, #12]
	answer_ptr = DNS_QUERY_POS;
 800e8a8:	230c      	movs	r3, #12
 800e8aa:	9305      	str	r3, [sp, #20]
	while (server_idx < dns_header_ancount(dns_msg->msg)) {
 800e8ac:	9a08      	ldr	r2, [sp, #32]
 800e8ae:	9903      	ldr	r1, [sp, #12]
}

/** It returns the ANCOUNT field in the DNS msg header	*/
static inline int dns_header_ancount(uint8_t *header)
{
	return htons(UNALIGNED_GET((uint16_t *)(header + 6)));
 800e8b0:	88d3      	ldrh	r3, [r2, #6]
 800e8b2:	ba5b      	rev16	r3, r3
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	4299      	cmp	r1, r3
 800e8b8:	db33      	blt.n	800e922 <cb_recv+0x172>
	if (*query_idx < 0) {
 800e8ba:	1c79      	adds	r1, r7, #1
 800e8bc:	d115      	bne.n	800e8ea <cb_recv+0x13a>
		query_name = dns_msg->msg + dns_msg->query_offset;
 800e8be:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 800e8c2:	4416      	add	r6, r2
					 strlen(query_name) + 1 + 2);
 800e8c4:	4630      	mov	r0, r6
 800e8c6:	f006 f989 	bl	8014bdc <strlen>
 800e8ca:	4632      	mov	r2, r6
 800e8cc:	1cc3      	adds	r3, r0, #3
 800e8ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e8d2:	f24a 0001 	movw	r0, #40961	; 0xa001
 800e8d6:	f004 feaa 	bl	801362e <crc16_reflect>
		*query_idx = get_slot_by_id(ctx, *dns_id, *query_hash);
 800e8da:	4629      	mov	r1, r5
 800e8dc:	4602      	mov	r2, r0
 800e8de:	4606      	mov	r6, r0
 800e8e0:	4640      	mov	r0, r8
 800e8e2:	f00b fca9 	bl	801a238 <get_slot_by_id>
		if (*query_idx < 0) {
 800e8e6:	1e07      	subs	r7, r0, #0
 800e8e8:	db15      	blt.n	800e916 <cb_recv+0x166>
	if (items == 0) {
 800e8ea:	2c00      	cmp	r4, #0
 800e8ec:	f040 8100 	bne.w	800eaf0 <cb_recv+0x340>
		if (dns_msg->response_type == DNS_RESPONSE_CNAME_NO_IP) {
 800e8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8f2:	3313      	adds	r3, #19
 800e8f4:	f040 80ff 	bne.w	800eaf6 <cb_recv+0x346>
				ret = dns_copy_qname(dns_cname->data,
 800e8f8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800e8fc:	f109 0110 	add.w	r1, r9, #16
 800e900:	f8b9 2012 	ldrh.w	r2, [r9, #18]
 800e904:	9300      	str	r3, [sp, #0]
 800e906:	ab08      	add	r3, sp, #32
 800e908:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800e90c:	f00b fc4c 	bl	801a1a8 <dns_copy_qname>
				if (ret < 0) {
 800e910:	2800      	cmp	r0, #0
 800e912:	f280 80a0 	bge.w	800ea56 <cb_recv+0x2a6>
					ret = DNS_EAI_SYSTEM;
 800e916:	f06f 040a 	mvn.w	r4, #10
	if (ret < 0 || query_idx < 0 ||
 800e91a:	e07c      	b.n	800ea16 <cb_recv+0x266>
	data_len = MIN(net_pkt_remaining_data(pkt), DNS_RESOLVER_MAX_BUF_SIZE);
 800e91c:	f44f 7500 	mov.w	r5, #512	; 0x200
 800e920:	e77b      	b.n	800e81a <cb_recv+0x6a>
		ret = dns_unpack_answer(dns_msg, answer_ptr, &ttl,
 800e922:	f10d 031b 	add.w	r3, sp, #27
 800e926:	aa07      	add	r2, sp, #28
 800e928:	9905      	ldr	r1, [sp, #20]
 800e92a:	a808      	add	r0, sp, #32
 800e92c:	f00b fb68 	bl	801a000 <dns_unpack_answer>
		if (ret < 0) {
 800e930:	2800      	cmp	r0, #0
 800e932:	db05      	blt.n	800e940 <cb_recv+0x190>
		switch (dns_msg->response_type) {
 800e934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e936:	f113 0f15 	cmn.w	r3, #21
 800e93a:	d004      	beq.n	800e946 <cb_recv+0x196>
 800e93c:	3313      	adds	r3, #19
 800e93e:	d062      	beq.n	800ea06 <cb_recv+0x256>
		ret = DNS_EAI_FAIL;
 800e940:	f06f 0403 	mvn.w	r4, #3
 800e944:	e067      	b.n	800ea16 <cb_recv+0x266>
			if (*query_idx >= 0) {
 800e946:	1c78      	adds	r0, r7, #1
 800e948:	d116      	bne.n	800e978 <cb_recv+0x1c8>
			query_name = dns_msg->msg + dns_msg->query_offset;
 800e94a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800e94e:	9e08      	ldr	r6, [sp, #32]
 800e950:	4416      	add	r6, r2
						 strlen(query_name) + 1 + 2);
 800e952:	4630      	mov	r0, r6
 800e954:	f006 f942 	bl	8014bdc <strlen>
 800e958:	4632      	mov	r2, r6
 800e95a:	1cc3      	adds	r3, r0, #3
 800e95c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e960:	f24a 0001 	movw	r0, #40961	; 0xa001
 800e964:	f004 fe63 	bl	801362e <crc16_reflect>
			*query_idx = get_slot_by_id(ctx, *dns_id, *query_hash);
 800e968:	4629      	mov	r1, r5
 800e96a:	4602      	mov	r2, r0
 800e96c:	4606      	mov	r6, r0
 800e96e:	4640      	mov	r0, r8
 800e970:	f00b fc62 	bl	801a238 <get_slot_by_id>
			if (*query_idx < 0) {
 800e974:	1e07      	subs	r7, r0, #0
 800e976:	dbce      	blt.n	800e916 <cb_recv+0x166>
			if (ctx->queries[*query_idx].query_type ==
 800e978:	2358      	movs	r3, #88	; 0x58
 800e97a:	fb03 8307 	mla	r3, r3, r7, r8
 800e97e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e982:	2b01      	cmp	r3, #1
 800e984:	d130      	bne.n	800e9e8 <cb_recv+0x238>
				if (answer_type != DNS_RR_TYPE_A) {
 800e986:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	f040 80a9 	bne.w	800eae2 <cb_recv+0x332>
				info.ai_family = AF_INET;
 800e990:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
				address_size = DNS_IPV4_LEN;
 800e994:	2204      	movs	r2, #4
				info.ai_addr.sa_family = AF_INET;
 800e996:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
				info.ai_addrlen = sizeof(struct sockaddr_in);
 800e99a:	2308      	movs	r3, #8
 800e99c:	9313      	str	r3, [sp, #76]	; 0x4c
			if (dns_msg->response_length < address_size) {
 800e99e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	dbcc      	blt.n	800e940 <cb_recv+0x190>
			if ((dns_msg->response_position + address_size) >
 800e9a6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
			    dns_msg->msg_size) {
 800e9aa:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
			if ((dns_msg->response_position + address_size) >
 800e9ae:	1898      	adds	r0, r3, r2
 800e9b0:	4288      	cmp	r0, r1
 800e9b2:	dcc5      	bgt.n	800e940 <cb_recv+0x190>
			memcpy(addr, src, address_size);
 800e9b4:	9908      	ldr	r1, [sp, #32]
 800e9b6:	a80e      	add	r0, sp, #56	; 0x38
			items++;
 800e9b8:	3401      	adds	r4, #1
			memcpy(addr, src, address_size);
 800e9ba:	4419      	add	r1, r3
 800e9bc:	f006 f95b 	bl	8014c76 <memcpy>
			invoke_query_callback(DNS_EAI_INPROGRESS, &info,
 800e9c0:	2258      	movs	r2, #88	; 0x58
 800e9c2:	a90d      	add	r1, sp, #52	; 0x34
 800e9c4:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800e9c8:	fb02 8207 	mla	r2, r2, r7, r8
 800e9cc:	3240      	adds	r2, #64	; 0x40
 800e9ce:	f00b fc2b 	bl	801a228 <invoke_query_callback>
		dns_msg->answer_offset += dns_msg->response_length;
 800e9d2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800e9d6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800e9da:	4413      	add	r3, r2
 800e9dc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
		server_idx++;
 800e9e0:	9b03      	ldr	r3, [sp, #12]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	9303      	str	r3, [sp, #12]
 800e9e6:	e761      	b.n	800e8ac <cb_recv+0xfc>
			} else if (ctx->queries[*query_idx].query_type ==
 800e9e8:	2b1c      	cmp	r3, #28
 800e9ea:	d177      	bne.n	800eadc <cb_recv+0x32c>
				if (answer_type != DNS_RR_TYPE_AAAA) {
 800e9ec:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e9f0:	2b1c      	cmp	r3, #28
 800e9f2:	d176      	bne.n	800eae2 <cb_recv+0x332>
				info.ai_family = AF_INET6;
 800e9f4:	2302      	movs	r3, #2
				address_size = DNS_IPV6_LEN;
 800e9f6:	2210      	movs	r2, #16
				info.ai_family = AF_INET6;
 800e9f8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
				info.ai_addr.sa_family = AF_INET6;
 800e9fc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
				info.ai_addrlen = sizeof(struct sockaddr_in6);
 800ea00:	2318      	movs	r3, #24
 800ea02:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea04:	e7cb      	b.n	800e99e <cb_recv+0x1ee>
			answer_ptr = dns_msg->response_position;
 800ea06:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800ea0a:	9305      	str	r3, [sp, #20]
			break;
 800ea0c:	e7e1      	b.n	800e9d2 <cb_recv+0x222>
	uint16_t dns_id = 0U;
 800ea0e:	2500      	movs	r5, #0
		ret = DNS_EAI_MEMORY;
 800ea10:	f06f 0409 	mvn.w	r4, #9
	uint16_t query_hash = 0U;
 800ea14:	462e      	mov	r6, r5
	net_pkt_unref(pkt);
 800ea16:	4658      	mov	r0, fp
 800ea18:	f008 fc63 	bl	80172e2 <net_pkt_unref>
	if (!ret) {
 800ea1c:	b144      	cbz	r4, 800ea30 <cb_recv+0x280>
	if (ret == DNS_EAI_AGAIN) {
 800ea1e:	1ce3      	adds	r3, r4, #3
 800ea20:	d134      	bne.n	800ea8c <cb_recv+0x2dc>
		i = get_slot_by_id(ctx, dns_id, query_hash);
 800ea22:	4629      	mov	r1, r5
 800ea24:	4632      	mov	r2, r6
 800ea26:	4640      	mov	r0, r8
 800ea28:	f00b fc06 	bl	801a238 <get_slot_by_id>
		if (i < 0) {
 800ea2c:	1e01      	subs	r1, r0, #0
 800ea2e:	da20      	bge.n	800ea72 <cb_recv+0x2c2>
		net_buf_unref(dns_data);
 800ea30:	4650      	mov	r0, sl
 800ea32:	f7f5 fc61 	bl	80042f8 <net_buf_unref>
 800ea36:	e040      	b.n	800eaba <cb_recv+0x30a>
	uint16_t query_hash = 0U;
 800ea38:	462e      	mov	r6, r5
		ret = DNS_EAI_SYSTEM;
 800ea3a:	f06f 040a 	mvn.w	r4, #10
	struct net_buf *dns_data = NULL;
 800ea3e:	46aa      	mov	sl, r5
	struct net_buf *dns_cname = NULL;
 800ea40:	46a9      	mov	r9, r5
 800ea42:	e023      	b.n	800ea8c <cb_recv+0x2dc>
 800ea44:	4681      	mov	r9, r0
	uint16_t dns_id = 0U;
 800ea46:	4605      	mov	r5, r0
	uint16_t query_hash = 0U;
 800ea48:	4606      	mov	r6, r0
		ret = DNS_EAI_MEMORY;
 800ea4a:	f06f 0409 	mvn.w	r4, #9
 800ea4e:	e01d      	b.n	800ea8c <cb_recv+0x2dc>
	uint16_t dns_id = 0U;
 800ea50:	4605      	mov	r5, r0
	uint16_t query_hash = 0U;
 800ea52:	4606      	mov	r6, r0
 800ea54:	e7f9      	b.n	800ea4a <cb_recv+0x29a>
	dns_resolve_cancel_with_name(ctx, *dns_id,
 800ea56:	2058      	movs	r0, #88	; 0x58
 800ea58:	4629      	mov	r1, r5
	ret = dns_validate_msg(ctx, &dns_msg, dns_id, &query_idx,
 800ea5a:	f06f 0402 	mvn.w	r4, #2
	dns_resolve_cancel_with_name(ctx, *dns_id,
 800ea5e:	fb00 8707 	mla	r7, r0, r7, r8
 800ea62:	4640      	mov	r0, r8
 800ea64:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800ea68:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ea6c:	f7ff fe52 	bl	800e714 <dns_resolve_cancel_with_name>
 800ea70:	e7d1      	b.n	800ea16 <cb_recv+0x266>
			if (!ctx->servers[j].net_ctx) {
 800ea72:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d0da      	beq.n	800ea30 <cb_recv+0x280>
			ret = dns_write(ctx, j, i, dns_data, dns_cname, 0);
 800ea7a:	464b      	mov	r3, r9
 800ea7c:	4652      	mov	r2, sl
 800ea7e:	4640      	mov	r0, r8
 800ea80:	f7ff fdd8 	bl	800e634 <dns_write.constprop.0>
			if (ret < 0) {
 800ea84:	2800      	cmp	r0, #0
 800ea86:	dad3      	bge.n	800ea30 <cb_recv+0x280>
				ret = DNS_EAI_SYSTEM;
 800ea88:	f06f 040a 	mvn.w	r4, #10
	i = get_slot_by_id(ctx, dns_id, query_hash);
 800ea8c:	4632      	mov	r2, r6
 800ea8e:	4629      	mov	r1, r5
 800ea90:	4640      	mov	r0, r8
 800ea92:	f00b fbd1 	bl	801a238 <get_slot_by_id>
	if (i < 0) {
 800ea96:	2800      	cmp	r0, #0
 800ea98:	db0c      	blt.n	800eab4 <cb_recv+0x304>
	invoke_query_callback(ret, NULL, &ctx->queries[i]);
 800ea9a:	2258      	movs	r2, #88	; 0x58
 800ea9c:	2100      	movs	r1, #0
 800ea9e:	fb02 8800 	mla	r8, r2, r0, r8
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f108 0840 	add.w	r8, r8, #64	; 0x40
 800eaa8:	4642      	mov	r2, r8
 800eaaa:	f00b fbbd 	bl	801a228 <invoke_query_callback>
	release_query(&ctx->queries[i]);
 800eaae:	4640      	mov	r0, r8
 800eab0:	f00b fbd8 	bl	801a264 <release_query>
	if (dns_data) {
 800eab4:	f1ba 0f00 	cmp.w	sl, #0
 800eab8:	d1ba      	bne.n	800ea30 <cb_recv+0x280>
	if (dns_cname) {
 800eaba:	f1b9 0f00 	cmp.w	r9, #0
 800eabe:	d002      	beq.n	800eac6 <cb_recv+0x316>
		net_buf_unref(dns_cname);
 800eac0:	4648      	mov	r0, r9
 800eac2:	f7f5 fc19 	bl	80042f8 <net_buf_unref>
	k_mutex_unlock(&ctx->lock);
 800eac6:	9804      	ldr	r0, [sp, #16]
}
 800eac8:	b01b      	add	sp, #108	; 0x6c
 800eaca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_mutex_unlock(&ctx->lock);
 800eace:	f00b bc39 	b.w	801a344 <k_mutex_unlock.isra.0>
	uint16_t dns_id = 0U;
 800ead2:	2500      	movs	r5, #0
	uint16_t query_hash = 0U;
 800ead4:	462e      	mov	r6, r5
 800ead6:	e733      	b.n	800e940 <cb_recv+0x190>
 800ead8:	2600      	movs	r6, #0
 800eada:	e731      	b.n	800e940 <cb_recv+0x190>
				ret = DNS_EAI_FAMILY;
 800eadc:	f06f 0405 	mvn.w	r4, #5
 800eae0:	e799      	b.n	800ea16 <cb_recv+0x266>
					ret = DNS_EAI_ADDRFAMILY;
 800eae2:	f06f 0408 	mvn.w	r4, #8
 800eae6:	e796      	b.n	800ea16 <cb_recv+0x266>
 800eae8:	240011c8 	.word	0x240011c8
 800eaec:	240011f4 	.word	0x240011f4
		ret = DNS_EAI_ALLDONE;
 800eaf0:	f06f 0466 	mvn.w	r4, #102	; 0x66
 800eaf4:	e78f      	b.n	800ea16 <cb_recv+0x266>
		ret = DNS_EAI_NODATA;
 800eaf6:	f06f 0404 	mvn.w	r4, #4
 800eafa:	e78c      	b.n	800ea16 <cb_recv+0x266>

0800eafc <dns_resolve_name>:
{
 800eafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb00:	b095      	sub	sp, #84	; 0x54
 800eb02:	4688      	mov	r8, r1
 800eb04:	4616      	mov	r6, r2
 800eb06:	461f      	mov	r7, r3
 800eb08:	9d20      	ldr	r5, [sp, #128]	; 0x80
	if (!ctx || !query || !cb) {
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	b168      	cbz	r0, 800eb2a <dns_resolve_name+0x2e>
 800eb0e:	b161      	cbz	r1, 800eb2a <dns_resolve_name+0x2e>
 800eb10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eb12:	b153      	cbz	r3, 800eb2a <dns_resolve_name+0x2e>
	tout = SYS_TIMEOUT_MS(timeout);
 800eb14:	1c6b      	adds	r3, r5, #1
 800eb16:	d00b      	beq.n	800eb30 <dns_resolve_name+0x34>
 800eb18:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800eb1c:	230a      	movs	r3, #10
 800eb1e:	fb85 5303 	smull	r5, r3, r5, r3
 800eb22:	469a      	mov	sl, r3
	if (K_TIMEOUT_EQ(tout, K_NO_WAIT)) {
 800eb24:	ea55 030a 	orrs.w	r3, r5, sl
 800eb28:	d103      	bne.n	800eb32 <dns_resolve_name+0x36>
		return -EINVAL;
 800eb2a:	f06f 0515 	mvn.w	r5, #21
 800eb2e:	e02d      	b.n	800eb8c <dns_resolve_name+0x90>
	tout = SYS_TIMEOUT_MS(timeout);
 800eb30:	46aa      	mov	sl, r5
	ret = net_ipaddr_parse(query, strlen(query), &addr);
 800eb32:	4640      	mov	r0, r8
 800eb34:	f006 f852 	bl	8014bdc <strlen>
 800eb38:	aa01      	add	r2, sp, #4
 800eb3a:	4601      	mov	r1, r0
 800eb3c:	4640      	mov	r0, r8
 800eb3e:	f007 fd80 	bl	8016642 <net_ipaddr_parse>
	if (ret) {
 800eb42:	2800      	cmp	r0, #0
 800eb44:	d03b      	beq.n	800ebbe <dns_resolve_name+0xc2>
		struct dns_addrinfo info = { 0 };
 800eb46:	2234      	movs	r2, #52	; 0x34
 800eb48:	2100      	movs	r1, #0
 800eb4a:	a807      	add	r0, sp, #28
 800eb4c:	f006 f89e 	bl	8014c8c <memset>
		if (type == DNS_QUERY_TYPE_A) {
 800eb50:	2e01      	cmp	r6, #1
 800eb52:	d11f      	bne.n	800eb94 <dns_resolve_name+0x98>
			if (net_sin(&addr)->sin_family == AF_INET6) {
 800eb54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d02d      	beq.n	800ebb8 <dns_resolve_name+0xbc>
			memcpy(net_sin(&info.ai_addr), net_sin(&addr),
 800eb5c:	2208      	movs	r2, #8
 800eb5e:	a901      	add	r1, sp, #4
 800eb60:	a807      	add	r0, sp, #28
 800eb62:	f006 f888 	bl	8014c76 <memcpy>
			info.ai_addrlen = sizeof(struct sockaddr_in);
 800eb66:	2308      	movs	r3, #8
			info.ai_family = AF_INET;
 800eb68:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
			info.ai_addr.sa_family = AF_INET;
 800eb6c:	f8ad 601c 	strh.w	r6, [sp, #28]
		cb(DNS_EAI_INPROGRESS, &info, user_data);
 800eb70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800eb72:	a907      	add	r1, sp, #28
 800eb74:	f06f 0063 	mvn.w	r0, #99	; 0x63
			info.ai_addrlen = sizeof(struct sockaddr_in6);
 800eb78:	930d      	str	r3, [sp, #52]	; 0x34
		return 0;
 800eb7a:	2500      	movs	r5, #0
		cb(DNS_EAI_INPROGRESS, &info, user_data);
 800eb7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eb7e:	4798      	blx	r3
		cb(DNS_EAI_ALLDONE, NULL, user_data);
 800eb80:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800eb82:	2100      	movs	r1, #0
 800eb84:	f06f 0066 	mvn.w	r0, #102	; 0x66
 800eb88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eb8a:	4798      	blx	r3
}
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	b015      	add	sp, #84	; 0x54
 800eb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (type == DNS_QUERY_TYPE_AAAA) {
 800eb94:	2e1c      	cmp	r6, #28
 800eb96:	d112      	bne.n	800ebbe <dns_resolve_name+0xc2>
			if (net_sin(&addr)->sin_family == AF_INET) {
 800eb98:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d00b      	beq.n	800ebb8 <dns_resolve_name+0xbc>
			memcpy(net_sin6(&info.ai_addr), net_sin6(&addr),
 800eba0:	2218      	movs	r2, #24
 800eba2:	a901      	add	r1, sp, #4
 800eba4:	a807      	add	r0, sp, #28
 800eba6:	f006 f866 	bl	8014c76 <memcpy>
			info.ai_family = AF_INET6;
 800ebaa:	2302      	movs	r3, #2
 800ebac:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			info.ai_addr.sa_family = AF_INET6;
 800ebb0:	f8ad 301c 	strh.w	r3, [sp, #28]
			info.ai_addrlen = sizeof(struct sockaddr_in6);
 800ebb4:	2318      	movs	r3, #24
 800ebb6:	e7db      	b.n	800eb70 <dns_resolve_name+0x74>
				return -EPFNOSUPPORT;
 800ebb8:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 800ebbc:	e7e6      	b.n	800eb8c <dns_resolve_name+0x90>
	k_mutex_lock(&ctx->lock, K_FOREVER);
 800ebbe:	f104 0b20 	add.w	fp, r4, #32
 800ebc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebca:	4658      	mov	r0, fp
 800ebcc:	f00b fb48 	bl	801a260 <k_mutex_lock>
	if (ctx->state != DNS_RESOLVE_CONTEXT_ACTIVE) {
 800ebd0:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d166      	bne.n	800eca6 <dns_resolve_name+0x1aa>
	if (pending_query->cb != NULL) {
 800ebd8:	6f63      	ldr	r3, [r4, #116]	; 0x74
		if (!check_query_active(&ctx->queries[i], true)) {
 800ebda:	f104 0940 	add.w	r9, r4, #64	; 0x40
	if (pending_query->cb != NULL) {
 800ebde:	b16b      	cbz	r3, 800ebfc <dns_resolve_name+0x100>
		    && pending_query->query == NULL
 800ebe0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800ebe4:	b12b      	cbz	r3, 800ebf2 <dns_resolve_name+0xf6>
		ret = -EAGAIN;
 800ebe6:	f06f 050a 	mvn.w	r5, #10
	k_mutex_unlock(&ctx->lock);
 800ebea:	4658      	mov	r0, fp
 800ebec:	f00b fbaa 	bl	801a344 <k_mutex_unlock.isra.0>
	return ret;
 800ebf0:	e7cc      	b.n	800eb8c <dns_resolve_name+0x90>
		    && k_work_delayable_busy_get(&pending_query->timer) == 0) {
 800ebf2:	4648      	mov	r0, r9
 800ebf4:	f00c ff92 	bl	801bb1c <k_work_delayable_busy_get>
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	d1f4      	bne.n	800ebe6 <dns_resolve_name+0xea>
	ctx->queries[i].cb = cb;
 800ebfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
	k_work_init_delayable(&ctx->queries[i].timer, query_timeout);
 800ebfe:	4648      	mov	r0, r9
 800ec00:	492a      	ldr	r1, [pc, #168]	; (800ecac <dns_resolve_name+0x1b0>)
	ctx->queries[i].cb = cb;
 800ec02:	6763      	str	r3, [r4, #116]	; 0x74
	ctx->queries[i].user_data = user_data;
 800ec04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
	ctx->queries[i].query = query;
 800ec06:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
	ctx->queries[i].user_data = user_data;
 800ec0a:	67a3      	str	r3, [r4, #120]	; 0x78
	ctx->queries[i].query_hash = 0;
 800ec0c:	2300      	movs	r3, #0
	ctx->queries[i].query_type = type;
 800ec0e:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
	ctx->queries[i].query_hash = 0;
 800ec12:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
	ctx->queries[i].ctx = ctx;
 800ec16:	6724      	str	r4, [r4, #112]	; 0x70
	ctx->queries[i].timeout = tout;
 800ec18:	e9c4 5a20 	strd	r5, sl, [r4, #128]	; 0x80
	k_work_init_delayable(&ctx->queries[i].timer, query_timeout);
 800ec1c:	f00c ff72 	bl	801bb04 <k_work_init_delayable>
 800ec20:	4823      	ldr	r0, [pc, #140]	; (800ecb0 <dns_resolve_name+0x1b4>)
 800ec22:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800ec26:	f006 f995 	bl	8014f54 <net_buf_alloc_fixed>
	if (!dns_data) {
 800ec2a:	4680      	mov	r8, r0
 800ec2c:	b130      	cbz	r0, 800ec3c <dns_resolve_name+0x140>
 800ec2e:	4821      	ldr	r0, [pc, #132]	; (800ecb4 <dns_resolve_name+0x1b8>)
 800ec30:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800ec34:	f006 f98e 	bl	8014f54 <net_buf_alloc_fixed>
	if (!dns_qname) {
 800ec38:	4606      	mov	r6, r0
 800ec3a:	b9a0      	cbnz	r0, 800ec66 <dns_resolve_name+0x16a>
		ret = -ENOMEM;
 800ec3c:	f06f 050b 	mvn.w	r5, #11
	dns_qname = net_buf_alloc(&dns_qname_pool, ctx->buf_timeout);
 800ec40:	2600      	movs	r6, #0
			release_query(&ctx->queries[i]);
 800ec42:	4648      	mov	r0, r9
 800ec44:	f00b fb0e 	bl	801a264 <release_query>
		if (dns_id) {
 800ec48:	b10f      	cbz	r7, 800ec4e <dns_resolve_name+0x152>
			*dns_id = 0U;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	803b      	strh	r3, [r7, #0]
	if (dns_data) {
 800ec4e:	f1b8 0f00 	cmp.w	r8, #0
 800ec52:	d002      	beq.n	800ec5a <dns_resolve_name+0x15e>
		net_buf_unref(dns_data);
 800ec54:	4640      	mov	r0, r8
 800ec56:	f7f5 fb4f 	bl	80042f8 <net_buf_unref>
	if (dns_qname) {
 800ec5a:	2e00      	cmp	r6, #0
 800ec5c:	d0c5      	beq.n	800ebea <dns_resolve_name+0xee>
		net_buf_unref(dns_qname);
 800ec5e:	4630      	mov	r0, r6
 800ec60:	f7f5 fb4a 	bl	80042f8 <net_buf_unref>
 800ec64:	e7c1      	b.n	800ebea <dns_resolve_name+0xee>
	ret = dns_msg_pack_qname(&dns_qname->len, dns_qname->data,
 800ec66:	68c1      	ldr	r1, [r0, #12]
 800ec68:	22ff      	movs	r2, #255	; 0xff
 800ec6a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800ec6e:	3010      	adds	r0, #16
 800ec70:	f00b f98f 	bl	8019f92 <dns_msg_pack_qname>
	if (ret < 0) {
 800ec74:	1e05      	subs	r5, r0, #0
 800ec76:	dbe4      	blt.n	800ec42 <dns_resolve_name+0x146>
 800ec78:	f7f5 fa4e 	bl	8004118 <z_impl_sys_rand32_get>
	ctx->queries[i].id = sys_rand32_get();
 800ec7c:	b280      	uxth	r0, r0
 800ec7e:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
	if (dns_id) {
 800ec82:	b107      	cbz	r7, 800ec86 <dns_resolve_name+0x18a>
		*dns_id = ctx->queries[i].id;
 800ec84:	8038      	strh	r0, [r7, #0]
		if (!ctx->servers[j].net_ctx) {
 800ec86:	69a5      	ldr	r5, [r4, #24]
 800ec88:	2d00      	cmp	r5, #0
 800ec8a:	d0e3      	beq.n	800ec54 <dns_resolve_name+0x158>
		ret = dns_write(ctx, j, i, dns_data, dns_qname, hop_limit);
 800ec8c:	4633      	mov	r3, r6
 800ec8e:	4642      	mov	r2, r8
 800ec90:	2100      	movs	r1, #0
 800ec92:	4620      	mov	r0, r4
 800ec94:	f7ff fcce 	bl	800e634 <dns_write.constprop.0>
		if (ret < 0) {
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	da02      	bge.n	800eca2 <dns_resolve_name+0x1a6>
			ret = -ENOENT;
 800ec9c:	f06f 0501 	mvn.w	r5, #1
 800eca0:	e7cf      	b.n	800ec42 <dns_resolve_name+0x146>
 800eca2:	2500      	movs	r5, #0
 800eca4:	e7d6      	b.n	800ec54 <dns_resolve_name+0x158>
		ret = -EINVAL;
 800eca6:	f06f 0515 	mvn.w	r5, #21
 800ecaa:	e79e      	b.n	800ebea <dns_resolve_name+0xee>
 800ecac:	0801a3a5 	.word	0x0801a3a5
 800ecb0:	240011c8 	.word	0x240011c8
 800ecb4:	240011f4 	.word	0x240011f4

0800ecb8 <dns_resolve_get_default>:
}

struct dns_resolve_context *dns_resolve_get_default(void)
{
	return &dns_default_ctx;
}
 800ecb8:	4800      	ldr	r0, [pc, #0]	; (800ecbc <dns_resolve_get_default+0x4>)
 800ecba:	4770      	bx	lr
 800ecbc:	24001a30 	.word	0x24001a30

0800ecc0 <dns_init_resolver>:
	}
#else
	/* We must always call init even if there are no servers configured so
	 * that DNS mutex gets initialized properly.
	 */
	(void)dns_resolve_init(dns_resolve_get_default(), NULL, NULL);
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	4802      	ldr	r0, [pc, #8]	; (800eccc <dns_init_resolver+0xc>)
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	f00b bb8a 	b.w	801a3de <dns_resolve_init>
 800ecca:	bf00      	nop
 800eccc:	24001a30 	.word	0x24001a30

0800ecd0 <stm32_exti_isr>:
 * Check EXTI lines in exti_range for pending interrupts
 *
 * @param *exti_range Pointer to a exti_range structure
 */
static void stm32_exti_isr(const void *exti_range)
{
 800ecd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd4:	4605      	mov	r5, r0
 800ecd6:	2400      	movs	r4, #0
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 800ecd8:	f04f 0801 	mov.w	r8, #1
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1U : 0U);
 800ecdc:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
		if (stm32_exti_is_pending(line) != 0) {
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 800ece0:	4f0e      	ldr	r7, [pc, #56]	; (800ed1c <stm32_exti_isr+0x4c>)
		line = range->start + i;
 800ece2:	782b      	ldrb	r3, [r5, #0]
 800ece4:	fa53 f084 	uxtab	r0, r3, r4
	if (line < 32) {
 800ece8:	281f      	cmp	r0, #31
 800ecea:	dc0f      	bgt.n	800ed0c <stm32_exti_isr+0x3c>
		return LL_EXTI_IsActiveFlag_0_31(BIT((uint32_t)line));
 800ecec:	fa08 f300 	lsl.w	r3, r8, r0
 800ecf0:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
		if (stm32_exti_is_pending(line) != 0) {
 800ecf4:	ea33 0202 	bics.w	r2, r3, r2
 800ecf8:	d108      	bne.n	800ed0c <stm32_exti_isr+0x3c>
  *         @arg @ref LL_EXTI_LINE_21
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800ecfa:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
			if (!data->cb[line].cb) {
 800ecfe:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
 800ed02:	b11b      	cbz	r3, 800ed0c <stm32_exti_isr+0x3c>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800ed04:	eb07 02c0 	add.w	r2, r7, r0, lsl #3
 800ed08:	6851      	ldr	r1, [r2, #4]
 800ed0a:	4798      	blx	r3
	for (uint8_t i = 0; i <= range->len; i++) {
 800ed0c:	3401      	adds	r4, #1
 800ed0e:	786a      	ldrb	r2, [r5, #1]
 800ed10:	b2e3      	uxtb	r3, r4
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d2e5      	bcs.n	800ece2 <stm32_exti_isr+0x12>
		}
	}
}
 800ed16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed1a:	bf00      	nop
 800ed1c:	24002df0 	.word	0x24002df0

0800ed20 <stm32_fill_irq_table>:

static void stm32_fill_irq_table(int8_t start, int8_t len, int32_t irqn)
{
	for (int i = 0; i < len; i++) {
 800ed20:	4b04      	ldr	r3, [pc, #16]	; (800ed34 <stm32_fill_irq_table+0x14>)
 800ed22:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ed26:	2300      	movs	r3, #0
 800ed28:	3301      	adds	r3, #1
		exti_irq_table[start + i] = irqn;
 800ed2a:	f820 2b02 	strh.w	r2, [r0], #2
	for (int i = 0; i < len; i++) {
 800ed2e:	4299      	cmp	r1, r3
 800ed30:	dcfa      	bgt.n	800ed28 <stm32_fill_irq_table+0x8>
	}
}
 800ed32:	4770      	bx	lr
 800ed34:	24001028 	.word	0x24001028

0800ed38 <stm32_exti_enable>:
	irqnum = exti_irq_table[line];
 800ed38:	4b08      	ldr	r3, [pc, #32]	; (800ed5c <stm32_exti_enable+0x24>)
{
 800ed3a:	4602      	mov	r2, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ed3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ed40:	b410      	push	{r4}
	irqnum = exti_irq_table[line];
 800ed42:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
	LL_EXTI_EnableIT_0_31(BIT((uint32_t)line));
 800ed46:	2301      	movs	r3, #1
 800ed48:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 800ed4c:	4093      	lsls	r3, r2
 800ed4e:	4323      	orrs	r3, r4
 800ed50:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800ed54:	bc10      	pop	{r4}
	irq_enable(irqnum);
 800ed56:	f7f4 be17 	b.w	8003988 <arch_irq_enable>
 800ed5a:	bf00      	nop
 800ed5c:	24001028 	.word	0x24001028

0800ed60 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if ((data->cb[line].cb == cb) && (data->cb[line].data == arg)) {
 800ed60:	4b0b      	ldr	r3, [pc, #44]	; (800ed90 <stm32_exti_set_callback+0x30>)
{
 800ed62:	b530      	push	{r4, r5, lr}
 800ed64:	4604      	mov	r4, r0
	if ((data->cb[line].cb == cb) && (data->cb[line].data == arg)) {
 800ed66:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800ed6a:	4288      	cmp	r0, r1
 800ed6c:	d104      	bne.n	800ed78 <stm32_exti_set_callback+0x18>
 800ed6e:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ed72:	686d      	ldr	r5, [r5, #4]
 800ed74:	4295      	cmp	r5, r2
 800ed76:	d006      	beq.n	800ed86 <stm32_exti_set_callback+0x26>
		return 0;
	}

	/* if callback already exists/maybe-running return busy */
	if (data->cb[line].cb != NULL) {
 800ed78:	b938      	cbnz	r0, 800ed8a <stm32_exti_set_callback+0x2a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800ed7a:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 800ed7e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed82:	605a      	str	r2, [r3, #4]

	return 0;
}
 800ed84:	bd30      	pop	{r4, r5, pc}
		return 0;
 800ed86:	2000      	movs	r0, #0
 800ed88:	e7fc      	b.n	800ed84 <stm32_exti_set_callback+0x24>
		return -EBUSY;
 800ed8a:	f06f 000f 	mvn.w	r0, #15
 800ed8e:	e7f9      	b.n	800ed84 <stm32_exti_set_callback+0x24>
 800ed90:	24002df0 	.word	0x24002df0

0800ed94 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 800ed94:	4b03      	ldr	r3, [pc, #12]	; (800eda4 <stm32_exti_unset_callback+0x10>)
 800ed96:	2200      	movs	r2, #0
 800ed98:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 800ed9c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800eda0:	605a      	str	r2, [r3, #4]
}
 800eda2:	4770      	bx	lr
 800eda4:	24002df0 	.word	0x24002df0

0800eda8 <get_pllsrc_frequency>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800eda8:	4b04      	ldr	r3, [pc, #16]	; (800edbc <get_pllsrc_frequency+0x14>)
		return STM32_HSE_FREQ;
	case LL_RCC_PLLSOURCE_NONE:
	default:
		return 0;
	}
}
 800edaa:	4805      	ldr	r0, [pc, #20]	; (800edc0 <get_pllsrc_frequency+0x18>)
 800edac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edae:	f003 0303 	and.w	r3, r3, #3
		return STM32_HSE_FREQ;
 800edb2:	2b02      	cmp	r3, #2
}
 800edb4:	bf18      	it	ne
 800edb6:	2000      	movne	r0, #0
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	58024400 	.word	0x58024400
 800edc0:	007a1200 	.word	0x007a1200

0800edc4 <stm32_clock_control_configure>:
}

static inline int stm32_clock_control_configure(const struct device *dev,
						clock_control_subsys_t sub_system,
						void *data)
{
 800edc4:	b530      	push	{r4, r5, lr}
	int err;

	ARG_UNUSED(dev);
	ARG_UNUSED(data);

	err = enabled_clock(pclken->bus);
 800edc6:	680b      	ldr	r3, [r1, #0]
	    ((src_clk == STM32_SRC_LSI) && IS_ENABLED(STM32_LSI_ENABLED)) ||
 800edc8:	2b10      	cmp	r3, #16
 800edca:	d824      	bhi.n	800ee16 <stm32_clock_control_configure+0x52>
 800edcc:	4813      	ldr	r0, [pc, #76]	; (800ee1c <stm32_clock_control_configure+0x58>)
 800edce:	40d8      	lsrs	r0, r3
 800edd0:	43c0      	mvns	r0, r0
 800edd2:	f010 0001 	ands.w	r0, r0, #1
 800edd6:	d11e      	bne.n	800ee16 <stm32_clock_control_configure+0x52>
		return err;
	}

	z_stm32_hsem_lock(CFG_HW_RCC_SEMID, HSEM_LOCK_DEFAULT_RETRY);

	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 800edd8:	684a      	ldr	r2, [r1, #4]
 800edda:	b2d3      	uxtb	r3, r2
		       STM32_CLOCK_MASK_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 800eddc:	f3c2 3542 	ubfx	r5, r2, #13, #3
 800ede0:	f3c2 2204 	ubfx	r2, r2, #8, #5
	sys_clear_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 800ede4:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 800ede8:	fa05 f202 	lsl.w	r2, r5, r2
 800edec:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	*(volatile uint32_t *)addr = temp | mask;
}

static ALWAYS_INLINE void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
	uint32_t temp = *(volatile uint32_t *)addr;
 800edf0:	681c      	ldr	r4, [r3, #0]

	*(volatile uint32_t *)addr = temp & ~mask;
 800edf2:	ea24 0202 	bic.w	r2, r4, r2
 800edf6:	601a      	str	r2, [r3, #0]
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 800edf8:	6849      	ldr	r1, [r1, #4]
 800edfa:	b2cb      	uxtb	r3, r1
		     STM32_CLOCK_VAL_GET(pclken->enr) << STM32_CLOCK_SHIFT_GET(pclken->enr));
 800edfc:	f3c1 4202 	ubfx	r2, r1, #16, #3
 800ee00:	f3c1 2104 	ubfx	r1, r1, #8, #5
	sys_set_bits(DT_REG_ADDR(DT_NODELABEL(rcc)) + STM32_CLOCK_REG_GET(pclken->enr),
 800ee04:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 800ee08:	408a      	lsls	r2, r1
 800ee0a:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 800ee0e:	681c      	ldr	r4, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 800ee10:	4322      	orrs	r2, r4
 800ee12:	601a      	str	r2, [r3, #0]

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	return 0;
}
 800ee14:	bd30      	pop	{r4, r5, pc}
	return -ENOTSUP;
 800ee16:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800ee1a:	e7fb      	b.n	800ee14 <stm32_clock_control_configure+0x50>
 800ee1c:	0001340e 	.word	0x0001340e

0800ee20 <get_hclk_frequency>:
{
 800ee20:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ee22:	4b08      	ldr	r3, [pc, #32]	; (800ee44 <get_hclk_frequency+0x24>)
 800ee24:	691a      	ldr	r2, [r3, #16]
 800ee26:	f002 0238 	and.w	r2, r2, #56	; 0x38
	switch (LL_RCC_GetSysClkSource()) {
 800ee2a:	2a10      	cmp	r2, #16
 800ee2c:	d006      	beq.n	800ee3c <get_hclk_frequency+0x1c>
 800ee2e:	2a18      	cmp	r2, #24
 800ee30:	d106      	bne.n	800ee40 <get_hclk_frequency+0x20>
		sysclk = get_pllout_frequency(get_pllsrc_frequency(),
 800ee32:	f7ff ffb9 	bl	800eda8 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 800ee36:	4350      	muls	r0, r2
 800ee38:	0840      	lsrs	r0, r0, #1
}
 800ee3a:	bd08      	pop	{r3, pc}
	switch (LL_RCC_GetSysClkSource()) {
 800ee3c:	4802      	ldr	r0, [pc, #8]	; (800ee48 <get_hclk_frequency+0x28>)
 800ee3e:	e7fc      	b.n	800ee3a <get_hclk_frequency+0x1a>
	uint32_t sysclk = 0;
 800ee40:	2000      	movs	r0, #0
	return get_bus_clock(sysclk, STM32_HPRE);
 800ee42:	e7fa      	b.n	800ee3a <get_hclk_frequency+0x1a>
 800ee44:	58024400 	.word	0x58024400
 800ee48:	007a1200 	.word	0x007a1200

0800ee4c <stm32_clock_control_get_subsys_rate>:
	uint32_t apb3_clock = get_bus_clock(ahb_clock, STM32_D1PPRE);
	uint32_t apb4_clock = get_bus_clock(ahb_clock, STM32_D3PPRE);

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800ee4c:	680b      	ldr	r3, [r1, #0]
 800ee4e:	2b10      	cmp	r3, #16
{
 800ee50:	b510      	push	{r4, lr}
 800ee52:	4614      	mov	r4, r2
	switch (pclken->bus) {
 800ee54:	d82a      	bhi.n	800eeac <stm32_clock_control_get_subsys_rate+0x60>
 800ee56:	b913      	cbnz	r3, 800ee5e <stm32_clock_control_get_subsys_rate+0x12>
 800ee58:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800ee5c:	e03e      	b.n	800eedc <stm32_clock_control_get_subsys_rate+0x90>
 800ee5e:	3b01      	subs	r3, #1
 800ee60:	2b0f      	cmp	r3, #15
 800ee62:	d8f9      	bhi.n	800ee58 <stm32_clock_control_get_subsys_rate+0xc>
 800ee64:	a201      	add	r2, pc, #4	; (adr r2, 800ee6c <stm32_clock_control_get_subsys_rate+0x20>)
 800ee66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee6a:	bf00      	nop
 800ee6c:	0800eee9 	.word	0x0800eee9
 800ee70:	0800eef5 	.word	0x0800eef5
 800ee74:	0800eee9 	.word	0x0800eee9
 800ee78:	0800ee59 	.word	0x0800ee59
 800ee7c:	0800ee59 	.word	0x0800ee59
 800ee80:	0800ee59 	.word	0x0800ee59
 800ee84:	0800ee59 	.word	0x0800ee59
 800ee88:	0800ee59 	.word	0x0800ee59
 800ee8c:	0800ee59 	.word	0x0800ee59
 800ee90:	0800eed5 	.word	0x0800eed5
 800ee94:	0800eed9 	.word	0x0800eed9
 800ee98:	0800eedf 	.word	0x0800eedf
 800ee9c:	0800eee5 	.word	0x0800eee5
 800eea0:	0800ee59 	.word	0x0800ee59
 800eea4:	0800ee59 	.word	0x0800ee59
 800eea8:	0800eecd 	.word	0x0800eecd
 800eeac:	2bd4      	cmp	r3, #212	; 0xd4
 800eeae:	d008      	beq.n	800eec2 <stm32_clock_control_get_subsys_rate+0x76>
 800eeb0:	3bd8      	subs	r3, #216	; 0xd8
 800eeb2:	2b1c      	cmp	r3, #28
 800eeb4:	d8d0      	bhi.n	800ee58 <stm32_clock_control_get_subsys_rate+0xc>
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	fa02 f303 	lsl.w	r3, r2, r3
 800eebc:	f013 3f11 	tst.w	r3, #286331153	; 0x11111111
 800eec0:	d0ca      	beq.n	800ee58 <stm32_clock_control_get_subsys_rate+0xc>
	uint32_t ahb_clock = get_bus_clock(SystemCoreClock, STM32_HPRE);
 800eec2:	4b0f      	ldr	r3, [pc, #60]	; (800ef00 <stm32_clock_control_get_subsys_rate+0xb4>)
 800eec4:	681b      	ldr	r3, [r3, #0]
		*rate = STM32_LSI_FREQ;
		break;
#endif /* STM32_LSI_ENABLED */
#if defined(STM32_HSI48_ENABLED)
	case STM32_SRC_HSI48:
		*rate = STM32_HSI48_FREQ;
 800eec6:	6023      	str	r3, [r4, #0]
#endif /* STM32_PLL3_ENABLED */
	default:
		return -ENOTSUP;
	}

	return 0;
 800eec8:	2000      	movs	r0, #0
		break;
 800eeca:	e007      	b.n	800eedc <stm32_clock_control_get_subsys_rate+0x90>
		*rate = get_hclk_frequency();
 800eecc:	f7ff ffa8 	bl	800ee20 <get_hclk_frequency>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 800eed0:	6020      	str	r0, [r4, #0]
 800eed2:	e7f9      	b.n	800eec8 <stm32_clock_control_get_subsys_rate+0x7c>
		*rate = STM32_HSE_FREQ;
 800eed4:	4b0b      	ldr	r3, [pc, #44]	; (800ef04 <stm32_clock_control_get_subsys_rate+0xb8>)
 800eed6:	e7f6      	b.n	800eec6 <stm32_clock_control_get_subsys_rate+0x7a>
		*rate = STM32_LSE_FREQ;
 800eed8:	2000      	movs	r0, #0
 800eeda:	6020      	str	r0, [r4, #0]
}
 800eedc:	bd10      	pop	{r4, pc}
		*rate = STM32_LSI_FREQ;
 800eede:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800eee2:	e7f0      	b.n	800eec6 <stm32_clock_control_get_subsys_rate+0x7a>
		*rate = STM32_HSI48_FREQ;
 800eee4:	4b08      	ldr	r3, [pc, #32]	; (800ef08 <stm32_clock_control_get_subsys_rate+0xbc>)
 800eee6:	e7ee      	b.n	800eec6 <stm32_clock_control_get_subsys_rate+0x7a>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 800eee8:	f7ff ff5e 	bl	800eda8 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 800eeec:	2318      	movs	r3, #24
 800eeee:	4358      	muls	r0, r3
 800eef0:	0840      	lsrs	r0, r0, #1
 800eef2:	e7ed      	b.n	800eed0 <stm32_clock_control_get_subsys_rate+0x84>
		*rate = get_pllout_frequency(get_pllsrc_frequency(),
 800eef4:	f7ff ff58 	bl	800eda8 <get_pllsrc_frequency>
	return (pllsrc_freq / pllm_div) * plln_mul / pllout_div;
 800eef8:	2318      	movs	r3, #24
 800eefa:	4358      	muls	r0, r3
 800eefc:	0880      	lsrs	r0, r0, #2
 800eefe:	e7e7      	b.n	800eed0 <stm32_clock_control_get_subsys_rate+0x84>
 800ef00:	2400100c 	.word	0x2400100c
 800ef04:	007a1200 	.word	0x007a1200
 800ef08:	02dc6c00 	.word	0x02dc6c00

0800ef0c <stm32_clock_control_init>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 800ef0c:	4b71      	ldr	r3, [pc, #452]	; (800f0d4 <stm32_clock_control_init+0x1c8>)
	return 0;
}

#if defined(CONFIG_CPU_CORTEX_M7)
static int stm32_clock_control_init(const struct device *dev)
{
 800ef0e:	b513      	push	{r0, r1, r4, lr}
 800ef10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ef14:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800ef18:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 800ef1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ef20:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800ef24:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800ef26:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ef2e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ef36:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	0394      	lsls	r4, r2, #14
 800ef3c:	d5fc      	bpl.n	800ef38 <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800ef3e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ef40:	f042 0201 	orr.w	r2, r2, #1
 800ef44:	675a      	str	r2, [r3, #116]	; 0x74
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800ef46:	4b63      	ldr	r3, [pc, #396]	; (800f0d4 <stm32_clock_control_init+0x1c8>)
 800ef48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ef4a:	0790      	lsls	r0, r2, #30
 800ef4c:	d5fc      	bpl.n	800ef48 <stm32_clock_control_init+0x3c>
  SET_BIT(RCC->CR, RCC_CR_HSI48ON);
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ef54:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == (RCC_CR_HSI48RDY)) ? 1UL : 0UL);
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	0491      	lsls	r1, r2, #18
 800ef5a:	d5fc      	bpl.n	800ef56 <stm32_clock_control_init+0x4a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ef5c:	691a      	ldr	r2, [r3, #16]
 800ef5e:	f002 0238 	and.w	r2, r2, #56	; 0x38
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 800ef62:	2a18      	cmp	r2, #24
 800ef64:	d117      	bne.n	800ef96 <stm32_clock_control_init+0x8a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	0752      	lsls	r2, r2, #29
 800ef6a:	d407      	bmi.n	800ef7c <stm32_clock_control_init+0x70>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	f042 0201 	orr.w	r2, r2, #1
 800ef72:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ef74:	4a57      	ldr	r2, [pc, #348]	; (800f0d4 <stm32_clock_control_init+0x1c8>)
 800ef76:	6813      	ldr	r3, [r2, #0]
 800ef78:	075c      	lsls	r4, r3, #29
 800ef7a:	d5fc      	bpl.n	800ef76 <stm32_clock_control_init+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ef7c:	4b55      	ldr	r3, [pc, #340]	; (800f0d4 <stm32_clock_control_init+0x1c8>)
 800ef7e:	691a      	ldr	r2, [r3, #16]
 800ef80:	f022 0207 	bic.w	r2, r2, #7
 800ef84:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ef86:	691a      	ldr	r2, [r3, #16]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800ef88:	f012 0f38 	tst.w	r2, #56	; 0x38
 800ef8c:	d1fb      	bne.n	800ef86 <stm32_clock_control_init+0x7a>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 800ef8e:	699a      	ldr	r2, [r3, #24]
 800ef90:	f022 020f 	bic.w	r2, r2, #15
 800ef94:	619a      	str	r2, [r3, #24]
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800ef96:	4b4f      	ldr	r3, [pc, #316]	; (800f0d4 <stm32_clock_control_init+0x1c8>)
 800ef98:	681a      	ldr	r2, [r3, #0]
 800ef9a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800ef9e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 800efa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800efa2:	f022 0203 	bic.w	r2, r2, #3
 800efa6:	f042 0202 	orr.w	r2, r2, #2
 800efaa:	629a      	str	r2, [r3, #40]	; 0x28
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 800efac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800efae:	f422 727c 	bic.w	r2, r2, #1008	; 0x3f0
 800efb2:	f042 0210 	orr.w	r2, r2, #16
 800efb6:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 800efb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efba:	f022 020c 	bic.w	r2, r2, #12
 800efbe:	f042 0208 	orr.w	r2, r2, #8
 800efc2:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 800efc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efc6:	f022 0202 	bic.w	r2, r2, #2
 800efca:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N - 1UL) << RCC_PLL1DIVR_N1_Pos);
 800efcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efce:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800efd2:	f022 0201 	bic.w	r2, r2, #1
 800efd6:	f042 0217 	orr.w	r2, r2, #23
 800efda:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN);
 800efdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efde:	f022 0201 	bic.w	r2, r2, #1
 800efe2:	62da      	str	r2, [r3, #44]	; 0x2c
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P - 1UL) << RCC_PLL1DIVR_P1_Pos);
 800efe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efe6:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 800efea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efee:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 800eff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eff2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800eff6:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q - 1UL) << RCC_PLL1DIVR_Q1_Pos);
 800eff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800effa:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800effe:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800f002:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN);
 800f004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f006:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f00a:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R - 1UL) << RCC_PLL1DIVR_R1_Pos);
 800f00c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f00e:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800f012:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800f016:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN);
 800f018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f01a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f01e:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800f026:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY)) ? 1UL : 0UL);
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	0190      	lsls	r0, r2, #6
 800f02c:	d5fc      	bpl.n	800f028 <stm32_clock_control_init+0x11c>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 800f02e:	4b2a      	ldr	r3, [pc, #168]	; (800f0d8 <stm32_clock_control_init+0x1cc>)
 800f030:	68da      	ldr	r2, [r3, #12]
 800f032:	f022 0207 	bic.w	r2, r2, #7
 800f036:	f042 0202 	orr.w	r2, r2, #2
 800f03a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 800f03c:	699a      	ldr	r2, [r3, #24]
 800f03e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800f042:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 800f044:	699a      	ldr	r2, [r3, #24]
 800f046:	0491      	lsls	r1, r2, #18
 800f048:	d5fc      	bpl.n	800f044 <stm32_clock_control_init+0x138>

	/* Configure Voltage scale to comply with the desired system frequency */
	prepare_regulator_voltage_scale();

	/* Current hclk value */
	old_hclk_freq = get_hclk_frequency();
 800f04a:	f7ff fee9 	bl	800ee20 <get_hclk_frequency>
 800f04e:	4604      	mov	r4, r0
				      STM32_HPRE);

	/* Set flash latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq increases, set flash latency before any clock setting */
	if (new_hclk_freq > old_hclk_freq) {
 800f050:	4822      	ldr	r0, [pc, #136]	; (800f0dc <stm32_clock_control_init+0x1d0>)
 800f052:	4284      	cmp	r4, r0
 800f054:	d201      	bcs.n	800f05a <stm32_clock_control_init+0x14e>
		LL_SetFlashLatency(new_hclk_freq);
 800f056:	f001 fedb 	bl	8010e10 <LL_SetFlashLatency>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 800f05a:	4b1e      	ldr	r3, [pc, #120]	; (800f0d4 <stm32_clock_control_init+0x1c8>)
 800f05c:	699a      	ldr	r2, [r3, #24]
 800f05e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800f062:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 800f064:	699a      	ldr	r2, [r3, #24]
 800f066:	f022 020f 	bic.w	r2, r2, #15
 800f06a:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 800f06c:	69da      	ldr	r2, [r3, #28]
 800f06e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f072:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 800f074:	69da      	ldr	r2, [r3, #28]
 800f076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f07a:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 800f07c:	699a      	ldr	r2, [r3, #24]
 800f07e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f082:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 800f084:	6a1a      	ldr	r2, [r3, #32]
 800f086:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f08a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800f08c:	691a      	ldr	r2, [r3, #16]
 800f08e:	f022 0207 	bic.w	r2, r2, #7
 800f092:	f042 0203 	orr.w	r2, r2, #3
 800f096:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f098:	691a      	ldr	r2, [r3, #16]
 800f09a:	f002 0238 	and.w	r2, r2, #56	; 0x38

	/* Set up sys clock */
	if (IS_ENABLED(STM32_SYSCLK_SRC_PLL)) {
		/* Set PLL1 as System Clock Source */
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
		while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1) {
 800f09e:	2a18      	cmp	r2, #24
 800f0a0:	d1fa      	bne.n	800f098 <stm32_clock_control_init+0x18c>
	}

	/* Set FLASH latency */
	/* AHB/AXI/HCLK clock is SYSCLK / HPRE */
	/* If freq not increased, set flash latency after all clock setting */
	if (new_hclk_freq <= old_hclk_freq) {
 800f0a2:	480e      	ldr	r0, [pc, #56]	; (800f0dc <stm32_clock_control_init+0x1d0>)
 800f0a4:	4284      	cmp	r4, r0
 800f0a6:	d301      	bcc.n	800f0ac <stm32_clock_control_init+0x1a0>
		LL_SetFlashLatency(new_hclk_freq);
 800f0a8:	f001 feb2 	bl	8010e10 <LL_SetFlashLatency>
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 800f0ac:	4b0a      	ldr	r3, [pc, #40]	; (800f0d8 <stm32_clock_control_init+0x1cc>)
 800f0ae:	68da      	ldr	r2, [r3, #12]
 800f0b0:	f022 0207 	bic.w	r2, r2, #7
 800f0b4:	f042 0202 	orr.w	r2, r2, #2
 800f0b8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 800f0ba:	699a      	ldr	r2, [r3, #24]
 800f0bc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800f0c0:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 800f0c2:	699a      	ldr	r2, [r3, #24]
 800f0c4:	0492      	lsls	r2, r2, #18
 800f0c6:	d5fc      	bpl.n	800f0c2 <stm32_clock_control_init+0x1b6>
	optimize_regulator_voltage_scale(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

	/* Update CMSIS variable */
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 800f0c8:	4b05      	ldr	r3, [pc, #20]	; (800f0e0 <stm32_clock_control_init+0x1d4>)

	return r;
}
 800f0ca:	2000      	movs	r0, #0
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 800f0cc:	4a03      	ldr	r2, [pc, #12]	; (800f0dc <stm32_clock_control_init+0x1d0>)
 800f0ce:	601a      	str	r2, [r3, #0]
}
 800f0d0:	b002      	add	sp, #8
 800f0d2:	bd10      	pop	{r4, pc}
 800f0d4:	58024400 	.word	0x58024400
 800f0d8:	58024800 	.word	0x58024800
 800f0dc:	05b8d800 	.word	0x05b8d800
 800f0e0:	2400100c 	.word	0x2400100c

0800f0e4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
 800f0e4:	b508      	push	{r3, lr}
 800f0e6:	4807      	ldr	r0, [pc, #28]	; (800f104 <uart_console_init+0x20>)
 800f0e8:	f00c fa6d 	bl	801b5c6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 800f0ec:	b138      	cbz	r0, 800f0fe <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 800f0ee:	4806      	ldr	r0, [pc, #24]	; (800f108 <uart_console_init+0x24>)
 800f0f0:	f7f4 fff2 	bl	80040d8 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800f0f4:	4804      	ldr	r0, [pc, #16]	; (800f108 <uart_console_init+0x24>)
 800f0f6:	f7f1 fdf1 	bl	8000cdc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 800f0fa:	2000      	movs	r0, #0
}
 800f0fc:	bd08      	pop	{r3, pc}
		return -ENODEV;
 800f0fe:	f06f 0012 	mvn.w	r0, #18
 800f102:	e7fb      	b.n	800f0fc <uart_console_init+0x18>
 800f104:	0801c3b4 	.word	0x0801c3b4
 800f108:	0800f10d 	.word	0x0800f10d

0800f10c <console_out>:
	if ('\n' == c) {
 800f10c:	280a      	cmp	r0, #10
{
 800f10e:	b538      	push	{r3, r4, r5, lr}
 800f110:	4604      	mov	r4, r0
 800f112:	4d07      	ldr	r5, [pc, #28]	; (800f130 <console_out+0x24>)
	if ('\n' == c) {
 800f114:	d104      	bne.n	800f120 <console_out+0x14>
	api->poll_out(dev, out_char);
 800f116:	68ab      	ldr	r3, [r5, #8]
 800f118:	210d      	movs	r1, #13
 800f11a:	4628      	mov	r0, r5
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	4798      	blx	r3
 800f120:	68ab      	ldr	r3, [r5, #8]
 800f122:	b2e1      	uxtb	r1, r4
 800f124:	4802      	ldr	r0, [pc, #8]	; (800f130 <console_out+0x24>)
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	4798      	blx	r3
}
 800f12a:	4620      	mov	r0, r4
 800f12c:	bd38      	pop	{r3, r4, r5, pc}
 800f12e:	bf00      	nop
 800f130:	0801c3b4 	.word	0x0801c3b4

0800f134 <start_pool_filling.constprop.0>:
	} while (remaining_len);

	return len;
}

static int start_pool_filling(bool wait)
 800f134:	b508      	push	{r3, lr}
	__asm__ volatile(
 800f136:	f04f 0310 	mov.w	r3, #16
 800f13a:	f3ef 8111 	mrs	r1, BASEPRI
 800f13e:	f383 8812 	msr	BASEPRI_MAX, r3
 800f142:	f3bf 8f6f 	isb	sy
	}
#else
	ARG_UNUSED(wait);
#endif /* CONFIG_SOC_SERIES_STM32WBX || CONFIG_STM32H7_DUAL_CORE */

	already_filling = entropy_stm32_rng_data.filling_pools;
 800f146:	4b08      	ldr	r3, [pc, #32]	; (800f168 <start_pool_filling.constprop.0+0x34>)
	entropy_stm32_rng_data.filling_pools = true;
 800f148:	2001      	movs	r0, #1
	already_filling = entropy_stm32_rng_data.filling_pools;
 800f14a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	entropy_stm32_rng_data.filling_pools = true;
 800f14e:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
	__asm__ volatile(
 800f152:	f381 8811 	msr	BASEPRI, r1
 800f156:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	if (unlikely(already_filling)) {
 800f15a:	b912      	cbnz	r2, 800f162 <start_pool_filling.constprop.0+0x2e>
	 * rng pool is filled.
	 */
	pm_policy_state_lock_get(PM_STATE_SUSPEND_TO_IDLE, PM_ALL_SUBSTATES);

	acquire_rng();
	irq_enable(IRQN);
 800f15c:	2050      	movs	r0, #80	; 0x50
 800f15e:	f7f4 fc13 	bl	8003988 <arch_irq_enable>

	return 0;
}
 800f162:	2000      	movs	r0, #0
 800f164:	bd08      	pop	{r3, pc}
 800f166:	bf00      	nop
 800f168:	24000f80 	.word	0x24000f80

0800f16c <rng_pool_get>:
#define __fast
#endif

__fast static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf,
	uint16_t len)
{
 800f16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t last  = rngp->last;
 800f16e:	7883      	ldrb	r3, [r0, #2]
	uint32_t mask  = rngp->mask;
 800f170:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
 800f172:	f04f 0410 	mov.w	r4, #16
 800f176:	f3ef 8e11 	mrs	lr, BASEPRI
 800f17a:	f384 8812 	msr	BASEPRI_MAX, r4
 800f17e:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 800f182:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 800f184:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
 800f188:	1b9b      	subs	r3, r3, r6
	first = rngp->first_alloc;
 800f18a:	4635      	mov	r5, r6
	available = (last - first) & mask;
 800f18c:	403b      	ands	r3, r7
	if (available < len) {
 800f18e:	429a      	cmp	r2, r3
		len = available;
 800f190:	bf88      	it	hi
 800f192:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 800f194:	18b4      	adds	r4, r6, r2
 800f196:	403c      	ands	r4, r7
 800f198:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
 800f19a:	f38e 8811 	msr	BASEPRI, lr
 800f19e:	f3bf 8f6f 	isb	sy
 800f1a2:	188c      	adds	r4, r1, r2
	uint8_t *dst   = buf;
 800f1a4:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
 800f1a6:	4294      	cmp	r4, r2
 800f1a8:	d11d      	bne.n	800f1e6 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
 800f1aa:	4566      	cmp	r6, ip
 800f1ac:	d10d      	bne.n	800f1ca <rng_pool_get+0x5e>
	__asm__ volatile(
 800f1ae:	f04f 0510 	mov.w	r5, #16
 800f1b2:	f3ef 8411 	mrs	r4, BASEPRI
 800f1b6:	f385 8812 	msr	BASEPRI_MAX, r5
 800f1ba:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
 800f1be:	7805      	ldrb	r5, [r0, #0]
 800f1c0:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
 800f1c2:	f384 8811 	msr	BASEPRI, r4
 800f1c6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
 800f1ca:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
 800f1cc:	7901      	ldrb	r1, [r0, #4]
	len = dst - buf;
 800f1ce:	b294      	uxth	r4, r2
	available = available - len;
 800f1d0:	1b1a      	subs	r2, r3, r4
	if (available <= rngp->threshold) {
 800f1d2:	4291      	cmp	r1, r2
 800f1d4:	d305      	bcc.n	800f1e2 <rng_pool_get+0x76>
		/*
		 * Avoid starting pool filling from ISR as it might require
		 * blocking if RNG is not available and a race condition could
		 * also occur if this ISR has interrupted the RNG ISR.
		 */
		if (k_is_in_isr()) {
 800f1d6:	f00c faf6 	bl	801b7c6 <k_is_in_isr>
 800f1da:	b168      	cbz	r0, 800f1f8 <rng_pool_get+0x8c>
			k_work_submit(&entropy_stm32_rng_data.filling_work);
 800f1dc:	4808      	ldr	r0, [pc, #32]	; (800f200 <rng_pool_get+0x94>)
 800f1de:	f003 f885 	bl	80122ec <k_work_submit>
			start_pool_filling(true);
		}
	}

	return len;
}
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
 800f1e6:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
 800f1ea:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
 800f1ec:	f89e e005 	ldrb.w	lr, [lr, #5]
		first = (first + 1) & mask;
 800f1f0:	403d      	ands	r5, r7
		*dst++ = rngp->buffer[first];
 800f1f2:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
 800f1f6:	e7d6      	b.n	800f1a6 <rng_pool_get+0x3a>
			start_pool_filling(true);
 800f1f8:	f7ff ff9c 	bl	800f134 <start_pool_filling.constprop.0>
 800f1fc:	e7f1      	b.n	800f1e2 <rng_pool_get+0x76>
 800f1fe:	bf00      	nop
 800f200:	24000fb8 	.word	0x24000fb8

0800f204 <entropy_stm32_rng_get_entropy>:
}

static int entropy_stm32_rng_get_entropy(const struct device *dev,
					 uint8_t *buf,
					 uint16_t len)
{
 800f204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f208:	4f13      	ldr	r7, [pc, #76]	; (800f258 <entropy_stm32_rng_get_entropy+0x54>)
 800f20a:	460d      	mov	r5, r1
 800f20c:	4614      	mov	r4, r2

	while (len) {
		uint16_t bytes;

		k_sem_take(&entropy_stm32_rng_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get(
 800f20e:	f107 0856 	add.w	r8, r7, #86	; 0x56
 800f212:	f107 0918 	add.w	r9, r7, #24
	while (len) {
 800f216:	b914      	cbnz	r4, 800f21e <entropy_stm32_rng_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
 800f218:	4620      	mov	r0, r4
 800f21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f21e:	f04f 32ff 	mov.w	r2, #4294967295
 800f222:	f04f 33ff 	mov.w	r3, #4294967295
 800f226:	4638      	mov	r0, r7
 800f228:	f002 ff10 	bl	801204c <z_impl_k_sem_take>
		bytes = rng_pool_get(
 800f22c:	4622      	mov	r2, r4
 800f22e:	4629      	mov	r1, r5
 800f230:	4640      	mov	r0, r8
 800f232:	f7ff ff9b 	bl	800f16c <rng_pool_get>
		if (bytes == 0U) {
 800f236:	4606      	mov	r6, r0
 800f238:	b930      	cbnz	r0, 800f248 <entropy_stm32_rng_get_entropy+0x44>
 800f23a:	f04f 32ff 	mov.w	r2, #4294967295
 800f23e:	f04f 33ff 	mov.w	r3, #4294967295
 800f242:	4648      	mov	r0, r9
 800f244:	f002 ff02 	bl	801204c <z_impl_k_sem_take>
		len -= bytes;
 800f248:	1ba4      	subs	r4, r4, r6
	z_impl_k_sem_give(sem);
 800f24a:	4638      	mov	r0, r7
		buf += bytes;
 800f24c:	4435      	add	r5, r6
 800f24e:	f002 fed7 	bl	8012000 <z_impl_k_sem_give>
		len -= bytes;
 800f252:	b2a4      	uxth	r4, r4
		buf += bytes;
 800f254:	e7df      	b.n	800f216 <entropy_stm32_rng_get_entropy+0x12>
 800f256:	bf00      	nop
 800f258:	24000f88 	.word	0x24000f88

0800f25c <entropy_stm32_rng_init>:

	return cnt;
}

static int entropy_stm32_rng_init(const struct device *dev)
{
 800f25c:	b538      	push	{r3, r4, r5, lr}
	const struct entropy_stm32_rng_dev_cfg *dev_cfg;
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	dev_data = dev->data;
 800f25e:	6904      	ldr	r4, [r0, #16]
	dev_cfg = dev->config;
 800f260:	6845      	ldr	r5, [r0, #4]

	__ASSERT_NO_MSG(dev_data != NULL);
	__ASSERT_NO_MSG(dev_cfg != NULL);

	dev_data->clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
 800f262:	4825      	ldr	r0, [pc, #148]	; (800f2f8 <entropy_stm32_rng_init+0x9c>)
 800f264:	6060      	str	r0, [r4, #4]
 800f266:	f00c f9ae 	bl	801b5c6 <z_device_is_ready>

	if (!device_is_ready(dev_data->clock)) {
 800f26a:	2800      	cmp	r0, #0
 800f26c:	d041      	beq.n	800f2f2 <entropy_stm32_rng_init+0x96>
		return -ENODEV;
	}

	res = clock_control_on(dev_data->clock,
 800f26e:	6860      	ldr	r0, [r4, #4]
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800f270:	6829      	ldr	r1, [r5, #0]
 800f272:	6883      	ldr	r3, [r0, #8]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4798      	blx	r3
	return z_impl_k_sem_init(sem, initial_count, limit);
 800f278:	2201      	movs	r2, #1
 800f27a:	f104 0008 	add.w	r0, r4, #8
 800f27e:	4611      	mov	r1, r2
 800f280:	f00c fb7f 	bl	801b982 <z_impl_k_sem_init>
 800f284:	2201      	movs	r2, #1
 800f286:	2100      	movs	r1, #0
 800f288:	f104 0020 	add.w	r0, r4, #32
	rngp->first_alloc = 0U;
 800f28c:	2500      	movs	r5, #0
 800f28e:	f00c fb78 	bl	801b982 <z_impl_k_sem_init>
	k_sem_init(&dev_data->sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&dev_data->sem_sync, 0, 1);

	k_work_init(&dev_data->filling_work, pool_filling_work_handler);
 800f292:	491a      	ldr	r1, [pc, #104]	; (800f2fc <entropy_stm32_rng_init+0xa0>)
 800f294:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f298:	f00c fbf6 	bl	801ba88 <k_work_init>
	rngp->mask	  = size - 1;
 800f29c:	2307      	movs	r3, #7
		      CONFIG_ENTROPY_STM32_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(dev_data->isr),
		      CONFIG_ENTROPY_STM32_ISR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_ISR_THRESHOLD);

	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 800f29e:	462a      	mov	r2, r5
 800f2a0:	4629      	mov	r1, r5
	rngp->mask	  = size - 1;
 800f2a2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	rngp->threshold	  = threshold;
 800f2a6:	2304      	movs	r3, #4
	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 800f2a8:	2050      	movs	r0, #80	; 0x50
	rngp->first_alloc = 0U;
 800f2aa:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	rngp->threshold	  = threshold;
 800f2ae:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	rngp->mask	  = size - 1;
 800f2b2:	230f      	movs	r3, #15
	rngp->first_read  = 0U;
 800f2b4:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
	rngp->mask	  = size - 1;
 800f2b8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	rngp->threshold	  = threshold;
 800f2bc:	230c      	movs	r3, #12
	rngp->last	  = 0U;
 800f2be:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	rngp->threshold	  = threshold;
 800f2c2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
	rngp->first_alloc = 0U;
 800f2c6:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
	rngp->first_read  = 0U;
 800f2ca:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
	rngp->last	  = 0U;
 800f2ce:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 800f2d2:	f7f4 fb8b 	bl	80039ec <z_arm_irq_priority_set>
	RNG_TypeDef *rng = entropy_stm32_rng_data.rng;
 800f2d6:	4b0a      	ldr	r3, [pc, #40]	; (800f300 <entropy_stm32_rng_init+0xa4>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	f042 0204 	orr.w	r2, r2, #4
 800f2e0:	601a      	str	r2, [r3, #0]
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_EnableIT(RNG_TypeDef *RNGx)
{
  SET_BIT(RNGx->CR, RNG_CR_IE);
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	f042 0208 	orr.w	r2, r2, #8
 800f2e8:	601a      	str	r2, [r3, #0]
	 * after acquiring the RNG in start_pool_filling()
	 */
	configure_rng();
#endif /* !CONFIG_SOC_SERIES_STM32WBX && !CONFIG_STM32H7_DUAL_CORE */

	start_pool_filling(true);
 800f2ea:	f7ff ff23 	bl	800f134 <start_pool_filling.constprop.0>

	return 0;
 800f2ee:	4628      	mov	r0, r5
}
 800f2f0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 800f2f2:	f06f 0012 	mvn.w	r0, #18
 800f2f6:	e7fb      	b.n	800f2f0 <entropy_stm32_rng_init+0x94>
 800f2f8:	0801c24c 	.word	0x0801c24c
 800f2fc:	0801a639 	.word	0x0801a639
 800f300:	24000f80 	.word	0x24000f80

0800f304 <random_byte_get>:
	RNG_TypeDef *rng = entropy_stm32_rng_data.rng;
 800f304:	4b17      	ldr	r3, [pc, #92]	; (800f364 <random_byte_get+0x60>)
 800f306:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
 800f308:	f04f 0210 	mov.w	r2, #16
 800f30c:	f3ef 8111 	mrs	r1, BASEPRI
 800f310:	f382 8812 	msr	BASEPRI_MAX, r2
 800f314:	f3bf 8f6f 	isb	sy
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800f318:	685a      	ldr	r2, [r3, #4]
 800f31a:	0652      	lsls	r2, r2, #25
 800f31c:	d405      	bmi.n	800f32a <random_byte_get+0x26>
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800f31e:	685a      	ldr	r2, [r3, #4]
	if ((LL_RNG_IsActiveFlag_DRDY(rng) == 1)) {
 800f320:	07d0      	lsls	r0, r2, #31
 800f322:	d413      	bmi.n	800f34c <random_byte_get+0x48>
	int retval = -EAGAIN;
 800f324:	f06f 000a 	mvn.w	r0, #10
 800f328:	e00b      	b.n	800f342 <random_byte_get+0x3e>
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 800f32a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f32e:	605a      	str	r2, [r3, #4]
 800f330:	220c      	movs	r2, #12
	for (int i = 0; i < 12; ++i) {
 800f332:	3a01      	subs	r2, #1
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
  return (uint32_t)(READ_REG(RNGx->DR));
 800f334:	6898      	ldr	r0, [r3, #8]
 800f336:	d1fc      	bne.n	800f332 <random_byte_get+0x2e>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800f338:	685a      	ldr	r2, [r3, #4]
 800f33a:	0652      	lsls	r2, r2, #25
 800f33c:	d5ef      	bpl.n	800f31e <random_byte_get+0x1a>
		retval = -EIO;
 800f33e:	f06f 0004 	mvn.w	r0, #4
	__asm__ volatile(
 800f342:	f381 8811 	msr	BASEPRI, r1
 800f346:	f3bf 8f6f 	isb	sy
}
 800f34a:	4770      	bx	lr
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 800f34c:	685a      	ldr	r2, [r3, #4]
 800f34e:	0790      	lsls	r0, r2, #30
 800f350:	d4f5      	bmi.n	800f33e <random_byte_get+0x3a>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800f352:	685a      	ldr	r2, [r3, #4]
 800f354:	0652      	lsls	r2, r2, #25
 800f356:	d4f2      	bmi.n	800f33e <random_byte_get+0x3a>
  return (uint32_t)(READ_REG(RNGx->DR));
 800f358:	6898      	ldr	r0, [r3, #8]
		if (retval == 0) {
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d0e2      	beq.n	800f324 <random_byte_get+0x20>
		retval &= 0xFF;
 800f35e:	b2c0      	uxtb	r0, r0
 800f360:	e7ef      	b.n	800f342 <random_byte_get+0x3e>
 800f362:	bf00      	nop
 800f364:	24000f80 	.word	0x24000f80

0800f368 <entropy_stm32_rng_get_entropy_isr>:
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 800f368:	07d8      	lsls	r0, r3, #31
{
 800f36a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f36e:	460f      	mov	r7, r1
 800f370:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 800f372:	d404      	bmi.n	800f37e <entropy_stm32_rng_get_entropy_isr+0x16>
		return rng_pool_get(
 800f374:	4825      	ldr	r0, [pc, #148]	; (800f40c <entropy_stm32_rng_get_entropy_isr+0xa4>)
 800f376:	f7ff fef9 	bl	800f16c <rng_pool_get>
}
 800f37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
 800f37e:	2a00      	cmp	r2, #0
 800f380:	d03b      	beq.n	800f3fa <entropy_stm32_rng_get_entropy_isr+0x92>
	__asm__ volatile(
 800f382:	f04f 0310 	mov.w	r3, #16
 800f386:	f3ef 8511 	mrs	r5, BASEPRI
 800f38a:	f383 8812 	msr	BASEPRI_MAX, r3
 800f38e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 800f392:	2050      	movs	r0, #80	; 0x50
 800f394:	f7f4 fb1c 	bl	80039d0 <arch_irq_is_enabled>
 800f398:	4606      	mov	r6, r0
		irq_disable(IRQN);
 800f39a:	2050      	movs	r0, #80	; 0x50
 800f39c:	f7f4 fb04 	bl	80039a8 <arch_irq_disable>
	__asm__ volatile(
 800f3a0:	f385 8811 	msr	BASEPRI, r5
 800f3a4:	f3bf 8f6f 	isb	sy
	if (LL_RNG_IsActiveFlag_SECS(entropy_stm32_rng_data.rng) ||
 800f3a8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800f410 <entropy_stm32_rng_get_entropy_isr+0xa8>
 800f3ac:	f8d8 3000 	ldr.w	r3, [r8]
  return ((READ_BIT(RNGx->SR, RNG_SR_SECS) == (RNG_SR_SECS)) ? 1UL : 0UL);
 800f3b0:	685a      	ldr	r2, [r3, #4]
 800f3b2:	0751      	lsls	r1, r2, #29
 800f3b4:	d41a      	bmi.n	800f3ec <entropy_stm32_rng_get_entropy_isr+0x84>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	065a      	lsls	r2, r3, #25
 800f3ba:	d417      	bmi.n	800f3ec <entropy_stm32_rng_get_entropy_isr+0x84>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f3bc:	f8df 9054 	ldr.w	r9, [pc, #84]	; 800f414 <entropy_stm32_rng_get_entropy_isr+0xac>
 800f3c0:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
}
 800f3c4:	4625      	mov	r5, r4
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f3c6:	f8c9 a188 	str.w	sl, [r9, #392]	; 0x188
		while (LL_RNG_IsActiveFlag_DRDY(
 800f3ca:	f8d8 3000 	ldr.w	r3, [r8]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	07db      	lsls	r3, r3, #31
 800f3d2:	d514      	bpl.n	800f3fe <entropy_stm32_rng_get_entropy_isr+0x96>
		byte = random_byte_get();
 800f3d4:	f7ff ff96 	bl	800f304 <random_byte_get>
		if (byte < 0) {
 800f3d8:	1e03      	subs	r3, r0, #0
 800f3da:	f8c9 a188 	str.w	sl, [r9, #392]	; 0x188
 800f3de:	dbf4      	blt.n	800f3ca <entropy_stm32_rng_get_entropy_isr+0x62>
		buf[--remaining_len] = byte;
 800f3e0:	3d01      	subs	r5, #1
 800f3e2:	b2ad      	uxth	r5, r5
 800f3e4:	557b      	strb	r3, [r7, r5]
	} while (remaining_len);
 800f3e6:	2d00      	cmp	r5, #0
 800f3e8:	d1ef      	bne.n	800f3ca <entropy_stm32_rng_get_entropy_isr+0x62>
 800f3ea:	e002      	b.n	800f3f2 <entropy_stm32_rng_get_entropy_isr+0x8a>
		return 0; /* return cnt is null : no random data available */
 800f3ec:	2400      	movs	r4, #0
		(void)random_byte_get(); /* this will recover the error */
 800f3ee:	f7ff ff89 	bl	800f304 <random_byte_get>
		if (irq_enabled) {
 800f3f2:	b116      	cbz	r6, 800f3fa <entropy_stm32_rng_get_entropy_isr+0x92>
			irq_enable(IRQN);
 800f3f4:	2050      	movs	r0, #80	; 0x50
 800f3f6:	f7f4 fac7 	bl	8003988 <arch_irq_enable>
	return cnt;
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	e7bd      	b.n	800f37a <entropy_stm32_rng_get_entropy_isr+0x12>
  __ASM volatile ("dsb 0xF":::"memory");
 800f3fe:	f3bf 8f4f 	dsb	sy
			__WFE();
 800f402:	bf20      	wfe
			__SEV();
 800f404:	bf40      	sev
			__WFE();
 800f406:	bf20      	wfe
 800f408:	e7df      	b.n	800f3ca <entropy_stm32_rng_get_entropy_isr+0x62>
 800f40a:	bf00      	nop
 800f40c:	24000fc9 	.word	0x24000fc9
 800f410:	24000f80 	.word	0x24000f80
 800f414:	e000e100 	.word	0xe000e100

0800f418 <stm32_rng_isr>:
{
 800f418:	b510      	push	{r4, lr}
	byte = random_byte_get();
 800f41a:	f7ff ff73 	bl	800f304 <random_byte_get>
	if (byte < 0) {
 800f41e:	2800      	cmp	r0, #0
 800f420:	db23      	blt.n	800f46a <stm32_rng_isr+0x52>
	uint8_t last  = rngp->last;
 800f422:	4c18      	ldr	r4, [pc, #96]	; (800f484 <stm32_rng_isr+0x6c>)
	ret = rng_pool_put((struct rng_pool *)(entropy_stm32_rng_data.isr),
 800f424:	b2c0      	uxtb	r0, r0
	uint8_t last  = rngp->last;
 800f426:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
	if (((last - first) & mask) == mask) {
 800f42a:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
	uint8_t mask  = rngp->mask;
 800f42e:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
	if (((last - first) & mask) == mask) {
 800f432:	1a9a      	subs	r2, r3, r2
 800f434:	ea31 0202 	bics.w	r2, r1, r2
 800f438:	d110      	bne.n	800f45c <stm32_rng_isr+0x44>
	uint8_t last  = rngp->last;
 800f43a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
	if (((last - first) & mask) == mask) {
 800f43e:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
	uint8_t mask  = rngp->mask;
 800f442:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
	if (((last - first) & mask) == mask) {
 800f446:	1a9a      	subs	r2, r3, r2
 800f448:	ea31 0202 	bics.w	r2, r1, r2
 800f44c:	d10e      	bne.n	800f46c <stm32_rng_isr+0x54>
			irq_disable(IRQN);
 800f44e:	2050      	movs	r0, #80	; 0x50
 800f450:	f7f4 faaa 	bl	80039a8 <arch_irq_disable>
			entropy_stm32_rng_data.filling_pools = false;
 800f454:	2300      	movs	r3, #0
 800f456:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 800f45a:	e00e      	b.n	800f47a <stm32_rng_isr+0x62>
	rngp->buffer[last] = byte;
 800f45c:	18e2      	adds	r2, r4, r3
	rngp->last = (last + 1) & mask;
 800f45e:	3301      	adds	r3, #1
 800f460:	400b      	ands	r3, r1
	rngp->buffer[last] = byte;
 800f462:	f882 004e 	strb.w	r0, [r2, #78]	; 0x4e
	rngp->last = (last + 1) & mask;
 800f466:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
}
 800f46a:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
 800f46c:	18e2      	adds	r2, r4, r3
	rngp->last = (last + 1) & mask;
 800f46e:	3301      	adds	r3, #1
 800f470:	400b      	ands	r3, r1
	rngp->buffer[last] = byte;
 800f472:	f882 0063 	strb.w	r0, [r2, #99]	; 0x63
	rngp->last = (last + 1) & mask;
 800f476:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	z_impl_k_sem_give(sem);
 800f47a:	4803      	ldr	r0, [pc, #12]	; (800f488 <stm32_rng_isr+0x70>)
}
 800f47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f480:	f002 bdbe 	b.w	8012000 <z_impl_k_sem_give>
 800f484:	24000f80 	.word	0x24000f80
 800f488:	24000fa0 	.word	0x24000fa0

0800f48c <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800f48c:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 800f48e:	6903      	ldr	r3, [r0, #16]
{
 800f490:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 800f492:	6058      	str	r0, [r3, #4]
 800f494:	4d08      	ldr	r5, [pc, #32]	; (800f4b8 <gpio_stm32_init+0x2c>)
 800f496:	4628      	mov	r0, r5
 800f498:	f00c f895 	bl	801b5c6 <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 800f49c:	b140      	cbz	r0, 800f4b0 <gpio_stm32_init+0x24>
					(clock_control_subsys_t)&cfg->pclken);
 800f49e:	6861      	ldr	r1, [r4, #4]
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	68ab      	ldr	r3, [r5, #8]
 800f4a4:	310c      	adds	r1, #12
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4798      	blx	r3
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 800f4aa:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 800f4ae:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 800f4b0:	f06f 0012 	mvn.w	r0, #18
 800f4b4:	e7fb      	b.n	800f4ae <gpio_stm32_init+0x22>
 800f4b6:	bf00      	nop
 800f4b8:	0801c24c 	.word	0x0801c24c

0800f4bc <gpio_stm32_pin_interrupt_configure>:
{
 800f4bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4be:	460c      	mov	r4, r1
 800f4c0:	4611      	mov	r1, r2
 800f4c2:	461e      	mov	r6, r3
	const struct gpio_stm32_config *cfg = dev->config;
 800f4c4:	6847      	ldr	r7, [r0, #4]
	if (mode == GPIO_INT_MODE_DISABLED) {
 800f4c6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
	struct gpio_stm32_data *data = dev->data;
 800f4ca:	6902      	ldr	r2, [r0, #16]
	if (mode == GPIO_INT_MODE_DISABLED) {
 800f4cc:	d127      	bne.n	800f51e <gpio_stm32_pin_interrupt_configure+0x62>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800f4ce:	f004 0203 	and.w	r2, r4, #3
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U)) >> (POSITION_VAL(Line >> 16U) & 31U));
 800f4d2:	493b      	ldr	r1, [pc, #236]	; (800f5c0 <gpio_stm32_pin_interrupt_configure+0x104>)
 800f4d4:	3204      	adds	r2, #4
 800f4d6:	0093      	lsls	r3, r2, #2
 800f4d8:	220f      	movs	r2, #15
 800f4da:	409a      	lsls	r2, r3
 800f4dc:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
 800f4e0:	f002 0303 	and.w	r3, r2, #3
 800f4e4:	3302      	adds	r3, #2
 800f4e6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f4ea:	0c13      	lsrs	r3, r2, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f4ec:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800f4f0:	fab3 f383 	clz	r3, r3
 800f4f4:	ea01 4212 	and.w	r2, r1, r2, lsr #16
 800f4f8:	f003 031f 	and.w	r3, r3, #31
 800f4fc:	fa22 f303 	lsr.w	r3, r2, r3
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 800f500:	68ba      	ldr	r2, [r7, #8]
 800f502:	429a      	cmp	r2, r3
 800f504:	d109      	bne.n	800f51a <gpio_stm32_pin_interrupt_configure+0x5e>
			stm32_exti_disable(pin);
 800f506:	4620      	mov	r0, r4
 800f508:	f00b f82e 	bl	801a568 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800f50c:	4620      	mov	r0, r4
 800f50e:	f7ff fc41 	bl	800ed94 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800f512:	2100      	movs	r1, #0
 800f514:	4620      	mov	r0, r4
 800f516:	f00b f835 	bl	801a584 <stm32_exti_trigger>
	int err = 0;
 800f51a:	2500      	movs	r5, #0
 800f51c:	e043      	b.n	800f5a6 <gpio_stm32_pin_interrupt_configure+0xea>
	if (mode == GPIO_INT_MODE_LEVEL) {
 800f51e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800f522:	d047      	beq.n	800f5b4 <gpio_stm32_pin_interrupt_configure+0xf8>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800f524:	4927      	ldr	r1, [pc, #156]	; (800f5c4 <gpio_stm32_pin_interrupt_configure+0x108>)
 800f526:	4620      	mov	r0, r4
 800f528:	f7ff fc1a 	bl	800ed60 <stm32_exti_set_callback>
 800f52c:	4605      	mov	r5, r0
 800f52e:	2800      	cmp	r0, #0
 800f530:	d143      	bne.n	800f5ba <gpio_stm32_pin_interrupt_configure+0xfe>
	struct stm32_pclken pclken = {
 800f532:	4a25      	ldr	r2, [pc, #148]	; (800f5c8 <gpio_stm32_pin_interrupt_configure+0x10c>)
 800f534:	466b      	mov	r3, sp
	gpio_stm32_enable_int(cfg->port, pin);
 800f536:	68bf      	ldr	r7, [r7, #8]
	struct stm32_pclken pclken = {
 800f538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f53c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f540:	4822      	ldr	r0, [pc, #136]	; (800f5cc <gpio_stm32_pin_interrupt_configure+0x110>)
 800f542:	4619      	mov	r1, r3
 800f544:	6882      	ldr	r2, [r0, #8]
 800f546:	6812      	ldr	r2, [r2, #0]
 800f548:	4790      	blx	r2
	if (ret != 0) {
 800f54a:	b9d8      	cbnz	r0, 800f584 <gpio_stm32_pin_interrupt_configure+0xc8>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800f54c:	f004 0303 	and.w	r3, r4, #3
 800f550:	3304      	adds	r3, #4
 800f552:	009a      	lsls	r2, r3, #2
 800f554:	230f      	movs	r3, #15
 800f556:	4093      	lsls	r3, r2
 800f558:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << ((POSITION_VAL(Line >> 16U)) & 31U));
 800f55c:	f003 0203 	and.w	r2, r3, #3
 800f560:	0c19      	lsrs	r1, r3, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f562:	fa91 f1a1 	rbit	r1, r1
 800f566:	0092      	lsls	r2, r2, #2
  return __builtin_clz(value);
 800f568:	fab1 f181 	clz	r1, r1
 800f56c:	f102 42b0 	add.w	r2, r2, #1476395008	; 0x58000000
 800f570:	f001 011f 	and.w	r1, r1, #31
 800f574:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800f578:	408f      	lsls	r7, r1
 800f57a:	ea20 4313 	bic.w	r3, r0, r3, lsr #16
 800f57e:	431f      	orrs	r7, r3
 800f580:	f8c2 7408 	str.w	r7, [r2, #1032]	; 0x408
	switch (trig) {
 800f584:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
 800f588:	d010      	beq.n	800f5ac <gpio_stm32_pin_interrupt_configure+0xf0>
 800f58a:	f1b6 6fc0 	cmp.w	r6, #100663296	; 0x6000000
 800f58e:	d00f      	beq.n	800f5b0 <gpio_stm32_pin_interrupt_configure+0xf4>
 800f590:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800f594:	bf14      	ite	ne
 800f596:	2100      	movne	r1, #0
 800f598:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 800f59a:	4620      	mov	r0, r4
 800f59c:	f00a fff2 	bl	801a584 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	f7ff fbc9 	bl	800ed38 <stm32_exti_enable>
}
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	b003      	add	sp, #12
 800f5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 800f5ac:	2101      	movs	r1, #1
 800f5ae:	e7f4      	b.n	800f59a <gpio_stm32_pin_interrupt_configure+0xde>
		edge = STM32_EXTI_TRIG_BOTH;
 800f5b0:	2103      	movs	r1, #3
 800f5b2:	e7f2      	b.n	800f59a <gpio_stm32_pin_interrupt_configure+0xde>
		err = -ENOTSUP;
 800f5b4:	f06f 0585 	mvn.w	r5, #133	; 0x85
 800f5b8:	e7f5      	b.n	800f5a6 <gpio_stm32_pin_interrupt_configure+0xea>
		err = -EBUSY;
 800f5ba:	f06f 050f 	mvn.w	r5, #15
	return err;
 800f5be:	e7f2      	b.n	800f5a6 <gpio_stm32_pin_interrupt_configure+0xea>
 800f5c0:	58000400 	.word	0x58000400
 800f5c4:	0801a809 	.word	0x0801a809
 800f5c8:	0801cae4 	.word	0x0801cae4
 800f5cc:	0801c24c 	.word	0x0801c24c

0800f5d0 <print_all_reset_causes>:
		return "unknown";
	}
}

static void print_all_reset_causes(const struct shell *sh, uint32_t cause)
{
 800f5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5d4:	4607      	mov	r7, r0
 800f5d6:	460d      	mov	r5, r1
 800f5d8:	2620      	movs	r6, #32
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
 800f5da:	2401      	movs	r4, #1
		if (cause & cause_mask) {
			shell_print(sh, "- %s",
 800f5dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f6a4 <print_all_reset_causes+0xd4>
		return "low power wake-up";
 800f5e0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800f6a8 <print_all_reset_causes+0xd8>
		return "clock";
 800f5e4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800f6ac <print_all_reset_causes+0xdc>
		if (cause & cause_mask) {
 800f5e8:	ea15 0204 	ands.w	r2, r5, r4
 800f5ec:	d013      	beq.n	800f616 <print_all_reset_causes+0x46>
	switch (cause) {
 800f5ee:	2a80      	cmp	r2, #128	; 0x80
 800f5f0:	d045      	beq.n	800f67e <print_all_reset_causes+0xae>
 800f5f2:	d820      	bhi.n	800f636 <print_all_reset_causes+0x66>
 800f5f4:	2a08      	cmp	r2, #8
 800f5f6:	d814      	bhi.n	800f622 <print_all_reset_causes+0x52>
 800f5f8:	3a01      	subs	r2, #1
 800f5fa:	2a07      	cmp	r2, #7
 800f5fc:	d83d      	bhi.n	800f67a <print_all_reset_causes+0xaa>
 800f5fe:	e8df f002 	tbb	[pc, r2]
 800f602:	0440      	.short	0x0440
 800f604:	3c3c383c 	.word	0x3c3c383c
 800f608:	3a3c      	.short	0x3a3c
 800f60a:	4b29      	ldr	r3, [pc, #164]	; (800f6b0 <print_all_reset_causes+0xe0>)
			shell_print(sh, "- %s",
 800f60c:	4652      	mov	r2, sl
 800f60e:	2108      	movs	r1, #8
 800f610:	4638      	mov	r0, r7
 800f612:	f004 faf3 	bl	8013bfc <shell_fprintf>
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
 800f616:	3e01      	subs	r6, #1
 800f618:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f61c:	d1e4      	bne.n	800f5e8 <print_all_reset_causes+0x18>
				    cause_to_string(cause & cause_mask));
		}
	}
}
 800f61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (cause) {
 800f622:	2a20      	cmp	r2, #32
 800f624:	d02f      	beq.n	800f686 <print_all_reset_causes+0xb6>
 800f626:	2a40      	cmp	r2, #64	; 0x40
 800f628:	d02f      	beq.n	800f68a <print_all_reset_causes+0xba>
		return "watchdog";
 800f62a:	4b22      	ldr	r3, [pc, #136]	; (800f6b4 <print_all_reset_causes+0xe4>)
 800f62c:	4922      	ldr	r1, [pc, #136]	; (800f6b8 <print_all_reset_causes+0xe8>)
 800f62e:	2a10      	cmp	r2, #16
 800f630:	bf08      	it	eq
 800f632:	460b      	moveq	r3, r1
 800f634:	e7ea      	b.n	800f60c <print_all_reset_causes+0x3c>
	switch (cause) {
 800f636:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800f63a:	d028      	beq.n	800f68e <print_all_reset_causes+0xbe>
 800f63c:	d80c      	bhi.n	800f658 <print_all_reset_causes+0x88>
 800f63e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800f642:	d026      	beq.n	800f692 <print_all_reset_causes+0xc2>
 800f644:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f648:	d025      	beq.n	800f696 <print_all_reset_causes+0xc6>
		return "CPU lockup";
 800f64a:	4b1a      	ldr	r3, [pc, #104]	; (800f6b4 <print_all_reset_causes+0xe4>)
 800f64c:	491b      	ldr	r1, [pc, #108]	; (800f6bc <print_all_reset_causes+0xec>)
 800f64e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f652:	bf08      	it	eq
 800f654:	460b      	moveq	r3, r1
 800f656:	e7d9      	b.n	800f60c <print_all_reset_causes+0x3c>
	switch (cause) {
 800f658:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f65c:	d01d      	beq.n	800f69a <print_all_reset_causes+0xca>
 800f65e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f662:	d01c      	beq.n	800f69e <print_all_reset_causes+0xce>
		return "hardware";
 800f664:	4b13      	ldr	r3, [pc, #76]	; (800f6b4 <print_all_reset_causes+0xe4>)
 800f666:	4916      	ldr	r1, [pc, #88]	; (800f6c0 <print_all_reset_causes+0xf0>)
 800f668:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800f66c:	bf08      	it	eq
 800f66e:	460b      	moveq	r3, r1
 800f670:	e7cc      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "brownout";
 800f672:	4b14      	ldr	r3, [pc, #80]	; (800f6c4 <print_all_reset_causes+0xf4>)
 800f674:	e7ca      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "power-on reset";
 800f676:	4b14      	ldr	r3, [pc, #80]	; (800f6c8 <print_all_reset_causes+0xf8>)
 800f678:	e7c8      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "unknown";
 800f67a:	4b0e      	ldr	r3, [pc, #56]	; (800f6b4 <print_all_reset_causes+0xe4>)
 800f67c:	e7c6      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "low power wake-up";
 800f67e:	4643      	mov	r3, r8
 800f680:	e7c4      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "pin";
 800f682:	4b12      	ldr	r3, [pc, #72]	; (800f6cc <print_all_reset_causes+0xfc>)
 800f684:	e7c2      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "debug";
 800f686:	4b12      	ldr	r3, [pc, #72]	; (800f6d0 <print_all_reset_causes+0x100>)
 800f688:	e7c0      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "security";
 800f68a:	4b12      	ldr	r3, [pc, #72]	; (800f6d4 <print_all_reset_causes+0x104>)
 800f68c:	e7be      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "clock";
 800f68e:	464b      	mov	r3, r9
 800f690:	e7bc      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "parity error";
 800f692:	4b11      	ldr	r3, [pc, #68]	; (800f6d8 <print_all_reset_causes+0x108>)
 800f694:	e7ba      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "PLL error";
 800f696:	4b11      	ldr	r3, [pc, #68]	; (800f6dc <print_all_reset_causes+0x10c>)
 800f698:	e7b8      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "user";
 800f69a:	4b11      	ldr	r3, [pc, #68]	; (800f6e0 <print_all_reset_causes+0x110>)
 800f69c:	e7b6      	b.n	800f60c <print_all_reset_causes+0x3c>
		return "temperature";
 800f69e:	4b11      	ldr	r3, [pc, #68]	; (800f6e4 <print_all_reset_causes+0x114>)
 800f6a0:	e7b4      	b.n	800f60c <print_all_reset_causes+0x3c>
 800f6a2:	bf00      	nop
 800f6a4:	08021796 	.word	0x08021796
 800f6a8:	0802173f 	.word	0x0802173f
 800f6ac:	08021524 	.word	0x08021524
 800f6b0:	08021730 	.word	0x08021730
 800f6b4:	08021703 	.word	0x08021703
 800f6b8:	08021768 	.word	0x08021768
 800f6bc:	0802177d 	.word	0x0802177d
 800f6c0:	0802178d 	.word	0x0802178d
 800f6c4:	0802170f 	.word	0x0802170f
 800f6c8:	08021718 	.word	0x08021718
 800f6cc:	0802170b 	.word	0x0802170b
 800f6d0:	08021739 	.word	0x08021739
 800f6d4:	08021727 	.word	0x08021727
 800f6d8:	0802175b 	.word	0x0802175b
 800f6dc:	08021751 	.word	0x08021751
 800f6e0:	08021788 	.word	0x08021788
 800f6e4:	08021771 	.word	0x08021771

0800f6e8 <cmd_show_reset_cause>:

static int cmd_show_reset_cause(const struct shell *sh, size_t argc,
				char **argv)
{
 800f6e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6ea:	4604      	mov	r4, r0
		union { uintptr_t x; uint32_t * val; } parm0 = { .val = cause };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_HWINFO_GET_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_reset_cause(cause);
 800f6ec:	a801      	add	r0, sp, #4
 800f6ee:	f000 f8e3 	bl	800f8b8 <z_impl_hwinfo_get_reset_cause>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_reset_cause(&cause);
	if (res == -ENOTSUP) {
 800f6f2:	f110 0f86 	cmn.w	r0, #134	; 0x86
 800f6f6:	4605      	mov	r5, r0
 800f6f8:	d105      	bne.n	800f706 <cmd_show_reset_cause+0x1e>
		shell_error(sh, "Not supported by hardware");
 800f6fa:	4a0f      	ldr	r2, [pc, #60]	; (800f738 <cmd_show_reset_cause+0x50>)
 800f6fc:	2101      	movs	r1, #1

	if (cause != 0) {
		shell_print(sh, "reset caused by:");
		print_all_reset_causes(sh, cause);
	} else {
		shell_print(sh, "No reset cause set");
 800f6fe:	4620      	mov	r0, r4
 800f700:	f004 fa7c 	bl	8013bfc <shell_fprintf>
 800f704:	e006      	b.n	800f714 <cmd_show_reset_cause+0x2c>
	} else if (res != 0) {
 800f706:	b140      	cbz	r0, 800f71a <cmd_show_reset_cause+0x32>
		shell_error(sh, "Error reading the cause [%d]", res);
 800f708:	4603      	mov	r3, r0
 800f70a:	4a0c      	ldr	r2, [pc, #48]	; (800f73c <cmd_show_reset_cause+0x54>)
 800f70c:	2101      	movs	r1, #1
 800f70e:	4620      	mov	r0, r4
 800f710:	f004 fa74 	bl	8013bfc <shell_fprintf>
	}

	return 0;
}
 800f714:	4628      	mov	r0, r5
 800f716:	b003      	add	sp, #12
 800f718:	bd30      	pop	{r4, r5, pc}
	if (cause != 0) {
 800f71a:	9b01      	ldr	r3, [sp, #4]
 800f71c:	b14b      	cbz	r3, 800f732 <cmd_show_reset_cause+0x4a>
		shell_print(sh, "reset caused by:");
 800f71e:	4620      	mov	r0, r4
 800f720:	4a07      	ldr	r2, [pc, #28]	; (800f740 <cmd_show_reset_cause+0x58>)
 800f722:	2108      	movs	r1, #8
 800f724:	f004 fa6a 	bl	8013bfc <shell_fprintf>
		print_all_reset_causes(sh, cause);
 800f728:	9901      	ldr	r1, [sp, #4]
 800f72a:	4620      	mov	r0, r4
 800f72c:	f7ff ff50 	bl	800f5d0 <print_all_reset_causes>
 800f730:	e7f0      	b.n	800f714 <cmd_show_reset_cause+0x2c>
		shell_print(sh, "No reset cause set");
 800f732:	4a04      	ldr	r2, [pc, #16]	; (800f744 <cmd_show_reset_cause+0x5c>)
 800f734:	2108      	movs	r1, #8
 800f736:	e7e2      	b.n	800f6fe <cmd_show_reset_cause+0x16>
 800f738:	0802179c 	.word	0x0802179c
 800f73c:	080217b7 	.word	0x080217b7
 800f740:	080217d5 	.word	0x080217d5
 800f744:	080217e7 	.word	0x080217e7

0800f748 <cmd_supported_reset_cause>:
	return 0;
}

static int cmd_supported_reset_cause(const struct shell *sh, size_t argc,
				     char **argv)
{
 800f748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f74a:	4605      	mov	r5, r0
		union { uintptr_t x; uint32_t * val; } parm0 = { .val = supported };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_HWINFO_GET_SUPPORTED_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_supported_reset_cause(supported);
 800f74c:	a801      	add	r0, sp, #4
 800f74e:	f00b f886 	bl	801a85e <z_impl_hwinfo_get_supported_reset_cause>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_supported_reset_cause(&cause);
	if (res == -ENOTSUP) {
 800f752:	f110 0f86 	cmn.w	r0, #134	; 0x86
 800f756:	4604      	mov	r4, r0
 800f758:	d111      	bne.n	800f77e <cmd_supported_reset_cause+0x36>
		shell_error(sh, "Not supported by hardware");
 800f75a:	4a11      	ldr	r2, [pc, #68]	; (800f7a0 <cmd_supported_reset_cause+0x58>)
 800f75c:	2101      	movs	r1, #1
 800f75e:	4628      	mov	r0, r5
 800f760:	f004 fa4c 	bl	8013bfc <shell_fprintf>
	} else if (res != 0) {
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
		return res;
	}

	if (cause != 0) {
 800f764:	9c01      	ldr	r4, [sp, #4]
 800f766:	b1ac      	cbz	r4, 800f794 <cmd_supported_reset_cause+0x4c>
		shell_print(sh, "supported reset causes:");
 800f768:	4a0e      	ldr	r2, [pc, #56]	; (800f7a4 <cmd_supported_reset_cause+0x5c>)
 800f76a:	2108      	movs	r1, #8
 800f76c:	4628      	mov	r0, r5
		print_all_reset_causes(sh, cause);
	} else {
		shell_print(sh, "No causes supported");
	}

	return 0;
 800f76e:	2400      	movs	r4, #0
		shell_print(sh, "supported reset causes:");
 800f770:	f004 fa44 	bl	8013bfc <shell_fprintf>
		print_all_reset_causes(sh, cause);
 800f774:	9901      	ldr	r1, [sp, #4]
 800f776:	4628      	mov	r0, r5
 800f778:	f7ff ff2a 	bl	800f5d0 <print_all_reset_causes>
 800f77c:	e007      	b.n	800f78e <cmd_supported_reset_cause+0x46>
	} else if (res != 0) {
 800f77e:	2800      	cmp	r0, #0
 800f780:	d0f0      	beq.n	800f764 <cmd_supported_reset_cause+0x1c>
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
 800f782:	4603      	mov	r3, r0
 800f784:	4a08      	ldr	r2, [pc, #32]	; (800f7a8 <cmd_supported_reset_cause+0x60>)
 800f786:	2101      	movs	r1, #1
 800f788:	4628      	mov	r0, r5
 800f78a:	f004 fa37 	bl	8013bfc <shell_fprintf>
}
 800f78e:	4620      	mov	r0, r4
 800f790:	b003      	add	sp, #12
 800f792:	bd30      	pop	{r4, r5, pc}
		shell_print(sh, "No causes supported");
 800f794:	4a05      	ldr	r2, [pc, #20]	; (800f7ac <cmd_supported_reset_cause+0x64>)
 800f796:	2108      	movs	r1, #8
 800f798:	4628      	mov	r0, r5
 800f79a:	f004 fa2f 	bl	8013bfc <shell_fprintf>
 800f79e:	e7f6      	b.n	800f78e <cmd_supported_reset_cause+0x46>
 800f7a0:	0802179c 	.word	0x0802179c
 800f7a4:	0802182a 	.word	0x0802182a
 800f7a8:	080217fb 	.word	0x080217fb
 800f7ac:	08021843 	.word	0x08021843

0800f7b0 <cmd_clear_reset_cause>:
{
 800f7b0:	b538      	push	{r3, r4, r5, lr}
 800f7b2:	4605      	mov	r5, r0
	return z_impl_hwinfo_clear_reset_cause();
 800f7b4:	f000 f8b4 	bl	800f920 <z_impl_hwinfo_clear_reset_cause>
	if (res == -ENOTSUP) {
 800f7b8:	f110 0f86 	cmn.w	r0, #134	; 0x86
 800f7bc:	4604      	mov	r4, r0
 800f7be:	d107      	bne.n	800f7d0 <cmd_clear_reset_cause+0x20>
		shell_error(sh, "Not supported by hardware");
 800f7c0:	2400      	movs	r4, #0
 800f7c2:	4a08      	ldr	r2, [pc, #32]	; (800f7e4 <cmd_clear_reset_cause+0x34>)
 800f7c4:	2101      	movs	r1, #1
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	f004 fa18 	bl	8013bfc <shell_fprintf>
}
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	bd38      	pop	{r3, r4, r5, pc}
	} else if (res != 0) {
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d0fb      	beq.n	800f7cc <cmd_clear_reset_cause+0x1c>
		shell_error(sh, "Error clearing the reset causes [%d]", res);
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	4a04      	ldr	r2, [pc, #16]	; (800f7e8 <cmd_clear_reset_cause+0x38>)
 800f7d8:	2101      	movs	r1, #1
 800f7da:	4628      	mov	r0, r5
 800f7dc:	f004 fa0e 	bl	8013bfc <shell_fprintf>
		return res;
 800f7e0:	e7f4      	b.n	800f7cc <cmd_clear_reset_cause+0x1c>
 800f7e2:	bf00      	nop
 800f7e4:	0802179c 	.word	0x0802179c
 800f7e8:	08021858 	.word	0x08021858

0800f7ec <cmd_get_device_id>:
{
 800f7ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f7f0:	4605      	mov	r5, r0
	return z_impl_hwinfo_get_device_id(buffer, length);
 800f7f2:	2110      	movs	r1, #16
 800f7f4:	4668      	mov	r0, sp
 800f7f6:	f000 f843 	bl	800f880 <z_impl_hwinfo_get_device_id>
	if (length == -ENOTSUP) {
 800f7fa:	f110 0f86 	cmn.w	r0, #134	; 0x86
 800f7fe:	4604      	mov	r4, r0
 800f800:	d108      	bne.n	800f814 <cmd_get_device_id+0x28>
		shell_error(sh, "Not supported by hardware");
 800f802:	4a19      	ldr	r2, [pc, #100]	; (800f868 <cmd_get_device_id+0x7c>)
 800f804:	2101      	movs	r1, #1
 800f806:	4628      	mov	r0, r5
 800f808:	f004 f9f8 	bl	8013bfc <shell_fprintf>
}
 800f80c:	4620      	mov	r0, r4
 800f80e:	b004      	add	sp, #16
 800f810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (length < 0) {
 800f814:	2800      	cmp	r0, #0
		shell_error(sh, "Error: %zd", length);
 800f816:	4603      	mov	r3, r0
	} else if (length < 0) {
 800f818:	da05      	bge.n	800f826 <cmd_get_device_id+0x3a>
		shell_error(sh, "Error: %zd", length);
 800f81a:	4a14      	ldr	r2, [pc, #80]	; (800f86c <cmd_get_device_id+0x80>)
 800f81c:	2101      	movs	r1, #1
 800f81e:	4628      	mov	r0, r5
 800f820:	f004 f9ec 	bl	8013bfc <shell_fprintf>
		return length;
 800f824:	e7f2      	b.n	800f80c <cmd_get_device_id+0x20>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
 800f826:	4a12      	ldr	r2, [pc, #72]	; (800f870 <cmd_get_device_id+0x84>)
 800f828:	2108      	movs	r1, #8
 800f82a:	4628      	mov	r0, r5
 800f82c:	466e      	mov	r6, sp
	for (i = 0 ; i < length ; i++) {
 800f82e:	2700      	movs	r7, #0
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
 800f830:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800f874 <cmd_get_device_id+0x88>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
 800f834:	f004 f9e2 	bl	8013bfc <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "ID: 0x");
 800f838:	4a0f      	ldr	r2, [pc, #60]	; (800f878 <cmd_get_device_id+0x8c>)
 800f83a:	2108      	movs	r1, #8
 800f83c:	4628      	mov	r0, r5
 800f83e:	f004 f9dd 	bl	8013bfc <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
 800f842:	42a7      	cmp	r7, r4
 800f844:	d106      	bne.n	800f854 <cmd_get_device_id+0x68>
	shell_fprintf(sh, SHELL_NORMAL, "\n");
 800f846:	4a0d      	ldr	r2, [pc, #52]	; (800f87c <cmd_get_device_id+0x90>)
 800f848:	2108      	movs	r1, #8
 800f84a:	4628      	mov	r0, r5
	return 0;
 800f84c:	2400      	movs	r4, #0
	shell_fprintf(sh, SHELL_NORMAL, "\n");
 800f84e:	f004 f9d5 	bl	8013bfc <shell_fprintf>
	return 0;
 800f852:	e7db      	b.n	800f80c <cmd_get_device_id+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
 800f854:	f816 3b01 	ldrb.w	r3, [r6], #1
 800f858:	4642      	mov	r2, r8
 800f85a:	2108      	movs	r1, #8
 800f85c:	4628      	mov	r0, r5
	for (i = 0 ; i < length ; i++) {
 800f85e:	3701      	adds	r7, #1
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
 800f860:	f004 f9cc 	bl	8013bfc <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
 800f864:	e7ed      	b.n	800f842 <cmd_get_device_id+0x56>
 800f866:	bf00      	nop
 800f868:	0802179c 	.word	0x0802179c
 800f86c:	0802187e 	.word	0x0802187e
 800f870:	0802188a 	.word	0x0802188a
 800f874:	0802189e 	.word	0x0802189e
 800f878:	08021897 	.word	0x08021897
 800f87c:	0801dcfa 	.word	0x0801dcfa

0800f880 <z_impl_hwinfo_get_device_id>:
struct stm32_uid {
	uint32_t id[3];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
 800f880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f882:	4b0c      	ldr	r3, [pc, #48]	; (800f8b4 <z_impl_hwinfo_get_device_id+0x34>)
 800f884:	290c      	cmp	r1, #12
 800f886:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800f88a:	bf28      	it	cs
 800f88c:	210c      	movcs	r1, #12
 800f88e:	ba12      	rev	r2, r2
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 800f890:	460c      	mov	r4, r1

#if defined(CONFIG_SOC_SERIES_STM32H5X)
	LL_ICACHE_Disable();
#endif /* CONFIG_SOC_SERIES_STM32H5X */

	dev_id.id[0] = sys_cpu_to_be32(LL_GetUID_Word2());
 800f892:	9201      	str	r2, [sp, #4]
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 800f894:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800f898:	ba12      	rev	r2, r2
	dev_id.id[1] = sys_cpu_to_be32(LL_GetUID_Word1());
 800f89a:	9202      	str	r2, [sp, #8]

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
 800f89c:	460a      	mov	r2, r1
 800f89e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800f8a2:	a901      	add	r1, sp, #4
 800f8a4:	ba1b      	rev	r3, r3
	dev_id.id[2] = sys_cpu_to_be32(LL_GetUID_Word0());
 800f8a6:	9303      	str	r3, [sp, #12]
	memcpy(buffer, dev_id.id, length);
 800f8a8:	f005 f9e5 	bl	8014c76 <memcpy>

	return length;
}
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	b004      	add	sp, #16
 800f8b0:	bd10      	pop	{r4, pc}
 800f8b2:	bf00      	nop
 800f8b4:	1ff1e000 	.word	0x1ff1e000

0800f8b8 <z_impl_hwinfo_get_reset_cause>:
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
#if defined(DUAL_CORE)
  return ((READ_BIT(RCC->RSR, RCC_RSR_SFT1RSTF) == (RCC_RSR_SFT1RSTF)) ? 1UL : 0UL);
#else
  return ((READ_BIT(RCC->RSR, RCC_RSR_SFTRSTF) == (RCC_RSR_SFTRSTF)) ? 1UL : 0UL);
 800f8b8:	4a17      	ldr	r2, [pc, #92]	; (800f918 <z_impl_hwinfo_get_reset_cause+0x60>)
 800f8ba:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
  * @rmtoll RSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->RSR, RCC_RSR_PINRSTF) == (RCC_RSR_PINRSTF)) ? 1UL : 0UL);
 800f8be:	f8d2 10d0 	ldr.w	r1, [r2, #208]	; 0xd0
{
	uint32_t flags = 0;

#if defined(RCC_FLAG_SFTRST)
	if (LL_RCC_IsActiveFlag_SFTRST()) {
		flags |= RESET_SOFTWARE;
 800f8c2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  return ((READ_BIT(RCC->RSR, RCC_RSR_IWDG1RSTF) == (RCC_RSR_IWDG1RSTF)) ? 1UL : 0UL);
 800f8c6:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
 800f8ca:	bf18      	it	ne
 800f8cc:	2302      	movne	r3, #2
  return ((READ_BIT(RCC->RSR, RCC_RSR_PINRSTF) == (RCC_RSR_PINRSTF)) ? 1UL : 0UL);
 800f8ce:	0249      	lsls	r1, r1, #9
	}
#endif
#if defined(RCC_FLAG_PINRST)
	if (LL_RCC_IsActiveFlag_PINRST()) {
		flags |= RESET_PIN;
 800f8d0:	bf48      	it	mi
 800f8d2:	f043 0301 	orrmi.w	r3, r3, #1
  return ((READ_BIT(RCC->RSR, RCC_RSR_IWDG1RSTF) == (RCC_RSR_IWDG1RSTF)) ? 1UL : 0UL);
 800f8d6:	0152      	lsls	r2, r2, #5
  return ((READ_BIT(RCC->RSR, RCC_RSR_WWDG1RSTF) == (RCC_RSR_WWDG1RSTF)) ? 1UL : 0UL);
 800f8d8:	4a0f      	ldr	r2, [pc, #60]	; (800f918 <z_impl_hwinfo_get_reset_cause+0x60>)
		flags |= RESET_WATCHDOG;
	}
#endif
#if defined(RCC_RSR_IWDG1RSTF)
	if (LL_RCC_IsActiveFlag_IWDG1RST()) {
		flags |= RESET_WATCHDOG;
 800f8da:	bf48      	it	mi
 800f8dc:	f043 0310 	orrmi.w	r3, r3, #16
 800f8e0:	f8d2 10d0 	ldr.w	r1, [r2, #208]	; 0xd0
 800f8e4:	00c9      	lsls	r1, r1, #3
  * @rmtoll RSR          BORRSTF       LL_RCC_IsActiveFlag_BORRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_BORRST(void)
{
  return ((READ_BIT(RCC->RSR, RCC_RSR_BORRSTF) == (RCC_RSR_BORRSTF)) ? 1UL : 0UL);
 800f8e6:	f8d2 10d0 	ldr.w	r1, [r2, #208]	; 0xd0
  return ((READ_BIT(RCC->RSR, RCC_RSR_PORRSTF) == (RCC_RSR_PORRSTF)) ? 1UL : 0UL);
 800f8ea:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
		flags |= RESET_WATCHDOG;
	}
#endif
#if defined(RCC_RSR_WWDG1RSTF)
	if (LL_RCC_IsActiveFlag_WWDG1RST()) {
		flags |= RESET_WATCHDOG;
 800f8ee:	bf48      	it	mi
 800f8f0:	f043 0310 	orrmi.w	r3, r3, #16
  return ((READ_BIT(RCC->RSR, RCC_RSR_BORRSTF) == (RCC_RSR_BORRSTF)) ? 1UL : 0UL);
 800f8f4:	0289      	lsls	r1, r1, #10
		flags |= RESET_SECURITY;
	}
#endif
#if defined(RCC_FLAG_BORRST)
	if (LL_RCC_IsActiveFlag_BORRST()) {
		flags |= RESET_BROWNOUT;
 800f8f6:	bf48      	it	mi
 800f8f8:	f043 0304 	orrmi.w	r3, r3, #4
  return ((READ_BIT(RCC->RSR, RCC_RSR_PORRSTF) == (RCC_RSR_PORRSTF)) ? 1UL : 0UL);
 800f8fc:	0211      	lsls	r1, r2, #8
  return ((READ_BIT(PWR->CPUCR, PWR_CPUCR_SBF) == (PWR_CPUCR_SBF)) ? 1UL : 0UL);
 800f8fe:	4a07      	ldr	r2, [pc, #28]	; (800f91c <z_impl_hwinfo_get_reset_cause+0x64>)
		flags |= RESET_POR;
	}
#endif
#if defined(RCC_FLAG_PORRST)
	if (LL_RCC_IsActiveFlag_PORRST()) {
		flags |= RESET_POR;
 800f900:	bf48      	it	mi
 800f902:	f043 0308 	orrmi.w	r3, r3, #8
 800f906:	6912      	ldr	r2, [r2, #16]
 800f908:	0652      	lsls	r2, r2, #25
	if (LL_PWR_CPU2_IsActiveFlag_SB()) {
		flags |= RESET_LOW_POWER_WAKE;
	}
#elif defined(CONFIG_SOC_SERIES_STM32H7X) && defined(CORE_CM7)
	if (LL_PWR_CPU_IsActiveFlag_SB()) {
		flags |= RESET_LOW_POWER_WAKE;
 800f90a:	bf48      	it	mi
 800f90c:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
	if (LL_PWR_IsActiveFlag_SB()) {
		flags |= RESET_LOW_POWER_WAKE;
	}
#endif /* PWR_FLAG_SB */

	*cause = flags;
 800f910:	6003      	str	r3, [r0, #0]

	return 0;
}
 800f912:	2000      	movs	r0, #0
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop
 800f918:	58024400 	.word	0x58024400
 800f91c:	58024800 	.word	0x58024800

0800f920 <z_impl_hwinfo_clear_reset_cause>:
  * @rmtoll RSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 800f920:	4a07      	ldr	r2, [pc, #28]	; (800f940 <z_impl_hwinfo_clear_reset_cause+0x20>)
#elif defined(PWR_FLAG_SB)
	LL_PWR_ClearFlag_SB();
#endif /* PWR_FLAG_SB */

	return 0;
}
 800f922:	2000      	movs	r0, #0
 800f924:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
 800f928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f92c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  * @rmtoll CPUCR   CSSF       LL_PWR_ClearFlag_CPU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_CPU(void)
{
  SET_BIT(PWR->CPUCR, PWR_CPUCR_CSSF);
 800f930:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
 800f934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f938:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop
 800f940:	58024400 	.word	0x58024400

0800f944 <allocate_tx_buffer>:
	}
}

/* allocate a tx buffer and mark it as used */
static inline uint16_t allocate_tx_buffer(void)
{
 800f944:	b510      	push	{r4, lr}
	for (;;) {
		for (uint16_t index = 0; index < ETH_TXBUFNB; index++) {
 800f946:	4a09      	ldr	r2, [pc, #36]	; (800f96c <allocate_tx_buffer+0x28>)
{
 800f948:	2300      	movs	r3, #0
 800f94a:	4611      	mov	r1, r2
			if (!dma_tx_buffer_header[index].used) {
 800f94c:	7b14      	ldrb	r4, [r2, #12]
 800f94e:	b298      	uxth	r0, r3
 800f950:	b134      	cbz	r4, 800f960 <allocate_tx_buffer+0x1c>
		for (uint16_t index = 0; index < ETH_TXBUFNB; index++) {
 800f952:	3301      	adds	r3, #1
 800f954:	3210      	adds	r2, #16
 800f956:	2b04      	cmp	r3, #4
 800f958:	d1f8      	bne.n	800f94c <allocate_tx_buffer+0x8>
	z_impl_k_yield();
 800f95a:	f002 ffad 	bl	80128b8 <z_impl_k_yield>
}
 800f95e:	e7f2      	b.n	800f946 <allocate_tx_buffer+0x2>
				dma_tx_buffer_header[index].used = true;
 800f960:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f964:	2201      	movs	r2, #1
 800f966:	731a      	strb	r2, [r3, #12]
				return index;
			}
		}
		k_yield();
	}
}
 800f968:	bd10      	pop	{r4, pc}
 800f96a:	bf00      	nop
 800f96c:	24002f5c 	.word	0x24002f5c

0800f970 <eth_iface_init>:
}

#endif /* CONFIG_ETH_STM32_MULTICAST_FILTER */

static void eth_iface_init(struct net_if *iface)
{
 800f970:	b5f0      	push	{r4, r5, r6, r7, lr}
	return iface->if_dev->dev;
 800f972:	6803      	ldr	r3, [r0, #0]
 800f974:	b089      	sub	sp, #36	; 0x24
 800f976:	4604      	mov	r4, r0
 800f978:	681e      	ldr	r6, [r3, #0]
	__ASSERT_NO_MSG(iface != NULL);

	dev = net_if_get_device(iface);
	__ASSERT_NO_MSG(dev != NULL);

	dev_data = dev->data;
 800f97a:	6935      	ldr	r5, [r6, #16]

	/* For VLAN, this value is only used to get the correct L2 driver.
	 * The iface pointer in context should contain the main interface
	 * if the VLANs are enabled.
	 */
	if (dev_data->iface == NULL) {
 800f97c:	682b      	ldr	r3, [r5, #0]
 800f97e:	bb73      	cbnz	r3, 800f9de <eth_iface_init+0x6e>
		dev_data->iface = iface;
		is_first_init = true;
 800f980:	2701      	movs	r7, #1
		dev_data->iface = iface;
 800f982:	6028      	str	r0, [r5, #0]
	return net_if_set_link_addr_locked(iface, addr, len, type);
 800f984:	2303      	movs	r3, #3
 800f986:	2206      	movs	r2, #6
 800f988:	1d29      	adds	r1, r5, #4
 800f98a:	4620      	mov	r0, r4
 800f98c:	f006 f881 	bl	8015a92 <net_if_set_link_addr_locked>
	/* Register Ethernet MAC Address with the upper layer */
	net_if_set_link_addr(iface, dev_data->mac_addr,
			     sizeof(dev_data->mac_addr),
			     NET_LINK_ETHERNET);

	ethernet_init(iface);
 800f990:	4620      	mov	r0, r4
 800f992:	f7f4 fdc1 	bl	8004518 <ethernet_init>

	net_if_carrier_off(iface);
 800f996:	4620      	mov	r0, r4
 800f998:	f006 fb66 	bl	8016068 <net_if_carrier_off>

	net_lldp_set_lldpdu(iface);

	if (is_first_init) {
 800f99c:	b30f      	cbz	r7, 800f9e2 <eth_iface_init+0x72>
		const struct eth_stm32_hal_dev_cfg *cfg = dev->config;
		/* Now that the iface is setup, we are safe to enable IRQs. */
		__ASSERT_NO_MSG(cfg->config_func != NULL);
		cfg->config_func();
 800f99e:	6873      	ldr	r3, [r6, #4]

		/* Start interruption-poll thread */
		k_thread_create(&dev_data->rx_thread, dev_data->rx_thread_stack,
 800f9a0:	f505 64ec 	add.w	r4, r5, #1888	; 0x760
		cfg->config_func();
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	4798      	blx	r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	f505 71a0 	add.w	r1, r5, #320	; 0x140
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	9600      	str	r6, [sp, #0]
 800f9b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	f06f 020d 	mvn.w	r2, #13
 800f9be:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800f9c2:	e9cd 2303 	strd	r2, r3, [sp, #12]
 800f9c6:	4b08      	ldr	r3, [pc, #32]	; (800f9e8 <eth_iface_init+0x78>)
 800f9c8:	f44f 62bc 	mov.w	r2, #1504	; 0x5e0
 800f9cc:	f002 f906 	bl	8011bdc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 800f9d0:	4906      	ldr	r1, [pc, #24]	; (800f9ec <eth_iface_init+0x7c>)
 800f9d2:	4620      	mov	r0, r4
				K_PRIO_COOP(CONFIG_ETH_STM32_HAL_RX_THREAD_PRIO),
				0, K_NO_WAIT);

		k_thread_name_set(&dev_data->rx_thread, "stm_eth");
	}
}
 800f9d4:	b009      	add	sp, #36	; 0x24
 800f9d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f9da:	f002 b83b 	b.w	8011a54 <z_impl_k_thread_name_set>
	bool is_first_init = false;
 800f9de:	2700      	movs	r7, #0
 800f9e0:	e7d0      	b.n	800f984 <eth_iface_init+0x14>
}
 800f9e2:	b009      	add	sp, #36	; 0x24
 800f9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	0800f9f1 	.word	0x0800f9f1
 800f9ec:	08021962 	.word	0x08021962

0800f9f0 <rx_thread>:
{
 800f9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f4:	4680      	mov	r8, r0
 800f9f6:	b085      	sub	sp, #20
	dev_data = dev->data;
 800f9f8:	6904      	ldr	r4, [r0, #16]
					   total_len, AF_UNSPEC, 0, K_MSEC(100));
 800f9fa:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800f9fe:	2700      	movs	r7, #0
	return z_impl_k_sem_take(sem, timeout);
 800fa00:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa04:	2300      	movs	r3, #0
 800fa06:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 800fa0a:	f002 fb1f 	bl	801204c <z_impl_k_sem_take>
		if (res == 0) {
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d151      	bne.n	800fab6 <rx_thread+0xc6>
			if (dev_data->link_up != true) {
 800fa12:	f894 3818 	ldrb.w	r3, [r4, #2072]	; 0x818
 800fa16:	b92b      	cbnz	r3, 800fa24 <rx_thread+0x34>
				dev_data->link_up = true;
 800fa18:	2301      	movs	r3, #1
				net_eth_carrier_on(get_iface(dev_data,
 800fa1a:	6820      	ldr	r0, [r4, #0]
				dev_data->link_up = true;
 800fa1c:	f884 3818 	strb.w	r3, [r4, #2072]	; 0x818
				net_eth_carrier_on(get_iface(dev_data,
 800fa20:	f005 fc1b 	bl	801525a <net_eth_carrier_on>
		const size_t index = rx_header - &dma_rx_buffer_header[0];
 800fa24:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800fafc <rx_thread+0x10c>
			while ((pkt = eth_rx(dev, &vlan_tag)) != NULL) {
 800fa28:	f8d8 5010 	ldr.w	r5, [r8, #16]
	void *appbuf = NULL;
 800fa2c:	2300      	movs	r3, #0
	if (HAL_ETH_ReadData(heth, &appbuf) != HAL_OK) {
 800fa2e:	a903      	add	r1, sp, #12
 800fa30:	f105 000c 	add.w	r0, r5, #12
	void *appbuf = NULL;
 800fa34:	9303      	str	r3, [sp, #12]
	if (HAL_ETH_ReadData(heth, &appbuf) != HAL_OK) {
 800fa36:	f00b fa65 	bl	801af04 <HAL_ETH_ReadData>
 800fa3a:	4601      	mov	r1, r0
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d1df      	bne.n	800fa00 <rx_thread+0x10>
	for (rx_header = (struct eth_stm32_rx_buffer_header *)appbuf;
 800fa40:	9b03      	ldr	r3, [sp, #12]
 800fa42:	bb73      	cbnz	r3, 800faa2 <rx_thread+0xb2>
	return ctx->iface;
 800fa44:	6828      	ldr	r0, [r5, #0]
	pkt = net_pkt_rx_alloc_with_buffer(get_iface(dev_data, *vlan_tag),
 800fa46:	461a      	mov	r2, r3
 800fa48:	e9cd 6700 	strd	r6, r7, [sp]
 800fa4c:	f7f7 fb9e 	bl	800718c <net_pkt_rx_alloc_with_buffer>
	if (!pkt) {
 800fa50:	4605      	mov	r5, r0
 800fa52:	b1b8      	cbz	r0, 800fa84 <rx_thread+0x94>
	for (rx_header = (struct eth_stm32_rx_buffer_header *)appbuf;
 800fa54:	f8dd a00c 	ldr.w	sl, [sp, #12]
		if (net_pkt_write(pkt, dma_rx_buffer[index], rx_header->size)) {
 800fa58:	f44f 6bbf 	mov.w	fp, #1528	; 0x5f8
 800fa5c:	4b28      	ldr	r3, [pc, #160]	; (800fb00 <rx_thread+0x110>)
	for (rx_header = (struct eth_stm32_rx_buffer_header *)appbuf;
 800fa5e:	f1ba 0f00 	cmp.w	sl, #0
 800fa62:	d00f      	beq.n	800fa84 <rx_thread+0x94>
		const size_t index = rx_header - &dma_rx_buffer_header[0];
 800fa64:	ebaa 0109 	sub.w	r1, sl, r9
		if (net_pkt_write(pkt, dma_rx_buffer[index], rx_header->size)) {
 800fa68:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800fa6c:	4628      	mov	r0, r5
		const size_t index = rx_header - &dma_rx_buffer_header[0];
 800fa6e:	10c9      	asrs	r1, r1, #3
		if (net_pkt_write(pkt, dma_rx_buffer[index], rx_header->size)) {
 800fa70:	fb0b 3101 	mla	r1, fp, r1, r3
 800fa74:	f007 ff3d 	bl	80178f2 <net_pkt_write>
 800fa78:	4b21      	ldr	r3, [pc, #132]	; (800fb00 <rx_thread+0x110>)
 800fa7a:	b1b0      	cbz	r0, 800faaa <rx_thread+0xba>
			net_pkt_unref(pkt);
 800fa7c:	4628      	mov	r0, r5
			pkt = NULL;
 800fa7e:	2500      	movs	r5, #0
			net_pkt_unref(pkt);
 800fa80:	f007 fc2f 	bl	80172e2 <net_pkt_unref>
	for (rx_header = (struct eth_stm32_rx_buffer_header *)appbuf;
 800fa84:	9b03      	ldr	r3, [sp, #12]
		rx_header->used = false;
 800fa86:	2200      	movs	r2, #0
	for (rx_header = (struct eth_stm32_rx_buffer_header *)appbuf;
 800fa88:	b993      	cbnz	r3, 800fab0 <rx_thread+0xc0>
	if (!pkt) {
 800fa8a:	2d00      	cmp	r5, #0
 800fa8c:	d0b8      	beq.n	800fa00 <rx_thread+0x10>
				res = net_recv_data(net_pkt_iface(pkt), pkt);
 800fa8e:	4629      	mov	r1, r5
 800fa90:	69a8      	ldr	r0, [r5, #24]
 800fa92:	f005 fe8d 	bl	80157b0 <net_recv_data>
				if (res < 0) {
 800fa96:	2800      	cmp	r0, #0
 800fa98:	dac6      	bge.n	800fa28 <rx_thread+0x38>
					net_pkt_unref(pkt);
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	f007 fc21 	bl	80172e2 <net_pkt_unref>
 800faa0:	e7c2      	b.n	800fa28 <rx_thread+0x38>
		total_len += rx_header->size;
 800faa2:	889a      	ldrh	r2, [r3, #4]
			rx_header; rx_header = rx_header->next) {
 800faa4:	681b      	ldr	r3, [r3, #0]
		total_len += rx_header->size;
 800faa6:	4411      	add	r1, r2
			rx_header; rx_header = rx_header->next) {
 800faa8:	e7cb      	b.n	800fa42 <rx_thread+0x52>
			rx_header; rx_header = rx_header->next) {
 800faaa:	f8da a000 	ldr.w	sl, [sl]
 800faae:	e7d6      	b.n	800fa5e <rx_thread+0x6e>
		rx_header->used = false;
 800fab0:	719a      	strb	r2, [r3, #6]
			rx_header; rx_header = rx_header->next) {
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	e7e8      	b.n	800fa88 <rx_thread+0x98>
		} else if (res == -EAGAIN) {
 800fab6:	300b      	adds	r0, #11
 800fab8:	d1a2      	bne.n	800fa00 <rx_thread+0x10>
	return HAL_ETH_ReadPHYRegister(heth, PHYAddr, PHYReg, RegVal);
 800faba:	ab02      	add	r3, sp, #8
 800fabc:	2201      	movs	r2, #1
 800fabe:	2100      	movs	r1, #0
 800fac0:	f104 000c 	add.w	r0, r4, #12
 800fac4:	f00b fb77 	bl	801b1b6 <HAL_ETH_ReadPHYRegister>
			if (hal_ret == HAL_OK) {
 800fac8:	2800      	cmp	r0, #0
 800faca:	d199      	bne.n	800fa00 <rx_thread+0x10>
				if ((status & PHY_LINKED_STATUS) == PHY_LINKED_STATUS) {
 800facc:	9b02      	ldr	r3, [sp, #8]
					if (dev_data->link_up != true) {
 800face:	f894 2818 	ldrb.w	r2, [r4, #2072]	; 0x818
				if ((status & PHY_LINKED_STATUS) == PHY_LINKED_STATUS) {
 800fad2:	f013 0304 	ands.w	r3, r3, #4
 800fad6:	d008      	beq.n	800faea <rx_thread+0xfa>
					if (dev_data->link_up != true) {
 800fad8:	2a00      	cmp	r2, #0
 800fada:	d191      	bne.n	800fa00 <rx_thread+0x10>
						dev_data->link_up = true;
 800fadc:	2301      	movs	r3, #1
						net_eth_carrier_on(
 800fade:	6820      	ldr	r0, [r4, #0]
						dev_data->link_up = true;
 800fae0:	f884 3818 	strb.w	r3, [r4, #2072]	; 0x818
						net_eth_carrier_on(
 800fae4:	f005 fbb9 	bl	801525a <net_eth_carrier_on>
 800fae8:	e78a      	b.n	800fa00 <rx_thread+0x10>
					if (dev_data->link_up != false) {
 800faea:	2a00      	cmp	r2, #0
 800faec:	d088      	beq.n	800fa00 <rx_thread+0x10>
						net_eth_carrier_off(
 800faee:	6820      	ldr	r0, [r4, #0]
						dev_data->link_up = false;
 800faf0:	f884 3818 	strb.w	r3, [r4, #2072]	; 0x818
						net_eth_carrier_off(
 800faf4:	f005 fbc5 	bl	8015282 <net_eth_carrier_off>
	while (1) {
 800faf8:	e782      	b.n	800fa00 <rx_thread+0x10>
 800fafa:	bf00      	nop
 800fafc:	24002f3c 	.word	0x24002f3c
 800fb00:	300418e0 	.word	0x300418e0

0800fb04 <eth_initialize>:
{
 800fb04:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev_data = dev->data;
 800fb06:	6905      	ldr	r5, [r0, #16]
{
 800fb08:	b09f      	sub	sp, #124	; 0x7c
	cfg = dev->config;
 800fb0a:	6846      	ldr	r6, [r0, #4]
	dev_data->clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
 800fb0c:	4852      	ldr	r0, [pc, #328]	; (800fc58 <eth_initialize+0x154>)
 800fb0e:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800fb12:	f00b fd58 	bl	801b5c6 <z_device_is_ready>
	if (!device_is_ready(dev_data->clock)) {
 800fb16:	2800      	cmp	r0, #0
 800fb18:	f000 8094 	beq.w	800fc44 <eth_initialize+0x140>
	ret = clock_control_on(dev_data->clock,
 800fb1c:	1d31      	adds	r1, r6, #4
 800fb1e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800fb22:	f00a fea0 	bl	801a866 <clock_control_on>
 800fb26:	4604      	mov	r4, r0
	ret |= clock_control_on(dev_data->clock,
 800fb28:	f106 0114 	add.w	r1, r6, #20
 800fb2c:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800fb30:	f00a fe99 	bl	801a866 <clock_control_on>
 800fb34:	4304      	orrs	r4, r0
	ret |= clock_control_on(dev_data->clock,
 800fb36:	f106 010c 	add.w	r1, r6, #12
 800fb3a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800fb3e:	f00a fe92 	bl	801a866 <clock_control_on>
	if (ret) {
 800fb42:	4304      	orrs	r4, r0
 800fb44:	f040 8081 	bne.w	800fc4a <eth_initialize+0x146>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800fb48:	aa05      	add	r2, sp, #20
 800fb4a:	4621      	mov	r1, r4
 800fb4c:	69f0      	ldr	r0, [r6, #28]
 800fb4e:	f00a fec3 	bl	801a8d8 <pinctrl_lookup_state>
	if (ret < 0) {
 800fb52:	2800      	cmp	r0, #0
 800fb54:	db74      	blt.n	800fc40 <eth_initialize+0x13c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800fb56:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800fb58:	4622      	mov	r2, r4
 800fb5a:	7919      	ldrb	r1, [r3, #4]
 800fb5c:	6818      	ldr	r0, [r3, #0]
 800fb5e:	f000 f949 	bl	800fdf4 <pinctrl_configure_pins>
	if (ret < 0) {
 800fb62:	2800      	cmp	r0, #0
 800fb64:	db6c      	blt.n	800fc40 <eth_initialize+0x13c>
	mac_addr[1] = ST_OUI_B1;
 800fb66:	2380      	movs	r3, #128	; 0x80
	heth = &dev_data->heth;
 800fb68:	f105 060c 	add.w	r6, r5, #12
	mac_addr[0] = ST_OUI_B0;
 800fb6c:	712c      	strb	r4, [r5, #4]
	mac_addr[1] = ST_OUI_B1;
 800fb6e:	716b      	strb	r3, [r5, #5]
	mac_addr[2] = ST_OUI_B2;
 800fb70:	23e1      	movs	r3, #225	; 0xe1
 800fb72:	71ab      	strb	r3, [r5, #6]
 800fb74:	2103      	movs	r1, #3
 800fb76:	1de8      	adds	r0, r5, #7
 800fb78:	f7ff fe82 	bl	800f880 <z_impl_hwinfo_get_device_id>
	generate_mac(dev_data->mac_addr);
 800fb7c:	1d2b      	adds	r3, r5, #4
	hal_ret = HAL_ETH_Init(heth);
 800fb7e:	4630      	mov	r0, r6
	heth->Init.MACAddr = dev_data->mac_addr;
 800fb80:	612b      	str	r3, [r5, #16]
	heth->Init.TxDesc = dma_tx_desc_tab;
 800fb82:	4b36      	ldr	r3, [pc, #216]	; (800fc5c <eth_initialize+0x158>)
 800fb84:	61ab      	str	r3, [r5, #24]
	heth->Init.RxDesc = dma_rx_desc_tab;
 800fb86:	3360      	adds	r3, #96	; 0x60
 800fb88:	61eb      	str	r3, [r5, #28]
	heth->Init.RxBuffLen = ETH_STM32_RX_BUF_SIZE;
 800fb8a:	f44f 63bf 	mov.w	r3, #1528	; 0x5f8
 800fb8e:	622b      	str	r3, [r5, #32]
	hal_ret = HAL_ETH_Init(heth);
 800fb90:	f000 ffe0 	bl	8010b54 <HAL_ETH_Init>
	if (hal_ret == HAL_TIMEOUT) {
 800fb94:	2803      	cmp	r0, #3
 800fb96:	d001      	beq.n	800fb9c <eth_initialize+0x98>
	} else if (hal_ret != HAL_OK) {
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	d159      	bne.n	800fc50 <eth_initialize+0x14c>
	memset(&tx_config, 0, sizeof(ETH_TxPacketConfig));
 800fb9c:	4f30      	ldr	r7, [pc, #192]	; (800fc60 <eth_initialize+0x15c>)
 800fb9e:	2238      	movs	r2, #56	; 0x38
 800fba0:	2100      	movs	r1, #0
	tx_config.ChecksumCtrl = IS_ENABLED(CONFIG_ETH_STM32_HW_CHECKSUM) ?
 800fba2:	2400      	movs	r4, #0
	memset(&tx_config, 0, sizeof(ETH_TxPacketConfig));
 800fba4:	4638      	mov	r0, r7
 800fba6:	f005 f871 	bl	8014c8c <memset>
	tx_config.Attributes = ETH_TX_PACKETS_FEATURES_CSUM |
 800fbaa:	2321      	movs	r3, #33	; 0x21
	dev_data->link_up = false;
 800fbac:	f885 4818 	strb.w	r4, [r5, #2072]	; 0x818
	tx_config.Attributes = ETH_TX_PACKETS_FEATURES_CSUM |
 800fbb0:	603b      	str	r3, [r7, #0]
	tx_config.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800fbb2:	e9c7 4404 	strd	r4, r4, [r7, #16]
	return z_impl_k_mutex_init(mutex);
 800fbb6:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
 800fbba:	f00b fe36 	bl	801b82a <z_impl_k_mutex_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
 800fbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800fbc2:	4621      	mov	r1, r4
 800fbc4:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
 800fbc8:	f00b fedb 	bl	801b982 <z_impl_k_sem_init>
 800fbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800fbd0:	4621      	mov	r1, r4
 800fbd2:	f105 00ec 	add.w	r0, r5, #236	; 0xec
 800fbd6:	f00b fed4 	bl	801b982 <z_impl_k_sem_init>
	HAL_ETH_SetMDIOClockRange(heth);
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f000 ff7e 	bl	8010adc <HAL_ETH_SetMDIOClockRange>
	HAL_ETH_GetMACConfig(heth, &mac_config);
 800fbe0:	a905      	add	r1, sp, #20
 800fbe2:	4630      	mov	r0, r6
 800fbe4:	f00b fb14 	bl	801b210 <HAL_ETH_GetMACConfig>
	mac_config.Speed = IS_ENABLED(CONFIG_ETH_STM32_SPEED_10M) ?
 800fbe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fbec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	hal_ret = HAL_ETH_SetMACConfig(heth, &mac_config);
 800fbf0:	a905      	add	r1, sp, #20
 800fbf2:	4630      	mov	r0, r6
	mac_config.Speed = IS_ENABLED(CONFIG_ETH_STM32_SPEED_10M) ?
 800fbf4:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
	hal_ret = HAL_ETH_SetMACConfig(heth, &mac_config);
 800fbf8:	f00b fbf6 	bl	801b3e8 <HAL_ETH_SetMACConfig>
		dma_tx_buffer_header[i].tx_buff.buffer = dma_tx_buffer[i];
 800fbfc:	4a19      	ldr	r2, [pc, #100]	; (800fc64 <eth_initialize+0x160>)
 800fbfe:	4b1a      	ldr	r3, [pc, #104]	; (800fc68 <eth_initialize+0x164>)
	hal_ret = HAL_ETH_Start_IT(heth);
 800fc00:	4630      	mov	r0, r6
		dma_tx_buffer_header[i].tx_buff.buffer = dma_tx_buffer[i];
 800fc02:	6013      	str	r3, [r2, #0]
 800fc04:	f503 61bf 	add.w	r1, r3, #1528	; 0x5f8
 800fc08:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 800fc0c:	6111      	str	r1, [r2, #16]
 800fc0e:	6213      	str	r3, [r2, #32]
 800fc10:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 800fc14:	6313      	str	r3, [r2, #48]	; 0x30
	hal_ret = HAL_ETH_Start_IT(heth);
 800fc16:	f000 ff01 	bl	8010a1c <HAL_ETH_Start_IT>
	HAL_ETH_GetMACFilterConfig(heth, &MACFilterConf);
 800fc1a:	a901      	add	r1, sp, #4
 800fc1c:	4630      	mov	r0, r6
 800fc1e:	f00b fbef 	bl	801b400 <HAL_ETH_GetMACFilterConfig>
	MACFilterConf.HashMulticast = DISABLE;
 800fc22:	f44f 7380 	mov.w	r3, #256	; 0x100
	HAL_ETH_SetMACFilterConfig(heth, &MACFilterConf);
 800fc26:	a901      	add	r1, sp, #4
 800fc28:	4630      	mov	r0, r6
	MACFilterConf.HashMulticast = DISABLE;
 800fc2a:	f8ad 3008 	strh.w	r3, [sp, #8]
	MACFilterConf.HachOrPerfectFilter = DISABLE;
 800fc2e:	f88d 4006 	strb.w	r4, [sp, #6]
	HAL_ETH_SetMACFilterConfig(heth, &MACFilterConf);
 800fc32:	f001 f8b9 	bl	8010da8 <HAL_ETH_SetMACFilterConfig>
	return z_impl_k_sleep(timeout);
 800fc36:	200a      	movs	r0, #10
 800fc38:	2100      	movs	r1, #0
 800fc3a:	f002 fec5 	bl	80129c8 <z_impl_k_sleep>
	return 0;
 800fc3e:	4620      	mov	r0, r4
}
 800fc40:	b01f      	add	sp, #124	; 0x7c
 800fc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
 800fc44:	f06f 0012 	mvn.w	r0, #18
 800fc48:	e7fa      	b.n	800fc40 <eth_initialize+0x13c>
		return -EIO;
 800fc4a:	f06f 0004 	mvn.w	r0, #4
 800fc4e:	e7f7      	b.n	800fc40 <eth_initialize+0x13c>
		return -EINVAL;
 800fc50:	f06f 0015 	mvn.w	r0, #21
 800fc54:	e7f4      	b.n	800fc40 <eth_initialize+0x13c>
 800fc56:	bf00      	nop
 800fc58:	0801c24c 	.word	0x0801c24c
 800fc5c:	30040000 	.word	0x30040000
 800fc60:	24002f9c 	.word	0x24002f9c
 800fc64:	24002f5c 	.word	0x24002f5c
 800fc68:	30040100 	.word	0x30040100

0800fc6c <HAL_ETH_RxAllocateCallback>:
{
 800fc6c:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ETH_RXBUFNB; ++i) {
 800fc6e:	2300      	movs	r3, #0
		if (!dma_rx_buffer_header[i].used) {
 800fc70:	4c0a      	ldr	r4, [pc, #40]	; (800fc9c <HAL_ETH_RxAllocateCallback+0x30>)
 800fc72:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800fc76:	7991      	ldrb	r1, [r2, #6]
 800fc78:	b959      	cbnz	r1, 800fc92 <HAL_ETH_RxAllocateCallback+0x26>
			dma_rx_buffer_header[i].next = NULL;
 800fc7a:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
			dma_rx_buffer_header[i].size = 0;
 800fc7e:	8091      	strh	r1, [r2, #4]
			dma_rx_buffer_header[i].used = true;
 800fc80:	2101      	movs	r1, #1
 800fc82:	7191      	strb	r1, [r2, #6]
			*buf = dma_rx_buffer[i];
 800fc84:	f44f 61bf 	mov.w	r1, #1528	; 0x5f8
 800fc88:	4a05      	ldr	r2, [pc, #20]	; (800fca0 <HAL_ETH_RxAllocateCallback+0x34>)
 800fc8a:	fb01 2303 	mla	r3, r1, r3, r2
	*buf = NULL;
 800fc8e:	6003      	str	r3, [r0, #0]
}
 800fc90:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ETH_RXBUFNB; ++i) {
 800fc92:	3301      	adds	r3, #1
 800fc94:	2b04      	cmp	r3, #4
 800fc96:	d1ec      	bne.n	800fc72 <HAL_ETH_RxAllocateCallback+0x6>
	*buf = NULL;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	e7f8      	b.n	800fc8e <HAL_ETH_RxAllocateCallback+0x22>
 800fc9c:	24002f3c 	.word	0x24002f3c
 800fca0:	300418e0 	.word	0x300418e0

0800fca4 <HAL_ETH_RxLinkCallback>:
{
 800fca4:	b510      	push	{r4, lr}
	size_t index = (RxBufferPtr)buff - &dma_rx_buffer[0];
 800fca6:	4c08      	ldr	r4, [pc, #32]	; (800fcc8 <HAL_ETH_RxLinkCallback+0x24>)
 800fca8:	1b12      	subs	r2, r2, r4
 800fcaa:	4c08      	ldr	r4, [pc, #32]	; (800fccc <HAL_ETH_RxLinkCallback+0x28>)
 800fcac:	10d2      	asrs	r2, r2, #3
 800fcae:	4354      	muls	r4, r2
	struct eth_stm32_rx_buffer_header *header = &dma_rx_buffer_header[index];
 800fcb0:	4a07      	ldr	r2, [pc, #28]	; (800fcd0 <HAL_ETH_RxLinkCallback+0x2c>)
 800fcb2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
	header->size = Length;
 800fcb6:	8093      	strh	r3, [r2, #4]
	if (!*pStart) {
 800fcb8:	6803      	ldr	r3, [r0, #0]
 800fcba:	b913      	cbnz	r3, 800fcc2 <HAL_ETH_RxLinkCallback+0x1e>
		*pStart = header;
 800fcbc:	6002      	str	r2, [r0, #0]
		*pEnd = header;
 800fcbe:	600a      	str	r2, [r1, #0]
}
 800fcc0:	bd10      	pop	{r4, pc}
		((struct eth_stm32_rx_buffer_header *)*pEnd)->next = header;
 800fcc2:	680b      	ldr	r3, [r1, #0]
 800fcc4:	601a      	str	r2, [r3, #0]
 800fcc6:	e7fa      	b.n	800fcbe <HAL_ETH_RxLinkCallback+0x1a>
 800fcc8:	300418e0 	.word	0x300418e0
 800fccc:	ee936f3f 	.word	0xee936f3f
 800fcd0:	24002f3c 	.word	0x24002f3c

0800fcd4 <HAL_ETH_TxFreeCallback>:
	struct eth_stm32_tx_buffer_header *buffer_header =
 800fcd4:	8882      	ldrh	r2, [r0, #4]
 800fcd6:	4b04      	ldr	r3, [pc, #16]	; (800fce8 <HAL_ETH_TxFreeCallback+0x14>)
 800fcd8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
		buffer_header->used = false;
 800fcdc:	2200      	movs	r2, #0
 800fcde:	731a      	strb	r2, [r3, #12]
		if (buffer_header->tx_buff.next != NULL) {
 800fce0:	689b      	ldr	r3, [r3, #8]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1fb      	bne.n	800fcde <HAL_ETH_TxFreeCallback+0xa>
}
 800fce6:	4770      	bx	lr
 800fce8:	24002f5c 	.word	0x24002f5c

0800fcec <eth_tx>:
{
 800fcec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct eth_stm32_tx_context ctx = {.pkt = pkt, .first_tx_buffer_index = 0};
 800fcf0:	2500      	movs	r5, #0
{
 800fcf2:	460f      	mov	r7, r1
	struct eth_stm32_hal_dev_data *dev_data = dev->data;
 800fcf4:	6906      	ldr	r6, [r0, #16]
	struct eth_stm32_tx_context ctx = {.pkt = pkt, .first_tx_buffer_index = 0};
 800fcf6:	688b      	ldr	r3, [r1, #8]
 800fcf8:	9100      	str	r1, [sp, #0]
 800fcfa:	f8ad 5004 	strh.w	r5, [sp, #4]
	while (buf) {
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d149      	bne.n	800fd96 <eth_tx+0xaa>
	if (total_len > (ETH_STM32_TX_BUF_SIZE * ETH_TXBUFNB)) {
 800fd02:	f5b5 5fbf 	cmp.w	r5, #6112	; 0x17e0
 800fd06:	d86e      	bhi.n	800fde6 <eth_tx+0xfa>
	k_mutex_lock(&dev_data->tx_mutex, K_FOREVER);
 800fd08:	f106 08c0 	add.w	r8, r6, #192	; 0xc0
	buf_header = &dma_tx_buffer_header[ctx.first_tx_buffer_index];
 800fd0c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800fdec <eth_tx+0x100>
	return z_impl_k_mutex_lock(mutex, timeout);
 800fd10:	f04f 32ff 	mov.w	r2, #4294967295
 800fd14:	f04f 33ff 	mov.w	r3, #4294967295
 800fd18:	4640      	mov	r0, r8
 800fd1a:	f002 f885 	bl	8011e28 <z_impl_k_mutex_lock>
	while (remaining_read > ETH_STM32_TX_BUF_SIZE) {
 800fd1e:	46aa      	mov	sl, r5
	ctx.first_tx_buffer_index = allocate_tx_buffer();
 800fd20:	f7ff fe10 	bl	800f944 <allocate_tx_buffer>
		if (net_pkt_read(pkt, buf_header->tx_buff.buffer, ETH_STM32_TX_BUF_SIZE)) {
 800fd24:	f44f 6bbf 	mov.w	fp, #1528	; 0x5f8
	buf_header = &dma_tx_buffer_header[ctx.first_tx_buffer_index];
 800fd28:	eb09 1400 	add.w	r4, r9, r0, lsl #4
	ctx.first_tx_buffer_index = allocate_tx_buffer();
 800fd2c:	f8ad 0004 	strh.w	r0, [sp, #4]
	while (remaining_read > ETH_STM32_TX_BUF_SIZE) {
 800fd30:	f5ba 6fbf 	cmp.w	sl, #1528	; 0x5f8
		if (net_pkt_read(pkt, buf_header->tx_buff.buffer, ETH_STM32_TX_BUF_SIZE)) {
 800fd34:	6821      	ldr	r1, [r4, #0]
	while (remaining_read > ETH_STM32_TX_BUF_SIZE) {
 800fd36:	d832      	bhi.n	800fd9e <eth_tx+0xb2>
	if (net_pkt_read(pkt, buf_header->tx_buff.buffer, remaining_read)) {
 800fd38:	4652      	mov	r2, sl
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	f007 fc7e 	bl	801763c <net_pkt_read>
 800fd40:	2800      	cmp	r0, #0
 800fd42:	d14a      	bne.n	800fdda <eth_tx+0xee>
	tx_config.TxBuffer = &dma_tx_buffer_header[ctx.first_tx_buffer_index].tx_buff;
 800fd44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	heth = &dev_data->heth;
 800fd48:	f106 070c 	add.w	r7, r6, #12
	k_sem_reset(&dev_data->tx_int_sem);
 800fd4c:	36ec      	adds	r6, #236	; 0xec
	tx_config.TxBuffer = &dma_tx_buffer_header[ctx.first_tx_buffer_index].tx_buff;
 800fd4e:	eb09 1303 	add.w	r3, r9, r3, lsl #4
	buf_header->tx_buff.next = NULL;
 800fd52:	e9c4 a001 	strd	sl, r0, [r4, #4]
	tx_config.Length = total_len;
 800fd56:	4c26      	ldr	r4, [pc, #152]	; (800fdf0 <eth_tx+0x104>)
 800fd58:	6065      	str	r5, [r4, #4]
	tx_config.pData = &ctx;
 800fd5a:	f8c4 d034 	str.w	sp, [r4, #52]	; 0x34
	tx_config.TxBuffer = &dma_tx_buffer_header[ctx.first_tx_buffer_index].tx_buff;
 800fd5e:	60a3      	str	r3, [r4, #8]
	z_impl_k_sem_reset(sem);
 800fd60:	4630      	mov	r0, r6
 800fd62:	f002 f99b 	bl	801209c <z_impl_k_sem_reset>
	hal_ret = HAL_ETH_Transmit_IT(heth, &tx_config);
 800fd66:	4621      	mov	r1, r4
 800fd68:	4638      	mov	r0, r7
 800fd6a:	f00b f89d 	bl	801aea8 <HAL_ETH_Transmit_IT>
	if (hal_ret != HAL_OK) {
 800fd6e:	b978      	cbnz	r0, 800fd90 <eth_tx+0xa4>
	return z_impl_k_sem_take(sem, timeout);
 800fd70:	22c8      	movs	r2, #200	; 0xc8
 800fd72:	2300      	movs	r3, #0
 800fd74:	4630      	mov	r0, r6
 800fd76:	f002 f969 	bl	801204c <z_impl_k_sem_take>
	if (k_sem_take(&dev_data->tx_int_sem,
 800fd7a:	4604      	mov	r4, r0
		if (HAL_ETH_GetState(heth) == HAL_ETH_STATE_ERROR) {
 800fd7c:	4638      	mov	r0, r7
	if (k_sem_take(&dev_data->tx_int_sem,
 800fd7e:	b1fc      	cbz	r4, 800fdc0 <eth_tx+0xd4>
		if (HAL_ETH_GetState(heth) == HAL_ETH_STATE_ERROR) {
 800fd80:	f00b fb7c 	bl	801b47c <HAL_ETH_GetState>
		if (HAL_ETH_GetDMAError(heth)) {
 800fd84:	4638      	mov	r0, r7
 800fd86:	f00b fb7c 	bl	801b482 <HAL_ETH_GetDMAError>
		if (HAL_ETH_GetDMAError(heth)) {
 800fd8a:	4638      	mov	r0, r7
 800fd8c:	f00b fb79 	bl	801b482 <HAL_ETH_GetDMAError>
		res = -EIO;
 800fd90:	f06f 0404 	mvn.w	r4, #4
 800fd94:	e023      	b.n	800fdde <eth_tx+0xf2>
		bytes += buf->len;
 800fd96:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
 800fd98:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 800fd9a:	4415      	add	r5, r2
		buf = buf->frags;
 800fd9c:	e7af      	b.n	800fcfe <eth_tx+0x12>
		if (net_pkt_read(pkt, buf_header->tx_buff.buffer, ETH_STM32_TX_BUF_SIZE)) {
 800fd9e:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 800fda2:	4638      	mov	r0, r7
 800fda4:	f007 fc4a 	bl	801763c <net_pkt_read>
 800fda8:	b9b8      	cbnz	r0, 800fdda <eth_tx+0xee>
		const uint16_t next_buffer_id = allocate_tx_buffer();
 800fdaa:	f7ff fdcb 	bl	800f944 <allocate_tx_buffer>
		remaining_read -= ETH_STM32_TX_BUF_SIZE;
 800fdae:	f5aa 6abf 	sub.w	sl, sl, #1528	; 0x5f8
		buf_header->tx_buff.next = &dma_tx_buffer_header[next_buffer_id].tx_buff;
 800fdb2:	eb09 1000 	add.w	r0, r9, r0, lsl #4
		buf_header->tx_buff.len = ETH_STM32_TX_BUF_SIZE;
 800fdb6:	f8c4 b004 	str.w	fp, [r4, #4]
		buf_header->tx_buff.next = &dma_tx_buffer_header[next_buffer_id].tx_buff;
 800fdba:	60a0      	str	r0, [r4, #8]
		buf_header = &dma_tx_buffer_header[next_buffer_id];
 800fdbc:	4604      	mov	r4, r0
 800fdbe:	e7b7      	b.n	800fd30 <eth_tx+0x44>
	} else if (HAL_ETH_ReleaseTxPacket(heth) != HAL_OK) {
 800fdc0:	f00b f928 	bl	801b014 <HAL_ETH_ReleaseTxPacket>
		res = -EIO;
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	bf18      	it	ne
 800fdc8:	f06f 0404 	mvnne.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
 800fdcc:	4640      	mov	r0, r8
 800fdce:	f002 f8a5 	bl	8011f1c <z_impl_k_mutex_unlock>
}
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	b003      	add	sp, #12
 800fdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = -ENOBUFS;
 800fdda:	f06f 0468 	mvn.w	r4, #104	; 0x68
		HAL_ETH_TxFreeCallback((uint32_t *)&ctx);
 800fdde:	4668      	mov	r0, sp
 800fde0:	f7ff ff78 	bl	800fcd4 <HAL_ETH_TxFreeCallback>
 800fde4:	e7f2      	b.n	800fdcc <eth_tx+0xe0>
		return -EIO;
 800fde6:	f06f 0404 	mvn.w	r4, #4
 800fdea:	e7f2      	b.n	800fdd2 <eth_tx+0xe6>
 800fdec:	24002f5c 	.word	0x24002f5c
 800fdf0:	24002f9c 	.word	0x24002f9c

0800fdf4 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800fdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdf8:	4604      	mov	r4, r0
 800fdfa:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 800fdfe:	2500      	movs	r5, #0
	port_device = gpio_ports[STM32_PORT(pin)];
 800fe00:	4f1c      	ldr	r7, [pc, #112]	; (800fe74 <pinctrl_configure_pins+0x80>)
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800fe02:	42b4      	cmp	r4, r6
 800fe04:	d101      	bne.n	800fe0a <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 800fe06:	2000      	movs	r0, #0
 800fe08:	e014      	b.n	800fe34 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 800fe0a:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800fe0c:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800fe0e:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800fe12:	d411      	bmi.n	800fe38 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800fe14:	6865      	ldr	r5, [r4, #4]
 800fe16:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800fe1a:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800fe1e:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800fe22:	280a      	cmp	r0, #10
 800fe24:	d823      	bhi.n	800fe6e <pinctrl_configure_pins+0x7a>
	port_device = gpio_ports[STM32_PORT(pin)];
 800fe26:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800fe2a:	f1b8 0f00 	cmp.w	r8, #0
 800fe2e:	d10d      	bne.n	800fe4c <pinctrl_configure_pins+0x58>
		return -ENODEV;
 800fe30:	f06f 0012 	mvn.w	r0, #18
}
 800fe34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800fe38:	f1b9 0f10 	cmp.w	r9, #16
 800fe3c:	d004      	beq.n	800fe48 <pinctrl_configure_pins+0x54>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 800fe3e:	f1b9 0f11 	cmp.w	r9, #17
 800fe42:	d1ea      	bne.n	800fe1a <pinctrl_configure_pins+0x26>
			pin_cgf = pins[i].pincfg;
 800fe44:	6865      	ldr	r5, [r4, #4]
 800fe46:	e7e8      	b.n	800fe1a <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 800fe48:	2530      	movs	r5, #48	; 0x30
 800fe4a:	e7e6      	b.n	800fe1a <pinctrl_configure_pins+0x26>
 800fe4c:	4640      	mov	r0, r8
 800fe4e:	f00b fbba 	bl	801b5c6 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800fe52:	2800      	cmp	r0, #0
 800fe54:	d0ec      	beq.n	800fe30 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 800fe56:	464b      	mov	r3, r9
 800fe58:	462a      	mov	r2, r5
 800fe5a:	f00a 010f 	and.w	r1, sl, #15
 800fe5e:	4640      	mov	r0, r8
 800fe60:	f00a fce5 	bl	801a82e <gpio_stm32_configure>
		if (ret < 0) {
 800fe64:	2800      	cmp	r0, #0
 800fe66:	f104 0408 	add.w	r4, r4, #8
 800fe6a:	daca      	bge.n	800fe02 <pinctrl_configure_pins+0xe>
 800fe6c:	e7e2      	b.n	800fe34 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 800fe6e:	f06f 0015 	mvn.w	r0, #21
 800fe72:	e7df      	b.n	800fe34 <pinctrl_configure_pins+0x40>
 800fe74:	0801da54 	.word	0x0801da54

0800fe78 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(config->usart);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;
 800fe78:	6842      	ldr	r2, [r0, #4]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(config->usart);
 800fe7a:	6811      	ldr	r1, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe7c:	f101 0308 	add.w	r3, r1, #8
 800fe80:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800fe84:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe88:	f101 0c08 	add.w	ip, r1, #8
 800fe8c:	e84c 3000 	strex	r0, r3, [ip]
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d1f3      	bne.n	800fe7c <uart_stm32_irq_err_enable+0x4>
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 800fe94:	6813      	ldr	r3, [r2, #0]
 800fe96:	4916      	ldr	r1, [pc, #88]	; (800fef0 <uart_stm32_irq_err_enable+0x78>)
 800fe98:	428b      	cmp	r3, r1
 800fe9a:	d01b      	beq.n	800fed4 <uart_stm32_irq_err_enable+0x5c>
 800fe9c:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 800fea0:	428b      	cmp	r3, r1
 800fea2:	d017      	beq.n	800fed4 <uart_stm32_irq_err_enable+0x5c>
 800fea4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fea8:	428b      	cmp	r3, r1
 800feaa:	d013      	beq.n	800fed4 <uart_stm32_irq_err_enable+0x5c>
 800feac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800feb0:	428b      	cmp	r3, r1
 800feb2:	d00f      	beq.n	800fed4 <uart_stm32_irq_err_enable+0x5c>
 800feb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800feb8:	428b      	cmp	r3, r1
 800feba:	d00b      	beq.n	800fed4 <uart_stm32_irq_err_enable+0x5c>
 800febc:	f501 4144 	add.w	r1, r1, #50176	; 0xc400
 800fec0:	428b      	cmp	r3, r1
 800fec2:	d007      	beq.n	800fed4 <uart_stm32_irq_err_enable+0x5c>
 800fec4:	f5a1 411c 	sub.w	r1, r1, #39936	; 0x9c00
 800fec8:	428b      	cmp	r3, r1
 800feca:	d003      	beq.n	800fed4 <uart_stm32_irq_err_enable+0x5c>
 800fecc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fed0:	428b      	cmp	r3, r1
 800fed2:	d103      	bne.n	800fedc <uart_stm32_irq_err_enable+0x64>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800fed4:	6859      	ldr	r1, [r3, #4]
 800fed6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800feda:	6059      	str	r1, [r3, #4]
		LL_USART_EnableIT_LBD(config->usart);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(config->usart);
 800fedc:	6812      	ldr	r2, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fede:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 800fee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fee6:	e842 3100 	strex	r1, r3, [r2]
 800feea:	2900      	cmp	r1, #0
 800feec:	d1f7      	bne.n	800fede <uart_stm32_irq_err_enable+0x66>
}
 800feee:	4770      	bx	lr
 800fef0:	40011000 	.word	0x40011000

0800fef4 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;
 800fef4:	6842      	ldr	r2, [r0, #4]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(config->usart);
 800fef6:	6811      	ldr	r1, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef8:	f101 0308 	add.w	r3, r1, #8
 800fefc:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800ff00:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff04:	f101 0c08 	add.w	ip, r1, #8
 800ff08:	e84c 3000 	strex	r0, r3, [ip]
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d1f3      	bne.n	800fef8 <uart_stm32_irq_err_disable+0x4>
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 800ff10:	6813      	ldr	r3, [r2, #0]
 800ff12:	4916      	ldr	r1, [pc, #88]	; (800ff6c <uart_stm32_irq_err_disable+0x78>)
 800ff14:	428b      	cmp	r3, r1
 800ff16:	d01b      	beq.n	800ff50 <uart_stm32_irq_err_disable+0x5c>
 800ff18:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 800ff1c:	428b      	cmp	r3, r1
 800ff1e:	d017      	beq.n	800ff50 <uart_stm32_irq_err_disable+0x5c>
 800ff20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ff24:	428b      	cmp	r3, r1
 800ff26:	d013      	beq.n	800ff50 <uart_stm32_irq_err_disable+0x5c>
 800ff28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ff2c:	428b      	cmp	r3, r1
 800ff2e:	d00f      	beq.n	800ff50 <uart_stm32_irq_err_disable+0x5c>
 800ff30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ff34:	428b      	cmp	r3, r1
 800ff36:	d00b      	beq.n	800ff50 <uart_stm32_irq_err_disable+0x5c>
 800ff38:	f501 4144 	add.w	r1, r1, #50176	; 0xc400
 800ff3c:	428b      	cmp	r3, r1
 800ff3e:	d007      	beq.n	800ff50 <uart_stm32_irq_err_disable+0x5c>
 800ff40:	f5a1 411c 	sub.w	r1, r1, #39936	; 0x9c00
 800ff44:	428b      	cmp	r3, r1
 800ff46:	d003      	beq.n	800ff50 <uart_stm32_irq_err_disable+0x5c>
 800ff48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ff4c:	428b      	cmp	r3, r1
 800ff4e:	d103      	bne.n	800ff58 <uart_stm32_irq_err_disable+0x64>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800ff50:	6859      	ldr	r1, [r3, #4]
 800ff52:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800ff56:	6059      	str	r1, [r3, #4]
		LL_USART_DisableIT_LBD(config->usart);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(config->usart);
 800ff58:	6812      	ldr	r2, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff5a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 800ff5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff62:	e842 3100 	strex	r1, r3, [r2]
 800ff66:	2900      	cmp	r1, #0
 800ff68:	d1f7      	bne.n	800ff5a <uart_stm32_irq_err_disable+0x66>
}
 800ff6a:	4770      	bx	lr
 800ff6c:	40011000 	.word	0x40011000

0800ff70 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800ff70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff72:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = dev->config;
 800ff74:	6844      	ldr	r4, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800ff76:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 800ff78:	486b      	ldr	r0, [pc, #428]	; (8010128 <uart_stm32_init+0x1b8>)
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	f00b fb23 	bl	801b5c6 <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 800ff80:	b920      	cbnz	r0, 800ff8c <uart_stm32_init+0x1c>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
 800ff82:	f06f 0512 	mvn.w	r5, #18
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 800ff86:	4628      	mov	r0, r5
 800ff88:	b003      	add	sp, #12
 800ff8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	6861      	ldr	r1, [r4, #4]
 800ff90:	6883      	ldr	r3, [r0, #8]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4798      	blx	r3
	if (err != 0) {
 800ff96:	4605      	mov	r5, r0
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d1f4      	bne.n	800ff86 <uart_stm32_init+0x16>
	ret = pinctrl_lookup_state(config, id, &state);
 800ff9c:	4601      	mov	r1, r0
 800ff9e:	aa01      	add	r2, sp, #4
 800ffa0:	69e0      	ldr	r0, [r4, #28]
 800ffa2:	f00a fc99 	bl	801a8d8 <pinctrl_lookup_state>
	if (ret < 0) {
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	f2c0 80bb 	blt.w	8010122 <uart_stm32_init+0x1b2>
	return pinctrl_apply_state_direct(config, state);
 800ffac:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800ffae:	462a      	mov	r2, r5
 800ffb0:	7919      	ldrb	r1, [r3, #4]
 800ffb2:	6818      	ldr	r0, [r3, #0]
 800ffb4:	f7ff ff1e 	bl	800fdf4 <pinctrl_configure_pins>
	if (err < 0) {
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	f2c0 80b2 	blt.w	8010122 <uart_stm32_init+0x1b2>
	LL_USART_Disable(config->usart);
 800ffbe:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800ffc0:	6813      	ldr	r3, [r2, #0]
 800ffc2:	f023 0301 	bic.w	r3, r3, #1
 800ffc6:	6013      	str	r3, [r2, #0]
	if (!device_is_ready(data->reset.dev)) {
 800ffc8:	68b8      	ldr	r0, [r7, #8]
 800ffca:	f00b fafc 	bl	801b5c6 <z_device_is_ready>
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	d0d7      	beq.n	800ff82 <uart_stm32_init+0x12>
 *
 * @return a value from reset_line_toggle()
 */
static inline int reset_line_toggle_dt(const struct reset_dt_spec *spec)
{
	return reset_line_toggle(spec->dev, spec->id);
 800ffd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
	if (api->line_toggle == NULL) {
 800ffd6:	6883      	ldr	r3, [r0, #8]
 800ffd8:	68db      	ldr	r3, [r3, #12]
 800ffda:	b103      	cbz	r3, 800ffde <uart_stm32_init+0x6e>
	return api->line_toggle(dev, id);
 800ffdc:	4798      	blx	r3
	LL_USART_SetTransferDirection(config->usart,
 800ffde:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe0:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800ffe4:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe8:	e841 3200 	strex	r2, r3, [r1]
 800ffec:	2a00      	cmp	r2, #0
 800ffee:	d1f7      	bne.n	800ffe0 <uart_stm32_init+0x70>
	if (config->parity == 2) {
 800fff0:	6923      	ldr	r3, [r4, #16]
 800fff2:	2b02      	cmp	r3, #2
 800fff4:	f000 808d 	beq.w	8010112 <uart_stm32_init+0x1a2>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	bf0a      	itet	eq
 800fffc:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 8010000:	2000      	movne	r0, #0
 8010002:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
	LL_USART_ConfigCharacter(config->usart,
 8010006:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8010008:	4302      	orrs	r2, r0
 801000a:	680b      	ldr	r3, [r1, #0]
 801000c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010010:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010014:	4313      	orrs	r3, r2
 8010016:	600b      	str	r3, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8010018:	684b      	ldr	r3, [r1, #4]
 801001a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801001e:	604b      	str	r3, [r1, #4]
	if (config->hw_flow_control) {
 8010020:	7b23      	ldrb	r3, [r4, #12]
 8010022:	b12b      	cbz	r3, 8010030 <uart_stm32_init+0xc0>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 8010024:	6873      	ldr	r3, [r6, #4]
 8010026:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8010028:	6893      	ldr	r3, [r2, #8]
 801002a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801002e:	6093      	str	r3, [r2, #8]
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8010030:	6839      	ldr	r1, [r7, #0]
 8010032:	4630      	mov	r0, r6
 8010034:	f00a fcf4 	bl	801aa20 <uart_stm32_set_baudrate>
	if (config->single_wire) {
 8010038:	7d23      	ldrb	r3, [r4, #20]
 801003a:	b123      	cbz	r3, 8010046 <uart_stm32_init+0xd6>
		LL_USART_EnableHalfDuplex(config->usart);
 801003c:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 801003e:	6893      	ldr	r3, [r2, #8]
 8010040:	f043 0308 	orr.w	r3, r3, #8
 8010044:	6093      	str	r3, [r2, #8]
	if (config->tx_rx_swap) {
 8010046:	7d63      	ldrb	r3, [r4, #21]
 8010048:	b123      	cbz	r3, 8010054 <uart_stm32_init+0xe4>
		LL_USART_SetTXRXSwap(config->usart, LL_USART_TXRX_SWAPPED);
 801004a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 801004c:	6853      	ldr	r3, [r2, #4]
 801004e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010052:	6053      	str	r3, [r2, #4]
	if (config->rx_invert) {
 8010054:	7da3      	ldrb	r3, [r4, #22]
 8010056:	b123      	cbz	r3, 8010062 <uart_stm32_init+0xf2>
		LL_USART_SetRXPinLevel(config->usart, LL_USART_RXPIN_LEVEL_INVERTED);
 8010058:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 801005a:	6853      	ldr	r3, [r2, #4]
 801005c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010060:	6053      	str	r3, [r2, #4]
	if (config->tx_invert) {
 8010062:	7de3      	ldrb	r3, [r4, #23]
 8010064:	b123      	cbz	r3, 8010070 <uart_stm32_init+0x100>
		LL_USART_SetTXPinLevel(config->usart, LL_USART_TXPIN_LEVEL_INVERTED);
 8010066:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 8010068:	6853      	ldr	r3, [r2, #4]
 801006a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801006e:	6053      	str	r3, [r2, #4]
	if (config->de_enable) {
 8010070:	7e23      	ldrb	r3, [r4, #24]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d03d      	beq.n	80100f2 <uart_stm32_init+0x182>
		if (!IS_UART_DRIVER_ENABLE_INSTANCE(config->usart)) {
 8010076:	6823      	ldr	r3, [r4, #0]
 8010078:	4a2c      	ldr	r2, [pc, #176]	; (801012c <uart_stm32_init+0x1bc>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d01e      	beq.n	80100bc <uart_stm32_init+0x14c>
 801007e:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8010082:	4293      	cmp	r3, r2
 8010084:	d01a      	beq.n	80100bc <uart_stm32_init+0x14c>
 8010086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801008a:	4293      	cmp	r3, r2
 801008c:	d016      	beq.n	80100bc <uart_stm32_init+0x14c>
 801008e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010092:	4293      	cmp	r3, r2
 8010094:	d012      	beq.n	80100bc <uart_stm32_init+0x14c>
 8010096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801009a:	4293      	cmp	r3, r2
 801009c:	d00e      	beq.n	80100bc <uart_stm32_init+0x14c>
 801009e:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d00a      	beq.n	80100bc <uart_stm32_init+0x14c>
 80100a6:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d006      	beq.n	80100bc <uart_stm32_init+0x14c>
 80100ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d002      	beq.n	80100bc <uart_stm32_init+0x14c>
 80100b6:	4a1e      	ldr	r2, [pc, #120]	; (8010130 <uart_stm32_init+0x1c0>)
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d12f      	bne.n	801011c <uart_stm32_init+0x1ac>
  SET_BIT(USARTx->CR3, USART_CR3_DEM);
 80100bc:	689a      	ldr	r2, [r3, #8]
 80100be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80100c2:	609a      	str	r2, [r3, #8]
		LL_USART_SetDEAssertionTime(config->usart, config->de_assert_time);
 80100c4:	6822      	ldr	r2, [r4, #0]
 80100c6:	7e61      	ldrb	r1, [r4, #25]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
 80100c8:	6813      	ldr	r3, [r2, #0]
 80100ca:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 80100ce:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80100d2:	6013      	str	r3, [r2, #0]
		LL_USART_SetDEDeassertionTime(config->usart, config->de_deassert_time);
 80100d4:	6822      	ldr	r2, [r4, #0]
 80100d6:	7ea1      	ldrb	r1, [r4, #26]
  MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
 80100d8:	6813      	ldr	r3, [r2, #0]
 80100da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80100de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80100e2:	6013      	str	r3, [r2, #0]
		if (config->de_invert) {
 80100e4:	7ee3      	ldrb	r3, [r4, #27]
 80100e6:	b123      	cbz	r3, 80100f2 <uart_stm32_init+0x182>
			LL_USART_SetDESignalPolarity(config->usart, LL_USART_DE_POLARITY_LOW);
 80100e8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
 80100ea:	6893      	ldr	r3, [r2, #8]
 80100ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100f0:	6093      	str	r3, [r2, #8]
	LL_USART_Enable(config->usart);
 80100f2:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80100f4:	6813      	ldr	r3, [r2, #0]
 80100f6:	f043 0301 	orr.w	r3, r3, #1
 80100fa:	6013      	str	r3, [r2, #0]
	while (!(LL_USART_IsActiveFlag_TEACK(config->usart))) {
 80100fc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80100fe:	69da      	ldr	r2, [r3, #28]
 8010100:	0291      	lsls	r1, r2, #10
 8010102:	d5fc      	bpl.n	80100fe <uart_stm32_init+0x18e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8010104:	69da      	ldr	r2, [r3, #28]
 8010106:	0252      	lsls	r2, r2, #9
 8010108:	d5fc      	bpl.n	8010104 <uart_stm32_init+0x194>
	config->irq_config_func(dev);
 801010a:	6a23      	ldr	r3, [r4, #32]
 801010c:	4630      	mov	r0, r6
 801010e:	4798      	blx	r3
	return 0;
 8010110:	e739      	b.n	800ff86 <uart_stm32_init+0x16>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8010112:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8010116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801011a:	e774      	b.n	8010006 <uart_stm32_init+0x96>
			return -EINVAL;
 801011c:	f06f 0515 	mvn.w	r5, #21
 8010120:	e731      	b.n	800ff86 <uart_stm32_init+0x16>
	if (err < 0) {
 8010122:	4605      	mov	r5, r0
 8010124:	e72f      	b.n	800ff86 <uart_stm32_init+0x16>
 8010126:	bf00      	nop
 8010128:	0801c24c 	.word	0x0801c24c
 801012c:	40011000 	.word	0x40011000
 8010130:	58000c00 	.word	0x58000c00

08010134 <uart_stm32_configure>:
{
 8010134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8010138:	790b      	ldrb	r3, [r1, #4]
{
 801013a:	460c      	mov	r4, r1
	const struct uart_stm32_config *config = dev->config;
 801013c:	6845      	ldr	r5, [r0, #4]
	switch (parity) {
 801013e:	2b01      	cmp	r3, #1
	struct uart_stm32_data *data = dev->data;
 8010140:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8010142:	d01c      	beq.n	801017e <uart_stm32_configure+0x4a>
		return LL_USART_PARITY_NONE;
 8010144:	2b02      	cmp	r3, #2
 8010146:	bf0c      	ite	eq
 8010148:	f44f 6e80 	moveq.w	lr, #1024	; 0x400
 801014c:	f04f 0e00 	movne.w	lr, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8010150:	f894 9005 	ldrb.w	r9, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8010154:	79a1      	ldrb	r1, [r4, #6]
 8010156:	f1b9 0f02 	cmp.w	r9, #2
 801015a:	bf96      	itet	ls
 801015c:	4a52      	ldrls	r2, [pc, #328]	; (80102a8 <uart_stm32_configure+0x174>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 801015e:	f44f 5200 	movhi.w	r2, #8192	; 0x2000
 8010162:	f832 2019 	ldrhls.w	r2, [r2, r9, lsl #1]
	switch (db) {
 8010166:	2902      	cmp	r1, #2
 8010168:	d00c      	beq.n	8010184 <uart_stm32_configure+0x50>
 801016a:	2904      	cmp	r1, #4
 801016c:	f000 8096 	beq.w	801029c <uart_stm32_configure+0x168>
			return LL_USART_DATAWIDTH_8B;
 8010170:	2b00      	cmp	r3, #0
 8010172:	bf14      	ite	ne
 8010174:	f44f 5c80 	movne.w	ip, #4096	; 0x1000
 8010178:	f04f 0c00 	moveq.w	ip, #0
 801017c:	e008      	b.n	8010190 <uart_stm32_configure+0x5c>
	switch (parity) {
 801017e:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8010182:	e7e5      	b.n	8010150 <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 8010184:	2b00      	cmp	r3, #0
 8010186:	bf0c      	ite	eq
 8010188:	f04f 5c80 	moveq.w	ip, #268435456	; 0x10000000
 801018c:	f04f 0c00 	movne.w	ip, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8010190:	f894 8007 	ldrb.w	r8, [r4, #7]
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8010194:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8010198:	f1b8 0f01 	cmp.w	r8, #1
 801019c:	bf14      	ite	ne
 801019e:	2700      	movne	r7, #0
 80101a0:	f44f 7740 	moveq.w	r7, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80101a4:	f1ba 0f01 	cmp.w	sl, #1
 80101a8:	d97b      	bls.n	80102a2 <uart_stm32_configure+0x16e>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 80101aa:	b10b      	cbz	r3, 80101b0 <uart_stm32_configure+0x7c>
 80101ac:	2904      	cmp	r1, #4
 80101ae:	d078      	beq.n	80102a2 <uart_stm32_configure+0x16e>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80101b0:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 80101b4:	d075      	beq.n	80102a2 <uart_stm32_configure+0x16e>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80101b6:	2901      	cmp	r1, #1
 80101b8:	d973      	bls.n	80102a2 <uart_stm32_configure+0x16e>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 80101ba:	2904      	cmp	r1, #4
 80101bc:	d071      	beq.n	80102a2 <uart_stm32_configure+0x16e>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 80101be:	682b      	ldr	r3, [r5, #0]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 80101c0:	f1b8 0f00 	cmp.w	r8, #0
 80101c4:	d024      	beq.n	8010210 <uart_stm32_configure+0xdc>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 80101c6:	4939      	ldr	r1, [pc, #228]	; (80102ac <uart_stm32_configure+0x178>)
 80101c8:	428b      	cmp	r3, r1
 80101ca:	d01e      	beq.n	801020a <uart_stm32_configure+0xd6>
 80101cc:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 80101d0:	428b      	cmp	r3, r1
 80101d2:	d01a      	beq.n	801020a <uart_stm32_configure+0xd6>
 80101d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80101d8:	428b      	cmp	r3, r1
 80101da:	d016      	beq.n	801020a <uart_stm32_configure+0xd6>
 80101dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80101e0:	428b      	cmp	r3, r1
 80101e2:	d012      	beq.n	801020a <uart_stm32_configure+0xd6>
 80101e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80101e8:	428b      	cmp	r3, r1
 80101ea:	d00e      	beq.n	801020a <uart_stm32_configure+0xd6>
 80101ec:	f501 4144 	add.w	r1, r1, #50176	; 0xc400
 80101f0:	428b      	cmp	r3, r1
 80101f2:	d00a      	beq.n	801020a <uart_stm32_configure+0xd6>
 80101f4:	f5a1 411c 	sub.w	r1, r1, #39936	; 0x9c00
 80101f8:	428b      	cmp	r3, r1
 80101fa:	d006      	beq.n	801020a <uart_stm32_configure+0xd6>
 80101fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010200:	428b      	cmp	r3, r1
 8010202:	d002      	beq.n	801020a <uart_stm32_configure+0xd6>
 8010204:	492a      	ldr	r1, [pc, #168]	; (80102b0 <uart_stm32_configure+0x17c>)
 8010206:	428b      	cmp	r3, r1
 8010208:	d14b      	bne.n	80102a2 <uart_stm32_configure+0x16e>
 801020a:	f1b8 0f01 	cmp.w	r8, #1
 801020e:	d148      	bne.n	80102a2 <uart_stm32_configure+0x16e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8010210:	6819      	ldr	r1, [r3, #0]
 8010212:	f021 0101 	bic.w	r1, r1, #1
 8010216:	6019      	str	r1, [r3, #0]
	return LL_USART_GetParity(config->usart);
 8010218:	6841      	ldr	r1, [r0, #4]
 801021a:	6809      	ldr	r1, [r1, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801021c:	680b      	ldr	r3, [r1, #0]
 801021e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8010222:	459e      	cmp	lr, r3
 8010224:	d005      	beq.n	8010232 <uart_stm32_configure+0xfe>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8010226:	680b      	ldr	r3, [r1, #0]
 8010228:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801022c:	ea43 030e 	orr.w	r3, r3, lr
 8010230:	600b      	str	r3, [r1, #0]
	return LL_USART_GetStopBitsLength(config->usart);
 8010232:	6843      	ldr	r3, [r0, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8010236:	6859      	ldr	r1, [r3, #4]
 8010238:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 801023c:	428a      	cmp	r2, r1
 801023e:	d004      	beq.n	801024a <uart_stm32_configure+0x116>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8010240:	6859      	ldr	r1, [r3, #4]
 8010242:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8010246:	4311      	orrs	r1, r2
 8010248:	6059      	str	r1, [r3, #4]
	return LL_USART_GetDataWidth(config->usart);
 801024a:	6843      	ldr	r3, [r0, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8010254:	4594      	cmp	ip, r2
 8010256:	d005      	beq.n	8010264 <uart_stm32_configure+0x130>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 801025e:	ea42 020c 	orr.w	r2, r2, ip
 8010262:	601a      	str	r2, [r3, #0]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8010264:	6843      	ldr	r3, [r0, #4]
 8010266:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8010268:	6893      	ldr	r3, [r2, #8]
 801026a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 801026e:	429f      	cmp	r7, r3
 8010270:	d004      	beq.n	801027c <uart_stm32_configure+0x148>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8010272:	6893      	ldr	r3, [r2, #8]
 8010274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010278:	433b      	orrs	r3, r7
 801027a:	6093      	str	r3, [r2, #8]
	if (cfg->baudrate != data->baud_rate) {
 801027c:	6821      	ldr	r1, [r4, #0]
 801027e:	6833      	ldr	r3, [r6, #0]
 8010280:	4299      	cmp	r1, r3
 8010282:	d003      	beq.n	801028c <uart_stm32_configure+0x158>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8010284:	f00a fbcc 	bl	801aa20 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8010288:	6823      	ldr	r3, [r4, #0]
 801028a:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 801028c:	682a      	ldr	r2, [r5, #0]
	return 0;
 801028e:	2000      	movs	r0, #0
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8010290:	6813      	ldr	r3, [r2, #0]
 8010292:	f043 0301 	orr.w	r3, r3, #1
 8010296:	6013      	str	r3, [r2, #0]
};
 8010298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 801029c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 80102a0:	e776      	b.n	8010190 <uart_stm32_configure+0x5c>
		return -ENOTSUP;
 80102a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80102a6:	e7f7      	b.n	8010298 <uart_stm32_configure+0x164>
 80102a8:	0801db88 	.word	0x0801db88
 80102ac:	40011000 	.word	0x40011000
 80102b0:	58000c00 	.word	0x58000c00

080102b4 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 80102b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 80102b8:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 80102ba:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 80102bc:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 80102be:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 80102c0:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80102c4:	4b08      	ldr	r3, [pc, #32]	; (80102e8 <elapsed+0x34>)
 80102c6:	4909      	ldr	r1, [pc, #36]	; (80102ec <elapsed+0x38>)
 80102c8:	d101      	bne.n	80102ce <elapsed+0x1a>
	    || (val1 < val2)) {
 80102ca:	4282      	cmp	r2, r0
 80102cc:	d206      	bcs.n	80102dc <elapsed+0x28>
		overflow_cyc += last_load;
 80102ce:	681a      	ldr	r2, [r3, #0]
 80102d0:	680c      	ldr	r4, [r1, #0]
 80102d2:	4422      	add	r2, r4
 80102d4:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 80102d6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80102da:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	680a      	ldr	r2, [r1, #0]
 80102e0:	4413      	add	r3, r2
}
 80102e2:	1a18      	subs	r0, r3, r0
 80102e4:	bd10      	pop	{r4, pc}
 80102e6:	bf00      	nop
 80102e8:	24002fe0 	.word	0x24002fe0
 80102ec:	24002fdc 	.word	0x24002fdc

080102f0 <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80102f0:	4b09      	ldr	r3, [pc, #36]	; (8010318 <sys_clock_driver_init+0x28>)
 80102f2:	2210      	movs	r2, #16
static int sys_clock_driver_init(void)
{

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
 80102f4:	2000      	movs	r0, #0
 80102f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	last_load = CYC_PER_TICK - 1;
 80102fa:	f242 527f 	movw	r2, #9599	; 0x257f
 80102fe:	4b07      	ldr	r3, [pc, #28]	; (801031c <sys_clock_driver_init+0x2c>)
 8010300:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8010302:	4b07      	ldr	r3, [pc, #28]	; (8010320 <sys_clock_driver_init+0x30>)
 8010304:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8010306:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801030a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 801030c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 801030e:	691a      	ldr	r2, [r3, #16]
 8010310:	f042 0207 	orr.w	r2, r2, #7
 8010314:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8010316:	4770      	bx	lr
 8010318:	e000ed00 	.word	0xe000ed00
 801031c:	24002fdc 	.word	0x24002fdc
 8010320:	24002fe0 	.word	0x24002fe0

08010324 <sys_clock_isr>:
{
 8010324:	b508      	push	{r3, lr}
	elapsed();
 8010326:	f7ff ffc5 	bl	80102b4 <elapsed>
	cycle_count += overflow_cyc;
 801032a:	4b0c      	ldr	r3, [pc, #48]	; (801035c <sys_clock_isr+0x38>)
 801032c:	4a0c      	ldr	r2, [pc, #48]	; (8010360 <sys_clock_isr+0x3c>)
 801032e:	6818      	ldr	r0, [r3, #0]
 8010330:	6811      	ldr	r1, [r2, #0]
 8010332:	4408      	add	r0, r1
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8010334:	f44f 5116 	mov.w	r1, #9600	; 0x2580
	cycle_count += overflow_cyc;
 8010338:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 801033a:	2200      	movs	r2, #0
 801033c:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 801033e:	4a09      	ldr	r2, [pc, #36]	; (8010364 <sys_clock_isr+0x40>)
 8010340:	6813      	ldr	r3, [r2, #0]
 8010342:	1ac0      	subs	r0, r0, r3
 8010344:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8010348:	fb01 3300 	mla	r3, r1, r0, r3
 801034c:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 801034e:	f002 fcd1 	bl	8012cf4 <sys_clock_announce>
}
 8010352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8010356:	f7f3 bc39 	b.w	8003bcc <z_arm_exc_exit>
 801035a:	bf00      	nop
 801035c:	24002fe0 	.word	0x24002fe0
 8010360:	24002fd8 	.word	0x24002fd8
 8010364:	24002fd4 	.word	0x24002fd4

08010368 <sys_clock_set_timeout>:
{
 8010368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801036a:	4c32      	ldr	r4, [pc, #200]	; (8010434 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 801036c:	b159      	cbz	r1, 8010386 <sys_clock_set_timeout+0x1e>
 801036e:	1c42      	adds	r2, r0, #1
 8010370:	d109      	bne.n	8010386 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8010372:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8010376:	6913      	ldr	r3, [r2, #16]
 8010378:	f023 0301 	bic.w	r3, r3, #1
 801037c:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 801037e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8010382:	6023      	str	r3, [r4, #0]
}
 8010384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8010386:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8010388:	6826      	ldr	r6, [r4, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 801038a:	d023      	beq.n	80103d4 <sys_clock_set_timeout+0x6c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 801038c:	2801      	cmp	r0, #1
 801038e:	dd24      	ble.n	80103da <sys_clock_set_timeout+0x72>
 8010390:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8010394:	4298      	cmp	r0, r3
 8010396:	dc22      	bgt.n	80103de <sys_clock_set_timeout+0x76>
 8010398:	1e47      	subs	r7, r0, #1
	__asm__ volatile(
 801039a:	f04f 0310 	mov.w	r3, #16
 801039e:	f3ef 8511 	mrs	r5, BASEPRI
 80103a2:	f383 8812 	msr	BASEPRI_MAX, r3
 80103a6:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 80103aa:	f7ff ff83 	bl	80102b4 <elapsed>
	val1 = SysTick->VAL;
 80103ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	cycle_count += pending;
 80103b2:	4921      	ldr	r1, [pc, #132]	; (8010438 <sys_clock_set_timeout+0xd0>)
	overflow_cyc = 0U;
 80103b4:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 80103b6:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 80103ba:	680b      	ldr	r3, [r1, #0]
 80103bc:	4418      	add	r0, r3
	overflow_cyc = 0U;
 80103be:	4b1f      	ldr	r3, [pc, #124]	; (801043c <sys_clock_set_timeout+0xd4>)
 80103c0:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 80103c2:	4b1f      	ldr	r3, [pc, #124]	; (8010440 <sys_clock_set_timeout+0xd8>)
	cycle_count += pending;
 80103c4:	6008      	str	r0, [r1, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 80103c6:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 80103c8:	1a83      	subs	r3, r0, r2
 80103ca:	d50a      	bpl.n	80103e2 <sys_clock_set_timeout+0x7a>
		delay = MAX(delay, MIN_DELAY);
 80103cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 80103d0:	6023      	str	r3, [r4, #0]
 80103d2:	e019      	b.n	8010408 <sys_clock_set_timeout+0xa0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80103d4:	f240 60d2 	movw	r0, #1746	; 0x6d2
 80103d8:	e7de      	b.n	8010398 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80103da:	2700      	movs	r7, #0
 80103dc:	e7dd      	b.n	801039a <sys_clock_set_timeout+0x32>
 80103de:	461f      	mov	r7, r3
 80103e0:	e7db      	b.n	801039a <sys_clock_set_timeout+0x32>
		delay = ticks * CYC_PER_TICK;
 80103e2:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
		delay -= unannounced;
 80103e6:	1a12      	subs	r2, r2, r0
		delay += unannounced;
 80103e8:	fb0e 3307 	mla	r3, lr, r7, r3
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
 80103ec:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 80103f0:	333f      	adds	r3, #63	; 0x3f
 80103f2:	fbb3 f3fe 	udiv	r3, r3, lr
		delay -= unannounced;
 80103f6:	fb0e 2303 	mla	r3, lr, r3, r2
		delay = MAX(delay, MIN_DELAY);
 80103fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80103fe:	d9e5      	bls.n	80103cc <sys_clock_set_timeout+0x64>
		if (delay > MAX_CYCLES) {
 8010400:	4a10      	ldr	r2, [pc, #64]	; (8010444 <sys_clock_set_timeout+0xdc>)
 8010402:	4293      	cmp	r3, r2
 8010404:	d9e4      	bls.n	80103d0 <sys_clock_set_timeout+0x68>
			last_load = MAX_CYCLES;
 8010406:	6022      	str	r2, [r4, #0]
	val2 = SysTick->VAL;
 8010408:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 801040c:	6824      	ldr	r4, [r4, #0]
	val2 = SysTick->VAL;
 801040e:	6993      	ldr	r3, [r2, #24]
	SysTick->LOAD = last_load - 1;
 8010410:	3c01      	subs	r4, #1
	if (val1 < val2) {
 8010412:	459c      	cmp	ip, r3
	SysTick->LOAD = last_load - 1;
 8010414:	6154      	str	r4, [r2, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8010416:	f04f 0400 	mov.w	r4, #0
		cycle_count += (val1 + (last_load_ - val2));
 801041a:	bf38      	it	cc
 801041c:	44b4      	addcc	ip, r6
	SysTick->VAL = 0; /* resets timer to last_load */
 801041e:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 8010420:	ebac 0c03 	sub.w	ip, ip, r3
 8010424:	4460      	add	r0, ip
 8010426:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 8010428:	f385 8811 	msr	BASEPRI, r5
 801042c:	f3bf 8f6f 	isb	sy
 8010430:	e7a8      	b.n	8010384 <sys_clock_set_timeout+0x1c>
 8010432:	bf00      	nop
 8010434:	24002fdc 	.word	0x24002fdc
 8010438:	24002fd8 	.word	0x24002fd8
 801043c:	24002fe0 	.word	0x24002fe0
 8010440:	24002fd4 	.word	0x24002fd4
 8010444:	00ffc300 	.word	0x00ffc300

08010448 <sys_clock_elapsed>:
{
 8010448:	b510      	push	{r4, lr}
	__asm__ volatile(
 801044a:	f04f 0310 	mov.w	r3, #16
 801044e:	f3ef 8411 	mrs	r4, BASEPRI
 8010452:	f383 8812 	msr	BASEPRI_MAX, r3
 8010456:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 801045a:	f7ff ff2b 	bl	80102b4 <elapsed>
 801045e:	4b07      	ldr	r3, [pc, #28]	; (801047c <sys_clock_elapsed+0x34>)
 8010460:	4a07      	ldr	r2, [pc, #28]	; (8010480 <sys_clock_elapsed+0x38>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	6812      	ldr	r2, [r2, #0]
 8010466:	1a9b      	subs	r3, r3, r2
 8010468:	4403      	add	r3, r0
	__asm__ volatile(
 801046a:	f384 8811 	msr	BASEPRI, r4
 801046e:	f3bf 8f6f 	isb	sy
}
 8010472:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8010476:	fbb3 f0f0 	udiv	r0, r3, r0
 801047a:	bd10      	pop	{r4, pc}
 801047c:	24002fd8 	.word	0x24002fd8
 8010480:	24002fd4 	.word	0x24002fd4

08010484 <sys_clock_cycle_get_32>:
{
 8010484:	b510      	push	{r4, lr}
	__asm__ volatile(
 8010486:	f04f 0310 	mov.w	r3, #16
 801048a:	f3ef 8411 	mrs	r4, BASEPRI
 801048e:	f383 8812 	msr	BASEPRI_MAX, r3
 8010492:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 8010496:	f7ff ff0d 	bl	80102b4 <elapsed>
 801049a:	4b04      	ldr	r3, [pc, #16]	; (80104ac <sys_clock_cycle_get_32+0x28>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4418      	add	r0, r3
	__asm__ volatile(
 80104a0:	f384 8811 	msr	BASEPRI, r4
 80104a4:	f3bf 8f6f 	isb	sy
}
 80104a8:	bd10      	pop	{r4, pc}
 80104aa:	bf00      	nop
 80104ac:	24002fd8 	.word	0x24002fd8

080104b0 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80104b0:	4a03      	ldr	r2, [pc, #12]	; (80104c0 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 80104b2:	6853      	ldr	r3, [r2, #4]
 80104b4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80104b8:	4303      	orrs	r3, r0
 80104ba:	6053      	str	r3, [r2, #4]
}
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	58000400 	.word	0x58000400

080104c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80104c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80104c8:	4c4d      	ldr	r4, [pc, #308]	; (8010600 <HAL_RCC_GetSysClockFreq+0x13c>)
 80104ca:	6923      	ldr	r3, [r4, #16]
 80104cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80104d0:	2b10      	cmp	r3, #16
 80104d2:	f000 8090 	beq.w	80105f6 <HAL_RCC_GetSysClockFreq+0x132>
 80104d6:	2b18      	cmp	r3, #24
 80104d8:	d00d      	beq.n	80104f6 <HAL_RCC_GetSysClockFreq+0x32>
 80104da:	2b00      	cmp	r3, #0
 80104dc:	f040 808d 	bne.w	80105fa <HAL_RCC_GetSysClockFreq+0x136>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80104e0:	6823      	ldr	r3, [r4, #0]
 80104e2:	4848      	ldr	r0, [pc, #288]	; (8010604 <HAL_RCC_GetSysClockFreq+0x140>)
 80104e4:	f013 0f20 	tst.w	r3, #32
 80104e8:	d003      	beq.n	80104f2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80104ea:	6823      	ldr	r3, [r4, #0]
 80104ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80104f0:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80104f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80104f6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80104f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80104fa:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
      if (pllm != 0U)
 80104fe:	f413 7f7c 	tst.w	r3, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8010502:	f3c3 1005 	ubfx	r0, r3, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010506:	6b66      	ldr	r6, [r4, #52]	; 0x34
      if (pllm != 0U)
 8010508:	d0f3      	beq.n	80104f2 <HAL_RCC_GetSysClockFreq+0x2e>
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801050a:	f7ef ff7b 	bl	8000404 <__aeabi_ui2f>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801050e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010512:	4605      	mov	r5, r0
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010514:	f008 0001 	and.w	r0, r8, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010518:	f007 0703 	and.w	r7, r7, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801051c:	4370      	muls	r0, r6
 801051e:	f7ef ff71 	bl	8000404 <__aeabi_ui2f>
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010522:	f04f 5164 	mov.w	r1, #956301312	; 0x39000000
 8010526:	f7ef ffc5 	bl	80004b4 <__aeabi_fmul>
 801052a:	2f01      	cmp	r7, #1
 801052c:	4606      	mov	r6, r0
 801052e:	d052      	beq.n	80105d6 <HAL_RCC_GetSysClockFreq+0x112>
 8010530:	2f02      	cmp	r7, #2
 8010532:	d040      	beq.n	80105b6 <HAL_RCC_GetSysClockFreq+0xf2>
 8010534:	2f00      	cmp	r7, #0
 8010536:	d14e      	bne.n	80105d6 <HAL_RCC_GetSysClockFreq+0x112>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010538:	6823      	ldr	r3, [r4, #0]
 801053a:	069b      	lsls	r3, r3, #26
 801053c:	d529      	bpl.n	8010592 <HAL_RCC_GetSysClockFreq+0xce>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801053e:	6823      	ldr	r3, [r4, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010540:	4830      	ldr	r0, [pc, #192]	; (8010604 <HAL_RCC_GetSysClockFreq+0x140>)
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010542:	f3c3 03c1 	ubfx	r3, r3, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010546:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8010548:	40d8      	lsrs	r0, r3
 801054a:	f7ef ff5b 	bl	8000404 <__aeabi_ui2f>
 801054e:	4629      	mov	r1, r5
 8010550:	f7f0 f864 	bl	800061c <__aeabi_fdiv>
 8010554:	4604      	mov	r4, r0
 8010556:	f3c7 0008 	ubfx	r0, r7, #0, #9
 801055a:	f7ef ff53 	bl	8000404 <__aeabi_ui2f>
 801055e:	4631      	mov	r1, r6
 8010560:	f7ef fea0 	bl	80002a4 <__addsf3>
 8010564:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010568:	f7ef fe9c 	bl	80002a4 <__addsf3>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801056c:	4601      	mov	r1, r0
 801056e:	4620      	mov	r0, r4
 8010570:	f7ef ffa0 	bl	80004b4 <__aeabi_fmul>
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8010574:	4b22      	ldr	r3, [pc, #136]	; (8010600 <HAL_RCC_GetSysClockFreq+0x13c>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010576:	4604      	mov	r4, r0
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8010578:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801057a:	f3c0 2046 	ubfx	r0, r0, #9, #7
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801057e:	3001      	adds	r0, #1
 8010580:	f7ef ff40 	bl	8000404 <__aeabi_ui2f>
 8010584:	4601      	mov	r1, r0
 8010586:	4620      	mov	r0, r4
 8010588:	f7f0 f848 	bl	800061c <__aeabi_fdiv>
 801058c:	f7f0 f8e2 	bl	8000754 <__aeabi_f2uiz>
 8010590:	e7af      	b.n	80104f2 <HAL_RCC_GetSysClockFreq+0x2e>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010592:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010594:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8010598:	f7ef ff34 	bl	8000404 <__aeabi_ui2f>
 801059c:	4631      	mov	r1, r6
 801059e:	f7ef fe81 	bl	80002a4 <__addsf3>
 80105a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80105a6:	f7ef fe7d 	bl	80002a4 <__addsf3>
 80105aa:	4629      	mov	r1, r5
 80105ac:	4604      	mov	r4, r0
 80105ae:	4816      	ldr	r0, [pc, #88]	; (8010608 <HAL_RCC_GetSysClockFreq+0x144>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80105b0:	f7f0 f834 	bl	800061c <__aeabi_fdiv>
 80105b4:	e7da      	b.n	801056c <HAL_RCC_GetSysClockFreq+0xa8>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80105b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80105b8:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80105bc:	f7ef ff22 	bl	8000404 <__aeabi_ui2f>
 80105c0:	4631      	mov	r1, r6
 80105c2:	f7ef fe6f 	bl	80002a4 <__addsf3>
 80105c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80105ca:	f7ef fe6b 	bl	80002a4 <__addsf3>
 80105ce:	4629      	mov	r1, r5
 80105d0:	4604      	mov	r4, r0
 80105d2:	480e      	ldr	r0, [pc, #56]	; (801060c <HAL_RCC_GetSysClockFreq+0x148>)
 80105d4:	e7ec      	b.n	80105b0 <HAL_RCC_GetSysClockFreq+0xec>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80105d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80105d8:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80105dc:	f7ef ff12 	bl	8000404 <__aeabi_ui2f>
 80105e0:	4631      	mov	r1, r6
 80105e2:	f7ef fe5f 	bl	80002a4 <__addsf3>
 80105e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80105ea:	f7ef fe5b 	bl	80002a4 <__addsf3>
 80105ee:	4629      	mov	r1, r5
 80105f0:	4604      	mov	r4, r0
 80105f2:	4807      	ldr	r0, [pc, #28]	; (8010610 <HAL_RCC_GetSysClockFreq+0x14c>)
 80105f4:	e7dc      	b.n	80105b0 <HAL_RCC_GetSysClockFreq+0xec>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80105f6:	4807      	ldr	r0, [pc, #28]	; (8010614 <HAL_RCC_GetSysClockFreq+0x150>)
 80105f8:	e77b      	b.n	80104f2 <HAL_RCC_GetSysClockFreq+0x2e>
      sysclockfreq = CSI_VALUE;
 80105fa:	4807      	ldr	r0, [pc, #28]	; (8010618 <HAL_RCC_GetSysClockFreq+0x154>)
 80105fc:	e779      	b.n	80104f2 <HAL_RCC_GetSysClockFreq+0x2e>
 80105fe:	bf00      	nop
 8010600:	58024400 	.word	0x58024400
 8010604:	03d09000 	.word	0x03d09000
 8010608:	4c742400 	.word	0x4c742400
 801060c:	4af42400 	.word	0x4af42400
 8010610:	4a742400 	.word	0x4a742400
 8010614:	007a1200 	.word	0x007a1200
 8010618:	003d0900 	.word	0x003d0900

0801061c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801061c:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801061e:	f7ff ff51 	bl	80104c4 <HAL_RCC_GetSysClockFreq>
 8010622:	4a0b      	ldr	r2, [pc, #44]	; (8010650 <HAL_RCC_GetHCLKFreq+0x34>)
 8010624:	490b      	ldr	r1, [pc, #44]	; (8010654 <HAL_RCC_GetHCLKFreq+0x38>)
 8010626:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010628:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801062a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801062e:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010632:	5ccb      	ldrb	r3, [r1, r3]
 8010634:	f003 031f 	and.w	r3, r3, #31
 8010638:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801063c:	5c88      	ldrb	r0, [r1, r2]
 801063e:	4a06      	ldr	r2, [pc, #24]	; (8010658 <HAL_RCC_GetHCLKFreq+0x3c>)
 8010640:	f000 001f 	and.w	r0, r0, #31
 8010644:	fa23 f000 	lsr.w	r0, r3, r0
 8010648:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801064a:	4a04      	ldr	r2, [pc, #16]	; (801065c <HAL_RCC_GetHCLKFreq+0x40>)
 801064c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 801064e:	bd08      	pop	{r3, pc}
 8010650:	58024400 	.word	0x58024400
 8010654:	080219b6 	.word	0x080219b6
 8010658:	24001010 	.word	0x24001010
 801065c:	2400100c 	.word	0x2400100c

08010660 <ETH_SetDMAConfig>:
  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
}

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8010660:	b530      	push	{r4, r5, lr}
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8010662:	6802      	ldr	r2, [r0, #0]
 8010664:	680c      	ldr	r4, [r1, #0]
 8010666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801066a:	6813      	ldr	r3, [r2, #0]
 801066c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8010670:	f023 0302 	bic.w	r3, r3, #2
 8010674:	4323      	orrs	r3, r4
 8010676:	6013      	str	r3, [r2, #0]
  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8010678:	6804      	ldr	r4, [r0, #0]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 801067a:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 801067c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8010680:	790d      	ldrb	r5, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8010682:	03db      	lsls	r3, r3, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8010684:	6862      	ldr	r2, [r4, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8010686:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 801068a:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 801068c:	f422 4250 	bic.w	r2, r2, #53248	; 0xd000
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8010690:	432b      	orrs	r3, r5
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8010692:	f022 0201 	bic.w	r2, r2, #1
 8010696:	4313      	orrs	r3, r2
 8010698:	6063      	str	r3, [r4, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 801069a:	6802      	ldr	r2, [r0, #0]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 801069c:	7b4c      	ldrb	r4, [r1, #13]
 801069e:	6a0b      	ldr	r3, [r1, #32]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80106a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80106a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80106a8:	f8d2 5100 	ldr.w	r5, [r2, #256]	; 0x100
 80106ac:	4c13      	ldr	r4, [pc, #76]	; (80106fc <ETH_SetDMAConfig+0x9c>)
 80106ae:	402c      	ands	r4, r5
 80106b0:	4323      	orrs	r3, r4
 80106b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80106b6:	7f4b      	ldrb	r3, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80106b8:	7d0c      	ldrb	r4, [r1, #20]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80106ba:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80106bc:	031b      	lsls	r3, r3, #12
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80106be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  dmaregval = (dmaconf->TxDMABurstLength |
 80106c2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80106c6:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80106c8:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 80106cc:	4323      	orrs	r3, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80106ce:	4c0c      	ldr	r4, [pc, #48]	; (8010700 <ETH_SetDMAConfig+0xa0>)
 80106d0:	402c      	ands	r4, r5
 80106d2:	4323      	orrs	r3, r4
 80106d4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80106d8:	6800      	ldr	r0, [r0, #0]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80106da:	7f0c      	ldrb	r4, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80106dc:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80106e0:	698b      	ldr	r3, [r1, #24]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80106e2:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80106e6:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80106ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80106ee:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80106f2:	4313      	orrs	r3, r2
 80106f4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
}
 80106f8:	bd30      	pop	{r4, r5, pc}
 80106fa:	bf00      	nop
 80106fc:	fffec000 	.word	0xfffec000
 8010700:	ffc0efef 	.word	0xffc0efef

08010704 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8010704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8010708:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801070a:	9201      	str	r2, [sp, #4]
 801070c:	eb00 0684 	add.w	r6, r0, r4, lsl #2
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8010710:	69b3      	ldr	r3, [r6, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8010712:	68da      	ldr	r2, [r3, #12]
 8010714:	2a00      	cmp	r2, #0
 8010716:	da03      	bge.n	8010720 <ETH_Prepare_Tx_Descriptors+0x1c>
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);

      return HAL_ETH_ERROR_BUSY;
 8010718:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 801071a:	b003      	add	sp, #12
 801071c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8010720:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8010722:	2a00      	cmp	r2, #0
 8010724:	d1f8      	bne.n	8010718 <ETH_Prepare_Tx_Descriptors+0x14>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8010726:	680a      	ldr	r2, [r1, #0]
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8010728:	688f      	ldr	r7, [r1, #8]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 801072a:	0752      	lsls	r2, r2, #29
 801072c:	d52b      	bpl.n	8010786 <ETH_Prepare_Tx_Descriptors+0x82>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 801072e:	68dd      	ldr	r5, [r3, #12]
 8010730:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8010732:	0c2d      	lsrs	r5, r5, #16
 8010734:	042d      	lsls	r5, r5, #16
 8010736:	432a      	orrs	r2, r5
 8010738:	60da      	str	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 801073a:	68da      	ldr	r2, [r3, #12]
 801073c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010740:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8010742:	6805      	ldr	r5, [r0, #0]
 8010744:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8010746:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801074a:	662a      	str	r2, [r5, #96]	; 0x60
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 801074c:	680a      	ldr	r2, [r1, #0]
 801074e:	0715      	lsls	r5, r2, #28
 8010750:	d519      	bpl.n	8010786 <ETH_Prepare_Tx_Descriptors+0x82>
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8010752:	689a      	ldr	r2, [r3, #8]
 8010754:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8010756:	b292      	uxth	r2, r2
 8010758:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 801075c:	609a      	str	r2, [r3, #8]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 801075e:	68da      	ldr	r2, [r3, #12]
 8010760:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010764:	60da      	str	r2, [r3, #12]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8010766:	68dd      	ldr	r5, [r3, #12]
 8010768:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 801076a:	f425 2540 	bic.w	r5, r5, #786432	; 0xc0000
 801076e:	432a      	orrs	r2, r5
 8010770:	60da      	str	r2, [r3, #12]
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8010772:	6805      	ldr	r5, [r0, #0]
 8010774:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8010776:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801077a:	666a      	str	r2, [r5, #100]	; 0x64
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 801077c:	6805      	ldr	r5, [r0, #0]
 801077e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8010780:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010784:	652a      	str	r2, [r5, #80]	; 0x50
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8010786:	680a      	ldr	r2, [r1, #0]
 8010788:	06d2      	lsls	r2, r2, #27
 801078a:	d50b      	bpl.n	80107a4 <ETH_Prepare_Tx_Descriptors+0xa0>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 801078c:	689d      	ldr	r5, [r3, #8]
 801078e:	698a      	ldr	r2, [r1, #24]
 8010790:	f425 557f 	bic.w	r5, r5, #16320	; 0x3fc0
 8010794:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8010798:	432a      	orrs	r2, r5
 801079a:	609a      	str	r2, [r3, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 801079c:	68da      	ldr	r2, [r3, #12]
 801079e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80107a2:	60da      	str	r2, [r3, #12]
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80107a4:	680a      	ldr	r2, [r1, #0]
  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80107a6:	f012 0214 	ands.w	r2, r2, #20
 80107aa:	d01e      	beq.n	80107ea <ETH_Prepare_Tx_Descriptors+0xe6>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80107ac:	68da      	ldr	r2, [r3, #12]
 80107ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80107b2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80107b4:	f3bf 8f5f 	dmb	sy
    INCR_TX_DESC_INDEX(descidx, 1U);
 80107b8:	f104 0a01 	add.w	sl, r4, #1
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80107bc:	68da      	ldr	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80107be:	f1ba 0f03 	cmp.w	sl, #3
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80107c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 80107c6:	bf88      	it	hi
 80107c8:	f1a4 0a03 	subhi.w	sl, r4, #3
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80107cc:	60da      	str	r2, [r3, #12]
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80107ce:	eb00 038a 	add.w	r3, r0, sl, lsl #2
 80107d2:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80107d4:	68da      	ldr	r2, [r3, #12]
 80107d6:	2a00      	cmp	r2, #0
 80107d8:	da7a      	bge.n	80108d0 <ETH_Prepare_Tx_Descriptors+0x1cc>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80107da:	69b2      	ldr	r2, [r6, #24]
 80107dc:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80107e0:	68d3      	ldr	r3, [r2, #12]
 80107e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107e6:	60d3      	str	r3, [r2, #12]
 80107e8:	e796      	b.n	8010718 <ETH_Prepare_Tx_Descriptors+0x14>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80107ea:	46a2      	mov	sl, r4
  descnbr += 1U;
 80107ec:	f102 0801 	add.w	r8, r2, #1
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80107f0:	683a      	ldr	r2, [r7, #0]
 80107f2:	f8df c220 	ldr.w	ip, [pc, #544]	; 8010a14 <ETH_Prepare_Tx_Descriptors+0x310>
 80107f6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80107f8:	689d      	ldr	r5, [r3, #8]
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	f425 557f 	bic.w	r5, r5, #16320	; 0x3fc0
 8010800:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8010804:	432a      	orrs	r2, r5
 8010806:	609a      	str	r2, [r3, #8]
  if (txbuffer->next != NULL)
 8010808:	68ba      	ldr	r2, [r7, #8]
 801080a:	2a00      	cmp	r2, #0
 801080c:	d062      	beq.n	80108d4 <ETH_Prepare_Tx_Descriptors+0x1d0>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 801080e:	6815      	ldr	r5, [r2, #0]
 8010810:	605d      	str	r5, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8010812:	689f      	ldr	r7, [r3, #8]
 8010814:	6855      	ldr	r5, [r2, #4]
 8010816:	ea07 070c 	and.w	r7, r7, ip
 801081a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 801081e:	609d      	str	r5, [r3, #8]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8010820:	680d      	ldr	r5, [r1, #0]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8010822:	68df      	ldr	r7, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8010824:	06ed      	lsls	r5, r5, #27
 8010826:	d55c      	bpl.n	80108e2 <ETH_Prepare_Tx_Descriptors+0x1de>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8010828:	6a0d      	ldr	r5, [r1, #32]
 801082a:	f427 07f0 	bic.w	r7, r7, #7864320	; 0x780000
 801082e:	ea47 45c5 	orr.w	r5, r7, r5, lsl #19
 8010832:	60dd      	str	r5, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8010834:	68df      	ldr	r7, [r3, #12]
 8010836:	69cd      	ldr	r5, [r1, #28]
 8010838:	0cbf      	lsrs	r7, r7, #18
 801083a:	04bf      	lsls	r7, r7, #18
 801083c:	433d      	orrs	r5, r7
 801083e:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8010840:	68dd      	ldr	r5, [r3, #12]
 8010842:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8010846:	60dd      	str	r5, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8010848:	680d      	ldr	r5, [r1, #0]
 801084a:	076f      	lsls	r7, r5, #29
 801084c:	d505      	bpl.n	801085a <ETH_Prepare_Tx_Descriptors+0x156>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 801084e:	689f      	ldr	r7, [r3, #8]
 8010850:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8010852:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
 8010856:	433d      	orrs	r5, r7
 8010858:	609d      	str	r5, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 801085a:	68dd      	ldr	r5, [r3, #12]
 801085c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010860:	60dd      	str	r5, [r3, #12]
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8010862:	68dd      	ldr	r5, [r3, #12]
 8010864:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 8010868:	60dd      	str	r5, [r3, #12]
 801086a:	f3bf 8f5f 	dmb	sy
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 801086e:	68dd      	ldr	r5, [r3, #12]
 8010870:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8010874:	60dd      	str	r5, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8010876:	680d      	ldr	r5, [r1, #0]
 8010878:	07ad      	lsls	r5, r5, #30
 801087a:	d505      	bpl.n	8010888 <ETH_Prepare_Tx_Descriptors+0x184>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 801087c:	68df      	ldr	r7, [r3, #12]
 801087e:	68cd      	ldr	r5, [r1, #12]
 8010880:	f027 7760 	bic.w	r7, r7, #58720256	; 0x3800000
 8010884:	433d      	orrs	r5, r7
 8010886:	60dd      	str	r5, [r3, #12]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8010888:	2500      	movs	r5, #0
 801088a:	f8df e188 	ldr.w	lr, [pc, #392]	; 8010a14 <ETH_Prepare_Tx_Descriptors+0x310>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 801088e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8010a18 <ETH_Prepare_Tx_Descriptors+0x314>
  while (txbuffer->next != NULL)
 8010892:	6897      	ldr	r7, [r2, #8]
 8010894:	eb05 0b08 	add.w	fp, r5, r8
 8010898:	2f00      	cmp	r7, #0
 801089a:	d13b      	bne.n	8010914 <ETH_Prepare_Tx_Descriptors+0x210>
  if (ItMode != ((uint32_t)RESET))
 801089c:	9a01      	ldr	r2, [sp, #4]
 801089e:	2a00      	cmp	r2, #0
 80108a0:	f000 80b3 	beq.w	8010a0a <ETH_Prepare_Tx_Descriptors+0x306>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80108a4:	689a      	ldr	r2, [r3, #8]
 80108a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80108aa:	609a      	str	r2, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80108ac:	68da      	ldr	r2, [r3, #12]
 80108ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80108b2:	60da      	str	r2, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80108b4:	eb00 038a 	add.w	r3, r0, sl, lsl #2
 80108b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80108ba:	62da      	str	r2, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 80108bc:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 80108c0:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80108c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80108c4:	3301      	adds	r3, #1
 80108c6:	441d      	add	r5, r3
 80108c8:	6405      	str	r5, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80108ca:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 80108cc:	2000      	movs	r0, #0
 80108ce:	e724      	b.n	801071a <ETH_Prepare_Tx_Descriptors+0x16>
    descnbr += 1U;
 80108d0:	2201      	movs	r2, #1
 80108d2:	e78b      	b.n	80107ec <ETH_Prepare_Tx_Descriptors+0xe8>
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80108d4:	605a      	str	r2, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80108d6:	463a      	mov	r2, r7
 80108d8:	689d      	ldr	r5, [r3, #8]
 80108da:	ea05 050c 	and.w	r5, r5, ip
 80108de:	609d      	str	r5, [r3, #8]
 80108e0:	e79e      	b.n	8010820 <ETH_Prepare_Tx_Descriptors+0x11c>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80108e2:	f427 47ff 	bic.w	r7, r7, #32640	; 0x7f80
 80108e6:	684d      	ldr	r5, [r1, #4]
 80108e8:	f027 077f 	bic.w	r7, r7, #127	; 0x7f
 80108ec:	433d      	orrs	r5, r7
 80108ee:	60dd      	str	r5, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80108f0:	680d      	ldr	r5, [r1, #0]
 80108f2:	07ef      	lsls	r7, r5, #31
 80108f4:	d505      	bpl.n	8010902 <ETH_Prepare_Tx_Descriptors+0x1fe>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80108f6:	68df      	ldr	r7, [r3, #12]
 80108f8:	694d      	ldr	r5, [r1, #20]
 80108fa:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
 80108fe:	433d      	orrs	r5, r7
 8010900:	60dd      	str	r5, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8010902:	680d      	ldr	r5, [r1, #0]
 8010904:	06ad      	lsls	r5, r5, #26
 8010906:	d59f      	bpl.n	8010848 <ETH_Prepare_Tx_Descriptors+0x144>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8010908:	68df      	ldr	r7, [r3, #12]
 801090a:	690d      	ldr	r5, [r1, #16]
 801090c:	f027 6740 	bic.w	r7, r7, #201326592	; 0xc000000
 8010910:	433d      	orrs	r5, r7
 8010912:	e798      	b.n	8010846 <ETH_Prepare_Tx_Descriptors+0x142>
    INCR_TX_DESC_INDEX(descidx, 1U);
 8010914:	f10a 0c01 	add.w	ip, sl, #1
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8010918:	68df      	ldr	r7, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 801091a:	f1bc 0f03 	cmp.w	ip, #3
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 801091e:	f027 5780 	bic.w	r7, r7, #268435456	; 0x10000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 8010922:	bf88      	it	hi
 8010924:	f1aa 0c03 	subhi.w	ip, sl, #3
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8010928:	60df      	str	r7, [r3, #12]
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801092a:	eb00 0a8c 	add.w	sl, r0, ip, lsl #2
 801092e:	f8da 3018 	ldr.w	r3, [sl, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8010932:	68df      	ldr	r7, [r3, #12]
 8010934:	f027 5700 	bic.w	r7, r7, #536870912	; 0x20000000
 8010938:	60df      	str	r7, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 801093a:	68df      	ldr	r7, [r3, #12]
 801093c:	2f00      	cmp	r7, #0
 801093e:	da14      	bge.n	801096a <ETH_Prepare_Tx_Descriptors+0x266>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8010940:	69b1      	ldr	r1, [r6, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8010942:	2200      	movs	r2, #0
 8010944:	455a      	cmp	r2, fp
 8010946:	f43f aee7 	beq.w	8010718 <ETH_Prepare_Tx_Descriptors+0x14>
  __ASM volatile ("dmb 0xF":::"memory");
 801094a:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 801094e:	68cb      	ldr	r3, [r1, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8010950:	3201      	adds	r2, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8010952:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010956:	60cb      	str	r3, [r1, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8010958:	1c63      	adds	r3, r4, #1
 801095a:	2b03      	cmp	r3, #3
 801095c:	bf88      	it	hi
 801095e:	1ee3      	subhi	r3, r4, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8010960:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for (idx = 0; idx < descnbr; idx ++)
 8010964:	461c      	mov	r4, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8010966:	6989      	ldr	r1, [r1, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8010968:	e7ec      	b.n	8010944 <ETH_Prepare_Tx_Descriptors+0x240>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801096a:	f8da 702c 	ldr.w	r7, [sl, #44]	; 0x2c
 801096e:	2f00      	cmp	r7, #0
 8010970:	d1e6      	bne.n	8010940 <ETH_Prepare_Tx_Descriptors+0x23c>
    txbuffer = txbuffer->next;
 8010972:	6897      	ldr	r7, [r2, #8]
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8010974:	683a      	ldr	r2, [r7, #0]
 8010976:	601a      	str	r2, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8010978:	689a      	ldr	r2, [r3, #8]
 801097a:	f422 5a7f 	bic.w	sl, r2, #16320	; 0x3fc0
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	f02a 0a3f 	bic.w	sl, sl, #63	; 0x3f
 8010984:	ea4a 0202 	orr.w	r2, sl, r2
 8010988:	609a      	str	r2, [r3, #8]
    if (txbuffer->next != NULL)
 801098a:	68ba      	ldr	r2, [r7, #8]
 801098c:	b332      	cbz	r2, 80109dc <ETH_Prepare_Tx_Descriptors+0x2d8>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 801098e:	6817      	ldr	r7, [r2, #0]
 8010990:	605f      	str	r7, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8010992:	689f      	ldr	r7, [r3, #8]
 8010994:	ea07 0a0e 	and.w	sl, r7, lr
 8010998:	6857      	ldr	r7, [r2, #4]
 801099a:	ea4a 4707 	orr.w	r7, sl, r7, lsl #16
 801099e:	609f      	str	r7, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80109a0:	680f      	ldr	r7, [r1, #0]
 80109a2:	f017 0f10 	tst.w	r7, #16
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80109a6:	68df      	ldr	r7, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80109a8:	d01f      	beq.n	80109ea <ETH_Prepare_Tx_Descriptors+0x2e6>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80109aa:	ea4f 4a97 	mov.w	sl, r7, lsr #18
 80109ae:	69cf      	ldr	r7, [r1, #28]
 80109b0:	ea4f 4a8a 	mov.w	sl, sl, lsl #18
 80109b4:	ea4a 0707 	orr.w	r7, sl, r7
 80109b8:	60df      	str	r7, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80109ba:	68df      	ldr	r7, [r3, #12]
 80109bc:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80109c0:	60df      	str	r7, [r3, #12]
    bd_count += 1U;
 80109c2:	3501      	adds	r5, #1
 80109c4:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80109c8:	68df      	ldr	r7, [r3, #12]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80109ca:	46e2      	mov	sl, ip
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80109cc:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 80109d0:	60df      	str	r7, [r3, #12]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80109d2:	68df      	ldr	r7, [r3, #12]
 80109d4:	f027 4780 	bic.w	r7, r7, #1073741824	; 0x40000000
 80109d8:	60df      	str	r7, [r3, #12]
 80109da:	e75a      	b.n	8010892 <ETH_Prepare_Tx_Descriptors+0x18e>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80109dc:	605a      	str	r2, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80109de:	689a      	ldr	r2, [r3, #8]
 80109e0:	ea02 020e 	and.w	r2, r2, lr
 80109e4:	609a      	str	r2, [r3, #8]
 80109e6:	463a      	mov	r2, r7
 80109e8:	e7da      	b.n	80109a0 <ETH_Prepare_Tx_Descriptors+0x29c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80109ea:	ea07 0a09 	and.w	sl, r7, r9
 80109ee:	684f      	ldr	r7, [r1, #4]
 80109f0:	ea4a 0707 	orr.w	r7, sl, r7
 80109f4:	60df      	str	r7, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80109f6:	680f      	ldr	r7, [r1, #0]
 80109f8:	07ff      	lsls	r7, r7, #31
 80109fa:	d5e2      	bpl.n	80109c2 <ETH_Prepare_Tx_Descriptors+0x2be>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80109fc:	68df      	ldr	r7, [r3, #12]
 80109fe:	f427 3a40 	bic.w	sl, r7, #196608	; 0x30000
 8010a02:	694f      	ldr	r7, [r1, #20]
 8010a04:	ea4a 0707 	orr.w	r7, sl, r7
 8010a08:	e7da      	b.n	80109c0 <ETH_Prepare_Tx_Descriptors+0x2bc>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8010a0a:	689a      	ldr	r2, [r3, #8]
 8010a0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8010a10:	e74b      	b.n	80108aa <ETH_Prepare_Tx_Descriptors+0x1a6>
 8010a12:	bf00      	nop
 8010a14:	c000ffff 	.word	0xc000ffff
 8010a18:	ffff8000 	.word	0xffff8000

08010a1c <HAL_ETH_Start_IT>:
{
 8010a1c:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8010a1e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8010a22:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_READY)
 8010a24:	2b10      	cmp	r3, #16
 8010a26:	f04f 0301 	mov.w	r3, #1
 8010a2a:	d152      	bne.n	8010ad2 <HAL_ETH_Start_IT+0xb6>
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8010a2c:	6802      	ldr	r2, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8010a2e:	2523      	movs	r5, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 8010a30:	6583      	str	r3, [r0, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_BUSY;
 8010a32:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8010a36:	4b28      	ldr	r3, [pc, #160]	; (8010ad8 <HAL_ETH_Start_IT+0xbc>)
 8010a38:	f8d2 170c 	ldr.w	r1, [r2, #1804]	; 0x70c
 8010a3c:	430b      	orrs	r3, r1
 8010a3e:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8010a42:	6802      	ldr	r2, [r0, #0]
 8010a44:	f8d2 3710 	ldr.w	r3, [r2, #1808]	; 0x710
 8010a48:	f043 6342 	orr.w	r3, r3, #203423744	; 0xc200000
 8010a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010a50:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8010a54:	2304      	movs	r3, #4
 8010a56:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8010a58:	f00a f9e3 	bl	801ae22 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8010a5c:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8010a5e:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8010a60:	6813      	ldr	r3, [r2, #0]
 8010a62:	f043 0302 	orr.w	r3, r3, #2
 8010a66:	6013      	str	r3, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8010a68:	6822      	ldr	r2, [r4, #0]
 8010a6a:	6813      	ldr	r3, [r2, #0]
 8010a6c:	f043 0301 	orr.w	r3, r3, #1
 8010a70:	6013      	str	r3, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8010a72:	6822      	ldr	r2, [r4, #0]
 8010a74:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8010a78:	f043 0301 	orr.w	r3, r3, #1
 8010a7c:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8010a80:	6823      	ldr	r3, [r4, #0]
 8010a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a86:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8010a8a:	f042 0201 	orr.w	r2, r2, #1
 8010a8e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8010a92:	6823      	ldr	r3, [r4, #0]
 8010a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a98:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8010a9c:	f042 0201 	orr.w	r2, r2, #1
 8010aa0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8010aa4:	6823      	ldr	r3, [r4, #0]
 8010aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010aaa:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8010aae:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8010ab2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8010ab6:	6822      	ldr	r2, [r4, #0]
 8010ab8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010abc:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 8010ac0:	f443 4350 	orr.w	r3, r3, #53248	; 0xd000
 8010ac4:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8010ac8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 8010acc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8010ad0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	e7fc      	b.n	8010ad0 <HAL_ETH_Start_IT+0xb4>
 8010ad6:	bf00      	nop
 8010ad8:	0c020060 	.word	0x0c020060

08010adc <HAL_ETH_SetMDIOClockRange>:
{
 8010adc:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8010ade:	6803      	ldr	r3, [r0, #0]
{
 8010ae0:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8010ae2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8010ae6:	f7ff fd99 	bl	801061c <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8010aea:	4b12      	ldr	r3, [pc, #72]	; (8010b34 <HAL_ETH_SetMDIOClockRange+0x58>)
 8010aec:	4a12      	ldr	r2, [pc, #72]	; (8010b38 <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8010aee:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8010af2:	4403      	add	r3, r0
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d205      	bcs.n	8010b04 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8010af8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8010afc:	682b      	ldr	r3, [r5, #0]
 8010afe:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8010b02:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8010b04:	4b0d      	ldr	r3, [pc, #52]	; (8010b3c <HAL_ETH_SetMDIOClockRange+0x60>)
 8010b06:	4a0e      	ldr	r2, [pc, #56]	; (8010b40 <HAL_ETH_SetMDIOClockRange+0x64>)
 8010b08:	4403      	add	r3, r0
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d802      	bhi.n	8010b14 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8010b0e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8010b12:	e7f3      	b.n	8010afc <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8010b14:	4b0b      	ldr	r3, [pc, #44]	; (8010b44 <HAL_ETH_SetMDIOClockRange+0x68>)
 8010b16:	4a0c      	ldr	r2, [pc, #48]	; (8010b48 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8010b18:	4403      	add	r3, r0
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d3ee      	bcc.n	8010afc <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8010b1e:	4b0b      	ldr	r3, [pc, #44]	; (8010b4c <HAL_ETH_SetMDIOClockRange+0x70>)
 8010b20:	4a0b      	ldr	r2, [pc, #44]	; (8010b50 <HAL_ETH_SetMDIOClockRange+0x74>)
 8010b22:	4403      	add	r3, r0
 8010b24:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8010b26:	bf94      	ite	ls
 8010b28:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8010b2c:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 8010b30:	e7e4      	b.n	8010afc <HAL_ETH_SetMDIOClockRange+0x20>
 8010b32:	bf00      	nop
 8010b34:	feced300 	.word	0xfeced300
 8010b38:	00e4e1c0 	.word	0x00e4e1c0
 8010b3c:	fde9f140 	.word	0xfde9f140
 8010b40:	017d783f 	.word	0x017d783f
 8010b44:	fc6c7900 	.word	0xfc6c7900
 8010b48:	02625a00 	.word	0x02625a00
 8010b4c:	fa0a1f00 	.word	0xfa0a1f00
 8010b50:	02faf07f 	.word	0x02faf07f

08010b54 <HAL_ETH_Init>:
{
 8010b54:	b570      	push	{r4, r5, r6, lr}
  if (heth == NULL)
 8010b56:	4604      	mov	r4, r0
{
 8010b58:	b0a4      	sub	sp, #144	; 0x90
  if (heth == NULL)
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	f000 80b0 	beq.w	8010cc0 <HAL_ETH_Init+0x16c>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8010b60:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8010b64:	b923      	cbnz	r3, 8010b70 <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 8010b66:	2323      	movs	r3, #35	; 0x23
 8010b68:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8010b6c:	f00a f99b 	bl	801aea6 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b70:	4b89      	ldr	r3, [pc, #548]	; (8010d98 <HAL_ETH_Init+0x244>)
 8010b72:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8010b76:	f042 0202 	orr.w	r2, r2, #2
 8010b7a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8010b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8010b82:	7a20      	ldrb	r0, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010b84:	f003 0302 	and.w	r3, r3, #2
 8010b88:	9301      	str	r3, [sp, #4]
 8010b8a:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	f040 8087 	bne.w	8010ca0 <HAL_ETH_Init+0x14c>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8010b92:	f7ff fc8d 	bl	80104b0 <HAL_SYSCFG_ETHInterfaceSelect>
  (void)SYSCFG->PMCR;
 8010b96:	4b81      	ldr	r3, [pc, #516]	; (8010d9c <HAL_ETH_Init+0x248>)
 8010b98:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8010b9a:	6823      	ldr	r3, [r4, #0]
 8010b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	f042 0201 	orr.w	r2, r2, #1
 8010ba6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8010ba8:	f002 fe5c 	bl	8013864 <HAL_GetTick>
 8010bac:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8010bae:	6823      	ldr	r3, [r4, #0]
 8010bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bb4:	681d      	ldr	r5, [r3, #0]
 8010bb6:	f015 0501 	ands.w	r5, r5, #1
 8010bba:	d174      	bne.n	8010ca6 <HAL_ETH_Init+0x152>
  HAL_ETH_SetMDIOClockRange(heth);
 8010bbc:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 8010bbe:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 8010bc0:	f7ff ff8c 	bl	8010adc <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8010bc4:	f7ff fd2a 	bl	801061c <HAL_RCC_GetHCLKFreq>
 8010bc8:	4a75      	ldr	r2, [pc, #468]	; (8010da0 <HAL_ETH_Init+0x24c>)
 8010bca:	6823      	ldr	r3, [r4, #0]
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8010bcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8010bd0:	9514      	str	r5, [sp, #80]	; 0x50
  macDefaultConf.DeferralCheck = DISABLE;
 8010bd2:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8010bd6:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8010bda:	951a      	str	r5, [sp, #104]	; 0x68
  macDefaultConf.PauseTime = 0x0;
 8010bdc:	951d      	str	r5, [sp, #116]	; 0x74
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8010bde:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8010be2:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8010be6:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8010be8:	f8ad 5080 	strh.w	r5, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8010bec:	f88d 5082 	strb.w	r5, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8010bf0:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8010bf2:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8010bf6:	950d      	str	r5, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8010bf8:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8010bfc:	951c      	str	r5, [sp, #112]	; 0x70
  macDefaultConf.ChecksumOffload = ENABLE;
 8010bfe:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.RetryTransmission = ENABLE;
 8010c02:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8010c06:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8010c0a:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8010c0e:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8010c12:	fbb0 f0f2 	udiv	r0, r0, r2
 8010c16:	3801      	subs	r0, #1
 8010c18:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8010c1c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8010c20:	2002      	movs	r0, #2
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8010c22:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8010c24:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8010c28:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8010c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c2e:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 8010c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8010c36:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.LoopbackMode = DISABLE;
 8010c38:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8010c3a:	2320      	movs	r3, #32
 8010c3c:	e9cd 0321 	strd	r0, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8010c40:	4b58      	ldr	r3, [pc, #352]	; (8010da4 <HAL_ETH_Init+0x250>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 8010c42:	4620      	mov	r0, r4
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8010c44:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 8010c46:	f240 1301 	movw	r3, #257	; 0x101
 8010c4a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 8010c4e:	f00a f802 	bl	801ac56 <ETH_SetMACConfig>
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8010c52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8010c56:	a902      	add	r1, sp, #8
 8010c58:	4620      	mov	r0, r4
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8010c5a:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8010c5c:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8010c5e:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8010c60:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8010c64:	f8ad 5014 	strh.w	r5, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8010c68:	f88d 501c 	strb.w	r5, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8010c6c:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8010c70:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8010c72:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8010c76:	9604      	str	r6, [sp, #16]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8010c78:	f7ff fcf2 	bl	8010660 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8010c7c:	6822      	ldr	r2, [r4, #0]
 8010c7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010c82:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8010c86:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8010c8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c8e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8010c92:	6965      	ldr	r5, [r4, #20]
 8010c94:	f015 0303 	ands.w	r3, r5, #3
 8010c98:	d014      	beq.n	8010cc4 <HAL_ETH_Init+0x170>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8010c9a:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8010c9e:	e00c      	b.n	8010cba <HAL_ETH_Init+0x166>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8010ca0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8010ca4:	e775      	b.n	8010b92 <HAL_ETH_Init+0x3e>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8010ca6:	f002 fddd 	bl	8013864 <HAL_GetTick>
 8010caa:	1b80      	subs	r0, r0, r6
 8010cac:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8010cb0:	f67f af7d 	bls.w	8010bae <HAL_ETH_Init+0x5a>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8010cb4:	2304      	movs	r3, #4
 8010cb6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8010cba:	23e0      	movs	r3, #224	; 0xe0
 8010cbc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_ERROR;
 8010cc0:	2001      	movs	r0, #1
 8010cc2:	e066      	b.n	8010d92 <HAL_ETH_Init+0x23e>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f850 1b18 	ldr.w	r1, [r0], #24
 8010cca:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8010cce:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8010cd2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8010cd6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8010cda:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8010cde:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
 8010ce2:	4619      	mov	r1, r3
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8010ce4:	461a      	mov	r2, r3
    dmatxdesc = heth->Init.TxDesc + i;
 8010ce6:	68e6      	ldr	r6, [r4, #12]
 8010ce8:	1875      	adds	r5, r6, r1
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8010cea:	5072      	str	r2, [r6, r1]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8010cec:	3118      	adds	r1, #24
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8010cee:	606a      	str	r2, [r5, #4]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8010cf0:	2960      	cmp	r1, #96	; 0x60
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8010cf2:	60aa      	str	r2, [r5, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8010cf4:	60ea      	str	r2, [r5, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8010cf6:	f840 5b04 	str.w	r5, [r0], #4
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8010cfa:	d1f4      	bne.n	8010ce6 <HAL_ETH_Init+0x192>
  heth->TxDescList.CurTxDesc = 0;
 8010cfc:	62a2      	str	r2, [r4, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8010cfe:	2103      	movs	r1, #3
 8010d00:	6822      	ldr	r2, [r4, #0]
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8010d02:	2500      	movs	r5, #0
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8010d04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010d08:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8010d0c:	6822      	ldr	r2, [r4, #0]
 8010d0e:	68e1      	ldr	r1, [r4, #12]
 8010d10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010d14:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8010d18:	6822      	ldr	r2, [r4, #0]
 8010d1a:	68e1      	ldr	r1, [r4, #12]
 8010d1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010d20:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8010d24:	f104 0148 	add.w	r1, r4, #72	; 0x48
    dmarxdesc =  heth->Init.RxDesc + i;
 8010d28:	6920      	ldr	r0, [r4, #16]
 8010d2a:	18c2      	adds	r2, r0, r3
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8010d2c:	50c5      	str	r5, [r0, r3]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8010d2e:	3318      	adds	r3, #24
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8010d30:	6055      	str	r5, [r2, #4]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8010d32:	2b60      	cmp	r3, #96	; 0x60
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8010d34:	6095      	str	r5, [r2, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8010d36:	60d5      	str	r5, [r2, #12]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8010d38:	e9c2 5504 	strd	r5, r5, [r2, #16]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8010d3c:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8010d40:	d1f2      	bne.n	8010d28 <HAL_ETH_Init+0x1d4>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8010d42:	6823      	ldr	r3, [r4, #0]
 8010d44:	2203      	movs	r2, #3
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8010d46:	65a5      	str	r5, [r4, #88]	; 0x58
  return HAL_OK;
 8010d48:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8010d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8010d4e:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8010d52:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8010d56:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8010d5a:	6823      	ldr	r3, [r4, #0]
 8010d5c:	6922      	ldr	r2, [r4, #16]
 8010d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d62:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8010d66:	6823      	ldr	r3, [r4, #0]
 8010d68:	6922      	ldr	r2, [r4, #16]
 8010d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010d6e:	3248      	adds	r2, #72	; 0x48
 8010d70:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8010d74:	6863      	ldr	r3, [r4, #4]
 8010d76:	889a      	ldrh	r2, [r3, #4]
 8010d78:	6823      	ldr	r3, [r4, #0]
 8010d7a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8010d7e:	6863      	ldr	r3, [r4, #4]
 8010d80:	681a      	ldr	r2, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8010d82:	6823      	ldr	r3, [r4, #0]
 8010d84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  heth->gState = HAL_ETH_STATE_READY;
 8010d88:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8010d8a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8010d8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8010d92:	b024      	add	sp, #144	; 0x90
 8010d94:	bd70      	pop	{r4, r5, r6, pc}
 8010d96:	bf00      	nop
 8010d98:	58024400 	.word	0x58024400
 8010d9c:	58000400 	.word	0x58000400
 8010da0:	000f4240 	.word	0x000f4240
 8010da4:	01010000 	.word	0x01010000

08010da8 <HAL_ETH_SetMACFilterConfig>:
{
 8010da8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pFilterConfig == NULL)
 8010daa:	b369      	cbz	r1, 8010e08 <HAL_ETH_SetMACFilterConfig+0x60>
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8010dac:	7a4b      	ldrb	r3, [r1, #9]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8010dae:	6802      	ldr	r2, [r0, #0]
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8010db0:	2b00      	cmp	r3, #0
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8010db2:	4b16      	ldr	r3, [pc, #88]	; (8010e0c <HAL_ETH_SetMACFilterConfig+0x64>)
 8010db4:	6890      	ldr	r0, [r2, #8]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8010db6:	f891 e000 	ldrb.w	lr, [r1]
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8010dba:	bf08      	it	eq
 8010dbc:	2420      	moveq	r4, #32
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8010dbe:	ea03 0300 	and.w	r3, r3, r0
 8010dc2:	68c8      	ldr	r0, [r1, #12]
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8010dc4:	f891 c003 	ldrb.w	ip, [r1, #3]
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8010dc8:	bf18      	it	ne
 8010dca:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8010dcc:	4303      	orrs	r3, r0
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8010dce:	790f      	ldrb	r7, [r1, #4]
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8010dd0:	7a0e      	ldrb	r6, [r1, #8]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8010dd2:	ea43 030e 	orr.w	r3, r3, lr
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8010dd6:	794d      	ldrb	r5, [r1, #5]
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8010dd8:	79c8      	ldrb	r0, [r1, #7]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8010dda:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8010dde:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 8010de2:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 8010de6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8010dea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8010dee:	7988      	ldrb	r0, [r1, #6]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8010df0:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8010df4:	7888      	ldrb	r0, [r1, #2]
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8010df6:	7849      	ldrb	r1, [r1, #1]
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8010df8:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
  return HAL_OK;
 8010dfc:	2000      	movs	r0, #0
  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8010dfe:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 8010e02:	4323      	orrs	r3, r4
 8010e04:	6093      	str	r3, [r2, #8]
}
 8010e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8010e08:	2001      	movs	r0, #1
 8010e0a:	e7fc      	b.n	8010e06 <HAL_ETH_SetMACFilterConfig+0x5e>
 8010e0c:	7ffff800 	.word	0x7ffff800

08010e10 <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */



  /* Frequency cannot be equal to 0 */
  if (HCLK_Frequency == 0U)
 8010e10:	b320      	cbz	r0, 8010e5c <LL_SetFlashLatency+0x4c>
  return (uint32_t)(READ_BIT(PWR->D3CR, PWR_D3CR_VOS));
 8010e12:	4a2a      	ldr	r2, [pc, #168]	; (8010ebc <LL_SetFlashLatency+0xac>)
 8010e14:	6993      	ldr	r3, [r2, #24]
 8010e16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
    {
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
#endif /* STM32H7_DEV_ID == 0x480UL */
#else
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8010e1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010e1e:	d11f      	bne.n	8010e60 <LL_SetFlashLatency+0x50>
    {
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY2_FREQ))
 8010e20:	4b27      	ldr	r3, [pc, #156]	; (8010ec0 <LL_SetFlashLatency+0xb0>)
 8010e22:	4a28      	ldr	r2, [pc, #160]	; (8010ec4 <LL_SetFlashLatency+0xb4>)
 8010e24:	4403      	add	r3, r0
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d942      	bls.n	8010eb0 <LL_SetFlashLatency+0xa0>
#endif /* STM32H7_DEV_ID == 0x480UL || STM32H7_DEV_ID == 0x483UL */
      {
        /* 140 < HCLK <= 210 => 2WS (3 CPU cycles) */
        latency = LL_FLASH_LATENCY_2;
      }
      else if((HCLK_Frequency > UTILS_SCALE1_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE1_LATENCY1_FREQ))
 8010e2a:	4b27      	ldr	r3, [pc, #156]	; (8010ec8 <LL_SetFlashLatency+0xb8>)
 8010e2c:	4a27      	ldr	r2, [pc, #156]	; (8010ecc <LL_SetFlashLatency+0xbc>)
 8010e2e:	4403      	add	r3, r0
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d93f      	bls.n	8010eb4 <LL_SetFlashLatency+0xa4>
      {
        /* 70 < HCLK <= 140 => 1WS (2 CPU cycles) */
        latency = LL_FLASH_LATENCY_1;
      }
      else if(HCLK_Frequency <= UTILS_SCALE1_LATENCY0_FREQ)
 8010e34:	4b26      	ldr	r3, [pc, #152]	; (8010ed0 <LL_SetFlashLatency+0xc0>)
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
      {
        /* 45 < HCLK <= 90 => 1WS (2 CPU cycles) */
        latency = LL_FLASH_LATENCY_1;
      }
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 8010e36:	4298      	cmp	r0, r3
 8010e38:	d810      	bhi.n	8010e5c <LL_SetFlashLatency+0x4c>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8010e3a:	2300      	movs	r3, #0
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8010e3c:	4925      	ldr	r1, [pc, #148]	; (8010ed4 <LL_SetFlashLatency+0xc4>)
 8010e3e:	680a      	ldr	r2, [r1, #0]
 8010e40:	f022 020f 	bic.w	r2, r2, #15
 8010e44:	431a      	orrs	r2, r3
 8010e46:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8010e48:	680a      	ldr	r2, [r1, #0]
 8010e4a:	f002 020f 	and.w	r2, r2, #15
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d032      	beq.n	8010eb8 <LL_SetFlashLatency+0xa8>
 8010e52:	680a      	ldr	r2, [r1, #0]
 8010e54:	f002 020f 	and.w	r2, r2, #15
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d02d      	beq.n	8010eb8 <LL_SetFlashLatency+0xa8>
    status = ERROR;
 8010e5c:	2001      	movs	r0, #1
 8010e5e:	4770      	bx	lr
 8010e60:	6993      	ldr	r3, [r2, #24]
 8010e62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    else if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8010e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e6a:	d10e      	bne.n	8010e8a <LL_SetFlashLatency+0x7a>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY3_FREQ))
 8010e6c:	4a1a      	ldr	r2, [pc, #104]	; (8010ed8 <LL_SetFlashLatency+0xc8>)
 8010e6e:	4b1b      	ldr	r3, [pc, #108]	; (8010edc <LL_SetFlashLatency+0xcc>)
 8010e70:	4402      	add	r2, r0
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d91a      	bls.n	8010eac <LL_SetFlashLatency+0x9c>
      else if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY2_FREQ))
 8010e76:	4a1a      	ldr	r2, [pc, #104]	; (8010ee0 <LL_SetFlashLatency+0xd0>)
 8010e78:	4402      	add	r2, r0
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d918      	bls.n	8010eb0 <LL_SetFlashLatency+0xa0>
      else if((HCLK_Frequency > UTILS_SCALE2_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE2_LATENCY1_FREQ))
 8010e7e:	4a19      	ldr	r2, [pc, #100]	; (8010ee4 <LL_SetFlashLatency+0xd4>)
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
 8010e80:	4402      	add	r2, r0
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d916      	bls.n	8010eb4 <LL_SetFlashLatency+0xa4>
      else if(HCLK_Frequency <= UTILS_SCALE3_LATENCY0_FREQ)
 8010e86:	3301      	adds	r3, #1
 8010e88:	e7d5      	b.n	8010e36 <LL_SetFlashLatency+0x26>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY4_FREQ))
 8010e8a:	4a17      	ldr	r2, [pc, #92]	; (8010ee8 <LL_SetFlashLatency+0xd8>)
 8010e8c:	4b17      	ldr	r3, [pc, #92]	; (8010eec <LL_SetFlashLatency+0xdc>)
 8010e8e:	4402      	add	r2, r0
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d909      	bls.n	8010ea8 <LL_SetFlashLatency+0x98>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY3_FREQ))
 8010e94:	4a16      	ldr	r2, [pc, #88]	; (8010ef0 <LL_SetFlashLatency+0xe0>)
 8010e96:	4402      	add	r2, r0
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d907      	bls.n	8010eac <LL_SetFlashLatency+0x9c>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY2_FREQ))
 8010e9c:	4a15      	ldr	r2, [pc, #84]	; (8010ef4 <LL_SetFlashLatency+0xe4>)
 8010e9e:	4402      	add	r2, r0
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d905      	bls.n	8010eb0 <LL_SetFlashLatency+0xa0>
      else if((HCLK_Frequency > UTILS_SCALE3_LATENCY0_FREQ) && (HCLK_Frequency <= UTILS_SCALE3_LATENCY1_FREQ))
 8010ea4:	4a14      	ldr	r2, [pc, #80]	; (8010ef8 <LL_SetFlashLatency+0xe8>)
 8010ea6:	e7eb      	b.n	8010e80 <LL_SetFlashLatency+0x70>
        latency = LL_FLASH_LATENCY_4;
 8010ea8:	2304      	movs	r3, #4
 8010eaa:	e7c7      	b.n	8010e3c <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_3;
 8010eac:	2303      	movs	r3, #3
 8010eae:	e7c5      	b.n	8010e3c <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_2;
 8010eb0:	2302      	movs	r3, #2
 8010eb2:	e7c3      	b.n	8010e3c <LL_SetFlashLatency+0x2c>
        latency = LL_FLASH_LATENCY_1;
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	e7c1      	b.n	8010e3c <LL_SetFlashLatency+0x2c>
 8010eb8:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8010eba:	4770      	bx	lr
 8010ebc:	58024800 	.word	0x58024800
 8010ec0:	f7a7c4ff 	.word	0xf7a7c4ff
 8010ec4:	05f5e0ff 	.word	0x05f5e0ff
 8010ec8:	fbd3e27f 	.word	0xfbd3e27f
 8010ecc:	042c1d7f 	.word	0x042c1d7f
 8010ed0:	042c1d80 	.word	0x042c1d80
 8010ed4:	52002000 	.word	0x52002000
 8010ed8:	f62a4cbf 	.word	0xf62a4cbf
 8010edc:	03473bbf 	.word	0x03473bbf
 8010ee0:	f971887f 	.word	0xf971887f
 8010ee4:	fcb8c43f 	.word	0xfcb8c43f
 8010ee8:	f5456aff 	.word	0xf5456aff
 8010eec:	02aea53f 	.word	0x02aea53f
 8010ef0:	f7f4103f 	.word	0xf7f4103f
 8010ef4:	faa2b57f 	.word	0xfaa2b57f
 8010ef8:	fd515abf 	.word	0xfd515abf

08010efc <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 8010efc:	460a      	mov	r2, r1
 8010efe:	b119      	cbz	r1, 8010f08 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
 8010f00:	4b02      	ldr	r3, [pc, #8]	; (8010f0c <mbedtls_platform_zeroize+0x10>)
 8010f02:	2100      	movs	r1, #0
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	4718      	bx	r3
}
 8010f08:	4770      	bx	lr
 8010f0a:	bf00      	nop
 8010f0c:	24001014 	.word	0x24001014

08010f10 <mbedtls_internal_md5_process>:
}

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 8010f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f14:	b09f      	sub	sp, #124	; 0x7c
    {
        uint32_t X[16], A, B, C, D;
    } local;

    local.X[ 0] = MBEDTLS_GET_UINT32_LE( data,  0 );
    local.X[ 1] = MBEDTLS_GET_UINT32_LE( data,  4 );
 8010f16:	684b      	ldr	r3, [r1, #4]
    local.X[ 0] = MBEDTLS_GET_UINT32_LE( data,  0 );
 8010f18:	f8d1 9000 	ldr.w	r9, [r1]
    local.X[ 1] = MBEDTLS_GET_UINT32_LE( data,  4 );
 8010f1c:	9300      	str	r3, [sp, #0]
 8010f1e:	930b      	str	r3, [sp, #44]	; 0x2c
    local.X[ 2] = MBEDTLS_GET_UINT32_LE( data,  8 );
 8010f20:	688b      	ldr	r3, [r1, #8]
    local.X[ 3] = MBEDTLS_GET_UINT32_LE( data, 12 );
 8010f22:	68ce      	ldr	r6, [r1, #12]
    local.X[ 2] = MBEDTLS_GET_UINT32_LE( data,  8 );
 8010f24:	9301      	str	r3, [sp, #4]
 8010f26:	930c      	str	r3, [sp, #48]	; 0x30
    local.X[ 4] = MBEDTLS_GET_UINT32_LE( data, 16 );
 8010f28:	690b      	ldr	r3, [r1, #16]
    local.X[ 5] = MBEDTLS_GET_UINT32_LE( data, 20 );
 8010f2a:	f8d1 c014 	ldr.w	ip, [r1, #20]
    local.X[ 4] = MBEDTLS_GET_UINT32_LE( data, 16 );
 8010f2e:	9302      	str	r3, [sp, #8]
 8010f30:	930e      	str	r3, [sp, #56]	; 0x38
    local.X[ 6] = MBEDTLS_GET_UINT32_LE( data, 24 );
 8010f32:	698b      	ldr	r3, [r1, #24]
    local.X[ 7] = MBEDTLS_GET_UINT32_LE( data, 28 );
 8010f34:	f8d1 801c 	ldr.w	r8, [r1, #28]
    local.X[ 6] = MBEDTLS_GET_UINT32_LE( data, 24 );
 8010f38:	9303      	str	r3, [sp, #12]
 8010f3a:	9310      	str	r3, [sp, #64]	; 0x40
    local.X[ 8] = MBEDTLS_GET_UINT32_LE( data, 32 );
 8010f3c:	6a0b      	ldr	r3, [r1, #32]
    local.X[ 0] = MBEDTLS_GET_UINT32_LE( data,  0 );
 8010f3e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    local.X[ 8] = MBEDTLS_GET_UINT32_LE( data, 32 );
 8010f42:	9304      	str	r3, [sp, #16]
 8010f44:	9312      	str	r3, [sp, #72]	; 0x48
    local.X[ 9] = MBEDTLS_GET_UINT32_LE( data, 36 );
 8010f46:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    local.X[ 3] = MBEDTLS_GET_UINT32_LE( data, 12 );
 8010f48:	960d      	str	r6, [sp, #52]	; 0x34
    local.X[ 9] = MBEDTLS_GET_UINT32_LE( data, 36 );
 8010f4a:	9305      	str	r3, [sp, #20]
 8010f4c:	9313      	str	r3, [sp, #76]	; 0x4c
    local.X[10] = MBEDTLS_GET_UINT32_LE( data, 40 );
 8010f4e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    local.X[ 5] = MBEDTLS_GET_UINT32_LE( data, 20 );
 8010f50:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    local.X[10] = MBEDTLS_GET_UINT32_LE( data, 40 );
 8010f54:	9306      	str	r3, [sp, #24]
 8010f56:	9314      	str	r3, [sp, #80]	; 0x50
    local.X[11] = MBEDTLS_GET_UINT32_LE( data, 44 );
 8010f58:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    local.X[ 7] = MBEDTLS_GET_UINT32_LE( data, 28 );
 8010f5a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    local.X[11] = MBEDTLS_GET_UINT32_LE( data, 44 );
 8010f5e:	9307      	str	r3, [sp, #28]
 8010f60:	9315      	str	r3, [sp, #84]	; 0x54
    local.X[12] = MBEDTLS_GET_UINT32_LE( data, 48 );
    local.X[13] = MBEDTLS_GET_UINT32_LE( data, 52 );
 8010f62:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    local.X[14] = MBEDTLS_GET_UINT32_LE( data, 56 );
 8010f64:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
    local.X[13] = MBEDTLS_GET_UINT32_LE( data, 52 );
 8010f68:	9308      	str	r3, [sp, #32]
 8010f6a:	9317      	str	r3, [sp, #92]	; 0x5c
    local.X[15] = MBEDTLS_GET_UINT32_LE( data, 60 );
 8010f6c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    local.X[12] = MBEDTLS_GET_UINT32_LE( data, 48 );
 8010f6e:	6b0f      	ldr	r7, [r1, #48]	; 0x30
    local.X[15] = MBEDTLS_GET_UINT32_LE( data, 60 );
 8010f70:	9309      	str	r3, [sp, #36]	; 0x24
 8010f72:	9319      	str	r3, [sp, #100]	; 0x64

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
 8010f74:	6901      	ldr	r1, [r0, #16]
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 8010f76:	9c02      	ldr	r4, [sp, #8]
    local.X[12] = MBEDTLS_GET_UINT32_LE( data, 48 );
 8010f78:	9716      	str	r7, [sp, #88]	; 0x58
    local.X[14] = MBEDTLS_GET_UINT32_LE( data, 56 );
 8010f7a:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
 8010f7e:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8010f82:	ea83 0b02 	eor.w	fp, r3, r2
 8010f86:	68c3      	ldr	r3, [r0, #12]
 8010f88:	ea0b 0b03 	and.w	fp, fp, r3
 8010f8c:	4be8      	ldr	r3, [pc, #928]	; (8011330 <mbedtls_internal_md5_process+0x420>)
 8010f8e:	ea8b 0b02 	eor.w	fp, fp, r2
 8010f92:	6882      	ldr	r2, [r0, #8]
 8010f94:	4413      	add	r3, r2
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
 8010f96:	6902      	ldr	r2, [r0, #16]
    P( local.A, local.B, local.C, local.D,  0,  7, 0xD76AA478 );
 8010f98:	444b      	add	r3, r9
 8010f9a:	449b      	add	fp, r3
 8010f9c:	68c3      	ldr	r3, [r0, #12]
 8010f9e:	eb03 6b7b 	add.w	fp, r3, fp, ror #25
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
 8010fa2:	ea83 0a02 	eor.w	sl, r3, r2
 8010fa6:	4be3      	ldr	r3, [pc, #908]	; (8011334 <mbedtls_internal_md5_process+0x424>)
 8010fa8:	ea0a 0a0b 	and.w	sl, sl, fp
 8010fac:	ea8a 0a02 	eor.w	sl, sl, r2
 8010fb0:	6942      	ldr	r2, [r0, #20]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	9a00      	ldr	r2, [sp, #0]
 8010fb6:	4413      	add	r3, r2
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
 8010fb8:	68c2      	ldr	r2, [r0, #12]
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
 8010fba:	449a      	add	sl, r3
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
 8010fbc:	68c3      	ldr	r3, [r0, #12]
    P( local.D, local.A, local.B, local.C,  1, 12, 0xE8C7B756 );
 8010fbe:	eb0b 5a3a 	add.w	sl, fp, sl, ror #20
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
 8010fc2:	ea83 030b 	eor.w	r3, r3, fp
 8010fc6:	ea03 030a 	and.w	r3, r3, sl
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
 8010fca:	ea8b 050a 	eor.w	r5, fp, sl
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
 8010fce:	4053      	eors	r3, r2
 8010fd0:	4ad9      	ldr	r2, [pc, #868]	; (8011338 <mbedtls_internal_md5_process+0x428>)
 8010fd2:	440a      	add	r2, r1
 8010fd4:	9901      	ldr	r1, [sp, #4]
 8010fd6:	440a      	add	r2, r1
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
 8010fd8:	68c1      	ldr	r1, [r0, #12]
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
 8010fda:	4413      	add	r3, r2
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
 8010fdc:	4ad7      	ldr	r2, [pc, #860]	; (801133c <mbedtls_internal_md5_process+0x42c>)
    P( local.C, local.D, local.A, local.B,  2, 17, 0x242070DB );
 8010fde:	eb0a 33f3 	add.w	r3, sl, r3, ror #15
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
 8010fe2:	440a      	add	r2, r1
 8010fe4:	401d      	ands	r5, r3
 8010fe6:	4432      	add	r2, r6
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 8010fe8:	ea8a 0103 	eor.w	r1, sl, r3
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
 8010fec:	ea85 050b 	eor.w	r5, r5, fp
 8010ff0:	4415      	add	r5, r2
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 8010ff2:	4ad3      	ldr	r2, [pc, #844]	; (8011340 <mbedtls_internal_md5_process+0x430>)
    P( local.B, local.C, local.D, local.A,  3, 22, 0xC1BDCEEE );
 8010ff4:	eb03 25b5 	add.w	r5, r3, r5, ror #10
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 8010ff8:	4422      	add	r2, r4
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
 8010ffa:	4cd2      	ldr	r4, [pc, #840]	; (8011344 <mbedtls_internal_md5_process+0x434>)
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 8010ffc:	4029      	ands	r1, r5
 8010ffe:	4493      	add	fp, r2
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
 8011000:	ea83 0205 	eor.w	r2, r3, r5
 8011004:	4464      	add	r4, ip
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 8011006:	ea81 010a 	eor.w	r1, r1, sl
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
 801100a:	44a2      	add	sl, r4
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 801100c:	4459      	add	r1, fp
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
 801100e:	f8dd b00c 	ldr.w	fp, [sp, #12]
    P( local.A, local.B, local.C, local.D,  4,  7, 0xF57C0FAF );
 8011012:	eb05 6171 	add.w	r1, r5, r1, ror #25
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
 8011016:	400a      	ands	r2, r1
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
 8011018:	ea85 0401 	eor.w	r4, r5, r1
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
 801101c:	405a      	eors	r2, r3
 801101e:	4452      	add	r2, sl
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
 8011020:	f8df a324 	ldr.w	sl, [pc, #804]	; 8011348 <mbedtls_internal_md5_process+0x438>
    P( local.D, local.A, local.B, local.C,  5, 12, 0x4787C62A );
 8011024:	eb01 5232 	add.w	r2, r1, r2, ror #20
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
 8011028:	44da      	add	sl, fp
 801102a:	4014      	ands	r4, r2
 801102c:	4453      	add	r3, sl
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
 801102e:	f8df a31c 	ldr.w	sl, [pc, #796]	; 801134c <mbedtls_internal_md5_process+0x43c>
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
 8011032:	406c      	eors	r4, r5
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
 8011034:	44c2      	add	sl, r8
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
 8011036:	441c      	add	r4, r3
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
 8011038:	ea81 0302 	eor.w	r3, r1, r2
 801103c:	4455      	add	r5, sl
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
 801103e:	f8dd a010 	ldr.w	sl, [sp, #16]
    P( local.C, local.D, local.A, local.B,  6, 17, 0xA8304613 );
 8011042:	eb02 34f4 	add.w	r4, r2, r4, ror #15
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
 8011046:	4023      	ands	r3, r4
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
 8011048:	ea82 0b04 	eor.w	fp, r2, r4
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
 801104c:	404b      	eors	r3, r1
 801104e:	442b      	add	r3, r5
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
 8011050:	4dbf      	ldr	r5, [pc, #764]	; (8011350 <mbedtls_internal_md5_process+0x440>)
    P( local.B, local.C, local.D, local.A,  7, 22, 0xFD469501 );
 8011052:	eb04 23b3 	add.w	r3, r4, r3, ror #10
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
 8011056:	4455      	add	r5, sl
 8011058:	ea0b 0b03 	and.w	fp, fp, r3
 801105c:	4429      	add	r1, r5
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
 801105e:	ea84 0a03 	eor.w	sl, r4, r3
 8011062:	9d05      	ldr	r5, [sp, #20]
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
 8011064:	ea8b 0b02 	eor.w	fp, fp, r2
 8011068:	448b      	add	fp, r1
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
 801106a:	49ba      	ldr	r1, [pc, #744]	; (8011354 <mbedtls_internal_md5_process+0x444>)
    P( local.A, local.B, local.C, local.D,  8,  7, 0x698098D8 );
 801106c:	eb03 6b7b 	add.w	fp, r3, fp, ror #25
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
 8011070:	4429      	add	r1, r5
 8011072:	ea0a 0a0b 	and.w	sl, sl, fp
 8011076:	440a      	add	r2, r1
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
 8011078:	9906      	ldr	r1, [sp, #24]
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
 801107a:	ea8a 0a04 	eor.w	sl, sl, r4
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
 801107e:	f5a1 4124 	sub.w	r1, r1, #41984	; 0xa400
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
 8011082:	4492      	add	sl, r2
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
 8011084:	ea83 020b 	eor.w	r2, r3, fp
 8011088:	394f      	subs	r1, #79	; 0x4f
    P( local.D, local.A, local.B, local.C,  9, 12, 0x8B44F7AF );
 801108a:	eb0b 5a3a 	add.w	sl, fp, sl, ror #20
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
 801108e:	440c      	add	r4, r1
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
 8011090:	49b1      	ldr	r1, [pc, #708]	; (8011358 <mbedtls_internal_md5_process+0x448>)
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
 8011092:	ea02 020a 	and.w	r2, r2, sl
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
 8011096:	ea8b 050a 	eor.w	r5, fp, sl
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
 801109a:	405a      	eors	r2, r3
 801109c:	4422      	add	r2, r4
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
 801109e:	9c07      	ldr	r4, [sp, #28]
    P( local.C, local.D, local.A, local.B, 10, 17, 0xFFFF5BB1 );
 80110a0:	eb0a 32f2 	add.w	r2, sl, r2, ror #15
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
 80110a4:	4421      	add	r1, r4
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
 80110a6:	4cad      	ldr	r4, [pc, #692]	; (801135c <mbedtls_internal_md5_process+0x44c>)
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
 80110a8:	4015      	ands	r5, r2
 80110aa:	440b      	add	r3, r1
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
 80110ac:	ea8a 0102 	eor.w	r1, sl, r2
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
 80110b0:	ea85 050b 	eor.w	r5, r5, fp
 80110b4:	441d      	add	r5, r3
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
 80110b6:	4baa      	ldr	r3, [pc, #680]	; (8011360 <mbedtls_internal_md5_process+0x450>)
    P( local.B, local.C, local.D, local.A, 11, 22, 0x895CD7BE );
 80110b8:	eb02 25b5 	add.w	r5, r2, r5, ror #10
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
 80110bc:	443b      	add	r3, r7
 80110be:	4029      	ands	r1, r5
 80110c0:	449b      	add	fp, r3
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
 80110c2:	ea82 0305 	eor.w	r3, r2, r5
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
 80110c6:	ea81 010a 	eor.w	r1, r1, sl
 80110ca:	4459      	add	r1, fp
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
 80110cc:	f8dd b020 	ldr.w	fp, [sp, #32]
    P( local.A, local.B, local.C, local.D, 12,  7, 0x6B901122 );
 80110d0:	eb05 6171 	add.w	r1, r5, r1, ror #25
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
 80110d4:	445c      	add	r4, fp
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
 80110d6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
 80110da:	400b      	ands	r3, r1
 80110dc:	44a2      	add	sl, r4
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
 80110de:	ea85 0401 	eor.w	r4, r5, r1
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
 80110e2:	4053      	eors	r3, r2
 80110e4:	4453      	add	r3, sl
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
 80110e6:	f8df a27c 	ldr.w	sl, [pc, #636]	; 8011364 <mbedtls_internal_md5_process+0x454>
    P( local.D, local.A, local.B, local.C, 13, 12, 0xFD987193 );
 80110ea:	eb01 5333 	add.w	r3, r1, r3, ror #20
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
 80110ee:	44f2      	add	sl, lr
 80110f0:	401c      	ands	r4, r3
 80110f2:	4452      	add	r2, sl
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
 80110f4:	f8df a270 	ldr.w	sl, [pc, #624]	; 8011368 <mbedtls_internal_md5_process+0x458>
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
 80110f8:	406c      	eors	r4, r5
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
 80110fa:	44da      	add	sl, fp
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
 80110fc:	4414      	add	r4, r2
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
 80110fe:	ea81 0203 	eor.w	r2, r1, r3
 8011102:	4455      	add	r5, sl

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( local.A, local.B, local.C, local.D,  1,  5, 0xF61E2562 );
 8011104:	f8dd a000 	ldr.w	sl, [sp]
    P( local.C, local.D, local.A, local.B, 14, 17, 0xA679438E );
 8011108:	eb03 34f4 	add.w	r4, r3, r4, ror #15
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
 801110c:	4022      	ands	r2, r4
 801110e:	404a      	eors	r2, r1
 8011110:	442a      	add	r2, r5
    P( local.A, local.B, local.C, local.D,  1,  5, 0xF61E2562 );
 8011112:	4d96      	ldr	r5, [pc, #600]	; (801136c <mbedtls_internal_md5_process+0x45c>)
    P( local.B, local.C, local.D, local.A, 15, 22, 0x49B40821 );
 8011114:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( local.A, local.B, local.C, local.D,  1,  5, 0xF61E2562 );
 8011118:	4455      	add	r5, sl
 801111a:	ea84 0b02 	eor.w	fp, r4, r2
 801111e:	4429      	add	r1, r5
    P( local.D, local.A, local.B, local.C,  6,  9, 0xC040B340 );
 8011120:	9d03      	ldr	r5, [sp, #12]
    P( local.A, local.B, local.C, local.D,  1,  5, 0xF61E2562 );
 8011122:	ea0b 0b03 	and.w	fp, fp, r3
 8011126:	ea8b 0b04 	eor.w	fp, fp, r4
 801112a:	448b      	add	fp, r1
    P( local.D, local.A, local.B, local.C,  6,  9, 0xC040B340 );
 801112c:	4990      	ldr	r1, [pc, #576]	; (8011370 <mbedtls_internal_md5_process+0x460>)
    P( local.A, local.B, local.C, local.D,  1,  5, 0xF61E2562 );
 801112e:	eb02 6bfb 	add.w	fp, r2, fp, ror #27
    P( local.D, local.A, local.B, local.C,  6,  9, 0xC040B340 );
 8011132:	4429      	add	r1, r5
    P( local.C, local.D, local.A, local.B, 11, 14, 0x265E5A51 );
 8011134:	9d07      	ldr	r5, [sp, #28]
    P( local.D, local.A, local.B, local.C,  6,  9, 0xC040B340 );
 8011136:	ea82 0a0b 	eor.w	sl, r2, fp
 801113a:	4419      	add	r1, r3
 801113c:	ea0a 0a04 	and.w	sl, sl, r4
 8011140:	ea8a 0a02 	eor.w	sl, sl, r2
 8011144:	448a      	add	sl, r1
    P( local.C, local.D, local.A, local.B, 11, 14, 0x265E5A51 );
 8011146:	498b      	ldr	r1, [pc, #556]	; (8011374 <mbedtls_internal_md5_process+0x464>)
    P( local.D, local.A, local.B, local.C,  6,  9, 0xC040B340 );
 8011148:	eb0b 5afa 	add.w	sl, fp, sl, ror #23
    P( local.C, local.D, local.A, local.B, 11, 14, 0x265E5A51 );
 801114c:	4429      	add	r1, r5
 801114e:	ea8b 030a 	eor.w	r3, fp, sl
 8011152:	440c      	add	r4, r1
    P( local.B, local.C, local.D, local.A,  0, 20, 0xE9B6C7AA );
 8011154:	4988      	ldr	r1, [pc, #544]	; (8011378 <mbedtls_internal_md5_process+0x468>)
    P( local.C, local.D, local.A, local.B, 11, 14, 0x265E5A51 );
 8011156:	4013      	ands	r3, r2
    P( local.B, local.C, local.D, local.A,  0, 20, 0xE9B6C7AA );
 8011158:	4449      	add	r1, r9
    P( local.C, local.D, local.A, local.B, 11, 14, 0x265E5A51 );
 801115a:	ea83 030b 	eor.w	r3, r3, fp
    P( local.B, local.C, local.D, local.A,  0, 20, 0xE9B6C7AA );
 801115e:	440a      	add	r2, r1
    P( local.A, local.B, local.C, local.D,  5,  5, 0xD62F105D );
 8011160:	4986      	ldr	r1, [pc, #536]	; (801137c <mbedtls_internal_md5_process+0x46c>)
    P( local.C, local.D, local.A, local.B, 11, 14, 0x265E5A51 );
 8011162:	4423      	add	r3, r4
    P( local.D, local.A, local.B, local.C, 10,  9, 0x02441453 );
 8011164:	4c86      	ldr	r4, [pc, #536]	; (8011380 <mbedtls_internal_md5_process+0x470>)
    P( local.A, local.B, local.C, local.D,  5,  5, 0xD62F105D );
 8011166:	4461      	add	r1, ip
    P( local.C, local.D, local.A, local.B, 11, 14, 0x265E5A51 );
 8011168:	eb0a 43b3 	add.w	r3, sl, r3, ror #18
    P( local.B, local.C, local.D, local.A,  0, 20, 0xE9B6C7AA );
 801116c:	ea8a 0503 	eor.w	r5, sl, r3
 8011170:	ea05 050b 	and.w	r5, r5, fp
    P( local.A, local.B, local.C, local.D,  5,  5, 0xD62F105D );
 8011174:	448b      	add	fp, r1
    P( local.B, local.C, local.D, local.A,  0, 20, 0xE9B6C7AA );
 8011176:	ea85 050a 	eor.w	r5, r5, sl
 801117a:	4415      	add	r5, r2
 801117c:	eb03 3535 	add.w	r5, r3, r5, ror #12
    P( local.A, local.B, local.C, local.D,  5,  5, 0xD62F105D );
 8011180:	ea83 0205 	eor.w	r2, r3, r5
 8011184:	ea02 020a 	and.w	r2, r2, sl
 8011188:	405a      	eors	r2, r3
 801118a:	445a      	add	r2, fp
    P( local.D, local.A, local.B, local.C, 10,  9, 0x02441453 );
 801118c:	f8dd b018 	ldr.w	fp, [sp, #24]
    P( local.A, local.B, local.C, local.D,  5,  5, 0xD62F105D );
 8011190:	eb05 62f2 	add.w	r2, r5, r2, ror #27
    P( local.D, local.A, local.B, local.C, 10,  9, 0x02441453 );
 8011194:	445c      	add	r4, fp
    P( local.C, local.D, local.A, local.B, 15, 14, 0xD8A1E681 );
 8011196:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( local.D, local.A, local.B, local.C, 10,  9, 0x02441453 );
 801119a:	ea85 0102 	eor.w	r1, r5, r2
 801119e:	44a2      	add	sl, r4
 80111a0:	4019      	ands	r1, r3
 80111a2:	4069      	eors	r1, r5
 80111a4:	4451      	add	r1, sl
    P( local.C, local.D, local.A, local.B, 15, 14, 0xD8A1E681 );
 80111a6:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8011384 <mbedtls_internal_md5_process+0x474>
    P( local.D, local.A, local.B, local.C, 10,  9, 0x02441453 );
 80111aa:	eb02 51f1 	add.w	r1, r2, r1, ror #23
    P( local.C, local.D, local.A, local.B, 15, 14, 0xD8A1E681 );
 80111ae:	44da      	add	sl, fp
    P( local.B, local.C, local.D, local.A,  4, 20, 0xE7D3FBC8 );
 80111b0:	f8dd b008 	ldr.w	fp, [sp, #8]
    P( local.C, local.D, local.A, local.B, 15, 14, 0xD8A1E681 );
 80111b4:	ea82 0401 	eor.w	r4, r2, r1
 80111b8:	4453      	add	r3, sl
    P( local.B, local.C, local.D, local.A,  4, 20, 0xE7D3FBC8 );
 80111ba:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8011388 <mbedtls_internal_md5_process+0x478>
    P( local.C, local.D, local.A, local.B, 15, 14, 0xD8A1E681 );
 80111be:	402c      	ands	r4, r5
    P( local.B, local.C, local.D, local.A,  4, 20, 0xE7D3FBC8 );
 80111c0:	44da      	add	sl, fp
    P( local.C, local.D, local.A, local.B, 15, 14, 0xD8A1E681 );
 80111c2:	4054      	eors	r4, r2
    P( local.B, local.C, local.D, local.A,  4, 20, 0xE7D3FBC8 );
 80111c4:	4455      	add	r5, sl
    P( local.A, local.B, local.C, local.D,  9,  5, 0x21E1CDE6 );
 80111c6:	f8dd a014 	ldr.w	sl, [sp, #20]
    P( local.C, local.D, local.A, local.B, 15, 14, 0xD8A1E681 );
 80111ca:	441c      	add	r4, r3
 80111cc:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( local.B, local.C, local.D, local.A,  4, 20, 0xE7D3FBC8 );
 80111d0:	ea81 0304 	eor.w	r3, r1, r4
 80111d4:	4013      	ands	r3, r2
 80111d6:	404b      	eors	r3, r1
 80111d8:	442b      	add	r3, r5
    P( local.A, local.B, local.C, local.D,  9,  5, 0x21E1CDE6 );
 80111da:	4d6c      	ldr	r5, [pc, #432]	; (801138c <mbedtls_internal_md5_process+0x47c>)
    P( local.B, local.C, local.D, local.A,  4, 20, 0xE7D3FBC8 );
 80111dc:	eb04 3333 	add.w	r3, r4, r3, ror #12
    P( local.A, local.B, local.C, local.D,  9,  5, 0x21E1CDE6 );
 80111e0:	4455      	add	r5, sl
 80111e2:	ea84 0b03 	eor.w	fp, r4, r3
 80111e6:	442a      	add	r2, r5
 80111e8:	ea0b 0b01 	and.w	fp, fp, r1
 80111ec:	ea8b 0b04 	eor.w	fp, fp, r4
 80111f0:	4493      	add	fp, r2
    P( local.D, local.A, local.B, local.C, 14,  9, 0xC33707D6 );
 80111f2:	4a67      	ldr	r2, [pc, #412]	; (8011390 <mbedtls_internal_md5_process+0x480>)
    P( local.A, local.B, local.C, local.D,  9,  5, 0x21E1CDE6 );
 80111f4:	eb03 6bfb 	add.w	fp, r3, fp, ror #27
    P( local.D, local.A, local.B, local.C, 14,  9, 0xC33707D6 );
 80111f8:	4472      	add	r2, lr
 80111fa:	ea83 0a0b 	eor.w	sl, r3, fp
 80111fe:	4411      	add	r1, r2
    P( local.C, local.D, local.A, local.B,  3, 14, 0xF4D50D87 );
 8011200:	4a64      	ldr	r2, [pc, #400]	; (8011394 <mbedtls_internal_md5_process+0x484>)
    P( local.D, local.A, local.B, local.C, 14,  9, 0xC33707D6 );
 8011202:	ea0a 0a04 	and.w	sl, sl, r4
    P( local.C, local.D, local.A, local.B,  3, 14, 0xF4D50D87 );
 8011206:	4432      	add	r2, r6
    P( local.D, local.A, local.B, local.C, 14,  9, 0xC33707D6 );
 8011208:	ea8a 0a03 	eor.w	sl, sl, r3
    P( local.C, local.D, local.A, local.B,  3, 14, 0xF4D50D87 );
 801120c:	4414      	add	r4, r2
    P( local.D, local.A, local.B, local.C, 14,  9, 0xC33707D6 );
 801120e:	448a      	add	sl, r1
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
 8011210:	4961      	ldr	r1, [pc, #388]	; (8011398 <mbedtls_internal_md5_process+0x488>)
    P( local.D, local.A, local.B, local.C, 14,  9, 0xC33707D6 );
 8011212:	eb0b 5afa 	add.w	sl, fp, sl, ror #23
    P( local.C, local.D, local.A, local.B,  3, 14, 0xF4D50D87 );
 8011216:	ea8b 050a 	eor.w	r5, fp, sl
 801121a:	401d      	ands	r5, r3
 801121c:	ea85 050b 	eor.w	r5, r5, fp
 8011220:	4425      	add	r5, r4
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
 8011222:	9c04      	ldr	r4, [sp, #16]
    P( local.C, local.D, local.A, local.B,  3, 14, 0xF4D50D87 );
 8011224:	eb0a 45b5 	add.w	r5, sl, r5, ror #18
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
 8011228:	4421      	add	r1, r4
    P( local.A, local.B, local.C, local.D, 13,  5, 0xA9E3E905 );
 801122a:	9c08      	ldr	r4, [sp, #32]
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
 801122c:	ea8a 0205 	eor.w	r2, sl, r5
 8011230:	440b      	add	r3, r1
    P( local.A, local.B, local.C, local.D, 13,  5, 0xA9E3E905 );
 8011232:	495a      	ldr	r1, [pc, #360]	; (801139c <mbedtls_internal_md5_process+0x48c>)
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
 8011234:	ea02 020b 	and.w	r2, r2, fp
    P( local.A, local.B, local.C, local.D, 13,  5, 0xA9E3E905 );
 8011238:	4421      	add	r1, r4
    P( local.D, local.A, local.B, local.C,  2,  9, 0xFCEFA3F8 );
 801123a:	4c59      	ldr	r4, [pc, #356]	; (80113a0 <mbedtls_internal_md5_process+0x490>)
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
 801123c:	ea82 020a 	eor.w	r2, r2, sl
    P( local.A, local.B, local.C, local.D, 13,  5, 0xA9E3E905 );
 8011240:	4459      	add	r1, fp
    P( local.D, local.A, local.B, local.C,  2,  9, 0xFCEFA3F8 );
 8011242:	f8dd b004 	ldr.w	fp, [sp, #4]
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
 8011246:	441a      	add	r2, r3
    P( local.D, local.A, local.B, local.C,  2,  9, 0xFCEFA3F8 );
 8011248:	445c      	add	r4, fp
    P( local.B, local.C, local.D, local.A,  8, 20, 0x455A14ED );
 801124a:	eb05 3232 	add.w	r2, r5, r2, ror #12
    P( local.D, local.A, local.B, local.C,  2,  9, 0xFCEFA3F8 );
 801124e:	4454      	add	r4, sl
    P( local.A, local.B, local.C, local.D, 13,  5, 0xA9E3E905 );
 8011250:	ea85 0302 	eor.w	r3, r5, r2
 8011254:	ea03 030a 	and.w	r3, r3, sl
    P( local.C, local.D, local.A, local.B,  7, 14, 0x676F02D9 );
 8011258:	f8df a148 	ldr.w	sl, [pc, #328]	; 80113a4 <mbedtls_internal_md5_process+0x494>
    P( local.A, local.B, local.C, local.D, 13,  5, 0xA9E3E905 );
 801125c:	406b      	eors	r3, r5
    P( local.C, local.D, local.A, local.B,  7, 14, 0x676F02D9 );
 801125e:	44c2      	add	sl, r8
    P( local.A, local.B, local.C, local.D, 13,  5, 0xA9E3E905 );
 8011260:	440b      	add	r3, r1
 8011262:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( local.D, local.A, local.B, local.C,  2,  9, 0xFCEFA3F8 );
 8011266:	ea82 0103 	eor.w	r1, r2, r3
 801126a:	4029      	ands	r1, r5
    P( local.C, local.D, local.A, local.B,  7, 14, 0x676F02D9 );
 801126c:	4455      	add	r5, sl
    P( local.B, local.C, local.D, local.A, 12, 20, 0x8D2A4C8A );
 801126e:	f8df a138 	ldr.w	sl, [pc, #312]	; 80113a8 <mbedtls_internal_md5_process+0x498>
    P( local.D, local.A, local.B, local.C,  2,  9, 0xFCEFA3F8 );
 8011272:	4051      	eors	r1, r2
    P( local.B, local.C, local.D, local.A, 12, 20, 0x8D2A4C8A );
 8011274:	44ba      	add	sl, r7
    P( local.D, local.A, local.B, local.C,  2,  9, 0xFCEFA3F8 );
 8011276:	4421      	add	r1, r4
 8011278:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( local.C, local.D, local.A, local.B,  7, 14, 0x676F02D9 );
 801127c:	ea83 0401 	eor.w	r4, r3, r1
 8011280:	4014      	ands	r4, r2
    P( local.B, local.C, local.D, local.A, 12, 20, 0x8D2A4C8A );
 8011282:	4452      	add	r2, sl
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
 8011284:	f8df a124 	ldr.w	sl, [pc, #292]	; 80113ac <mbedtls_internal_md5_process+0x49c>
    P( local.C, local.D, local.A, local.B,  7, 14, 0x676F02D9 );
 8011288:	405c      	eors	r4, r3
 801128a:	442c      	add	r4, r5
 801128c:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( local.B, local.C, local.D, local.A, 12, 20, 0x8D2A4C8A );
 8011290:	ea81 0b04 	eor.w	fp, r1, r4
 8011294:	ea03 050b 	and.w	r5, r3, fp
 8011298:	404d      	eors	r5, r1
 801129a:	442a      	add	r2, r5
    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
 801129c:	f5ac 25b8 	sub.w	r5, ip, #376832	; 0x5c000
    P( local.B, local.C, local.D, local.A, 12, 20, 0x8D2A4C8A );
 80112a0:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
 80112a4:	f2a5 65be 	subw	r5, r5, #1726	; 0x6be
 80112a8:	ea8b 0b02 	eor.w	fp, fp, r2
 80112ac:	442b      	add	r3, r5
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
 80112ae:	ea84 0502 	eor.w	r5, r4, r2
    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
 80112b2:	445b      	add	r3, fp
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
 80112b4:	f8dd b010 	ldr.w	fp, [sp, #16]
    P( local.A, local.B, local.C, local.D,  5,  4, 0xFFFA3942 );
 80112b8:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
 80112bc:	44da      	add	sl, fp
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
 80112be:	f8dd b01c 	ldr.w	fp, [sp, #28]
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
 80112c2:	405d      	eors	r5, r3
 80112c4:	4451      	add	r1, sl
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
 80112c6:	ea82 0a03 	eor.w	sl, r2, r3
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
 80112ca:	4429      	add	r1, r5
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
 80112cc:	4d38      	ldr	r5, [pc, #224]	; (80113b0 <mbedtls_internal_md5_process+0x4a0>)
    P( local.D, local.A, local.B, local.C,  8, 11, 0x8771F681 );
 80112ce:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
 80112d2:	445d      	add	r5, fp
 80112d4:	ea8a 0a01 	eor.w	sl, sl, r1
 80112d8:	442c      	add	r4, r5
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
 80112da:	ea83 0501 	eor.w	r5, r3, r1
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
 80112de:	4454      	add	r4, sl
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
 80112e0:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80113b4 <mbedtls_internal_md5_process+0x4a4>
    P( local.C, local.D, local.A, local.B, 11, 16, 0x6D9D6122 );
 80112e4:	eb01 4434 	add.w	r4, r1, r4, ror #16
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
 80112e8:	44f2      	add	sl, lr
 80112ea:	4065      	eors	r5, r4
 80112ec:	4452      	add	r2, sl
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
 80112ee:	f8dd a000 	ldr.w	sl, [sp]
 80112f2:	ea81 0b04 	eor.w	fp, r1, r4
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
 80112f6:	4415      	add	r5, r2
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
 80112f8:	4a2f      	ldr	r2, [pc, #188]	; (80113b8 <mbedtls_internal_md5_process+0x4a8>)
    P( local.B, local.C, local.D, local.A, 14, 23, 0xFDE5380C );
 80112fa:	eb04 2575 	add.w	r5, r4, r5, ror #9
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
 80112fe:	4452      	add	r2, sl
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
 8011300:	f8dd a008 	ldr.w	sl, [sp, #8]
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
 8011304:	4413      	add	r3, r2
 8011306:	ea8b 0b05 	eor.w	fp, fp, r5
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
 801130a:	4a2c      	ldr	r2, [pc, #176]	; (80113bc <mbedtls_internal_md5_process+0x4ac>)
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
 801130c:	449b      	add	fp, r3
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
 801130e:	ea84 0305 	eor.w	r3, r4, r5
 8011312:	4452      	add	r2, sl
    P( local.A, local.B, local.C, local.D,  1,  4, 0xA4BEEA44 );
 8011314:	eb05 7b3b 	add.w	fp, r5, fp, ror #28
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
 8011318:	4411      	add	r1, r2
 801131a:	ea83 030b 	eor.w	r3, r3, fp
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
 801131e:	ea85 0a0b 	eor.w	sl, r5, fp
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
 8011322:	4419      	add	r1, r3
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
 8011324:	4b26      	ldr	r3, [pc, #152]	; (80113c0 <mbedtls_internal_md5_process+0x4b0>)
    P( local.D, local.A, local.B, local.C,  4, 11, 0x4BDECFA9 );
 8011326:	eb0b 5171 	add.w	r1, fp, r1, ror #21
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
 801132a:	4443      	add	r3, r8
 801132c:	e04a      	b.n	80113c4 <mbedtls_internal_md5_process+0x4b4>
 801132e:	bf00      	nop
 8011330:	d76aa478 	.word	0xd76aa478
 8011334:	e8c7b756 	.word	0xe8c7b756
 8011338:	242070db 	.word	0x242070db
 801133c:	c1bdceee 	.word	0xc1bdceee
 8011340:	f57c0faf 	.word	0xf57c0faf
 8011344:	4787c62a 	.word	0x4787c62a
 8011348:	a8304613 	.word	0xa8304613
 801134c:	fd469501 	.word	0xfd469501
 8011350:	698098d8 	.word	0x698098d8
 8011354:	8b44f7af 	.word	0x8b44f7af
 8011358:	895cd7be 	.word	0x895cd7be
 801135c:	fd987193 	.word	0xfd987193
 8011360:	6b901122 	.word	0x6b901122
 8011364:	a679438e 	.word	0xa679438e
 8011368:	49b40821 	.word	0x49b40821
 801136c:	f61e2562 	.word	0xf61e2562
 8011370:	c040b340 	.word	0xc040b340
 8011374:	265e5a51 	.word	0x265e5a51
 8011378:	e9b6c7aa 	.word	0xe9b6c7aa
 801137c:	d62f105d 	.word	0xd62f105d
 8011380:	02441453 	.word	0x02441453
 8011384:	d8a1e681 	.word	0xd8a1e681
 8011388:	e7d3fbc8 	.word	0xe7d3fbc8
 801138c:	21e1cde6 	.word	0x21e1cde6
 8011390:	c33707d6 	.word	0xc33707d6
 8011394:	f4d50d87 	.word	0xf4d50d87
 8011398:	455a14ed 	.word	0x455a14ed
 801139c:	a9e3e905 	.word	0xa9e3e905
 80113a0:	fcefa3f8 	.word	0xfcefa3f8
 80113a4:	676f02d9 	.word	0x676f02d9
 80113a8:	8d2a4c8a 	.word	0x8d2a4c8a
 80113ac:	8771f681 	.word	0x8771f681
 80113b0:	6d9d6122 	.word	0x6d9d6122
 80113b4:	fde5380c 	.word	0xfde5380c
 80113b8:	a4beea44 	.word	0xa4beea44
 80113bc:	4bdecfa9 	.word	0x4bdecfa9
 80113c0:	f6bb4b60 	.word	0xf6bb4b60
 80113c4:	ea8a 0a01 	eor.w	sl, sl, r1
 80113c8:	441c      	add	r4, r3
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
 80113ca:	4b8c      	ldr	r3, [pc, #560]	; (80115fc <mbedtls_internal_md5_process+0x6ec>)
 80113cc:	ea8b 0201 	eor.w	r2, fp, r1
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
 80113d0:	44a2      	add	sl, r4
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
 80113d2:	9c06      	ldr	r4, [sp, #24]
    P( local.C, local.D, local.A, local.B,  7, 16, 0xF6BB4B60 );
 80113d4:	eb01 4a3a 	add.w	sl, r1, sl, ror #16
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
 80113d8:	4423      	add	r3, r4
 80113da:	ea82 020a 	eor.w	r2, r2, sl
 80113de:	442b      	add	r3, r5
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
 80113e0:	9d08      	ldr	r5, [sp, #32]
 80113e2:	ea81 040a 	eor.w	r4, r1, sl
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
 80113e6:	441a      	add	r2, r3
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
 80113e8:	4b85      	ldr	r3, [pc, #532]	; (8011600 <mbedtls_internal_md5_process+0x6f0>)
    P( local.B, local.C, local.D, local.A, 10, 23, 0xBEBFBC70 );
 80113ea:	eb0a 2272 	add.w	r2, sl, r2, ror #9
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
 80113ee:	442b      	add	r3, r5
 80113f0:	4054      	eors	r4, r2
 80113f2:	449b      	add	fp, r3
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
 80113f4:	4b83      	ldr	r3, [pc, #524]	; (8011604 <mbedtls_internal_md5_process+0x6f4>)
 80113f6:	ea8a 0502 	eor.w	r5, sl, r2
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
 80113fa:	44a3      	add	fp, r4
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
 80113fc:	9c03      	ldr	r4, [sp, #12]
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
 80113fe:	444b      	add	r3, r9
    P( local.A, local.B, local.C, local.D, 13,  4, 0x289B7EC6 );
 8011400:	eb02 7b3b 	add.w	fp, r2, fp, ror #28
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
 8011404:	4419      	add	r1, r3
 8011406:	ea85 050b 	eor.w	r5, r5, fp
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
 801140a:	ea82 030b 	eor.w	r3, r2, fp
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
 801140e:	440d      	add	r5, r1
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
 8011410:	497d      	ldr	r1, [pc, #500]	; (8011608 <mbedtls_internal_md5_process+0x6f8>)
    P( local.D, local.A, local.B, local.C,  0, 11, 0xEAA127FA );
 8011412:	eb0b 5575 	add.w	r5, fp, r5, ror #21
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
 8011416:	4431      	add	r1, r6
 8011418:	406b      	eors	r3, r5
 801141a:	4451      	add	r1, sl
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
 801141c:	ea8b 0a05 	eor.w	sl, fp, r5
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
 8011420:	440b      	add	r3, r1
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
 8011422:	497a      	ldr	r1, [pc, #488]	; (801160c <mbedtls_internal_md5_process+0x6fc>)
    P( local.C, local.D, local.A, local.B,  3, 16, 0xD4EF3085 );
 8011424:	eb05 4333 	add.w	r3, r5, r3, ror #16
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
 8011428:	4421      	add	r1, r4
 801142a:	ea8a 0a03 	eor.w	sl, sl, r3
 801142e:	440a      	add	r2, r1
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
 8011430:	9905      	ldr	r1, [sp, #20]
 8011432:	ea85 0403 	eor.w	r4, r5, r3
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
 8011436:	4492      	add	sl, r2
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
 8011438:	4a75      	ldr	r2, [pc, #468]	; (8011610 <mbedtls_internal_md5_process+0x700>)
    P( local.B, local.C, local.D, local.A,  6, 23, 0x04881D05 );
 801143a:	eb03 2a7a 	add.w	sl, r3, sl, ror #9
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
 801143e:	440a      	add	r2, r1
 8011440:	ea84 040a 	eor.w	r4, r4, sl
 8011444:	4493      	add	fp, r2
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
 8011446:	4a73      	ldr	r2, [pc, #460]	; (8011614 <mbedtls_internal_md5_process+0x704>)
 8011448:	ea83 010a 	eor.w	r1, r3, sl
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
 801144c:	445c      	add	r4, fp
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 801144e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
 8011452:	443a      	add	r2, r7
    P( local.A, local.B, local.C, local.D,  9,  4, 0xD9D4D039 );
 8011454:	eb0a 7434 	add.w	r4, sl, r4, ror #28
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
 8011458:	442a      	add	r2, r5
 801145a:	4061      	eors	r1, r4
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 801145c:	ea8a 0504 	eor.w	r5, sl, r4
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
 8011460:	4411      	add	r1, r2
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 8011462:	4a6d      	ldr	r2, [pc, #436]	; (8011618 <mbedtls_internal_md5_process+0x708>)
    P( local.D, local.A, local.B, local.C, 12, 11, 0xE6DB99E5 );
 8011464:	eb04 5171 	add.w	r1, r4, r1, ror #21
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 8011468:	445a      	add	r2, fp
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
 801146a:	f8dd b004 	ldr.w	fp, [sp, #4]
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 801146e:	4413      	add	r3, r2
 8011470:	404d      	eors	r5, r1
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
 8011472:	ea84 0201 	eor.w	r2, r4, r1
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 8011476:	441d      	add	r5, r3
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
 8011478:	4b68      	ldr	r3, [pc, #416]	; (801161c <mbedtls_internal_md5_process+0x70c>)
    P( local.C, local.D, local.A, local.B, 15, 16, 0x1FA27CF8 );
 801147a:	eb01 4535 	add.w	r5, r1, r5, ror #16
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
 801147e:	445b      	add	r3, fp
 8011480:	406a      	eors	r2, r5
 8011482:	4453      	add	r3, sl

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
 8011484:	f8df a198 	ldr.w	sl, [pc, #408]	; 8011620 <mbedtls_internal_md5_process+0x710>
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
 8011488:	441a      	add	r2, r3
    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
 801148a:	44ca      	add	sl, r9
    P( local.B, local.C, local.D, local.A,  2, 23, 0xC4AC5665 );
 801148c:	eb05 2272 	add.w	r2, r5, r2, ror #9
    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
 8011490:	44a2      	add	sl, r4
    P( local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97 );
 8011492:	4c64      	ldr	r4, [pc, #400]	; (8011624 <mbedtls_internal_md5_process+0x714>)
    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
 8011494:	ea62 0301 	orn	r3, r2, r1
    P( local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97 );
 8011498:	4444      	add	r4, r8
    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
 801149a:	406b      	eors	r3, r5
    P( local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97 );
 801149c:	440c      	add	r4, r1
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
 801149e:	4962      	ldr	r1, [pc, #392]	; (8011628 <mbedtls_internal_md5_process+0x718>)
    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
 80114a0:	4453      	add	r3, sl
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
 80114a2:	4471      	add	r1, lr
    P( local.A, local.B, local.C, local.D,  0,  6, 0xF4292244 );
 80114a4:	eb02 63b3 	add.w	r3, r2, r3, ror #26
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
 80114a8:	4429      	add	r1, r5
    P( local.D, local.A, local.B, local.C,  7, 10, 0x432AFF97 );
 80114aa:	ea63 0905 	orn	r9, r3, r5
 80114ae:	ea89 0902 	eor.w	r9, r9, r2
 80114b2:	44a1      	add	r9, r4
 80114b4:	eb03 59b9 	add.w	r9, r3, r9, ror #22
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
 80114b8:	ea69 0802 	orn	r8, r9, r2
 80114bc:	ea88 0803 	eor.w	r8, r8, r3
 80114c0:	4488      	add	r8, r1
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
 80114c2:	495a      	ldr	r1, [pc, #360]	; (801162c <mbedtls_internal_md5_process+0x71c>)
    P( local.C, local.D, local.A, local.B, 14, 15, 0xAB9423A7 );
 80114c4:	eb09 4878 	add.w	r8, r9, r8, ror #17
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
 80114c8:	4461      	add	r1, ip
 80114ca:	ea68 0403 	orn	r4, r8, r3
 80114ce:	4411      	add	r1, r2
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
 80114d0:	4a57      	ldr	r2, [pc, #348]	; (8011630 <mbedtls_internal_md5_process+0x720>)
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
 80114d2:	ea84 0409 	eor.w	r4, r4, r9
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
 80114d6:	443a      	add	r2, r7
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
 80114d8:	440c      	add	r4, r1
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
 80114da:	9900      	ldr	r1, [sp, #0]
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
 80114dc:	4413      	add	r3, r2
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
 80114de:	9a06      	ldr	r2, [sp, #24]
    P( local.B, local.C, local.D, local.A,  5, 21, 0xFC93A039 );
 80114e0:	eb08 24f4 	add.w	r4, r8, r4, ror #11
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
 80114e4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
 80114e8:	ea64 0509 	orn	r5, r4, r9
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
 80114ec:	f6a2 3283 	subw	r2, r2, #2947	; 0xb83
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
 80114f0:	ea85 0508 	eor.w	r5, r5, r8
 80114f4:	441d      	add	r5, r3
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
 80114f6:	4b4f      	ldr	r3, [pc, #316]	; (8011634 <mbedtls_internal_md5_process+0x724>)
    P( local.A, local.B, local.C, local.D, 12,  6, 0x655B59C3 );
 80114f8:	eb04 65b5 	add.w	r5, r4, r5, ror #26
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
 80114fc:	4433      	add	r3, r6
 80114fe:	ea65 0708 	orn	r7, r5, r8
 8011502:	4499      	add	r9, r3
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
 8011504:	4490      	add	r8, r2
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
 8011506:	4a4c      	ldr	r2, [pc, #304]	; (8011638 <mbedtls_internal_md5_process+0x728>)
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
 8011508:	4067      	eors	r7, r4
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
 801150a:	440a      	add	r2, r1
    P( local.D, local.A, local.B, local.C,  3, 10, 0x8F0CCC92 );
 801150c:	444f      	add	r7, r9
 801150e:	eb05 57b7 	add.w	r7, r5, r7, ror #22
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
 8011512:	ea67 0304 	orn	r3, r7, r4
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
 8011516:	4414      	add	r4, r2
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
 8011518:	4a48      	ldr	r2, [pc, #288]	; (801163c <mbedtls_internal_md5_process+0x72c>)
    P( local.C, local.D, local.A, local.B, 10, 15, 0xFFEFF47D );
 801151a:	406b      	eors	r3, r5
 801151c:	4443      	add	r3, r8
 801151e:	eb07 4373 	add.w	r3, r7, r3, ror #17
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
 8011522:	ea63 0605 	orn	r6, r3, r5
 8011526:	407e      	eors	r6, r7
 8011528:	4426      	add	r6, r4
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
 801152a:	9c04      	ldr	r4, [sp, #16]
    P( local.B, local.C, local.D, local.A,  1, 21, 0x85845DD1 );
 801152c:	eb03 26f6 	add.w	r6, r3, r6, ror #11
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
 8011530:	4422      	add	r2, r4
 8011532:	ea66 0107 	orn	r1, r6, r7
 8011536:	4415      	add	r5, r2
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
 8011538:	4a41      	ldr	r2, [pc, #260]	; (8011640 <mbedtls_internal_md5_process+0x730>)
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
 801153a:	4059      	eors	r1, r3
 801153c:	4429      	add	r1, r5
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
 801153e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( local.A, local.B, local.C, local.D,  8,  6, 0x6FA87E4F );
 8011540:	eb06 61b1 	add.w	r1, r6, r1, ror #26
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
 8011544:	442a      	add	r2, r5
 8011546:	ea61 0403 	orn	r4, r1, r3
 801154a:	4417      	add	r7, r2
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
 801154c:	4a3d      	ldr	r2, [pc, #244]	; (8011644 <mbedtls_internal_md5_process+0x734>)
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
 801154e:	4074      	eors	r4, r6
 8011550:	443c      	add	r4, r7
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
 8011552:	9f03      	ldr	r7, [sp, #12]
    P( local.D, local.A, local.B, local.C, 15, 10, 0xFE2CE6E0 );
 8011554:	eb01 54b4 	add.w	r4, r1, r4, ror #22
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
 8011558:	443a      	add	r2, r7
 801155a:	ea64 0506 	orn	r5, r4, r6
 801155e:	4413      	add	r3, r2
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
 8011560:	9a08      	ldr	r2, [sp, #32]
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
 8011562:	404d      	eors	r5, r1
 8011564:	441d      	add	r5, r3
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
 8011566:	4b38      	ldr	r3, [pc, #224]	; (8011648 <mbedtls_internal_md5_process+0x738>)
    P( local.C, local.D, local.A, local.B,  6, 15, 0xA3014314 );
 8011568:	eb04 4575 	add.w	r5, r4, r5, ror #17
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
 801156c:	4413      	add	r3, r2
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
 801156e:	9a02      	ldr	r2, [sp, #8]
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
 8011570:	ea65 0701 	orn	r7, r5, r1
 8011574:	441e      	add	r6, r3
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
 8011576:	4b35      	ldr	r3, [pc, #212]	; (801164c <mbedtls_internal_md5_process+0x73c>)
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
 8011578:	4067      	eors	r7, r4
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
 801157a:	4413      	add	r3, r2
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 801157c:	4a34      	ldr	r2, [pc, #208]	; (8011650 <mbedtls_internal_md5_process+0x740>)
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
 801157e:	4437      	add	r7, r6
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 8011580:	9e07      	ldr	r6, [sp, #28]
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
 8011582:	4419      	add	r1, r3
    P( local.B, local.C, local.D, local.A, 13, 21, 0x4E0811A1 );
 8011584:	eb05 27f7 	add.w	r7, r5, r7, ror #11
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 8011588:	4432      	add	r2, r6
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
 801158a:	ea67 0c04 	orn	ip, r7, r4
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 801158e:	4414      	add	r4, r2
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
 8011590:	ea8c 0c05 	eor.w	ip, ip, r5
 8011594:	4461      	add	r1, ip
 8011596:	eb07 61b1 	add.w	r1, r7, r1, ror #26
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 801159a:	ea61 0305 	orn	r3, r1, r5
    P( local.A, local.B, local.C, local.D,  4,  6, 0xF7537E82 );
 801159e:	911a      	str	r1, [sp, #104]	; 0x68
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 80115a0:	407b      	eors	r3, r7
 80115a2:	441c      	add	r4, r3
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
 80115a4:	4b2b      	ldr	r3, [pc, #172]	; (8011654 <mbedtls_internal_md5_process+0x744>)
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 80115a6:	eb01 54b4 	add.w	r4, r1, r4, ror #22
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
 80115aa:	445b      	add	r3, fp
 80115ac:	ea64 0607 	orn	r6, r4, r7
 80115b0:	441d      	add	r5, r3
    P( local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391 );
 80115b2:	4b29      	ldr	r3, [pc, #164]	; (8011658 <mbedtls_internal_md5_process+0x748>)
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
 80115b4:	404e      	eors	r6, r1
    P( local.D, local.A, local.B, local.C, 11, 10, 0xBD3AF235 );
 80115b6:	941d      	str	r4, [sp, #116]	; 0x74
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
 80115b8:	4435      	add	r5, r6
    P( local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391 );
 80115ba:	9e05      	ldr	r6, [sp, #20]
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
 80115bc:	eb04 4575 	add.w	r5, r4, r5, ror #17
    P( local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391 );
 80115c0:	4433      	add	r3, r6
 80115c2:	ea65 0201 	orn	r2, r5, r1
 80115c6:	441f      	add	r7, r3
    P( local.C, local.D, local.A, local.B,  2, 15, 0x2AD7D2BB );
 80115c8:	951c      	str	r5, [sp, #112]	; 0x70
    P( local.B, local.C, local.D, local.A,  9, 21, 0xEB86D391 );
 80115ca:	4062      	eors	r2, r4
 80115cc:	4417      	add	r7, r2
 80115ce:	eb05 27f7 	add.w	r7, r5, r7, ror #11
 80115d2:	971b      	str	r7, [sp, #108]	; 0x6c

#undef F

    ctx->state[0] += local.A;
 80115d4:	6883      	ldr	r3, [r0, #8]
 80115d6:	4419      	add	r1, r3
    ctx->state[1] += local.B;
 80115d8:	68c3      	ldr	r3, [r0, #12]
 80115da:	441f      	add	r7, r3
    ctx->state[2] += local.C;
 80115dc:	6903      	ldr	r3, [r0, #16]
    ctx->state[0] += local.A;
 80115de:	6081      	str	r1, [r0, #8]
    ctx->state[3] += local.D;

    /* Zeroise variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
 80115e0:	2150      	movs	r1, #80	; 0x50
    ctx->state[2] += local.C;
 80115e2:	441d      	add	r5, r3
    ctx->state[3] += local.D;
 80115e4:	6943      	ldr	r3, [r0, #20]
    ctx->state[1] += local.B;
 80115e6:	60c7      	str	r7, [r0, #12]
    ctx->state[3] += local.D;
 80115e8:	441c      	add	r4, r3
    ctx->state[2] += local.C;
 80115ea:	6105      	str	r5, [r0, #16]
    ctx->state[3] += local.D;
 80115ec:	6144      	str	r4, [r0, #20]
    mbedtls_platform_zeroize( &local, sizeof( local ) );
 80115ee:	a80a      	add	r0, sp, #40	; 0x28
 80115f0:	f7ff fc84 	bl	8010efc <mbedtls_platform_zeroize>

    return( 0 );
}
 80115f4:	2000      	movs	r0, #0
 80115f6:	b01f      	add	sp, #124	; 0x7c
 80115f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115fc:	bebfbc70 	.word	0xbebfbc70
 8011600:	289b7ec6 	.word	0x289b7ec6
 8011604:	eaa127fa 	.word	0xeaa127fa
 8011608:	d4ef3085 	.word	0xd4ef3085
 801160c:	04881d05 	.word	0x04881d05
 8011610:	d9d4d039 	.word	0xd9d4d039
 8011614:	e6db99e5 	.word	0xe6db99e5
 8011618:	1fa27cf8 	.word	0x1fa27cf8
 801161c:	c4ac5665 	.word	0xc4ac5665
 8011620:	f4292244 	.word	0xf4292244
 8011624:	432aff97 	.word	0x432aff97
 8011628:	ab9423a7 	.word	0xab9423a7
 801162c:	fc93a039 	.word	0xfc93a039
 8011630:	655b59c3 	.word	0x655b59c3
 8011634:	8f0ccc92 	.word	0x8f0ccc92
 8011638:	85845dd1 	.word	0x85845dd1
 801163c:	6fa87e4f 	.word	0x6fa87e4f
 8011640:	fe2ce6e0 	.word	0xfe2ce6e0
 8011644:	a3014314 	.word	0xa3014314
 8011648:	4e0811a1 	.word	0x4e0811a1
 801164c:	f7537e82 	.word	0xf7537e82
 8011650:	bd3af235 	.word	0xbd3af235
 8011654:	2ad7d2bb 	.word	0x2ad7d2bb
 8011658:	eb86d391 	.word	0xeb86d391

0801165c <mbedtls_md5>:
 * output = MD5( input buffer )
 */
int mbedtls_md5( const unsigned char *input,
                     size_t ilen,
                     unsigned char output[16] )
{
 801165c:	b570      	push	{r4, r5, r6, lr}
 801165e:	b096      	sub	sp, #88	; 0x58
 8011660:	4604      	mov	r4, r0
 8011662:	460e      	mov	r6, r1
 8011664:	4615      	mov	r5, r2
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    mbedtls_md5_context ctx;

    mbedtls_md5_init( &ctx );
 8011666:	4668      	mov	r0, sp
 8011668:	f009 ff0e 	bl	801b488 <mbedtls_md5_init>
    ctx->total[0] = 0;
 801166c:	2300      	movs	r3, #0

    if( ( ret = mbedtls_md5_starts( &ctx ) ) != 0 )
        goto exit;

    if( ( ret = mbedtls_md5_update( &ctx, input, ilen ) ) != 0 )
 801166e:	4621      	mov	r1, r4
 8011670:	4632      	mov	r2, r6
 8011672:	4668      	mov	r0, sp
    ctx->total[1] = 0;
 8011674:	e9cd 3300 	strd	r3, r3, [sp]
    ctx->state[0] = 0x67452301;
 8011678:	4b0e      	ldr	r3, [pc, #56]	; (80116b4 <mbedtls_md5+0x58>)
 801167a:	9302      	str	r3, [sp, #8]
    ctx->state[1] = 0xEFCDAB89;
 801167c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8011680:	9303      	str	r3, [sp, #12]
    ctx->state[2] = 0x98BADCFE;
 8011682:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 8011686:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 801168a:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 801168e:	9304      	str	r3, [sp, #16]
    ctx->state[3] = 0x10325476;
 8011690:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 8011694:	9305      	str	r3, [sp, #20]
    if( ( ret = mbedtls_md5_update( &ctx, input, ilen ) ) != 0 )
 8011696:	f009 ff00 	bl	801b49a <mbedtls_md5_update>
 801169a:	4604      	mov	r4, r0
 801169c:	b920      	cbnz	r0, 80116a8 <mbedtls_md5+0x4c>
        goto exit;

    if( ( ret = mbedtls_md5_finish( &ctx, output ) ) != 0 )
 801169e:	4629      	mov	r1, r5
 80116a0:	4668      	mov	r0, sp
 80116a2:	f009 ff37 	bl	801b514 <mbedtls_md5_finish>
 80116a6:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_md5_free( &ctx );
 80116a8:	4668      	mov	r0, sp
 80116aa:	f009 fef1 	bl	801b490 <mbedtls_md5_free>

    return( ret );
}
 80116ae:	4620      	mov	r0, r4
 80116b0:	b016      	add	sp, #88	; 0x58
 80116b2:	bd70      	pop	{r4, r5, r6, pc}
 80116b4:	67452301 	.word	0x67452301

080116b8 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
 80116b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	STRUCT_SECTION_COUNT(device, &numdev);
 80116bc:	f8df a048 	ldr.w	sl, [pc, #72]	; 8011708 <device_visitor+0x50>
 80116c0:	469b      	mov	fp, r3
 80116c2:	4e12      	ldr	r6, [pc, #72]	; (801170c <device_visitor+0x54>)
 80116c4:	2318      	movs	r3, #24
 80116c6:	4680      	mov	r8, r0
 80116c8:	460f      	mov	r7, r1
 80116ca:	eba6 060a 	sub.w	r6, r6, sl
 80116ce:	4691      	mov	r9, r2
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
 80116d0:	2500      	movs	r5, #0
 80116d2:	fbb6 f6f3 	udiv	r6, r6, r3
 80116d6:	42bd      	cmp	r5, r7
 80116d8:	d102      	bne.n	80116e0 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
 80116da:	4628      	mov	r0, r5
}
 80116dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
 80116e0:	f938 4015 	ldrsh.w	r4, [r8, r5, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
 80116e4:	2c00      	cmp	r4, #0
 80116e6:	dd0d      	ble.n	8011704 <device_visitor+0x4c>
 80116e8:	42a6      	cmp	r6, r4
 80116ea:	d30b      	bcc.n	8011704 <device_visitor+0x4c>
		dev = &STRUCT_SECTION_START(device)[dev_handle - 1];
 80116ec:	3c01      	subs	r4, #1
 80116ee:	b224      	sxth	r4, r4
 80116f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80116f4:	eb0a 00c4 	add.w	r0, sl, r4, lsl #3
		int rc = visitor_cb(rdev, context);
 80116f8:	4659      	mov	r1, fp
 80116fa:	47c8      	blx	r9
		if (rc < 0) {
 80116fc:	2800      	cmp	r0, #0
 80116fe:	dbed      	blt.n	80116dc <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
 8011700:	3501      	adds	r5, #1
 8011702:	e7e8      	b.n	80116d6 <device_visitor+0x1e>
	const struct device *dev = NULL;
 8011704:	2000      	movs	r0, #0
 8011706:	e7f7      	b.n	80116f8 <device_visitor+0x40>
 8011708:	0801c24c 	.word	0x0801c24c
 801170c:	0801c3e4 	.word	0x0801c3e4

08011710 <z_device_get_all_static>:
	STRUCT_SECTION_GET(device, 0, devices);
 8011710:	4a03      	ldr	r2, [pc, #12]	; (8011720 <z_device_get_all_static+0x10>)
	STRUCT_SECTION_COUNT(device, &cnt);
 8011712:	4b04      	ldr	r3, [pc, #16]	; (8011724 <z_device_get_all_static+0x14>)
	STRUCT_SECTION_GET(device, 0, devices);
 8011714:	6002      	str	r2, [r0, #0]
}
 8011716:	2018      	movs	r0, #24
	STRUCT_SECTION_COUNT(device, &cnt);
 8011718:	1a9b      	subs	r3, r3, r2
}
 801171a:	fbb3 f0f0 	udiv	r0, r3, r0
 801171e:	4770      	bx	lr
 8011720:	0801c24c 	.word	0x0801c24c
 8011724:	0801c3e4 	.word	0x0801c3e4

08011728 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 8011728:	4b01      	ldr	r3, [pc, #4]	; (8011730 <z_impl_z_errno+0x8>)
 801172a:	6898      	ldr	r0, [r3, #8]
}
 801172c:	3098      	adds	r0, #152	; 0x98
 801172e:	4770      	bx	lr
 8011730:	24002fe8 	.word	0x24002fe8

08011734 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8011734:	4b10      	ldr	r3, [pc, #64]	; (8011778 <z_sys_init_run_level+0x44>)
{
 8011736:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8011738:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 801173c:	3001      	adds	r0, #1
 801173e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011742:	42a6      	cmp	r6, r4
 8011744:	d800      	bhi.n	8011748 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
 8011746:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
 8011748:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
 801174c:	b195      	cbz	r5, 8011774 <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
 801174e:	b153      	cbz	r3, 8011766 <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
 8011750:	4628      	mov	r0, r5
 8011752:	4798      	blx	r3
				if (rc != 0) {
 8011754:	b138      	cbz	r0, 8011766 <z_sys_init_run_level+0x32>
					if (rc < 0) {
 8011756:	2800      	cmp	r0, #0
					dev->state->init_res = rc;
 8011758:	68eb      	ldr	r3, [r5, #12]
 801175a:	bfb8      	it	lt
 801175c:	4240      	neglt	r0, r0
 801175e:	28ff      	cmp	r0, #255	; 0xff
 8011760:	bfa8      	it	ge
 8011762:	20ff      	movge	r0, #255	; 0xff
 8011764:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8011766:	68ea      	ldr	r2, [r5, #12]
 8011768:	7853      	ldrb	r3, [r2, #1]
 801176a:	f043 0301 	orr.w	r3, r3, #1
 801176e:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8011770:	3408      	adds	r4, #8
 8011772:	e7e6      	b.n	8011742 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
 8011774:	4798      	blx	r3
 8011776:	e7fb      	b.n	8011770 <z_sys_init_run_level+0x3c>
 8011778:	0801db30 	.word	0x0801db30

0801177c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 801177c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 801177e:	2003      	movs	r0, #3
{
 8011780:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8011782:	4b09      	ldr	r3, [pc, #36]	; (80117a8 <bg_thread_main+0x2c>)
 8011784:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 8011786:	f7ff ffd5 	bl	8011734 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 801178a:	f001 fbf3 	bl	8012f74 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 801178e:	2004      	movs	r0, #4
 8011790:	f7ff ffd0 	bl	8011734 <z_sys_init_run_level>

	z_init_static_threads();
 8011794:	f000 fa4e 	bl	8011c34 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
 8011798:	f7ef f9ce 	bl	8000b38 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 801179c:	4a03      	ldr	r2, [pc, #12]	; (80117ac <bg_thread_main+0x30>)
 801179e:	7b13      	ldrb	r3, [r2, #12]
 80117a0:	f023 0301 	bic.w	r3, r3, #1
 80117a4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 80117a6:	bd08      	pop	{r3, pc}
 80117a8:	2400331a 	.word	0x2400331a
 80117ac:	24001b88 	.word	0x24001b88

080117b0 <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 80117b0:	4806      	ldr	r0, [pc, #24]	; (80117cc <z_bss_zero+0x1c>)
 80117b2:	2100      	movs	r1, #0
 80117b4:	4a06      	ldr	r2, [pc, #24]	; (80117d0 <z_bss_zero+0x20>)
{
 80117b6:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 80117b8:	1a12      	subs	r2, r2, r0
 80117ba:	f009 ff4e 	bl	801b65a <z_early_memset>
		       - (uintptr_t) &__dtcm_bss_start);
 80117be:	4805      	ldr	r0, [pc, #20]	; (80117d4 <z_bss_zero+0x24>)
	z_early_memset(&__dtcm_bss_start, 0,
 80117c0:	4a05      	ldr	r2, [pc, #20]	; (80117d8 <z_bss_zero+0x28>)
 80117c2:	2100      	movs	r1, #0
 80117c4:	1a12      	subs	r2, r2, r0
 80117c6:	f009 ff48 	bl	801b65a <z_early_memset>
}
 80117ca:	bd08      	pop	{r3, pc}
 80117cc:	24001308 	.word	0x24001308
 80117d0:	2400331c 	.word	0x2400331c
 80117d4:	20000000 	.word	0x20000000
 80117d8:	20000000 	.word	0x20000000

080117dc <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 80117dc:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
 80117de:	23b8      	movs	r3, #184	; 0xb8
 80117e0:	4e1c      	ldr	r6, [pc, #112]	; (8011854 <z_init_cpu+0x78>)
{
 80117e2:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 80117e4:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
 80117e6:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
 80117ea:	4b1b      	ldr	r3, [pc, #108]	; (8011858 <z_init_cpu+0x7c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 80117ec:	4d1b      	ldr	r5, [pc, #108]	; (801185c <z_init_cpu+0x80>)
{
 80117ee:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 80117f0:	9305      	str	r3, [sp, #20]
 80117f2:	230f      	movs	r3, #15
 80117f4:	491a      	ldr	r1, [pc, #104]	; (8011860 <z_init_cpu+0x84>)
 80117f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80117fa:	2300      	movs	r3, #0
 80117fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011800:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8011804:	2314      	movs	r3, #20
 8011806:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 801180a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801180e:	4b15      	ldr	r3, [pc, #84]	; (8011864 <z_init_cpu+0x88>)
 8011810:	fb00 1104 	mla	r1, r0, r4, r1
 8011814:	4630      	mov	r0, r6
 8011816:	9500      	str	r5, [sp, #0]
 8011818:	f000 f978 	bl	8011b0c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 801181c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 801181e:	4812      	ldr	r0, [pc, #72]	; (8011868 <z_init_cpu+0x8c>)
 8011820:	f023 0304 	bic.w	r3, r3, #4
	_kernel.cpus[id].id = id;
 8011824:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8011826:	60ee      	str	r6, [r5, #12]
 8011828:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 801182a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 801182e:	fb03 0404 	mla	r4, r3, r4, r0
 8011832:	441c      	add	r4, r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8011834:	4b0d      	ldr	r3, [pc, #52]	; (801186c <z_init_cpu+0x90>)
	_kernel.cpus[id].irq_stack =
 8011836:	606c      	str	r4, [r5, #4]
 8011838:	f3bf 8f5b 	dmb	ish
 801183c:	e853 2f00 	ldrex	r2, [r3]
 8011840:	3201      	adds	r2, #1
 8011842:	e843 2100 	strex	r1, r2, [r3]
 8011846:	2900      	cmp	r1, #0
 8011848:	d1f8      	bne.n	801183c <z_init_cpu+0x60>
 801184a:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
 801184e:	b006      	add	sp, #24
 8011850:	bd70      	pop	{r4, r5, r6, pc}
 8011852:	bf00      	nop
 8011854:	24001ad0 	.word	0x24001ad0
 8011858:	080219c6 	.word	0x080219c6
 801185c:	24002fe8 	.word	0x24002fe8
 8011860:	240055c0 	.word	0x240055c0
 8011864:	0801b803 	.word	0x0801b803
 8011868:	24005740 	.word	0x24005740
 801186c:	24002fe4 	.word	0x24002fe4

08011870 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
 8011870:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8011872:	2000      	movs	r0, #0
{
 8011874:	b0b4      	sub	sp, #208	; 0xd0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8011876:	f7ff ff5d 	bl	8011734 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 801187a:	4b2a      	ldr	r3, [pc, #168]	; (8011924 <z_cstart+0xb4>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 801187c:	f383 8808 	msr	MSP, r3
 8011880:	4d29      	ldr	r5, [pc, #164]	; (8011928 <z_cstart+0xb8>)
 8011882:	2400      	movs	r4, #0
 8011884:	23f0      	movs	r3, #240	; 0xf0

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8011886:	4e29      	ldr	r6, [pc, #164]	; (801192c <z_cstart+0xbc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8011888:	4f29      	ldr	r7, [pc, #164]	; (8011930 <z_cstart+0xc0>)
 801188a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 801188e:	77ec      	strb	r4, [r5, #31]
 8011890:	762c      	strb	r4, [r5, #24]
 8011892:	766c      	strb	r4, [r5, #25]
 8011894:	76ac      	strb	r4, [r5, #26]
 8011896:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 801189a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801189c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80118a0:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 80118a2:	f7f2 fadd 	bl	8003e60 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 80118a6:	f7f2 f85b 	bl	8003960 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80118aa:	f04f 33ff 	mov.w	r3, #4294967295
 80118ae:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80118b0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 80118b2:	f7f2 fbbd 	bl	8004030 <z_arm_mpu_init>
	_kernel.ready_q.cache = &z_main_thread;
 80118b6:	4d1f      	ldr	r5, [pc, #124]	; (8011934 <z_cstart+0xc4>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 80118b8:	f7f2 fb22 	bl	8003f00 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 80118bc:	f240 1301 	movw	r3, #257	; 0x101
	dummy_thread->resource_pool = NULL;
 80118c0:	9430      	str	r4, [sp, #192]	; 0xc0
	dummy_thread->base.user_options = K_ESSENTIAL;
 80118c2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 80118c6:	ab06      	add	r3, sp, #24
 80118c8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 80118ca:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 80118ce:	f009 fe79 	bl	801b5c4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 80118d2:	2001      	movs	r0, #1
 80118d4:	f7ff ff2e 	bl	8011734 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 80118d8:	2002      	movs	r0, #2
 80118da:	f7ff ff2b 	bl	8011734 <z_sys_init_run_level>
	z_sched_init();
 80118de:	f000 ffe3 	bl	80128a8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80118e2:	4b15      	ldr	r3, [pc, #84]	; (8011938 <z_cstart+0xc8>)
	_kernel.ready_q.cache = &z_main_thread;
 80118e4:	6175      	str	r5, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80118e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80118ea:	9305      	str	r3, [sp, #20]
 80118ec:	2301      	movs	r3, #1
 80118ee:	4913      	ldr	r1, [pc, #76]	; (801193c <z_cstart+0xcc>)
 80118f0:	4628      	mov	r0, r5
 80118f2:	9400      	str	r4, [sp, #0]
 80118f4:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80118f8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80118fc:	463b      	mov	r3, r7
 80118fe:	f000 f905 	bl	8011b0c <z_setup_new_thread>
 8011902:	7b6a      	ldrb	r2, [r5, #13]
 8011904:	4606      	mov	r6, r0
	z_ready_thread(&z_main_thread);
 8011906:	4628      	mov	r0, r5
 8011908:	f022 0204 	bic.w	r2, r2, #4
 801190c:	736a      	strb	r2, [r5, #13]
 801190e:	f00a f996 	bl	801bc3e <z_ready_thread>
	z_init_cpu(0);
 8011912:	4620      	mov	r0, r4
 8011914:	f7ff ff62 	bl	80117dc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8011918:	463a      	mov	r2, r7
 801191a:	4631      	mov	r1, r6
 801191c:	4628      	mov	r0, r5
 801191e:	f7f2 f92b 	bl	8003b78 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8011922:	bf00      	nop
 8011924:	24005f80 	.word	0x24005f80
 8011928:	e000ed00 	.word	0xe000ed00
 801192c:	24002fe8 	.word	0x24002fe8
 8011930:	0801177d 	.word	0x0801177d
 8011934:	24001b88 	.word	0x24001b88
 8011938:	080219cb 	.word	0x080219cb
 801193c:	24005180 	.word	0x24005180

08011940 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
 8011940:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8011942:	4c06      	ldr	r4, [pc, #24]	; (801195c <statics_init+0x1c>)
 8011944:	4d06      	ldr	r5, [pc, #24]	; (8011960 <statics_init+0x20>)
 8011946:	42ac      	cmp	r4, r5
 8011948:	d301      	bcc.n	801194e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 801194a:	2000      	movs	r0, #0
 801194c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 801194e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8011952:	4620      	mov	r0, r4
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8011954:	3414      	adds	r4, #20
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8011956:	f009 fe84 	bl	801b662 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 801195a:	e7f4      	b.n	8011946 <statics_init+0x6>
 801195c:	240010c4 	.word	0x240010c4
 8011960:	240010c4 	.word	0x240010c4

08011964 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
 8011964:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
 8011966:	2000      	movs	r0, #0

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8011968:	4c05      	ldr	r4, [pc, #20]	; (8011980 <init_mem_slab_module+0x1c>)
 801196a:	4d06      	ldr	r5, [pc, #24]	; (8011984 <init_mem_slab_module+0x20>)
 801196c:	42ac      	cmp	r4, r5
 801196e:	d300      	bcc.n	8011972 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
 8011970:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
 8011972:	4620      	mov	r0, r4
 8011974:	f009 fee7 	bl	801b746 <create_free_list>
		if (rc < 0) {
 8011978:	2800      	cmp	r0, #0
 801197a:	dbf9      	blt.n	8011970 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 801197c:	341c      	adds	r4, #28
 801197e:	e7f5      	b.n	801196c <init_mem_slab_module+0x8>
 8011980:	24001070 	.word	0x24001070
 8011984:	240010c4 	.word	0x240010c4

08011988 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8011988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801198a:	460c      	mov	r4, r1
	__asm__ volatile(
 801198c:	f04f 0510 	mov.w	r5, #16
 8011990:	f3ef 8111 	mrs	r1, BASEPRI
 8011994:	f385 8812 	msr	BASEPRI_MAX, r5
 8011998:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 801199c:	6945      	ldr	r5, [r0, #20]
 801199e:	b15d      	cbz	r5, 80119b8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
 80119a0:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 80119a2:	682b      	ldr	r3, [r5, #0]
 80119a4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 80119a6:	6983      	ldr	r3, [r0, #24]
 80119a8:	3301      	adds	r3, #1
 80119aa:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 80119ac:	2000      	movs	r0, #0
	__asm__ volatile(
 80119ae:	f381 8811 	msr	BASEPRI, r1
 80119b2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
 80119b6:	e011      	b.n	80119dc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 80119b8:	ea52 0c03 	orrs.w	ip, r2, r3
 80119bc:	d103      	bne.n	80119c6 <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
 80119be:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
 80119c2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
 80119c4:	e7f3      	b.n	80119ae <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 80119c6:	e9cd 2300 	strd	r2, r3, [sp]
 80119ca:	4602      	mov	r2, r0
 80119cc:	3008      	adds	r0, #8
 80119ce:	f000 feb7 	bl	8012740 <z_pend_curr>
		if (result == 0) {
 80119d2:	b918      	cbnz	r0, 80119dc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
 80119d4:	4b02      	ldr	r3, [pc, #8]	; (80119e0 <k_mem_slab_alloc+0x58>)
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	695b      	ldr	r3, [r3, #20]
 80119da:	6023      	str	r3, [r4, #0]
}
 80119dc:	b003      	add	sp, #12
 80119de:	bd30      	pop	{r4, r5, pc}
 80119e0:	24002fe8 	.word	0x24002fe8

080119e4 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
 80119e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119e6:	4605      	mov	r5, r0
 80119e8:	460e      	mov	r6, r1
	__asm__ volatile(
 80119ea:	f04f 0310 	mov.w	r3, #16
 80119ee:	f3ef 8711 	mrs	r7, BASEPRI
 80119f2:	f383 8812 	msr	BASEPRI_MAX, r3
 80119f6:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
 80119fa:	4b06      	ldr	r3, [pc, #24]	; (8011a14 <k_thread_foreach+0x30>)
 80119fc:	6a1c      	ldr	r4, [r3, #32]
 80119fe:	b924      	cbnz	r4, 8011a0a <k_thread_foreach+0x26>
	__asm__ volatile(
 8011a00:	f387 8811 	msr	BASEPRI, r7
 8011a04:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
 8011a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	4631      	mov	r1, r6
 8011a0e:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
 8011a10:	6f64      	ldr	r4, [r4, #116]	; 0x74
 8011a12:	e7f4      	b.n	80119fe <k_thread_foreach+0x1a>
 8011a14:	24002fe8 	.word	0x24002fe8

08011a18 <z_thread_monitor_exit>:
	__asm__ volatile(
 8011a18:	f04f 0310 	mov.w	r3, #16
 8011a1c:	f3ef 8111 	mrs	r1, BASEPRI
 8011a20:	f383 8812 	msr	BASEPRI_MAX, r3
 8011a24:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
 8011a28:	4a09      	ldr	r2, [pc, #36]	; (8011a50 <z_thread_monitor_exit+0x38>)
 8011a2a:	6a13      	ldr	r3, [r2, #32]
 8011a2c:	4283      	cmp	r3, r0
 8011a2e:	d107      	bne.n	8011a40 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
 8011a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a32:	6213      	str	r3, [r2, #32]
	__asm__ volatile(
 8011a34:	f381 8811 	msr	BASEPRI, r1
 8011a38:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
 8011a3c:	4770      	bx	lr
 8011a3e:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d0f7      	beq.n	8011a34 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
 8011a44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
 8011a46:	4282      	cmp	r2, r0
 8011a48:	d1f9      	bne.n	8011a3e <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
 8011a4a:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8011a4c:	675a      	str	r2, [r3, #116]	; 0x74
 8011a4e:	e7f1      	b.n	8011a34 <z_thread_monitor_exit+0x1c>
 8011a50:	24002fe8 	.word	0x24002fe8

08011a54 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
 8011a54:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
 8011a56:	4604      	mov	r4, r0
 8011a58:	b908      	cbnz	r0, 8011a5e <z_impl_k_thread_name_set+0xa>
		thread = _current;
 8011a5a:	4b05      	ldr	r3, [pc, #20]	; (8011a70 <z_impl_k_thread_name_set+0x1c>)
 8011a5c:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
 8011a5e:	221f      	movs	r2, #31
 8011a60:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8011a64:	f003 f88e 	bl	8014b84 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 8011a68:	2000      	movs	r0, #0
 8011a6a:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
 8011a6e:	bd10      	pop	{r4, pc}
 8011a70:	24002fe8 	.word	0x24002fe8

08011a74 <k_thread_state_str>:

	return bytes_to_copy;
}

const char *k_thread_state_str(k_tid_t thread_id, char *buf, size_t buf_size)
{
 8011a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static const char  *states_str[8] = {"dummy", "pending", "prestart",
					     "dead", "suspended", "aborting",
					     "", "queued"};
	static const size_t states_sz[8] = {5, 7, 8, 4, 9, 8, 0, 6};

	if ((buf == NULL) || (buf_size == 0)) {
 8011a78:	460c      	mov	r4, r1
 8011a7a:	2900      	cmp	r1, #0
 8011a7c:	d03b      	beq.n	8011af6 <k_thread_state_str+0x82>
 8011a7e:	b3d2      	cbz	r2, 8011af6 <k_thread_state_str+0x82>
	 * Loop through each bit in the thread_state. Stop once all have
	 * been processed. If more than one thread_state bit is set, then
	 * separate the descriptive strings with a '+'.
	 */

	for (uint8_t index = 0; thread_state != 0; index++) {
 8011a80:	f04f 0a00 	mov.w	sl, #0
	uint8_t     thread_state = thread_id->base.thread_state;
 8011a84:	7b47      	ldrb	r7, [r0, #13]
	buf_size--;   /* Reserve 1 byte for end-of-string character */
 8011a86:	1e56      	subs	r6, r2, #1
		bit = BIT(index);
		if ((thread_state & bit) == 0) {
			continue;
		}

		off += copy_bytes(buf + off, buf_size - off,
 8011a88:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8011afc <k_thread_state_str+0x88>
	size_t      off = 0;
 8011a8c:	4655      	mov	r5, sl
	memcpy(dest, src, bytes_to_copy);
 8011a8e:	f8df b070 	ldr.w	fp, [pc, #112]	; 8011b00 <k_thread_state_str+0x8c>
		off += copy_bytes(buf + off, buf_size - off,
 8011a92:	1960      	adds	r0, r4, r5
	for (uint8_t index = 0; thread_state != 0; index++) {
 8011a94:	b927      	cbnz	r7, 8011aa0 <k_thread_state_str+0x2c>
		if (thread_state != 0) {
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
		}
	}

	buf[off] = '\0';
 8011a96:	7007      	strb	r7, [r0, #0]

	return (const char *)buf;
}
 8011a98:	4620      	mov	r0, r4
 8011a9a:	b003      	add	sp, #12
 8011a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bit = BIT(index);
 8011aa0:	fa5f f18a 	uxtb.w	r1, sl
 8011aa4:	f04f 0801 	mov.w	r8, #1
 8011aa8:	fa08 f801 	lsl.w	r8, r8, r1
		if ((thread_state & bit) == 0) {
 8011aac:	ea17 0f08 	tst.w	r7, r8
 8011ab0:	d01e      	beq.n	8011af0 <k_thread_state_str+0x7c>
	bytes_to_copy = MIN(dest_size, src_size);
 8011ab2:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
		off += copy_bytes(buf + off, buf_size - off,
 8011ab6:	eba6 0c05 	sub.w	ip, r6, r5
	memcpy(dest, src, bytes_to_copy);
 8011aba:	4b12      	ldr	r3, [pc, #72]	; (8011b04 <k_thread_state_str+0x90>)
	bytes_to_copy = MIN(dest_size, src_size);
 8011abc:	4562      	cmp	r2, ip
	memcpy(dest, src, bytes_to_copy);
 8011abe:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	bytes_to_copy = MIN(dest_size, src_size);
 8011ac2:	bf28      	it	cs
 8011ac4:	4662      	movcs	r2, ip
	memcpy(dest, src, bytes_to_copy);
 8011ac6:	9201      	str	r2, [sp, #4]
 8011ac8:	f003 f8d5 	bl	8014c76 <memcpy>
		off += copy_bytes(buf + off, buf_size - off,
 8011acc:	9a01      	ldr	r2, [sp, #4]
		if (thread_state != 0) {
 8011ace:	ea37 0708 	bics.w	r7, r7, r8
		off += copy_bytes(buf + off, buf_size - off,
 8011ad2:	4415      	add	r5, r2
		if (thread_state != 0) {
 8011ad4:	d00c      	beq.n	8011af0 <k_thread_state_str+0x7c>
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
 8011ad6:	eba6 0805 	sub.w	r8, r6, r5
	memcpy(dest, src, bytes_to_copy);
 8011ada:	1960      	adds	r0, r4, r5
 8011adc:	4659      	mov	r1, fp
	bytes_to_copy = MIN(dest_size, src_size);
 8011ade:	f1b8 0f01 	cmp.w	r8, #1
 8011ae2:	bf28      	it	cs
 8011ae4:	f04f 0801 	movcs.w	r8, #1
			off += copy_bytes(buf + off, buf_size - off, "+", 1);
 8011ae8:	4445      	add	r5, r8
	memcpy(dest, src, bytes_to_copy);
 8011aea:	4642      	mov	r2, r8
 8011aec:	f003 f8c3 	bl	8014c76 <memcpy>
	for (uint8_t index = 0; thread_state != 0; index++) {
 8011af0:	f10a 0a01 	add.w	sl, sl, #1
 8011af4:	e7cd      	b.n	8011a92 <k_thread_state_str+0x1e>
		return "";
 8011af6:	4c04      	ldr	r4, [pc, #16]	; (8011b08 <k_thread_state_str+0x94>)
 8011af8:	e7ce      	b.n	8011a98 <k_thread_state_str+0x24>
 8011afa:	bf00      	nop
 8011afc:	0801db68 	.word	0x0801db68
 8011b00:	080219d3 	.word	0x080219d3
 8011b04:	0801db48 	.word	0x0801db48
 8011b08:	0801ffee 	.word	0x0801ffee

08011b0c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8011b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b10:	4698      	mov	r8, r3
 8011b12:	b085      	sub	sp, #20
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8011b14:	f100 0358 	add.w	r3, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8011b18:	3207      	adds	r2, #7

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 8011b1a:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8011b1c:	f101 0b40 	add.w	fp, r1, #64	; 0x40
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8011b20:	f022 0a07 	bic.w	sl, r2, #7
{
 8011b24:	4604      	mov	r4, r0
 8011b26:	460e      	mov	r6, r1
	thread_base->pended_on = NULL;
 8011b28:	6085      	str	r5, [r0, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8011b2a:	f10a 0740 	add.w	r7, sl, #64	; 0x40
	memset(stack_buf_start, 0xaa, stack_buf_size);
 8011b2e:	4652      	mov	r2, sl
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
 8011b30:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
 8011b32:	440f      	add	r7, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
 8011b34:	21aa      	movs	r1, #170	; 0xaa
{
 8011b36:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8011b3a:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
	thread_base->user_options = (uint8_t)options;
 8011b3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b40:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8011b42:	2304      	movs	r3, #4
 8011b44:	7343      	strb	r3, [r0, #13]
	thread_base->prio = priority;
 8011b46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 8011b48:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8011b4c:	7383      	strb	r3, [r0, #14]
	memset(stack_buf_start, 0xaa, stack_buf_size);
 8011b4e:	4658      	mov	r0, fp
 8011b50:	f003 f89c 	bl	8014c8c <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8011b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b56:	463a      	mov	r2, r7
 8011b58:	4631      	mov	r1, r6
 8011b5a:	9302      	str	r3, [sp, #8]
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->stack_info.delta = delta;
 8011b60:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8011b64:	9301      	str	r3, [sp, #4]
 8011b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	new_thread->stack_info.size = stack_buf_size;
 8011b68:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	4643      	mov	r3, r8
 8011b70:	f7f1 ffd2 	bl	8003b18 <arch_new_thread>
	new_thread->entry.parameter1 = p1;
 8011b74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	new_thread->init_data = NULL;
 8011b76:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter1 = p1;
 8011b78:	66a3      	str	r3, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
 8011b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->entry.pEntry = entry;
 8011b7c:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
 8011b80:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
 8011b82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b84:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
 8011b86:	f04f 0210 	mov.w	r2, #16
 8011b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8011b8e:	f382 8812 	msr	BASEPRI_MAX, r2
 8011b92:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
 8011b96:	4e10      	ldr	r6, [pc, #64]	; (8011bd8 <z_setup_new_thread+0xcc>)
 8011b98:	6a32      	ldr	r2, [r6, #32]
	_kernel.threads = new_thread;
 8011b9a:	6234      	str	r4, [r6, #32]
	new_thread->next_thread = _kernel.threads;
 8011b9c:	6762      	str	r2, [r4, #116]	; 0x74
	__asm__ volatile(
 8011b9e:	f383 8811 	msr	BASEPRI, r3
 8011ba2:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
 8011ba6:	f1b9 0f00 	cmp.w	r9, #0
 8011baa:	d011      	beq.n	8011bd0 <z_setup_new_thread+0xc4>
		strncpy(new_thread->name, name,
 8011bac:	221f      	movs	r2, #31
 8011bae:	4649      	mov	r1, r9
 8011bb0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8011bb4:	f002 ffe6 	bl	8014b84 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 8011bb8:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
 8011bbc:	68b3      	ldr	r3, [r6, #8]
 8011bbe:	b10b      	cbz	r3, 8011bc4 <z_setup_new_thread+0xb8>
	new_thread->resource_pool = _current->resource_pool;
 8011bc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
 8011bc4:	4638      	mov	r0, r7
 8011bc6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8011bca:	b005      	add	sp, #20
 8011bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
 8011bd0:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
 8011bd4:	e7f2      	b.n	8011bbc <z_setup_new_thread+0xb0>
 8011bd6:	bf00      	nop
 8011bd8:	24002fe8 	.word	0x24002fe8

08011bdc <z_impl_k_thread_create>:
{
 8011bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8011bde:	2700      	movs	r7, #0
{
 8011be0:	b087      	sub	sp, #28
 8011be2:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8011be4:	9705      	str	r7, [sp, #20]
 8011be6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8011be8:	9704      	str	r7, [sp, #16]
 8011bea:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011bec:	9703      	str	r7, [sp, #12]
 8011bee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011bf0:	9702      	str	r7, [sp, #8]
 8011bf2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011bf4:	9701      	str	r7, [sp, #4]
 8011bf6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
{
 8011bf8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8011bfc:	9700      	str	r7, [sp, #0]
 8011bfe:	f7ff ff85 	bl	8011b0c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8011c02:	f1b5 3fff 	cmp.w	r5, #4294967295
 8011c06:	bf08      	it	eq
 8011c08:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 8011c0c:	d005      	beq.n	8011c1a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8011c0e:	ea55 0306 	orrs.w	r3, r5, r6
 8011c12:	d105      	bne.n	8011c20 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 8011c14:	4620      	mov	r0, r4
 8011c16:	f000 fd45 	bl	80126a4 <z_sched_start>
}
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	b007      	add	sp, #28
 8011c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8011c20:	4632      	mov	r2, r6
 8011c22:	462b      	mov	r3, r5
 8011c24:	4902      	ldr	r1, [pc, #8]	; (8011c30 <z_impl_k_thread_create+0x54>)
 8011c26:	f104 0018 	add.w	r0, r4, #24
 8011c2a:	f000 fff1 	bl	8012c10 <z_add_timeout>
 8011c2e:	e7f4      	b.n	8011c1a <z_impl_k_thread_create+0x3e>
 8011c30:	0801bca3 	.word	0x0801bca3

08011c34 <z_init_static_threads>:
{
 8011c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c36:	4c21      	ldr	r4, [pc, #132]	; (8011cbc <z_init_static_threads+0x88>)
 8011c38:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 8011c3a:	4d21      	ldr	r5, [pc, #132]	; (8011cc0 <z_init_static_threads+0x8c>)
 8011c3c:	4626      	mov	r6, r4
 8011c3e:	342c      	adds	r4, #44	; 0x2c
 8011c40:	42ae      	cmp	r6, r5
 8011c42:	d30b      	bcc.n	8011c5c <z_init_static_threads+0x28>
	_FOREACH_STATIC_THREAD(thread_data) {
 8011c44:	4c1d      	ldr	r4, [pc, #116]	; (8011cbc <z_init_static_threads+0x88>)
 8011c46:	260a      	movs	r6, #10
 8011c48:	4f1e      	ldr	r7, [pc, #120]	; (8011cc4 <z_init_static_threads+0x90>)
	k_sched_lock();
 8011c4a:	f000 fc55 	bl	80124f8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8011c4e:	42ac      	cmp	r4, r5
 8011c50:	d320      	bcc.n	8011c94 <z_init_static_threads+0x60>
}
 8011c52:	b007      	add	sp, #28
 8011c54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8011c58:	f000 be0a 	b.w	8012870 <k_sched_unlock>
		z_setup_new_thread(
 8011c5c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011c60:	9305      	str	r3, [sp, #20]
 8011c62:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8011c66:	9304      	str	r3, [sp, #16]
 8011c68:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8011c6c:	9303      	str	r3, [sp, #12]
 8011c6e:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8011c72:	9302      	str	r3, [sp, #8]
 8011c74:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8011c78:	9301      	str	r3, [sp, #4]
 8011c7a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8011c7e:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
 8011c82:	9300      	str	r3, [sp, #0]
 8011c84:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
 8011c88:	f7ff ff40 	bl	8011b0c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8011c8c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8011c90:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8011c92:	e7d3      	b.n	8011c3c <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8011c94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011c96:	1c53      	adds	r3, r2, #1
 8011c98:	d009      	beq.n	8011cae <z_init_static_threads+0x7a>
					    K_MSEC(thread_data->init_delay));
 8011c9a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			schedule_new_thread(thread_data->init_thread,
 8011c9e:	6820      	ldr	r0, [r4, #0]
 8011ca0:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8011ca4:	ea52 0103 	orrs.w	r1, r2, r3
 8011ca8:	d103      	bne.n	8011cb2 <z_init_static_threads+0x7e>
	z_sched_start(thread);
 8011caa:	f000 fcfb 	bl	80126a4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8011cae:	342c      	adds	r4, #44	; 0x2c
 8011cb0:	e7cd      	b.n	8011c4e <z_init_static_threads+0x1a>
 8011cb2:	4639      	mov	r1, r7
 8011cb4:	3018      	adds	r0, #24
 8011cb6:	f000 ffab 	bl	8012c10 <z_add_timeout>
 8011cba:	e7f8      	b.n	8011cae <z_init_static_threads+0x7a>
 8011cbc:	0801c894 	.word	0x0801c894
 8011cc0:	0801c894 	.word	0x0801c894
 8011cc4:	0801bca3 	.word	0x0801bca3

08011cc8 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 8011cc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011ccc:	4604      	mov	r4, r0
 8011cce:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 8011cd0:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
 8011cd4:	f04f 0110 	mov.w	r1, #16
 8011cd8:	f3ef 8711 	mrs	r7, BASEPRI
 8011cdc:	f381 8812 	msr	BASEPRI_MAX, r1
 8011ce0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 8011ce4:	6a05      	ldr	r5, [r0, #32]
 8011ce6:	68c1      	ldr	r1, [r0, #12]
 8011ce8:	428d      	cmp	r5, r1
 8011cea:	d230      	bcs.n	8011d4e <z_impl_k_msgq_put+0x86>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8011cec:	f00a f81c 	bl	801bd28 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
 8011cf0:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
 8011cf2:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
 8011cf4:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
 8011cf6:	b180      	cbz	r0, 8011d1a <z_impl_k_msgq_put+0x52>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8011cf8:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
 8011cfa:	6940      	ldr	r0, [r0, #20]
 8011cfc:	f002 ffbb 	bl	8014c76 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 8011d00:	4628      	mov	r0, r5
 8011d02:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
 8011d06:	f009 ff9a 	bl	801bc3e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 8011d0a:	4640      	mov	r0, r8
 8011d0c:	4639      	mov	r1, r7
 8011d0e:	f000 fbe1 	bl	80124d4 <z_reschedule>
			return 0;
 8011d12:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8011d14:	b002      	add	sp, #8
 8011d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
 8011d1a:	69e0      	ldr	r0, [r4, #28]
 8011d1c:	f002 ffab 	bl	8014c76 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 8011d20:	69e3      	ldr	r3, [r4, #28]
 8011d22:	68a2      	ldr	r2, [r4, #8]
	z_handle_obj_poll_events(&msgq->poll_events, state);
 8011d24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011d28:	2110      	movs	r1, #16
			msgq->write_ptr += msgq->msg_size;
 8011d2a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 8011d2c:	6962      	ldr	r2, [r4, #20]
 8011d2e:	4293      	cmp	r3, r2
			msgq->write_ptr += msgq->msg_size;
 8011d30:	61e3      	str	r3, [r4, #28]
				msgq->write_ptr = msgq->buffer_start;
 8011d32:	bf04      	itt	eq
 8011d34:	6923      	ldreq	r3, [r4, #16]
 8011d36:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
 8011d38:	6a23      	ldr	r3, [r4, #32]
 8011d3a:	3301      	adds	r3, #1
 8011d3c:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
 8011d3e:	f00a f9eb 	bl	801c118 <z_handle_obj_poll_events>
		result = 0;
 8011d42:	2000      	movs	r0, #0
	__asm__ volatile(
 8011d44:	f387 8811 	msr	BASEPRI, r7
 8011d48:	f3bf 8f6f 	isb	sy
	return result;
 8011d4c:	e7e2      	b.n	8011d14 <z_impl_k_msgq_put+0x4c>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8011d4e:	ea52 0103 	orrs.w	r1, r2, r3
 8011d52:	d00a      	beq.n	8011d6a <z_impl_k_msgq_put+0xa2>
		_current->base.swap_data = (void *) data;
 8011d54:	4906      	ldr	r1, [pc, #24]	; (8011d70 <z_impl_k_msgq_put+0xa8>)
 8011d56:	6889      	ldr	r1, [r1, #8]
 8011d58:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8011d5a:	4639      	mov	r1, r7
 8011d5c:	e9cd 2300 	strd	r2, r3, [sp]
 8011d60:	4602      	mov	r2, r0
 8011d62:	4640      	mov	r0, r8
 8011d64:	f000 fcec 	bl	8012740 <z_pend_curr>
		return result;
 8011d68:	e7d4      	b.n	8011d14 <z_impl_k_msgq_put+0x4c>
		result = -ENOMSG;
 8011d6a:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8011d6e:	e7e9      	b.n	8011d44 <z_impl_k_msgq_put+0x7c>
 8011d70:	24002fe8 	.word	0x24002fe8

08011d74 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 8011d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d76:	4604      	mov	r4, r0
 8011d78:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 8011d7a:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
 8011d7e:	f04f 0110 	mov.w	r1, #16
 8011d82:	f3ef 8611 	mrs	r6, BASEPRI
 8011d86:	f381 8812 	msr	BASEPRI_MAX, r1
 8011d8a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 8011d8e:	6a21      	ldr	r1, [r4, #32]
 8011d90:	2900      	cmp	r1, #0
 8011d92:	d032      	beq.n	8011dfa <z_impl_k_msgq_get+0x86>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
 8011d94:	68a2      	ldr	r2, [r4, #8]
 8011d96:	69a1      	ldr	r1, [r4, #24]
 8011d98:	f002 ff6d 	bl	8014c76 <memcpy>
		msgq->read_ptr += msgq->msg_size;
 8011d9c:	69a3      	ldr	r3, [r4, #24]
 8011d9e:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8011da0:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
 8011da2:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
 8011da4:	6962      	ldr	r2, [r4, #20]
 8011da6:	4293      	cmp	r3, r2
		msgq->read_ptr += msgq->msg_size;
 8011da8:	61a3      	str	r3, [r4, #24]
			msgq->read_ptr = msgq->buffer_start;
 8011daa:	bf04      	itt	eq
 8011dac:	6923      	ldreq	r3, [r4, #16]
 8011dae:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
 8011db0:	6a23      	ldr	r3, [r4, #32]
 8011db2:	3b01      	subs	r3, #1
 8011db4:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8011db6:	f009 ffb7 	bl	801bd28 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8011dba:	4605      	mov	r5, r0
 8011dbc:	b368      	cbz	r0, 8011e1a <z_impl_k_msgq_get+0xa6>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			__ASSERT_NO_MSG(msgq->write_ptr >= msgq->buffer_start &&
					msgq->write_ptr < msgq->buffer_end);
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
 8011dbe:	6941      	ldr	r1, [r0, #20]
 8011dc0:	68a2      	ldr	r2, [r4, #8]
 8011dc2:	69e0      	ldr	r0, [r4, #28]
 8011dc4:	f002 ff57 	bl	8014c76 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 8011dc8:	69e3      	ldr	r3, [r4, #28]
 8011dca:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 8011dcc:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
 8011dce:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 8011dd0:	6962      	ldr	r2, [r4, #20]
 8011dd2:	4293      	cmp	r3, r2
			msgq->write_ptr += msgq->msg_size;
 8011dd4:	61e3      	str	r3, [r4, #28]
				msgq->write_ptr = msgq->buffer_start;
 8011dd6:	bf04      	itt	eq
 8011dd8:	6923      	ldreq	r3, [r4, #16]
 8011dda:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
 8011ddc:	6a23      	ldr	r3, [r4, #32]
 8011dde:	3301      	adds	r3, #1
 8011de0:	6223      	str	r3, [r4, #32]
 8011de2:	2400      	movs	r4, #0
 8011de4:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
			z_ready_thread(pending_thread);
 8011de8:	f009 ff29 	bl	801bc3e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 8011dec:	4638      	mov	r0, r7
 8011dee:	4631      	mov	r1, r6
 8011df0:	f000 fb70 	bl	80124d4 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 8011df4:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8011df6:	b003      	add	sp, #12
 8011df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8011dfa:	ea52 0103 	orrs.w	r1, r2, r3
 8011dfe:	d00a      	beq.n	8011e16 <z_impl_k_msgq_get+0xa2>
		_current->base.swap_data = data;
 8011e00:	4908      	ldr	r1, [pc, #32]	; (8011e24 <z_impl_k_msgq_get+0xb0>)
 8011e02:	6889      	ldr	r1, [r1, #8]
 8011e04:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8011e06:	4631      	mov	r1, r6
 8011e08:	4638      	mov	r0, r7
 8011e0a:	e9cd 2300 	strd	r2, r3, [sp]
 8011e0e:	4622      	mov	r2, r4
 8011e10:	f000 fc96 	bl	8012740 <z_pend_curr>
		return result;
 8011e14:	e7ef      	b.n	8011df6 <z_impl_k_msgq_get+0x82>
		result = -ENOMSG;
 8011e16:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 8011e1a:	f386 8811 	msr	BASEPRI, r6
 8011e1e:	f3bf 8f6f 	isb	sy
	return result;
 8011e22:	e7e8      	b.n	8011df6 <z_impl_k_msgq_get+0x82>
 8011e24:	24002fe8 	.word	0x24002fe8

08011e28 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8011e28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	4617      	mov	r7, r2
 8011e30:	461e      	mov	r6, r3
	__asm__ volatile(
 8011e32:	f04f 0310 	mov.w	r3, #16
 8011e36:	f3ef 8811 	mrs	r8, BASEPRI
 8011e3a:	f383 8812 	msr	BASEPRI_MAX, r3
 8011e3e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8011e42:	68c3      	ldr	r3, [r0, #12]
 8011e44:	4a33      	ldr	r2, [pc, #204]	; (8011f14 <z_impl_k_mutex_lock+0xec>)
 8011e46:	b16b      	cbz	r3, 8011e64 <z_impl_k_mutex_lock+0x3c>
 8011e48:	6880      	ldr	r0, [r0, #8]
 8011e4a:	6891      	ldr	r1, [r2, #8]
 8011e4c:	4288      	cmp	r0, r1
 8011e4e:	d019      	beq.n	8011e84 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8011e50:	ea57 0306 	orrs.w	r3, r7, r6
 8011e54:	d118      	bne.n	8011e88 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 8011e56:	f388 8811 	msr	BASEPRI, r8
 8011e5a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 8011e5e:	f06f 000f 	mvn.w	r0, #15
 8011e62:	e00c      	b.n	8011e7e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 8011e64:	6891      	ldr	r1, [r2, #8]
 8011e66:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
 8011e6a:	3301      	adds	r3, #1
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8011e6c:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 8011e6e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 8011e70:	6893      	ldr	r3, [r2, #8]
 8011e72:	60a3      	str	r3, [r4, #8]
 8011e74:	f388 8811 	msr	BASEPRI, r8
 8011e78:	f3bf 8f6f 	isb	sy
		return 0;
 8011e7c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 8011e7e:	b002      	add	sp, #8
 8011e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 8011e84:	6921      	ldr	r1, [r4, #16]
 8011e86:	e7f0      	b.n	8011e6a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8011e88:	f991 100e 	ldrsb.w	r1, [r1, #14]
 8011e8c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 8011e90:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
 8011e94:	4299      	cmp	r1, r3
 8011e96:	bfa8      	it	ge
 8011e98:	4619      	movge	r1, r3
 8011e9a:	4291      	cmp	r1, r2
 8011e9c:	bfb8      	it	lt
 8011e9e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8011ea0:	428b      	cmp	r3, r1
 8011ea2:	dd2f      	ble.n	8011f04 <z_impl_k_mutex_lock+0xdc>
		resched = adjust_owner_prio(mutex, new_prio);
 8011ea4:	f009 fcb9 	bl	801b81a <adjust_owner_prio.isra.0>
 8011ea8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8011eaa:	4622      	mov	r2, r4
 8011eac:	4641      	mov	r1, r8
 8011eae:	481a      	ldr	r0, [pc, #104]	; (8011f18 <z_impl_k_mutex_lock+0xf0>)
 8011eb0:	e9cd 7600 	strd	r7, r6, [sp]
 8011eb4:	f000 fc44 	bl	8012740 <z_pend_curr>
	if (got_mutex == 0) {
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d0e0      	beq.n	8011e7e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 8011ebc:	f04f 0310 	mov.w	r3, #16
 8011ec0:	f3ef 8611 	mrs	r6, BASEPRI
 8011ec4:	f383 8812 	msr	BASEPRI_MAX, r3
 8011ec8:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
 8011ecc:	68a0      	ldr	r0, [r4, #8]
 8011ece:	b188      	cbz	r0, 8011ef4 <z_impl_k_mutex_lock+0xcc>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8011ed0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8011ed2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011ed4:	429c      	cmp	r4, r3
 8011ed6:	d00a      	beq.n	8011eee <z_impl_k_mutex_lock+0xc6>
 8011ed8:	b14b      	cbz	r3, 8011eee <z_impl_k_mutex_lock+0xc6>
 8011eda:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8011ede:	4299      	cmp	r1, r3
 8011ee0:	bfa8      	it	ge
 8011ee2:	4619      	movge	r1, r3
 8011ee4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8011ee8:	4299      	cmp	r1, r3
 8011eea:	bfb8      	it	lt
 8011eec:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
 8011eee:	f009 fc94 	bl	801b81a <adjust_owner_prio.isra.0>
 8011ef2:	b900      	cbnz	r0, 8011ef6 <z_impl_k_mutex_lock+0xce>
	if (resched) {
 8011ef4:	b145      	cbz	r5, 8011f08 <z_impl_k_mutex_lock+0xe0>
		z_reschedule(&lock, key);
 8011ef6:	4631      	mov	r1, r6
 8011ef8:	4807      	ldr	r0, [pc, #28]	; (8011f18 <z_impl_k_mutex_lock+0xf0>)
 8011efa:	f000 faeb 	bl	80124d4 <z_reschedule>
	return -EAGAIN;
 8011efe:	f06f 000a 	mvn.w	r0, #10
 8011f02:	e7bc      	b.n	8011e7e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 8011f04:	2500      	movs	r5, #0
 8011f06:	e7d0      	b.n	8011eaa <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 8011f08:	f386 8811 	msr	BASEPRI, r6
 8011f0c:	f3bf 8f6f 	isb	sy
 8011f10:	e7f5      	b.n	8011efe <z_impl_k_mutex_lock+0xd6>
 8011f12:	bf00      	nop
 8011f14:	24002fe8 	.word	0x24002fe8
 8011f18:	2400331b 	.word	0x2400331b

08011f1c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8011f1c:	b570      	push	{r4, r5, r6, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8011f1e:	6883      	ldr	r3, [r0, #8]
{
 8011f20:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 8011f22:	b373      	cbz	r3, 8011f82 <z_impl_k_mutex_unlock+0x66>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8011f24:	4a1a      	ldr	r2, [pc, #104]	; (8011f90 <z_impl_k_mutex_unlock+0x74>)
 8011f26:	6892      	ldr	r2, [r2, #8]
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	d12d      	bne.n	8011f88 <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8011f2c:	68c3      	ldr	r3, [r0, #12]
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	d903      	bls.n	8011f3a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
 8011f32:	3b01      	subs	r3, #1
 8011f34:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 8011f36:	2000      	movs	r0, #0
}
 8011f38:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
 8011f3a:	f04f 0310 	mov.w	r3, #16
 8011f3e:	f3ef 8511 	mrs	r5, BASEPRI
 8011f42:	f383 8812 	msr	BASEPRI_MAX, r3
 8011f46:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8011f4a:	6901      	ldr	r1, [r0, #16]
 8011f4c:	2600      	movs	r6, #0
 8011f4e:	6880      	ldr	r0, [r0, #8]
 8011f50:	f009 fc63 	bl	801b81a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8011f54:	4620      	mov	r0, r4
 8011f56:	f009 fee7 	bl	801bd28 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8011f5a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8011f5c:	b158      	cbz	r0, 8011f76 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
 8011f5e:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8011f62:	6122      	str	r2, [r4, #16]
 8011f64:	f8c0 60b0 	str.w	r6, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
 8011f68:	f009 fe69 	bl	801bc3e <z_ready_thread>
		z_reschedule(&lock, key);
 8011f6c:	4629      	mov	r1, r5
 8011f6e:	4809      	ldr	r0, [pc, #36]	; (8011f94 <z_impl_k_mutex_unlock+0x78>)
 8011f70:	f000 fab0 	bl	80124d4 <z_reschedule>
 8011f74:	e7df      	b.n	8011f36 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
 8011f76:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8011f78:	f385 8811 	msr	BASEPRI, r5
 8011f7c:	f3bf 8f6f 	isb	sy
 8011f80:	e7d9      	b.n	8011f36 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
 8011f82:	f06f 0015 	mvn.w	r0, #21
 8011f86:	e7d7      	b.n	8011f38 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
 8011f88:	f04f 30ff 	mov.w	r0, #4294967295
 8011f8c:	e7d4      	b.n	8011f38 <z_impl_k_mutex_unlock+0x1c>
 8011f8e:	bf00      	nop
 8011f90:	24002fe8 	.word	0x24002fe8
 8011f94:	2400331b 	.word	0x2400331b

08011f98 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
 8011f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f9a:	4611      	mov	r1, r2
	__asm__ volatile(
 8011f9c:	f04f 0210 	mov.w	r2, #16
 8011fa0:	f3ef 8511 	mrs	r5, BASEPRI
 8011fa4:	f382 8812 	msr	BASEPRI_MAX, r2
 8011fa8:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 8011fac:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 8011fae:	b19c      	cbz	r4, 8011fd8 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8011fb0:	6823      	ldr	r3, [r4, #0]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 8011fb2:	2101      	movs	r1, #1
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8011fb4:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8011fb6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8011fba:	4294      	cmp	r4, r2
	list->head = node;
 8011fbc:	6003      	str	r3, [r0, #0]
	list->tail = node;
 8011fbe:	bf08      	it	eq
 8011fc0:	6043      	streq	r3, [r0, #4]
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	f009 fc9d 	bl	801b902 <z_queue_node_peek>
 8011fc8:	4604      	mov	r4, r0
	__asm__ volatile(
 8011fca:	f385 8811 	msr	BASEPRI, r5
 8011fce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	b003      	add	sp, #12
 8011fd6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8011fd8:	ea51 0203 	orrs.w	r2, r1, r3
 8011fdc:	d0f5      	beq.n	8011fca <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 8011fde:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 8011fe2:	e9cd 1300 	strd	r1, r3, [sp]
 8011fe6:	4610      	mov	r0, r2
 8011fe8:	4629      	mov	r1, r5
 8011fea:	f000 fba9 	bl	8012740 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	d1ef      	bne.n	8011fd2 <z_impl_k_queue_get+0x3a>
 8011ff2:	4b02      	ldr	r3, [pc, #8]	; (8011ffc <z_impl_k_queue_get+0x64>)
 8011ff4:	689b      	ldr	r3, [r3, #8]
 8011ff6:	695c      	ldr	r4, [r3, #20]
 8011ff8:	e7eb      	b.n	8011fd2 <z_impl_k_queue_get+0x3a>
 8011ffa:	bf00      	nop
 8011ffc:	24002fe8 	.word	0x24002fe8

08012000 <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8012000:	b538      	push	{r3, r4, r5, lr}
 8012002:	4604      	mov	r4, r0
	__asm__ volatile(
 8012004:	f04f 0310 	mov.w	r3, #16
 8012008:	f3ef 8511 	mrs	r5, BASEPRI
 801200c:	f383 8812 	msr	BASEPRI_MAX, r3
 8012010:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	bool resched = true;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8012014:	f009 fe88 	bl	801bd28 <z_unpend_first_thread>

	if (thread != NULL) {
 8012018:	b150      	cbz	r0, 8012030 <z_impl_k_sem_give+0x30>
 801201a:	2200      	movs	r2, #0
 801201c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8012020:	f009 fe0d 	bl	801bc3e <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (resched) {
		z_reschedule(&lock, key);
 8012024:	4629      	mov	r1, r5
 8012026:	4808      	ldr	r0, [pc, #32]	; (8012048 <z_impl_k_sem_give+0x48>)
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8012028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
 801202c:	f000 ba52 	b.w	80124d4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8012030:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8012034:	2102      	movs	r1, #2
 8012036:	f104 0010 	add.w	r0, r4, #16
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 801203a:	429a      	cmp	r2, r3
 801203c:	bf18      	it	ne
 801203e:	3301      	addne	r3, #1
 8012040:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8012042:	f00a f869 	bl	801c118 <z_handle_obj_poll_events>
	return true;
 8012046:	e7ed      	b.n	8012024 <z_impl_k_sem_give+0x24>
 8012048:	2400331b 	.word	0x2400331b

0801204c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 801204c:	b513      	push	{r0, r1, r4, lr}
 801204e:	f04f 0410 	mov.w	r4, #16
 8012052:	f3ef 8111 	mrs	r1, BASEPRI
 8012056:	f384 8812 	msr	BASEPRI_MAX, r4
 801205a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 801205e:	6884      	ldr	r4, [r0, #8]
 8012060:	b144      	cbz	r4, 8012074 <z_impl_k_sem_take+0x28>
		sem->count--;
 8012062:	3c01      	subs	r4, #1
 8012064:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8012066:	f381 8811 	msr	BASEPRI, r1
 801206a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 801206e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8012070:	b002      	add	sp, #8
 8012072:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8012074:	ea52 0403 	orrs.w	r4, r2, r3
 8012078:	d106      	bne.n	8012088 <z_impl_k_sem_take+0x3c>
 801207a:	f381 8811 	msr	BASEPRI, r1
 801207e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8012082:	f06f 000f 	mvn.w	r0, #15
 8012086:	e7f3      	b.n	8012070 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8012088:	e9cd 2300 	strd	r2, r3, [sp]
 801208c:	4602      	mov	r2, r0
 801208e:	4802      	ldr	r0, [pc, #8]	; (8012098 <z_impl_k_sem_take+0x4c>)
 8012090:	f000 fb56 	bl	8012740 <z_pend_curr>
	return ret;
 8012094:	e7ec      	b.n	8012070 <z_impl_k_sem_take+0x24>
 8012096:	bf00      	nop
 8012098:	2400331b 	.word	0x2400331b

0801209c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 801209c:	b570      	push	{r4, r5, r6, lr}
 801209e:	4604      	mov	r4, r0
	__asm__ volatile(
 80120a0:	f04f 0310 	mov.w	r3, #16
 80120a4:	f3ef 8511 	mrs	r5, BASEPRI
 80120a8:	f383 8812 	msr	BASEPRI_MAX, r3
 80120ac:	f3bf 8f6f 	isb	sy
 80120b0:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
 80120b4:	4620      	mov	r0, r4
 80120b6:	f009 fe37 	bl	801bd28 <z_unpend_first_thread>
		if (thread == NULL) {
 80120ba:	b120      	cbz	r0, 80120c6 <z_impl_k_sem_reset+0x2a>
 80120bc:	f8c0 60b0 	str.w	r6, [r0, #176]	; 0xb0
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 80120c0:	f009 fdbd 	bl	801bc3e <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 80120c4:	e7f6      	b.n	80120b4 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
 80120c6:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 80120c8:	2102      	movs	r1, #2
 80120ca:	f104 0010 	add.w	r0, r4, #16
 80120ce:	f00a f823 	bl	801c118 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 80120d2:	4629      	mov	r1, r5
 80120d4:	4802      	ldr	r0, [pc, #8]	; (80120e0 <z_impl_k_sem_reset+0x44>)
}
 80120d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 80120da:	f000 b9fb 	b.w	80124d4 <z_reschedule>
 80120de:	bf00      	nop
 80120e0:	2400331b 	.word	0x2400331b

080120e4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 80120e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e8:	4604      	mov	r4, r0
 80120ea:	b085      	sub	sp, #20
	return list->head;
 80120ec:	4e46      	ldr	r6, [pc, #280]	; (8012208 <work_queue_main+0x124>)
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 80120ee:	f04f 38ff 	mov.w	r8, #4294967295
 80120f2:	f04f 39ff 	mov.w	r9, #4294967295
 80120f6:	f04f 0310 	mov.w	r3, #16
 80120fa:	f3ef 8711 	mrs	r7, BASEPRI
 80120fe:	f383 8812 	msr	BASEPRI_MAX, r3
 8012102:	f3bf 8f6f 	isb	sy
 8012106:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
 801210a:	b98d      	cbnz	r5, 8012130 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 801210c:	2102      	movs	r1, #2
 801210e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012112:	f009 fc46 	bl	801b9a2 <flag_test_and_clear>
 8012116:	2800      	cmp	r0, #0
 8012118:	d135      	bne.n	8012186 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 801211a:	2300      	movs	r3, #0
 801211c:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
 8012120:	4639      	mov	r1, r7
 8012122:	483a      	ldr	r0, [pc, #232]	; (801220c <work_queue_main+0x128>)
 8012124:	9302      	str	r3, [sp, #8]
 8012126:	e9cd 8900 	strd	r8, r9, [sp]
 801212a:	f000 fccf 	bl	8012acc <z_sched_wait>
			continue;
 801212e:	e7e2      	b.n	80120f6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8012130:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
 8012134:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8012136:	4295      	cmp	r5, r2
	list->head = node;
 8012138:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 801213c:	d101      	bne.n	8012142 <work_queue_main+0x5e>
	list->tail = node;
 801213e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
 8012142:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8012146:	f043 0302 	orr.w	r3, r3, #2
 801214a:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
 801214e:	68eb      	ldr	r3, [r5, #12]
 8012150:	f023 0304 	bic.w	r3, r3, #4
 8012154:	f043 0301 	orr.w	r3, r3, #1
 8012158:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 801215a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
 801215c:	f387 8811 	msr	BASEPRI, r7
 8012160:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 8012164:	4628      	mov	r0, r5
 8012166:	4798      	blx	r3
	__asm__ volatile(
 8012168:	f04f 0310 	mov.w	r3, #16
 801216c:	f3ef 8b11 	mrs	fp, BASEPRI
 8012170:	f383 8812 	msr	BASEPRI_MAX, r3
 8012174:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 8012178:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 801217a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 801217c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8012180:	d40b      	bmi.n	801219a <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
 8012182:	60ea      	str	r2, [r5, #12]
 8012184:	e00e      	b.n	80121a4 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 8012186:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 801218a:	2200      	movs	r2, #0
 801218c:	2101      	movs	r1, #1
 801218e:	4628      	mov	r0, r5
 8012190:	f009 fdf2 	bl	801bd78 <z_sched_wake>
 8012194:	2800      	cmp	r0, #0
 8012196:	d1f8      	bne.n	801218a <work_queue_main+0xa6>
 8012198:	e7bf      	b.n	801211a <work_queue_main+0x36>
	*flagp &= ~BIT(bit);
 801219a:	f023 0303 	bic.w	r3, r3, #3
	return list->head;
 801219e:	6830      	ldr	r0, [r6, #0]
 80121a0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80121a2:	b970      	cbnz	r0, 80121c2 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
 80121a4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 80121a8:	f023 0302 	bic.w	r3, r3, #2
 80121ac:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
 80121b0:	f38b 8811 	msr	BASEPRI, fp
 80121b4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 80121b8:	05d8      	lsls	r0, r3, #23
 80121ba:	d49c      	bmi.n	80120f6 <work_queue_main+0x12>
	z_impl_k_yield();
 80121bc:	f000 fb7c 	bl	80128b8 <z_impl_k_yield>
}
 80121c0:	e799      	b.n	80120f6 <work_queue_main+0x12>
	return node->next;
 80121c2:	2700      	movs	r7, #0
 80121c4:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
 80121c8:	463b      	mov	r3, r7
		if (wc->work == work) {
 80121ca:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 80121cc:	4601      	mov	r1, r0
		if (wc->work == work) {
 80121ce:	4295      	cmp	r5, r2
 80121d0:	d10c      	bne.n	80121ec <work_queue_main+0x108>
	return node->next;
 80121d2:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 80121d4:	b997      	cbnz	r7, 80121fc <work_queue_main+0x118>
 80121d6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 80121d8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 80121da:	4282      	cmp	r2, r0
 80121dc:	d100      	bne.n	80121e0 <work_queue_main+0xfc>
	list->tail = node;
 80121de:	6071      	str	r1, [r6, #4]
	parent->next = child;
 80121e0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
 80121e4:	f7ff ff0c 	bl	8012000 <z_impl_k_sem_give>
}
 80121e8:	4639      	mov	r1, r7
 80121ea:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80121ec:	f1ba 0f00 	cmp.w	sl, #0
 80121f0:	d0d8      	beq.n	80121a4 <work_queue_main+0xc0>
	return node->next;
 80121f2:	4650      	mov	r0, sl
 80121f4:	460f      	mov	r7, r1
 80121f6:	f8da a000 	ldr.w	sl, [sl]
 80121fa:	e7e6      	b.n	80121ca <work_queue_main+0xe6>
	parent->next = child;
 80121fc:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 80121fe:	6872      	ldr	r2, [r6, #4]
 8012200:	4282      	cmp	r2, r0
	list->tail = node;
 8012202:	bf08      	it	eq
 8012204:	6077      	streq	r7, [r6, #4]
}
 8012206:	e7eb      	b.n	80121e0 <work_queue_main+0xfc>
 8012208:	2400300c 	.word	0x2400300c
 801220c:	2400331b 	.word	0x2400331b

08012210 <cancel_sync_locked>:
{
 8012210:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
 8012212:	68c3      	ldr	r3, [r0, #12]
{
 8012214:	4605      	mov	r5, r0
 8012216:	460c      	mov	r4, r1
	return (*flagp & BIT(bit)) != 0U;
 8012218:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
 801221c:	079b      	lsls	r3, r3, #30
 801221e:	d50d      	bpl.n	801223c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8012220:	2201      	movs	r2, #1
 8012222:	2100      	movs	r1, #0
 8012224:	f104 0008 	add.w	r0, r4, #8
 8012228:	f009 fbab 	bl	801b982 <z_impl_k_sem_init>
	parent->next = child;
 801222c:	2300      	movs	r3, #0
	canceler->work = work;
 801222e:	6065      	str	r5, [r4, #4]
 8012230:	6023      	str	r3, [r4, #0]
	return list->tail;
 8012232:	4b05      	ldr	r3, [pc, #20]	; (8012248 <cancel_sync_locked+0x38>)
 8012234:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
 8012236:	b91a      	cbnz	r2, 8012240 <cancel_sync_locked+0x30>
	list->head = node;
 8012238:	e9c3 4400 	strd	r4, r4, [r3]
}
 801223c:	4630      	mov	r0, r6
 801223e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
 8012240:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8012242:	605c      	str	r4, [r3, #4]
}
 8012244:	e7fa      	b.n	801223c <cancel_sync_locked+0x2c>
 8012246:	bf00      	nop
 8012248:	2400300c 	.word	0x2400300c

0801224c <submit_to_queue_locked>:
{
 801224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 801224e:	68c3      	ldr	r3, [r0, #12]
{
 8012250:	4604      	mov	r4, r0
 8012252:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8012254:	079a      	lsls	r2, r3, #30
 8012256:	f3c3 0540 	ubfx	r5, r3, #1, #1
 801225a:	d41f      	bmi.n	801229c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 801225c:	075f      	lsls	r7, r3, #29
 801225e:	d41f      	bmi.n	80122a0 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
 8012260:	680b      	ldr	r3, [r1, #0]
 8012262:	b90b      	cbnz	r3, 8012268 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 8012264:	6883      	ldr	r3, [r0, #8]
 8012266:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
 8012268:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 801226a:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
 801226c:	bf45      	ittet	mi
 801226e:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
 8012270:	2502      	movmi	r5, #2
		ret = 1;
 8012272:	2501      	movpl	r5, #1
			*queuep = work->queue;
 8012274:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
 8012276:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
 8012278:	b37f      	cbz	r7, 80122da <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 801227a:	4b1b      	ldr	r3, [pc, #108]	; (80122e8 <submit_to_queue_locked+0x9c>)
 801227c:	689b      	ldr	r3, [r3, #8]
 801227e:	42bb      	cmp	r3, r7
 8012280:	d111      	bne.n	80122a6 <submit_to_queue_locked+0x5a>
 8012282:	f009 faa0 	bl	801b7c6 <k_is_in_isr>
 8012286:	f080 0001 	eor.w	r0, r0, #1
 801228a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
 801228c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8012290:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 8012292:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8012296:	d523      	bpl.n	80122e0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
 8012298:	b13a      	cbz	r2, 80122aa <submit_to_queue_locked+0x5e>
 801229a:	b940      	cbnz	r0, 80122ae <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 801229c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
 80122a0:	2300      	movs	r3, #0
 80122a2:	6033      	str	r3, [r6, #0]
	return ret;
 80122a4:	e013      	b.n	80122ce <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 80122a6:	2000      	movs	r0, #0
 80122a8:	e7f0      	b.n	801228c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
 80122aa:	071b      	lsls	r3, r3, #28
 80122ac:	d4f6      	bmi.n	801229c <submit_to_queue_locked+0x50>
	parent->next = child;
 80122ae:	2300      	movs	r3, #0
 80122b0:	6023      	str	r3, [r4, #0]
	return list->tail;
 80122b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
 80122b6:	b963      	cbnz	r3, 80122d2 <submit_to_queue_locked+0x86>
	list->head = node;
 80122b8:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
 80122bc:	4638      	mov	r0, r7
 80122be:	f009 fb8a 	bl	801b9d6 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 80122c2:	68e3      	ldr	r3, [r4, #12]
 80122c4:	f043 0304 	orr.w	r3, r3, #4
 80122c8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 80122ca:	6833      	ldr	r3, [r6, #0]
 80122cc:	60a3      	str	r3, [r4, #8]
}
 80122ce:	4628      	mov	r0, r5
 80122d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 80122d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80122d4:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
 80122d8:	e7f0      	b.n	80122bc <submit_to_queue_locked+0x70>
		return -EINVAL;
 80122da:	f06f 0515 	mvn.w	r5, #21
 80122de:	e7df      	b.n	80122a0 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
 80122e0:	f06f 0512 	mvn.w	r5, #18
 80122e4:	e7dc      	b.n	80122a0 <submit_to_queue_locked+0x54>
 80122e6:	bf00      	nop
 80122e8:	24002fe8 	.word	0x24002fe8

080122ec <k_work_submit>:
{
 80122ec:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 80122ee:	4801      	ldr	r0, [pc, #4]	; (80122f4 <k_work_submit+0x8>)
 80122f0:	f009 bbf7 	b.w	801bae2 <k_work_submit_to_queue>
 80122f4:	24001c60 	.word	0x24001c60

080122f8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 80122f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122fa:	4604      	mov	r4, r0
	list->head = NULL;
 80122fc:	2000      	movs	r0, #0
 80122fe:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
 8012300:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
 8012304:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8012308:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->tail = (sys_dnode_t *)list;
 801230a:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
 801230e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8012312:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 8012316:	b31d      	cbz	r5, 8012360 <k_work_queue_start+0x68>
 8012318:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 801231a:	2800      	cmp	r0, #0
 801231c:	f240 1001 	movw	r0, #257	; 0x101
 8012320:	bf08      	it	eq
 8012322:	2001      	moveq	r0, #1
	*flagp = flags;
 8012324:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8012328:	2000      	movs	r0, #0
 801232a:	f04f 36ff 	mov.w	r6, #4294967295
 801232e:	f04f 37ff 	mov.w	r7, #4294967295
 8012332:	9400      	str	r4, [sp, #0]
 8012334:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8012338:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801233c:	4b09      	ldr	r3, [pc, #36]	; (8012364 <k_work_queue_start+0x6c>)
 801233e:	4620      	mov	r0, r4
 8012340:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012344:	f7ff fc4a 	bl	8011bdc <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 8012348:	b125      	cbz	r5, 8012354 <k_work_queue_start+0x5c>
 801234a:	6829      	ldr	r1, [r5, #0]
 801234c:	b111      	cbz	r1, 8012354 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 801234e:	4620      	mov	r0, r4
 8012350:	f7ff fb80 	bl	8011a54 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 8012354:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 8012356:	b009      	add	sp, #36	; 0x24
 8012358:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801235c:	f009 ba3b 	b.w	801b7d6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8012360:	2001      	movs	r0, #1
 8012362:	e7df      	b.n	8012324 <k_work_queue_start+0x2c>
 8012364:	080120e5 	.word	0x080120e5

08012368 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
 8012368:	b513      	push	{r0, r1, r4, lr}
 801236a:	9001      	str	r0, [sp, #4]
 801236c:	4608      	mov	r0, r1
	__asm__ volatile(
 801236e:	f04f 0110 	mov.w	r1, #16
 8012372:	f3ef 8411 	mrs	r4, BASEPRI
 8012376:	f381 8812 	msr	BASEPRI_MAX, r1
 801237a:	f3bf 8f6f 	isb	sy
	return *flagp;
 801237e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
 8012380:	f011 0f0e 	tst.w	r1, #14
 8012384:	d117      	bne.n	80123b6 <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8012386:	ea53 0c02 	orrs.w	ip, r3, r2
 801238a:	d108      	bne.n	801239e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
 801238c:	a901      	add	r1, sp, #4
 801238e:	f7ff ff5d 	bl	801224c <submit_to_queue_locked>
	__asm__ volatile(
 8012392:	f384 8811 	msr	BASEPRI, r4
 8012396:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
 801239a:	b002      	add	sp, #8
 801239c:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
 801239e:	f041 0108 	orr.w	r1, r1, #8
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 80123a2:	3010      	adds	r0, #16
	*flagp |= BIT(bit);
 80123a4:	f840 1c04 	str.w	r1, [r0, #-4]
	dwork->queue = *queuep;
 80123a8:	9901      	ldr	r1, [sp, #4]
 80123aa:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 80123ac:	4903      	ldr	r1, [pc, #12]	; (80123bc <k_work_schedule_for_queue+0x54>)
 80123ae:	f000 fc2f 	bl	8012c10 <z_add_timeout>
	return ret;
 80123b2:	2001      	movs	r0, #1
 80123b4:	e7ed      	b.n	8012392 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
 80123b6:	2000      	movs	r0, #0
 80123b8:	e7eb      	b.n	8012392 <k_work_schedule_for_queue+0x2a>
 80123ba:	bf00      	nop
 80123bc:	0801ba4b 	.word	0x0801ba4b

080123c0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
 80123c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123c2:	460c      	mov	r4, r1
 80123c4:	4616      	mov	r6, r2
 80123c6:	461d      	mov	r5, r3
 80123c8:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
 80123ca:	f04f 0310 	mov.w	r3, #16
 80123ce:	f3ef 8711 	mrs	r7, BASEPRI
 80123d2:	f383 8812 	msr	BASEPRI_MAX, r3
 80123d6:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
 80123da:	4608      	mov	r0, r1
 80123dc:	f009 faec 	bl	801b9b8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80123e0:	ea55 0306 	orrs.w	r3, r5, r6
 80123e4:	d109      	bne.n	80123fa <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
 80123e6:	a901      	add	r1, sp, #4
 80123e8:	4620      	mov	r0, r4
 80123ea:	f7ff ff2f 	bl	801224c <submit_to_queue_locked>
	__asm__ volatile(
 80123ee:	f387 8811 	msr	BASEPRI, r7
 80123f2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
 80123f6:	b003      	add	sp, #12
 80123f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
 80123fa:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 80123fc:	f104 0010 	add.w	r0, r4, #16
 8012400:	4632      	mov	r2, r6
 8012402:	4905      	ldr	r1, [pc, #20]	; (8012418 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
 8012404:	f043 0308 	orr.w	r3, r3, #8
 8012408:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
 801240a:	9b01      	ldr	r3, [sp, #4]
 801240c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 801240e:	462b      	mov	r3, r5
 8012410:	f000 fbfe 	bl	8012c10 <z_add_timeout>
	return ret;
 8012414:	2001      	movs	r0, #1
 8012416:	e7ea      	b.n	80123ee <k_work_reschedule_for_queue+0x2e>
 8012418:	0801ba4b 	.word	0x0801ba4b

0801241c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 801241c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
 801241e:	4801      	ldr	r0, [pc, #4]	; (8012424 <k_work_reschedule+0x8>)
 8012420:	f7ff bfce 	b.w	80123c0 <k_work_reschedule_for_queue>
 8012424:	24001c60 	.word	0x24001c60

08012428 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
 8012428:	89c3      	ldrh	r3, [r0, #14]
 801242a:	2b7f      	cmp	r3, #127	; 0x7f
 801242c:	d812      	bhi.n	8012454 <sliceable+0x2c>
	int ret = slice_ticks;
 801242e:	4b0a      	ldr	r3, [pc, #40]	; (8012458 <sliceable+0x30>)
 8012430:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
 8012432:	b163      	cbz	r3, 801244e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8012434:	4b09      	ldr	r3, [pc, #36]	; (801245c <sliceable+0x34>)
 8012436:	f990 200e 	ldrsb.w	r2, [r0, #14]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	429a      	cmp	r2, r3
 801243e:	db09      	blt.n	8012454 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
 8012440:	7b43      	ldrb	r3, [r0, #13]
 8012442:	06db      	lsls	r3, r3, #27
 8012444:	d106      	bne.n	8012454 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
 8012446:	4b06      	ldr	r3, [pc, #24]	; (8012460 <sliceable+0x38>)
 8012448:	1ac3      	subs	r3, r0, r3
 801244a:	bf18      	it	ne
 801244c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
 801244e:	f003 0001 	and.w	r0, r3, #1
 8012452:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
 8012454:	2300      	movs	r3, #0
 8012456:	e7fa      	b.n	801244e <sliceable+0x26>
 8012458:	2400301c 	.word	0x2400301c
 801245c:	24003018 	.word	0x24003018
 8012460:	24001ad0 	.word	0x24001ad0

08012464 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 8012464:	4b04      	ldr	r3, [pc, #16]	; (8012478 <slice_timeout+0x14>)

	slice_expired[cpu] = true;
 8012466:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
 8012468:	1ac0      	subs	r0, r0, r3
 801246a:	4b04      	ldr	r3, [pc, #16]	; (801247c <slice_timeout+0x18>)
 801246c:	10c0      	asrs	r0, r0, #3
 801246e:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
 8012470:	4b03      	ldr	r3, [pc, #12]	; (8012480 <slice_timeout+0x1c>)
 8012472:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop
 8012478:	24001c40 	.word	0x24001c40
 801247c:	aaaaaaab 	.word	0xaaaaaaab
 8012480:	2400331b 	.word	0x2400331b

08012484 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
	int cpu = _current_cpu->id;
 8012484:	4b0e      	ldr	r3, [pc, #56]	; (80124c0 <z_reset_time_slice+0x3c>)
{
 8012486:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
 8012488:	7c1e      	ldrb	r6, [r3, #16]
{
 801248a:	4605      	mov	r5, r0

	z_abort_timeout(&slice_timeouts[cpu]);
 801248c:	4b0d      	ldr	r3, [pc, #52]	; (80124c4 <z_reset_time_slice+0x40>)
 801248e:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 8012492:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012496:	4620      	mov	r0, r4
 8012498:	f009 fc8c 	bl	801bdb4 <z_abort_timeout>
	slice_expired[cpu] = false;
 801249c:	4b0a      	ldr	r3, [pc, #40]	; (80124c8 <z_reset_time_slice+0x44>)
 801249e:	2200      	movs	r2, #0
	if (sliceable(curr)) {
 80124a0:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
 80124a2:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
 80124a4:	f7ff ffc0 	bl	8012428 <sliceable>
 80124a8:	b148      	cbz	r0, 80124be <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
 80124aa:	4b08      	ldr	r3, [pc, #32]	; (80124cc <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80124ac:	4620      	mov	r0, r4
 80124ae:	4908      	ldr	r1, [pc, #32]	; (80124d0 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	3a01      	subs	r2, #1
	}
}
 80124b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
 80124b8:	17d3      	asrs	r3, r2, #31
 80124ba:	f000 bba9 	b.w	8012c10 <z_add_timeout>
}
 80124be:	bd70      	pop	{r4, r5, r6, pc}
 80124c0:	24002fe8 	.word	0x24002fe8
 80124c4:	24001c40 	.word	0x24001c40
 80124c8:	2400331b 	.word	0x2400331b
 80124cc:	2400301c 	.word	0x2400301c
 80124d0:	08012465 	.word	0x08012465

080124d4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80124d4:	b949      	cbnz	r1, 80124ea <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124d6:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 80124da:	b930      	cbnz	r0, 80124ea <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 80124dc:	4b05      	ldr	r3, [pc, #20]	; (80124f4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 80124de:	695a      	ldr	r2, [r3, #20]
 80124e0:	689b      	ldr	r3, [r3, #8]
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d001      	beq.n	80124ea <z_reschedule+0x16>
	ret = arch_swap(key);
 80124e6:	f7f1 babf 	b.w	8003a68 <arch_swap>
 80124ea:	f381 8811 	msr	BASEPRI, r1
 80124ee:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
 80124f2:	4770      	bx	lr
 80124f4:	24002fe8 	.word	0x24002fe8

080124f8 <k_sched_lock>:
	__asm__ volatile(
 80124f8:	f04f 0310 	mov.w	r3, #16
 80124fc:	f3ef 8111 	mrs	r1, BASEPRI
 8012500:	f383 8812 	msr	BASEPRI_MAX, r3
 8012504:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 8012508:	4b04      	ldr	r3, [pc, #16]	; (801251c <k_sched_lock+0x24>)
 801250a:	689a      	ldr	r2, [r3, #8]
 801250c:	7bd3      	ldrb	r3, [r2, #15]
 801250e:	3b01      	subs	r3, #1
 8012510:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8012512:	f381 8811 	msr	BASEPRI, r1
 8012516:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 801251a:	4770      	bx	lr
 801251c:	24002fe8 	.word	0x24002fe8

08012520 <update_cache>:
{
 8012520:	b538      	push	{r3, r4, r5, lr}
 8012522:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 8012524:	480c      	ldr	r0, [pc, #48]	; (8012558 <update_cache+0x38>)
 8012526:	f009 fb84 	bl	801bc32 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 801252a:	4d0c      	ldr	r5, [pc, #48]	; (801255c <update_cache+0x3c>)
 801252c:	4604      	mov	r4, r0
 801252e:	b900      	cbnz	r0, 8012532 <update_cache+0x12>
 8012530:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8012532:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8012534:	b94a      	cbnz	r2, 801254a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 8012536:	7b5a      	ldrb	r2, [r3, #13]
 8012538:	06d2      	lsls	r2, r2, #27
 801253a:	d106      	bne.n	801254a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 801253c:	69a2      	ldr	r2, [r4, #24]
 801253e:	b922      	cbnz	r2, 801254a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8012540:	89da      	ldrh	r2, [r3, #14]
 8012542:	2a7f      	cmp	r2, #127	; 0x7f
 8012544:	d901      	bls.n	801254a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 8012546:	616b      	str	r3, [r5, #20]
}
 8012548:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 801254a:	429c      	cmp	r4, r3
 801254c:	d002      	beq.n	8012554 <update_cache+0x34>
			z_reset_time_slice(thread);
 801254e:	4620      	mov	r0, r4
 8012550:	f7ff ff98 	bl	8012484 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8012554:	616c      	str	r4, [r5, #20]
}
 8012556:	e7f7      	b.n	8012548 <update_cache+0x28>
 8012558:	24003000 	.word	0x24003000
 801255c:	24002fe8 	.word	0x24002fe8

08012560 <move_thread_to_end_of_prio_q>:
{
 8012560:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8012562:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 8012566:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 8012568:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 801256a:	2a00      	cmp	r2, #0
 801256c:	da04      	bge.n	8012578 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801256e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012572:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8012574:	f009 fb14 	bl	801bba0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8012578:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 801257a:	4a16      	ldr	r2, [pc, #88]	; (80125d4 <move_thread_to_end_of_prio_q+0x74>)
 801257c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012580:	4610      	mov	r0, r2
 8012582:	734b      	strb	r3, [r1, #13]
 8012584:	f850 3f18 	ldr.w	r3, [r0, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012588:	4283      	cmp	r3, r0
 801258a:	d01c      	beq.n	80125c6 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801258c:	b1db      	cbz	r3, 80125c6 <move_thread_to_end_of_prio_q+0x66>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 801258e:	69d6      	ldr	r6, [r2, #28]
	int32_t b1 = thread_1->base.prio;
 8012590:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8012594:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
 8012598:	42a5      	cmp	r5, r4
 801259a:	d00f      	beq.n	80125bc <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 801259c:	1b64      	subs	r4, r4, r5
		if (z_sched_prio_cmp(thread, t) > 0) {
 801259e:	2c00      	cmp	r4, #0
 80125a0:	dd0c      	ble.n	80125bc <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80125a2:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 80125a4:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 80125a8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80125aa:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 80125ac:	6890      	ldr	r0, [r2, #8]
 80125ae:	1a43      	subs	r3, r0, r1
 80125b0:	4258      	negs	r0, r3
}
 80125b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80125b6:	4158      	adcs	r0, r3
 80125b8:	f7ff bfb2 	b.w	8012520 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80125bc:	42b3      	cmp	r3, r6
 80125be:	d002      	beq.n	80125c6 <move_thread_to_end_of_prio_q+0x66>
 80125c0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d1e6      	bne.n	8012594 <move_thread_to_end_of_prio_q+0x34>
	sys_dnode_t *const tail = list->tail;
 80125c6:	69d3      	ldr	r3, [r2, #28]
	node->prev = tail;
 80125c8:	e9c1 0300 	strd	r0, r3, [r1]
	tail->next = node;
 80125cc:	6019      	str	r1, [r3, #0]
	list->tail = node;
 80125ce:	61d1      	str	r1, [r2, #28]
}
 80125d0:	e7ec      	b.n	80125ac <move_thread_to_end_of_prio_q+0x4c>
 80125d2:	bf00      	nop
 80125d4:	24002fe8 	.word	0x24002fe8

080125d8 <z_time_slice>:
{
 80125d8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80125da:	f04f 0310 	mov.w	r3, #16
 80125de:	f3ef 8511 	mrs	r5, BASEPRI
 80125e2:	f383 8812 	msr	BASEPRI_MAX, r3
 80125e6:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
 80125ea:	4b10      	ldr	r3, [pc, #64]	; (801262c <z_time_slice+0x54>)
	if (pending_current == curr) {
 80125ec:	4a10      	ldr	r2, [pc, #64]	; (8012630 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
 80125ee:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
 80125f0:	6810      	ldr	r0, [r2, #0]
 80125f2:	42a0      	cmp	r0, r4
 80125f4:	d106      	bne.n	8012604 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
 80125f6:	f7ff ff45 	bl	8012484 <z_reset_time_slice>
	__asm__ volatile(
 80125fa:	f385 8811 	msr	BASEPRI, r5
 80125fe:	f3bf 8f6f 	isb	sy
}
 8012602:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8012604:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 8012606:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
 8012608:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
 801260a:	4a0a      	ldr	r2, [pc, #40]	; (8012634 <z_time_slice+0x5c>)
 801260c:	5cd3      	ldrb	r3, [r2, r3]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d0f3      	beq.n	80125fa <z_time_slice+0x22>
 8012612:	4620      	mov	r0, r4
 8012614:	f7ff ff08 	bl	8012428 <sliceable>
 8012618:	2800      	cmp	r0, #0
 801261a:	d0ee      	beq.n	80125fa <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
 801261c:	7b63      	ldrb	r3, [r4, #13]
 801261e:	06db      	lsls	r3, r3, #27
 8012620:	d102      	bne.n	8012628 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
 8012622:	4620      	mov	r0, r4
 8012624:	f7ff ff9c 	bl	8012560 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
 8012628:	4620      	mov	r0, r4
 801262a:	e7e4      	b.n	80125f6 <z_time_slice+0x1e>
 801262c:	24002fe8 	.word	0x24002fe8
 8012630:	24003014 	.word	0x24003014
 8012634:	2400331b 	.word	0x2400331b

08012638 <ready_thread>:
{
 8012638:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 801263a:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801263e:	7b43      	ldrb	r3, [r0, #13]
 8012640:	2a00      	cmp	r2, #0
 8012642:	db2b      	blt.n	801269c <ready_thread+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8012644:	06da      	lsls	r2, r3, #27
 8012646:	d129      	bne.n	801269c <ready_thread+0x64>
 8012648:	6982      	ldr	r2, [r0, #24]
 801264a:	bb3a      	cbnz	r2, 801269c <ready_thread+0x64>
	return list->head == list;
 801264c:	4a14      	ldr	r2, [pc, #80]	; (80126a0 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 801264e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012652:	4611      	mov	r1, r2
 8012654:	7343      	strb	r3, [r0, #13]
 8012656:	f851 3f18 	ldr.w	r3, [r1, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801265a:	428b      	cmp	r3, r1
 801265c:	d018      	beq.n	8012690 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801265e:	b1bb      	cbz	r3, 8012690 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
 8012660:	69d6      	ldr	r6, [r2, #28]
	int32_t b1 = thread_1->base.prio;
 8012662:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8012666:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
 801266a:	42a5      	cmp	r5, r4
 801266c:	d00b      	beq.n	8012686 <ready_thread+0x4e>
		return b2 - b1;
 801266e:	1b64      	subs	r4, r4, r5
		if (z_sched_prio_cmp(thread, t) > 0) {
 8012670:	2c00      	cmp	r4, #0
 8012672:	dd08      	ble.n	8012686 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8012674:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8012676:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 801267a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 801267c:	6058      	str	r0, [r3, #4]
		update_cache(0);
 801267e:	2000      	movs	r0, #0
}
 8012680:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8012682:	f7ff bf4d 	b.w	8012520 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8012686:	429e      	cmp	r6, r3
 8012688:	d002      	beq.n	8012690 <ready_thread+0x58>
 801268a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801268c:	2b00      	cmp	r3, #0
 801268e:	d1ea      	bne.n	8012666 <ready_thread+0x2e>
	sys_dnode_t *const tail = list->tail;
 8012690:	69d3      	ldr	r3, [r2, #28]
	node->prev = tail;
 8012692:	e9c0 1300 	strd	r1, r3, [r0]
	tail->next = node;
 8012696:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8012698:	61d0      	str	r0, [r2, #28]
}
 801269a:	e7f0      	b.n	801267e <ready_thread+0x46>
}
 801269c:	bc70      	pop	{r4, r5, r6}
 801269e:	4770      	bx	lr
 80126a0:	24002fe8 	.word	0x24002fe8

080126a4 <z_sched_start>:
{
 80126a4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80126a6:	f04f 0210 	mov.w	r2, #16
 80126aa:	f3ef 8411 	mrs	r4, BASEPRI
 80126ae:	f382 8812 	msr	BASEPRI_MAX, r2
 80126b2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80126b6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80126b8:	0751      	lsls	r1, r2, #29
 80126ba:	d404      	bmi.n	80126c6 <z_sched_start+0x22>
	__asm__ volatile(
 80126bc:	f384 8811 	msr	BASEPRI, r4
 80126c0:	f3bf 8f6f 	isb	sy
}
 80126c4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80126c6:	f022 0204 	bic.w	r2, r2, #4
 80126ca:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80126cc:	f7ff ffb4 	bl	8012638 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80126d0:	4621      	mov	r1, r4
 80126d2:	4802      	ldr	r0, [pc, #8]	; (80126dc <z_sched_start+0x38>)
}
 80126d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80126d8:	f7ff befc 	b.w	80124d4 <z_reschedule>
 80126dc:	2400331b 	.word	0x2400331b

080126e0 <unready_thread>:
{
 80126e0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 80126e2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 80126e6:	4601      	mov	r1, r0
	return (thread->base.thread_state & state) != 0U;
 80126e8:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
 80126ea:	2a00      	cmp	r2, #0
 80126ec:	da04      	bge.n	80126f8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80126ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126f2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80126f4:	f009 fa54 	bl	801bba0 <sys_dlist_remove>
	update_cache(thread == _current);
 80126f8:	4b04      	ldr	r3, [pc, #16]	; (801270c <unready_thread+0x2c>)
 80126fa:	6898      	ldr	r0, [r3, #8]
 80126fc:	1a43      	subs	r3, r0, r1
 80126fe:	4258      	negs	r0, r3
 8012700:	4158      	adcs	r0, r3
}
 8012702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8012706:	f7ff bf0b 	b.w	8012520 <update_cache>
 801270a:	bf00      	nop
 801270c:	24002fe8 	.word	0x24002fe8

08012710 <pend_locked>:
{
 8012710:	b570      	push	{r4, r5, r6, lr}
 8012712:	4615      	mov	r5, r2
 8012714:	461c      	mov	r4, r3
 8012716:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 8012718:	f009 fac7 	bl	801bcaa <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 801271c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012720:	bf08      	it	eq
 8012722:	f1b5 3fff 	cmpeq.w	r5, #4294967295
 8012726:	d008      	beq.n	801273a <pend_locked+0x2a>
 8012728:	462a      	mov	r2, r5
 801272a:	4623      	mov	r3, r4
 801272c:	f106 0018 	add.w	r0, r6, #24
 8012730:	4902      	ldr	r1, [pc, #8]	; (801273c <pend_locked+0x2c>)
}
 8012732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012736:	f000 ba6b 	b.w	8012c10 <z_add_timeout>
 801273a:	bd70      	pop	{r4, r5, r6, pc}
 801273c:	0801bca3 	.word	0x0801bca3

08012740 <z_pend_curr>:
	pending_current = _current;
 8012740:	480c      	ldr	r0, [pc, #48]	; (8012774 <z_pend_curr+0x34>)
{
 8012742:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 8012744:	4d0c      	ldr	r5, [pc, #48]	; (8012778 <z_pend_curr+0x38>)
{
 8012746:	460c      	mov	r4, r1
	pending_current = _current;
 8012748:	6886      	ldr	r6, [r0, #8]
{
 801274a:	4611      	mov	r1, r2
	pending_current = _current;
 801274c:	602e      	str	r6, [r5, #0]
{
 801274e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 8012752:	f04f 0610 	mov.w	r6, #16
 8012756:	f3ef 8511 	mrs	r5, BASEPRI
 801275a:	f386 8812 	msr	BASEPRI_MAX, r6
 801275e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 8012762:	6880      	ldr	r0, [r0, #8]
 8012764:	f7ff ffd4 	bl	8012710 <pend_locked>
 8012768:	4620      	mov	r0, r4
}
 801276a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801276e:	f7f1 b97b 	b.w	8003a68 <arch_swap>
 8012772:	bf00      	nop
 8012774:	24002fe8 	.word	0x24002fe8
 8012778:	24003014 	.word	0x24003014

0801277c <z_set_prio>:
{
 801277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801277e:	4604      	mov	r4, r0
 8012780:	f04f 0310 	mov.w	r3, #16
 8012784:	f3ef 8611 	mrs	r6, BASEPRI
 8012788:	f383 8812 	msr	BASEPRI_MAX, r3
 801278c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 8012790:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
 8012792:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8012794:	06da      	lsls	r2, r3, #27
 8012796:	d133      	bne.n	8012800 <z_set_prio+0x84>
		if (need_sched) {
 8012798:	6982      	ldr	r2, [r0, #24]
 801279a:	bb8a      	cbnz	r2, 8012800 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801279c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127a0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80127a2:	f009 f9fd 	bl	801bba0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80127a6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 80127a8:	4a17      	ldr	r2, [pc, #92]	; (8012808 <z_set_prio+0x8c>)
 80127aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
				thread->base.prio = prio;
 80127ae:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 80127b0:	7343      	strb	r3, [r0, #13]
 80127b2:	4610      	mov	r0, r2
 80127b4:	f850 3f18 	ldr.w	r3, [r0, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80127b8:	4283      	cmp	r3, r0
 80127ba:	d01b      	beq.n	80127f4 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80127bc:	b1d3      	cbz	r3, 80127f4 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 80127be:	69d7      	ldr	r7, [r2, #28]
	int32_t b2 = thread_2->base.prio;
 80127c0:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 80127c4:	42a9      	cmp	r1, r5
 80127c6:	d010      	beq.n	80127ea <z_set_prio+0x6e>
		return b2 - b1;
 80127c8:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 80127ca:	2d00      	cmp	r5, #0
 80127cc:	dd0d      	ble.n	80127ea <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 80127ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80127d0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80127d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80127d6:	605c      	str	r4, [r3, #4]
			update_cache(1);
 80127d8:	2001      	movs	r0, #1
 80127da:	f7ff fea1 	bl	8012520 <update_cache>
 80127de:	2001      	movs	r0, #1
	__asm__ volatile(
 80127e0:	f386 8811 	msr	BASEPRI, r6
 80127e4:	f3bf 8f6f 	isb	sy
}
 80127e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 80127ea:	42bb      	cmp	r3, r7
 80127ec:	d002      	beq.n	80127f4 <z_set_prio+0x78>
 80127ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d1e5      	bne.n	80127c0 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 80127f4:	69d3      	ldr	r3, [r2, #28]
	node->prev = tail;
 80127f6:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 80127fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80127fc:	61d4      	str	r4, [r2, #28]
}
 80127fe:	e7eb      	b.n	80127d8 <z_set_prio+0x5c>
			thread->base.prio = prio;
 8012800:	2000      	movs	r0, #0
 8012802:	73a1      	strb	r1, [r4, #14]
 8012804:	e7ec      	b.n	80127e0 <z_set_prio+0x64>
 8012806:	bf00      	nop
 8012808:	24002fe8 	.word	0x24002fe8

0801280c <z_impl_k_thread_suspend>:
{
 801280c:	b570      	push	{r4, r5, r6, lr}
 801280e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8012810:	3018      	adds	r0, #24
 8012812:	f009 facf 	bl	801bdb4 <z_abort_timeout>
	__asm__ volatile(
 8012816:	f04f 0310 	mov.w	r3, #16
 801281a:	f3ef 8611 	mrs	r6, BASEPRI
 801281e:	f383 8812 	msr	BASEPRI_MAX, r3
 8012822:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8012826:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 801282a:	7b63      	ldrb	r3, [r4, #13]
 801282c:	2a00      	cmp	r2, #0
 801282e:	da05      	bge.n	801283c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8012830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
 8012834:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8012836:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8012838:	f009 f9b2 	bl	801bba0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 801283c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 801283e:	4d0b      	ldr	r5, [pc, #44]	; (801286c <z_impl_k_thread_suspend+0x60>)
 8012840:	f043 0310 	orr.w	r3, r3, #16
 8012844:	68a8      	ldr	r0, [r5, #8]
 8012846:	7363      	strb	r3, [r4, #13]
 8012848:	1b03      	subs	r3, r0, r4
 801284a:	4258      	negs	r0, r3
 801284c:	4158      	adcs	r0, r3
 801284e:	f7ff fe67 	bl	8012520 <update_cache>
	__asm__ volatile(
 8012852:	f386 8811 	msr	BASEPRI, r6
 8012856:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 801285a:	68ab      	ldr	r3, [r5, #8]
 801285c:	42a3      	cmp	r3, r4
 801285e:	d103      	bne.n	8012868 <z_impl_k_thread_suspend+0x5c>
}
 8012860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8012864:	f009 b9db 	b.w	801bc1e <z_reschedule_unlocked>
}
 8012868:	bd70      	pop	{r4, r5, r6, pc}
 801286a:	bf00      	nop
 801286c:	24002fe8 	.word	0x24002fe8

08012870 <k_sched_unlock>:
{
 8012870:	b510      	push	{r4, lr}
	__asm__ volatile(
 8012872:	f04f 0310 	mov.w	r3, #16
 8012876:	f3ef 8411 	mrs	r4, BASEPRI
 801287a:	f383 8812 	msr	BASEPRI_MAX, r3
 801287e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8012882:	4b08      	ldr	r3, [pc, #32]	; (80128a4 <k_sched_unlock+0x34>)
		update_cache(0);
 8012884:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 8012886:	689a      	ldr	r2, [r3, #8]
 8012888:	7bd3      	ldrb	r3, [r2, #15]
 801288a:	3301      	adds	r3, #1
 801288c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 801288e:	f7ff fe47 	bl	8012520 <update_cache>
	__asm__ volatile(
 8012892:	f384 8811 	msr	BASEPRI, r4
 8012896:	f3bf 8f6f 	isb	sy
}
 801289a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 801289e:	f009 b9be 	b.w	801bc1e <z_reschedule_unlocked>
 80128a2:	bf00      	nop
 80128a4:	24002fe8 	.word	0x24002fe8

080128a8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80128a8:	4b02      	ldr	r3, [pc, #8]	; (80128b4 <z_sched_init+0xc>)
 80128aa:	f103 0218 	add.w	r2, r3, #24
	list->tail = (sys_dnode_t *)list;
 80128ae:	e9c3 2206 	strd	r2, r2, [r3, #24]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
 80128b2:	4770      	bx	lr
 80128b4:	24002fe8 	.word	0x24002fe8

080128b8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 80128b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80128ba:	f04f 0310 	mov.w	r3, #16
 80128be:	f3ef 8511 	mrs	r5, BASEPRI
 80128c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80128c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 80128ca:	491a      	ldr	r1, [pc, #104]	; (8012934 <z_impl_k_yield+0x7c>)
 80128cc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80128ce:	7b43      	ldrb	r3, [r0, #13]
 80128d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128d4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80128d6:	f009 f963 	bl	801bba0 <sys_dlist_remove>
	}
	queue_thread(_current);
 80128da:	688b      	ldr	r3, [r1, #8]
	return list->head == list;
 80128dc:	4608      	mov	r0, r1
	thread->base.thread_state |= _THREAD_QUEUED;
 80128de:	7b5a      	ldrb	r2, [r3, #13]
 80128e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80128e4:	735a      	strb	r2, [r3, #13]
 80128e6:	f850 2f18 	ldr.w	r2, [r0, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80128ea:	4282      	cmp	r2, r0
 80128ec:	d01c      	beq.n	8012928 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80128ee:	b1da      	cbz	r2, 8012928 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 80128f0:	69cf      	ldr	r7, [r1, #28]
	int32_t b1 = thread_1->base.prio;
 80128f2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 80128f6:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 80128fa:	42a6      	cmp	r6, r4
 80128fc:	d00f      	beq.n	801291e <z_impl_k_yield+0x66>
		return b2 - b1;
 80128fe:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8012900:	2c00      	cmp	r4, #0
 8012902:	dd0c      	ble.n	801291e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 8012904:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8012906:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 801290a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 801290c:	6053      	str	r3, [r2, #4]
	update_cache(1);
 801290e:	2001      	movs	r0, #1
 8012910:	f7ff fe06 	bl	8012520 <update_cache>
 8012914:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8012916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801291a:	f7f1 b8a5 	b.w	8003a68 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 801291e:	42ba      	cmp	r2, r7
 8012920:	d002      	beq.n	8012928 <z_impl_k_yield+0x70>
 8012922:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8012924:	2a00      	cmp	r2, #0
 8012926:	d1e6      	bne.n	80128f6 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8012928:	69ca      	ldr	r2, [r1, #28]
	node->prev = tail;
 801292a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 801292e:	6013      	str	r3, [r2, #0]
	list->tail = node;
 8012930:	61cb      	str	r3, [r1, #28]
}
 8012932:	e7ec      	b.n	801290e <z_impl_k_yield+0x56>
 8012934:	24002fe8 	.word	0x24002fe8

08012938 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8012938:	ea50 0301 	orrs.w	r3, r0, r1
{
 801293c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012940:	4605      	mov	r5, r0
 8012942:	460e      	mov	r6, r1
	if (ticks == 0) {
 8012944:	d103      	bne.n	801294e <z_tick_sleep+0x16>
	z_impl_k_yield();
 8012946:	f7ff ffb7 	bl	80128b8 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 801294a:	2000      	movs	r0, #0
 801294c:	e033      	b.n	80129b6 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 801294e:	f06f 0401 	mvn.w	r4, #1
 8012952:	f04f 33ff 	mov.w	r3, #4294967295
 8012956:	1a24      	subs	r4, r4, r0
 8012958:	eb63 0301 	sbc.w	r3, r3, r1
 801295c:	2c01      	cmp	r4, #1
 801295e:	f173 0300 	sbcs.w	r3, r3, #0
 8012962:	da02      	bge.n	801296a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8012964:	f009 fa4c 	bl	801be00 <sys_clock_tick_get_32>
 8012968:	182c      	adds	r4, r5, r0
 801296a:	f04f 0310 	mov.w	r3, #16
 801296e:	f3ef 8811 	mrs	r8, BASEPRI
 8012972:	f383 8812 	msr	BASEPRI_MAX, r3
 8012976:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 801297a:	4f10      	ldr	r7, [pc, #64]	; (80129bc <z_tick_sleep+0x84>)
 801297c:	4b10      	ldr	r3, [pc, #64]	; (80129c0 <z_tick_sleep+0x88>)
 801297e:	68b8      	ldr	r0, [r7, #8]
 8012980:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8012982:	f7ff fead 	bl	80126e0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8012986:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8012988:	462a      	mov	r2, r5
 801298a:	490e      	ldr	r1, [pc, #56]	; (80129c4 <z_tick_sleep+0x8c>)
 801298c:	4633      	mov	r3, r6
 801298e:	3018      	adds	r0, #24
 8012990:	f000 f93e 	bl	8012c10 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8012994:	68ba      	ldr	r2, [r7, #8]
 8012996:	4640      	mov	r0, r8
 8012998:	7b53      	ldrb	r3, [r2, #13]
 801299a:	f043 0310 	orr.w	r3, r3, #16
 801299e:	7353      	strb	r3, [r2, #13]
 80129a0:	f7f1 f862 	bl	8003a68 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80129a4:	f009 fa2c 	bl	801be00 <sys_clock_tick_get_32>
 80129a8:	1a20      	subs	r0, r4, r0
 80129aa:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 80129ae:	2801      	cmp	r0, #1
 80129b0:	f173 0300 	sbcs.w	r3, r3, #0
 80129b4:	dbc9      	blt.n	801294a <z_tick_sleep+0x12>
}
 80129b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ba:	bf00      	nop
 80129bc:	24002fe8 	.word	0x24002fe8
 80129c0:	24003014 	.word	0x24003014
 80129c4:	0801bca3 	.word	0x0801bca3

080129c8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80129c8:	f1b1 3fff 	cmp.w	r1, #4294967295
 80129cc:	bf08      	it	eq
 80129ce:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 80129d2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80129d4:	d106      	bne.n	80129e4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 80129d6:	4b07      	ldr	r3, [pc, #28]	; (80129f4 <z_impl_k_sleep+0x2c>)
 80129d8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 80129da:	f7ff ff17 	bl	801280c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 80129de:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 80129e2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 80129e4:	f7ff ffa8 	bl	8012938 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 80129e8:	220a      	movs	r2, #10
 80129ea:	2300      	movs	r3, #0
 80129ec:	17c1      	asrs	r1, r0, #31
 80129ee:	f7ed ff21 	bl	8000834 <__aeabi_uldivmod>
	return ret;
 80129f2:	e7f6      	b.n	80129e2 <z_impl_k_sleep+0x1a>
 80129f4:	24002fe8 	.word	0x24002fe8

080129f8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 80129f8:	4b01      	ldr	r3, [pc, #4]	; (8012a00 <z_impl_z_current_get+0x8>)
 80129fa:	6898      	ldr	r0, [r3, #8]
 80129fc:	4770      	bx	lr
 80129fe:	bf00      	nop
 8012a00:	24002fe8 	.word	0x24002fe8

08012a04 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8012a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a08:	4604      	mov	r4, r0
 8012a0a:	f04f 0310 	mov.w	r3, #16
 8012a0e:	f3ef 8611 	mrs	r6, BASEPRI
 8012a12:	f383 8812 	msr	BASEPRI_MAX, r3
 8012a16:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 8012a1a:	7b03      	ldrb	r3, [r0, #12]
 8012a1c:	07d9      	lsls	r1, r3, #31
 8012a1e:	d50b      	bpl.n	8012a38 <z_thread_abort+0x34>
	__asm__ volatile(
 8012a20:	f386 8811 	msr	BASEPRI, r6
 8012a24:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 8012a28:	4040      	eors	r0, r0
 8012a2a:	f380 8811 	msr	BASEPRI, r0
 8012a2e:	f04f 0004 	mov.w	r0, #4
 8012a32:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8012a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8012a38:	7b43      	ldrb	r3, [r0, #13]
 8012a3a:	071a      	lsls	r2, r3, #28
 8012a3c:	d504      	bpl.n	8012a48 <z_thread_abort+0x44>
 8012a3e:	f386 8811 	msr	BASEPRI, r6
 8012a42:	f3bf 8f6f 	isb	sy
 8012a46:	e7f5      	b.n	8012a34 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8012a48:	f023 0220 	bic.w	r2, r3, #32
 8012a4c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8012a50:	09d2      	lsrs	r2, r2, #7
 8012a52:	d123      	bne.n	8012a9c <z_thread_abort+0x98>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8012a54:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8012a56:	68a3      	ldr	r3, [r4, #8]
 8012a58:	b113      	cbz	r3, 8012a60 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f009 f8a8 	bl	801bbb0 <unpend_thread_no_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8012a60:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8012a64:	f04f 0800 	mov.w	r8, #0
	return z_abort_timeout(&thread->base.timeout);
 8012a68:	f104 0018 	add.w	r0, r4, #24
 8012a6c:	f009 f9a2 	bl	801bdb4 <z_abort_timeout>
	return list->head == list;
 8012a70:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012a72:	42bd      	cmp	r5, r7
 8012a74:	d000      	beq.n	8012a78 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8012a76:	b9cd      	cbnz	r5, 8012aac <z_thread_abort+0xa8>
		update_cache(1);
 8012a78:	2001      	movs	r0, #1
 8012a7a:	f7ff fd51 	bl	8012520 <update_cache>
		z_thread_monitor_exit(thread);
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f7fe ffca 	bl	8011a18 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
 8012a84:	4b10      	ldr	r3, [pc, #64]	; (8012ac8 <z_thread_abort+0xc4>)
 8012a86:	689b      	ldr	r3, [r3, #8]
 8012a88:	42a3      	cmp	r3, r4
 8012a8a:	d1d8      	bne.n	8012a3e <z_thread_abort+0x3a>
 8012a8c:	f3ef 8305 	mrs	r3, IPSR
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d1d4      	bne.n	8012a3e <z_thread_abort+0x3a>
 8012a94:	4630      	mov	r0, r6
 8012a96:	f7f0 ffe7 	bl	8003a68 <arch_swap>
	return ret;
 8012a9a:	e7d0      	b.n	8012a3e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8012a9c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8012aa0:	f043 0308 	orr.w	r3, r3, #8
 8012aa4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8012aa6:	f009 f87b 	bl	801bba0 <sys_dlist_remove>
}
 8012aaa:	e7d4      	b.n	8012a56 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 8012aac:	4628      	mov	r0, r5
 8012aae:	f009 f87f 	bl	801bbb0 <unpend_thread_no_timeout>
 8012ab2:	f105 0018 	add.w	r0, r5, #24
 8012ab6:	f009 f97d 	bl	801bdb4 <z_abort_timeout>
		ready_thread(thread);
 8012aba:	4628      	mov	r0, r5
 8012abc:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
 8012ac0:	f7ff fdba 	bl	8012638 <ready_thread>
 8012ac4:	e7d4      	b.n	8012a70 <z_thread_abort+0x6c>
 8012ac6:	bf00      	nop
 8012ac8:	24002fe8 	.word	0x24002fe8

08012acc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8012acc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8012ace:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 8012ad2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8012ad4:	e9cd 6700 	strd	r6, r7, [sp]
 8012ad8:	f7ff fe32 	bl	8012740 <z_pend_curr>

	if (data != NULL) {
 8012adc:	b11c      	cbz	r4, 8012ae6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 8012ade:	4b03      	ldr	r3, [pc, #12]	; (8012aec <z_sched_wait+0x20>)
 8012ae0:	689b      	ldr	r3, [r3, #8]
 8012ae2:	695b      	ldr	r3, [r3, #20]
 8012ae4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8012ae6:	b002      	add	sp, #8
 8012ae8:	bdd0      	pop	{r4, r6, r7, pc}
 8012aea:	bf00      	nop
 8012aec:	24002fe8 	.word	0x24002fe8

08012af0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8012af0:	4809      	ldr	r0, [pc, #36]	; (8012b18 <z_data_copy+0x28>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8012af2:	4a0a      	ldr	r2, [pc, #40]	; (8012b1c <z_data_copy+0x2c>)
 8012af4:	490a      	ldr	r1, [pc, #40]	; (8012b20 <z_data_copy+0x30>)
 8012af6:	1a12      	subs	r2, r2, r0
{
 8012af8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8012afa:	f008 fdb0 	bl	801b65e <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8012afe:	4a09      	ldr	r2, [pc, #36]	; (8012b24 <z_data_copy+0x34>)
 8012b00:	4909      	ldr	r1, [pc, #36]	; (8012b28 <z_data_copy+0x38>)
 8012b02:	480a      	ldr	r0, [pc, #40]	; (8012b2c <z_data_copy+0x3c>)
 8012b04:	f008 fdab 	bl	801b65e <z_early_memcpy>
	z_early_memcpy(&__itcm_start, &__itcm_load_start,
		       (uintptr_t) &__itcm_size);
#endif
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_dtcm), okay)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
		       __dtcm_data_end - __dtcm_data_start);
 8012b08:	4809      	ldr	r0, [pc, #36]	; (8012b30 <z_data_copy+0x40>)
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 8012b0a:	4a0a      	ldr	r2, [pc, #40]	; (8012b34 <z_data_copy+0x44>)
 8012b0c:	490a      	ldr	r1, [pc, #40]	; (8012b38 <z_data_copy+0x48>)
 8012b0e:	1a12      	subs	r2, r2, r0
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8012b10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__dtcm_data_start, &__dtcm_data_load_start,
 8012b14:	f008 bda3 	b.w	801b65e <z_early_memcpy>
 8012b18:	24000000 	.word	0x24000000
 8012b1c:	24001304 	.word	0x24001304
 8012b20:	08021a44 	.word	0x08021a44
 8012b24:	00000000 	.word	0x00000000
 8012b28:	08021a44 	.word	0x08021a44
 8012b2c:	24000000 	.word	0x24000000
 8012b30:	20000000 	.word	0x20000000
 8012b34:	20000000 	.word	0x20000000
 8012b38:	08022d48 	.word	0x08022d48

08012b3c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8012b3c:	4b03      	ldr	r3, [pc, #12]	; (8012b4c <elapsed+0x10>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	b90b      	cbnz	r3, 8012b46 <elapsed+0xa>
 8012b42:	f7fd bc81 	b.w	8010448 <sys_clock_elapsed>
}
 8012b46:	2000      	movs	r0, #0
 8012b48:	4770      	bx	lr
 8012b4a:	bf00      	nop
 8012b4c:	24003020 	.word	0x24003020

08012b50 <next_timeout>:
	return list->head == list;
 8012b50:	4b0d      	ldr	r3, [pc, #52]	; (8012b88 <next_timeout+0x38>)

static int32_t next_timeout(void)
{
 8012b52:	b510      	push	{r4, lr}
 8012b54:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012b56:	429c      	cmp	r4, r3
 8012b58:	bf08      	it	eq
 8012b5a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8012b5c:	f7ff ffee 	bl	8012b3c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 8012b60:	b174      	cbz	r4, 8012b80 <next_timeout+0x30>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8012b62:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8012b66:	1a1b      	subs	r3, r3, r0
 8012b68:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 8012b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b70:	f170 0200 	sbcs.w	r2, r0, #0
 8012b74:	da04      	bge.n	8012b80 <next_timeout+0x30>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 8012b76:	2800      	cmp	r0, #0
 8012b78:	bfac      	ite	ge
 8012b7a:	4618      	movge	r0, r3
 8012b7c:	2000      	movlt	r0, #0
	}

	return ret;
}
 8012b7e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 8012b80:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
 8012b84:	e7fb      	b.n	8012b7e <next_timeout+0x2e>
 8012b86:	bf00      	nop
 8012b88:	24001018 	.word	0x24001018

08012b8c <remove_timeout>:
{
 8012b8c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8012b8e:	b170      	cbz	r0, 8012bae <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8012b90:	4b0b      	ldr	r3, [pc, #44]	; (8012bc0 <remove_timeout+0x34>)
 8012b92:	685b      	ldr	r3, [r3, #4]
 8012b94:	4298      	cmp	r0, r3
 8012b96:	d00a      	beq.n	8012bae <remove_timeout+0x22>
 8012b98:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 8012b9a:	b143      	cbz	r3, 8012bae <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8012b9c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8012ba0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8012ba4:	1912      	adds	r2, r2, r4
 8012ba6:	eb41 0105 	adc.w	r1, r1, r5
 8012baa:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8012bae:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 8012bb2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8012bb4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8012bb6:	2300      	movs	r3, #0
	node->prev = NULL;
 8012bb8:	e9c0 3300 	strd	r3, r3, [r0]
}
 8012bbc:	bd30      	pop	{r4, r5, pc}
 8012bbe:	bf00      	nop
 8012bc0:	24001018 	.word	0x24001018

08012bc4 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
 8012bc4:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
 8012bc6:	6804      	ldr	r4, [r0, #0]
 8012bc8:	b1e4      	cbz	r4, 8012c04 <timeout_rem+0x40>
	return list->head == list;
 8012bca:	4a10      	ldr	r2, [pc, #64]	; (8012c0c <timeout_rem+0x48>)
 8012bcc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012bce:	4293      	cmp	r3, r2
 8012bd0:	d015      	beq.n	8012bfe <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
 8012bd2:	2400      	movs	r4, #0
 8012bd4:	6851      	ldr	r1, [r2, #4]
 8012bd6:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 8012bd8:	b933      	cbnz	r3, 8012be8 <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
 8012bda:	f7ff ffaf 	bl	8012b3c <elapsed>
 8012bde:	4601      	mov	r1, r0
 8012be0:	1a20      	subs	r0, r4, r0
 8012be2:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
 8012be6:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
 8012be8:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
 8012bec:	18a4      	adds	r4, r4, r2
 8012bee:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
 8012bf2:	4283      	cmp	r3, r0
 8012bf4:	d0f1      	beq.n	8012bda <timeout_rem+0x16>
 8012bf6:	428b      	cmp	r3, r1
 8012bf8:	d0ef      	beq.n	8012bda <timeout_rem+0x16>
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	e7ec      	b.n	8012bd8 <timeout_rem+0x14>
 8012bfe:	2400      	movs	r4, #0
 8012c00:	4625      	mov	r5, r4
 8012c02:	e7ea      	b.n	8012bda <timeout_rem+0x16>
		return 0;
 8012c04:	4620      	mov	r0, r4
 8012c06:	4621      	mov	r1, r4
 8012c08:	e7ed      	b.n	8012be6 <timeout_rem+0x22>
 8012c0a:	bf00      	nop
 8012c0c:	24001018 	.word	0x24001018

08012c10 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8012c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c14:	bf08      	it	eq
 8012c16:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 8012c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c1c:	4604      	mov	r4, r0
 8012c1e:	461f      	mov	r7, r3
 8012c20:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8012c22:	d062      	beq.n	8012cea <z_add_timeout+0xda>
	to->fn = fn;
 8012c24:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8012c26:	f04f 0310 	mov.w	r3, #16
 8012c2a:	f3ef 8611 	mrs	r6, BASEPRI
 8012c2e:	f383 8812 	msr	BASEPRI_MAX, r3
 8012c32:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8012c36:	f06f 0201 	mvn.w	r2, #1
 8012c3a:	f04f 3cff 	mov.w	ip, #4294967295
 8012c3e:	1b53      	subs	r3, r2, r5
 8012c40:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	db1b      	blt.n	8012c80 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8012c48:	4b28      	ldr	r3, [pc, #160]	; (8012cec <z_add_timeout+0xdc>)
 8012c4a:	e9d3 1300 	ldrd	r1, r3, [r3]
 8012c4e:	1a52      	subs	r2, r2, r1
 8012c50:	eb6c 0303 	sbc.w	r3, ip, r3
 8012c54:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
 8012c56:	eb63 0307 	sbc.w	r3, r3, r7
 8012c5a:	2d01      	cmp	r5, #1
 8012c5c:	f173 0200 	sbcs.w	r2, r3, #0
 8012c60:	bfbc      	itt	lt
 8012c62:	2501      	movlt	r5, #1
 8012c64:	2300      	movlt	r3, #0
 8012c66:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 8012c6a:	4821      	ldr	r0, [pc, #132]	; (8012cf0 <z_add_timeout+0xe0>)
	sys_dnode_t *const tail = list->tail;
 8012c6c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012c70:	4283      	cmp	r3, r0
 8012c72:	d118      	bne.n	8012ca6 <z_add_timeout+0x96>
	node->prev = tail;
 8012c74:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8012c78:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8012c7c:	6044      	str	r4, [r0, #4]
}
 8012c7e:	e026      	b.n	8012cce <z_add_timeout+0xbe>
			to->dticks = timeout.ticks + 1 + elapsed();
 8012c80:	f7ff ff5c 	bl	8012b3c <elapsed>
 8012c84:	3501      	adds	r5, #1
 8012c86:	f147 0700 	adc.w	r7, r7, #0
 8012c8a:	182d      	adds	r5, r5, r0
 8012c8c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 8012c90:	e9c4 5704 	strd	r5, r7, [r4, #16]
 8012c94:	e7e9      	b.n	8012c6a <z_add_timeout+0x5a>
			to->dticks -= t->dticks;
 8012c96:	1a52      	subs	r2, r2, r1
 8012c98:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8012c9c:	459c      	cmp	ip, r3
 8012c9e:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8012ca2:	d0e7      	beq.n	8012c74 <z_add_timeout+0x64>
 8012ca4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d0e4      	beq.n	8012c74 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 8012caa:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 8012cae:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 8012cb2:	428a      	cmp	r2, r1
 8012cb4:	eb75 0e07 	sbcs.w	lr, r5, r7
 8012cb8:	daed      	bge.n	8012c96 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 8012cba:	1a8a      	subs	r2, r1, r2
 8012cbc:	eb67 0505 	sbc.w	r5, r7, r5
 8012cc0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8012cc4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8012cc6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8012cca:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8012ccc:	605c      	str	r4, [r3, #4]
	return list->head == list;
 8012cce:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012cd0:	4283      	cmp	r3, r0
 8012cd2:	d006      	beq.n	8012ce2 <z_add_timeout+0xd2>
		if (to == first()) {
 8012cd4:	429c      	cmp	r4, r3
 8012cd6:	d104      	bne.n	8012ce2 <z_add_timeout+0xd2>
			sys_clock_set_timeout(next_timeout(), false);
 8012cd8:	f7ff ff3a 	bl	8012b50 <next_timeout>
 8012cdc:	2100      	movs	r1, #0
 8012cde:	f7fd fb43 	bl	8010368 <sys_clock_set_timeout>
	__asm__ volatile(
 8012ce2:	f386 8811 	msr	BASEPRI, r6
 8012ce6:	f3bf 8f6f 	isb	sy
}
 8012cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cec:	24001c58 	.word	0x24001c58
 8012cf0:	24001018 	.word	0x24001018

08012cf4 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
 8012cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
 8012cf8:	f04f 0310 	mov.w	r3, #16
 8012cfc:	f3ef 8811 	mrs	r8, BASEPRI
 8012d00:	f383 8812 	msr	BASEPRI_MAX, r3
 8012d04:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8012d08:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8012dbc <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8012d0c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8012dc0 <sys_clock_announce+0xcc>
 8012d10:	4d2c      	ldr	r5, [pc, #176]	; (8012dc4 <sys_clock_announce+0xd0>)
 8012d12:	f8c9 0000 	str.w	r0, [r9]
 8012d16:	f8da 0000 	ldr.w	r0, [sl]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012d1a:	4550      	cmp	r0, sl
 8012d1c:	d034      	beq.n	8012d88 <sys_clock_announce+0x94>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
 8012d1e:	2600      	movs	r6, #0
 8012d20:	2700      	movs	r7, #0
	     (t != NULL) && (t->dticks <= announce_remaining);
 8012d22:	f8d9 2000 	ldr.w	r2, [r9]
		curr_tick += dt;
 8012d26:	e9d5 1c00 	ldrd	r1, ip, [r5]
	for (t = first();
 8012d2a:	b368      	cbz	r0, 8012d88 <sys_clock_announce+0x94>
	     (t != NULL) && (t->dticks <= announce_remaining);
 8012d2c:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 8012d30:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 8012d34:	42a2      	cmp	r2, r4
 8012d36:	eb7e 0b03 	sbcs.w	fp, lr, r3
 8012d3a:	da05      	bge.n	8012d48 <sys_clock_announce+0x54>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
 8012d3c:	1aa4      	subs	r4, r4, r2
 8012d3e:	eb63 030e 	sbc.w	r3, r3, lr
 8012d42:	e9c0 4304 	strd	r4, r3, [r0, #16]
 8012d46:	e01f      	b.n	8012d88 <sys_clock_announce+0x94>
		curr_tick += dt;
 8012d48:	1861      	adds	r1, r4, r1
 8012d4a:	eb4c 73e4 	adc.w	r3, ip, r4, asr #31
		t->dticks = 0;
 8012d4e:	e9c0 6704 	strd	r6, r7, [r0, #16]
		curr_tick += dt;
 8012d52:	e9c5 1300 	strd	r1, r3, [r5]
		remove_timeout(t);
 8012d56:	f7ff ff19 	bl	8012b8c <remove_timeout>
	__asm__ volatile(
 8012d5a:	f388 8811 	msr	BASEPRI, r8
 8012d5e:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8012d62:	6883      	ldr	r3, [r0, #8]
 8012d64:	4798      	blx	r3
	__asm__ volatile(
 8012d66:	f04f 0310 	mov.w	r3, #16
 8012d6a:	f3ef 8811 	mrs	r8, BASEPRI
 8012d6e:	f383 8812 	msr	BASEPRI_MAX, r3
 8012d72:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 8012d76:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
 8012d7a:	f8da 0000 	ldr.w	r0, [sl]
 8012d7e:	1b1b      	subs	r3, r3, r4
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012d80:	4550      	cmp	r0, sl
 8012d82:	f8c9 3000 	str.w	r3, [r9]
 8012d86:	d1cc      	bne.n	8012d22 <sys_clock_announce+0x2e>
	}

	curr_tick += announce_remaining;
 8012d88:	f8d9 1000 	ldr.w	r1, [r9]
	announce_remaining = 0;
 8012d8c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8012d8e:	e9d5 3200 	ldrd	r3, r2, [r5]
	announce_remaining = 0;
 8012d92:	f8c9 4000 	str.w	r4, [r9]
	curr_tick += announce_remaining;
 8012d96:	185b      	adds	r3, r3, r1
 8012d98:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8012d9c:	e9c5 3200 	strd	r3, r2, [r5]

	sys_clock_set_timeout(next_timeout(), false);
 8012da0:	f7ff fed6 	bl	8012b50 <next_timeout>
 8012da4:	4621      	mov	r1, r4
 8012da6:	f7fd fadf 	bl	8010368 <sys_clock_set_timeout>
	__asm__ volatile(
 8012daa:	f388 8811 	msr	BASEPRI, r8
 8012dae:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
 8012db2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
 8012db6:	f7ff bc0f 	b.w	80125d8 <z_time_slice>
 8012dba:	bf00      	nop
 8012dbc:	24001018 	.word	0x24001018
 8012dc0:	24003020 	.word	0x24003020
 8012dc4:	24001c58 	.word	0x24001c58

08012dc8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8012dc8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8012dca:	f04f 0310 	mov.w	r3, #16
 8012dce:	f3ef 8411 	mrs	r4, BASEPRI
 8012dd2:	f383 8812 	msr	BASEPRI_MAX, r3
 8012dd6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 8012dda:	f7ff feaf 	bl	8012b3c <elapsed>
 8012dde:	4b06      	ldr	r3, [pc, #24]	; (8012df8 <sys_clock_tick_get+0x30>)
 8012de0:	4601      	mov	r1, r0
 8012de2:	e9d3 0300 	ldrd	r0, r3, [r3]
 8012de6:	1808      	adds	r0, r1, r0
 8012de8:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
 8012dec:	f384 8811 	msr	BASEPRI, r4
 8012df0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8012df4:	bd10      	pop	{r4, pc}
 8012df6:	bf00      	nop
 8012df8:	24001c58 	.word	0x24001c58

08012dfc <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8012dfc:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8012dfe:	4604      	mov	r4, r0
 8012e00:	b178      	cbz	r0, 8012e22 <z_impl_k_busy_wait+0x26>
 8012e02:	f7fd fb3f 	bl	8010484 <sys_clock_cycle_get_32>
 8012e06:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8012e08:	4806      	ldr	r0, [pc, #24]	; (8012e24 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	4a06      	ldr	r2, [pc, #24]	; (8012e28 <z_impl_k_busy_wait+0x2c>)
 8012e0e:	fba4 0100 	umull	r0, r1, r4, r0
 8012e12:	f7ed fd0f 	bl	8000834 <__aeabi_uldivmod>
 8012e16:	4604      	mov	r4, r0
 8012e18:	f7fd fb34 	bl	8010484 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8012e1c:	1b43      	subs	r3, r0, r5
 8012e1e:	42a3      	cmp	r3, r4
 8012e20:	d3fa      	bcc.n	8012e18 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8012e22:	bd38      	pop	{r3, r4, r5, pc}
 8012e24:	05b8d800 	.word	0x05b8d800
 8012e28:	000f4240 	.word	0x000f4240

08012e2c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 8012e2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e30:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 8012e32:	4b29      	ldr	r3, [pc, #164]	; (8012ed8 <z_impl_k_poll+0xac>)
{
 8012e34:	4616      	mov	r6, r2
 8012e36:	4680      	mov	r8, r0
	struct z_poller *poller = &_current->poller;
 8012e38:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
 8012e40:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 8012e44:	ea52 0305 	orrs.w	r3, r2, r5
 8012e48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012e4c:	bf0c      	ite	eq
 8012e4e:	2301      	moveq	r3, #1
 8012e50:	2300      	movne	r3, #0
 8012e52:	f009 f852 	bl	801befa <register_events>
 8012e56:	4681      	mov	r9, r0
	__asm__ volatile(
 8012e58:	f04f 0310 	mov.w	r3, #16
 8012e5c:	f3ef 8a11 	mrs	sl, BASEPRI
 8012e60:	f383 8812 	msr	BASEPRI_MAX, r3
 8012e64:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 8012e68:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
 8012e6c:	b964      	cbnz	r4, 8012e88 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
 8012e6e:	4601      	mov	r1, r0
 8012e70:	4652      	mov	r2, sl
 8012e72:	4640      	mov	r0, r8
 8012e74:	f009 f912 	bl	801c09c <clear_event_registrations>
	__asm__ volatile(
 8012e78:	f38a 8811 	msr	BASEPRI, sl
 8012e7c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 8012e80:	4620      	mov	r0, r4
 8012e82:	b002      	add	sp, #8
 8012e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8012e8e:	ea56 0305 	orrs.w	r3, r6, r5
 8012e92:	d106      	bne.n	8012ea2 <z_impl_k_poll+0x76>
 8012e94:	f38a 8811 	msr	BASEPRI, sl
 8012e98:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8012e9c:	f06f 040a 	mvn.w	r4, #10
 8012ea0:	e7ee      	b.n	8012e80 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8012ea2:	4a0e      	ldr	r2, [pc, #56]	; (8012edc <z_impl_k_poll+0xb0>)
 8012ea4:	4651      	mov	r1, sl
 8012ea6:	480e      	ldr	r0, [pc, #56]	; (8012ee0 <z_impl_k_poll+0xb4>)
 8012ea8:	e9cd 6500 	strd	r6, r5, [sp]
 8012eac:	f7ff fc48 	bl	8012740 <z_pend_curr>
 8012eb0:	4604      	mov	r4, r0
	__asm__ volatile(
 8012eb2:	f04f 0310 	mov.w	r3, #16
 8012eb6:	f3ef 8511 	mrs	r5, BASEPRI
 8012eba:	f383 8812 	msr	BASEPRI_MAX, r3
 8012ebe:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
 8012ec2:	462a      	mov	r2, r5
 8012ec4:	4649      	mov	r1, r9
 8012ec6:	4640      	mov	r0, r8
 8012ec8:	f009 f8e8 	bl	801c09c <clear_event_registrations>
	__asm__ volatile(
 8012ecc:	f385 8811 	msr	BASEPRI, r5
 8012ed0:	f3bf 8f6f 	isb	sy
	return swap_rc;
 8012ed4:	e7d4      	b.n	8012e80 <z_impl_k_poll+0x54>
 8012ed6:	bf00      	nop
 8012ed8:	24002fe8 	.word	0x24002fe8
 8012edc:	24001020 	.word	0x24001020
 8012ee0:	2400331c 	.word	0x2400331c

08012ee4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 8012ee4:	b538      	push	{r3, r4, r5, lr}
 8012ee6:	4603      	mov	r3, r0
	__asm__ volatile(
 8012ee8:	f04f 0210 	mov.w	r2, #16
 8012eec:	f3ef 8511 	mrs	r5, BASEPRI
 8012ef0:	f382 8812 	msr	BASEPRI_MAX, r2
 8012ef4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 8012ef8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 8012efa:	2101      	movs	r1, #1
 8012efc:	6081      	str	r1, [r0, #8]
	return list->head == list;
 8012efe:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8012f00:	4283      	cmp	r3, r0
 8012f02:	d106      	bne.n	8012f12 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
 8012f04:	f385 8811 	msr	BASEPRI, r5
 8012f08:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
 8012f0c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
 8012f0e:	4620      	mov	r0, r4
 8012f10:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
 8012f12:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8012f16:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8012f18:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8012f1a:	2300      	movs	r3, #0
	node->prev = NULL;
 8012f1c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8012f20:	f009 f862 	bl	801bfe8 <signal_poll_event>
	z_reschedule(&lock, key);
 8012f24:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8012f26:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 8012f28:	4801      	ldr	r0, [pc, #4]	; (8012f30 <z_impl_k_poll_signal_raise+0x4c>)
 8012f2a:	f7ff fad3 	bl	80124d4 <z_reschedule>
	return rc;
 8012f2e:	e7ee      	b.n	8012f0e <z_impl_k_poll_signal_raise+0x2a>
 8012f30:	2400331c 	.word	0x2400331c

08012f34 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
 8012f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f36:	4606      	mov	r6, r0
 8012f38:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
 8012f3a:	f008 fc44 	bl	801b7c6 <k_is_in_isr>
 8012f3e:	b980      	cbnz	r0, 8012f62 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
 8012f40:	4b0b      	ldr	r3, [pc, #44]	; (8012f70 <z_thread_aligned_alloc+0x3c>)
 8012f42:	689b      	ldr	r3, [r3, #8]
 8012f44:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
 8012f48:	b17c      	cbz	r4, 8012f6a <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 8012f4a:	1d2a      	adds	r2, r5, #4
 8012f4c:	d209      	bcs.n	8012f62 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 8012f4e:	2000      	movs	r0, #0
 8012f50:	2100      	movs	r1, #0
 8012f52:	e9cd 0100 	strd	r0, r1, [sp]
 8012f56:	f046 0104 	orr.w	r1, r6, #4
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f008 fb89 	bl	801b672 <k_heap_aligned_alloc>
	if (mem == NULL) {
 8012f60:	b908      	cbnz	r0, 8012f66 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
 8012f62:	2400      	movs	r4, #0
	}

	return ret;
 8012f64:	e001      	b.n	8012f6a <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
 8012f66:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
 8012f68:	1d04      	adds	r4, r0, #4
}
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	b002      	add	sp, #8
 8012f6e:	bd70      	pop	{r4, r5, r6, pc}
 8012f70:	24002fe8 	.word	0x24002fe8

08012f74 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8012f74:	4801      	ldr	r0, [pc, #4]	; (8012f7c <boot_banner+0x8>)
 8012f76:	f000 b882 	b.w	801307e <printk>
 8012f7a:	bf00      	nop
 8012f7c:	08021a0b 	.word	0x08021a0b

08012f80 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
 8012f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
 8012f82:	4b09      	ldr	r3, [pc, #36]	; (8012fa8 <k_sys_work_q_init+0x28>)
 8012f84:	2400      	movs	r4, #0
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 8012f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012f8a:	4908      	ldr	r1, [pc, #32]	; (8012fac <k_sys_work_q_init+0x2c>)
	struct k_work_queue_config cfg = {
 8012f8c:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
 8012f8e:	ab02      	add	r3, sp, #8
 8012f90:	4807      	ldr	r0, [pc, #28]	; (8012fb0 <k_sys_work_q_init+0x30>)
 8012f92:	9300      	str	r3, [sp, #0]
 8012f94:	f04f 33ff 	mov.w	r3, #4294967295
	struct k_work_queue_config cfg = {
 8012f98:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 8012f9c:	f7ff f9ac 	bl	80122f8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	b004      	add	sp, #16
 8012fa4:	bd10      	pop	{r4, pc}
 8012fa6:	bf00      	nop
 8012fa8:	08021a3a 	.word	0x08021a3a
 8012fac:	24005f80 	.word	0x24005f80
 8012fb0:	24001c60 	.word	0x24001c60

08012fb4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8012fb4:	4770      	bx	lr

08012fb6 <ipv4_addr_add_handler>:
}
 8012fb6:	4770      	bx	lr

08012fb8 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
 8012fb8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012fbc:	b2db      	uxtb	r3, r3
 8012fbe:	2b09      	cmp	r3, #9
 8012fc0:	d802      	bhi.n	8012fc8 <char2hex+0x10>
		*x = c - '0';
 8012fc2:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
 8012fc4:	2000      	movs	r0, #0
 8012fc6:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
 8012fc8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012fcc:	2b05      	cmp	r3, #5
 8012fce:	d802      	bhi.n	8012fd6 <char2hex+0x1e>
		*x = c - 'a' + 10;
 8012fd0:	3857      	subs	r0, #87	; 0x57
 8012fd2:	7008      	strb	r0, [r1, #0]
 8012fd4:	e7f6      	b.n	8012fc4 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
 8012fd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012fda:	2b05      	cmp	r3, #5
 8012fdc:	d801      	bhi.n	8012fe2 <char2hex+0x2a>
		*x = c - 'A' + 10;
 8012fde:	3837      	subs	r0, #55	; 0x37
 8012fe0:	e7f7      	b.n	8012fd2 <char2hex+0x1a>
		return -EINVAL;
 8012fe2:	f06f 0015 	mvn.w	r0, #21
}
 8012fe6:	4770      	bx	lr

08012fe8 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
 8012fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012fea:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
 8012fec:	f001 0001 	and.w	r0, r1, #1
 8012ff0:	084e      	lsrs	r6, r1, #1
 8012ff2:	eb00 0551 	add.w	r5, r0, r1, lsr #1
 8012ff6:	429d      	cmp	r5, r3
 8012ff8:	d903      	bls.n	8013002 <hex2bin+0x1a>
		return 0;
 8012ffa:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
 8012ffc:	4628      	mov	r0, r5
 8012ffe:	b003      	add	sp, #12
 8013000:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
 8013002:	b158      	cbz	r0, 801301c <hex2bin+0x34>
		if (char2hex(hex[0], &dec) < 0) {
 8013004:	f10d 0107 	add.w	r1, sp, #7
 8013008:	7820      	ldrb	r0, [r4, #0]
 801300a:	f7ff ffd5 	bl	8012fb8 <char2hex>
 801300e:	2800      	cmp	r0, #0
 8013010:	dbf3      	blt.n	8012ffa <hex2bin+0x12>
		buf[0] = dec;
 8013012:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
 8013016:	3401      	adds	r4, #1
		buf[0] = dec;
 8013018:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
 801301c:	3401      	adds	r4, #1
 801301e:	4416      	add	r6, r2
 8013020:	42b2      	cmp	r2, r6
 8013022:	d0eb      	beq.n	8012ffc <hex2bin+0x14>
		if (char2hex(hex[2 * i], &dec) < 0) {
 8013024:	f10d 0107 	add.w	r1, sp, #7
 8013028:	f814 0c01 	ldrb.w	r0, [r4, #-1]
 801302c:	f7ff ffc4 	bl	8012fb8 <char2hex>
 8013030:	2800      	cmp	r0, #0
 8013032:	dbe2      	blt.n	8012ffa <hex2bin+0x12>
		buf[i] = dec << 4;
 8013034:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013038:	011b      	lsls	r3, r3, #4
 801303a:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
 801303c:	f814 0b02 	ldrb.w	r0, [r4], #2
 8013040:	f7ff ffba 	bl	8012fb8 <char2hex>
 8013044:	2800      	cmp	r0, #0
 8013046:	dbd8      	blt.n	8012ffa <hex2bin+0x12>
		buf[i] += dec;
 8013048:	7813      	ldrb	r3, [r2, #0]
 801304a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801304e:	440b      	add	r3, r1
 8013050:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
 8013054:	e7e4      	b.n	8013020 <hex2bin+0x38>

08013056 <arch_printk_char_out>:
}
 8013056:	2000      	movs	r0, #0
 8013058:	4770      	bx	lr

0801305a <str_out>:
{
 801305a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 801305c:	688a      	ldr	r2, [r1, #8]
 801305e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 8013060:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8013062:	b114      	cbz	r4, 801306a <str_out+0x10>
 8013064:	684b      	ldr	r3, [r1, #4]
 8013066:	4293      	cmp	r3, r2
 8013068:	dc01      	bgt.n	801306e <str_out+0x14>
		ctx->count++;
 801306a:	608d      	str	r5, [r1, #8]
}
 801306c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 801306e:	3b01      	subs	r3, #1
		ctx->str[ctx->count++] = '\0';
 8013070:	608d      	str	r5, [r1, #8]
	if (ctx->count == ctx->max - 1) {
 8013072:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 8013074:	bf0a      	itet	eq
 8013076:	2200      	moveq	r2, #0
		ctx->str[ctx->count++] = c;
 8013078:	54a0      	strbne	r0, [r4, r2]
		ctx->str[ctx->count++] = '\0';
 801307a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 801307c:	e7f6      	b.n	801306c <str_out+0x12>

0801307e <printk>:
{
 801307e:	b40f      	push	{r0, r1, r2, r3}
 8013080:	b507      	push	{r0, r1, r2, lr}
 8013082:	a904      	add	r1, sp, #16
 8013084:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8013088:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 801308a:	f7ed fe2d 	bl	8000ce8 <vprintk>
}
 801308e:	b003      	add	sp, #12
 8013090:	f85d eb04 	ldr.w	lr, [sp], #4
 8013094:	b004      	add	sp, #16
 8013096:	4770      	bx	lr

08013098 <snprintk>:
{
 8013098:	b40c      	push	{r2, r3}
 801309a:	b507      	push	{r0, r1, r2, lr}
 801309c:	ab04      	add	r3, sp, #16
 801309e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 80130a2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 80130a4:	f7ed fe2e 	bl	8000d04 <vsnprintk>
}
 80130a8:	b003      	add	sp, #12
 80130aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80130ae:	b002      	add	sp, #8
 80130b0:	4770      	bx	lr

080130b2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80130b2:	4604      	mov	r4, r0
 80130b4:	4608      	mov	r0, r1
 80130b6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 80130b8:	461a      	mov	r2, r3
{
 80130ba:	b508      	push	{r3, lr}
	entry(p1, p2, p3);
 80130bc:	47a0      	blx	r4
	return z_impl_z_current_get();
 80130be:	f7ff fc9b 	bl	80129f8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 80130c2:	f7f0 ff07 	bl	8003ed4 <z_impl_k_thread_abort>

080130c6 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 80130c6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 80130c8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 80130cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 80130d0:	bf2c      	ite	cs
 80130d2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 80130d6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 80130da:	4770      	bx	lr

080130dc <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 80130dc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 80130e0:	6880      	ldr	r0, [r0, #8]
 80130e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 80130e6:	bf2c      	ite	cs
 80130e8:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 80130ec:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 80130f0:	4770      	bx	lr

080130f2 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80130f2:	2201      	movs	r2, #1
{
 80130f4:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80130f6:	f7ff ffe6 	bl	80130c6 <chunk_field>
}
 80130fa:	40d0      	lsrs	r0, r2
 80130fc:	bd08      	pop	{r3, pc}

080130fe <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 80130fe:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8013100:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8013104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013108:	d308      	bcc.n	801311c <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 801310a:	684b      	ldr	r3, [r1, #4]
		if (used) {
 801310c:	b11a      	cbz	r2, 8013116 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 801310e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8013112:	604b      	str	r3, [r1, #4]
 8013114:	4770      	bx	lr
 8013116:	f023 0301 	bic.w	r3, r3, #1
 801311a:	e7fa      	b.n	8013112 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 801311c:	884b      	ldrh	r3, [r1, #2]
		if (used) {
 801311e:	b11a      	cbz	r2, 8013128 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8013120:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8013124:	804b      	strh	r3, [r1, #2]
		}
	}
}
 8013126:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8013128:	f023 0301 	bic.w	r3, r3, #1
 801312c:	e7fa      	b.n	8013124 <set_chunk_used+0x26>

0801312e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 801312e:	0053      	lsls	r3, r2, #1
 8013130:	2201      	movs	r2, #1
 8013132:	f7ff bfd3 	b.w	80130dc <chunk_set>

08013136 <mem_to_chunkid>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 8013136:	6883      	ldr	r3, [r0, #8]
 8013138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801313c:	bf2c      	ite	cs
 801313e:	2308      	movcs	r3, #8
 8013140:	2304      	movcc	r3, #4
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8013142:	1ac9      	subs	r1, r1, r3
 8013144:	1a08      	subs	r0, r1, r0
}
 8013146:	08c0      	lsrs	r0, r0, #3
 8013148:	4770      	bx	lr

0801314a <bucket_idx.isra.0>:
 801314a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 801314e:	f101 0101 	add.w	r1, r1, #1
	return big_heap(h) ? 8 : 4;
 8013152:	bf2c      	ite	cs
 8013154:	2008      	movcs	r0, #8
 8013156:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8013158:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 801315a:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
 801315e:	fab0 f080 	clz	r0, r0
}
 8013162:	f1c0 001f 	rsb	r0, r0, #31
 8013166:	4770      	bx	lr

08013168 <free_list_remove_bidx>:
{
 8013168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801316c:	460e      	mov	r6, r1
 801316e:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
 8013170:	2203      	movs	r2, #3
 8013172:	4604      	mov	r4, r0
 8013174:	f7ff ffa7 	bl	80130c6 <chunk_field>
	if (next_free_chunk(h, c) == c) {
 8013178:	4286      	cmp	r6, r0
 801317a:	4605      	mov	r5, r0
 801317c:	f107 0804 	add.w	r8, r7, #4
 8013180:	d10b      	bne.n	801319a <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~BIT(bidx);
 8013182:	2301      	movs	r3, #1
 8013184:	fa03 f707 	lsl.w	r7, r3, r7
 8013188:	68e3      	ldr	r3, [r4, #12]
 801318a:	ea23 0307 	bic.w	r3, r3, r7
 801318e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
 8013190:	2300      	movs	r3, #0
 8013192:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
 8013196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
 801319a:	4631      	mov	r1, r6
 801319c:	2202      	movs	r2, #2
 801319e:	4620      	mov	r0, r4
 80131a0:	f7ff ff91 	bl	80130c6 <chunk_field>
 80131a4:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
 80131a6:	462b      	mov	r3, r5
 80131a8:	4601      	mov	r1, r0
 80131aa:	2203      	movs	r2, #3
 80131ac:	4620      	mov	r0, r4
		b->next = second;
 80131ae:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
 80131b2:	f7ff ff93 	bl	80130dc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 80131b6:	4633      	mov	r3, r6
 80131b8:	4629      	mov	r1, r5
 80131ba:	4620      	mov	r0, r4
 80131bc:	2202      	movs	r2, #2
}
 80131be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131c2:	f7ff bf8b 	b.w	80130dc <chunk_set>

080131c6 <free_list_remove>:
{
 80131c6:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
 80131c8:	6886      	ldr	r6, [r0, #8]
 80131ca:	460d      	mov	r5, r1
 80131cc:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 80131ce:	f7ff ff90 	bl	80130f2 <chunk_size>
 80131d2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80131d6:	4601      	mov	r1, r0
 80131d8:	d301      	bcc.n	80131de <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
 80131da:	2801      	cmp	r0, #1
 80131dc:	d009      	beq.n	80131f2 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
 80131de:	4630      	mov	r0, r6
 80131e0:	f7ff ffb3 	bl	801314a <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
 80131e4:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
 80131e6:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
 80131e8:	4620      	mov	r0, r4
}
 80131ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
 80131ee:	f7ff bfbb 	b.w	8013168 <free_list_remove_bidx>
}
 80131f2:	bd70      	pop	{r4, r5, r6, pc}

080131f4 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
 80131f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131f8:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
 80131fa:	6880      	ldr	r0, [r0, #8]
{
 80131fc:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
 80131fe:	f7ff ffa4 	bl	801314a <bucket_idx.isra.0>
 8013202:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
 8013206:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 8013208:	f8da 9010 	ldr.w	r9, [sl, #16]
 801320c:	f1b9 0f00 	cmp.w	r9, #0
 8013210:	d01b      	beq.n	801324a <alloc_chunk+0x56>
 8013212:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
 8013214:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
 8013218:	4628      	mov	r0, r5
 801321a:	4621      	mov	r1, r4
 801321c:	f7ff ff69 	bl	80130f2 <chunk_size>
 8013220:	4540      	cmp	r0, r8
 8013222:	d307      	bcc.n	8013234 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
 8013224:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
 8013226:	4621      	mov	r1, r4
 8013228:	4628      	mov	r0, r5
 801322a:	f7ff ff9d 	bl	8013168 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 801322e:	4620      	mov	r0, r4
 8013230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
 8013234:	2203      	movs	r2, #3
 8013236:	4621      	mov	r1, r4
 8013238:	4628      	mov	r0, r5
 801323a:	f7ff ff44 	bl	80130c6 <chunk_field>
		} while (--i && b->next != first);
 801323e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
 8013240:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
 8013244:	d001      	beq.n	801324a <alloc_chunk+0x56>
 8013246:	4581      	cmp	r9, r0
 8013248:	d1e4      	bne.n	8013214 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
 801324a:	3601      	adds	r6, #1
 801324c:	f04f 34ff 	mov.w	r4, #4294967295
 8013250:	68e9      	ldr	r1, [r5, #12]
 8013252:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
 8013254:	400c      	ands	r4, r1
 8013256:	d0ea      	beq.n	801322e <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
 8013258:	fa94 f2a4 	rbit	r2, r4
 801325c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 8013260:	1d13      	adds	r3, r2, #4
 8013262:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8013266:	e7de      	b.n	8013226 <alloc_chunk+0x32>

08013268 <split_chunks>:
{
 8013268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801326c:	4614      	mov	r4, r2
 801326e:	460e      	mov	r6, r1
 8013270:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
 8013272:	f7ff ff3e 	bl	80130f2 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
 8013276:	1b37      	subs	r7, r6, r4
	chunksz_t lsz = rc - lc;
 8013278:	eba4 0806 	sub.w	r8, r4, r6
	set_chunk_size(h, lc, lsz);
 801327c:	4631      	mov	r1, r6
	chunksz_t rsz = sz0 - lsz;
 801327e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
 8013280:	4642      	mov	r2, r8
 8013282:	4628      	mov	r0, r5
 8013284:	f7ff ff53 	bl	801312e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
 8013288:	463a      	mov	r2, r7
 801328a:	4621      	mov	r1, r4
 801328c:	4628      	mov	r0, r5
 801328e:	f7ff ff4e 	bl	801312e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 8013292:	4643      	mov	r3, r8
 8013294:	2200      	movs	r2, #0
 8013296:	4621      	mov	r1, r4
 8013298:	4628      	mov	r0, r5
 801329a:	f7ff ff1f 	bl	80130dc <chunk_set>
	return c + chunk_size(h, c);
 801329e:	4621      	mov	r1, r4
 80132a0:	4628      	mov	r0, r5
 80132a2:	f7ff ff26 	bl	80130f2 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 80132a6:	463b      	mov	r3, r7
 80132a8:	1821      	adds	r1, r4, r0
 80132aa:	2200      	movs	r2, #0
 80132ac:	4628      	mov	r0, r5
}
 80132ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132b2:	f7ff bf13 	b.w	80130dc <chunk_set>

080132b6 <merge_chunks>:
{
 80132b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132ba:	4616      	mov	r6, r2
 80132bc:	4604      	mov	r4, r0
 80132be:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 80132c0:	f7ff ff17 	bl	80130f2 <chunk_size>
 80132c4:	4605      	mov	r5, r0
 80132c6:	4631      	mov	r1, r6
 80132c8:	4620      	mov	r0, r4
 80132ca:	f7ff ff12 	bl	80130f2 <chunk_size>
 80132ce:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
 80132d0:	4639      	mov	r1, r7
 80132d2:	4620      	mov	r0, r4
 80132d4:	462a      	mov	r2, r5
 80132d6:	f7ff ff2a 	bl	801312e <set_chunk_size>
	return c + chunk_size(h, c);
 80132da:	4631      	mov	r1, r6
 80132dc:	4620      	mov	r0, r4
 80132de:	f7ff ff08 	bl	80130f2 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 80132e2:	462b      	mov	r3, r5
 80132e4:	1831      	adds	r1, r6, r0
 80132e6:	2200      	movs	r2, #0
 80132e8:	4620      	mov	r0, r4
}
 80132ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132ee:	f7ff bef5 	b.w	80130dc <chunk_set>

080132f2 <free_list_add>:
{
 80132f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
 80132f6:	6886      	ldr	r6, [r0, #8]
 80132f8:	460d      	mov	r5, r1
 80132fa:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
 80132fc:	f7ff fef9 	bl	80130f2 <chunk_size>
 8013300:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8013304:	4601      	mov	r1, r0
 8013306:	d301      	bcc.n	801330c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 8013308:	2801      	cmp	r0, #1
 801330a:	d033      	beq.n	8013374 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
 801330c:	4630      	mov	r0, r6
 801330e:	f7ff ff1c 	bl	801314a <bucket_idx.isra.0>
	if (b->next == 0U) {
 8013312:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8013316:	6916      	ldr	r6, [r2, #16]
 8013318:	b99e      	cbnz	r6, 8013342 <free_list_add+0x50>
		h->avail_buckets |= BIT(bidx);
 801331a:	2301      	movs	r3, #1
	chunk_set(h, c, FREE_PREV, prev);
 801331c:	4629      	mov	r1, r5
 801331e:	fa03 f000 	lsl.w	r0, r3, r0
 8013322:	68e3      	ldr	r3, [r4, #12]
 8013324:	4303      	orrs	r3, r0
 8013326:	4620      	mov	r0, r4
 8013328:	60e3      	str	r3, [r4, #12]
 801332a:	462b      	mov	r3, r5
		b->next = c;
 801332c:	6115      	str	r5, [r2, #16]
 801332e:	2202      	movs	r2, #2
 8013330:	f7ff fed4 	bl	80130dc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8013334:	2203      	movs	r2, #3
 8013336:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 8013338:	4620      	mov	r0, r4
}
 801333a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801333e:	f7ff becd 	b.w	80130dc <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 8013342:	2202      	movs	r2, #2
 8013344:	4631      	mov	r1, r6
 8013346:	4620      	mov	r0, r4
 8013348:	f7ff febd 	bl	80130c6 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 801334c:	4629      	mov	r1, r5
 801334e:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 8013350:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 8013352:	4620      	mov	r0, r4
 8013354:	f7ff fec2 	bl	80130dc <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8013358:	2203      	movs	r2, #3
 801335a:	4633      	mov	r3, r6
 801335c:	4629      	mov	r1, r5
 801335e:	4620      	mov	r0, r4
 8013360:	f7ff febc 	bl	80130dc <chunk_set>
 8013364:	4639      	mov	r1, r7
 8013366:	462b      	mov	r3, r5
 8013368:	4620      	mov	r0, r4
 801336a:	f7ff feb7 	bl	80130dc <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 801336e:	2202      	movs	r2, #2
 8013370:	4631      	mov	r1, r6
 8013372:	e7e1      	b.n	8013338 <free_list_add+0x46>
 8013374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013378 <free_chunk>:
{
 8013378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801337a:	460c      	mov	r4, r1
 801337c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
 801337e:	f7ff feb8 	bl	80130f2 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8013382:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
 8013384:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 8013386:	4628      	mov	r0, r5
 8013388:	4631      	mov	r1, r6
 801338a:	f7ff fe9c 	bl	80130c6 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
 801338e:	07c3      	lsls	r3, r0, #31
 8013390:	d40c      	bmi.n	80133ac <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
 8013392:	4631      	mov	r1, r6
 8013394:	4628      	mov	r0, r5
 8013396:	f7ff ff16 	bl	80131c6 <free_list_remove>
	return c + chunk_size(h, c);
 801339a:	4621      	mov	r1, r4
 801339c:	4628      	mov	r0, r5
 801339e:	f7ff fea8 	bl	80130f2 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
 80133a2:	4621      	mov	r1, r4
 80133a4:	1822      	adds	r2, r4, r0
 80133a6:	4628      	mov	r0, r5
 80133a8:	f7ff ff85 	bl	80132b6 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
 80133ac:	2200      	movs	r2, #0
 80133ae:	4621      	mov	r1, r4
 80133b0:	4628      	mov	r0, r5
 80133b2:	f7ff fe88 	bl	80130c6 <chunk_field>
 80133b6:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
 80133b8:	2201      	movs	r2, #1
 80133ba:	4628      	mov	r0, r5
 80133bc:	4639      	mov	r1, r7
 80133be:	f7ff fe82 	bl	80130c6 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
 80133c2:	ea10 0602 	ands.w	r6, r0, r2
 80133c6:	d113      	bne.n	80133f0 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
 80133c8:	4639      	mov	r1, r7
 80133ca:	4628      	mov	r0, r5
 80133cc:	f7ff fefb 	bl	80131c6 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
 80133d0:	4621      	mov	r1, r4
 80133d2:	4632      	mov	r2, r6
 80133d4:	4628      	mov	r0, r5
 80133d6:	f7ff fe76 	bl	80130c6 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
 80133da:	4622      	mov	r2, r4
 80133dc:	1a21      	subs	r1, r4, r0
 80133de:	4628      	mov	r0, r5
 80133e0:	f7ff ff69 	bl	80132b6 <merge_chunks>
 80133e4:	4621      	mov	r1, r4
 80133e6:	4632      	mov	r2, r6
 80133e8:	4628      	mov	r0, r5
 80133ea:	f7ff fe6c 	bl	80130c6 <chunk_field>
 80133ee:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
 80133f0:	4621      	mov	r1, r4
 80133f2:	4628      	mov	r0, r5
}
 80133f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
 80133f8:	f7ff bf7b 	b.w	80132f2 <free_list_add>

080133fc <sys_heap_free>:
{
 80133fc:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
 80133fe:	b171      	cbz	r1, 801341e <sys_heap_free+0x22>
 8013400:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
 8013402:	2200      	movs	r2, #0
	chunkid_t c = mem_to_chunkid(h, mem);
 8013404:	4628      	mov	r0, r5
 8013406:	f7ff fe96 	bl	8013136 <mem_to_chunkid>
 801340a:	4604      	mov	r4, r0
	set_chunk_used(h, c, false);
 801340c:	4601      	mov	r1, r0
 801340e:	4628      	mov	r0, r5
 8013410:	f7ff fe75 	bl	80130fe <set_chunk_used>
	free_chunk(h, c);
 8013414:	4621      	mov	r1, r4
}
 8013416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
 801341a:	f7ff bfad 	b.w	8013378 <free_chunk>
}
 801341e:	bd38      	pop	{r3, r4, r5, pc}

08013420 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
 8013420:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 8013422:	6806      	ldr	r6, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
 8013424:	b909      	cbnz	r1, 801342a <sys_heap_alloc+0xa>
		return NULL;
 8013426:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
 8013428:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 801342a:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
 801342c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8013430:	d9f9      	bls.n	8013426 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
 8013432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8013436:	f101 0407 	add.w	r4, r1, #7
	chunkid_t c = alloc_chunk(h, chunk_sz);
 801343a:	4630      	mov	r0, r6
	return big_heap(h) ? 8 : 4;
 801343c:	bf2c      	ite	cs
 801343e:	2208      	movcs	r2, #8
 8013440:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8013442:	4414      	add	r4, r2
 8013444:	08e4      	lsrs	r4, r4, #3
 8013446:	4621      	mov	r1, r4
 8013448:	f7ff fed4 	bl	80131f4 <alloc_chunk>
	if (c == 0U) {
 801344c:	4605      	mov	r5, r0
 801344e:	2800      	cmp	r0, #0
 8013450:	d0e9      	beq.n	8013426 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
 8013452:	4601      	mov	r1, r0
 8013454:	4630      	mov	r0, r6
 8013456:	f7ff fe4c 	bl	80130f2 <chunk_size>
 801345a:	42a0      	cmp	r0, r4
 801345c:	d909      	bls.n	8013472 <sys_heap_alloc+0x52>
		split_chunks(h, c, c + chunk_sz);
 801345e:	442c      	add	r4, r5
 8013460:	4629      	mov	r1, r5
 8013462:	4630      	mov	r0, r6
 8013464:	4622      	mov	r2, r4
 8013466:	f7ff feff 	bl	8013268 <split_chunks>
		free_list_add(h, c + chunk_sz);
 801346a:	4621      	mov	r1, r4
 801346c:	4630      	mov	r0, r6
 801346e:	f7ff ff40 	bl	80132f2 <free_list_add>
	set_chunk_used(h, c, true);
 8013472:	4629      	mov	r1, r5
 8013474:	4630      	mov	r0, r6
 8013476:	2201      	movs	r2, #1
 8013478:	f7ff fe41 	bl	80130fe <set_chunk_used>
	return big_heap(h) ? 8 : 4;
 801347c:	68b3      	ldr	r3, [r6, #8]
 801347e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013482:	bf2c      	ite	cs
 8013484:	2308      	movcs	r3, #8
 8013486:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 8013488:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801348c:	4428      	add	r0, r5
	return mem;
 801348e:	e7cb      	b.n	8013428 <sys_heap_alloc+0x8>

08013490 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 8013490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013494:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
 8013496:	424a      	negs	r2, r1
	struct z_heap *h = heap->heap;
 8013498:	6806      	ldr	r6, [r0, #0]
{
 801349a:	460b      	mov	r3, r1
	rew = align & -align;
 801349c:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
 80134a0:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->end_chunk);
 80134a4:	68b5      	ldr	r5, [r6, #8]
 80134a6:	d00f      	beq.n	80134c8 <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
 80134a8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80134ac:	46b9      	mov	r9, r7
 80134ae:	bf34      	ite	cc
 80134b0:	2104      	movcc	r1, #4
 80134b2:	2108      	movcs	r1, #8
 80134b4:	42b9      	cmp	r1, r7
 80134b6:	460a      	mov	r2, r1
 80134b8:	bf28      	it	cs
 80134ba:	463a      	movcs	r2, r7
		align -= rew;
 80134bc:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
 80134be:	b994      	cbnz	r4, 80134e6 <sys_heap_aligned_alloc+0x56>
		return NULL;
 80134c0:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
 80134c2:	4628      	mov	r0, r5
 80134c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134c8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80134cc:	bf34      	ite	cc
 80134ce:	2204      	movcc	r2, #4
 80134d0:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
 80134d2:	4291      	cmp	r1, r2
 80134d4:	d804      	bhi.n	80134e0 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
 80134d6:	4621      	mov	r1, r4
}
 80134d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
 80134dc:	f7ff bfa0 	b.w	8013420 <sys_heap_alloc>
		rew = 0;
 80134e0:	f04f 0900 	mov.w	r9, #0
 80134e4:	e7eb      	b.n	80134be <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
 80134e6:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
 80134ea:	d9e9      	bls.n	80134c0 <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
 80134ec:	1de1      	adds	r1, r4, #7
 80134ee:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 80134f2:	4630      	mov	r0, r6
 80134f4:	4439      	add	r1, r7
 80134f6:	bf2c      	ite	cs
 80134f8:	2308      	movcs	r3, #8
 80134fa:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80134fc:	1a89      	subs	r1, r1, r2
 80134fe:	4419      	add	r1, r3
 8013500:	08c9      	lsrs	r1, r1, #3
 8013502:	f7ff fe77 	bl	80131f4 <alloc_chunk>
	if (c0 == 0) {
 8013506:	4680      	mov	r8, r0
 8013508:	2800      	cmp	r0, #0
 801350a:	d0d9      	beq.n	80134c0 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
 801350c:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 801350e:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
	chunkid_t c = mem_to_chunkid(h, mem);
 8013512:	4630      	mov	r0, r6
 8013514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013518:	bf2c      	ite	cs
 801351a:	2308      	movcs	r3, #8
 801351c:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 801351e:	441d      	add	r5, r3
 8013520:	1e7b      	subs	r3, r7, #1
 8013522:	427f      	negs	r7, r7
 8013524:	4435      	add	r5, r6
 8013526:	441d      	add	r5, r3
 8013528:	403d      	ands	r5, r7
 801352a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 801352e:	442c      	add	r4, r5
	chunkid_t c = mem_to_chunkid(h, mem);
 8013530:	4629      	mov	r1, r5
 8013532:	f7ff fe00 	bl	8013136 <mem_to_chunkid>
	if (c > c0) {
 8013536:	4580      	cmp	r8, r0
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 8013538:	f104 0407 	add.w	r4, r4, #7
	chunkid_t c = mem_to_chunkid(h, mem);
 801353c:	4607      	mov	r7, r0
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 801353e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
 8013542:	eba4 0406 	sub.w	r4, r4, r6
 8013546:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
 801354a:	d208      	bcs.n	801355e <sys_heap_aligned_alloc+0xce>
		split_chunks(h, c0, c);
 801354c:	4602      	mov	r2, r0
 801354e:	4641      	mov	r1, r8
 8013550:	4630      	mov	r0, r6
 8013552:	f7ff fe89 	bl	8013268 <split_chunks>
		free_list_add(h, c0);
 8013556:	4641      	mov	r1, r8
 8013558:	4630      	mov	r0, r6
 801355a:	f7ff feca 	bl	80132f2 <free_list_add>
	return c + chunk_size(h, c);
 801355e:	4639      	mov	r1, r7
 8013560:	4630      	mov	r0, r6
 8013562:	f7ff fdc6 	bl	80130f2 <chunk_size>
 8013566:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
 8013568:	4284      	cmp	r4, r0
 801356a:	d208      	bcs.n	801357e <sys_heap_aligned_alloc+0xee>
		split_chunks(h, c, c_end);
 801356c:	4639      	mov	r1, r7
 801356e:	4630      	mov	r0, r6
 8013570:	4622      	mov	r2, r4
 8013572:	f7ff fe79 	bl	8013268 <split_chunks>
		free_list_add(h, c_end);
 8013576:	4621      	mov	r1, r4
 8013578:	4630      	mov	r0, r6
 801357a:	f7ff feba 	bl	80132f2 <free_list_add>
	set_chunk_used(h, c, true);
 801357e:	2201      	movs	r2, #1
 8013580:	4639      	mov	r1, r7
 8013582:	4630      	mov	r0, r6
 8013584:	f7ff fdbb 	bl	80130fe <set_chunk_used>
	return mem;
 8013588:	e79b      	b.n	80134c2 <sys_heap_aligned_alloc+0x32>

0801358a <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 801358a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 801358e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013590:	bf2c      	ite	cs
 8013592:	2408      	movcs	r4, #8
 8013594:	2404      	movcc	r4, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8013596:	1dce      	adds	r6, r1, #7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
 8013598:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
 801359a:	1b14      	subs	r4, r2, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 801359c:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 80135a0:	440c      	add	r4, r1
	heap->heap = h;
 80135a2:	6006      	str	r6, [r0, #0]
 80135a4:	f106 0210 	add.w	r2, r6, #16
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 80135a8:	f024 0407 	bic.w	r4, r4, #7
	h->avail_buckets = 0;
 80135ac:	60f3      	str	r3, [r6, #12]
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 80135ae:	1ba4      	subs	r4, r4, r6
 80135b0:	08e4      	lsrs	r4, r4, #3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 80135b2:	4621      	mov	r1, r4
 80135b4:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
 80135b6:	60b4      	str	r4, [r6, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 80135b8:	f7ff fdc7 	bl	801314a <bucket_idx.isra.0>
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
 80135bc:	4619      	mov	r1, r3
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 80135be:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80135c0:	351b      	adds	r5, #27
 80135c2:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
 80135c4:	4298      	cmp	r0, r3
 80135c6:	da2e      	bge.n	8013626 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 80135c8:	462a      	mov	r2, r5
 80135ca:	4630      	mov	r0, r6
 80135cc:	2100      	movs	r1, #0
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 80135ce:	1b67      	subs	r7, r4, r5
	set_chunk_size(h, 0, chunk0_size);
 80135d0:	f7ff fdad 	bl	801312e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 80135d4:	2300      	movs	r3, #0
 80135d6:	4630      	mov	r0, r6
 80135d8:	461a      	mov	r2, r3
 80135da:	4619      	mov	r1, r3
 80135dc:	f7ff fd7e 	bl	80130dc <chunk_set>
	set_chunk_used(h, 0, true);
 80135e0:	4619      	mov	r1, r3
 80135e2:	4630      	mov	r0, r6
 80135e4:	2201      	movs	r2, #1
 80135e6:	f7ff fd8a 	bl	80130fe <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 80135ea:	463a      	mov	r2, r7
 80135ec:	4629      	mov	r1, r5
 80135ee:	f7ff fd9e 	bl	801312e <set_chunk_size>
 80135f2:	462b      	mov	r3, r5
 80135f4:	2200      	movs	r2, #0
 80135f6:	4629      	mov	r1, r5
 80135f8:	4630      	mov	r0, r6
 80135fa:	f7ff fd6f 	bl	80130dc <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
 80135fe:	4621      	mov	r1, r4
 8013600:	4630      	mov	r0, r6
 8013602:	f7ff fd94 	bl	801312e <set_chunk_size>
 8013606:	463b      	mov	r3, r7
 8013608:	4621      	mov	r1, r4
 801360a:	4630      	mov	r0, r6
 801360c:	2200      	movs	r2, #0
 801360e:	f7ff fd65 	bl	80130dc <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
 8013612:	4621      	mov	r1, r4
 8013614:	4630      	mov	r0, r6
 8013616:	2201      	movs	r2, #1
 8013618:	f7ff fd71 	bl	80130fe <set_chunk_used>

	free_list_add(h, chunk0_size);
 801361c:	4629      	mov	r1, r5
}
 801361e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 8013622:	f7ff be66 	b.w	80132f2 <free_list_add>
	for (int i = 0; i < nb_buckets; i++) {
 8013626:	3301      	adds	r3, #1
		h->buckets[i].next = 0;
 8013628:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 801362c:	e7ca      	b.n	80135c4 <sys_heap_init+0x3a>

0801362e <crc16_reflect>:

	return crc;
}

uint16_t crc16_reflect(uint16_t poly, uint16_t seed, const uint8_t *src, size_t len)
{
 801362e:	b530      	push	{r4, r5, lr}
 8013630:	4413      	add	r3, r2
 8013632:	4604      	mov	r4, r0
	uint16_t crc = seed;
 8013634:	4608      	mov	r0, r1
	size_t i, j;

	for (i = 0; i < len; i++) {
 8013636:	429a      	cmp	r2, r3
 8013638:	d100      	bne.n	801363c <crc16_reflect+0xe>
		}
	}


	return crc;
}
 801363a:	bd30      	pop	{r4, r5, pc}
		crc ^= (uint16_t)src[i];
 801363c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013640:	2508      	movs	r5, #8
 8013642:	4048      	eors	r0, r1
			if (crc & 0x0001UL) {
 8013644:	f000 0101 	and.w	r1, r0, #1
				crc = (crc >> 1U) ^ poly;
 8013648:	0840      	lsrs	r0, r0, #1
			if (crc & 0x0001UL) {
 801364a:	b111      	cbz	r1, 8013652 <crc16_reflect+0x24>
				crc = (crc >> 1U) ^ poly;
 801364c:	ea80 0104 	eor.w	r1, r0, r4
 8013650:	b288      	uxth	r0, r1
		for (j = 0; j < 8; j++) {
 8013652:	3d01      	subs	r5, #1
 8013654:	d1f6      	bne.n	8013644 <crc16_reflect+0x16>
 8013656:	e7ee      	b.n	8013636 <crc16_reflect+0x8>

08013658 <encode_uint>:
{
 8013658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801365c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
 801365e:	78d3      	ldrb	r3, [r2, #3]
{
 8013660:	4680      	mov	r8, r0
 8013662:	460f      	mov	r7, r1
	switch (specifier) {
 8013664:	2b6f      	cmp	r3, #111	; 0x6f
{
 8013666:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8013668:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 801366c:	d029      	beq.n	80136c2 <encode_uint+0x6a>
 801366e:	d824      	bhi.n	80136ba <encode_uint+0x62>
		return 16;
 8013670:	2b58      	cmp	r3, #88	; 0x58
 8013672:	bf14      	ite	ne
 8013674:	260a      	movne	r6, #10
 8013676:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
 8013678:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 801367c:	4632      	mov	r2, r6
 801367e:	2300      	movs	r3, #0
 8013680:	4640      	mov	r0, r8
 8013682:	4639      	mov	r1, r7
 8013684:	f7ed f8d6 	bl	8000834 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8013688:	2a09      	cmp	r2, #9
 801368a:	b2d4      	uxtb	r4, r2
 801368c:	d81e      	bhi.n	80136cc <encode_uint+0x74>
 801368e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 8013690:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8013692:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8013694:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8013698:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 801369c:	d301      	bcc.n	80136a2 <encode_uint+0x4a>
 801369e:	45d1      	cmp	r9, sl
 80136a0:	d811      	bhi.n	80136c6 <encode_uint+0x6e>
	if (conv->flag_hash) {
 80136a2:	782b      	ldrb	r3, [r5, #0]
 80136a4:	069b      	lsls	r3, r3, #26
 80136a6:	d505      	bpl.n	80136b4 <encode_uint+0x5c>
		if (radix == 8) {
 80136a8:	2e08      	cmp	r6, #8
 80136aa:	d115      	bne.n	80136d8 <encode_uint+0x80>
			conv->altform_0 = true;
 80136ac:	78ab      	ldrb	r3, [r5, #2]
 80136ae:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 80136b2:	70ab      	strb	r3, [r5, #2]
}
 80136b4:	4648      	mov	r0, r9
 80136b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 80136ba:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 80136be:	2b70      	cmp	r3, #112	; 0x70
 80136c0:	e7d7      	b.n	8013672 <encode_uint+0x1a>
	switch (specifier) {
 80136c2:	2608      	movs	r6, #8
 80136c4:	e7d8      	b.n	8013678 <encode_uint+0x20>
		value /= radix;
 80136c6:	4680      	mov	r8, r0
 80136c8:	460f      	mov	r7, r1
 80136ca:	e7d7      	b.n	801367c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80136cc:	f1bb 0f19 	cmp.w	fp, #25
 80136d0:	bf94      	ite	ls
 80136d2:	3437      	addls	r4, #55	; 0x37
 80136d4:	3457      	addhi	r4, #87	; 0x57
 80136d6:	e7db      	b.n	8013690 <encode_uint+0x38>
		} else if (radix == 16) {
 80136d8:	2e10      	cmp	r6, #16
 80136da:	d1eb      	bne.n	80136b4 <encode_uint+0x5c>
			conv->altform_0c = true;
 80136dc:	78ab      	ldrb	r3, [r5, #2]
 80136de:	f043 0310 	orr.w	r3, r3, #16
 80136e2:	e7e6      	b.n	80136b2 <encode_uint+0x5a>

080136e4 <outs>:
{
 80136e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136e8:	4607      	mov	r7, r0
 80136ea:	4688      	mov	r8, r1
 80136ec:	4615      	mov	r5, r2
 80136ee:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 80136f0:	4614      	mov	r4, r2
 80136f2:	42b4      	cmp	r4, r6
 80136f4:	eba4 0005 	sub.w	r0, r4, r5
 80136f8:	d302      	bcc.n	8013700 <outs+0x1c>
 80136fa:	b93e      	cbnz	r6, 801370c <outs+0x28>
 80136fc:	7823      	ldrb	r3, [r4, #0]
 80136fe:	b12b      	cbz	r3, 801370c <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8013700:	4641      	mov	r1, r8
 8013702:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013706:	47b8      	blx	r7
		if (rc < 0) {
 8013708:	2800      	cmp	r0, #0
 801370a:	daf2      	bge.n	80136f2 <outs+0xe>
}
 801370c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013710 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 8013710:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
 8013712:	68c7      	ldr	r7, [r0, #12]
{
 8013714:	4604      	mov	r4, r0
	wrap_size = buf->put_head - base;
 8013716:	6846      	ldr	r6, [r0, #4]
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
 8013718:	6945      	ldr	r5, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
 801371a:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
 801371c:	eba6 0c07 	sub.w	ip, r6, r7
 8013720:	1b75      	subs	r5, r6, r5
	if (unlikely(wrap_size >= buf->size)) {
 8013722:	4563      	cmp	r3, ip
 8013724:	eba3 0005 	sub.w	r0, r3, r5
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
 8013728:	bf9c      	itt	ls
 801372a:	ebac 0c03 	subls.w	ip, ip, r3
		base += buf->size;
 801372e:	18ff      	addls	r7, r7, r3
	}
	wrap_size = buf->size - wrap_size;

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
 8013730:	4282      	cmp	r2, r0
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
 8013732:	eba6 0607 	sub.w	r6, r6, r7
	size = MIN(size, free_space);
 8013736:	bf28      	it	cs
 8013738:	4602      	movcs	r2, r0
	wrap_size = buf->size - wrap_size;
 801373a:	eba3 000c 	sub.w	r0, r3, ip
	*data = &buf->buffer[buf->put_head - base];
 801373e:	6823      	ldr	r3, [r4, #0]
	size = MIN(size, wrap_size);
 8013740:	4290      	cmp	r0, r2
	*data = &buf->buffer[buf->put_head - base];
 8013742:	441e      	add	r6, r3
	size = MIN(size, wrap_size);
 8013744:	bf28      	it	cs
 8013746:	4610      	movcs	r0, r2
	*data = &buf->buffer[buf->put_head - base];
 8013748:	600e      	str	r6, [r1, #0]
	buf->put_head += size;
 801374a:	6863      	ldr	r3, [r4, #4]
 801374c:	4403      	add	r3, r0
 801374e:	6063      	str	r3, [r4, #4]

	return size;
}
 8013750:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013752 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
 8013752:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 8013756:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
 8013758:	428a      	cmp	r2, r1
 801375a:	d30b      	bcc.n	8013774 <ring_buf_put_finish+0x22>
		return -EINVAL;
	}

	buf->put_tail += size;
 801375c:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
 801375e:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
 8013760:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
 8013762:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
 8013766:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
 8013768:	428a      	cmp	r2, r1
 801376a:	d801      	bhi.n	8013770 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
 801376c:	4413      	add	r3, r2
 801376e:	60c3      	str	r3, [r0, #12]
	}

	return 0;
 8013770:	2000      	movs	r0, #0
}
 8013772:	4770      	bx	lr
		return -EINVAL;
 8013774:	f06f 0015 	mvn.w	r0, #21
 8013778:	4770      	bx	lr

0801377a <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
 801377a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801377e:	4680      	mov	r8, r0
 8013780:	460e      	mov	r6, r1
 8013782:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 8013784:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
 8013786:	462a      	mov	r2, r5
 8013788:	a901      	add	r1, sp, #4
 801378a:	4640      	mov	r0, r8
 801378c:	f7ff ffc0 	bl	8013710 <ring_buf_put_claim>
 8013790:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
 8013792:	4602      	mov	r2, r0
 8013794:	4631      	mov	r1, r6
 8013796:	9801      	ldr	r0, [sp, #4]
		total_size += partial_size;
 8013798:	4427      	add	r7, r4
		memcpy(dst, data, partial_size);
 801379a:	f001 fa6c 	bl	8014c76 <memcpy>
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 801379e:	1b2d      	subs	r5, r5, r4
		data += partial_size;
 80137a0:	4426      	add	r6, r4
	} while (size && partial_size);
 80137a2:	d001      	beq.n	80137a8 <ring_buf_put+0x2e>
 80137a4:	2c00      	cmp	r4, #0
 80137a6:	d1ee      	bne.n	8013786 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
 80137a8:	4639      	mov	r1, r7
 80137aa:	4640      	mov	r0, r8
 80137ac:	f7ff ffd1 	bl	8013752 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
 80137b0:	4638      	mov	r0, r7
 80137b2:	b002      	add	sp, #8
 80137b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080137b8 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 80137b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
 80137ba:	6987      	ldr	r7, [r0, #24]
{
 80137bc:	4604      	mov	r4, r0
	wrap_size = buf->get_head - base;
 80137be:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
 80137c0:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->get_head - base;
 80137c2:	eba5 0c07 	sub.w	ip, r5, r7
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
 80137c6:	6886      	ldr	r6, [r0, #8]
	if (unlikely(wrap_size >= buf->size)) {
 80137c8:	4563      	cmp	r3, ip
 80137ca:	eba6 0005 	sub.w	r0, r6, r5
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
 80137ce:	bf9c      	itt	ls
 80137d0:	ebac 0c03 	subls.w	ip, ip, r3
		base += buf->size;
 80137d4:	18ff      	addls	r7, r7, r3
	}
	wrap_size = buf->size - wrap_size;

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
 80137d6:	4290      	cmp	r0, r2
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
 80137d8:	eba5 0507 	sub.w	r5, r5, r7
	size = MIN(size, available_size);
 80137dc:	bf28      	it	cs
 80137de:	4610      	movcs	r0, r2
 80137e0:	4606      	mov	r6, r0
	wrap_size = buf->size - wrap_size;
 80137e2:	eba3 000c 	sub.w	r0, r3, ip
	*data = &buf->buffer[buf->get_head - base];
 80137e6:	6823      	ldr	r3, [r4, #0]
	size = MIN(size, wrap_size);
 80137e8:	42b0      	cmp	r0, r6
	*data = &buf->buffer[buf->get_head - base];
 80137ea:	441d      	add	r5, r3
	size = MIN(size, wrap_size);
 80137ec:	bf28      	it	cs
 80137ee:	4630      	movcs	r0, r6
	*data = &buf->buffer[buf->get_head - base];
 80137f0:	600d      	str	r5, [r1, #0]
	buf->get_head += size;
 80137f2:	6923      	ldr	r3, [r4, #16]
 80137f4:	4403      	add	r3, r0
 80137f6:	6123      	str	r3, [r4, #16]

	return size;
}
 80137f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080137fa <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
 80137fa:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80137fe:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
 8013800:	428a      	cmp	r2, r1
 8013802:	d30b      	bcc.n	801381c <ring_buf_get_finish+0x22>
		return -EINVAL;
	}

	buf->get_tail += size;
 8013804:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
 8013806:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
 801380a:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
 801380e:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
 8013810:	428a      	cmp	r2, r1
 8013812:	d801      	bhi.n	8013818 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
 8013814:	4413      	add	r3, r2
 8013816:	6183      	str	r3, [r0, #24]
	}

	return 0;
 8013818:	2000      	movs	r0, #0
}
 801381a:	4770      	bx	lr
		return -EINVAL;
 801381c:	f06f 0015 	mvn.w	r0, #21
 8013820:	4770      	bx	lr

08013822 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
 8013822:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013826:	4680      	mov	r8, r0
 8013828:	460d      	mov	r5, r1
 801382a:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 801382c:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
 801382e:	4632      	mov	r2, r6
 8013830:	a901      	add	r1, sp, #4
 8013832:	4640      	mov	r0, r8
 8013834:	f7ff ffc0 	bl	80137b8 <ring_buf_get_claim>
 8013838:	4604      	mov	r4, r0
		if (data) {
 801383a:	b12d      	cbz	r5, 8013848 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
 801383c:	4602      	mov	r2, r0
 801383e:	4628      	mov	r0, r5
			data += partial_size;
 8013840:	4425      	add	r5, r4
			memcpy(data, src, partial_size);
 8013842:	9901      	ldr	r1, [sp, #4]
 8013844:	f001 fa17 	bl	8014c76 <memcpy>
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
 8013848:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 801384a:	4427      	add	r7, r4
	} while (size && partial_size);
 801384c:	d001      	beq.n	8013852 <ring_buf_get+0x30>
 801384e:	2c00      	cmp	r4, #0
 8013850:	d1ed      	bne.n	801382e <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
 8013852:	4639      	mov	r1, r7
 8013854:	4640      	mov	r0, r8
 8013856:	f7ff ffd0 	bl	80137fa <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
 801385a:	4638      	mov	r0, r7
 801385c:	b002      	add	sp, #8
 801385e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013862 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8013862:	4770      	bx	lr

08013864 <HAL_GetTick>:
 *        Cube HAL expects a 1ms tick which matches with k_uptime_get_32.
 *        Tick interrupt priority is not used
 * @return HAL status
 */
uint32_t HAL_GetTick(void)
{
 8013864:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8013866:	f008 facf 	bl	801be08 <z_impl_k_uptime_ticks>
 801386a:	220a      	movs	r2, #10
 801386c:	2300      	movs	r3, #0
 801386e:	f7ec ffe1 	bl	8000834 <__aeabi_uldivmod>
	return k_uptime_get_32();
}
 8013872:	bd08      	pop	{r3, pc}

08013874 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8013874:	2000      	movs	r0, #0
 8013876:	4770      	bx	lr

08013878 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
 8013878:	6883      	ldr	r3, [r0, #8]
 801387a:	6a1b      	ldr	r3, [r3, #32]
 801387c:	b103      	cbz	r3, 8013880 <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
 801387e:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
 8013880:	4770      	bx	lr

08013882 <enable>:
{
 8013882:	b508      	push	{r3, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 8013884:	6843      	ldr	r3, [r0, #4]
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
 8013886:	681a      	ldr	r2, [r3, #0]
 8013888:	7411      	strb	r1, [r2, #16]
	if (blocking_tx) {
 801388a:	b119      	cbz	r1, 8013894 <enable+0x12>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	6818      	ldr	r0, [r3, #0]
 8013890:	f7ff fff2 	bl	8013878 <uart_irq_tx_disable>
}
 8013894:	2000      	movs	r0, #0
 8013896:	bd08      	pop	{r3, pc}

08013898 <read>:
{
 8013898:	b510      	push	{r4, lr}
 801389a:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
 801389c:	6843      	ldr	r3, [r0, #4]
 801389e:	6918      	ldr	r0, [r3, #16]
 80138a0:	f7ff ffbf 	bl	8013822 <ring_buf_get>
 80138a4:	6020      	str	r0, [r4, #0]
}
 80138a6:	2000      	movs	r0, #0
 80138a8:	bd10      	pop	{r4, pc}

080138aa <uninit>:
{
 80138aa:	b510      	push	{r4, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 80138ac:	6843      	ldr	r3, [r0, #4]
		const struct device *dev = sh_uart->ctrl_blk->dev;
 80138ae:	681a      	ldr	r2, [r3, #0]
		k_timer_stop(sh_uart->dtr_timer);
 80138b0:	6898      	ldr	r0, [r3, #8]
		const struct device *dev = sh_uart->ctrl_blk->dev;
 80138b2:	6814      	ldr	r4, [r2, #0]
	z_impl_k_timer_stop(timer);
 80138b4:	f008 fad5 	bl	801be62 <z_impl_k_timer_stop>
		uart_irq_tx_disable(dev);
 80138b8:	4620      	mov	r0, r4
 80138ba:	f7ff ffdd 	bl	8013878 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
 80138be:	68a3      	ldr	r3, [r4, #8]
 80138c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138c2:	b10b      	cbz	r3, 80138c8 <uninit+0x1e>
		api->irq_rx_disable(dev);
 80138c4:	4620      	mov	r0, r4
 80138c6:	4798      	blx	r3
}
 80138c8:	2000      	movs	r0, #0
 80138ca:	bd10      	pop	{r4, pc}

080138cc <write>:
{
 80138cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
 80138d0:	6845      	ldr	r5, [r0, #4]
{
 80138d2:	461e      	mov	r6, r3
 80138d4:	460c      	mov	r4, r1
 80138d6:	4617      	mov	r7, r2
		!sh_uart->ctrl_blk->blocking_tx) {
 80138d8:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
 80138da:	7c1b      	ldrb	r3, [r3, #16]
 80138dc:	b153      	cbz	r3, 80138f4 <write+0x28>
 80138de:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
 80138e2:	45a0      	cmp	r8, r4
 80138e4:	d121      	bne.n	801392a <write+0x5e>
		*cnt = length;
 80138e6:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 80138e8:	2001      	movs	r0, #1
 80138ea:	682b      	ldr	r3, [r5, #0]
 80138ec:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 80138f0:	4790      	blx	r2
 80138f2:	e017      	b.n	8013924 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
 80138f4:	68e8      	ldr	r0, [r5, #12]
 80138f6:	f7ff ff40 	bl	801377a <ring_buf_put>
 80138fa:	6030      	str	r0, [r6, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80138fc:	682b      	ldr	r3, [r5, #0]
 80138fe:	2101      	movs	r1, #1
 8013900:	f3bf 8f5b 	dmb	ish
 8013904:	330c      	adds	r3, #12
 8013906:	e853 2f00 	ldrex	r2, [r3]
 801390a:	e843 1000 	strex	r0, r1, [r3]
 801390e:	2800      	cmp	r0, #0
 8013910:	d1f9      	bne.n	8013906 <write+0x3a>
 8013912:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
 8013916:	b92a      	cbnz	r2, 8013924 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
 8013918:	682b      	ldr	r3, [r5, #0]
 801391a:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
 801391c:	6883      	ldr	r3, [r0, #8]
 801391e:	69db      	ldr	r3, [r3, #28]
 8013920:	b103      	cbz	r3, 8013924 <write+0x58>
		api->irq_tx_enable(dev);
 8013922:	4798      	blx	r3
}
 8013924:	2000      	movs	r0, #0
 8013926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
 801392a:	682b      	ldr	r3, [r5, #0]
 801392c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013930:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
 8013932:	6883      	ldr	r3, [r0, #8]
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 8013938:	e7d3      	b.n	80138e2 <write+0x16>

0801393a <uart_callback>:
{
 801393a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801393e:	4680      	mov	r8, r0
 8013940:	460d      	mov	r5, r1
	if (api->irq_update == NULL) {
 8013942:	6883      	ldr	r3, [r0, #8]
 8013944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013946:	b103      	cbz	r3, 801394a <uart_callback+0x10>
	return api->irq_update(dev);
 8013948:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
 801394a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013950:	bb0b      	cbnz	r3, 8013996 <uart_callback+0x5c>
 8013952:	2700      	movs	r7, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
 8013954:	6928      	ldr	r0, [r5, #16]
 8013956:	a901      	add	r1, sp, #4
 8013958:	69c2      	ldr	r2, [r0, #28]
 801395a:	f7ff fed9 	bl	8013710 <ring_buf_put_claim>
		if (len > 0) {
 801395e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013962:	4606      	mov	r6, r0
 8013964:	b378      	cbz	r0, 80139c6 <uart_callback+0x8c>
	if (api->fifo_read == NULL) {
 8013966:	699b      	ldr	r3, [r3, #24]
			rd_len = uart_fifo_read(dev, data, len);
 8013968:	9901      	ldr	r1, [sp, #4]
 801396a:	b34b      	cbz	r3, 80139c0 <uart_callback+0x86>
	return api->fifo_read(dev, rx_data, size);
 801396c:	4602      	mov	r2, r0
 801396e:	4640      	mov	r0, r8
 8013970:	4798      	blx	r3
 8013972:	4604      	mov	r4, r0
				new_data = true;
 8013974:	2c00      	cmp	r4, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 8013976:	6928      	ldr	r0, [r5, #16]
 8013978:	4621      	mov	r1, r4
				new_data = true;
 801397a:	bf18      	it	ne
 801397c:	2701      	movne	r7, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
 801397e:	f7ff fee8 	bl	8013752 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
 8013982:	b10c      	cbz	r4, 8013988 <uart_callback+0x4e>
 8013984:	42a6      	cmp	r6, r4
 8013986:	d0e5      	beq.n	8013954 <uart_callback+0x1a>
	if (new_data) {
 8013988:	b14f      	cbz	r7, 801399e <uart_callback+0x64>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
 801398a:	682b      	ldr	r3, [r5, #0]
 801398c:	2000      	movs	r0, #0
 801398e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8013992:	4790      	blx	r2
}
 8013994:	e003      	b.n	801399e <uart_callback+0x64>
	return api->irq_rx_ready(dev);
 8013996:	4640      	mov	r0, r8
 8013998:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
 801399a:	2800      	cmp	r0, #0
 801399c:	d1d9      	bne.n	8013952 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
 801399e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80139a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a4:	b9db      	cbnz	r3, 80139de <uart_callback+0xa4>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
 80139a6:	68e8      	ldr	r0, [r5, #12]
 80139a8:	a901      	add	r1, sp, #4
 80139aa:	69c2      	ldr	r2, [r0, #28]
 80139ac:	f7ff ff04 	bl	80137b8 <ring_buf_get_claim>
	if (len) {
 80139b0:	4604      	mov	r4, r0
 80139b2:	b9d8      	cbnz	r0, 80139ec <uart_callback+0xb2>
		uart_irq_tx_disable(dev);
 80139b4:	4640      	mov	r0, r8
 80139b6:	f7ff ff5f 	bl	8013878 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
 80139ba:	682b      	ldr	r3, [r5, #0]
 80139bc:	60dc      	str	r4, [r3, #12]
 80139be:	e021      	b.n	8013a04 <uart_callback+0xca>
		return -ENOSYS;
 80139c0:	f06f 0457 	mvn.w	r4, #87	; 0x57
 80139c4:	e7d6      	b.n	8013974 <uart_callback+0x3a>
	if (api->fifo_read == NULL) {
 80139c6:	699b      	ldr	r3, [r3, #24]
 80139c8:	b133      	cbz	r3, 80139d8 <uart_callback+0x9e>
	return api->fifo_read(dev, rx_data, size);
 80139ca:	2201      	movs	r2, #1
 80139cc:	f10d 0103 	add.w	r1, sp, #3
 80139d0:	4640      	mov	r0, r8
 80139d2:	4798      	blx	r3
 80139d4:	4604      	mov	r4, r0
 80139d6:	e7d4      	b.n	8013982 <uart_callback+0x48>
		return -ENOSYS;
 80139d8:	f06f 0457 	mvn.w	r4, #87	; 0x57
 80139dc:	e7d1      	b.n	8013982 <uart_callback+0x48>
	return api->irq_tx_ready(dev);
 80139de:	4640      	mov	r0, r8
 80139e0:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
 80139e2:	2800      	cmp	r0, #0
 80139e4:	d1df      	bne.n	80139a6 <uart_callback+0x6c>
}
 80139e6:	b002      	add	sp, #8
 80139e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (api->fifo_fill == NULL) {
 80139ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
		len = uart_fifo_fill(dev, data, len);
 80139f0:	9901      	ldr	r1, [sp, #4]
 80139f2:	695b      	ldr	r3, [r3, #20]
 80139f4:	b163      	cbz	r3, 8013a10 <uart_callback+0xd6>
	return api->fifo_fill(dev, tx_data, size);
 80139f6:	4602      	mov	r2, r0
 80139f8:	4640      	mov	r0, r8
 80139fa:	4798      	blx	r3
 80139fc:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
 80139fe:	68e8      	ldr	r0, [r5, #12]
 8013a00:	f7ff fefb 	bl	80137fa <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
 8013a04:	682b      	ldr	r3, [r5, #0]
 8013a06:	2001      	movs	r0, #1
 8013a08:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8013a0c:	4790      	blx	r2
}
 8013a0e:	e7ea      	b.n	80139e6 <uart_callback+0xac>
		return -ENOSYS;
 8013a10:	f06f 0157 	mvn.w	r1, #87	; 0x57
 8013a14:	e7f3      	b.n	80139fe <uart_callback+0xc4>

08013a16 <telnet_send_prematurely>:
	(void)telnet_send();
 8013a16:	f7ee bb23 	b.w	8002060 <telnet_send>

08013a1a <telnet_sent_cb>:
	if (status < 0) {
 8013a1a:	2900      	cmp	r1, #0
 8013a1c:	da01      	bge.n	8013a22 <telnet_sent_cb+0x8>
		telnet_end_client_connection();
 8013a1e:	f7ee bb01 	b.w	8002024 <telnet_end_client_connection>
}
 8013a22:	4770      	bx	lr

08013a24 <cmd_buffer_clear>:
	sh->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
 8013a24:	6882      	ldr	r2, [r0, #8]
 8013a26:	2300      	movs	r3, #0
 8013a28:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	sh->ctx->cmd_buff_pos = 0;
 8013a2c:	6882      	ldr	r2, [r0, #8]
 8013a2e:	87d3      	strh	r3, [r2, #62]	; 0x3e
	sh->ctx->cmd_buff_len = 0;
 8013a30:	6882      	ldr	r2, [r0, #8]
 8013a32:	8793      	strh	r3, [r2, #60]	; 0x3c
}
 8013a34:	4770      	bx	lr

08013a36 <atomic_or>:
{
 8013a36:	4603      	mov	r3, r0
}
 8013a38:	f3bf 8f5b 	dmb	ish
 8013a3c:	e853 0f00 	ldrex	r0, [r3]
 8013a40:	ea40 0201 	orr.w	r2, r0, r1
 8013a44:	e843 2c00 	strex	ip, r2, [r3]
 8013a48:	f1bc 0f00 	cmp.w	ip, #0
 8013a4c:	d1f6      	bne.n	8013a3c <atomic_or+0x6>
 8013a4e:	f3bf 8f5b 	dmb	ish
 8013a52:	4770      	bx	lr

08013a54 <atomic_and>:
 * @param value Value to AND.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
 8013a54:	4603      	mov	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
 8013a56:	f3bf 8f5b 	dmb	ish
 8013a5a:	e853 0f00 	ldrex	r0, [r3]
 8013a5e:	ea00 0201 	and.w	r2, r0, r1
 8013a62:	e843 2c00 	strex	ip, r2, [r3]
 8013a66:	f1bc 0f00 	cmp.w	ip, #0
 8013a6a:	d1f6      	bne.n	8013a5a <atomic_and+0x6>
 8013a6c:	f3bf 8f5b 	dmb	ish
 8013a70:	4770      	bx	lr

08013a72 <shell_signal_handle>:
{
 8013a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *sig = &sh->ctx->signals[sig_idx];
 8013a74:	0109      	lsls	r1, r1, #4
 8013a76:	6885      	ldr	r5, [r0, #8]
{
 8013a78:	4604      	mov	r4, r0
 8013a7a:	4616      	mov	r6, r2
	struct k_poll_signal *sig = &sh->ctx->signals[sig_idx];
 8013a7c:	f501 711a 	add.w	r1, r1, #616	; 0x268
 8013a80:	440d      	add	r5, r1
		(void) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(sig, signaled, result);
 8013a82:	aa01      	add	r2, sp, #4
 8013a84:	4669      	mov	r1, sp
 8013a86:	4628      	mov	r0, r5
 8013a88:	f008 fb5c 	bl	801c144 <z_impl_k_poll_signal_check>
	if (set) {
 8013a8c:	9b00      	ldr	r3, [sp, #0]
 8013a8e:	b123      	cbz	r3, 8013a9a <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
 8013a90:	4628      	mov	r0, r5
 8013a92:	f008 fb54 	bl	801c13e <z_impl_k_poll_signal_reset>
		handler(sh);
 8013a96:	4620      	mov	r0, r4
 8013a98:	47b0      	blx	r6
}
 8013a9a:	b002      	add	sp, #8
 8013a9c:	bd70      	pop	{r4, r5, r6, pc}

08013a9e <z_shell_strlen>:
{
 8013a9e:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
 8013aa0:	b110      	cbz	r0, 8013aa8 <z_shell_strlen+0xa>
 8013aa2:	f001 f89b 	bl	8014bdc <strlen>
 8013aa6:	b280      	uxth	r0, r0
}
 8013aa8:	bd08      	pop	{r3, pc}

08013aaa <z_shell_raw_fprintf>:
{
 8013aaa:	b40e      	push	{r1, r2, r3}
 8013aac:	b503      	push	{r0, r1, lr}
 8013aae:	aa03      	add	r2, sp, #12
 8013ab0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8013ab4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 8013ab6:	f7ef faeb 	bl	8003090 <z_shell_fprintf_fmt>
}
 8013aba:	b002      	add	sp, #8
 8013abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ac0:	b003      	add	sp, #12
 8013ac2:	4770      	bx	lr

08013ac4 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8013ac4:	f7fe b9b0 	b.w	8011e28 <z_impl_k_mutex_lock>

08013ac8 <transport_evt_handler>:
			&sh->ctx->signals[SHELL_SIGNAL_RXRDY] :
 8013ac8:	688b      	ldr	r3, [r1, #8]
 8013aca:	b920      	cbnz	r0, 8013ad6 <transport_evt_handler+0xe>
 8013acc:	f503 701a 	add.w	r0, r3, #616	; 0x268
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8013ad0:	2100      	movs	r1, #0
 8013ad2:	f7ff ba07 	b.w	8012ee4 <z_impl_k_poll_signal_raise>
 8013ad6:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8013ada:	e7f9      	b.n	8013ad0 <transport_evt_handler+0x8>

08013adc <kill_handler>:
{
 8013adc:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
 8013ade:	6883      	ldr	r3, [r0, #8]
 8013ae0:	4604      	mov	r4, r0
 8013ae2:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(sh)) {
 8013ae6:	07db      	lsls	r3, r3, #31
 8013ae8:	d41a      	bmi.n	8013b20 <kill_handler+0x44>
	err = sh->iface->api->uninit(sh->iface);
 8013aea:	6840      	ldr	r0, [r0, #4]
 8013aec:	6803      	ldr	r3, [r0, #0]
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	4798      	blx	r3
	if (err != 0) {
 8013af2:	4605      	mov	r5, r0
 8013af4:	b920      	cbnz	r0, 8013b00 <kill_handler+0x24>
	z_shell_history_purge(sh->history);
 8013af6:	68e0      	ldr	r0, [r4, #12]
 8013af8:	f000 fe5e 	bl	80147b8 <z_shell_history_purge>
	sh->ctx->state = state;
 8013afc:	68a3      	ldr	r3, [r4, #8]
 8013afe:	711d      	strb	r5, [r3, #4]
	if (sh->ctx->uninit_cb) {
 8013b00:	68a3      	ldr	r3, [r4, #8]
 8013b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b04:	b113      	cbz	r3, 8013b0c <kill_handler+0x30>
		sh->ctx->uninit_cb(sh, err);
 8013b06:	4629      	mov	r1, r5
 8013b08:	4620      	mov	r0, r4
 8013b0a:	4798      	blx	r3
	sh->ctx->tid = NULL;
 8013b0c:	68a3      	ldr	r3, [r4, #8]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
 8013b14:	f7fe ff70 	bl	80129f8 <z_impl_z_current_get>
}
 8013b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
 8013b1c:	f7f0 b9da 	b.w	8003ed4 <z_impl_k_thread_abort>
		return -EBUSY;
 8013b20:	f06f 050f 	mvn.w	r5, #15
 8013b24:	e7ec      	b.n	8013b00 <kill_handler+0x24>

08013b26 <z_flag_cmd_ctx_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
 8013b26:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8013b2a:	b119      	cbz	r1, 8013b34 <z_flag_cmd_ctx_set.isra.0+0xe>
 8013b2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013b30:	f7ff bf81 	b.w	8013a36 <atomic_or>
 8013b34:	f46f 6100 	mvn.w	r1, #2048	; 0x800
 8013b38:	f7ff bf8c 	b.w	8013a54 <atomic_and>

08013b3c <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
 8013b3c:	f500 7019 	add.w	r0, r0, #612	; 0x264
 8013b40:	b111      	cbz	r1, 8013b48 <z_flag_history_exit_set.isra.0+0xc>
 8013b42:	2104      	movs	r1, #4
 8013b44:	f7ff bf77 	b.w	8013a36 <atomic_or>
 8013b48:	f06f 0104 	mvn.w	r1, #4
 8013b4c:	f7ff bf82 	b.w	8013a54 <atomic_and>

08013b50 <z_flag_insert_mode_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
 8013b50:	f500 7018 	add.w	r0, r0, #608	; 0x260
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
 8013b54:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
 8013b56:	b129      	cbz	r1, 8013b64 <z_flag_insert_mode_set.isra.0+0x14>
 8013b58:	2101      	movs	r1, #1
 8013b5a:	f7ff ff6c 	bl	8013a36 <atomic_or>
}
 8013b5e:	f000 0001 	and.w	r0, r0, #1
 8013b62:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
 8013b64:	f06f 0101 	mvn.w	r1, #1
 8013b68:	f7ff ff74 	bl	8013a54 <atomic_and>
 8013b6c:	e7f7      	b.n	8013b5e <z_flag_insert_mode_set.isra.0+0xe>

08013b6e <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8013b6e:	f7fe b9d5 	b.w	8011f1c <z_impl_k_mutex_unlock>

08013b72 <shell_vfprintf>:
{
 8013b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b74:	4604      	mov	r4, r0
	return sh->ctx->state;
 8013b76:	6880      	ldr	r0, [r0, #8]
{
 8013b78:	461f      	mov	r7, r3
 8013b7a:	460d      	mov	r5, r1
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
 8013b7c:	7903      	ldrb	r3, [r0, #4]
{
 8013b7e:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
 8013b80:	2b02      	cmp	r3, #2
 8013b82:	d007      	beq.n	8013b94 <shell_vfprintf+0x22>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
 8013b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b88:	f500 7019 	add.w	r0, r0, #612	; 0x264
}
 8013b8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013b90:	f7ff bf51 	b.w	8013a36 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
 8013b94:	f04f 32ff 	mov.w	r2, #4294967295
 8013b98:	f04f 33ff 	mov.w	r3, #4294967295
 8013b9c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8013ba0:	f7ff ff90 	bl	8013ac4 <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
 8013ba4:	68a3      	ldr	r3, [r4, #8]
 8013ba6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass && z_flag_use_vt100_get(sh)) {
 8013baa:	0510      	lsls	r0, r2, #20
 8013bac:	d408      	bmi.n	8013bc0 <shell_vfprintf+0x4e>
 8013bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013bb0:	b932      	cbnz	r2, 8013bc0 <shell_vfprintf+0x4e>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8013bb2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8013bb6:	0699      	lsls	r1, r3, #26
 8013bb8:	d502      	bpl.n	8013bc0 <shell_vfprintf+0x4e>
		z_shell_cmd_line_erase(sh);
 8013bba:	4620      	mov	r0, r4
 8013bbc:	f000 fba4 	bl	8014308 <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
 8013bc0:	463b      	mov	r3, r7
 8013bc2:	4632      	mov	r2, r6
 8013bc4:	4629      	mov	r1, r5
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	f000 fbff 	bl	80143ca <z_shell_vfprintf>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
 8013bcc:	68a3      	ldr	r3, [r4, #8]
 8013bce:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass && z_flag_use_vt100_get(sh)) {
 8013bd2:	0512      	lsls	r2, r2, #20
 8013bd4:	d408      	bmi.n	8013be8 <shell_vfprintf+0x76>
 8013bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013bd8:	b932      	cbnz	r2, 8013be8 <shell_vfprintf+0x76>
	return sh->ctx->cfg.flags.use_vt100 == 1;
 8013bda:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8013bde:	069b      	lsls	r3, r3, #26
 8013be0:	d502      	bpl.n	8013be8 <shell_vfprintf+0x76>
		z_shell_print_prompt_and_cmd(sh);
 8013be2:	4620      	mov	r0, r4
 8013be4:	f7ef fbfc 	bl	80033e0 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
 8013be8:	6960      	ldr	r0, [r4, #20]
 8013bea:	f000 f85f 	bl	8013cac <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
 8013bee:	68a0      	ldr	r0, [r4, #8]
}
 8013bf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
 8013bf4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
 8013bf8:	f7ff bfb9 	b.w	8013b6e <k_mutex_unlock.isra.0>

08013bfc <shell_fprintf>:
{
 8013bfc:	b40c      	push	{r2, r3}
 8013bfe:	b507      	push	{r0, r1, r2, lr}
 8013c00:	ab04      	add	r3, sp, #16
 8013c02:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
 8013c06:	9301      	str	r3, [sp, #4]
	shell_vfprintf(sh, color, fmt, args);
 8013c08:	f7ff ffb3 	bl	8013b72 <shell_vfprintf>
}
 8013c0c:	b003      	add	sp, #12
 8013c0e:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c12:	b002      	add	sp, #8
 8013c14:	4770      	bx	lr

08013c16 <shell_hexdump>:
{
 8013c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c1a:	4607      	mov	r7, r0
 8013c1c:	460e      	mov	r6, r1
 8013c1e:	4614      	mov	r4, r2
	const uint8_t *p = data;
 8013c20:	460d      	mov	r5, r1
	while (len) {
 8013c22:	b90c      	cbnz	r4, 8013c28 <shell_hexdump+0x12>
}
 8013c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
 8013c28:	2c10      	cmp	r4, #16
 8013c2a:	46a0      	mov	r8, r4
		shell_hexdump_line(sh, p - data, p, line_len);
 8013c2c:	462a      	mov	r2, r5
 8013c2e:	eba5 0106 	sub.w	r1, r5, r6
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
 8013c32:	bf28      	it	cs
 8013c34:	f04f 0810 	movcs.w	r8, #16
		shell_hexdump_line(sh, p - data, p, line_len);
 8013c38:	4638      	mov	r0, r7
 8013c3a:	4643      	mov	r3, r8
		len -= line_len;
 8013c3c:	eba4 0408 	sub.w	r4, r4, r8
		p += line_len;
 8013c40:	4445      	add	r5, r8
		shell_hexdump_line(sh, p - data, p, line_len);
 8013c42:	f7ef f9bd 	bl	8002fc0 <shell_hexdump_line>
		p += line_len;
 8013c46:	e7ec      	b.n	8013c22 <shell_hexdump+0xc>

08013c48 <shell_prompt_change>:
{
 8013c48:	b510      	push	{r4, lr}
 8013c4a:	4604      	mov	r4, r0
	if (prompt == NULL) {
 8013c4c:	4608      	mov	r0, r1
 8013c4e:	b141      	cbz	r1, 8013c62 <shell_prompt_change+0x1a>
	sh->ctx->prompt = prompt;
 8013c50:	68a3      	ldr	r3, [r4, #8]
 8013c52:	6019      	str	r1, [r3, #0]
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(prompt);
 8013c54:	f7ff ff23 	bl	8013a9e <z_shell_strlen>
 8013c58:	68a3      	ldr	r3, [r4, #8]
 8013c5a:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	return 0;
 8013c5e:	2000      	movs	r0, #0
}
 8013c60:	bd10      	pop	{r4, pc}
		return -EINVAL;
 8013c62:	f06f 0015 	mvn.w	r0, #21
 8013c66:	e7fb      	b.n	8013c60 <shell_prompt_change+0x18>

08013c68 <shell_get_return_value>:
	if (sh == NULL) {
 8013c68:	b118      	cbz	r0, 8013c72 <shell_get_return_value+0xa>
	return sh->ctx->ret_val;
 8013c6a:	6883      	ldr	r3, [r0, #8]
 8013c6c:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
	return z_shell_get_return_value(sh);
 8013c70:	4770      	bx	lr
		return -EINVAL;
 8013c72:	f06f 0015 	mvn.w	r0, #21
}
 8013c76:	4770      	bx	lr

08013c78 <shell_echo_set>:
{
 8013c78:	b508      	push	{r3, lr}
	if (sh == NULL) {
 8013c7a:	b170      	cbz	r0, 8013c9a <shell_echo_set+0x22>
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, echo, val, ret);
 8013c7c:	6880      	ldr	r0, [r0, #8]
 8013c7e:	f500 7018 	add.w	r0, r0, #608	; 0x260
 8013c82:	b129      	cbz	r1, 8013c90 <shell_echo_set+0x18>
 8013c84:	2102      	movs	r1, #2
 8013c86:	f7ff fed6 	bl	8013a36 <atomic_or>
 8013c8a:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8013c8e:	bd08      	pop	{r3, pc}
 8013c90:	f06f 0102 	mvn.w	r1, #2
 8013c94:	f7ff fede 	bl	8013a54 <atomic_and>
 8013c98:	e7f7      	b.n	8013c8a <shell_echo_set+0x12>
		return -EINVAL;
 8013c9a:	f06f 0015 	mvn.w	r0, #21
 8013c9e:	e7f6      	b.n	8013c8e <shell_echo_set+0x16>

08013ca0 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
 8013ca0:	6883      	ldr	r3, [r0, #8]
 8013ca2:	6399      	str	r1, [r3, #56]	; 0x38
	if (bypass == NULL) {
 8013ca4:	b909      	cbnz	r1, 8013caa <shell_set_bypass+0xa>
		cmd_buffer_clear(sh);
 8013ca6:	f7ff bebd 	b.w	8013a24 <cmd_buffer_clear>
}
 8013caa:	4770      	bx	lr

08013cac <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
 8013cac:	b510      	push	{r4, lr}
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 8013cae:	6902      	ldr	r2, [r0, #16]
{
 8013cb0:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
 8013cb2:	6883      	ldr	r3, [r0, #8]
 8013cb4:	6812      	ldr	r2, [r2, #0]
 8013cb6:	6801      	ldr	r1, [r0, #0]
 8013cb8:	68c0      	ldr	r0, [r0, #12]
 8013cba:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
 8013cbc:	6923      	ldr	r3, [r4, #16]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	601a      	str	r2, [r3, #0]
}
 8013cc2:	bd10      	pop	{r4, pc}

08013cc4 <out_func>:
{
 8013cc4:	b538      	push	{r3, r4, r5, lr}
	if ((sh->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 8013cc6:	68cb      	ldr	r3, [r1, #12]
{
 8013cc8:	4605      	mov	r5, r0
 8013cca:	460c      	mov	r4, r1
	if ((sh->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
 8013ccc:	7c1b      	ldrb	r3, [r3, #16]
 8013cce:	2b02      	cmp	r3, #2
 8013cd0:	d104      	bne.n	8013cdc <out_func+0x18>
 8013cd2:	280a      	cmp	r0, #10
 8013cd4:	d102      	bne.n	8013cdc <out_func+0x18>
		(void)out_func('\r', ctx);
 8013cd6:	200d      	movs	r0, #13
 8013cd8:	f7ff fff4 	bl	8013cc4 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
 8013cdc:	6923      	ldr	r3, [r4, #16]
 8013cde:	6822      	ldr	r2, [r4, #0]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
 8013ce4:	6922      	ldr	r2, [r4, #16]
 8013ce6:	6813      	ldr	r3, [r2, #0]
 8013ce8:	3301      	adds	r3, #1
 8013cea:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
 8013cec:	6923      	ldr	r3, [r4, #16]
 8013cee:	681a      	ldr	r2, [r3, #0]
 8013cf0:	6863      	ldr	r3, [r4, #4]
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d102      	bne.n	8013cfc <out_func+0x38>
		z_shell_fprintf_buffer_flush(sh_fprintf);
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	f7ff ffd8 	bl	8013cac <z_shell_fprintf_buffer_flush>
}
 8013cfc:	2000      	movs	r0, #0
 8013cfe:	bd38      	pop	{r3, r4, r5, pc}

08013d00 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 8013d00:	2820      	cmp	r0, #32
 8013d02:	d005      	beq.n	8013d10 <isspace+0x10>
 8013d04:	3809      	subs	r0, #9
 8013d06:	2804      	cmp	r0, #4
 8013d08:	bf8c      	ite	hi
 8013d0a:	2000      	movhi	r0, #0
 8013d0c:	2001      	movls	r0, #1
 8013d0e:	4770      	bx	lr
 8013d10:	2001      	movs	r0, #1
}
 8013d12:	4770      	bx	lr

08013d14 <z_shell_strlen>:
{
 8013d14:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
 8013d16:	b110      	cbz	r0, 8013d1e <z_shell_strlen+0xa>
 8013d18:	f000 ff60 	bl	8014bdc <strlen>
 8013d1c:	b280      	uxth	r0, r0
}
 8013d1e:	bd08      	pop	{r3, pc}

08013d20 <z_errno>:
 8013d20:	f7fd bd02 	b.w	8011728 <z_impl_z_errno>

08013d24 <z_column_span_with_buffer_offsets_get>:
{
 8013d24:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
 8013d26:	7b03      	ldrb	r3, [r0, #12]
 8013d28:	8940      	ldrh	r0, [r0, #10]
 8013d2a:	441a      	add	r2, r3
 8013d2c:	4419      	add	r1, r3
 8013d2e:	fbb2 f4f0 	udiv	r4, r2, r0
 8013d32:	fbb1 f3f0 	udiv	r3, r1, r0
 8013d36:	fb00 2214 	mls	r2, r0, r4, r2
 8013d3a:	fb00 1013 	mls	r0, r0, r3, r1
}
 8013d3e:	1a10      	subs	r0, r2, r0
 8013d40:	bd10      	pop	{r4, pc}

08013d42 <z_row_span_with_buffer_offsets_get>:
{
 8013d42:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
 8013d44:	7b04      	ldrb	r4, [r0, #12]
 8013d46:	8943      	ldrh	r3, [r0, #10]
 8013d48:	4421      	add	r1, r4
 8013d4a:	1910      	adds	r0, r2, r4
 8013d4c:	fbb1 f1f3 	udiv	r1, r1, r3
 8013d50:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8013d54:	1a40      	subs	r0, r0, r1
 8013d56:	bd10      	pop	{r4, pc}

08013d58 <z_shell_multiline_data_calc>:
{
 8013d58:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 8013d5a:	7b05      	ldrb	r5, [r0, #12]
 8013d5c:	8943      	ldrh	r3, [r0, #10]
 8013d5e:	4429      	add	r1, r5
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8013d60:	442a      	add	r2, r5
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 8013d62:	fbb1 f4f3 	udiv	r4, r1, r3
 8013d66:	fb03 1114 	mls	r1, r3, r4, r1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 8013d6a:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 8013d6c:	3101      	adds	r1, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
 8013d6e:	8084      	strh	r4, [r0, #4]
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
 8013d70:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8013d72:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 8013d76:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8013d7a:	1c4c      	adds	r4, r1, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 8013d7c:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
 8013d7e:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
 8013d80:	8042      	strh	r2, [r0, #2]
}
 8013d82:	bd30      	pop	{r4, r5, pc}

08013d84 <z_shell_make_argv>:
{
 8013d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
 8013d88:	2500      	movs	r5, #0
{
 8013d8a:	4606      	mov	r6, r0
 8013d8c:	460f      	mov	r7, r1
 8013d8e:	4614      	mov	r4, r2
 8013d90:	4698      	mov	r8, r3
	*argc = 0;
 8013d92:	6005      	str	r5, [r0, #0]
		c = *cmd;
 8013d94:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
 8013d96:	2800      	cmp	r0, #0
 8013d98:	f000 80b6 	beq.w	8013f08 <z_shell_make_argv+0x184>
		if (isspace((int) c) != 0) {
 8013d9c:	f7ff ffb0 	bl	8013d00 <isspace>
 8013da0:	b118      	cbz	r0, 8013daa <z_shell_make_argv+0x26>
			*cmd++ = '\0';
 8013da2:	2300      	movs	r3, #0
 8013da4:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
 8013da8:	e7f4      	b.n	8013d94 <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
 8013daa:	6833      	ldr	r3, [r6, #0]
 8013dac:	1c5a      	adds	r2, r3, #1
 8013dae:	6032      	str	r2, [r6, #0]
 8013db0:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		if (*argc == max_argc) {
 8013db4:	6833      	ldr	r3, [r6, #0]
 8013db6:	4543      	cmp	r3, r8
 8013db8:	f000 80a6 	beq.w	8013f08 <z_shell_make_argv+0x184>
	char quote = 0;
 8013dbc:	4605      	mov	r5, r0
		c = *cmd;
 8013dbe:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
 8013dc2:	f1b9 0f00 	cmp.w	r9, #0
 8013dc6:	d0e5      	beq.n	8013d94 <z_shell_make_argv+0x10>
		if (!quote) {
 8013dc8:	2d00      	cmp	r5, #0
 8013dca:	f040 8089 	bne.w	8013ee0 <z_shell_make_argv+0x15c>
			switch (c) {
 8013dce:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
 8013dd2:	d006      	beq.n	8013de2 <z_shell_make_argv+0x5e>
 8013dd4:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8013dd8:	f000 808a 	beq.w	8013ef0 <z_shell_make_argv+0x16c>
 8013ddc:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
 8013de0:	d176      	bne.n	8013ed0 <z_shell_make_argv+0x14c>
						z_shell_strlen(cmd));
 8013de2:	4620      	mov	r0, r4
				continue;
 8013de4:	464d      	mov	r5, r9
						z_shell_strlen(cmd));
 8013de6:	f7ff ff95 	bl	8013d14 <z_shell_strlen>
				memmove(cmd, cmd + 1,
 8013dea:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
 8013dec:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
 8013dee:	4620      	mov	r0, r4
 8013df0:	f000 ff29 	bl	8014c46 <memmove>
				continue;
 8013df4:	e7e3      	b.n	8013dbe <z_shell_make_argv+0x3a>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
 8013df6:	4620      	mov	r0, r4
			quote = 0;
 8013df8:	2500      	movs	r5, #0
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
 8013dfa:	f7ff ff8b 	bl	8013d14 <z_shell_strlen>
 8013dfe:	1c61      	adds	r1, r4, #1
 8013e00:	4602      	mov	r2, r0
 8013e02:	4620      	mov	r0, r4
 8013e04:	f000 ff1f 	bl	8014c46 <memmove>
			continue;
 8013e08:	e7d9      	b.n	8013dbe <z_shell_make_argv+0x3a>
			if (t == '0') {
 8013e0a:	2930      	cmp	r1, #48	; 0x30
 8013e0c:	d126      	bne.n	8013e5c <z_shell_make_argv+0xd8>
 8013e0e:	2302      	movs	r3, #2
				uint8_t v = 0U;
 8013e10:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
 8013e14:	5ce1      	ldrb	r1, [r4, r3]
 8013e16:	fa5f f983 	uxtb.w	r9, r3
					if (t >= '0' && t <= '7') {
 8013e1a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013e1e:	b2d2      	uxtb	r2, r2
 8013e20:	2a07      	cmp	r2, #7
 8013e22:	d818      	bhi.n	8013e56 <z_shell_make_argv+0xd2>
				for (i = 2U; i < (2 + 3); i++) {
 8013e24:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
 8013e26:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
 8013e2a:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
 8013e2c:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
 8013e30:	d1f0      	bne.n	8013e14 <z_shell_make_argv+0x90>
 8013e32:	4699      	mov	r9, r3
					memmove(cmd, cmd + (i - 1),
 8013e34:	f109 3bff 	add.w	fp, r9, #4294967295
						z_shell_strlen(cmd) - (i - 2));
 8013e38:	f1a9 0902 	sub.w	r9, r9, #2
 8013e3c:	4620      	mov	r0, r4
					memmove(cmd, cmd + (i - 1),
 8013e3e:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
 8013e40:	f7ff ff68 	bl	8013d14 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
 8013e44:	eba0 0209 	sub.w	r2, r0, r9
 8013e48:	4620      	mov	r0, r4
 8013e4a:	4659      	mov	r1, fp
 8013e4c:	f000 fefb 	bl	8014c46 <memmove>
					*cmd++ = v;
 8013e50:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
 8013e54:	e7b3      	b.n	8013dbe <z_shell_make_argv+0x3a>
				if (i > 2) {
 8013e56:	f1b9 0f02 	cmp.w	r9, #2
 8013e5a:	d1eb      	bne.n	8013e34 <z_shell_make_argv+0xb0>
			if (t == 'x') {
 8013e5c:	2978      	cmp	r1, #120	; 0x78
 8013e5e:	d13d      	bne.n	8013edc <z_shell_make_argv+0x158>
 8013e60:	2102      	movs	r1, #2
				uint8_t v = 0U;
 8013e62:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
 8013e66:	5c62      	ldrb	r2, [r4, r1]
 8013e68:	b2c8      	uxtb	r0, r1
					if (t >= '0' && t <= '9') {
 8013e6a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	2b09      	cmp	r3, #9
 8013e72:	d81a      	bhi.n	8013eaa <z_shell_make_argv+0x126>
						v = (v << 4) | (t - '0');
 8013e74:	ea43 1209 	orr.w	r2, r3, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
 8013e78:	2903      	cmp	r1, #3
						v = (v << 4) | (t - 'A' + 10);
 8013e7a:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
 8013e7e:	d112      	bne.n	8013ea6 <z_shell_make_argv+0x122>
 8013e80:	f04f 0a04 	mov.w	sl, #4
					memmove(cmd, cmd + (i - 1),
 8013e84:	f10a 3bff 	add.w	fp, sl, #4294967295
						z_shell_strlen(cmd) - (i - 2));
 8013e88:	f1aa 0a02 	sub.w	sl, sl, #2
 8013e8c:	4620      	mov	r0, r4
					memmove(cmd, cmd + (i - 1),
 8013e8e:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
 8013e90:	f7ff ff40 	bl	8013d14 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
 8013e94:	eba0 020a 	sub.w	r2, r0, sl
 8013e98:	4620      	mov	r0, r4
 8013e9a:	4659      	mov	r1, fp
 8013e9c:	f000 fed3 	bl	8014c46 <memmove>
					*cmd++ = v;
 8013ea0:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
 8013ea4:	e78b      	b.n	8013dbe <z_shell_make_argv+0x3a>
 8013ea6:	2103      	movs	r1, #3
 8013ea8:	e7dd      	b.n	8013e66 <z_shell_make_argv+0xe2>
					} else if ((t >= 'a') &&
 8013eaa:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8013eae:	2b05      	cmp	r3, #5
 8013eb0:	d803      	bhi.n	8013eba <z_shell_make_argv+0x136>
						v = (v << 4) | (t - 'a' + 10);
 8013eb2:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
 8013eb4:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
 8013eb8:	e7de      	b.n	8013e78 <z_shell_make_argv+0xf4>
					} else if ((t >= 'A') && (t <= 'F')) {
 8013eba:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8013ebe:	2b05      	cmp	r3, #5
 8013ec0:	d801      	bhi.n	8013ec6 <z_shell_make_argv+0x142>
						v = (v << 4) | (t - 'A' + 10);
 8013ec2:	3a37      	subs	r2, #55	; 0x37
 8013ec4:	e7f6      	b.n	8013eb4 <z_shell_make_argv+0x130>
				if (i > 2) {
 8013ec6:	2802      	cmp	r0, #2
 8013ec8:	d008      	beq.n	8013edc <z_shell_make_argv+0x158>
 8013eca:	f04f 0a03 	mov.w	sl, #3
 8013ece:	e7d9      	b.n	8013e84 <z_shell_make_argv+0x100>
		if (!quote && isspace((int) c) != 0) {
 8013ed0:	4648      	mov	r0, r9
 8013ed2:	f7ff ff15 	bl	8013d00 <isspace>
 8013ed6:	2800      	cmp	r0, #0
 8013ed8:	f47f af5c 	bne.w	8013d94 <z_shell_make_argv+0x10>
		cmd += 1;
 8013edc:	3401      	adds	r4, #1
 8013ede:	e76e      	b.n	8013dbe <z_shell_make_argv+0x3a>
		if (quote == c) {
 8013ee0:	45a9      	cmp	r9, r5
 8013ee2:	d088      	beq.n	8013df6 <z_shell_make_argv+0x72>
		if (quote && c == '\\') {
 8013ee4:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
 8013ee8:	d1f8      	bne.n	8013edc <z_shell_make_argv+0x158>
			char t = *(cmd + 1);
 8013eea:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
 8013eec:	428d      	cmp	r5, r1
 8013eee:	d18c      	bne.n	8013e0a <z_shell_make_argv+0x86>
				memmove(cmd, cmd + 1,
 8013ef0:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	f7ff ff0d 	bl	8013d14 <z_shell_strlen>
 8013efa:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
 8013efc:	4649      	mov	r1, r9
 8013efe:	4620      	mov	r0, r4
 8013f00:	f000 fea1 	bl	8014c46 <memmove>
				cmd += 1;
 8013f04:	464c      	mov	r4, r9
				continue;
 8013f06:	e75a      	b.n	8013dbe <z_shell_make_argv+0x3a>
}
 8013f08:	4628      	mov	r0, r5
 8013f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f0e <z_shell_pattern_remove>:
{
 8013f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f10:	4615      	mov	r5, r2
 8013f12:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
 8013f14:	4611      	mov	r1, r2
{
 8013f16:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
 8013f18:	f000 fe0a 	bl	8014b30 <strstr>
 8013f1c:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
 8013f1e:	4628      	mov	r0, r5
 8013f20:	f7ff fef8 	bl	8013d14 <z_shell_strlen>
 8013f24:	4605      	mov	r5, r0
	if (!pattern_addr) {
 8013f26:	b1c4      	cbz	r4, 8013f5a <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
 8013f28:	42a7      	cmp	r7, r4
 8013f2a:	d207      	bcs.n	8013f3c <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
 8013f2c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8013f30:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
 8013f32:	bf02      	ittt	eq
 8013f34:	3501      	addeq	r5, #1
			pattern_addr--; /* set pointer to space */
 8013f36:	f104 34ff 	addeq.w	r4, r4, #4294967295
			pattern_len++; /* space needs to be removed as well */
 8013f3a:	b2ad      	uxtheq	r5, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	f7ff fee9 	bl	8013d14 <z_shell_strlen>
	*buff_len -= pattern_len;
 8013f42:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8013f44:	1c42      	adds	r2, r0, #1
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
 8013f46:	1961      	adds	r1, r4, r5
	*buff_len -= pattern_len;
 8013f48:	1b5b      	subs	r3, r3, r5
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
 8013f4a:	4620      	mov	r0, r4
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
 8013f4c:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
 8013f4e:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
 8013f50:	b292      	uxth	r2, r2
}
 8013f52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
 8013f56:	f000 be76 	b.w	8014c46 <memmove>
}
 8013f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013f5c <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
 8013f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f60:	4688      	mov	r8, r1
 8013f62:	b086      	sub	sp, #24
 8013f64:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
 8013f66:	4604      	mov	r4, r0
 8013f68:	b128      	cbz	r0, 8013f76 <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
		parent = &parent_cpy;
 8013f6a:	ac01      	add	r4, sp, #4
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
 8013f6c:	4601      	mov	r1, r0
 8013f6e:	2214      	movs	r2, #20
 8013f70:	a801      	add	r0, sp, #4
 8013f72:	f000 fe80 	bl	8014c76 <memcpy>
		parent = &parent_cpy;
 8013f76:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
 8013f78:	4631      	mov	r1, r6
 8013f7a:	463a      	mov	r2, r7
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	3601      	adds	r6, #1
 8013f80:	f7ef f89e 	bl	80030c0 <z_shell_cmd_get>
 8013f84:	4605      	mov	r5, r0
 8013f86:	b128      	cbz	r0, 8013f94 <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
 8013f88:	6829      	ldr	r1, [r5, #0]
 8013f8a:	4640      	mov	r0, r8
 8013f8c:	f000 fe2d 	bl	8014bea <strcmp>
 8013f90:	2800      	cmp	r0, #0
 8013f92:	d1f1      	bne.n	8013f78 <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
 8013f94:	4628      	mov	r0, r5
 8013f96:	b006      	add	sp, #24
 8013f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013f9c <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
 8013f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013fa4:	461c      	mov	r4, r3
 8013fa6:	460f      	mov	r7, r1
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
 8013fa8:	2300      	movs	r3, #0
{
 8013faa:	4616      	mov	r6, r2
 8013fac:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
 8013fb0:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
 8013fb2:	6823      	ldr	r3, [r4, #0]

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
 8013fb4:	4605      	mov	r5, r0
	while (*match_arg < argc) {
 8013fb6:	42bb      	cmp	r3, r7
 8013fb8:	d21b      	bcs.n	8013ff2 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
 8013fba:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8013fbe:	f000 fc75 	bl	80148ac <z_shell_has_wildcard>
 8013fc2:	6823      	ldr	r3, [r4, #0]
 8013fc4:	4682      	mov	sl, r0
 8013fc6:	b118      	cbz	r0, 8013fd0 <z_shell_get_last_command+0x34>
				(*match_arg)++;
 8013fc8:	3301      	adds	r3, #1
				continue;
 8013fca:	4628      	mov	r0, r5
				(*match_arg)++;
 8013fcc:	6023      	str	r3, [r4, #0]
				continue;
 8013fce:	e7f0      	b.n	8013fb2 <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
 8013fd0:	4642      	mov	r2, r8
 8013fd2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8013fd6:	4628      	mov	r0, r5
 8013fd8:	f7ff ffc0 	bl	8013f5c <z_shell_find_cmd>
		if (entry) {
 8013fdc:	b148      	cbz	r0, 8013ff2 <z_shell_get_last_command+0x56>
			(*match_arg)++;
 8013fde:	6823      	ldr	r3, [r4, #0]
 8013fe0:	1c5a      	adds	r2, r3, #1
 8013fe2:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
 8013fe4:	f1b9 0f00 	cmp.w	r9, #0
 8013fe8:	d0e3      	beq.n	8013fb2 <z_shell_get_last_command+0x16>
 8013fea:	4580      	cmp	r8, r0
 8013fec:	d1e1      	bne.n	8013fb2 <z_shell_get_last_command+0x16>
			(*match_arg)--;
			return NULL;
 8013fee:	4655      	mov	r5, sl
			(*match_arg)--;
 8013ff0:	6023      	str	r3, [r4, #0]
		}
	}

	return entry;
}
 8013ff2:	4628      	mov	r0, r5
 8013ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013ff8 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
 8013ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ffc:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
 8013ffe:	f7ff fe89 	bl	8013d14 <z_shell_strlen>
 8014002:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
 8014004:	bb47      	cbnz	r7, 8014058 <z_shell_spaces_trim+0x60>

				break;
			}
		}
	}
}
 8014006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (shift > 0) {
 801400a:	b14c      	cbz	r4, 8014020 <z_shell_spaces_trim+0x28>
						len - j + 1);
 801400c:	b292      	uxth	r2, r2
					memmove(&str[i + 1],
 801400e:	1c58      	adds	r0, r3, #1
						len - j + 1);
 8014010:	1ab2      	subs	r2, r6, r2
					len -= shift;
 8014012:	1b36      	subs	r6, r6, r4
					shift = 0U;
 8014014:	4644      	mov	r4, r8
					memmove(&str[i + 1],
 8014016:	4438      	add	r0, r7
					len -= shift;
 8014018:	b2b6      	uxth	r6, r6
					memmove(&str[i + 1],
 801401a:	3201      	adds	r2, #1
 801401c:	f000 fe13 	bl	8014c46 <memmove>
	for (uint16_t i = 0; i < len - 1; i++) {
 8014020:	1e73      	subs	r3, r6, #1
 8014022:	429d      	cmp	r5, r3
 8014024:	daef      	bge.n	8014006 <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i]) != 0) {
 8014026:	5d78      	ldrb	r0, [r7, r5]
 8014028:	462b      	mov	r3, r5
			for (uint16_t j = i + 1; j < len; j++) {
 801402a:	3501      	adds	r5, #1
		if (isspace((int)str[i]) != 0) {
 801402c:	f7ff fe68 	bl	8013d00 <isspace>
			for (uint16_t j = i + 1; j < len; j++) {
 8014030:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i]) != 0) {
 8014032:	2800      	cmp	r0, #0
 8014034:	d0f4      	beq.n	8014020 <z_shell_spaces_trim+0x28>
 8014036:	462a      	mov	r2, r5
			for (uint16_t j = i + 1; j < len; j++) {
 8014038:	b291      	uxth	r1, r2
 801403a:	428e      	cmp	r6, r1
 801403c:	d9f0      	bls.n	8014020 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j]) != 0) {
 801403e:	5cb8      	ldrb	r0, [r7, r2]
 8014040:	18b9      	adds	r1, r7, r2
 8014042:	f7ff fe5d 	bl	8013d00 <isspace>
 8014046:	f102 0c01 	add.w	ip, r2, #1
 801404a:	4680      	mov	r8, r0
 801404c:	2800      	cmp	r0, #0
 801404e:	d0dc      	beq.n	801400a <z_shell_spaces_trim+0x12>
					shift++;
 8014050:	3401      	adds	r4, #1
 8014052:	4662      	mov	r2, ip
 8014054:	b2a4      	uxth	r4, r4
			for (uint16_t j = i + 1; j < len; j++) {
 8014056:	e7ef      	b.n	8014038 <z_shell_spaces_trim+0x40>
	for (uint16_t i = 0; i < len - 1; i++) {
 8014058:	2500      	movs	r5, #0
	uint16_t shift = 0U;
 801405a:	462c      	mov	r4, r5
 801405c:	e7e0      	b.n	8014020 <z_shell_spaces_trim+0x28>

0801405e <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *sh)
{
 801405e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(sh->ctx->cmd_buff, &sh->ctx->cmd_buff_len);
 8014060:	6884      	ldr	r4, [r0, #8]
{
 8014062:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
 8014064:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8014068:	b953      	cbnz	r3, 8014080 <z_shell_cmd_trim+0x22>
	sh->ctx->cmd_buff_pos = sh->ctx->cmd_buff_len;
 801406a:	68ab      	ldr	r3, [r5, #8]
 801406c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801406e:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 8014070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
 8014072:	3a01      	subs	r2, #1
 8014074:	b292      	uxth	r2, r2
 8014076:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
 8014078:	b922      	cbnz	r2, 8014084 <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
 801407a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
 801407e:	e7f4      	b.n	801406a <z_shell_cmd_trim+0xc>
	buffer_trim(sh->ctx->cmd_buff, &sh->ctx->cmd_buff_len);
 8014080:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U]) != 0) {
 8014084:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8014086:	18b3      	adds	r3, r6, r2
 8014088:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 801408c:	f7ff fe38 	bl	8013d00 <isspace>
 8014090:	4603      	mov	r3, r0
 8014092:	2800      	cmp	r0, #0
 8014094:	d1ed      	bne.n	8014072 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
 8014096:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++]) != 0) {
 8014098:	b29f      	uxth	r7, r3
 801409a:	fa16 f183 	uxtah	r1, r6, r3
 801409e:	3301      	adds	r3, #1
 80140a0:	5df0      	ldrb	r0, [r6, r7]
 80140a2:	f7ff fe2d 	bl	8013d00 <isspace>
 80140a6:	2800      	cmp	r0, #0
 80140a8:	d1f6      	bne.n	8014098 <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
 80140aa:	2f00      	cmp	r7, #0
 80140ac:	d0dd      	beq.n	801406a <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
 80140ae:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80140b0:	4630      	mov	r0, r6
 80140b2:	3301      	adds	r3, #1
 80140b4:	1bda      	subs	r2, r3, r7
 80140b6:	f000 fdc6 	bl	8014c46 <memmove>
		*buff_len = *buff_len - i;
 80140ba:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80140bc:	1bdb      	subs	r3, r3, r7
 80140be:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80140c0:	e7d3      	b.n	801406a <z_shell_cmd_trim+0xc>

080140c2 <shell_strtoul>:

	return val;
}

unsigned long shell_strtoul(const char *str, int base, int *err)
{
 80140c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	unsigned long val;
	char *endptr = NULL;

	if (*str == '-') {
 80140c4:	7803      	ldrb	r3, [r0, #0]
	char *endptr = NULL;
 80140c6:	2700      	movs	r7, #0
{
 80140c8:	4605      	mov	r5, r0
 80140ca:	460c      	mov	r4, r1
	if (*str == '-') {
 80140cc:	2b2d      	cmp	r3, #45	; 0x2d
{
 80140ce:	4616      	mov	r6, r2
	char *endptr = NULL;
 80140d0:	9701      	str	r7, [sp, #4]
	if (*str == '-') {
 80140d2:	d106      	bne.n	80140e2 <shell_strtoul+0x20>
		*err = -EINVAL;
 80140d4:	f06f 0315 	mvn.w	r3, #21
		return 0;
 80140d8:	2400      	movs	r4, #0
		*err = -EINVAL;
 80140da:	6033      	str	r3, [r6, #0]
		*err = -EINVAL;
		return 0;
	}

	return val;
}
 80140dc:	4620      	mov	r0, r4
 80140de:	b003      	add	sp, #12
 80140e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	errno = 0;
 80140e2:	f7ff fe1d 	bl	8013d20 <z_errno>
	val = strtoul(str, &endptr, base);
 80140e6:	4622      	mov	r2, r4
 80140e8:	a901      	add	r1, sp, #4
	errno = 0;
 80140ea:	6007      	str	r7, [r0, #0]
	val = strtoul(str, &endptr, base);
 80140ec:	4628      	mov	r0, r5
 80140ee:	f000 fca6 	bl	8014a3e <strtoul>
 80140f2:	4604      	mov	r4, r0
	if (errno == ERANGE) {
 80140f4:	f7ff fe14 	bl	8013d20 <z_errno>
 80140f8:	6803      	ldr	r3, [r0, #0]
 80140fa:	2b22      	cmp	r3, #34	; 0x22
 80140fc:	d102      	bne.n	8014104 <shell_strtoul+0x42>
		*err = -ERANGE;
 80140fe:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8014102:	e7e9      	b.n	80140d8 <shell_strtoul+0x16>
	} else if (errno || endptr == str || *endptr) {
 8014104:	f7ff fe0c 	bl	8013d20 <z_errno>
 8014108:	6803      	ldr	r3, [r0, #0]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d1e2      	bne.n	80140d4 <shell_strtoul+0x12>
 801410e:	9b01      	ldr	r3, [sp, #4]
 8014110:	42ab      	cmp	r3, r5
 8014112:	d0df      	beq.n	80140d4 <shell_strtoul+0x12>
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d0e0      	beq.n	80140dc <shell_strtoul+0x1a>
 801411a:	e7db      	b.n	80140d4 <shell_strtoul+0x12>

0801411c <z_shell_raw_fprintf>:
{
 801411c:	b40e      	push	{r1, r2, r3}
 801411e:	b503      	push	{r0, r1, lr}
 8014120:	aa03      	add	r2, sp, #12
 8014122:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8014126:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 8014128:	f7ee ffb2 	bl	8003090 <z_shell_fprintf_fmt>
}
 801412c:	b002      	add	sp, #8
 801412e:	f85d eb04 	ldr.w	lr, [sp], #4
 8014132:	b003      	add	sp, #12
 8014134:	4770      	bx	lr

08014136 <full_line_cmd>:
{
 8014136:	b538      	push	{r3, r4, r5, lr}
	return ((sh->ctx->cmd_buff_len + z_shell_strlen(sh->ctx->prompt))
 8014138:	6882      	ldr	r2, [r0, #8]
{
 801413a:	4604      	mov	r4, r0
	return ((sh->ctx->cmd_buff_len + z_shell_strlen(sh->ctx->prompt))
 801413c:	6810      	ldr	r0, [r2, #0]
 801413e:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
 8014140:	b110      	cbz	r0, 8014148 <full_line_cmd+0x12>
 8014142:	f000 fd4b 	bl	8014bdc <strlen>
 8014146:	b280      	uxth	r0, r0
			% sh->ctx->vt100_ctx.cons.terminal_wid == 0U);
 8014148:	68a2      	ldr	r2, [r4, #8]
	return ((sh->ctx->cmd_buff_len + z_shell_strlen(sh->ctx->prompt))
 801414a:	1943      	adds	r3, r0, r5
			% sh->ctx->vt100_ctx.cons.terminal_wid == 0U);
 801414c:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
 801414e:	fbb3 f2f0 	udiv	r2, r3, r0
 8014152:	fb00 3012 	mls	r0, r0, r2, r3
}
 8014156:	fab0 f080 	clz	r0, r0
 801415a:	0940      	lsrs	r0, r0, #5
 801415c:	bd38      	pop	{r3, r4, r5, pc}

0801415e <z_shell_cursor_in_empty_line>:
{
 801415e:	b538      	push	{r3, r4, r5, lr}
	return (((sh->ctx->cmd_buff_pos * sh->ctx->cfg.flags.echo) +
 8014160:	6882      	ldr	r2, [r0, #8]
{
 8014162:	4604      	mov	r4, r0
	return (((sh->ctx->cmd_buff_pos * sh->ctx->cfg.flags.echo) +
 8014164:	f8d2 5260 	ldr.w	r5, [r2, #608]	; 0x260
 8014168:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 801416a:	f3c5 0540 	ubfx	r5, r5, #1, #1
		 z_shell_strlen(sh->ctx->prompt)) %
 801416e:	6810      	ldr	r0, [r2, #0]
	return (((sh->ctx->cmd_buff_pos * sh->ctx->cfg.flags.echo) +
 8014170:	435d      	muls	r5, r3
 8014172:	b110      	cbz	r0, 801417a <z_shell_cursor_in_empty_line+0x1c>
 8014174:	f000 fd32 	bl	8014bdc <strlen>
 8014178:	b280      	uxth	r0, r0
			sh->ctx->vt100_ctx.cons.terminal_wid ==
 801417a:	68a2      	ldr	r2, [r4, #8]
	return (((sh->ctx->cmd_buff_pos * sh->ctx->cfg.flags.echo) +
 801417c:	1943      	adds	r3, r0, r5
			sh->ctx->vt100_ctx.cons.terminal_wid ==
 801417e:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
		 z_shell_strlen(sh->ctx->prompt)) %
 8014180:	fbb3 f2f0 	udiv	r2, r3, r0
 8014184:	fb00 3012 	mls	r0, r0, r2, r3
}
 8014188:	fab0 f080 	clz	r0, r0
 801418c:	0940      	lsrs	r0, r0, #5
 801418e:	bd38      	pop	{r3, r4, r5, pc}

08014190 <z_shell_op_cond_next_line>:
{
 8014190:	b510      	push	{r4, lr}
 8014192:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(sh) || full_line_cmd(sh)) {
 8014194:	f7ff ffe3 	bl	801415e <z_shell_cursor_in_empty_line>
 8014198:	b120      	cbz	r0, 80141a4 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(sh);
 801419a:	6960      	ldr	r0, [r4, #20]
}
 801419c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(sh);
 80141a0:	f7ee bfd6 	b.w	8003150 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(sh) || full_line_cmd(sh)) {
 80141a4:	4620      	mov	r0, r4
 80141a6:	f7ff ffc6 	bl	8014136 <full_line_cmd>
 80141aa:	2800      	cmp	r0, #0
 80141ac:	d1f5      	bne.n	801419a <z_shell_op_cond_next_line+0xa>
}
 80141ae:	bd10      	pop	{r4, pc}

080141b0 <z_shell_op_cursor_position_synchronize>:
{
 80141b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &sh->ctx->vt100_ctx.cons;
 80141b2:	6884      	ldr	r4, [r0, #8]
{
 80141b4:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, sh->ctx->cmd_buff_pos,
 80141b6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80141b8:	f104 0020 	add.w	r0, r4, #32
 80141bc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80141be:	f7ff fdcb 	bl	8013d58 <z_shell_multiline_data_calc>
	if (full_line_cmd(sh)) {
 80141c2:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
 80141c4:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
 80141c6:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(sh)) {
 80141c8:	f7ff ffb5 	bl	8014136 <full_line_cmd>
 80141cc:	b110      	cbz	r0, 80141d4 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(sh);
 80141ce:	6968      	ldr	r0, [r5, #20]
 80141d0:	f7ee ffbe 	bl	8003150 <z_cursor_next_line_move.isra.0>
	if (last_line) {
 80141d4:	42b7      	cmp	r7, r6
 80141d6:	d107      	bne.n	80141e8 <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(sh, cons->cur_x -
 80141d8:	8c21      	ldrh	r1, [r4, #32]
 80141da:	4628      	mov	r0, r5
							       cons->cur_x_end);
 80141dc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(sh, cons->cur_x -
 80141de:	1ac9      	subs	r1, r1, r3
}
 80141e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(sh, cons->cur_x -
 80141e4:	f7ee bfd0 	b.w	8003188 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(sh, cons->cur_y_end - cons->cur_y);
 80141e8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80141ea:	4628      	mov	r0, r5
 80141ec:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80141ee:	1ac9      	subs	r1, r1, r3
 80141f0:	f7ee ffb4 	bl	800315c <z_shell_op_cursor_vert_move>
 80141f4:	e7f0      	b.n	80141d8 <z_shell_op_cursor_position_synchronize+0x28>

080141f6 <z_shell_op_cursor_move>:
{
 80141f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141f8:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &sh->ctx->vt100_ctx.cons;
 80141fa:	6880      	ldr	r0, [r0, #8]
{
 80141fc:	460d      	mov	r5, r1
	uint16_t new_pos = sh->ctx->cmd_buff_pos + val;
 80141fe:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, sh->ctx->cmd_buff_pos,
 8014200:	3020      	adds	r0, #32
 8014202:	8b82      	ldrh	r2, [r0, #28]
	uint16_t new_pos = sh->ctx->cmd_buff_pos + val;
 8014204:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, sh->ctx->cmd_buff_pos,
 8014206:	f7ff fda7 	bl	8013d58 <z_shell_multiline_data_calc>
						&sh->ctx->vt100_ctx.cons,
 801420a:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = sh->ctx->cmd_buff_pos + val;
 801420c:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
 801420e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8014210:	3020      	adds	r0, #32
 8014212:	462a      	mov	r2, r5
 8014214:	f7ff fd95 	bl	8013d42 <z_row_span_with_buffer_offsets_get>
 8014218:	4607      	mov	r7, r0
						&sh->ctx->vt100_ctx.cons,
 801421a:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
 801421c:	462a      	mov	r2, r5
 801421e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8014220:	3020      	adds	r0, #32
 8014222:	f7ff fd7f 	bl	8013d24 <z_column_span_with_buffer_offsets_get>
 8014226:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(sh, -row_span);
 8014228:	4279      	negs	r1, r7
 801422a:	4620      	mov	r0, r4
 801422c:	f7ee ff96 	bl	800315c <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(sh, col_span);
 8014230:	4631      	mov	r1, r6
 8014232:	4620      	mov	r0, r4
 8014234:	f7ee ffa8 	bl	8003188 <z_shell_op_cursor_horiz_move>
	sh->ctx->cmd_buff_pos = new_pos;
 8014238:	68a3      	ldr	r3, [r4, #8]
 801423a:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
 801423c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801423e <z_shell_op_cursor_word_move>:
{
 801423e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
 8014242:	1e0c      	subs	r4, r1, #0
{
 8014244:	4606      	mov	r6, r0
	if (val < 0) {
 8014246:	da34      	bge.n	80142b2 <z_shell_op_cursor_word_move+0x74>
		val = -val;
 8014248:	4264      	negs	r4, r4
		sign = -1;
 801424a:	f04f 35ff 	mov.w	r5, #4294967295
		val = -val;
 801424e:	b224      	sxth	r4, r4
		sign = -1;
 8014250:	b2a4      	uxth	r4, r4
 8014252:	b2af      	uxth	r7, r5
 8014254:	e025      	b.n	80142a2 <z_shell_op_cursor_word_move+0x64>
		shift = shift_calc(sh->ctx->cmd_buff,
 8014256:	68b3      	ldr	r3, [r6, #8]
	bool found = false;
 8014258:	2000      	movs	r0, #0
		shift = shift_calc(sh->ctx->cmd_buff,
 801425a:	f8b3 e03e 	ldrh.w	lr, [r3, #62]	; 0x3e
 801425e:	f103 0842 	add.w	r8, r3, #66	; 0x42
 8014262:	f8b3 903c 	ldrh.w	r9, [r3, #60]	; 0x3c
 8014266:	4673      	mov	r3, lr
		idx = pos + ret * sign;
 8014268:	eba3 010e 	sub.w	r1, r3, lr
 801426c:	b289      	uxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
 801426e:	b90b      	cbnz	r3, 8014274 <z_shell_op_cursor_word_move+0x36>
 8014270:	1c6a      	adds	r2, r5, #1
 8014272:	d010      	beq.n	8014296 <z_shell_op_cursor_word_move+0x58>
 8014274:	4599      	cmp	r9, r3
 8014276:	d101      	bne.n	801427c <z_shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
 8014278:	2d01      	cmp	r5, #1
 801427a:	d00c      	beq.n	8014296 <z_shell_op_cursor_word_move+0x58>
		if (isalnum((int)str[idx]) != 0) {
 801427c:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 8014280:	f042 0c20 	orr.w	ip, r2, #32
 8014284:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
 8014288:	f1bc 0f19 	cmp.w	ip, #25
 801428c:	d90d      	bls.n	80142aa <z_shell_op_cursor_word_move+0x6c>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 801428e:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
 8014290:	2a09      	cmp	r2, #9
 8014292:	d90a      	bls.n	80142aa <z_shell_op_cursor_word_move+0x6c>
			if (found) {
 8014294:	b150      	cbz	r0, 80142ac <z_shell_op_cursor_word_move+0x6e>
		z_shell_op_cursor_move(sh, sign * shift);
 8014296:	3c01      	subs	r4, #1
 8014298:	b209      	sxth	r1, r1
 801429a:	4630      	mov	r0, r6
 801429c:	b2a4      	uxth	r4, r4
 801429e:	f7ff ffaa 	bl	80141f6 <z_shell_op_cursor_move>
	while (val--) {
 80142a2:	2c00      	cmp	r4, #0
 80142a4:	d1d7      	bne.n	8014256 <z_shell_op_cursor_word_move+0x18>
}
 80142a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
 80142aa:	2001      	movs	r0, #1
	while (1) {
 80142ac:	443b      	add	r3, r7
 80142ae:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
 80142b0:	e7da      	b.n	8014268 <z_shell_op_cursor_word_move+0x2a>
		sign = 1;
 80142b2:	2501      	movs	r5, #1
 80142b4:	e7cc      	b.n	8014250 <z_shell_op_cursor_word_move+0x12>

080142b6 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(sh, -sh->ctx->cmd_buff_pos);
 80142b6:	6883      	ldr	r3, [r0, #8]
 80142b8:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80142ba:	4249      	negs	r1, r1
 80142bc:	b209      	sxth	r1, r1
 80142be:	f7ff bf9a 	b.w	80141f6 <z_shell_op_cursor_move>

080142c2 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(sh, sh->ctx->cmd_buff_len -
 80142c2:	6883      	ldr	r3, [r0, #8]
 80142c4:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 80142c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80142c8:	1ac9      	subs	r1, r1, r3
 80142ca:	b209      	sxth	r1, r1
 80142cc:	f7ff bf93 	b.w	80141f6 <z_shell_op_cursor_move>

080142d0 <z_shell_op_left_arrow>:
	if (sh->ctx->cmd_buff_pos > 0) {
 80142d0:	6883      	ldr	r3, [r0, #8]
 80142d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80142d4:	b11b      	cbz	r3, 80142de <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(sh, -1);
 80142d6:	f04f 31ff 	mov.w	r1, #4294967295
 80142da:	f7ff bf8c 	b.w	80141f6 <z_shell_op_cursor_move>
}
 80142de:	4770      	bx	lr

080142e0 <z_shell_op_right_arrow>:
	if (sh->ctx->cmd_buff_pos < sh->ctx->cmd_buff_len) {
 80142e0:	6883      	ldr	r3, [r0, #8]
 80142e2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80142e4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d202      	bcs.n	80142f0 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(sh, 1);
 80142ea:	2101      	movs	r1, #1
 80142ec:	f7ff bf83 	b.w	80141f6 <z_shell_op_cursor_move>
}
 80142f0:	4770      	bx	lr

080142f2 <z_shell_op_delete_from_cursor>:
	sh->ctx->cmd_buff_len = sh->ctx->cmd_buff_pos;
 80142f2:	6882      	ldr	r2, [r0, #8]
 80142f4:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 80142f6:	8791      	strh	r1, [r2, #60]	; 0x3c
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos] = '\0';
 80142f8:	6883      	ldr	r3, [r0, #8]
 80142fa:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80142fc:	4413      	add	r3, r2
 80142fe:	2200      	movs	r2, #0
 8014300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(sh);
 8014304:	f7ee bf18 	b.w	8003138 <z_clear_eos>

08014308 <z_shell_cmd_line_erase>:
{
 8014308:	b510      	push	{r4, lr}
 801430a:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&sh->ctx->vt100_ctx.cons,
 801430c:	6880      	ldr	r0, [r0, #8]
 801430e:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8014310:	3020      	adds	r0, #32
 8014312:	8bc1      	ldrh	r1, [r0, #30]
 8014314:	f7ff fd20 	bl	8013d58 <z_shell_multiline_data_calc>
				   -(sh->ctx->vt100_ctx.cons.cur_x - 1));
 8014318:	68a3      	ldr	r3, [r4, #8]
	z_shell_op_cursor_horiz_move(sh,
 801431a:	4620      	mov	r0, r4
				   -(sh->ctx->vt100_ctx.cons.cur_x - 1));
 801431c:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(sh,
 801431e:	f1c1 0101 	rsb	r1, r1, #1
 8014322:	f7ee ff31 	bl	8003188 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(sh, sh->ctx->vt100_ctx.cons.cur_y - 1);
 8014326:	68a3      	ldr	r3, [r4, #8]
 8014328:	4620      	mov	r0, r4
 801432a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 801432c:	3901      	subs	r1, #1
 801432e:	f7ee ff15 	bl	800315c <z_shell_op_cursor_vert_move>
	z_clear_eos(sh);
 8014332:	4620      	mov	r0, r4
}
 8014334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(sh);
 8014338:	f7ee befe 	b.w	8003138 <z_clear_eos>

0801433c <z_shell_write>:
{
 801433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014340:	4605      	mov	r5, r0
 8014342:	b086      	sub	sp, #24
 8014344:	460f      	mov	r7, r1
 8014346:	4614      	mov	r4, r2
	size_t offset = 0;
 8014348:	2600      	movs	r6, #0
	while (length) {
 801434a:	b914      	cbnz	r4, 8014352 <z_shell_write+0x16>
}
 801434c:	b006      	add	sp, #24
 801434e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = sh->iface->api->write(sh->iface,
 8014352:	6868      	ldr	r0, [r5, #4]
 8014354:	4622      	mov	r2, r4
 8014356:	19b9      	adds	r1, r7, r6
 8014358:	6803      	ldr	r3, [r0, #0]
 801435a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801435e:	466b      	mov	r3, sp
 8014360:	47c0      	blx	r8
		offset += tmp_cnt;
 8014362:	9a00      	ldr	r2, [sp, #0]
 8014364:	4416      	add	r6, r2
		length -= tmp_cnt;
 8014366:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
 8014368:	2a00      	cmp	r2, #0
 801436a:	d1ee      	bne.n	801434a <z_shell_write+0xe>
		    (sh->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
 801436c:	68ab      	ldr	r3, [r5, #8]
 801436e:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
 8014370:	2903      	cmp	r1, #3
 8014372:	d0ea      	beq.n	801434a <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
 8014374:	2902      	cmp	r1, #2
 8014376:	d813      	bhi.n	80143a0 <z_shell_write+0x64>
		k_poll_event_init(&event,
 8014378:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801437c:	2101      	movs	r1, #1
 801437e:	a801      	add	r0, sp, #4
 8014380:	f007 febb 	bl	801c0fa <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
 8014384:	f04f 32ff 	mov.w	r2, #4294967295
 8014388:	f04f 33ff 	mov.w	r3, #4294967295
 801438c:	2101      	movs	r1, #1
 801438e:	a801      	add	r0, sp, #4
 8014390:	f7fe fd4c 	bl	8012e2c <z_impl_k_poll>
		k_poll_signal_reset(&sh->ctx->signals[SHELL_SIGNAL_TXDONE]);
 8014394:	68a8      	ldr	r0, [r5, #8]
 8014396:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
 801439a:	f007 fed0 	bl	801c13e <z_impl_k_poll_signal_reset>
 801439e:	e7d4      	b.n	801434a <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
 80143a0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(sh)) {
 80143a4:	0792      	lsls	r2, r2, #30
 80143a6:	d5fb      	bpl.n	80143a0 <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80143a8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80143ac:	f3bf 8f5b 	dmb	ish
 80143b0:	e853 2f00 	ldrex	r2, [r3]
 80143b4:	f022 0202 	bic.w	r2, r2, #2
 80143b8:	e843 2100 	strex	r1, r2, [r3]
 80143bc:	2900      	cmp	r1, #0
 80143be:	d1f7      	bne.n	80143b0 <z_shell_write+0x74>
 80143c0:	f3bf 8f5b 	dmb	ish
	return ret;
 80143c4:	e7c1      	b.n	801434a <z_shell_write+0xe>

080143c6 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
 80143c6:	f7ff bfb9 	b.w	801433c <z_shell_write>

080143ca <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *sh, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
 80143ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80143cc:	460f      	mov	r7, r1
	return sh->ctx->cfg.flags.use_colors == 1;
 80143ce:	6881      	ldr	r1, [r0, #8]
 80143d0:	461e      	mov	r6, r3
 80143d2:	4604      	mov	r4, r0
 80143d4:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
 80143d8:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
 80143da:	06db      	lsls	r3, r3, #27
 80143dc:	d517      	bpl.n	801440e <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(sh)	  &&
 80143de:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 80143e2:	42bb      	cmp	r3, r7
 80143e4:	d013      	beq.n	801440e <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
 80143e6:	2202      	movs	r2, #2
 80143e8:	312e      	adds	r1, #46	; 0x2e
 80143ea:	a801      	add	r0, sp, #4
 80143ec:	f000 fc43 	bl	8014c76 <memcpy>
	    (color != sh->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(sh, &col);
		z_shell_vt100_color_set(sh, color);
 80143f0:	4639      	mov	r1, r7
 80143f2:	4620      	mov	r0, r4
 80143f4:	f7ee fee6 	bl	80031c4 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(sh->fprintf_ctx, fmt, args);
 80143f8:	4632      	mov	r2, r6
 80143fa:	4629      	mov	r1, r5
 80143fc:	6960      	ldr	r0, [r4, #20]
 80143fe:	f7ee fe47 	bl	8003090 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(sh, &col);
 8014402:	a901      	add	r1, sp, #4
 8014404:	4620      	mov	r0, r4
 8014406:	f7ee fefd 	bl	8003204 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(sh->fprintf_ctx, fmt, args);
	}
}
 801440a:	b003      	add	sp, #12
 801440c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(sh->fprintf_ctx, fmt, args);
 801440e:	4632      	mov	r2, r6
 8014410:	4629      	mov	r1, r5
 8014412:	6960      	ldr	r0, [r4, #20]
}
 8014414:	b003      	add	sp, #12
 8014416:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(sh->fprintf_ctx, fmt, args);
 801441a:	f7ee be39 	b.w	8003090 <z_shell_fprintf_fmt>

0801441e <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
 801441e:	b40c      	push	{r2, r3}
 8014420:	b507      	push	{r0, r1, r2, lr}
 8014422:	ab04      	add	r3, sp, #16
 8014424:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
 8014428:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
 801442a:	f7ff ffce 	bl	80143ca <z_shell_vfprintf>
	va_end(args);
}
 801442e:	b003      	add	sp, #12
 8014430:	f85d eb04 	ldr.w	lr, [sp], #4
 8014434:	b002      	add	sp, #8
 8014436:	4770      	bx	lr

08014438 <data_insert>:
{
 8014438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
 801443c:	6887      	ldr	r7, [r0, #8]
{
 801443e:	4605      	mov	r5, r0
 8014440:	4688      	mov	r8, r1
 8014442:	4614      	mov	r4, r2
	uint16_t after = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
 8014444:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
	if ((sh->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
 8014446:	18b3      	adds	r3, r6, r2
 8014448:	2bff      	cmp	r3, #255	; 0xff
 801444a:	dc20      	bgt.n	801448e <data_insert+0x56>
	uint16_t after = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
 801444c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801444e:	1af6      	subs	r6, r6, r3
	char *curr_pos = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos];
 8014450:	3342      	adds	r3, #66	; 0x42
	uint16_t after = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
 8014452:	b2b6      	uxth	r6, r6
	char *curr_pos = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos];
 8014454:	441f      	add	r7, r3
	memmove(curr_pos + len, curr_pos, after);
 8014456:	4632      	mov	r2, r6
 8014458:	4639      	mov	r1, r7
 801445a:	1938      	adds	r0, r7, r4
 801445c:	f000 fbf3 	bl	8014c46 <memmove>
	memcpy(curr_pos, data, len);
 8014460:	4622      	mov	r2, r4
 8014462:	4641      	mov	r1, r8
 8014464:	4638      	mov	r0, r7
 8014466:	f000 fc06 	bl	8014c76 <memcpy>
	sh->ctx->cmd_buff_len += len;
 801446a:	68aa      	ldr	r2, [r5, #8]
 801446c:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 801446e:	4423      	add	r3, r4
 8014470:	8793      	strh	r3, [r2, #60]	; 0x3c
	sh->ctx->cmd_buff[sh->ctx->cmd_buff_len] = '\0';
 8014472:	68ab      	ldr	r3, [r5, #8]
 8014474:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8014476:	4413      	add	r3, r2
 8014478:	2200      	movs	r2, #0
 801447a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
 801447e:	68ab      	ldr	r3, [r5, #8]
 8014480:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(sh)) {
 8014484:	0789      	lsls	r1, r1, #30
 8014486:	d404      	bmi.n	8014492 <data_insert+0x5a>
		sh->ctx->cmd_buff_pos += len;
 8014488:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 801448a:	4414      	add	r4, r2
 801448c:	87dc      	strh	r4, [r3, #62]	; 0x3e
}
 801448e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(sh, after, false);
 8014492:	4631      	mov	r1, r6
 8014494:	4628      	mov	r0, r5
}
 8014496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(sh, after, false);
 801449a:	f7ee bf2f 	b.w	80032fc <reprint_from_cursor>

0801449e <z_shell_op_completion_insert>:
	data_insert(sh, compl, compl_len);
 801449e:	f7ff bfcb 	b.w	8014438 <data_insert>

080144a2 <z_shell_op_char_delete>:
{
 80144a2:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
 80144a4:	6883      	ldr	r3, [r0, #8]
{
 80144a6:	4605      	mov	r5, r0
	uint16_t diff = sh->ctx->cmd_buff_len - sh->ctx->cmd_buff_pos;
 80144a8:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 80144aa:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 80144ac:	1a24      	subs	r4, r4, r0
 80144ae:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
 80144b0:	b18c      	cbz	r4, 80144d6 <z_shell_op_char_delete+0x34>
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos];
 80144b2:	3042      	adds	r0, #66	; 0x42
	memmove(str, str + 1, diff);
 80144b4:	4622      	mov	r2, r4
	char *str = &sh->ctx->cmd_buff[sh->ctx->cmd_buff_pos];
 80144b6:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
 80144b8:	1c41      	adds	r1, r0, #1
 80144ba:	f000 fbc4 	bl	8014c46 <memmove>
	--sh->ctx->cmd_buff_len;
 80144be:	68aa      	ldr	r2, [r5, #8]
	reprint_from_cursor(sh, --diff, true);
 80144c0:	1e61      	subs	r1, r4, #1
 80144c2:	4628      	mov	r0, r5
	--sh->ctx->cmd_buff_len;
 80144c4:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(sh, --diff, true);
 80144c6:	b289      	uxth	r1, r1
	--sh->ctx->cmd_buff_len;
 80144c8:	3b01      	subs	r3, #1
 80144ca:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(sh, --diff, true);
 80144cc:	2201      	movs	r2, #1
}
 80144ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(sh, --diff, true);
 80144d2:	f7ee bf13 	b.w	80032fc <reprint_from_cursor>
}
 80144d6:	bd38      	pop	{r3, r4, r5, pc}

080144d8 <z_shell_op_char_backspace>:
{
 80144d8:	b510      	push	{r4, lr}
	if ((sh->ctx->cmd_buff_len == 0) ||
 80144da:	6883      	ldr	r3, [r0, #8]
{
 80144dc:	4604      	mov	r4, r0
	if ((sh->ctx->cmd_buff_len == 0) ||
 80144de:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80144e0:	b152      	cbz	r2, 80144f8 <z_shell_op_char_backspace+0x20>
 80144e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80144e4:	b143      	cbz	r3, 80144f8 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(sh, -1);
 80144e6:	f04f 31ff 	mov.w	r1, #4294967295
 80144ea:	f7ff fe84 	bl	80141f6 <z_shell_op_cursor_move>
	z_shell_op_char_delete(sh);
 80144ee:	4620      	mov	r0, r4
}
 80144f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(sh);
 80144f4:	f7ff bfd5 	b.w	80144a2 <z_shell_op_char_delete>
}
 80144f8:	bd10      	pop	{r4, pc}

080144fa <z_shell_raw_fprintf>:
{
 80144fa:	b40e      	push	{r1, r2, r3}
 80144fc:	b503      	push	{r0, r1, lr}
 80144fe:	aa03      	add	r2, sp, #12
 8014500:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 8014504:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 8014506:	f7ee fdc3 	bl	8003090 <z_shell_fprintf_fmt>
}
 801450a:	b002      	add	sp, #8
 801450c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014510:	b003      	add	sp, #12
 8014512:	4770      	bx	lr

08014514 <formatted_text_print.constprop.0>:
static void formatted_text_print(const struct shell *sh, const char *str,
 8014514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014518:	4604      	mov	r4, r0
 801451a:	4690      	mov	r8, r2
	if (str == NULL) {
 801451c:	460e      	mov	r6, r1
 801451e:	2900      	cmp	r1, #0
 8014520:	d069      	beq.n	80145f6 <formatted_text_print.constprop.0+0xe2>
 8014522:	2500      	movs	r5, #0
	while (isspace((int) *(str + offset)) != 0) {
 8014524:	5d73      	ldrb	r3, [r6, r5]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 8014526:	2b20      	cmp	r3, #32
 8014528:	d023      	beq.n	8014572 <formatted_text_print.constprop.0+0x5e>
 801452a:	3b09      	subs	r3, #9
 801452c:	2b04      	cmp	r3, #4
 801452e:	d920      	bls.n	8014572 <formatted_text_print.constprop.0+0x5e>
 8014530:	4630      	mov	r0, r6
 8014532:	eb06 0905 	add.w	r9, r6, r5
 8014536:	f000 fb51 	bl	8014bdc <strlen>
		    sh->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 801453a:	68a3      	ldr	r3, [r4, #8]
		length = z_shell_strlen(str) - offset;
 801453c:	b280      	uxth	r0, r0
		    sh->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 801453e:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
 8014540:	1b40      	subs	r0, r0, r5
		    sh->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
 8014542:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
 8014546:	4298      	cmp	r0, r3
 8014548:	d915      	bls.n	8014576 <formatted_text_print.constprop.0+0x62>
 801454a:	4648      	mov	r0, r9
		size_t idx = 0;
 801454c:	2700      	movs	r7, #0
			if (isspace((int) (*(str + offset + idx))) != 0) {
 801454e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014552:	2a20      	cmp	r2, #32
 8014554:	d006      	beq.n	8014564 <formatted_text_print.constprop.0+0x50>
 8014556:	f1a2 0c09 	sub.w	ip, r2, #9
 801455a:	f1bc 0f04 	cmp.w	ip, #4
 801455e:	d802      	bhi.n	8014566 <formatted_text_print.constprop.0+0x52>
				if (*(str + offset + idx) == '\n') {
 8014560:	2a0a      	cmp	r2, #10
 8014562:	d02f      	beq.n	80145c4 <formatted_text_print.constprop.0+0xb0>
 8014564:	463b      	mov	r3, r7
			if ((idx + terminal_offset) >=
 8014566:	eb08 0207 	add.w	r2, r8, r7
 801456a:	4291      	cmp	r1, r2
 801456c:	d929      	bls.n	80145c2 <formatted_text_print.constprop.0+0xae>
			++idx;
 801456e:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx))) != 0) {
 8014570:	e7ed      	b.n	801454e <formatted_text_print.constprop.0+0x3a>
		++offset;
 8014572:	3501      	adds	r5, #1
 8014574:	e7d6      	b.n	8014524 <formatted_text_print.constprop.0+0x10>
 8014576:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
 8014578:	2700      	movs	r7, #0
 801457a:	42b8      	cmp	r0, r7
 801457c:	d016      	beq.n	80145ac <formatted_text_print.constprop.0+0x98>
				if (*(str + offset + idx) == '\n') {
 801457e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014582:	eb05 0a07 	add.w	sl, r5, r7
 8014586:	2a0a      	cmp	r2, #10
 8014588:	d119      	bne.n	80145be <formatted_text_print.constprop.0+0xaa>
	z_shell_fprintf_buffer_flush(sh->fprintf_ctx);
 801458a:	6960      	ldr	r0, [r4, #20]
					offset += idx + 1;
 801458c:	f10a 0501 	add.w	r5, sl, #1
 8014590:	f7ff fb8c 	bl	8013cac <z_shell_fprintf_buffer_flush>
					z_shell_write(sh, str + offset, idx);
 8014594:	4649      	mov	r1, r9
 8014596:	463a      	mov	r2, r7
 8014598:	4620      	mov	r0, r4
 801459a:	f7ff fecf 	bl	801433c <z_shell_write>
					z_cursor_next_line_move(sh);
 801459e:	6960      	ldr	r0, [r4, #20]
 80145a0:	f7ee ff36 	bl	8003410 <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(sh,
 80145a4:	4641      	mov	r1, r8
 80145a6:	4620      	mov	r0, r4
 80145a8:	f7ee fdee 	bl	8003188 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(sh->fprintf_ctx, str + offset);
 80145ac:	6960      	ldr	r0, [r4, #20]
 80145ae:	1971      	adds	r1, r6, r5
 80145b0:	f7ff ffa3 	bl	80144fa <z_shell_raw_fprintf>
	z_cursor_next_line_move(sh);
 80145b4:	6960      	ldr	r0, [r4, #20]
}
 80145b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(sh);
 80145ba:	f7ee bf29 	b.w	8003410 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
 80145be:	3701      	adds	r7, #1
 80145c0:	e7db      	b.n	801457a <formatted_text_print.constprop.0+0x66>
 80145c2:	461f      	mov	r7, r3
 80145c4:	6960      	ldr	r0, [r4, #20]
		offset += length;
 80145c6:	443d      	add	r5, r7
 80145c8:	f7ff fb70 	bl	8013cac <z_shell_fprintf_buffer_flush>
		z_shell_write(sh, str + offset, length);
 80145cc:	463a      	mov	r2, r7
 80145ce:	4649      	mov	r1, r9
 80145d0:	4620      	mov	r0, r4
 80145d2:	f7ff feb3 	bl	801433c <z_shell_write>
		while (isspace((int) (*(str + offset))) != 0) {
 80145d6:	5d73      	ldrb	r3, [r6, r5]
 80145d8:	2b20      	cmp	r3, #32
 80145da:	d00a      	beq.n	80145f2 <formatted_text_print.constprop.0+0xde>
 80145dc:	3b09      	subs	r3, #9
 80145de:	2b04      	cmp	r3, #4
 80145e0:	d907      	bls.n	80145f2 <formatted_text_print.constprop.0+0xde>
		z_cursor_next_line_move(sh);
 80145e2:	6960      	ldr	r0, [r4, #20]
 80145e4:	f7ee ff14 	bl	8003410 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(sh, terminal_offset);
 80145e8:	4641      	mov	r1, r8
 80145ea:	4620      	mov	r0, r4
 80145ec:	f7ee fdcc 	bl	8003188 <z_shell_op_cursor_horiz_move>
	while (true) {
 80145f0:	e79e      	b.n	8014530 <formatted_text_print.constprop.0+0x1c>
			++offset;
 80145f2:	3501      	adds	r5, #1
 80145f4:	e7ef      	b.n	80145d6 <formatted_text_print.constprop.0+0xc2>
}
 80145f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080145fa <cmd_shell_stats_reset>:
	sh->stats->log_lost_cnt = 0;
 80145fa:	6983      	ldr	r3, [r0, #24]
 80145fc:	2000      	movs	r0, #0
 80145fe:	6018      	str	r0, [r3, #0]
}
 8014600:	4770      	bx	lr

08014602 <z_shell_raw_fprintf>:
{
 8014602:	b40e      	push	{r1, r2, r3}
 8014604:	b503      	push	{r0, r1, lr}
 8014606:	aa03      	add	r2, sp, #12
 8014608:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
 801460c:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
 801460e:	f7ee fd3f 	bl	8003090 <z_shell_fprintf_fmt>
}
 8014612:	b002      	add	sp, #8
 8014614:	f85d eb04 	ldr.w	lr, [sp], #4
 8014618:	b003      	add	sp, #12
 801461a:	4770      	bx	lr

0801461c <cmd_prompt_on>:
{
 801461c:	b508      	push	{r3, lr}
	shell_prompt_change(sh, sh->default_prompt);
 801461e:	6801      	ldr	r1, [r0, #0]
 8014620:	f7ff fb12 	bl	8013c48 <shell_prompt_change>
}
 8014624:	2000      	movs	r0, #0
 8014626:	bd08      	pop	{r3, pc}

08014628 <cmd_vt100_off>:
 8014628:	6883      	ldr	r3, [r0, #8]
 801462a:	f3bf 8f5b 	dmb	ish
 801462e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8014632:	e853 2f00 	ldrex	r2, [r3]
 8014636:	f022 0220 	bic.w	r2, r2, #32
 801463a:	e843 2100 	strex	r1, r2, [r3]
 801463e:	2900      	cmp	r1, #0
 8014640:	d1f7      	bne.n	8014632 <cmd_vt100_off+0xa>
}
 8014642:	2000      	movs	r0, #0
 8014644:	f3bf 8f5b 	dmb	ish
 8014648:	4770      	bx	lr

0801464a <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801464a:	6883      	ldr	r3, [r0, #8]
 801464c:	f3bf 8f5b 	dmb	ish
 8014650:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8014654:	e853 2f00 	ldrex	r2, [r3]
 8014658:	f042 0208 	orr.w	r2, r2, #8
 801465c:	e843 2100 	strex	r1, r2, [r3]
 8014660:	2900      	cmp	r1, #0
 8014662:	d1f7      	bne.n	8014654 <cmd_bacskpace_mode_delete+0xa>
}
 8014664:	2000      	movs	r0, #0
 8014666:	f3bf 8f5b 	dmb	ish
 801466a:	4770      	bx	lr

0801466c <cmd_colors_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 801466c:	6883      	ldr	r3, [r0, #8]
 801466e:	f3bf 8f5b 	dmb	ish
 8014672:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8014676:	e853 2f00 	ldrex	r2, [r3]
 801467a:	f022 0210 	bic.w	r2, r2, #16
 801467e:	e843 2100 	strex	r1, r2, [r3]
 8014682:	2900      	cmp	r1, #0
 8014684:	d1f7      	bne.n	8014676 <cmd_colors_off+0xa>
}
 8014686:	2000      	movs	r0, #0
 8014688:	f3bf 8f5b 	dmb	ish
 801468c:	4770      	bx	lr

0801468e <cmd_bacskpace_mode_backspace>:
 801468e:	6883      	ldr	r3, [r0, #8]
 8014690:	f3bf 8f5b 	dmb	ish
 8014694:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8014698:	e853 2f00 	ldrex	r2, [r3]
 801469c:	f022 0208 	bic.w	r2, r2, #8
 80146a0:	e843 2100 	strex	r1, r2, [r3]
 80146a4:	2900      	cmp	r1, #0
 80146a6:	d1f7      	bne.n	8014698 <cmd_bacskpace_mode_backspace+0xa>
}
 80146a8:	2000      	movs	r0, #0
 80146aa:	f3bf 8f5b 	dmb	ish
 80146ae:	4770      	bx	lr

080146b0 <cmd_echo_off>:
 80146b0:	6883      	ldr	r3, [r0, #8]
 80146b2:	f3bf 8f5b 	dmb	ish
 80146b6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80146ba:	e853 2f00 	ldrex	r2, [r3]
 80146be:	f022 0202 	bic.w	r2, r2, #2
 80146c2:	e843 2100 	strex	r1, r2, [r3]
 80146c6:	2900      	cmp	r1, #0
 80146c8:	d1f7      	bne.n	80146ba <cmd_echo_off+0xa>
}
 80146ca:	2000      	movs	r0, #0
 80146cc:	f3bf 8f5b 	dmb	ish
 80146d0:	4770      	bx	lr

080146d2 <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80146d2:	6883      	ldr	r3, [r0, #8]
 80146d4:	f3bf 8f5b 	dmb	ish
 80146d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80146dc:	e853 2f00 	ldrex	r2, [r3]
 80146e0:	f042 0210 	orr.w	r2, r2, #16
 80146e4:	e843 2100 	strex	r1, r2, [r3]
 80146e8:	2900      	cmp	r1, #0
 80146ea:	d1f7      	bne.n	80146dc <cmd_colors_on+0xa>
}
 80146ec:	2000      	movs	r0, #0
 80146ee:	f3bf 8f5b 	dmb	ish
 80146f2:	4770      	bx	lr

080146f4 <cmd_vt100_on>:
 80146f4:	6883      	ldr	r3, [r0, #8]
 80146f6:	f3bf 8f5b 	dmb	ish
 80146fa:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80146fe:	e853 2f00 	ldrex	r2, [r3]
 8014702:	f042 0220 	orr.w	r2, r2, #32
 8014706:	e843 2100 	strex	r1, r2, [r3]
 801470a:	2900      	cmp	r1, #0
 801470c:	d1f7      	bne.n	80146fe <cmd_vt100_on+0xa>
}
 801470e:	2000      	movs	r0, #0
 8014710:	f3bf 8f5b 	dmb	ish
 8014714:	4770      	bx	lr

08014716 <cmd_echo_on>:
 8014716:	6883      	ldr	r3, [r0, #8]
 8014718:	f3bf 8f5b 	dmb	ish
 801471c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8014720:	e853 2f00 	ldrex	r2, [r3]
 8014724:	f042 0202 	orr.w	r2, r2, #2
 8014728:	e843 2100 	strex	r1, r2, [r3]
 801472c:	2900      	cmp	r1, #0
 801472e:	d1f7      	bne.n	8014720 <cmd_echo_on+0xa>
}
 8014730:	2000      	movs	r0, #0
 8014732:	f3bf 8f5b 	dmb	ish
 8014736:	4770      	bx	lr

08014738 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
 8014738:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 801473a:	6883      	ldr	r3, [r0, #8]
	sys_dnode_t *const next = node->next;
 801473c:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
 8014740:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 8014742:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 8014744:	2100      	movs	r1, #0
	sys_dlist_remove(l_item);

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
 8014746:	891a      	ldrh	r2, [r3, #8]
	node->prev = NULL;
 8014748:	e9c3 1100 	strd	r1, r1, [r3]
 801474c:	895b      	ldrh	r3, [r3, #10]
	ring_buf_get(history->ring_buf, NULL, total_len);
 801474e:	6800      	ldr	r0, [r0, #0]
			h_item->len + h_item->padding;
 8014750:	441a      	add	r2, r3
	ring_buf_get(history->ring_buf, NULL, total_len);
 8014752:	320c      	adds	r2, #12
 8014754:	f7ff f865 	bl	8013822 <ring_buf_get>

	return true;
}
 8014758:	2001      	movs	r0, #1
 801475a:	bd08      	pop	{r3, pc}

0801475c <z_shell_history_mode_exit>:
	history->current = NULL;
 801475c:	2300      	movs	r3, #0
 801475e:	60c3      	str	r3, [r0, #12]
}
 8014760:	4770      	bx	lr

08014762 <z_shell_history_get>:
{
 8014762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014764:	461f      	mov	r7, r3
	return list->head == list;
 8014766:	4603      	mov	r3, r0
 8014768:	4616      	mov	r6, r2
 801476a:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
 801476e:	429c      	cmp	r4, r3
 8014770:	d102      	bne.n	8014778 <z_shell_history_get+0x16>
		*len = 0U;
 8014772:	2000      	movs	r0, #0
 8014774:	8038      	strh	r0, [r7, #0]
}
 8014776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
 8014778:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
 801477a:	b9b1      	cbnz	r1, 80147aa <z_shell_history_get+0x48>
		if (history->current == NULL) {
 801477c:	2d00      	cmp	r5, #0
 801477e:	d0f8      	beq.n	8014772 <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
 8014780:	42ac      	cmp	r4, r5
 8014782:	d102      	bne.n	801478a <z_shell_history_get+0x28>
	history->current = l_item;
 8014784:	2300      	movs	r3, #0
 8014786:	60c3      	str	r3, [r0, #12]
	if (l_item) {
 8014788:	e7f3      	b.n	8014772 <z_shell_history_get+0x10>
 801478a:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
 801478c:	60c4      	str	r4, [r0, #12]
	if (l_item) {
 801478e:	2c00      	cmp	r4, #0
 8014790:	d0ef      	beq.n	8014772 <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
 8014792:	8922      	ldrh	r2, [r4, #8]
 8014794:	f104 010c 	add.w	r1, r4, #12
 8014798:	4630      	mov	r0, r6
 801479a:	f000 fa6c 	bl	8014c76 <memcpy>
		*len = h_item->len;
 801479e:	8923      	ldrh	r3, [r4, #8]
		dst[*len] = '\0';
 80147a0:	2200      	movs	r2, #0
		return true;
 80147a2:	2001      	movs	r0, #1
		*len = h_item->len;
 80147a4:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
 80147a6:	54f2      	strb	r2, [r6, r3]
		return true;
 80147a8:	e7e5      	b.n	8014776 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
 80147aa:	2d00      	cmp	r5, #0
 80147ac:	d0ee      	beq.n	801478c <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
 80147ae:	6883      	ldr	r3, [r0, #8]
 80147b0:	42ab      	cmp	r3, r5
 80147b2:	d0e7      	beq.n	8014784 <z_shell_history_get+0x22>
 80147b4:	682c      	ldr	r4, [r5, #0]
 80147b6:	e7e9      	b.n	801478c <z_shell_history_get+0x2a>

080147b8 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
 80147b8:	b538      	push	{r3, r4, r5, lr}
 80147ba:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
 80147bc:	1d05      	adds	r5, r0, #4
 80147be:	6863      	ldr	r3, [r4, #4]
 80147c0:	42ab      	cmp	r3, r5
 80147c2:	d004      	beq.n	80147ce <z_shell_history_purge+0x16>
 80147c4:	4620      	mov	r0, r4
 80147c6:	f7ff ffb7 	bl	8014738 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
 80147ca:	2800      	cmp	r0, #0
 80147cc:	d1f7      	bne.n	80147be <z_shell_history_purge+0x6>
	}
}
 80147ce:	bd38      	pop	{r3, r4, r5, pc}

080147d0 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
 80147d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item, *h_prev_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
 80147d4:	f102 050c 	add.w	r5, r2, #12
	return buf->size;
 80147d8:	6803      	ldr	r3, [r0, #0]
{
 80147da:	b085      	sub	sp, #20
 80147dc:	4604      	mov	r4, r0
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 80147de:	f1c5 0900 	rsb	r9, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 80147e2:	69db      	ldr	r3, [r3, #28]
{
 80147e4:	4617      	mov	r7, r2
 80147e6:	9101      	str	r1, [sp, #4]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
 80147e8:	f009 0903 	and.w	r9, r9, #3
	total_len += padding;
 80147ec:	444d      	add	r5, r9
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
 80147ee:	429d      	cmp	r5, r3
 80147f0:	d810      	bhi.n	8014814 <z_shell_history_put+0x44>
	history->current = NULL;
 80147f2:	2300      	movs	r3, #0
 80147f4:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
 80147f6:	b16a      	cbz	r2, 8014814 <z_shell_history_put+0x44>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
 80147f8:	f100 0a04 	add.w	sl, r0, #4
	return list->head == list;
 80147fc:	6846      	ldr	r6, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80147fe:	45b2      	cmp	sl, r6
 8014800:	d00b      	beq.n	801481a <z_shell_history_put+0x4a>
	h_prev_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	if (l_item &&
 8014802:	b15e      	cbz	r6, 801481c <z_shell_history_put+0x4c>
	   (h_prev_item->len == len) &&
 8014804:	8933      	ldrh	r3, [r6, #8]
	if (l_item &&
 8014806:	4293      	cmp	r3, r2
 8014808:	d108      	bne.n	801481c <z_shell_history_put+0x4c>
	   (memcmp(h_prev_item->data, line, len) == 0)) {
 801480a:	f106 000c 	add.w	r0, r6, #12
 801480e:	f000 fa09 	bl	8014c24 <memcmp>
	   (h_prev_item->len == len) &&
 8014812:	b918      	cbnz	r0, 801481c <z_shell_history_put+0x4c>
		}

		ring_buf_put_finish(history->ring_buf, 0);
		remove_from_tail(history);
	} while (1);
}
 8014814:	b005      	add	sp, #20
 8014816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801481a:	461e      	mov	r6, r3
	buf->put_head = buf->put_tail = buf->put_base = value;
 801481c:	f04f 0800 	mov.w	r8, #0
		if (ring_buf_is_empty(history->ring_buf)) {
 8014820:	6823      	ldr	r3, [r4, #0]
 8014822:	6919      	ldr	r1, [r3, #16]
 8014824:	689a      	ldr	r2, [r3, #8]
 8014826:	4291      	cmp	r1, r2
		claim_len = ring_buf_put_claim(history->ring_buf,
 8014828:	462a      	mov	r2, r5
 801482a:	a903      	add	r1, sp, #12
 801482c:	bf01      	itttt	eq
 801482e:	f8c3 8004 	streq.w	r8, [r3, #4]
	buf->get_head = buf->get_tail = buf->get_base = value;
 8014832:	f8c3 8010 	streq.w	r8, [r3, #16]
	buf->put_head = buf->put_tail = buf->put_base = value;
 8014836:	e9c3 8802 	strdeq	r8, r8, [r3, #8]
	buf->get_head = buf->get_tail = buf->get_base = value;
 801483a:	e9c3 8805 	strdeq	r8, r8, [r3, #20]
 801483e:	6820      	ldr	r0, [r4, #0]
 8014840:	f7fe ff66 	bl	8013710 <ring_buf_put_claim>
		if (claim_len < total_len) {
 8014844:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
 8014846:	4683      	mov	fp, r0
		if (claim_len < total_len) {
 8014848:	d91e      	bls.n	8014888 <z_shell_history_put+0xb8>
				ring_buf_put_claim(history->ring_buf,
 801484a:	462a      	mov	r2, r5
 801484c:	a903      	add	r1, sp, #12
 801484e:	6820      	ldr	r0, [r4, #0]
 8014850:	f7fe ff5e 	bl	8013710 <ring_buf_put_claim>
			if (claim2_len == total_len) {
 8014854:	4285      	cmp	r5, r0
 8014856:	d118      	bne.n	801488a <z_shell_history_put+0xba>
				h_prev_item->padding += claim_len;
 8014858:	8972      	ldrh	r2, [r6, #10]
 801485a:	445a      	add	r2, fp
				total_len += claim_len;
 801485c:	44ab      	add	fp, r5
				h_prev_item->padding += claim_len;
 801485e:	8172      	strh	r2, [r6, #10]
			add_to_head(history, h_item, line, len, padding);
 8014860:	9d03      	ldr	r5, [sp, #12]
	memcpy(item->data, src, len);
 8014862:	463a      	mov	r2, r7
 8014864:	9901      	ldr	r1, [sp, #4]
 8014866:	f105 000c 	add.w	r0, r5, #12
	item->len = len;
 801486a:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
 801486c:	f8a5 900a 	strh.w	r9, [r5, #10]
	memcpy(item->data, src, len);
 8014870:	f000 fa01 	bl	8014c76 <memcpy>
	sys_dnode_t *const head = list->head;
 8014874:	6862      	ldr	r2, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
 8014876:	4659      	mov	r1, fp
	node->prev = list;
 8014878:	e9c5 2a00 	strd	r2, sl, [r5]
	head->prev = node;
 801487c:	6055      	str	r5, [r2, #4]
	list->head = node;
 801487e:	6065      	str	r5, [r4, #4]
 8014880:	6820      	ldr	r0, [r4, #0]
 8014882:	f7fe ff66 	bl	8013752 <ring_buf_put_finish>
			break;
 8014886:	e7c5      	b.n	8014814 <z_shell_history_put+0x44>
		if (claim_len == total_len) {
 8014888:	d0ea      	beq.n	8014860 <z_shell_history_put+0x90>
		ring_buf_put_finish(history->ring_buf, 0);
 801488a:	2100      	movs	r1, #0
 801488c:	6820      	ldr	r0, [r4, #0]
 801488e:	f7fe ff60 	bl	8013752 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
 8014892:	6863      	ldr	r3, [r4, #4]
 8014894:	459a      	cmp	sl, r3
 8014896:	d0c3      	beq.n	8014820 <z_shell_history_put+0x50>
 8014898:	4620      	mov	r0, r4
 801489a:	f7ff ff4d 	bl	8014738 <remove_from_tail.part.0>
 801489e:	e7bf      	b.n	8014820 <z_shell_history_put+0x50>

080148a0 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
 80148a0:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
 80148a2:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
 80148a6:	2300      	movs	r3, #0
 80148a8:	60c3      	str	r3, [r0, #12]
}
 80148aa:	4770      	bx	lr

080148ac <z_shell_has_wildcard>:
{
 80148ac:	b510      	push	{r4, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
 80148ae:	4604      	mov	r4, r0
 80148b0:	b908      	cbnz	r0, 80148b6 <z_shell_has_wildcard+0xa>
	return false;
 80148b2:	2000      	movs	r0, #0
}
 80148b4:	bd10      	pop	{r4, pc}
 80148b6:	f000 f991 	bl	8014bdc <strlen>
	for (size_t i = 0; i < str_len; i++) {
 80148ba:	2300      	movs	r3, #0
 80148bc:	b280      	uxth	r0, r0
 80148be:	4283      	cmp	r3, r0
 80148c0:	d2f7      	bcs.n	80148b2 <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
 80148c2:	5ce2      	ldrb	r2, [r4, r3]
 80148c4:	2a3f      	cmp	r2, #63	; 0x3f
 80148c6:	d003      	beq.n	80148d0 <z_shell_has_wildcard+0x24>
 80148c8:	2a2a      	cmp	r2, #42	; 0x2a
 80148ca:	d001      	beq.n	80148d0 <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
 80148cc:	3301      	adds	r3, #1
 80148ce:	e7f6      	b.n	80148be <z_shell_has_wildcard+0x12>
			return true;
 80148d0:	2001      	movs	r0, #1
 80148d2:	e7ef      	b.n	80148b4 <z_shell_has_wildcard+0x8>

080148d4 <z_shell_wildcard_prepare>:
{
 80148d4:	b510      	push	{r4, lr}
 80148d6:	4604      	mov	r4, r0
	memset(sh->ctx->temp_buff, 0, sizeof(sh->ctx->temp_buff));
 80148d8:	6880      	ldr	r0, [r0, #8]
 80148da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80148de:	2100      	movs	r1, #0
 80148e0:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 80148e4:	f000 f9d2 	bl	8014c8c <memset>
	memcpy(sh->ctx->temp_buff,
 80148e8:	68a0      	ldr	r0, [r4, #8]
 80148ea:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 80148ec:	f100 0142 	add.w	r1, r0, #66	; 0x42
 80148f0:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 80148f4:	f000 f9bf 	bl	8014c76 <memcpy>
	z_shell_spaces_trim(sh->ctx->temp_buff);
 80148f8:	68a0      	ldr	r0, [r4, #8]
 80148fa:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 80148fe:	f7ff fb7b 	bl	8013ff8 <z_shell_spaces_trim>
	sh->ctx->cmd_tmp_buff_len = z_shell_strlen(sh->ctx->temp_buff) + 1;
 8014902:	68a0      	ldr	r0, [r4, #8]
 8014904:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8014908:	f000 f968 	bl	8014bdc <strlen>
 801490c:	68a3      	ldr	r3, [r4, #8]
 801490e:	3001      	adds	r0, #1
 8014910:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
 8014914:	bd10      	pop	{r4, pc}

08014916 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *sh)
{
 8014916:	b510      	push	{r4, lr}
 8014918:	4604      	mov	r4, r0
	memcpy(sh->ctx->cmd_buff,
 801491a:	6880      	ldr	r0, [r0, #8]
 801491c:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8014920:	f500 71a1 	add.w	r1, r0, #322	; 0x142
 8014924:	3042      	adds	r0, #66	; 0x42
 8014926:	f000 f9a6 	bl	8014c76 <memcpy>
	       sh->ctx->temp_buff,
	       sh->ctx->cmd_tmp_buff_len);
	sh->ctx->cmd_buff_len = sh->ctx->cmd_tmp_buff_len;
 801492a:	68a3      	ldr	r3, [r4, #8]
 801492c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8014930:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8014932:	bd10      	pop	{r4, pc}

08014934 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8014934:	f006 be76 	b.w	801b624 <z_fatal_error>

08014938 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8014938:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 801493a:	6800      	ldr	r0, [r0, #0]
 801493c:	f006 be72 	b.w	801b624 <z_fatal_error>

08014940 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8014940:	2100      	movs	r1, #0
 8014942:	2001      	movs	r0, #1
 8014944:	f7ff bff6 	b.w	8014934 <z_arm_fatal_error>

08014948 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8014948:	b508      	push	{r3, lr}
	handler();
 801494a:	f7ef f865 	bl	8003a18 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 801494e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8014952:	f7ef b93b 	b.w	8003bcc <z_arm_exc_exit>

08014956 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
 8014956:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801495a:	4684      	mov	ip, r0
 801495c:	4688      	mov	r8, r1
	register const char *s = nptr;
 801495e:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
 8014960:	4621      	mov	r1, r4
 8014962:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014966:	2b20      	cmp	r3, #32
 8014968:	d0fa      	beq.n	8014960 <strtol+0xa>
 801496a:	f1a3 0009 	sub.w	r0, r3, #9
 801496e:	2804      	cmp	r0, #4
 8014970:	d9f6      	bls.n	8014960 <strtol+0xa>
	} while (isspace((unsigned char)c) != 0);
	if (c == '-') {
 8014972:	2b2d      	cmp	r3, #45	; 0x2d
 8014974:	d12d      	bne.n	80149d2 <strtol+0x7c>
		neg = 1;
		c = *s++;
 8014976:	1c8c      	adds	r4, r1, #2
 8014978:	784b      	ldrb	r3, [r1, #1]
		neg = 1;
 801497a:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
 801497c:	2a00      	cmp	r2, #0
 801497e:	d05a      	beq.n	8014a36 <strtol+0xe0>
 8014980:	2a10      	cmp	r2, #16
 8014982:	d109      	bne.n	8014998 <strtol+0x42>
 8014984:	2b30      	cmp	r3, #48	; 0x30
 8014986:	d107      	bne.n	8014998 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 8014988:	7823      	ldrb	r3, [r4, #0]
 801498a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801498e:	2b58      	cmp	r3, #88	; 0x58
 8014990:	d14c      	bne.n	8014a2c <strtol+0xd6>
		c = s[1];
 8014992:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
 8014994:	2210      	movs	r2, #16
		s += 2;
 8014996:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 8014998:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 801499c:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
 801499e:	3f01      	subs	r7, #1
	for (acc = 0, any = 0;; c = *s++) {
 80149a0:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
 80149a2:	fbb7 fef2 	udiv	lr, r7, r2
 80149a6:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 80149aa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit((unsigned char)c) != 0) {
 80149ae:	2d09      	cmp	r5, #9
 80149b0:	d815      	bhi.n	80149de <strtol+0x88>
			c -= '0';
 80149b2:	462b      	mov	r3, r5
		} else if (isalpha((unsigned char)c) != 0) {
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
 80149b4:	429a      	cmp	r2, r3
 80149b6:	dd22      	ble.n	80149fe <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 80149b8:	1c75      	adds	r5, r6, #1
 80149ba:	d007      	beq.n	80149cc <strtol+0x76>
 80149bc:	4570      	cmp	r0, lr
 80149be:	d81b      	bhi.n	80149f8 <strtol+0xa2>
 80149c0:	d101      	bne.n	80149c6 <strtol+0x70>
 80149c2:	454b      	cmp	r3, r9
 80149c4:	dc18      	bgt.n	80149f8 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
 80149c6:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
 80149ca:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
 80149cc:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c) != 0) {
 80149d0:	e7eb      	b.n	80149aa <strtol+0x54>
	} else if (c == '+') {
 80149d2:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
 80149d4:	bf04      	itt	eq
 80149d6:	1c8c      	addeq	r4, r1, #2
 80149d8:	784b      	ldrbeq	r3, [r1, #1]
	register int neg = 0, any, cutlim;
 80149da:	2100      	movs	r1, #0
 80149dc:	e7ce      	b.n	801497c <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 80149de:	f043 0520 	orr.w	r5, r3, #32
 80149e2:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha((unsigned char)c) != 0) {
 80149e4:	2d19      	cmp	r5, #25
 80149e6:	d80a      	bhi.n	80149fe <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80149e8:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
 80149ec:	2d1a      	cmp	r5, #26
 80149ee:	bf34      	ite	cc
 80149f0:	2537      	movcc	r5, #55	; 0x37
 80149f2:	2557      	movcs	r5, #87	; 0x57
 80149f4:	1b5b      	subs	r3, r3, r5
 80149f6:	e7dd      	b.n	80149b4 <strtol+0x5e>
			any = -1;
 80149f8:	f04f 36ff 	mov.w	r6, #4294967295
 80149fc:	e7e6      	b.n	80149cc <strtol+0x76>
		}
	}

	if (any < 0) {
 80149fe:	1c73      	adds	r3, r6, #1
 8014a00:	d109      	bne.n	8014a16 <strtol+0xc0>
 8014a02:	f7fc fe91 	bl	8011728 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
 8014a06:	2322      	movs	r3, #34	; 0x22
 8014a08:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
 8014a0a:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
 8014a0c:	f1b8 0f00 	cmp.w	r8, #0
 8014a10:	d107      	bne.n	8014a22 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
 8014a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
 8014a16:	b101      	cbz	r1, 8014a1a <strtol+0xc4>
		acc = -acc;
 8014a18:	4240      	negs	r0, r0
	if (endptr != NULL) {
 8014a1a:	f1b8 0f00 	cmp.w	r8, #0
 8014a1e:	d0f8      	beq.n	8014a12 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
 8014a20:	b10e      	cbz	r6, 8014a26 <strtol+0xd0>
 8014a22:	f104 3cff 	add.w	ip, r4, #4294967295
 8014a26:	f8c8 c000 	str.w	ip, [r8]
	return acc;
 8014a2a:	e7f2      	b.n	8014a12 <strtol+0xbc>
	if (base == 0) {
 8014a2c:	2330      	movs	r3, #48	; 0x30
 8014a2e:	2a00      	cmp	r2, #0
 8014a30:	d1b2      	bne.n	8014998 <strtol+0x42>
		base = c == '0' ? 8 : 10;
 8014a32:	2208      	movs	r2, #8
 8014a34:	e7b0      	b.n	8014998 <strtol+0x42>
	if ((base == 0 || base == 16) &&
 8014a36:	2b30      	cmp	r3, #48	; 0x30
 8014a38:	d0a6      	beq.n	8014988 <strtol+0x32>
		base = c == '0' ? 8 : 10;
 8014a3a:	220a      	movs	r2, #10
 8014a3c:	e7ac      	b.n	8014998 <strtol+0x42>

08014a3e <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
 8014a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a42:	4607      	mov	r7, r0
 8014a44:	4688      	mov	r8, r1
	register const char *s = nptr;
 8014a46:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
 8014a48:	4621      	mov	r1, r4
 8014a4a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
 8014a4e:	2b20      	cmp	r3, #32
 8014a50:	d0fa      	beq.n	8014a48 <strtoul+0xa>
 8014a52:	f1a3 0009 	sub.w	r0, r3, #9
 8014a56:	2804      	cmp	r0, #4
 8014a58:	d9f6      	bls.n	8014a48 <strtoul+0xa>
	} while (isspace((unsigned char)c) != 0);
	if (c == '-') {
 8014a5a:	2b2d      	cmp	r3, #45	; 0x2d
 8014a5c:	d12f      	bne.n	8014abe <strtoul+0x80>
		neg = 1;
		c = *s++;
 8014a5e:	1c8c      	adds	r4, r1, #2
 8014a60:	784b      	ldrb	r3, [r1, #1]
		neg = 1;
 8014a62:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
 8014a66:	2a00      	cmp	r2, #0
 8014a68:	d05e      	beq.n	8014b28 <strtoul+0xea>
 8014a6a:	2a10      	cmp	r2, #16
 8014a6c:	d109      	bne.n	8014a82 <strtoul+0x44>
 8014a6e:	2b30      	cmp	r3, #48	; 0x30
 8014a70:	d107      	bne.n	8014a82 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
 8014a72:	7823      	ldrb	r3, [r4, #0]
 8014a74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014a78:	2b58      	cmp	r3, #88	; 0x58
 8014a7a:	d150      	bne.n	8014b1e <strtoul+0xe0>
		c = s[1];
 8014a7c:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
 8014a7e:	2210      	movs	r2, #16
		s += 2;
 8014a80:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
 8014a82:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
 8014a86:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
 8014a88:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
 8014a8c:	fb02 fe01 	mul.w	lr, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
 8014a90:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
 8014a92:	ea6f 0e0e 	mvn.w	lr, lr
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8014a96:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit((unsigned char)c) != 0) {
 8014a9a:	2d09      	cmp	r5, #9
 8014a9c:	d816      	bhi.n	8014acc <strtoul+0x8e>
			c -= '0';
 8014a9e:	462b      	mov	r3, r5
		} else if (isalpha((unsigned char)c) != 0) {
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	dd23      	ble.n	8014aec <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
 8014aa4:	2e00      	cmp	r6, #0
 8014aa6:	db1e      	blt.n	8014ae6 <strtoul+0xa8>
 8014aa8:	4288      	cmp	r0, r1
 8014aaa:	d81c      	bhi.n	8014ae6 <strtoul+0xa8>
 8014aac:	d101      	bne.n	8014ab2 <strtoul+0x74>
 8014aae:	4573      	cmp	r3, lr
 8014ab0:	dc19      	bgt.n	8014ae6 <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
 8014ab2:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
 8014ab6:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
 8014ab8:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c) != 0) {
 8014abc:	e7eb      	b.n	8014a96 <strtoul+0x58>
	} else if (c == '+') {
 8014abe:	2b2b      	cmp	r3, #43	; 0x2b
	register int neg = 0, any, cutlim;
 8014ac0:	f04f 0c00 	mov.w	ip, #0
		c = *s++;
 8014ac4:	bf04      	itt	eq
 8014ac6:	1c8c      	addeq	r4, r1, #2
 8014ac8:	784b      	ldrbeq	r3, [r1, #1]
 8014aca:	e7cc      	b.n	8014a66 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
 8014acc:	f043 0520 	orr.w	r5, r3, #32
 8014ad0:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha((unsigned char)c) != 0) {
 8014ad2:	2d19      	cmp	r5, #25
 8014ad4:	d80a      	bhi.n	8014aec <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8014ad6:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
 8014ada:	2d1a      	cmp	r5, #26
 8014adc:	bf34      	ite	cc
 8014ade:	2537      	movcc	r5, #55	; 0x37
 8014ae0:	2557      	movcs	r5, #87	; 0x57
 8014ae2:	1b5b      	subs	r3, r3, r5
 8014ae4:	e7dc      	b.n	8014aa0 <strtoul+0x62>
			any = -1;
 8014ae6:	f04f 36ff 	mov.w	r6, #4294967295
 8014aea:	e7e5      	b.n	8014ab8 <strtoul+0x7a>
		}
	}
	if (any < 0) {
 8014aec:	2e00      	cmp	r6, #0
 8014aee:	da0a      	bge.n	8014b06 <strtoul+0xc8>
 8014af0:	f7fc fe1a 	bl	8011728 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
 8014af4:	2322      	movs	r3, #34	; 0x22
 8014af6:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
 8014af8:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
 8014afc:	f1b8 0f00 	cmp.w	r8, #0
 8014b00:	d109      	bne.n	8014b16 <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
 8014b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
 8014b06:	f1bc 0f00 	cmp.w	ip, #0
 8014b0a:	d000      	beq.n	8014b0e <strtoul+0xd0>
		acc = -acc;
 8014b0c:	4240      	negs	r0, r0
	if (endptr != NULL) {
 8014b0e:	f1b8 0f00 	cmp.w	r8, #0
 8014b12:	d0f6      	beq.n	8014b02 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
 8014b14:	b106      	cbz	r6, 8014b18 <strtoul+0xda>
 8014b16:	1e67      	subs	r7, r4, #1
 8014b18:	f8c8 7000 	str.w	r7, [r8]
	return acc;
 8014b1c:	e7f1      	b.n	8014b02 <strtoul+0xc4>
	if (base == 0) {
 8014b1e:	2330      	movs	r3, #48	; 0x30
 8014b20:	2a00      	cmp	r2, #0
 8014b22:	d1ae      	bne.n	8014a82 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
 8014b24:	2208      	movs	r2, #8
 8014b26:	e7ac      	b.n	8014a82 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
 8014b28:	2b30      	cmp	r3, #48	; 0x30
 8014b2a:	d0a2      	beq.n	8014a72 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
 8014b2c:	220a      	movs	r2, #10
 8014b2e:	e7a8      	b.n	8014a82 <strtoul+0x44>

08014b30 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
 8014b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
 8014b34:	f891 8000 	ldrb.w	r8, [r1]
{
 8014b38:	4605      	mov	r5, r0
	if (c != 0) {
 8014b3a:	f1b8 0f00 	cmp.w	r8, #0
 8014b3e:	d010      	beq.n	8014b62 <strstr+0x32>
	c = *find++;
 8014b40:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
 8014b42:	4620      	mov	r0, r4
 8014b44:	f000 f84a 	bl	8014bdc <strlen>
 8014b48:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
 8014b4a:	462e      	mov	r6, r5
 8014b4c:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
 8014b50:	b163      	cbz	r3, 8014b6c <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
 8014b52:	4598      	cmp	r8, r3
 8014b54:	d108      	bne.n	8014b68 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
 8014b56:	463a      	mov	r2, r7
 8014b58:	4621      	mov	r1, r4
 8014b5a:	4630      	mov	r0, r6
 8014b5c:	f000 f851 	bl	8014c02 <strncmp>
 8014b60:	b910      	cbnz	r0, 8014b68 <strstr+0x38>
		s--;
	}
	return (char *)s;
}
 8014b62:	4628      	mov	r0, r5
 8014b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
 8014b68:	4635      	mov	r5, r6
 8014b6a:	e7ee      	b.n	8014b4a <strstr+0x1a>
					return NULL;
 8014b6c:	461d      	mov	r5, r3
 8014b6e:	e7f8      	b.n	8014b62 <strstr+0x32>

08014b70 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 8014b70:	3901      	subs	r1, #1
 8014b72:	4603      	mov	r3, r0
 8014b74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014b78:	b90a      	cbnz	r2, 8014b7e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
 8014b7a:	701a      	strb	r2, [r3, #0]

	return dest;
}
 8014b7c:	4770      	bx	lr
		*d = *s;
 8014b7e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
 8014b82:	e7f7      	b.n	8014b74 <strcpy+0x4>

08014b84 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
 8014b84:	b570      	push	{r4, r5, r6, lr}
 8014b86:	4605      	mov	r5, r0
 8014b88:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
 8014b8a:	b142      	cbz	r2, 8014b9e <strncpy+0x1a>
 8014b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
 8014b90:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
 8014b92:	b92c      	cbnz	r4, 8014ba0 <strncpy+0x1c>
 8014b94:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
 8014b96:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d1fb      	bne.n	8014b96 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
 8014b9e:	bd70      	pop	{r4, r5, r6, pc}
		n--;
 8014ba0:	4632      	mov	r2, r6
		*d = *s;
 8014ba2:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
 8014ba6:	e7ef      	b.n	8014b88 <strncpy+0x4>

08014ba8 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
 8014ba8:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
 8014baa:	4603      	mov	r3, r0
 8014bac:	781a      	ldrb	r2, [r3, #0]
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3301      	adds	r3, #1
 8014bb2:	428a      	cmp	r2, r1
 8014bb4:	d004      	beq.n	8014bc0 <strchr+0x18>
 8014bb6:	2a00      	cmp	r2, #0
 8014bb8:	d1f8      	bne.n	8014bac <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
 8014bba:	2900      	cmp	r1, #0
 8014bbc:	bf18      	it	ne
 8014bbe:	2000      	movne	r0, #0
}
 8014bc0:	4770      	bx	lr

08014bc2 <strrchr>:
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
	char *match = NULL;
 8014bc2:	4603      	mov	r3, r0

	do {
		if (*s == (char)c) {
 8014bc4:	b2c9      	uxtb	r1, r1
	char *match = NULL;
 8014bc6:	2000      	movs	r0, #0
{
 8014bc8:	b510      	push	{r4, lr}
 8014bca:	461c      	mov	r4, r3
		if (*s == (char)c) {
 8014bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014bd0:	428a      	cmp	r2, r1
 8014bd2:	bf08      	it	eq
 8014bd4:	4620      	moveq	r0, r4
			match = (char *)s;
		}
	} while (*s++);
 8014bd6:	2a00      	cmp	r2, #0
 8014bd8:	d1f7      	bne.n	8014bca <strrchr+0x8>

	return match;
}
 8014bda:	bd10      	pop	{r4, pc}

08014bdc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8014bdc:	4603      	mov	r3, r0
	size_t n = 0;
 8014bde:	2000      	movs	r0, #0

	while (*s != '\0') {
 8014be0:	5c1a      	ldrb	r2, [r3, r0]
 8014be2:	b902      	cbnz	r2, 8014be6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8014be4:	4770      	bx	lr
		n++;
 8014be6:	3001      	adds	r0, #1
 8014be8:	e7fa      	b.n	8014be0 <strlen+0x4>

08014bea <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8014bea:	1e43      	subs	r3, r0, #1
 8014bec:	3901      	subs	r1, #1
 8014bee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8014bf2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014bf6:	4282      	cmp	r2, r0
 8014bf8:	d101      	bne.n	8014bfe <strcmp+0x14>
 8014bfa:	2a00      	cmp	r2, #0
 8014bfc:	d1f7      	bne.n	8014bee <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8014bfe:	1a10      	subs	r0, r2, r0
 8014c00:	4770      	bx	lr

08014c02 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8014c02:	3901      	subs	r1, #1
 8014c04:	4402      	add	r2, r0
{
 8014c06:	b510      	push	{r4, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8014c08:	4282      	cmp	r2, r0
 8014c0a:	d009      	beq.n	8014c20 <strncmp+0x1e>
 8014c0c:	7803      	ldrb	r3, [r0, #0]
 8014c0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014c12:	42a3      	cmp	r3, r4
 8014c14:	d100      	bne.n	8014c18 <strncmp+0x16>
 8014c16:	b90b      	cbnz	r3, 8014c1c <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
 8014c18:	1b18      	subs	r0, r3, r4
 8014c1a:	e002      	b.n	8014c22 <strncmp+0x20>
		s1++;
 8014c1c:	3001      	adds	r0, #1
		n--;
 8014c1e:	e7f3      	b.n	8014c08 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
 8014c20:	2000      	movs	r0, #0
}
 8014c22:	bd10      	pop	{r4, pc}

08014c24 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
 8014c24:	4603      	mov	r3, r0
 8014c26:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
 8014c28:	b15a      	cbz	r2, 8014c42 <memcmp+0x1e>
 8014c2a:	3901      	subs	r1, #1
 8014c2c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
 8014c2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014c32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014c36:	42a3      	cmp	r3, r4
 8014c38:	d001      	beq.n	8014c3e <memcmp+0x1a>
 8014c3a:	4290      	cmp	r0, r2
 8014c3c:	d0f7      	beq.n	8014c2e <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
 8014c3e:	1a80      	subs	r0, r0, r2
}
 8014c40:	bd10      	pop	{r4, pc}
		return 0;
 8014c42:	4610      	mov	r0, r2
 8014c44:	e7fc      	b.n	8014c40 <memcmp+0x1c>

08014c46 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
 8014c46:	1a43      	subs	r3, r0, r1
 8014c48:	4293      	cmp	r3, r2
 8014c4a:	eb00 0302 	add.w	r3, r0, r2
{
 8014c4e:	b510      	push	{r4, lr}
	if ((size_t) (dest - src) < n) {
 8014c50:	d308      	bcc.n	8014c64 <memmove+0x1e>
 8014c52:	3901      	subs	r1, #1
	char *dest = d;
 8014c54:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d007      	beq.n	8014c6a <memmove+0x24>
			*dest = *src;
 8014c5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014c5e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
 8014c62:	e7f8      	b.n	8014c56 <memmove+0x10>
 8014c64:	440a      	add	r2, r1
		while (n > 0) {
 8014c66:	428a      	cmp	r2, r1
 8014c68:	d100      	bne.n	8014c6c <memmove+0x26>
		}
	}

	return d;
}
 8014c6a:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
 8014c6c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 8014c70:	f803 4d01 	strb.w	r4, [r3, #-1]!
 8014c74:	e7f7      	b.n	8014c66 <memmove+0x20>

08014c76 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8014c76:	1e43      	subs	r3, r0, #1
 8014c78:	440a      	add	r2, r1
{
 8014c7a:	b510      	push	{r4, lr}
	while (n > 0) {
 8014c7c:	4291      	cmp	r1, r2
 8014c7e:	d100      	bne.n	8014c82 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8014c80:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8014c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c86:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8014c8a:	e7f7      	b.n	8014c7c <memcpy+0x6>

08014c8c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8014c8c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8014c8e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8014c90:	4603      	mov	r3, r0
	while (n > 0) {
 8014c92:	4293      	cmp	r3, r2
 8014c94:	d100      	bne.n	8014c98 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8014c96:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8014c98:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8014c9c:	e7f9      	b.n	8014c92 <memset+0x6>

08014c9e <memchr>:
 *
 * @return pointer to start of found byte
 */

void *memchr(const void *s, int c, size_t n)
{
 8014c9e:	4603      	mov	r3, r0
	if (n != 0) {
 8014ca0:	4610      	mov	r0, r2
{
 8014ca2:	b510      	push	{r4, lr}
	if (n != 0) {
 8014ca4:	b14a      	cbz	r2, 8014cba <memchr+0x1c>
 8014ca6:	189a      	adds	r2, r3, r2
		const unsigned char *p = s;

		do {
			if (*p++ == (unsigned char)c) {
 8014ca8:	b2c9      	uxtb	r1, r1
 8014caa:	4618      	mov	r0, r3
 8014cac:	f813 4b01 	ldrb.w	r4, [r3], #1
 8014cb0:	428c      	cmp	r4, r1
 8014cb2:	d002      	beq.n	8014cba <memchr+0x1c>
				return ((void *)(p - 1));
			}

		} while (--n != 0);
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	d1f8      	bne.n	8014caa <memchr+0xc>
	}

	return NULL;
 8014cb8:	2000      	movs	r0, #0
}
 8014cba:	bd10      	pop	{r4, pc}

08014cbc <_stdout_hook_default>:
}
 8014cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8014cc0:	4770      	bx	lr

08014cc2 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
 8014cc2:	684b      	ldr	r3, [r1, #4]
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	dd07      	ble.n	8014cd8 <sprintf_out+0x16>
		*(p->ptr) = c;
 8014cc8:	680b      	ldr	r3, [r1, #0]
 8014cca:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
 8014ccc:	680b      	ldr	r3, [r1, #0]
 8014cce:	3301      	adds	r3, #1
 8014cd0:	600b      	str	r3, [r1, #0]
		p->len -= 1;
 8014cd2:	684b      	ldr	r3, [r1, #4]
 8014cd4:	3b01      	subs	r3, #1
 8014cd6:	604b      	str	r3, [r1, #4]
}
 8014cd8:	2000      	movs	r0, #0
 8014cda:	4770      	bx	lr

08014cdc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8014cdc:	4603      	mov	r3, r0
	size_t n = 0;
 8014cde:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8014ce0:	5c1a      	ldrb	r2, [r3, r0]
 8014ce2:	b10a      	cbz	r2, 8014ce8 <strnlen+0xc>
 8014ce4:	4288      	cmp	r0, r1
 8014ce6:	d100      	bne.n	8014cea <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8014ce8:	4770      	bx	lr
		n++;
 8014cea:	3001      	adds	r0, #1
 8014cec:	e7f8      	b.n	8014ce0 <strnlen+0x4>

08014cee <foldcase>:
#define EOS '\0'

static inline int foldcase(int ch, int flags)
{

	if ((flags & FNM_CASEFOLD) != 0 && isupper(ch)) {
 8014cee:	070b      	lsls	r3, r1, #28
 8014cf0:	d504      	bpl.n	8014cfc <foldcase+0xe>
 8014cf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014cf6:	2b19      	cmp	r3, #25
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
 8014cf8:	bf98      	it	ls
 8014cfa:	3020      	addls	r0, #32
		return tolower(ch);
	}

	return ch;
}
 8014cfc:	4770      	bx	lr

08014cfe <fnmatchx>:

	return ok == negate ? NULL : pattern;
}

static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
 8014cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d02:	b087      	sub	sp, #28
 8014d04:	4689      	mov	r9, r1
 8014d06:	4615      	mov	r5, r2
	const char *stringstart, *r;
	char c, test;

	if (pattern == NULL || string == NULL) {
 8014d08:	4604      	mov	r4, r0
{
 8014d0a:	9302      	str	r3, [sp, #8]
	if (pattern == NULL || string == NULL) {
 8014d0c:	b918      	cbnz	r0, 8014d16 <fnmatchx+0x18>
		return FNM_NOMATCH;
 8014d0e:	2001      	movs	r0, #1

			break;
		}
	}
	/* NOTREACHED */
}
 8014d10:	b007      	add	sp, #28
 8014d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (pattern == NULL || string == NULL) {
 8014d16:	2900      	cmp	r1, #0
 8014d18:	d0f9      	beq.n	8014d0e <fnmatchx+0x10>
	if (recursion-- == 0) {
 8014d1a:	9b02      	ldr	r3, [sp, #8]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	f000 8111 	beq.w	8014f44 <fnmatchx+0x246>
			if (*string == '.' && (flags & FNM_PERIOD) &&
 8014d22:	f005 0304 	and.w	r3, r5, #4
 8014d26:	460a      	mov	r2, r1
 8014d28:	9304      	str	r3, [sp, #16]
		c = FOLDCASE(*pattern++, flags);
 8014d2a:	46a0      	mov	r8, r4
 8014d2c:	4629      	mov	r1, r5
 8014d2e:	f818 0b01 	ldrb.w	r0, [r8], #1
 8014d32:	f7ff ffdc 	bl	8014cee <foldcase>
 8014d36:	4603      	mov	r3, r0
 8014d38:	b2c0      	uxtb	r0, r0
			if ((flags & FNM_LEADING_DIR) && *string == '/') {
 8014d3a:	7817      	ldrb	r7, [r2, #0]
		switch (c) {
 8014d3c:	283f      	cmp	r0, #63	; 0x3f
 8014d3e:	4606      	mov	r6, r0
 8014d40:	d025      	beq.n	8014d8e <fnmatchx+0x90>
 8014d42:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8014d46:	d10b      	bne.n	8014d60 <fnmatchx+0x62>
 8014d48:	b1c8      	cbz	r0, 8014d7e <fnmatchx+0x80>
 8014d4a:	282a      	cmp	r0, #42	; 0x2a
 8014d4c:	d036      	beq.n	8014dbc <fnmatchx+0xbe>
			if (c != FOLDCASE(*string++, flags)) {
 8014d4e:	4629      	mov	r1, r5
 8014d50:	4638      	mov	r0, r7
 8014d52:	f7ff ffcc 	bl	8014cee <foldcase>
 8014d56:	4286      	cmp	r6, r0
 8014d58:	f102 0201 	add.w	r2, r2, #1
 8014d5c:	d01e      	beq.n	8014d9c <fnmatchx+0x9e>
 8014d5e:	e7d6      	b.n	8014d0e <fnmatchx+0x10>
		switch (c) {
 8014d60:	285b      	cmp	r0, #91	; 0x5b
 8014d62:	d07a      	beq.n	8014e5a <fnmatchx+0x15c>
 8014d64:	285c      	cmp	r0, #92	; 0x5c
 8014d66:	d1f2      	bne.n	8014d4e <fnmatchx+0x50>
			if (!(flags & FNM_NOESCAPE)) {
 8014d68:	07e8      	lsls	r0, r5, #31
 8014d6a:	d4f0      	bmi.n	8014d4e <fnmatchx+0x50>
				c = FOLDCASE(*pattern++, flags);
 8014d6c:	7860      	ldrb	r0, [r4, #1]
 8014d6e:	f7ff ffbe 	bl	8014cee <foldcase>
				if (c == EOS) {
 8014d72:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
				c = FOLDCASE(*pattern++, flags);
 8014d76:	bf18      	it	ne
 8014d78:	f104 0802 	addne.w	r8, r4, #2
 8014d7c:	e7e7      	b.n	8014d4e <fnmatchx+0x50>
			if ((flags & FNM_LEADING_DIR) && *string == '/') {
 8014d7e:	06eb      	lsls	r3, r5, #27
 8014d80:	d501      	bpl.n	8014d86 <fnmatchx+0x88>
 8014d82:	2f2f      	cmp	r7, #47	; 0x2f
 8014d84:	d0c4      	beq.n	8014d10 <fnmatchx+0x12>
			return *string == EOS ? 0 : FNM_NOMATCH;
 8014d86:	1e38      	subs	r0, r7, #0
						       : FNM_NOMATCH;
 8014d88:	bf18      	it	ne
 8014d8a:	2001      	movne	r0, #1
 8014d8c:	e7c0      	b.n	8014d10 <fnmatchx+0x12>
			if (*string == EOS) {
 8014d8e:	2f00      	cmp	r7, #0
 8014d90:	d0bd      	beq.n	8014d0e <fnmatchx+0x10>
			if (*string == '/' && (flags & FNM_PATHNAME)) {
 8014d92:	2f2f      	cmp	r7, #47	; 0x2f
 8014d94:	d104      	bne.n	8014da0 <fnmatchx+0xa2>
 8014d96:	07ae      	lsls	r6, r5, #30
 8014d98:	d4b9      	bmi.n	8014d0e <fnmatchx+0x10>
			++string;
 8014d9a:	3201      	adds	r2, #1
			break;
 8014d9c:	4644      	mov	r4, r8
 8014d9e:	e7c4      	b.n	8014d2a <fnmatchx+0x2c>
			if (*string == '.' && (flags & FNM_PERIOD) &&
 8014da0:	2f2e      	cmp	r7, #46	; 0x2e
 8014da2:	d1fa      	bne.n	8014d9a <fnmatchx+0x9c>
 8014da4:	9b04      	ldr	r3, [sp, #16]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d0f7      	beq.n	8014d9a <fnmatchx+0x9c>
 8014daa:	454a      	cmp	r2, r9
 8014dac:	d0af      	beq.n	8014d0e <fnmatchx+0x10>
			    (string == stringstart ||
 8014dae:	07ac      	lsls	r4, r5, #30
 8014db0:	d5f3      	bpl.n	8014d9a <fnmatchx+0x9c>
			     ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
 8014db2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8014db6:	2b2f      	cmp	r3, #47	; 0x2f
 8014db8:	d1ef      	bne.n	8014d9a <fnmatchx+0x9c>
 8014dba:	e7a8      	b.n	8014d0e <fnmatchx+0x10>
			c = FOLDCASE(*pattern, flags);
 8014dbc:	7860      	ldrb	r0, [r4, #1]
				c = FOLDCASE(*++pattern, flags);
 8014dbe:	f7ff ff96 	bl	8014cee <foldcase>
 8014dc2:	b2c1      	uxtb	r1, r0
			while (c == '*') {
 8014dc4:	292a      	cmp	r1, #42	; 0x2a
 8014dc6:	d018      	beq.n	8014dfa <fnmatchx+0xfc>
			if (*string == '.' && (flags & FNM_PERIOD) &&
 8014dc8:	2f2e      	cmp	r7, #46	; 0x2e
 8014dca:	d109      	bne.n	8014de0 <fnmatchx+0xe2>
 8014dcc:	9b04      	ldr	r3, [sp, #16]
 8014dce:	b13b      	cbz	r3, 8014de0 <fnmatchx+0xe2>
 8014dd0:	454a      	cmp	r2, r9
 8014dd2:	d09c      	beq.n	8014d0e <fnmatchx+0x10>
			    (string == stringstart ||
 8014dd4:	07a8      	lsls	r0, r5, #30
 8014dd6:	d503      	bpl.n	8014de0 <fnmatchx+0xe2>
			     ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
 8014dd8:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8014ddc:	2b2f      	cmp	r3, #47	; 0x2f
 8014dde:	d096      	beq.n	8014d0e <fnmatchx+0x10>
			if (c == EOS) {
 8014de0:	b979      	cbnz	r1, 8014e02 <fnmatchx+0x104>
				if (flags & FNM_PATHNAME) {
 8014de2:	f015 0002 	ands.w	r0, r5, #2
 8014de6:	d093      	beq.n	8014d10 <fnmatchx+0x12>
						       : FNM_NOMATCH;
 8014de8:	06eb      	lsls	r3, r5, #27
 8014dea:	f100 80ad 	bmi.w	8014f48 <fnmatchx+0x24a>
							       strchr(string, '/') == NULL
 8014dee:	212f      	movs	r1, #47	; 0x2f
 8014df0:	4610      	mov	r0, r2
 8014df2:	f7ff fed9 	bl	8014ba8 <strchr>
						       : FNM_NOMATCH;
 8014df6:	3800      	subs	r0, #0
 8014df8:	e7c6      	b.n	8014d88 <fnmatchx+0x8a>
				c = FOLDCASE(*++pattern, flags);
 8014dfa:	4629      	mov	r1, r5
 8014dfc:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 8014e00:	e7dd      	b.n	8014dbe <fnmatchx+0xc0>
			} else if (c == '/' && flags & FNM_PATHNAME) {
 8014e02:	292f      	cmp	r1, #47	; 0x2f
 8014e04:	d020      	beq.n	8014e48 <fnmatchx+0x14a>
	if (recursion-- == 0) {
 8014e06:	9b02      	ldr	r3, [sp, #8]
 8014e08:	4616      	mov	r6, r2
				int e = fnmatchx(pattern, string, flags & ~FNM_PERIOD, recursion);
 8014e0a:	f025 0a04 	bic.w	sl, r5, #4
				if (test == '/' && flags & FNM_PATHNAME) {
 8014e0e:	f005 0702 	and.w	r7, r5, #2
	if (recursion-- == 0) {
 8014e12:	f103 39ff 	add.w	r9, r3, #4294967295
 8014e16:	46b3      	mov	fp, r6
				test = FOLDCASE(*string, flags);
 8014e18:	4629      	mov	r1, r5
 8014e1a:	3601      	adds	r6, #1
 8014e1c:	f89b 0000 	ldrb.w	r0, [fp]
 8014e20:	f7ff ff65 	bl	8014cee <foldcase>
				if (test == EOS) {
 8014e24:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8014e28:	f43f af71 	beq.w	8014d0e <fnmatchx+0x10>
				int e = fnmatchx(pattern, string, flags & ~FNM_PERIOD, recursion);
 8014e2c:	464b      	mov	r3, r9
 8014e2e:	4652      	mov	r2, sl
 8014e30:	4659      	mov	r1, fp
 8014e32:	4640      	mov	r0, r8
 8014e34:	f7ff ff63 	bl	8014cfe <fnmatchx>
				if (e != FNM_NOMATCH) {
 8014e38:	2801      	cmp	r0, #1
 8014e3a:	f47f af69 	bne.w	8014d10 <fnmatchx+0x12>
				if (test == '/' && flags & FNM_PATHNAME) {
 8014e3e:	2c2f      	cmp	r4, #47	; 0x2f
 8014e40:	d1e9      	bne.n	8014e16 <fnmatchx+0x118>
 8014e42:	2f00      	cmp	r7, #0
 8014e44:	d0e7      	beq.n	8014e16 <fnmatchx+0x118>
 8014e46:	e762      	b.n	8014d0e <fnmatchx+0x10>
			} else if (c == '/' && flags & FNM_PATHNAME) {
 8014e48:	07af      	lsls	r7, r5, #30
 8014e4a:	d5dc      	bpl.n	8014e06 <fnmatchx+0x108>
				string = strchr(string, '/');
 8014e4c:	4610      	mov	r0, r2
 8014e4e:	f7ff feab 	bl	8014ba8 <strchr>
				if (string == NULL) {
 8014e52:	4602      	mov	r2, r0
 8014e54:	2800      	cmp	r0, #0
 8014e56:	d1a1      	bne.n	8014d9c <fnmatchx+0x9e>
 8014e58:	e759      	b.n	8014d0e <fnmatchx+0x10>
			if (*string == EOS) {
 8014e5a:	2f00      	cmp	r7, #0
 8014e5c:	f43f af57 	beq.w	8014d0e <fnmatchx+0x10>
			if (*string == '/' && flags & FNM_PATHNAME) {
 8014e60:	2f2f      	cmp	r7, #47	; 0x2f
 8014e62:	d102      	bne.n	8014e6a <fnmatchx+0x16c>
 8014e64:	07ae      	lsls	r6, r5, #30
 8014e66:	f53f af52 	bmi.w	8014d0e <fnmatchx+0x10>
			r = rangematch(pattern, FOLDCASE(*string, flags), flags);
 8014e6a:	4629      	mov	r1, r5
 8014e6c:	4638      	mov	r0, r7
 8014e6e:	f7ff ff3e 	bl	8014cee <foldcase>
	negate = *pattern == '!' || *pattern == '^';
 8014e72:	7863      	ldrb	r3, [r4, #1]
			r = rangematch(pattern, FOLDCASE(*string, flags), flags);
 8014e74:	4683      	mov	fp, r0
	negate = *pattern == '!' || *pattern == '^';
 8014e76:	2b21      	cmp	r3, #33	; 0x21
 8014e78:	d001      	beq.n	8014e7e <fnmatchx+0x180>
	if (negate) {
 8014e7a:	2b5e      	cmp	r3, #94	; 0x5e
 8014e7c:	d11e      	bne.n	8014ebc <fnmatchx+0x1be>
		++pattern;
 8014e7e:	3402      	adds	r4, #2
 8014e80:	2301      	movs	r3, #1
	for (need = true, ok = false, c = FOLDCASE(*pattern++, flags); c != ']' || need;
 8014e82:	4629      	mov	r1, r5
 8014e84:	f814 0b01 	ldrb.w	r0, [r4], #1
	negate = *pattern == '!' || *pattern == '^';
 8014e88:	9301      	str	r3, [sp, #4]
	for (need = true, ok = false, c = FOLDCASE(*pattern++, flags); c != ']' || need;
 8014e8a:	f7ff ff30 	bl	8014cee <foldcase>
 8014e8e:	2301      	movs	r3, #1
 8014e90:	b2c6      	uxtb	r6, r0
 8014e92:	f04f 0a00 	mov.w	sl, #0
		if (c == '\\' && !(flags & FNM_NOESCAPE)) {
 8014e96:	ea05 0103 	and.w	r1, r5, r3
 8014e9a:	9103      	str	r1, [sp, #12]
	for (need = true, ok = false, c = FOLDCASE(*pattern++, flags); c != ']' || need;
 8014e9c:	2e5d      	cmp	r6, #93	; 0x5d
 8014e9e:	d110      	bne.n	8014ec2 <fnmatchx+0x1c4>
 8014ea0:	b9f3      	cbnz	r3, 8014ee0 <fnmatchx+0x1e2>
	return ok == negate ? NULL : pattern;
 8014ea2:	9b01      	ldr	r3, [sp, #4]
 8014ea4:	459a      	cmp	sl, r3
 8014ea6:	f43f af32 	beq.w	8014d0e <fnmatchx+0x10>
			if (r == (void *)-1) {
 8014eaa:	1c63      	adds	r3, r4, #1
 8014eac:	d103      	bne.n	8014eb6 <fnmatchx+0x1b8>
				if (*string != '[') {
 8014eae:	2f5b      	cmp	r7, #91	; 0x5b
 8014eb0:	f47f af2d 	bne.w	8014d0e <fnmatchx+0x10>
 8014eb4:	4644      	mov	r4, r8
			++string;
 8014eb6:	3201      	adds	r2, #1
			break;
 8014eb8:	46a0      	mov	r8, r4
 8014eba:	e76f      	b.n	8014d9c <fnmatchx+0x9e>
 8014ebc:	4644      	mov	r4, r8
	negate = *pattern == '!' || *pattern == '^';
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	e7df      	b.n	8014e82 <fnmatchx+0x184>
		if (c == '/') {
 8014ec2:	2e2f      	cmp	r6, #47	; 0x2f
 8014ec4:	d0f3      	beq.n	8014eae <fnmatchx+0x1b0>
		if (c == '\\' && !(flags & FNM_NOESCAPE)) {
 8014ec6:	2e5c      	cmp	r6, #92	; 0x5c
 8014ec8:	d107      	bne.n	8014eda <fnmatchx+0x1dc>
 8014eca:	9b03      	ldr	r3, [sp, #12]
			c = FOLDCASE(*pattern++, flags);
 8014ecc:	7820      	ldrb	r0, [r4, #0]
		if (c == '\\' && !(flags & FNM_NOESCAPE)) {
 8014ece:	b93b      	cbnz	r3, 8014ee0 <fnmatchx+0x1e2>
			c = FOLDCASE(*pattern++, flags);
 8014ed0:	4629      	mov	r1, r5
 8014ed2:	3401      	adds	r4, #1
 8014ed4:	f7ff ff0b 	bl	8014cee <foldcase>
 8014ed8:	b2c6      	uxtb	r6, r0
		if (c == EOS) {
 8014eda:	2e00      	cmp	r6, #0
 8014edc:	f43f af17 	beq.w	8014d0e <fnmatchx+0x10>
		if (*pattern == '-') {
 8014ee0:	7823      	ldrb	r3, [r4, #0]
 8014ee2:	2b2d      	cmp	r3, #45	; 0x2d
 8014ee4:	d129      	bne.n	8014f3a <fnmatchx+0x23c>
			c2 = FOLDCASE(*(pattern + 1), flags);
 8014ee6:	4629      	mov	r1, r5
 8014ee8:	7860      	ldrb	r0, [r4, #1]
 8014eea:	f7ff ff00 	bl	8014cee <foldcase>
			if (c2 != EOS && c2 != ']') {
 8014eee:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8014ef2:	d018      	beq.n	8014f26 <fnmatchx+0x228>
 8014ef4:	285d      	cmp	r0, #93	; 0x5d
 8014ef6:	d016      	beq.n	8014f26 <fnmatchx+0x228>
				if (c2 == '\\' && !(flags & FNM_NOESCAPE)) {
 8014ef8:	285c      	cmp	r0, #92	; 0x5c
				pattern += 2;
 8014efa:	f104 0c02 	add.w	ip, r4, #2
				if (c2 == '\\' && !(flags & FNM_NOESCAPE)) {
 8014efe:	d11a      	bne.n	8014f36 <fnmatchx+0x238>
 8014f00:	9b03      	ldr	r3, [sp, #12]
 8014f02:	b9c3      	cbnz	r3, 8014f36 <fnmatchx+0x238>
					c2 = FOLDCASE(*pattern++, flags);
 8014f04:	1ce3      	adds	r3, r4, #3
 8014f06:	78a0      	ldrb	r0, [r4, #2]
 8014f08:	9305      	str	r3, [sp, #20]
 8014f0a:	f7ff fef0 	bl	8014cee <foldcase>
				if (c2 == EOS) {
 8014f0e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8014f12:	f43f aefc 	beq.w	8014d0e <fnmatchx+0x10>
					c2 = FOLDCASE(*pattern++, flags);
 8014f16:	9b05      	ldr	r3, [sp, #20]
 8014f18:	461c      	mov	r4, r3
				if (c <= test && test <= c2) {
 8014f1a:	45b3      	cmp	fp, r6
 8014f1c:	db03      	blt.n	8014f26 <fnmatchx+0x228>
					ok = true;
 8014f1e:	4583      	cmp	fp, r0
 8014f20:	bfd8      	it	le
 8014f22:	f04f 0a01 	movle.w	sl, #1
	     c = FOLDCASE(*pattern++, flags)) {
 8014f26:	4629      	mov	r1, r5
 8014f28:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014f2c:	f7ff fedf 	bl	8014cee <foldcase>
		need = false;
 8014f30:	2300      	movs	r3, #0
	     c = FOLDCASE(*pattern++, flags)) {
 8014f32:	b2c6      	uxtb	r6, r0
 8014f34:	e7b2      	b.n	8014e9c <fnmatchx+0x19e>
				pattern += 2;
 8014f36:	4664      	mov	r4, ip
 8014f38:	e7ef      	b.n	8014f1a <fnmatchx+0x21c>
			ok = true;
 8014f3a:	45b3      	cmp	fp, r6
 8014f3c:	bf08      	it	eq
 8014f3e:	f04f 0a01 	moveq.w	sl, #1
 8014f42:	e7f0      	b.n	8014f26 <fnmatchx+0x228>
		return FNM_NORES;
 8014f44:	2003      	movs	r0, #3
 8014f46:	e6e3      	b.n	8014d10 <fnmatchx+0x12>
				return 0;
 8014f48:	4608      	mov	r0, r1
 8014f4a:	e6e1      	b.n	8014d10 <fnmatchx+0x12>

08014f4c <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
	return fnmatchx(pattern, string, flags, 64);
 8014f4c:	2340      	movs	r3, #64	; 0x40
 8014f4e:	f7ff bed6 	b.w	8014cfe <fnmatchx>

08014f52 <fixed_data_unref>:
}
 8014f52:	4770      	bx	lr

08014f54 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 8014f54:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
 8014f56:	6849      	ldr	r1, [r1, #4]
 8014f58:	6809      	ldr	r1, [r1, #0]
 8014f5a:	f7ef b939 	b.w	80041d0 <net_buf_alloc_len>

08014f5e <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
 8014f5e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
 8014f60:	4618      	mov	r0, r3
 8014f62:	685b      	ldr	r3, [r3, #4]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d1fb      	bne.n	8014f60 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
 8014f68:	4770      	bx	lr

08014f6a <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
 8014f6a:	6842      	ldr	r2, [r0, #4]
{
 8014f6c:	b510      	push	{r4, lr}
	if (parent->frags) {
 8014f6e:	b12a      	cbz	r2, 8014f7c <net_buf_frag_insert+0x12>
 8014f70:	460b      	mov	r3, r1
	while (buf->frags) {
 8014f72:	461c      	mov	r4, r3
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d1fb      	bne.n	8014f72 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
 8014f7a:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
 8014f7c:	6041      	str	r1, [r0, #4]
}
 8014f7e:	bd10      	pop	{r4, pc}

08014f80 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
 8014f80:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
 8014f82:	4604      	mov	r4, r0
 8014f84:	b920      	cbnz	r0, 8014f90 <net_buf_frag_add+0x10>
	buf->ref++;
 8014f86:	7a0b      	ldrb	r3, [r1, #8]
		return net_buf_ref(frag);
 8014f88:	4608      	mov	r0, r1
	buf->ref++;
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	720b      	strb	r3, [r1, #8]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
 8014f8e:	bd10      	pop	{r4, pc}
 8014f90:	4603      	mov	r3, r0
	while (buf->frags) {
 8014f92:	4618      	mov	r0, r3
 8014f94:	685b      	ldr	r3, [r3, #4]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d1fb      	bne.n	8014f92 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
 8014f9a:	f7ff ffe6 	bl	8014f6a <net_buf_frag_insert>
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	e7f5      	b.n	8014f8e <net_buf_frag_add+0xe>

08014fa2 <net_buf_linearize>:
	return next_frag;
}

size_t net_buf_linearize(void *dst, size_t dst_len, struct net_buf *src,
			 size_t offset, size_t len)
{
 8014fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fa6:	4607      	mov	r7, r0
 8014fa8:	460d      	mov	r5, r1
 8014faa:	4614      	mov	r4, r2
	len = MIN(len, dst_len);

	frag = src;

	/* find the right fragment to start copying from */
	while (frag && offset >= frag->len) {
 8014fac:	b30c      	cbz	r4, 8014ff2 <net_buf_linearize+0x50>
 8014fae:	8a22      	ldrh	r2, [r4, #16]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d91b      	bls.n	8014fec <net_buf_linearize+0x4a>
	len = MIN(len, dst_len);
 8014fb4:	9906      	ldr	r1, [sp, #24]
 8014fb6:	f04f 0800 	mov.w	r8, #0
 8014fba:	428d      	cmp	r5, r1
 8014fbc:	bf28      	it	cs
 8014fbe:	460d      	movcs	r5, r1
		frag = frag->frags;
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (frag && len > 0) {
 8014fc0:	b18d      	cbz	r5, 8014fe6 <net_buf_linearize+0x44>
		to_copy = MIN(len, frag->len - offset);
 8014fc2:	8a26      	ldrh	r6, [r4, #16]
		memcpy((uint8_t *)dst + copied, frag->data + offset, to_copy);
 8014fc4:	eb07 0008 	add.w	r0, r7, r8
 8014fc8:	68e1      	ldr	r1, [r4, #12]
		to_copy = MIN(len, frag->len - offset);
 8014fca:	1af6      	subs	r6, r6, r3
		memcpy((uint8_t *)dst + copied, frag->data + offset, to_copy);
 8014fcc:	4419      	add	r1, r3
		to_copy = MIN(len, frag->len - offset);
 8014fce:	42ae      	cmp	r6, r5
 8014fd0:	bf28      	it	cs
 8014fd2:	462e      	movcs	r6, r5
		memcpy((uint8_t *)dst + copied, frag->data + offset, to_copy);
 8014fd4:	4632      	mov	r2, r6

		copied += to_copy;
 8014fd6:	44b0      	add	r8, r6
		memcpy((uint8_t *)dst + copied, frag->data + offset, to_copy);
 8014fd8:	f7ff fe4d 	bl	8014c76 <memcpy>

		/* to_copy is always <= len */
		len -= to_copy;
		frag = frag->frags;
 8014fdc:	6864      	ldr	r4, [r4, #4]
		len -= to_copy;
 8014fde:	1bad      	subs	r5, r5, r6

		/* after the first iteration, this value will be 0 */
		offset = 0;
 8014fe0:	2300      	movs	r3, #0
	while (frag && len > 0) {
 8014fe2:	2c00      	cmp	r4, #0
 8014fe4:	d1ec      	bne.n	8014fc0 <net_buf_linearize+0x1e>
	}

	return copied;
}
 8014fe6:	4640      	mov	r0, r8
 8014fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset -= frag->len;
 8014fec:	1a9b      	subs	r3, r3, r2
		frag = frag->frags;
 8014fee:	6864      	ldr	r4, [r4, #4]
 8014ff0:	e7dc      	b.n	8014fac <net_buf_linearize+0xa>
 8014ff2:	46a0      	mov	r8, r4
	return copied;
 8014ff4:	e7f7      	b.n	8014fe6 <net_buf_linearize+0x44>

08014ff6 <net_buf_simple_add>:
	return buf->data + buf->len;
 8014ff6:	8883      	ldrh	r3, [r0, #4]
 8014ff8:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
 8014ffa:	4419      	add	r1, r3
 8014ffc:	8081      	strh	r1, [r0, #4]
	return tail;
}
 8014ffe:	18d0      	adds	r0, r2, r3
 8015000:	4770      	bx	lr

08015002 <net_buf_simple_add_be16>:

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}

void net_buf_simple_add_be16(struct net_buf_simple *buf, uint16_t val)
{
 8015002:	b530      	push	{r4, r5, lr}
 8015004:	8883      	ldrh	r3, [r0, #4]
 8015006:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
 8015008:	1c9d      	adds	r5, r3, #2
 801500a:	18d4      	adds	r4, r2, r3
 801500c:	8085      	strh	r5, [r0, #4]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val >> 8;
 801500e:	0a08      	lsrs	r0, r1, #8
 8015010:	54d0      	strb	r0, [r2, r3]
	dst[1] = val;
 8015012:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
}
 8015014:	bd30      	pop	{r4, r5, pc}

08015016 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
 8015016:	8882      	ldrh	r2, [r0, #4]
{
 8015018:	4603      	mov	r3, r0
	buf->len -= len;
 801501a:	1a52      	subs	r2, r2, r1
 801501c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
 801501e:	6800      	ldr	r0, [r0, #0]
 8015020:	4408      	add	r0, r1
 8015022:	6018      	str	r0, [r3, #0]
}
 8015024:	4770      	bx	lr

08015026 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
 8015026:	4603      	mov	r3, r0
	void *data = buf->data;
 8015028:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
 801502a:	889a      	ldrh	r2, [r3, #4]
 801502c:	1a52      	subs	r2, r2, r1
	buf->data += len;
 801502e:	4401      	add	r1, r0
	buf->len -= len;
 8015030:	809a      	strh	r2, [r3, #4]
	buf->data += len;
 8015032:	6019      	str	r1, [r3, #0]

	return data;
}
 8015034:	4770      	bx	lr

08015036 <net_buf_simple_max_len>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
 8015036:	6803      	ldr	r3, [r0, #0]
 8015038:	6882      	ldr	r2, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
}

uint16_t net_buf_simple_max_len(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf);
 801503a:	88c0      	ldrh	r0, [r0, #6]
	return buf->data - buf->__buf;
 801503c:	1a9b      	subs	r3, r3, r2
	return buf->size - net_buf_simple_headroom(buf);
 801503e:	1ac0      	subs	r0, r0, r3
}
 8015040:	b280      	uxth	r0, r0
 8015042:	4770      	bx	lr

08015044 <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8015044:	6800      	ldr	r0, [r0, #0]
 8015046:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 801504a:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
 801504e:	4258      	negs	r0, r3
 8015050:	4158      	adcs	r0, r3
 8015052:	4770      	bx	lr

08015054 <ethernet_flags>:
	return iface->if_dev->l2_data;
 8015054:	6803      	ldr	r3, [r0, #0]
	return ctx->ethernet_l2_flags;
 8015056:	689b      	ldr	r3, [r3, #8]
}
 8015058:	7e18      	ldrb	r0, [r3, #24]
 801505a:	4770      	bx	lr

0801505c <ethernet_enable>:
{
 801505c:	b570      	push	{r4, r5, r6, lr}
	return iface->if_dev->dev;
 801505e:	6803      	ldr	r3, [r0, #0]
 8015060:	4604      	mov	r4, r0
 8015062:	681a      	ldr	r2, [r3, #0]
	const struct ethernet_api *eth =
 8015064:	6895      	ldr	r5, [r2, #8]
	if (!eth) {
 8015066:	b185      	cbz	r5, 801508a <ethernet_enable+0x2e>
	if (!state) {
 8015068:	b951      	cbnz	r1, 8015080 <ethernet_enable+0x24>
		net_arp_clear_cache(iface);
 801506a:	f7ef fc7d 	bl	8004968 <net_arp_clear_cache>
		if (eth->stop) {
 801506e:	68ab      	ldr	r3, [r5, #8]
 8015070:	b90b      	cbnz	r3, 8015076 <ethernet_enable+0x1a>
	int ret = 0;
 8015072:	2000      	movs	r0, #0
}
 8015074:	bd70      	pop	{r4, r5, r6, pc}
 8015076:	6822      	ldr	r2, [r4, #0]
			ret = eth->stop(net_if_get_device(iface));
 8015078:	6810      	ldr	r0, [r2, #0]
}
 801507a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			ret = eth->start(net_if_get_device(iface));
 801507e:	4718      	bx	r3
		if (eth->start) {
 8015080:	686b      	ldr	r3, [r5, #4]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d0f5      	beq.n	8015072 <ethernet_enable+0x16>
			ret = eth->start(net_if_get_device(iface));
 8015086:	4610      	mov	r0, r2
 8015088:	e7f7      	b.n	801507a <ethernet_enable+0x1e>
		return -ENOENT;
 801508a:	f06f 0001 	mvn.w	r0, #1
 801508e:	e7f1      	b.n	8015074 <ethernet_enable+0x18>

08015090 <net_eth_is_addr_broadcast>:
	if (addr->addr[0] == 0xff &&
 8015090:	7803      	ldrb	r3, [r0, #0]
 8015092:	2bff      	cmp	r3, #255	; 0xff
 8015094:	d111      	bne.n	80150ba <net_eth_is_addr_broadcast+0x2a>
 8015096:	7843      	ldrb	r3, [r0, #1]
 8015098:	2bff      	cmp	r3, #255	; 0xff
 801509a:	d10e      	bne.n	80150ba <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[1] == 0xff &&
 801509c:	7883      	ldrb	r3, [r0, #2]
 801509e:	2bff      	cmp	r3, #255	; 0xff
 80150a0:	d10b      	bne.n	80150ba <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[2] == 0xff &&
 80150a2:	78c3      	ldrb	r3, [r0, #3]
 80150a4:	2bff      	cmp	r3, #255	; 0xff
 80150a6:	d108      	bne.n	80150ba <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[3] == 0xff &&
 80150a8:	7903      	ldrb	r3, [r0, #4]
 80150aa:	2bff      	cmp	r3, #255	; 0xff
 80150ac:	d105      	bne.n	80150ba <net_eth_is_addr_broadcast+0x2a>
	    addr->addr[4] == 0xff &&
 80150ae:	7940      	ldrb	r0, [r0, #5]
 80150b0:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 80150b4:	4258      	negs	r0, r3
 80150b6:	4158      	adcs	r0, r3
 80150b8:	4770      	bx	lr
	return false;
 80150ba:	2000      	movs	r0, #0
}
 80150bc:	4770      	bx	lr

080150be <carrier_on_off>:
	if (ctx->iface == NULL) {
 80150be:	6903      	ldr	r3, [r0, #16]
 80150c0:	b1ab      	cbz	r3, 80150ee <carrier_on_off+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80150c2:	f3bf 8f5b 	dmb	ish
 80150c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80150ca:	f3bf 8f5b 	dmb	ish
	if (eth_carrier_up == ctx->is_net_carrier_up) {
 80150ce:	7d42      	ldrb	r2, [r0, #21]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 80150d0:	f003 0301 	and.w	r3, r3, #1
 80150d4:	f002 0101 	and.w	r1, r2, #1
 80150d8:	4299      	cmp	r1, r3
 80150da:	d008      	beq.n	80150ee <carrier_on_off+0x30>
	ctx->is_net_carrier_up = eth_carrier_up;
 80150dc:	f363 0200 	bfi	r2, r3, #0, #1
 80150e0:	7542      	strb	r2, [r0, #21]
		ethernet_mgmt_raise_carrier_on_event(ctx->iface);
 80150e2:	6900      	ldr	r0, [r0, #16]
	if (eth_carrier_up) {
 80150e4:	b10b      	cbz	r3, 80150ea <carrier_on_off+0x2c>
		net_if_carrier_on(ctx->iface);
 80150e6:	f000 bfad 	b.w	8016044 <net_if_carrier_on>
		net_if_carrier_off(ctx->iface);
 80150ea:	f000 bfbd 	b.w	8016068 <net_if_carrier_off>
}
 80150ee:	4770      	bx	lr

080150f0 <ethernet_recv>:
{
 80150f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return pkt->frags->data;
 80150f4:	688b      	ldr	r3, [r1, #8]
 80150f6:	4602      	mov	r2, r0
 80150f8:	460c      	mov	r4, r1
 80150fa:	68dd      	ldr	r5, [r3, #12]
	if (hdr == NULL || pkt->buffer->len < hdr_len) {
 80150fc:	b915      	cbnz	r5, 8015104 <ethernet_recv+0x14>
	switch (type) {
 80150fe:	2002      	movs	r0, #2
}
 8015100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (hdr == NULL || pkt->buffer->len < hdr_len) {
 8015104:	8a1b      	ldrh	r3, [r3, #16]
 8015106:	2b0d      	cmp	r3, #13
 8015108:	d9f9      	bls.n	80150fe <ethernet_recv+0xe>
	type = ntohs(hdr->type);
 801510a:	89ab      	ldrh	r3, [r5, #12]
	switch (type) {
 801510c:	f248 61dd 	movw	r1, #34525	; 0x86dd
 8015110:	ba5b      	rev16	r3, r3
 8015112:	b29f      	uxth	r7, r3
 8015114:	428f      	cmp	r7, r1
 8015116:	d054      	beq.n	80151c2 <ethernet_recv+0xd2>
 8015118:	d84d      	bhi.n	80151b6 <ethernet_recv+0xc6>
 801511a:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 801511e:	d003      	beq.n	8015128 <ethernet_recv+0x38>
 8015120:	f640 0106 	movw	r1, #2054	; 0x806
 8015124:	428f      	cmp	r7, r1
 8015126:	d1ea      	bne.n	80150fe <ethernet_recv+0xe>
	pkt->family = family;
 8015128:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 801512c:	2601      	movs	r6, #1
 801512e:	f366 1147 	bfi	r1, r6, #5, #3
 8015132:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
	lladdr->addr = hdr->src.addr;
 8015136:	1da9      	adds	r1, r5, #6
	if (!net_eth_is_addr_broadcast((struct net_eth_addr *)lladdr->addr) &&
 8015138:	4628      	mov	r0, r5
	lladdr->addr = hdr->dst.addr;
 801513a:	62e5      	str	r5, [r4, #44]	; 0x2c
	lladdr->addr = hdr->src.addr;
 801513c:	6261      	str	r1, [r4, #36]	; 0x24
	lladdr->len = sizeof(struct net_eth_addr);
 801513e:	f240 3106 	movw	r1, #774	; 0x306
	pkt->ll_proto_type = type;
 8015142:	86a3      	strh	r3, [r4, #52]	; 0x34
 8015144:	8521      	strh	r1, [r4, #40]	; 0x28
	lladdr->len = sizeof(struct net_eth_addr);
 8015146:	8621      	strh	r1, [r4, #48]	; 0x30
	if (!net_eth_is_addr_broadcast((struct net_eth_addr *)lladdr->addr) &&
 8015148:	f7ff ffa2 	bl	8015090 <net_eth_is_addr_broadcast>
 801514c:	2800      	cmp	r0, #0
 801514e:	d03c      	beq.n	80151ca <ethernet_recv+0xda>
	return net_buf_simple_pull(&buf->b, len);
 8015150:	68a0      	ldr	r0, [r4, #8]
 8015152:	210e      	movs	r1, #14
 8015154:	300c      	adds	r0, #12
 8015156:	f7ff ff5e 	bl	8015016 <net_buf_simple_pull>
	if (IS_ENABLED(CONFIG_NET_IPV4) && type == NET_ETH_PTYPE_IP &&
 801515a:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 801515e:	d11b      	bne.n	8015198 <ethernet_recv+0xa8>
	if (net_eth_is_addr_broadcast(&hdr->dst) &&
 8015160:	4628      	mov	r0, r5
 8015162:	f7ff ff95 	bl	8015090 <net_eth_is_addr_broadcast>
 8015166:	b1b8      	cbz	r0, 8015198 <ethernet_recv+0xa8>
	return pkt->frags->data;
 8015168:	68a3      	ldr	r3, [r4, #8]
 801516a:	f8d3 900c 	ldr.w	r9, [r3, #12]
	    !(net_ipv4_is_addr_mcast((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 801516e:	f109 0810 	add.w	r8, r9, #16
 8015172:	4640      	mov	r0, r8
 8015174:	f7ff ff66 	bl	8015044 <net_ipv4_is_addr_mcast>
	if (net_eth_is_addr_broadcast(&hdr->dst) &&
 8015178:	b970      	cbnz	r0, 8015198 <ethernet_recv+0xa8>
	return pkt->iface;
 801517a:	f8d4 a018 	ldr.w	sl, [r4, #24]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 801517e:	f7f1 fb2f 	bl	80067e0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8015182:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015186:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8015188:	429a      	cmp	r2, r3
 801518a:	d005      	beq.n	8015198 <ethernet_recv+0xa8>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 801518c:	4641      	mov	r1, r8
 801518e:	4650      	mov	r0, sl
 8015190:	f7f0 fefc 	bl	8005f8c <net_if_ipv4_is_addr_bcast>
	    !(net_ipv4_is_addr_mcast((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 8015194:	2800      	cmp	r0, #0
 8015196:	d0b2      	beq.n	80150fe <ethernet_recv+0xe>
	ethernet_update_rx_stats(iface, hdr, net_pkt_get_len(pkt) + hdr_len);
 8015198:	68a2      	ldr	r2, [r4, #8]
	switch (type) {
 801519a:	4613      	mov	r3, r2
	while (buf) {
 801519c:	bb73      	cbnz	r3, 80151fc <ethernet_recv+0x10c>
	if (IS_ENABLED(CONFIG_NET_ARP) &&
 801519e:	2e01      	cmp	r6, #1
 80151a0:	d12e      	bne.n	8015200 <ethernet_recv+0x110>
	    family == AF_INET && type == NET_ETH_PTYPE_ARP) {
 80151a2:	f640 0306 	movw	r3, #2054	; 0x806
 80151a6:	429f      	cmp	r7, r3
 80151a8:	d12a      	bne.n	8015200 <ethernet_recv+0x110>
		return net_arp_input(pkt, hdr);
 80151aa:	4629      	mov	r1, r5
 80151ac:	4620      	mov	r0, r4
}
 80151ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return net_arp_input(pkt, hdr);
 80151b2:	f000 b8df 	b.w	8015374 <net_arp_input>
	switch (type) {
 80151b6:	f648 018e 	movw	r1, #34958	; 0x888e
 80151ba:	428f      	cmp	r7, r1
 80151bc:	d19f      	bne.n	80150fe <ethernet_recv+0xe>
 80151be:	2600      	movs	r6, #0
 80151c0:	e7b9      	b.n	8015136 <ethernet_recv+0x46>
	pkt->family = family;
 80151c2:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 80151c6:	2602      	movs	r6, #2
 80151c8:	e7b1      	b.n	801512e <ethernet_recv+0x3e>
	if (addr->addr[0] == 0x33 &&
 80151ca:	782b      	ldrb	r3, [r5, #0]
 80151cc:	2b33      	cmp	r3, #51	; 0x33
 80151ce:	d10d      	bne.n	80151ec <ethernet_recv+0xfc>
 80151d0:	786b      	ldrb	r3, [r5, #1]
 80151d2:	2b33      	cmp	r3, #51	; 0x33
	    addr->addr[1] == 0x00 &&
 80151d4:	d0bc      	beq.n	8015150 <ethernet_recv+0x60>
	return &iface->if_dev->link_addr;
 80151d6:	6813      	ldr	r3, [r2, #0]
	if (lladdr1->len != lladdr2->len) {
 80151d8:	7d1a      	ldrb	r2, [r3, #20]
 80151da:	2a06      	cmp	r2, #6
 80151dc:	d18f      	bne.n	80150fe <ethernet_recv+0xe>
	return !memcmp(lladdr1->addr, lladdr2->addr, lladdr1->len);
 80151de:	4629      	mov	r1, r5
 80151e0:	6918      	ldr	r0, [r3, #16]
 80151e2:	f7ff fd1f 	bl	8014c24 <memcmp>
		    (struct net_eth_addr *)lladdr->addr) &&
 80151e6:	2800      	cmp	r0, #0
 80151e8:	d0b2      	beq.n	8015150 <ethernet_recv+0x60>
 80151ea:	e788      	b.n	80150fe <ethernet_recv+0xe>
	if (addr->addr[0] == 0x01 &&
 80151ec:	2b01      	cmp	r3, #1
 80151ee:	d1f2      	bne.n	80151d6 <ethernet_recv+0xe6>
 80151f0:	786b      	ldrb	r3, [r5, #1]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d1ef      	bne.n	80151d6 <ethernet_recv+0xe6>
	    addr->addr[1] == 0x00 &&
 80151f6:	78ab      	ldrb	r3, [r5, #2]
 80151f8:	2b5e      	cmp	r3, #94	; 0x5e
 80151fa:	e7eb      	b.n	80151d4 <ethernet_recv+0xe4>
		buf = buf->frags;
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	e7cd      	b.n	801519c <ethernet_recv+0xac>
	return pkt->family;
 8015200:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	return pkt->frags->data;
 8015204:	68d1      	ldr	r1, [r2, #12]
	if (net_pkt_family(pkt) == AF_INET) {
 8015206:	095b      	lsrs	r3, r3, #5
 8015208:	2b01      	cmp	r3, #1
 801520a:	d106      	bne.n	801521a <ethernet_recv+0x12a>
 801520c:	884b      	ldrh	r3, [r1, #2]
 801520e:	ba5b      	rev16	r3, r3
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
 8015210:	b29b      	uxth	r3, r3
	if (len < NET_ETH_MINIMAL_FRAME_SIZE - sizeof(struct net_eth_hdr)) {
 8015212:	2b2d      	cmp	r3, #45	; 0x2d
 8015214:	d905      	bls.n	8015222 <ethernet_recv+0x132>
	return NET_CONTINUE;
 8015216:	2001      	movs	r0, #1
 8015218:	e772      	b.n	8015100 <ethernet_recv+0x10>
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
 801521a:	888b      	ldrh	r3, [r1, #4]
 801521c:	ba5b      	rev16	r3, r3
 801521e:	3328      	adds	r3, #40	; 0x28
 8015220:	e7f6      	b.n	8015210 <ethernet_recv+0x120>
			if (frag->len < len) {
 8015222:	8a11      	ldrh	r1, [r2, #16]
 8015224:	428b      	cmp	r3, r1
				frag->len = len;
 8015226:	bf94      	ite	ls
 8015228:	8213      	strhls	r3, [r2, #16]
				len -= frag->len;
 801522a:	1a5b      	subhi	r3, r3, r1
		for (frag = pkt->frags; frag; frag = frag->frags) {
 801522c:	6852      	ldr	r2, [r2, #4]
				len = 0U;
 801522e:	bf94      	ite	ls
 8015230:	2300      	movls	r3, #0
				len -= frag->len;
 8015232:	b29b      	uxthhi	r3, r3
		for (frag = pkt->frags; frag; frag = frag->frags) {
 8015234:	2a00      	cmp	r2, #0
 8015236:	d1f4      	bne.n	8015222 <ethernet_recv+0x132>
 8015238:	e7ed      	b.n	8015216 <ethernet_recv+0x126>

0801523a <net_eth_ipv4_mcast_to_mac_addr>:
	mac_addr->addr[0] = 0x01;
 801523a:	2301      	movs	r3, #1
 801523c:	700b      	strb	r3, [r1, #0]
	mac_addr->addr[1] = 0x00;
 801523e:	2300      	movs	r3, #0
 8015240:	704b      	strb	r3, [r1, #1]
	mac_addr->addr[2] = 0x5e;
 8015242:	235e      	movs	r3, #94	; 0x5e
 8015244:	708b      	strb	r3, [r1, #2]
	mac_addr->addr[3] = ipv4_addr->s4_addr[1];
 8015246:	7843      	ldrb	r3, [r0, #1]
 8015248:	70cb      	strb	r3, [r1, #3]
	mac_addr->addr[3] &= 0x7f;
 801524a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	mac_addr->addr[4] = ipv4_addr->s4_addr[2];
 801524e:	7882      	ldrb	r2, [r0, #2]
 8015250:	710a      	strb	r2, [r1, #4]
	mac_addr->addr[5] = ipv4_addr->s4_addr[3];
 8015252:	78c2      	ldrb	r2, [r0, #3]
	mac_addr->addr[3] &= 0x7f;
 8015254:	70cb      	strb	r3, [r1, #3]
	mac_addr->addr[5] = ipv4_addr->s4_addr[3];
 8015256:	714a      	strb	r2, [r1, #5]
}
 8015258:	4770      	bx	lr

0801525a <net_eth_carrier_on>:
	return iface->if_dev->l2_data;
 801525a:	6803      	ldr	r3, [r0, #0]
 801525c:	6898      	ldr	r0, [r3, #8]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801525e:	f3bf 8f5b 	dmb	ish
 8015262:	e850 3f00 	ldrex	r3, [r0]
 8015266:	f043 0201 	orr.w	r2, r3, #1
 801526a:	e840 2100 	strex	r1, r2, [r0]
 801526e:	2900      	cmp	r1, #0
 8015270:	d1f7      	bne.n	8015262 <net_eth_carrier_on+0x8>
	if (!atomic_test_and_set_bit(&ctx->flags, ETH_CARRIER_UP)) {
 8015272:	07db      	lsls	r3, r3, #31
 8015274:	f3bf 8f5b 	dmb	ish
 8015278:	d402      	bmi.n	8015280 <net_eth_carrier_on+0x26>
		k_work_submit(&ctx->carrier_work);
 801527a:	3004      	adds	r0, #4
 801527c:	f7fd b836 	b.w	80122ec <k_work_submit>
}
 8015280:	4770      	bx	lr

08015282 <net_eth_carrier_off>:
 8015282:	6803      	ldr	r3, [r0, #0]
 8015284:	6898      	ldr	r0, [r3, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8015286:	f3bf 8f5b 	dmb	ish
 801528a:	e850 3f00 	ldrex	r3, [r0]
 801528e:	f023 0201 	bic.w	r2, r3, #1
 8015292:	e840 2100 	strex	r1, r2, [r0]
 8015296:	2900      	cmp	r1, #0
 8015298:	d1f7      	bne.n	801528a <net_eth_carrier_off+0x8>
	if (atomic_test_and_clear_bit(&ctx->flags, ETH_CARRIER_UP)) {
 801529a:	07db      	lsls	r3, r3, #31
 801529c:	f3bf 8f5b 	dmb	ish
 80152a0:	d502      	bpl.n	80152a8 <net_eth_carrier_off+0x26>
		k_work_submit(&ctx->carrier_work);
 80152a2:	3004      	adds	r0, #4
 80152a4:	f7fd b822 	b.w	80122ec <k_work_submit>
}
 80152a8:	4770      	bx	lr

080152aa <sys_slist_prepend>:
	return list->head;
 80152aa:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
 80152ac:	600b      	str	r3, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 80152ae:	6843      	ldr	r3, [r0, #4]
	list->head = node;
 80152b0:	6001      	str	r1, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
 80152b2:	b903      	cbnz	r3, 80152b6 <sys_slist_prepend+0xc>
	list->tail = node;
 80152b4:	6041      	str	r1, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
 80152b6:	4770      	bx	lr

080152b8 <sys_slist_remove>:
	return node->next;
 80152b8:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 80152ba:	b939      	cbnz	r1, 80152cc <sys_slist_remove+0x14>
 80152bc:	6841      	ldr	r1, [r0, #4]
	list->head = node;
 80152be:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 80152c0:	428a      	cmp	r2, r1
 80152c2:	d100      	bne.n	80152c6 <sys_slist_remove+0xe>
	list->tail = node;
 80152c4:	6043      	str	r3, [r0, #4]
	parent->next = child;
 80152c6:	2300      	movs	r3, #0
 80152c8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 80152ca:	4770      	bx	lr
	parent->next = child;
 80152cc:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 80152ce:	6843      	ldr	r3, [r0, #4]
 80152d0:	429a      	cmp	r2, r3
	list->tail = node;
 80152d2:	bf08      	it	eq
 80152d4:	6041      	streq	r1, [r0, #4]
}
 80152d6:	e7f6      	b.n	80152c6 <sys_slist_remove+0xe>

080152d8 <k_uptime_get_32>:
{
 80152d8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80152da:	f006 fd95 	bl	801be08 <z_impl_k_uptime_ticks>
 80152de:	220a      	movs	r2, #10
 80152e0:	2300      	movs	r3, #0
 80152e2:	f7eb faa7 	bl	8000834 <__aeabi_uldivmod>
}
 80152e6:	bd08      	pop	{r3, pc}

080152e8 <if_get_addr.isra.0>:
	if (!ipv4) {
 80152e8:	b970      	cbnz	r0, 8015308 <if_get_addr.isra.0+0x20>
 80152ea:	4770      	bx	lr
		if (ipv4->unicast[i].is_used &&
 80152ec:	8803      	ldrh	r3, [r0, #0]
 80152ee:	2b01      	cmp	r3, #1
 80152f0:	d10e      	bne.n	8015310 <if_get_addr.isra.0+0x28>
		    ipv4->unicast[i].address.family == AF_INET &&
 80152f2:	f990 302d 	ldrsb.w	r3, [r0, #45]	; 0x2d
 80152f6:	2b01      	cmp	r3, #1
 80152f8:	d10a      	bne.n	8015310 <if_get_addr.isra.0+0x28>
		    ipv4->unicast[i].addr_state == NET_ADDR_PREFERRED &&
 80152fa:	b119      	cbz	r1, 8015304 <if_get_addr.isra.0+0x1c>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 80152fc:	680a      	ldr	r2, [r1, #0]
 80152fe:	6843      	ldr	r3, [r0, #4]
		    (!addr ||
 8015300:	429a      	cmp	r2, r3
 8015302:	d105      	bne.n	8015310 <if_get_addr.isra.0+0x28>
			return &ipv4->unicast[i].address.in_addr;
 8015304:	3004      	adds	r0, #4
 8015306:	4770      	bx	lr
		if (ipv4->unicast[i].is_used &&
 8015308:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 801530c:	079b      	lsls	r3, r3, #30
 801530e:	d4ed      	bmi.n	80152ec <if_get_addr.isra.0+0x4>
	return NULL;
 8015310:	2000      	movs	r0, #0
 8015312:	4770      	bx	lr

08015314 <arp_entry_find.isra.0>:
static struct arp_entry *arp_entry_find(sys_slist_t *list,
 8015314:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(list, entry, node) {
 8015316:	b908      	cbnz	r0, 801531c <arp_entry_find.isra.0+0x8>
	return NULL;
 8015318:	2000      	movs	r0, #0
}
 801531a:	bd30      	pop	{r4, r5, pc}
		if (entry->iface == iface &&
 801531c:	6884      	ldr	r4, [r0, #8]
 801531e:	428c      	cmp	r4, r1
 8015320:	d103      	bne.n	801532a <arp_entry_find.isra.0+0x16>
 8015322:	68c5      	ldr	r5, [r0, #12]
 8015324:	6814      	ldr	r4, [r2, #0]
 8015326:	42a5      	cmp	r5, r4
 8015328:	d0f7      	beq.n	801531a <arp_entry_find.isra.0+0x6>
		if (previous) {
 801532a:	b103      	cbz	r3, 801532e <arp_entry_find.isra.0+0x1a>
			*previous = &entry->node;
 801532c:	6018      	str	r0, [r3, #0]
	return node->next;
 801532e:	6800      	ldr	r0, [r0, #0]
 8015330:	e7f1      	b.n	8015316 <arp_entry_find.isra.0+0x2>

08015332 <arp_entry_cleanup>:
{
 8015332:	b538      	push	{r3, r4, r5, lr}
 8015334:	4604      	mov	r4, r0
	if (pending) {
 8015336:	b119      	cbz	r1, 8015340 <arp_entry_cleanup+0xe>
			pkt = k_fifo_get(&entry->pending_queue, K_FOREVER);
 8015338:	f100 0518 	add.w	r5, r0, #24
		while (!k_fifo_is_empty(&entry->pending_queue)) {
 801533c:	69a3      	ldr	r3, [r4, #24]
 801533e:	b97b      	cbnz	r3, 8015360 <arp_entry_cleanup+0x2e>
	entry->iface = NULL;
 8015340:	2500      	movs	r5, #0
	(void)memset(&entry->ip, 0, sizeof(struct in_addr));
 8015342:	2204      	movs	r2, #4
 8015344:	f104 000c 	add.w	r0, r4, #12
 8015348:	4629      	mov	r1, r5
	entry->iface = NULL;
 801534a:	60a5      	str	r5, [r4, #8]
	(void)memset(&entry->ip, 0, sizeof(struct in_addr));
 801534c:	f7ff fc9e 	bl	8014c8c <memset>
	(void)memset(&entry->eth, 0, sizeof(struct net_eth_addr));
 8015350:	4629      	mov	r1, r5
 8015352:	f104 0010 	add.w	r0, r4, #16
 8015356:	2206      	movs	r2, #6
}
 8015358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(&entry->eth, 0, sizeof(struct net_eth_addr));
 801535c:	f7ff bc96 	b.w	8014c8c <memset>
	return z_impl_k_queue_get(queue, timeout);
 8015360:	f04f 32ff 	mov.w	r2, #4294967295
 8015364:	f04f 33ff 	mov.w	r3, #4294967295
 8015368:	4628      	mov	r0, r5
 801536a:	f7fc fe15 	bl	8011f98 <z_impl_k_queue_get>
			net_pkt_unref(pkt);
 801536e:	f001 ffb8 	bl	80172e2 <net_pkt_unref>
 8015372:	e7e3      	b.n	801533c <arp_entry_cleanup+0xa>

08015374 <net_arp_input>:
{
 8015374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015378:	6882      	ldr	r2, [r0, #8]
 801537a:	460e      	mov	r6, r1
 801537c:	4605      	mov	r5, r0
	size_t bytes = 0;
 801537e:	2300      	movs	r3, #0
 8015380:	4611      	mov	r1, r2
	while (buf) {
 8015382:	b949      	cbnz	r1, 8015398 <net_arp_input+0x24>
 8015384:	68d4      	ldr	r4, [r2, #12]
				    (net_pkt_ip_data(pkt) - (uint8_t *)eth_hdr))) {
 8015386:	1ba2      	subs	r2, r4, r6
	if (net_pkt_get_len(pkt) < (sizeof(struct net_arp_hdr) -
 8015388:	f1c2 021c 	rsb	r2, r2, #28
 801538c:	429a      	cmp	r2, r3
 801538e:	d907      	bls.n	80153a0 <net_arp_input+0x2c>
		return NET_DROP;
 8015390:	2002      	movs	r0, #2
}
 8015392:	b003      	add	sp, #12
 8015394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bytes += buf->len;
 8015398:	8a08      	ldrh	r0, [r1, #16]
		buf = buf->frags;
 801539a:	6849      	ldr	r1, [r1, #4]
		bytes += buf->len;
 801539c:	4403      	add	r3, r0
		buf = buf->frags;
 801539e:	e7f0      	b.n	8015382 <net_arp_input+0xe>
	if (ntohs(arp_hdr->hwtype) != NET_ARP_HTYPE_ETH ||
 80153a0:	8823      	ldrh	r3, [r4, #0]
 80153a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153a6:	d1f3      	bne.n	8015390 <net_arp_input+0x1c>
 80153a8:	8863      	ldrh	r3, [r4, #2]
 80153aa:	2b08      	cmp	r3, #8
 80153ac:	d1f0      	bne.n	8015390 <net_arp_input+0x1c>
	    ntohs(arp_hdr->protocol) != NET_ETH_PTYPE_IP ||
 80153ae:	7927      	ldrb	r7, [r4, #4]
 80153b0:	2f06      	cmp	r7, #6
 80153b2:	d1ed      	bne.n	8015390 <net_arp_input+0x1c>
	    arp_hdr->hwlen != sizeof(struct net_eth_addr) ||
 80153b4:	7963      	ldrb	r3, [r4, #5]
 80153b6:	2b04      	cmp	r3, #4
 80153b8:	d1ea      	bne.n	8015390 <net_arp_input+0x1c>
	    arp_hdr->protolen != NET_ARP_IPV4_PTYPE_SIZE ||
 80153ba:	7ba3      	ldrb	r3, [r4, #14]
 80153bc:	2b7f      	cmp	r3, #127	; 0x7f
 80153be:	d0e7      	beq.n	8015390 <net_arp_input+0x1c>
	switch (ntohs(arp_hdr->opcode)) {
 80153c0:	88e3      	ldrh	r3, [r4, #6]
 80153c2:	badb      	revsh	r3, r3
 80153c4:	2b01      	cmp	r3, #1
 80153c6:	d007      	beq.n	80153d8 <net_arp_input+0x64>
 80153c8:	2b02      	cmp	r3, #2
 80153ca:	f000 80b2 	beq.w	8015532 <net_arp_input+0x1be>
	net_pkt_unref(pkt);
 80153ce:	4628      	mov	r0, r5
 80153d0:	f001 ff87 	bl	80172e2 <net_pkt_unref>
	return NET_OK;
 80153d4:	2000      	movs	r0, #0
 80153d6:	e7dc      	b.n	8015392 <net_arp_input+0x1e>
	return &iface->if_dev->link_addr;
 80153d8:	69ab      	ldr	r3, [r5, #24]
		if (memcmp(&arp_hdr->src_hwaddr,
 80153da:	f104 0808 	add.w	r8, r4, #8
 80153de:	463a      	mov	r2, r7
			   net_if_get_link_addr(net_pkt_iface(pkt))->addr,
 80153e0:	681b      	ldr	r3, [r3, #0]
		if (memcmp(&arp_hdr->src_hwaddr,
 80153e2:	4640      	mov	r0, r8
 80153e4:	6919      	ldr	r1, [r3, #16]
 80153e6:	f7ff fc1d 	bl	8014c24 <memcmp>
 80153ea:	2800      	cmp	r0, #0
 80153ec:	d0d0      	beq.n	8015390 <net_arp_input+0x1c>
				   net_eth_broadcast_addr(),
 80153ee:	f7ee ffb5 	bl	800435c <net_eth_broadcast_addr>
			if (memcmp(&eth_hdr->dst,
 80153f2:	463a      	mov	r2, r7
				   net_eth_broadcast_addr(),
 80153f4:	4601      	mov	r1, r0
			if (memcmp(&eth_hdr->dst,
 80153f6:	4630      	mov	r0, r6
 80153f8:	f7ff fc14 	bl	8014c24 <memcmp>
 80153fc:	b9c8      	cbnz	r0, 8015432 <net_arp_input+0xbe>
				   net_eth_broadcast_addr(),
 80153fe:	f7ee ffad 	bl	800435c <net_eth_broadcast_addr>
			    memcmp(&arp_hdr->dst_hwaddr,
 8015402:	2206      	movs	r2, #6
				   net_eth_broadcast_addr(),
 8015404:	4601      	mov	r1, r0
			    memcmp(&arp_hdr->dst_hwaddr,
 8015406:	f104 0012 	add.w	r0, r4, #18
 801540a:	f7ff fc0b 	bl	8014c24 <memcmp>
				   sizeof(struct net_eth_addr)) == 0 &&
 801540e:	b980      	cbnz	r0, 8015432 <net_arp_input+0xbe>
			    memcmp(&arp_hdr->dst_ipaddr, &arp_hdr->src_ipaddr,
 8015410:	f104 070e 	add.w	r7, r4, #14
 8015414:	2204      	movs	r2, #4
 8015416:	f104 0018 	add.w	r0, r4, #24
 801541a:	4639      	mov	r1, r7
 801541c:	f7ff fc02 	bl	8014c24 <memcmp>
				   sizeof(struct net_eth_addr)) == 0 &&
 8015420:	b938      	cbnz	r0, 8015432 <net_arp_input+0xbe>
				arp_update(net_pkt_iface(pkt),
 8015422:	2301      	movs	r3, #1
 8015424:	4642      	mov	r2, r8
 8015426:	4639      	mov	r1, r7
 8015428:	9000      	str	r0, [sp, #0]
			arp_update(net_pkt_iface(pkt),
 801542a:	69a8      	ldr	r0, [r5, #24]
 801542c:	f7ef f8b6 	bl	800459c <arp_update>
 8015430:	e7cd      	b.n	80153ce <net_arp_input+0x5a>
		if (memcmp(&eth_hdr->dst, net_eth_broadcast_addr(),
 8015432:	f7ee ff93 	bl	800435c <net_eth_broadcast_addr>
 8015436:	2206      	movs	r2, #6
 8015438:	4601      	mov	r1, r0
 801543a:	4630      	mov	r0, r6
 801543c:	f7ff fbf2 	bl	8014c24 <memcmp>
 8015440:	b928      	cbnz	r0, 801544e <net_arp_input+0xda>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8015442:	f8d4 300e 	ldr.w	r3, [r4, #14]
 8015446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			   sizeof(struct net_eth_addr)) == 0 &&
 801544a:	2be0      	cmp	r3, #224	; 0xe0
 801544c:	d0a0      	beq.n	8015390 <net_arp_input+0x1c>
	return pkt->iface;
 801544e:	69af      	ldr	r7, [r5, #24]
		addr = if_get_addr(net_pkt_iface(pkt),
 8015450:	f104 0118 	add.w	r1, r4, #24
 8015454:	68f8      	ldr	r0, [r7, #12]
 8015456:	f7ff ff47 	bl	80152e8 <if_get_addr.isra.0>
		if (!addr) {
 801545a:	2800      	cmp	r0, #0
 801545c:	d098      	beq.n	8015390 <net_arp_input+0x1c>
	if (addr->addr[0] == 0x00 &&
 801545e:	7ca3      	ldrb	r3, [r4, #18]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d163      	bne.n	801552c <net_arp_input+0x1b8>
 8015464:	7ce3      	ldrb	r3, [r4, #19]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d160      	bne.n	801552c <net_arp_input+0x1b8>
	    addr->addr[1] == 0x00 &&
 801546a:	7d23      	ldrb	r3, [r4, #20]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d15d      	bne.n	801552c <net_arp_input+0x1b8>
	    addr->addr[2] == 0x00 &&
 8015470:	7d63      	ldrb	r3, [r4, #21]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d15a      	bne.n	801552c <net_arp_input+0x1b8>
	    addr->addr[3] == 0x00 &&
 8015476:	7da3      	ldrb	r3, [r4, #22]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d157      	bne.n	801552c <net_arp_input+0x1b8>
	    addr->addr[4] == 0x00 &&
 801547c:	7de3      	ldrb	r3, [r4, #23]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d154      	bne.n	801552c <net_arp_input+0x1b8>
			arp_update(net_pkt_iface(pkt),
 8015482:	2201      	movs	r2, #1
 8015484:	f104 010e 	add.w	r1, r4, #14
 8015488:	4638      	mov	r0, r7
 801548a:	9200      	str	r2, [sp, #0]
 801548c:	4642      	mov	r2, r8
 801548e:	f7ef f885 	bl	800459c <arp_update>
					AF_UNSPEC, 0, NET_BUF_TIMEOUT);
 8015492:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015496:	2300      	movs	r3, #0
 8015498:	f8d5 9018 	ldr.w	r9, [r5, #24]
	pkt = net_pkt_alloc_with_buffer(iface, sizeof(struct net_arp_hdr),
 801549c:	211c      	movs	r1, #28
 801549e:	e9cd 2300 	strd	r2, r3, [sp]
 80154a2:	2300      	movs	r3, #0
 80154a4:	4648      	mov	r0, r9
 80154a6:	461a      	mov	r2, r3
 80154a8:	f7f1 fe5e 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 80154ac:	4606      	mov	r6, r0
 80154ae:	2800      	cmp	r0, #0
 80154b0:	d08d      	beq.n	80153ce <net_arp_input+0x5a>
	return net_buf_simple_add(&buf->b, len);
 80154b2:	6880      	ldr	r0, [r0, #8]
 80154b4:	211c      	movs	r1, #28
	hdr->hwlen = sizeof(struct net_eth_addr);
 80154b6:	2706      	movs	r7, #6
 80154b8:	300c      	adds	r0, #12
 80154ba:	f7ff fd9c 	bl	8014ff6 <net_buf_simple_add>
	return pkt->frags->data;
 80154be:	68b3      	ldr	r3, [r6, #8]
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
 80154c0:	2201      	movs	r2, #1
	memcpy(&hdr->dst_hwaddr.addr, &dst_addr->addr,
 80154c2:	4641      	mov	r1, r8
 80154c4:	68dc      	ldr	r4, [r3, #12]
 80154c6:	68ab      	ldr	r3, [r5, #8]
 80154c8:	f104 0a12 	add.w	sl, r4, #18
 80154cc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
 80154d0:	2300      	movs	r3, #0
 80154d2:	7062      	strb	r2, [r4, #1]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
 80154d4:	2208      	movs	r2, #8
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
 80154d6:	7023      	strb	r3, [r4, #0]
	memcpy(&hdr->dst_hwaddr.addr, &dst_addr->addr,
 80154d8:	4650      	mov	r0, sl
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
 80154da:	70a2      	strb	r2, [r4, #2]
	hdr->protolen = sizeof(struct in_addr);
 80154dc:	2204      	movs	r2, #4
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
 80154de:	70e3      	strb	r3, [r4, #3]
	hdr->opcode = htons(NET_ARP_REPLY);
 80154e0:	71a3      	strb	r3, [r4, #6]
 80154e2:	2302      	movs	r3, #2
	hdr->protolen = sizeof(struct in_addr);
 80154e4:	7162      	strb	r2, [r4, #5]
	memcpy(&hdr->dst_hwaddr.addr, &dst_addr->addr,
 80154e6:	463a      	mov	r2, r7
	hdr->opcode = htons(NET_ARP_REPLY);
 80154e8:	71e3      	strb	r3, [r4, #7]
	hdr->hwlen = sizeof(struct net_eth_addr);
 80154ea:	7127      	strb	r7, [r4, #4]
	memcpy(&hdr->dst_hwaddr.addr, &dst_addr->addr,
 80154ec:	f7ff fbc3 	bl	8014c76 <memcpy>
	memcpy(&hdr->src_hwaddr.addr, net_if_get_link_addr(iface)->addr,
 80154f0:	f8d9 3000 	ldr.w	r3, [r9]
 80154f4:	463a      	mov	r2, r7
 80154f6:	f104 0008 	add.w	r0, r4, #8
 80154fa:	6919      	ldr	r1, [r3, #16]
 80154fc:	f7ff fbbb 	bl	8014c76 <memcpy>
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 8015500:	f8db 300e 	ldr.w	r3, [fp, #14]
 8015504:	61a3      	str	r3, [r4, #24]
 8015506:	f8db 3018 	ldr.w	r3, [fp, #24]
 801550a:	f8c4 300e 	str.w	r3, [r4, #14]
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
 801550e:	f8d9 3000 	ldr.w	r3, [r9]
			net_if_queue_tx(net_pkt_iface(reply), reply);
 8015512:	4631      	mov	r1, r6
 8015514:	69b0      	ldr	r0, [r6, #24]
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
 8015516:	691b      	ldr	r3, [r3, #16]
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
 8015518:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
 801551c:	6273      	str	r3, [r6, #36]	; 0x24
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&hdr->dst_hwaddr.addr;
 801551e:	f8c6 a02c 	str.w	sl, [r6, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 8015522:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
			net_if_queue_tx(net_pkt_iface(reply), reply);
 8015526:	f000 fd2e 	bl	8015f86 <net_if_queue_tx>
 801552a:	e750      	b.n	80153ce <net_arp_input+0x5a>
			dst_hw_addr = &eth_hdr->src;
 801552c:	f106 0806 	add.w	r8, r6, #6
 8015530:	e7af      	b.n	8015492 <net_arp_input+0x11e>
		if (net_ipv4_is_my_addr((struct in_addr *)arp_hdr->dst_ipaddr)) {
 8015532:	f104 0618 	add.w	r6, r4, #24
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 8015536:	4630      	mov	r0, r6
 8015538:	f7f0 fda4 	bl	8006084 <net_if_ipv4_addr_lookup>
	if (!ret) {
 801553c:	b130      	cbz	r0, 801554c <net_arp_input+0x1d8>
			arp_update(net_pkt_iface(pkt),
 801553e:	2300      	movs	r3, #0
 8015540:	f104 0208 	add.w	r2, r4, #8
 8015544:	f104 010e 	add.w	r1, r4, #14
 8015548:	9300      	str	r3, [sp, #0]
 801554a:	e76e      	b.n	801542a <net_arp_input+0xb6>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 801554c:	f7f1 f948 	bl	80067e0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8015550:	69a2      	ldr	r2, [r4, #24]
 8015552:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8015554:	429a      	cmp	r2, r3
 8015556:	d0f2      	beq.n	801553e <net_arp_input+0x1ca>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8015558:	4631      	mov	r1, r6
 801555a:	2000      	movs	r0, #0
 801555c:	f7f0 fd16 	bl	8005f8c <net_if_ipv4_is_addr_bcast>
		if (net_ipv4_is_my_addr((struct in_addr *)arp_hdr->dst_ipaddr)) {
 8015560:	2800      	cmp	r0, #0
 8015562:	f43f af34 	beq.w	80153ce <net_arp_input+0x5a>
 8015566:	e7ea      	b.n	801553e <net_arp_input+0x1ca>

08015568 <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8015568:	6802      	ldr	r2, [r0, #0]
{
 801556a:	4603      	mov	r3, r0
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 801556c:	b94a      	cbnz	r2, 8015582 <net_ipv6_is_addr_loopback+0x1a>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 801556e:	6840      	ldr	r0, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8015570:	b948      	cbnz	r0, 8015586 <net_ipv6_is_addr_loopback+0x1e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8015572:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8015574:	b942      	cbnz	r2, 8015588 <net_ipv6_is_addr_loopback+0x20>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 8015576:	68d8      	ldr	r0, [r3, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8015578:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
 801557c:	4258      	negs	r0, r3
 801557e:	4158      	adcs	r0, r3
 8015580:	4770      	bx	lr
 8015582:	2000      	movs	r0, #0
 8015584:	4770      	bx	lr
 8015586:	4610      	mov	r0, r2
}
 8015588:	4770      	bx	lr

0801558a <processing_data>:
	NET_DBG("Unknown protocol family packet (0x%x)", family);
	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
 801558a:	b538      	push	{r3, r4, r5, lr}
	pkt->l2_processed = is_l2_processed;
 801558c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8015590:	4604      	mov	r4, r0
 8015592:	460d      	mov	r5, r1
 8015594:	f36f 1304 	bfc	r3, #4, #1
 8015598:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	if (!pkt->frags) {
 801559c:	6883      	ldr	r3, [r0, #8]
 801559e:	b16b      	cbz	r3, 80155bc <processing_data+0x32>
	if (!is_loopback && !locally_routed) {
 80155a0:	b189      	cbz	r1, 80155c6 <processing_data+0x3c>
 80155a2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
	net_pkt_cursor_init(pkt);
 80155a6:	4620      	mov	r0, r4
 80155a8:	f043 0310 	orr.w	r3, r3, #16
 80155ac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80155b0:	f001 ff29 	bl	8017406 <net_pkt_cursor_init>
	return pkt->family;
 80155b4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IP) && (family == AF_INET || family == AF_INET6 ||
 80155b8:	2b7f      	cmp	r3, #127	; 0x7f
 80155ba:	d90d      	bls.n	80155d8 <processing_data+0x4e>
			 * to the stack in this case.
			 */
			goto again;
		} else {
			NET_DBG("Dropping pkt %p", pkt);
			net_pkt_unref(pkt);
 80155bc:	4620      	mov	r0, r4
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
		break;
	}
}
 80155be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			net_pkt_unref(pkt);
 80155c2:	f001 be8e 	b.w	80172e2 <net_pkt_unref>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
 80155c6:	4601      	mov	r1, r0
 80155c8:	6980      	ldr	r0, [r0, #24]
 80155ca:	f000 fcd3 	bl	8015f74 <net_if_recv_data>
		if (ret != NET_CONTINUE) {
 80155ce:	2801      	cmp	r0, #1
 80155d0:	d0e7      	beq.n	80155a2 <processing_data+0x18>
	switch (process_data(pkt, is_loopback)) {
 80155d2:	2800      	cmp	r0, #0
 80155d4:	d1f2      	bne.n	80155bc <processing_data+0x32>
}
 80155d6:	bd38      	pop	{r3, r4, r5, pc}
	return pkt->frags->data;
 80155d8:	68a3      	ldr	r3, [r4, #8]
		uint8_t vtc_vhl = NET_IPV6_HDR(pkt)->vtc & 0xf0;
 80155da:	68db      	ldr	r3, [r3, #12]
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		if (IS_ENABLED(CONFIG_NET_IPV6) && vtc_vhl == 0x60) {
 80155e2:	2b60      	cmp	r3, #96	; 0x60
 80155e4:	d104      	bne.n	80155f0 <processing_data+0x66>
			return net_ipv6_input(pkt, is_loopback);
 80155e6:	4629      	mov	r1, r5
 80155e8:	4620      	mov	r0, r4
 80155ea:	f7f2 fee7 	bl	80083bc <net_ipv6_input>
 80155ee:	e7f0      	b.n	80155d2 <processing_data+0x48>
		} else if (IS_ENABLED(CONFIG_NET_IPV4) && vtc_vhl == 0x40) {
 80155f0:	2b40      	cmp	r3, #64	; 0x40
 80155f2:	d1e3      	bne.n	80155bc <processing_data+0x32>
			return net_ipv4_input(pkt);
 80155f4:	4620      	mov	r0, r4
 80155f6:	f002 fd51 	bl	801809c <net_ipv4_input>
 80155fa:	e7ea      	b.n	80155d2 <processing_data+0x48>

080155fc <net_init>:

	return status;
}

static int net_init(void)
{
 80155fc:	b510      	push	{r4, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
 80155fe:	f002 f9b6 	bl	801796e <net_pkt_init>

	net_context_init();
 8015602:	f7f1 fc6f 	bl	8006ee4 <net_context_init>
	net_icmpv4_init();
 8015606:	f7f2 fde9 	bl	80081dc <net_icmpv4_init>
	net_icmpv6_init();
 801560a:	f7f2 fe4b 	bl	80082a4 <net_icmpv6_init>
	net_ipv4_init();
 801560e:	f002 fe02 	bl	8018216 <net_ipv4_init>
	net_ipv6_init();
 8015612:	f003 f8e0 	bl	80187d6 <net_ipv6_init>
		net_conn_init();
 8015616:	f7f2 f8db 	bl	80077d0 <net_conn_init>
	net_tcp_init();
 801561a:	f7f6 f8e7 	bl	800b7ec <net_tcp_init>
	net_route_init();
 801561e:	f7f4 fa01 	bl	8009a24 <net_route_init>

	l3_init();

	net_mgmt_event_init();
 8015622:	f7f1 f9d9 	bl	80069d8 <net_mgmt_event_init>
	net_if_init();
 8015626:	f7f0 ff0d 	bl	8006444 <net_if_init>
	net_tc_rx_init();
 801562a:	f7f1 fdd1 	bl	80071d0 <net_tc_rx_init>
	net_if_post_init();
 801562e:	f7f0 ff91 	bl	8006554 <net_if_post_init>
	status = net_dhcpv4_init();
 8015632:	f7f2 fd3f 	bl	80080b4 <net_dhcpv4_init>
	if (status) {
 8015636:	4604      	mov	r4, r0
 8015638:	b918      	cbnz	r0, 8015642 <net_init+0x46>
	dns_init_resolver();
 801563a:	f7f9 fb41 	bl	800ecc0 <dns_init_resolver>
	net_shell_init();
 801563e:	f004 fc90 	bl	8019f62 <net_shell_init>

	init_rx_queues();

	return services_init();
}
 8015642:	4620      	mov	r0, r4
 8015644:	bd10      	pop	{r4, pc}

08015646 <net_send_data>:
{
 8015646:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (!pkt || !pkt->frags) {
 8015648:	4604      	mov	r4, r0
 801564a:	2800      	cmp	r0, #0
 801564c:	f000 80a4 	beq.w	8015798 <net_send_data+0x152>
 8015650:	6883      	ldr	r3, [r0, #8]
 8015652:	2b00      	cmp	r3, #0
 8015654:	f000 80a0 	beq.w	8015798 <net_send_data+0x152>
	if (!net_pkt_iface(pkt)) {
 8015658:	6983      	ldr	r3, [r0, #24]
 801565a:	2b00      	cmp	r3, #0
 801565c:	f000 809f 	beq.w	801579e <net_send_data+0x158>
	net_pkt_trim_buffer(pkt);
 8015660:	f001 fe9b 	bl	801739a <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
 8015664:	4620      	mov	r0, r4
 8015666:	f001 fece 	bl	8017406 <net_pkt_cursor_init>
	return pkt->family;
 801566a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801566e:	095b      	lsrs	r3, r3, #5
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 8015670:	2b02      	cmp	r3, #2
 8015672:	d14e      	bne.n	8015712 <net_send_data+0xcc>
	return pkt->frags->data;
 8015674:	68a3      	ldr	r3, [r4, #8]
		if (net_ipv6_addr_cmp((struct in6_addr *)NET_IPV6_HDR(pkt)->dst,
 8015676:	68dd      	ldr	r5, [r3, #12]
 8015678:	f7f1 f8b6 	bl	80067e8 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 801567c:	2210      	movs	r2, #16
 801567e:	4601      	mov	r1, r0
 8015680:	3518      	adds	r5, #24
 8015682:	4628      	mov	r0, r5
 8015684:	f7ff face 	bl	8014c24 <memcmp>
 8015688:	b918      	cbnz	r0, 8015692 <net_send_data+0x4c>
			return -EADDRNOTAVAIL;
 801568a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
}
 801568e:	b004      	add	sp, #16
 8015690:	bd70      	pop	{r4, r5, r6, pc}
 8015692:	68a3      	ldr	r3, [r4, #8]
				(struct in6_addr *)NET_IPV6_HDR(pkt)->dst) ||
 8015694:	68dd      	ldr	r5, [r3, #12]
 8015696:	3518      	adds	r5, #24
		if (net_ipv6_is_addr_loopback(
 8015698:	4628      	mov	r0, r5
 801569a:	f7ff ff65 	bl	8015568 <net_ipv6_is_addr_loopback>
 801569e:	4601      	mov	r1, r0
 80156a0:	b1d8      	cbz	r0, 80156da <net_send_data+0x94>
 80156a2:	68a3      	ldr	r3, [r4, #8]
	memcpy(dest, src, sizeof(struct in6_addr));
 80156a4:	2210      	movs	r2, #16
 80156a6:	4668      	mov	r0, sp
			net_ipv6_addr_copy_raw((uint8_t *)&addr, NET_IPV6_HDR(pkt)->src);
 80156a8:	68d9      	ldr	r1, [r3, #12]
 80156aa:	3108      	adds	r1, #8
 80156ac:	f7ff fae3 	bl	8014c76 <memcpy>
 80156b0:	68a3      	ldr	r3, [r4, #8]
 80156b2:	2210      	movs	r2, #16
 80156b4:	68d8      	ldr	r0, [r3, #12]
 80156b6:	f100 0118 	add.w	r1, r0, #24
 80156ba:	3008      	adds	r0, #8
 80156bc:	f7ff fadb 	bl	8014c76 <memcpy>
 80156c0:	68a3      	ldr	r3, [r4, #8]
 80156c2:	2210      	movs	r2, #16
 80156c4:	4669      	mov	r1, sp
			net_ipv6_addr_copy_raw(NET_IPV6_HDR(pkt)->dst, (uint8_t *)&addr);
 80156c6:	68d8      	ldr	r0, [r3, #12]
 80156c8:	3018      	adds	r0, #24
 80156ca:	f7ff fad4 	bl	8014c76 <memcpy>
		processing_data(pkt, true);
 80156ce:	4620      	mov	r0, r4
 80156d0:	2101      	movs	r1, #1
 80156d2:	f7ff ff5a 	bl	801558a <processing_data>
		return 0;
 80156d6:	2000      	movs	r0, #0
 80156d8:	e7d9      	b.n	801568e <net_send_data+0x48>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 80156da:	4628      	mov	r0, r5
 80156dc:	f7ef fe56 	bl	800538c <net_if_ipv6_addr_lookup>
				(struct in6_addr *)NET_IPV6_HDR(pkt)->dst) ||
 80156e0:	2800      	cmp	r0, #0
 80156e2:	d1de      	bne.n	80156a2 <net_send_data+0x5c>
 80156e4:	68a3      	ldr	r3, [r4, #8]
 80156e6:	68d8      	ldr	r0, [r3, #12]
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 80156e8:	7e03      	ldrb	r3, [r0, #24]
 80156ea:	2bff      	cmp	r3, #255	; 0xff
 80156ec:	d102      	bne.n	80156f4 <net_send_data+0xae>
 80156ee:	7e43      	ldrb	r3, [r0, #25]
 80156f0:	2b01      	cmp	r3, #1
 80156f2:	d0ec      	beq.n	80156ce <net_send_data+0x88>
		if (net_ipv6_is_addr_loopback(
 80156f4:	3008      	adds	r0, #8
 80156f6:	f7ff ff37 	bl	8015568 <net_ipv6_is_addr_loopback>
 80156fa:	2800      	cmp	r0, #0
 80156fc:	d1c5      	bne.n	801568a <net_send_data+0x44>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
 80156fe:	4621      	mov	r1, r4
 8015700:	69a0      	ldr	r0, [r4, #24]
 8015702:	f000 fc4c 	bl	8015f9e <net_if_send_data>
		return -EIO;
 8015706:	2802      	cmp	r0, #2
 8015708:	bf14      	ite	ne
 801570a:	2000      	movne	r0, #0
 801570c:	f06f 0004 	mvneq.w	r0, #4
 8015710:	e7bd      	b.n	801568e <net_send_data+0x48>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 8015712:	2b01      	cmp	r3, #1
 8015714:	d1f3      	bne.n	80156fe <net_send_data+0xb8>
 8015716:	68a3      	ldr	r3, [r4, #8]
 8015718:	68dd      	ldr	r5, [r3, #12]
		if (net_ipv4_addr_cmp((struct in_addr *)NET_IPV4_HDR(pkt)->dst,
 801571a:	f7f1 f85d 	bl	80067d8 <net_ipv4_unspecified_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 801571e:	6803      	ldr	r3, [r0, #0]
 8015720:	692a      	ldr	r2, [r5, #16]
 8015722:	429a      	cmp	r2, r3
 8015724:	d0b1      	beq.n	801568a <net_send_data+0x44>
 8015726:	68a3      	ldr	r3, [r4, #8]
 8015728:	68dd      	ldr	r5, [r3, #12]
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 801572a:	7c2b      	ldrb	r3, [r5, #16]
 801572c:	2b7f      	cmp	r3, #127	; 0x7f
 801572e:	d10a      	bne.n	8015746 <net_send_data+0x100>
 8015730:	68a3      	ldr	r3, [r4, #8]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 8015732:	68db      	ldr	r3, [r3, #12]
 8015734:	68da      	ldr	r2, [r3, #12]
 8015736:	68a3      	ldr	r3, [r4, #8]
 8015738:	68db      	ldr	r3, [r3, #12]
 801573a:	6919      	ldr	r1, [r3, #16]
 801573c:	60d9      	str	r1, [r3, #12]
 801573e:	68a3      	ldr	r3, [r4, #8]
 8015740:	68db      	ldr	r3, [r3, #12]
 8015742:	611a      	str	r2, [r3, #16]
	if (status < 0) {
 8015744:	e7c3      	b.n	80156ce <net_send_data+0x88>
	return pkt->iface;
 8015746:	69a6      	ldr	r6, [r4, #24]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8015748:	f7f1 f84a 	bl	80067e0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 801574c:	692a      	ldr	r2, [r5, #16]
 801574e:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8015750:	429a      	cmp	r2, r3
 8015752:	d01b      	beq.n	801578c <net_send_data+0x146>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8015754:	f105 0110 	add.w	r1, r5, #16
 8015758:	4630      	mov	r0, r6
 801575a:	f7f0 fc17 	bl	8005f8c <net_if_ipv4_is_addr_bcast>
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 801575e:	4601      	mov	r1, r0
 8015760:	b9a0      	cbnz	r0, 801578c <net_send_data+0x146>
	return pkt->frags->data;
 8015762:	68a3      	ldr	r3, [r4, #8]
 8015764:	68de      	ldr	r6, [r3, #12]
		     net_ipv4_is_my_addr((struct in_addr *)NET_IPV4_HDR(pkt)->dst))) {
 8015766:	f106 0510 	add.w	r5, r6, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 801576a:	4628      	mov	r0, r5
 801576c:	f7f0 fc8a 	bl	8006084 <net_if_ipv4_addr_lookup>
	if (!ret) {
 8015770:	2800      	cmp	r0, #0
 8015772:	d1dd      	bne.n	8015730 <net_send_data+0xea>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8015774:	f7f1 f834 	bl	80067e0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8015778:	6932      	ldr	r2, [r6, #16]
 801577a:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 801577c:	429a      	cmp	r2, r3
 801577e:	d0d7      	beq.n	8015730 <net_send_data+0xea>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8015780:	4629      	mov	r1, r5
 8015782:	2000      	movs	r0, #0
 8015784:	f7f0 fc02 	bl	8005f8c <net_if_ipv4_is_addr_bcast>
				     (struct in_addr *)NET_IPV4_HDR(pkt)->dst) == false &&
 8015788:	2800      	cmp	r0, #0
 801578a:	d1d1      	bne.n	8015730 <net_send_data+0xea>
 801578c:	68a3      	ldr	r3, [r4, #8]
	return addr->s4_addr[0] == 127U;
 801578e:	68db      	ldr	r3, [r3, #12]
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->src)) {
 8015790:	7b1b      	ldrb	r3, [r3, #12]
 8015792:	2b7f      	cmp	r3, #127	; 0x7f
 8015794:	d1b3      	bne.n	80156fe <net_send_data+0xb8>
 8015796:	e778      	b.n	801568a <net_send_data+0x44>
		return -ENODATA;
 8015798:	f06f 003c 	mvn.w	r0, #60	; 0x3c
 801579c:	e777      	b.n	801568e <net_send_data+0x48>
		return -EINVAL;
 801579e:	f06f 0015 	mvn.w	r0, #21
 80157a2:	e774      	b.n	801568e <net_send_data+0x48>

080157a4 <net_process_rx_packet>:
	pkt_len = net_pkt_get_len(pkt);
 80157a4:	6881      	ldr	r1, [r0, #8]
	while (buf) {
 80157a6:	b909      	cbnz	r1, 80157ac <net_process_rx_packet+0x8>
	processing_data(pkt, is_loopback);
 80157a8:	f7ff beef 	b.w	801558a <processing_data>
		buf = buf->frags;
 80157ac:	6849      	ldr	r1, [r1, #4]
 80157ae:	e7fa      	b.n	80157a6 <net_process_rx_packet+0x2>

080157b0 <net_recv_data>:
{
 80157b0:	b538      	push	{r3, r4, r5, lr}
 80157b2:	4605      	mov	r5, r0
	if (!pkt || !iface) {
 80157b4:	460c      	mov	r4, r1
 80157b6:	b341      	cbz	r1, 801580a <net_recv_data+0x5a>
 80157b8:	b338      	cbz	r0, 801580a <net_recv_data+0x5a>
	if (net_pkt_is_empty(pkt)) {
 80157ba:	688b      	ldr	r3, [r1, #8]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
 80157bc:	b343      	cbz	r3, 8015810 <net_recv_data+0x60>
 80157be:	68da      	ldr	r2, [r3, #12]
 80157c0:	b332      	cbz	r2, 8015810 <net_recv_data+0x60>
 80157c2:	8a1b      	ldrh	r3, [r3, #16]
 80157c4:	b323      	cbz	r3, 8015810 <net_recv_data+0x60>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80157c6:	6803      	ldr	r3, [r0, #0]
 80157c8:	f3bf 8f5b 	dmb	ish
 80157cc:	68db      	ldr	r3, [r3, #12]
 80157ce:	f3bf 8f5b 	dmb	ish
	if (!net_if_flag_is_set(iface, NET_IF_UP)) {
 80157d2:	07db      	lsls	r3, r3, #31
 80157d4:	d51f      	bpl.n	8015816 <net_recv_data+0x66>
	pkt->overwrite = overwrite;
 80157d6:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
	net_pkt_cursor_init(pkt);
 80157da:	4608      	mov	r0, r1
 80157dc:	f043 0301 	orr.w	r3, r3, #1
 80157e0:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
 80157e4:	f001 fe0f 	bl	8017406 <net_pkt_cursor_init>
	pkt->iface = iface;
 80157e8:	61a5      	str	r5, [r4, #24]
		uint8_t type = net_if_get_link_addr(iface)->type;
 80157ea:	682b      	ldr	r3, [r5, #0]
	uint8_t tc = net_rx_priority2tc(prio);
 80157ec:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 80157f0:	7d5b      	ldrb	r3, [r3, #21]
		pkt->lladdr_src.type = type;
 80157f2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		pkt->lladdr_dst.type = type;
 80157f6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 80157fa:	f7f1 fce1 	bl	80071c0 <net_rx_priority2tc>
		net_tc_submit_to_rx_queue(tc, pkt);
 80157fe:	4621      	mov	r1, r4
 8015800:	b2c0      	uxtb	r0, r0
 8015802:	f7f1 fcd5 	bl	80071b0 <net_tc_submit_to_rx_queue>
	return 0;
 8015806:	2000      	movs	r0, #0
}
 8015808:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 801580a:	f06f 0015 	mvn.w	r0, #21
 801580e:	e7fb      	b.n	8015808 <net_recv_data+0x58>
		return -ENODATA;
 8015810:	f06f 003c 	mvn.w	r0, #60	; 0x3c
 8015814:	e7f8      	b.n	8015808 <net_recv_data+0x58>
		return -ENETDOWN;
 8015816:	f06f 0072 	mvn.w	r0, #114	; 0x72
 801581a:	e7f5      	b.n	8015808 <net_recv_data+0x58>

0801581c <sys_slist_append>:
	parent->next = child;
 801581c:	2300      	movs	r3, #0
 801581e:	600b      	str	r3, [r1, #0]
	return list->tail;
 8015820:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
 8015822:	b913      	cbnz	r3, 801582a <sys_slist_append+0xe>
	list->head = node;
 8015824:	e9c0 1100 	strd	r1, r1, [r0]
}
 8015828:	4770      	bx	lr
	parent->next = child;
 801582a:	6019      	str	r1, [r3, #0]
	list->tail = node;
 801582c:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
 801582e:	4770      	bx	lr

08015830 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8015830:	4603      	mov	r3, r0
 8015832:	2200      	movs	r2, #0
	return list->head;
 8015834:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8015836:	b900      	cbnz	r0, 801583a <sys_slist_find_and_remove+0xa>
 8015838:	4770      	bx	lr
 801583a:	4288      	cmp	r0, r1
 801583c:	d110      	bne.n	8015860 <sys_slist_find_and_remove+0x30>
	return node->next;
 801583e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8015840:	b942      	cbnz	r2, 8015854 <sys_slist_find_and_remove+0x24>
 8015842:	685a      	ldr	r2, [r3, #4]
	list->head = node;
 8015844:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
 8015846:	4291      	cmp	r1, r2
 8015848:	d100      	bne.n	801584c <sys_slist_find_and_remove+0x1c>
	list->tail = node;
 801584a:	6058      	str	r0, [r3, #4]
	parent->next = child;
 801584c:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801584e:	2001      	movs	r0, #1
	parent->next = child;
 8015850:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8015852:	4770      	bx	lr
	parent->next = child;
 8015854:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 8015856:	6858      	ldr	r0, [r3, #4]
 8015858:	4281      	cmp	r1, r0
	list->tail = node;
 801585a:	bf08      	it	eq
 801585c:	605a      	streq	r2, [r3, #4]
}
 801585e:	e7f5      	b.n	801584c <sys_slist_find_and_remove+0x1c>
	return node->next;
 8015860:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8015862:	6800      	ldr	r0, [r0, #0]
 8015864:	e7e7      	b.n	8015836 <sys_slist_find_and_remove+0x6>

08015866 <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8015866:	6802      	ldr	r2, [r0, #0]
{
 8015868:	4603      	mov	r3, r0
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 801586a:	b94a      	cbnz	r2, 8015880 <net_ipv6_is_addr_loopback+0x1a>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 801586c:	6840      	ldr	r0, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 801586e:	b948      	cbnz	r0, 8015884 <net_ipv6_is_addr_loopback+0x1e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8015870:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8015872:	b942      	cbnz	r2, 8015886 <net_ipv6_is_addr_loopback+0x20>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 8015874:	68d8      	ldr	r0, [r3, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8015876:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
 801587a:	4258      	negs	r0, r3
 801587c:	4158      	adcs	r0, r3
 801587e:	4770      	bx	lr
 8015880:	2000      	movs	r0, #0
 8015882:	4770      	bx	lr
 8015884:	4610      	mov	r0, r2
}
 8015886:	4770      	bx	lr

08015888 <net_if_l2>:
	if (!iface || !iface->if_dev) {
 8015888:	b110      	cbz	r0, 8015890 <net_if_l2+0x8>
 801588a:	6800      	ldr	r0, [r0, #0]
 801588c:	b100      	cbz	r0, 8015890 <net_if_l2+0x8>
	return iface->if_dev->l2;
 801588e:	6840      	ldr	r0, [r0, #4]
}
 8015890:	4770      	bx	lr

08015892 <net_context_send_cb>:
{
 8015892:	b410      	push	{r4}
	if (!context) {
 8015894:	b128      	cbz	r0, 80158a2 <net_context_send_cb+0x10>
	if (context->send_cb) {
 8015896:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8015898:	b11c      	cbz	r4, 80158a2 <net_context_send_cb+0x10>
		context->send_cb(context, status, context->user_data);
 801589a:	4623      	mov	r3, r4
 801589c:	6842      	ldr	r2, [r0, #4]
}
 801589e:	bc10      	pop	{r4}
		context->send_cb(context, status, context->user_data);
 80158a0:	4718      	bx	r3
}
 80158a2:	bc10      	pop	{r4}
 80158a4:	4770      	bx	lr

080158a6 <l2_flags_get>:
{
 80158a6:	b510      	push	{r4, lr}
 80158a8:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
 80158aa:	f7ff ffed 	bl	8015888 <net_if_l2>
 80158ae:	b128      	cbz	r0, 80158bc <l2_flags_get+0x16>
 80158b0:	68c2      	ldr	r2, [r0, #12]
 80158b2:	b11a      	cbz	r2, 80158bc <l2_flags_get+0x16>
		flags = net_if_l2(iface)->get_flags(iface);
 80158b4:	4618      	mov	r0, r3
}
 80158b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
 80158ba:	4710      	bx	r2
}
 80158bc:	2000      	movs	r0, #0
 80158be:	bd10      	pop	{r4, pc}

080158c0 <get_ipaddr_diff>:
{
 80158c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158c2:	4606      	mov	r6, r0
	uint8_t len = 0U;
 80158c4:	2000      	movs	r0, #0
	for (j = 0U; j < addr_len; j++) {
 80158c6:	4604      	mov	r4, r0
		if (src[j] == dst[j]) {
 80158c8:	5d33      	ldrb	r3, [r6, r4]
 80158ca:	f100 0508 	add.w	r5, r0, #8
 80158ce:	5d0f      	ldrb	r7, [r1, r4]
 80158d0:	42bb      	cmp	r3, r7
 80158d2:	d105      	bne.n	80158e0 <get_ipaddr_diff+0x20>
	for (j = 0U; j < addr_len; j++) {
 80158d4:	3401      	adds	r4, #1
			len += 8U;
 80158d6:	b2e8      	uxtb	r0, r5
	for (j = 0U; j < addr_len; j++) {
 80158d8:	b2e4      	uxtb	r4, r4
 80158da:	4294      	cmp	r4, r2
 80158dc:	dbf4      	blt.n	80158c8 <get_ipaddr_diff+0x8>
}
 80158de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xor = src[j] ^ dst[j];
 80158e0:	407b      	eors	r3, r7
			for (k = 0U; k < 8; k++) {
 80158e2:	b2ed      	uxtb	r5, r5
				if (!(xor & 0x80)) {
 80158e4:	061a      	lsls	r2, r3, #24
 80158e6:	d4fa      	bmi.n	80158de <get_ipaddr_diff+0x1e>
					len++;
 80158e8:	3001      	adds	r0, #1
					xor <<= 1;
 80158ea:	005b      	lsls	r3, r3, #1
					len++;
 80158ec:	b2c0      	uxtb	r0, r0
					xor <<= 1;
 80158ee:	b2db      	uxtb	r3, r3
			for (k = 0U; k < 8; k++) {
 80158f0:	4285      	cmp	r5, r0
 80158f2:	d1f7      	bne.n	80158e4 <get_ipaddr_diff+0x24>
 80158f4:	e7f3      	b.n	80158de <get_ipaddr_diff+0x1e>

080158f6 <net_ipv6_is_prefix>:
	if (length > 128) {
 80158f6:	2a80      	cmp	r2, #128	; 0x80
{
 80158f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158fa:	4607      	mov	r7, r0
 80158fc:	460e      	mov	r6, r1
 80158fe:	4614      	mov	r4, r2
	if (length > 128) {
 8015900:	d901      	bls.n	8015906 <net_ipv6_is_prefix+0x10>
		return false;
 8015902:	2000      	movs	r0, #0
}
 8015904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
 8015906:	08d5      	lsrs	r5, r2, #3
 8015908:	462a      	mov	r2, r5
 801590a:	f7ff f98b 	bl	8014c24 <memcmp>
 801590e:	2800      	cmp	r0, #0
 8015910:	d1f7      	bne.n	8015902 <net_ipv6_is_prefix+0xc>
	if (!remain) {
 8015912:	4264      	negs	r4, r4
 8015914:	f014 0407 	ands.w	r4, r4, #7
 8015918:	d00f      	beq.n	801593a <net_ipv6_is_prefix+0x44>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 801591a:	5d7b      	ldrb	r3, [r7, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
 801591c:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 8015920:	5d72      	ldrb	r2, [r6, r5]
 8015922:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
 8015924:	23ff      	movs	r3, #255	; 0xff
 8015926:	408b      	lsls	r3, r1
 8015928:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 801592c:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 8015930:	4222      	tst	r2, r4
 8015932:	bf0c      	ite	eq
 8015934:	2001      	moveq	r0, #1
 8015936:	2000      	movne	r0, #0
 8015938:	e7e4      	b.n	8015904 <net_ipv6_is_prefix+0xe>
		return true;
 801593a:	2001      	movs	r0, #1
 801593c:	e7e2      	b.n	8015904 <net_ipv6_is_prefix+0xe>

0801593e <net_ipv6_addr_cmp>:
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 801593e:	2210      	movs	r2, #16
{
 8015940:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 8015942:	f7ff f96f 	bl	8014c24 <memcmp>
}
 8015946:	fab0 f080 	clz	r0, r0
 801594a:	0940      	lsrs	r0, r0, #5
 801594c:	bd08      	pop	{r3, pc}

0801594e <k_uptime_get_32>:
{
 801594e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8015950:	f006 fa5a 	bl	801be08 <z_impl_k_uptime_ticks>
 8015954:	220a      	movs	r2, #10
 8015956:	2300      	movs	r3, #0
 8015958:	f7ea ff6c 	bl	8000834 <__aeabi_uldivmod>
}
 801595c:	bd08      	pop	{r3, pc}

0801595e <atomic_clear_bit>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 801595e:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
 8015960:	2301      	movs	r3, #1
 8015962:	f001 011f 	and.w	r1, r1, #31
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8015966:	f3bf 8f5b 	dmb	ish
 801596a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801596e:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8015972:	43c9      	mvns	r1, r1
 8015974:	e850 3f00 	ldrex	r3, [r0]
 8015978:	400b      	ands	r3, r1
 801597a:	e840 3200 	strex	r2, r3, [r0]
 801597e:	2a00      	cmp	r2, #0
 8015980:	d1f8      	bne.n	8015974 <atomic_clear_bit+0x16>
 8015982:	f3bf 8f5b 	dmb	ish
}
 8015986:	4770      	bx	lr

08015988 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8015988:	f7fc ba4e 	b.w	8011e28 <z_impl_k_mutex_lock>

0801598c <net_if_lock>:
	(void)k_mutex_lock(&iface->lock, K_FOREVER);
 801598c:	f04f 32ff 	mov.w	r2, #4294967295
 8015990:	f04f 33ff 	mov.w	r3, #4294967295
 8015994:	3048      	adds	r0, #72	; 0x48
 8015996:	f7ff bff7 	b.w	8015988 <k_mutex_lock.constprop.0.isra.0>

0801599a <net_if_flag_is_set>:
	if (iface == NULL) {
 801599a:	b140      	cbz	r0, 80159ae <net_if_flag_is_set+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801599c:	6803      	ldr	r3, [r0, #0]
 801599e:	f3bf 8f5b 	dmb	ish
 80159a2:	68d8      	ldr	r0, [r3, #12]
 80159a4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 80159a8:	4108      	asrs	r0, r1
 80159aa:	f000 0001 	and.w	r0, r0, #1
}
 80159ae:	4770      	bx	lr

080159b0 <net_if_flag_set.isra.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
 80159b0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 80159b2:	300c      	adds	r0, #12
 80159b4:	f3bf 8f5b 	dmb	ish
 80159b8:	408b      	lsls	r3, r1
 80159ba:	e850 2f00 	ldrex	r2, [r0]
 80159be:	431a      	orrs	r2, r3
 80159c0:	e840 2100 	strex	r1, r2, [r0]
 80159c4:	2900      	cmp	r1, #0
 80159c6:	d1f8      	bne.n	80159ba <net_if_flag_set.isra.0+0xa>
 80159c8:	f3bf 8f5b 	dmb	ish
}
 80159cc:	4770      	bx	lr

080159ce <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 80159ce:	f7fc baa5 	b.w	8011f1c <z_impl_k_mutex_unlock>

080159d2 <if_ipv4_get_addr>:
{
 80159d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159d4:	4605      	mov	r5, r0
 80159d6:	460e      	mov	r6, r1
 80159d8:	4617      	mov	r7, r2
	net_if_lock(iface);
 80159da:	f7ff ffd7 	bl	801598c <net_if_lock>
	if (!iface) {
 80159de:	b1ed      	cbz	r5, 8015a1c <if_ipv4_get_addr+0x4a>
	ipv4 = iface->config.ip.ipv4;
 80159e0:	68ec      	ldr	r4, [r5, #12]
	if (!ipv4) {
 80159e2:	b9ec      	cbnz	r4, 8015a20 <if_ipv4_get_addr+0x4e>
	k_mutex_unlock(&iface->lock);
 80159e4:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80159e8:	f7ff fff1 	bl	80159ce <k_mutex_unlock.isra.0>
}
 80159ec:	4620      	mov	r0, r4
 80159ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!ipv4->unicast[i].is_used ||
 80159f0:	1c72      	adds	r2, r6, #1
 80159f2:	d003      	beq.n	80159fc <if_ipv4_get_addr+0x2a>
		    (addr_state != NET_ADDR_ANY_STATE &&
 80159f4:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
 80159f8:	42b3      	cmp	r3, r6
 80159fa:	d10f      	bne.n	8015a1c <if_ipv4_get_addr+0x4a>
		     ipv4->unicast[i].addr_state != addr_state) ||
 80159fc:	8823      	ldrh	r3, [r4, #0]
 80159fe:	2b01      	cmp	r3, #1
 8015a00:	d10c      	bne.n	8015a1c <if_ipv4_get_addr+0x4a>
		if (net_ipv4_is_ll_addr(&ipv4->unicast[i].address.in_addr)) {
 8015a02:	3404      	adds	r4, #4
 8015a04:	4620      	mov	r0, r4
 8015a06:	f7ef f877 	bl	8004af8 <net_ipv4_is_ll_addr>
 8015a0a:	b118      	cbz	r0, 8015a14 <if_ipv4_get_addr+0x42>
	struct in_addr *addr = NULL;
 8015a0c:	2f00      	cmp	r7, #0
 8015a0e:	bf08      	it	eq
 8015a10:	2400      	moveq	r4, #0
 8015a12:	e7e7      	b.n	80159e4 <if_ipv4_get_addr+0x12>
 8015a14:	2f00      	cmp	r7, #0
 8015a16:	bf18      	it	ne
 8015a18:	2400      	movne	r4, #0
 8015a1a:	e7e3      	b.n	80159e4 <if_ipv4_get_addr+0x12>
 8015a1c:	2400      	movs	r4, #0
 8015a1e:	e7e1      	b.n	80159e4 <if_ipv4_get_addr+0x12>
		if (!ipv4->unicast[i].is_used ||
 8015a20:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8015a24:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8015a28:	079b      	lsls	r3, r3, #30
 8015a2a:	d4e1      	bmi.n	80159f0 <if_ipv4_get_addr+0x1e>
	struct in_addr *addr = NULL;
 8015a2c:	4614      	mov	r4, r2
 8015a2e:	e7d9      	b.n	80159e4 <if_ipv4_get_addr+0x12>

08015a30 <net_if_flag_test_and_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
 8015a30:	2301      	movs	r3, #1
 8015a32:	300c      	adds	r0, #12
 8015a34:	f3bf 8f5b 	dmb	ish
 8015a38:	fa03 f101 	lsl.w	r1, r3, r1
 8015a3c:	e850 3f00 	ldrex	r3, [r0]
 8015a40:	ea43 0201 	orr.w	r2, r3, r1
 8015a44:	e840 2c00 	strex	ip, r2, [r0]
 8015a48:	f1bc 0f00 	cmp.w	ip, #0
 8015a4c:	d1f6      	bne.n	8015a3c <net_if_flag_test_and_set.isra.0+0xc>
	return (old & mask) != 0;
 8015a4e:	4219      	tst	r1, r3
 8015a50:	f3bf 8f5b 	dmb	ish
}
 8015a54:	bf14      	ite	ne
 8015a56:	2001      	movne	r0, #1
 8015a58:	2000      	moveq	r0, #0
 8015a5a:	4770      	bx	lr

08015a5c <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
 8015a5c:	f001 021f 	and.w	r2, r1, #31
 8015a60:	2301      	movs	r3, #1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8015a62:	0949      	lsrs	r1, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
 8015a64:	4093      	lsls	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8015a66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
{
 8015a6a:	b510      	push	{r4, lr}
 8015a6c:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8015a70:	43dc      	mvns	r4, r3
 8015a72:	e851 2f00 	ldrex	r2, [r1]
 8015a76:	ea02 0004 	and.w	r0, r2, r4
 8015a7a:	e841 0c00 	strex	ip, r0, [r1]
 8015a7e:	f1bc 0f00 	cmp.w	ip, #0
 8015a82:	d1f6      	bne.n	8015a72 <atomic_test_and_clear_bit+0x16>
	return (old & mask) != 0;
 8015a84:	421a      	tst	r2, r3
 8015a86:	f3bf 8f5b 	dmb	ish
}
 8015a8a:	bf14      	ite	ne
 8015a8c:	2001      	movne	r0, #1
 8015a8e:	2000      	moveq	r0, #0
 8015a90:	bd10      	pop	{r4, pc}

08015a92 <net_if_set_link_addr_locked>:
{
 8015a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a96:	4605      	mov	r5, r0
 8015a98:	4688      	mov	r8, r1
 8015a9a:	461e      	mov	r6, r3
 8015a9c:	4617      	mov	r7, r2
	net_if_lock(iface);
 8015a9e:	f7ff ff75 	bl	801598c <net_if_lock>
	if (net_if_flag_is_set(iface, NET_IF_RUNNING)) {
 8015aa2:	2108      	movs	r1, #8
 8015aa4:	4628      	mov	r0, r5
 8015aa6:	f7ff ff78 	bl	801599a <net_if_flag_is_set>
 8015aaa:	4604      	mov	r4, r0
 8015aac:	b968      	cbnz	r0, 8015aca <net_if_set_link_addr_locked+0x38>
	return &iface->if_dev->link_addr;
 8015aae:	682b      	ldr	r3, [r5, #0]
	net_if_get_link_addr(iface)->addr = addr;
 8015ab0:	f8c3 8010 	str.w	r8, [r3, #16]
	return &iface->if_dev->link_addr;
 8015ab4:	682b      	ldr	r3, [r5, #0]
	net_if_get_link_addr(iface)->len = len;
 8015ab6:	751f      	strb	r7, [r3, #20]
	return &iface->if_dev->link_addr;
 8015ab8:	682b      	ldr	r3, [r5, #0]
	net_if_get_link_addr(iface)->type = type;
 8015aba:	755e      	strb	r6, [r3, #21]
	k_mutex_unlock(&iface->lock);
 8015abc:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8015ac0:	f7ff ff85 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8015ac4:	4620      	mov	r0, r4
 8015ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EPERM;
 8015aca:	f04f 34ff 	mov.w	r4, #4294967295
 8015ace:	e7f5      	b.n	8015abc <net_if_set_link_addr_locked+0x2a>

08015ad0 <net_if_ipv6_addr_lookup_by_iface>:
{
 8015ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ad4:	4605      	mov	r5, r0
 8015ad6:	4689      	mov	r9, r1
	net_if_lock(iface);
 8015ad8:	f7ff ff58 	bl	801598c <net_if_lock>
	ipv6 = iface->config.ip.ipv6;
 8015adc:	f8d5 8008 	ldr.w	r8, [r5, #8]
	if (!ipv6) {
 8015ae0:	f1b8 0f00 	cmp.w	r8, #0
 8015ae4:	d107      	bne.n	8015af6 <net_if_ipv6_addr_lookup_by_iface+0x26>
	struct net_if_addr *ifaddr = NULL;
 8015ae6:	2400      	movs	r4, #0
	k_mutex_unlock(&iface->lock);
 8015ae8:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8015aec:	f7ff ff6f 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8015af0:	4620      	mov	r0, r4
 8015af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015af6:	f108 0704 	add.w	r7, r8, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 8015afa:	2600      	movs	r6, #0
		if (!ipv6->unicast[i].is_used ||
 8015afc:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8015b00:	fb0a 8406 	mla	r4, sl, r6, r8
 8015b04:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8015b08:	079b      	lsls	r3, r3, #30
 8015b0a:	d50a      	bpl.n	8015b22 <net_if_ipv6_addr_lookup_by_iface+0x52>
 8015b0c:	f837 3c04 	ldrh.w	r3, [r7, #-4]
 8015b10:	2b02      	cmp	r3, #2
 8015b12:	d106      	bne.n	8015b22 <net_if_ipv6_addr_lookup_by_iface+0x52>
		if (net_ipv6_is_prefix(
 8015b14:	2280      	movs	r2, #128	; 0x80
 8015b16:	4639      	mov	r1, r7
 8015b18:	4648      	mov	r0, r9
 8015b1a:	f7ff feec 	bl	80158f6 <net_ipv6_is_prefix>
 8015b1e:	2800      	cmp	r0, #0
 8015b20:	d1e2      	bne.n	8015ae8 <net_if_ipv6_addr_lookup_by_iface+0x18>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 8015b22:	3601      	adds	r6, #1
 8015b24:	3730      	adds	r7, #48	; 0x30
 8015b26:	2e03      	cmp	r6, #3
 8015b28:	d1ea      	bne.n	8015b00 <net_if_ipv6_addr_lookup_by_iface+0x30>
 8015b2a:	e7dc      	b.n	8015ae6 <net_if_ipv6_addr_lookup_by_iface+0x16>

08015b2c <net_if_start_dad>:
{
 8015b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b2e:	b087      	sub	sp, #28
 8015b30:	4604      	mov	r4, r0
	struct in6_addr addr = { };
 8015b32:	2210      	movs	r2, #16
 8015b34:	2100      	movs	r1, #0
 8015b36:	a802      	add	r0, sp, #8
 8015b38:	f7ff f8a8 	bl	8014c8c <memset>
	net_if_lock(iface);
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	f7ff ff25 	bl	801598c <net_if_lock>
	ret = net_if_config_ipv6_get(iface, &ipv6);
 8015b42:	a901      	add	r1, sp, #4
 8015b44:	4620      	mov	r0, r4
 8015b46:	f7ef fb21 	bl	800518c <net_if_config_ipv6_get>
	if (ret < 0) {
 8015b4a:	2800      	cmp	r0, #0
 8015b4c:	da05      	bge.n	8015b5a <net_if_start_dad+0x2e>
 8015b4e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8015b52:	f7ff ff3c 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8015b56:	b007      	add	sp, #28
 8015b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!ipv6) {
 8015b5a:	9b01      	ldr	r3, [sp, #4]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d0f6      	beq.n	8015b4e <net_if_start_dad+0x22>
	UNALIGNED_PUT(htonl(0xfe800000), &addr->s6_addr32[0]);
 8015b60:	f248 03fe 	movw	r3, #33022	; 0x80fe
	return &iface->if_dev->link_addr;
 8015b64:	6825      	ldr	r5, [r4, #0]
 8015b66:	9302      	str	r3, [sp, #8]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
 8015b68:	2300      	movs	r3, #0
 8015b6a:	9303      	str	r3, [sp, #12]
	switch (lladdr->len) {
 8015b6c:	7d2a      	ldrb	r2, [r5, #20]
 8015b6e:	2a06      	cmp	r2, #6
 8015b70:	d036      	beq.n	8015be0 <net_if_start_dad+0xb4>
 8015b72:	2a08      	cmp	r2, #8
 8015b74:	d050      	beq.n	8015c18 <net_if_start_dad+0xec>
 8015b76:	2a02      	cmp	r2, #2
 8015b78:	d110      	bne.n	8015b9c <net_if_start_dad+0x70>
		if (lladdr->type == NET_LINK_IEEE802154) {
 8015b7a:	7d6a      	ldrb	r2, [r5, #21]
 8015b7c:	2a01      	cmp	r2, #1
 8015b7e:	d10d      	bne.n	8015b9c <net_if_start_dad+0x70>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
 8015b80:	9304      	str	r3, [sp, #16]
			addr->s6_addr[11] = 0xff;
 8015b82:	23ff      	movs	r3, #255	; 0xff
 8015b84:	f88d 3013 	strb.w	r3, [sp, #19]
			addr->s6_addr[12] = 0xfe;
 8015b88:	23fe      	movs	r3, #254	; 0xfe
 8015b8a:	f8ad 3014 	strh.w	r3, [sp, #20]
			addr->s6_addr[14] = lladdr->addr[0];
 8015b8e:	692b      	ldr	r3, [r5, #16]
 8015b90:	781a      	ldrb	r2, [r3, #0]
 8015b92:	f88d 2016 	strb.w	r2, [sp, #22]
			addr->s6_addr[15] = lladdr->addr[1];
 8015b96:	785b      	ldrb	r3, [r3, #1]
 8015b98:	f88d 3017 	strb.w	r3, [sp, #23]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	2201      	movs	r2, #1
 8015ba0:	a902      	add	r1, sp, #8
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	f7ef fcc0 	bl	8005528 <net_if_ipv6_addr_add>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 8015ba8:	2500      	movs	r5, #0
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
 8015baa:	4606      	mov	r6, r0
		if (!ipv6->unicast[i].is_used ||
 8015bac:	2730      	movs	r7, #48	; 0x30
 8015bae:	9801      	ldr	r0, [sp, #4]
 8015bb0:	fb07 f305 	mul.w	r3, r7, r5
 8015bb4:	18c1      	adds	r1, r0, r3
 8015bb6:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
 8015bba:	0792      	lsls	r2, r2, #30
 8015bbc:	d50c      	bpl.n	8015bd8 <net_if_start_dad+0xac>
 8015bbe:	5ac2      	ldrh	r2, [r0, r3]
 8015bc0:	2a02      	cmp	r2, #2
 8015bc2:	d109      	bne.n	8015bd8 <net_if_start_dad+0xac>
		    ipv6->unicast[i].address.family != AF_INET6 ||
 8015bc4:	428e      	cmp	r6, r1
 8015bc6:	d007      	beq.n	8015bd8 <net_if_start_dad+0xac>
		    net_ipv6_is_addr_loopback(
 8015bc8:	3304      	adds	r3, #4
 8015bca:	4418      	add	r0, r3
 8015bcc:	f7ff fe4b 	bl	8015866 <net_ipv6_is_addr_loopback>
		    &ipv6->unicast[i] == ifaddr ||
 8015bd0:	b910      	cbnz	r0, 8015bd8 <net_if_start_dad+0xac>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f7ef f93a 	bl	8004e4c <net_if_ipv6_start_dad>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 8015bd8:	3501      	adds	r5, #1
 8015bda:	2d03      	cmp	r5, #3
 8015bdc:	d1e7      	bne.n	8015bae <net_if_start_dad+0x82>
 8015bde:	e7b6      	b.n	8015b4e <net_if_start_dad+0x22>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
 8015be0:	2203      	movs	r2, #3
 8015be2:	6929      	ldr	r1, [r5, #16]
 8015be4:	a804      	add	r0, sp, #16
 8015be6:	f7ff f846 	bl	8014c76 <memcpy>
		addr->s6_addr[11] = 0xff;
 8015bea:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
 8015bec:	6929      	ldr	r1, [r5, #16]
 8015bee:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
 8015bf0:	f88d 3013 	strb.w	r3, [sp, #19]
		addr->s6_addr[12] = 0xfe;
 8015bf4:	23fe      	movs	r3, #254	; 0xfe
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
 8015bf6:	4411      	add	r1, r2
 8015bf8:	f10d 0015 	add.w	r0, sp, #21
		addr->s6_addr[12] = 0xfe;
 8015bfc:	f88d 3014 	strb.w	r3, [sp, #20]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
 8015c00:	f7ff f839 	bl	8014c76 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
 8015c04:	7d6b      	ldrb	r3, [r5, #21]
 8015c06:	2b03      	cmp	r3, #3
 8015c08:	d1c8      	bne.n	8015b9c <net_if_start_dad+0x70>
		addr->s6_addr[8] ^= 0x02;
 8015c0a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8015c0e:	f083 0302 	eor.w	r3, r3, #2
 8015c12:	f88d 3010 	strb.w	r3, [sp, #16]
		break;
 8015c16:	e7c1      	b.n	8015b9c <net_if_start_dad+0x70>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
 8015c18:	6929      	ldr	r1, [r5, #16]
 8015c1a:	a804      	add	r0, sp, #16
 8015c1c:	f7ff f82b 	bl	8014c76 <memcpy>
 8015c20:	e7f3      	b.n	8015c0a <net_if_start_dad+0xde>

08015c22 <remove_prefix_addresses>:
{
 8015c22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c26:	4607      	mov	r7, r0
 8015c28:	460e      	mov	r6, r1
 8015c2a:	4690      	mov	r8, r2
 8015c2c:	4699      	mov	r9, r3
 8015c2e:	1d0c      	adds	r4, r1, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 8015c30:	2500      	movs	r5, #0
		if (!ipv6->unicast[i].is_used ||
 8015c32:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8015c36:	fb0a 6305 	mla	r3, sl, r5, r6
 8015c3a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015c3e:	079b      	lsls	r3, r3, #30
 8015c40:	d511      	bpl.n	8015c66 <remove_prefix_addresses+0x44>
 8015c42:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 8015c46:	2b02      	cmp	r3, #2
 8015c48:	d10d      	bne.n	8015c66 <remove_prefix_addresses+0x44>
		    ipv6->unicast[i].address.family != AF_INET6 ||
 8015c4a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015c4e:	2b01      	cmp	r3, #1
 8015c50:	d109      	bne.n	8015c66 <remove_prefix_addresses+0x44>
		if (net_ipv6_is_prefix(
 8015c52:	464a      	mov	r2, r9
 8015c54:	4621      	mov	r1, r4
 8015c56:	4640      	mov	r0, r8
 8015c58:	f7ff fe4d 	bl	80158f6 <net_ipv6_is_prefix>
 8015c5c:	b118      	cbz	r0, 8015c66 <remove_prefix_addresses+0x44>
			net_if_ipv6_addr_rm(iface,
 8015c5e:	4621      	mov	r1, r4
 8015c60:	4638      	mov	r0, r7
 8015c62:	f7ef fde5 	bl	8005830 <net_if_ipv6_addr_rm>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 8015c66:	3501      	adds	r5, #1
 8015c68:	3430      	adds	r4, #48	; 0x30
 8015c6a:	2d03      	cmp	r5, #3
 8015c6c:	d1e3      	bne.n	8015c36 <remove_prefix_addresses+0x14>
}
 8015c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015c72 <net_if_ipv6_maddr_join>:
{
 8015c72:	b538      	push	{r3, r4, r5, lr}
 8015c74:	460c      	mov	r4, r1
 8015c76:	4605      	mov	r5, r0
	net_if_lock(iface);
 8015c78:	f7ff fe88 	bl	801598c <net_if_lock>
	addr->is_joined = true;
 8015c7c:	7d23      	ldrb	r3, [r4, #20]
	k_mutex_unlock(&iface->lock);
 8015c7e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8015c82:	f043 0302 	orr.w	r3, r3, #2
 8015c86:	7523      	strb	r3, [r4, #20]
}
 8015c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c8c:	f7ff be9f 	b.w	80159ce <k_mutex_unlock.isra.0>

08015c90 <net_if_ipv6_prefix_get>:
{
 8015c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c92:	460f      	mov	r7, r1
	if (!iface) {
 8015c94:	4606      	mov	r6, r0
 8015c96:	b910      	cbnz	r0, 8015c9e <net_if_ipv6_prefix_get+0xe>
		iface = net_if_get_default();
 8015c98:	f7ef fa40 	bl	800511c <net_if_get_default>
 8015c9c:	4606      	mov	r6, r0
	net_if_lock(iface);
 8015c9e:	4630      	mov	r0, r6
 8015ca0:	f7ff fe74 	bl	801598c <net_if_lock>
	ipv6 = iface->config.ip.ipv6;
 8015ca4:	68b5      	ldr	r5, [r6, #8]
	if (!ipv6) {
 8015ca6:	b335      	cbz	r5, 8015cf6 <net_if_ipv6_prefix_get+0x66>
		if (!ipv6->prefix[i].is_used) {
 8015ca8:	f895 30e5 	ldrb.w	r3, [r5, #229]	; 0xe5
 8015cac:	079a      	lsls	r2, r3, #30
 8015cae:	f3c3 0440 	ubfx	r4, r3, #1, #1
 8015cb2:	d50a      	bpl.n	8015cca <net_if_ipv6_prefix_get+0x3a>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 8015cb4:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
 8015cb8:	4639      	mov	r1, r7
 8015cba:	f105 00d0 	add.w	r0, r5, #208	; 0xd0
 8015cbe:	f7ff fe1a 	bl	80158f6 <net_ipv6_is_prefix>
 8015cc2:	4604      	mov	r4, r0
 8015cc4:	b108      	cbz	r0, 8015cca <net_if_ipv6_prefix_get+0x3a>
				prefix = &ipv6->prefix[i];
 8015cc6:	f105 04c0 	add.w	r4, r5, #192	; 0xc0
		if (!ipv6->prefix[i].is_used) {
 8015cca:	f895 310d 	ldrb.w	r3, [r5, #269]	; 0x10d
 8015cce:	079b      	lsls	r3, r3, #30
 8015cd0:	d510      	bpl.n	8015cf4 <net_if_ipv6_prefix_get+0x64>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 8015cd2:	f895 210c 	ldrb.w	r2, [r5, #268]	; 0x10c
 8015cd6:	4639      	mov	r1, r7
 8015cd8:	f105 00f8 	add.w	r0, r5, #248	; 0xf8
 8015cdc:	f7ff fe0b 	bl	80158f6 <net_ipv6_is_prefix>
 8015ce0:	b140      	cbz	r0, 8015cf4 <net_if_ipv6_prefix_get+0x64>
			if (!prefix || prefix->len > ipv6->prefix[i].len) {
 8015ce2:	b12c      	cbz	r4, 8015cf0 <net_if_ipv6_prefix_get+0x60>
 8015ce4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8015ce8:	f895 310c 	ldrb.w	r3, [r5, #268]	; 0x10c
 8015cec:	429a      	cmp	r2, r3
 8015cee:	d901      	bls.n	8015cf4 <net_if_ipv6_prefix_get+0x64>
				prefix = &ipv6->prefix[i];
 8015cf0:	f105 04e8 	add.w	r4, r5, #232	; 0xe8
	struct net_if_ipv6_prefix *prefix = NULL;
 8015cf4:	4625      	mov	r5, r4
 8015cf6:	f106 0048 	add.w	r0, r6, #72	; 0x48
 8015cfa:	f7ff fe68 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8015cfe:	4628      	mov	r0, r5
 8015d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015d02 <net_if_ipv6_prefix_lookup>:
{
 8015d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d04:	4605      	mov	r5, r0
 8015d06:	460e      	mov	r6, r1
 8015d08:	4617      	mov	r7, r2
	net_if_lock(iface);
 8015d0a:	f7ff fe3f 	bl	801598c <net_if_lock>
	ipv6 = iface->config.ip.ipv6;
 8015d0e:	68ac      	ldr	r4, [r5, #8]
	if (!ipv6) {
 8015d10:	b934      	cbnz	r4, 8015d20 <net_if_ipv6_prefix_lookup+0x1e>
	struct net_if_ipv6_prefix *prefix = NULL;
 8015d12:	2400      	movs	r4, #0
 8015d14:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8015d18:	f7ff fe59 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8015d1c:	4620      	mov	r0, r4
 8015d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!ipv6->prefix[i].is_used) {
 8015d20:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
 8015d24:	079a      	lsls	r2, r3, #30
 8015d26:	d411      	bmi.n	8015d4c <net_if_ipv6_prefix_lookup+0x4a>
 8015d28:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8015d2c:	079b      	lsls	r3, r3, #30
 8015d2e:	d5f0      	bpl.n	8015d12 <net_if_ipv6_prefix_lookup+0x10>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 8015d30:	463a      	mov	r2, r7
 8015d32:	4631      	mov	r1, r6
 8015d34:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 8015d38:	f7ff fddd 	bl	80158f6 <net_ipv6_is_prefix>
 8015d3c:	2800      	cmp	r0, #0
 8015d3e:	d0e8      	beq.n	8015d12 <net_if_ipv6_prefix_lookup+0x10>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 8015d40:	2301      	movs	r3, #1
			prefix = &ipv6->prefix[i];
 8015d42:	2228      	movs	r2, #40	; 0x28
 8015d44:	fb02 4403 	mla	r4, r2, r3, r4
 8015d48:	34c0      	adds	r4, #192	; 0xc0
			goto out;
 8015d4a:	e7e3      	b.n	8015d14 <net_if_ipv6_prefix_lookup+0x12>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 8015d4c:	463a      	mov	r2, r7
 8015d4e:	4631      	mov	r1, r6
 8015d50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015d54:	f7ff fdcf 	bl	80158f6 <net_ipv6_is_prefix>
 8015d58:	2800      	cmp	r0, #0
 8015d5a:	d0e5      	beq.n	8015d28 <net_if_ipv6_prefix_lookup+0x26>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	e7f0      	b.n	8015d42 <net_if_ipv6_prefix_lookup+0x40>

08015d60 <net_if_ipv6_router_lookup>:
{
 8015d60:	460a      	mov	r2, r1
	return iface_router_lookup(iface, AF_INET6, addr);
 8015d62:	2102      	movs	r1, #2
 8015d64:	f7ef b8b2 	b.w	8004ecc <iface_router_lookup>

08015d68 <net_if_ipv6_router_find_default>:
	return iface_router_find_default(iface, AF_INET6, addr);
 8015d68:	2102      	movs	r1, #2
 8015d6a:	f7ee bf01 	b.w	8004b70 <iface_router_find_default.constprop.0>

08015d6e <net_if_ipv6_router_update_lifetime>:
{
 8015d6e:	b538      	push	{r3, r4, r5, lr}
 8015d70:	4604      	mov	r4, r0
 8015d72:	460d      	mov	r5, r1
	router->life_start = k_uptime_get_32();
 8015d74:	f7ff fdeb 	bl	801594e <k_uptime_get_32>
	router->lifetime = lifetime;
 8015d78:	8425      	strh	r5, [r4, #32]
	router->life_start = k_uptime_get_32();
 8015d7a:	61e0      	str	r0, [r4, #28]
}
 8015d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	iface_router_update_timer(router->life_start);
 8015d80:	f7ee bf7e 	b.w	8004c80 <iface_router_update_timer>

08015d84 <net_if_ipv6_router_add>:
{
 8015d84:	b507      	push	{r0, r1, r2, lr}
	return iface_router_add(iface, AF_INET6, addr, false, lifetime);
 8015d86:	2300      	movs	r3, #0
 8015d88:	9200      	str	r2, [sp, #0]
 8015d8a:	460a      	mov	r2, r1
 8015d8c:	2102      	movs	r1, #2
 8015d8e:	f7ee ffb5 	bl	8004cfc <iface_router_add>
}
 8015d92:	b003      	add	sp, #12
 8015d94:	f85d fb04 	ldr.w	pc, [sp], #4

08015d98 <net_if_ipv6_router_rm>:
	return iface_router_rm(router);
 8015d98:	f7ef b82e 	b.w	8004df8 <iface_router_rm>

08015d9c <net_if_ipv6_get_hop_limit>:
{
 8015d9c:	b538      	push	{r3, r4, r5, lr}
 8015d9e:	4605      	mov	r5, r0
	net_if_lock(iface);
 8015da0:	f7ff fdf4 	bl	801598c <net_if_lock>
	if (!iface->config.ip.ipv6) {
 8015da4:	68ac      	ldr	r4, [r5, #8]
 8015da6:	b10c      	cbz	r4, 8015dac <net_if_ipv6_get_hop_limit+0x10>
	ret = iface->config.ip.ipv6->hop_limit;
 8015da8:	f894 4125 	ldrb.w	r4, [r4, #293]	; 0x125
 8015dac:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8015db0:	f7ff fe0d 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8015db4:	4620      	mov	r0, r4
 8015db6:	bd38      	pop	{r3, r4, r5, pc}

08015db8 <net_ipv6_set_hop_limit>:
{
 8015db8:	b538      	push	{r3, r4, r5, lr}
 8015dba:	4604      	mov	r4, r0
 8015dbc:	460d      	mov	r5, r1
	net_if_lock(iface);
 8015dbe:	f7ff fde5 	bl	801598c <net_if_lock>
	if (!iface->config.ip.ipv6) {
 8015dc2:	68a3      	ldr	r3, [r4, #8]
 8015dc4:	b10b      	cbz	r3, 8015dca <net_ipv6_set_hop_limit+0x12>
	iface->config.ip.ipv6->hop_limit = hop_limit;
 8015dc6:	f883 5125 	strb.w	r5, [r3, #293]	; 0x125
 8015dca:	f104 0048 	add.w	r0, r4, #72	; 0x48
}
 8015dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015dd2:	f7ff bdfc 	b.w	80159ce <k_mutex_unlock.isra.0>

08015dd6 <net_if_ipv6_get_ll>:
{
 8015dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dd8:	4605      	mov	r5, r0
 8015dda:	460e      	mov	r6, r1
	net_if_lock(iface);
 8015ddc:	f7ff fdd6 	bl	801598c <net_if_lock>
	ipv6 = iface->config.ip.ipv6;
 8015de0:	68ac      	ldr	r4, [r5, #8]
	if (!ipv6) {
 8015de2:	b1e4      	cbz	r4, 8015e1e <net_if_ipv6_get_ll+0x48>
 8015de4:	1d23      	adds	r3, r4, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 8015de6:	2200      	movs	r2, #0
		if (!ipv6->unicast[i].is_used ||
 8015de8:	2130      	movs	r1, #48	; 0x30
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
 8015dea:	f248 00fe 	movw	r0, #33022	; 0x80fe
		if (!ipv6->unicast[i].is_used ||
 8015dee:	fb01 4702 	mla	r7, r1, r2, r4
 8015df2:	f897 702f 	ldrb.w	r7, [r7, #47]	; 0x2f
 8015df6:	07bf      	lsls	r7, r7, #30
 8015df8:	d50c      	bpl.n	8015e14 <net_if_ipv6_get_ll+0x3e>
 8015dfa:	1c77      	adds	r7, r6, #1
 8015dfc:	d003      	beq.n	8015e06 <net_if_ipv6_get_ll+0x30>
		    (addr_state != NET_ADDR_ANY_STATE &&
 8015dfe:	f993 7029 	ldrsb.w	r7, [r3, #41]	; 0x29
 8015e02:	42b7      	cmp	r7, r6
 8015e04:	d106      	bne.n	8015e14 <net_if_ipv6_get_ll+0x3e>
		     ipv6->unicast[i].addr_state != addr_state) ||
 8015e06:	f833 7c04 	ldrh.w	r7, [r3, #-4]
 8015e0a:	2f02      	cmp	r7, #2
 8015e0c:	d102      	bne.n	8015e14 <net_if_ipv6_get_ll+0x3e>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
 8015e0e:	881f      	ldrh	r7, [r3, #0]
 8015e10:	4287      	cmp	r7, r0
 8015e12:	d00a      	beq.n	8015e2a <net_if_ipv6_get_ll+0x54>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 8015e14:	3201      	adds	r2, #1
 8015e16:	3330      	adds	r3, #48	; 0x30
 8015e18:	2a03      	cmp	r2, #3
 8015e1a:	d1e8      	bne.n	8015dee <net_if_ipv6_get_ll+0x18>
	struct in6_addr *addr = NULL;
 8015e1c:	2400      	movs	r4, #0
 8015e1e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8015e22:	f7ff fdd4 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8015e26:	4620      	mov	r0, r4
 8015e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e2a:	461c      	mov	r4, r3
 8015e2c:	e7f7      	b.n	8015e1e <net_if_ipv6_get_ll+0x48>

08015e2e <net_if_ipv6_select_src_iface>:
{
 8015e2e:	b513      	push	{r0, r1, r4, lr}
 8015e30:	4601      	mov	r1, r0
	struct net_if *iface = NULL;
 8015e32:	2000      	movs	r0, #0
 8015e34:	9001      	str	r0, [sp, #4]
	src = net_if_ipv6_select_src_addr(NULL, dst);
 8015e36:	f7f0 f82d 	bl	8005e94 <net_if_ipv6_select_src_addr>
 8015e3a:	4604      	mov	r4, r0
	if (src != net_ipv6_unspecified_address()) {
 8015e3c:	f7f0 fcd4 	bl	80067e8 <net_ipv6_unspecified_address>
 8015e40:	4284      	cmp	r4, r0
 8015e42:	d003      	beq.n	8015e4c <net_if_ipv6_select_src_iface+0x1e>
		net_if_ipv6_addr_lookup(src, &iface);
 8015e44:	a901      	add	r1, sp, #4
 8015e46:	4620      	mov	r0, r4
 8015e48:	f7ef faa0 	bl	800538c <net_if_ipv6_addr_lookup>
	if (iface == NULL) {
 8015e4c:	9b01      	ldr	r3, [sp, #4]
 8015e4e:	b913      	cbnz	r3, 8015e56 <net_if_ipv6_select_src_iface+0x28>
		iface = net_if_get_default();
 8015e50:	f7ef f964 	bl	800511c <net_if_get_default>
 8015e54:	9001      	str	r0, [sp, #4]
}
 8015e56:	9801      	ldr	r0, [sp, #4]
 8015e58:	b002      	add	sp, #8
 8015e5a:	bd10      	pop	{r4, pc}

08015e5c <net_if_ipv6_calc_reachable_time>:
{
 8015e5c:	b538      	push	{r3, r4, r5, lr}
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
 8015e5e:	f8d0 4110 	ldr.w	r4, [r0, #272]	; 0x110
 8015e62:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * ipv6->base_reachable_time)
 8015e64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015e68:	f7ee f956 	bl	8004118 <z_impl_sys_rand32_get>
	       sys_rand32_get() % (max_reachable - min_reachable);
 8015e6c:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
 8015e70:	fbb0 f3f4 	udiv	r3, r0, r4
 8015e74:	fb03 0014 	mls	r0, r3, r4, r0
}
 8015e78:	4428      	add	r0, r5
 8015e7a:	bd38      	pop	{r3, r4, r5, pc}

08015e7c <net_if_ipv4_get_ttl>:
{
 8015e7c:	b538      	push	{r3, r4, r5, lr}
 8015e7e:	4605      	mov	r5, r0
	net_if_lock(iface);
 8015e80:	f7ff fd84 	bl	801598c <net_if_lock>
	if (!iface->config.ip.ipv4) {
 8015e84:	68ec      	ldr	r4, [r5, #12]
 8015e86:	b10c      	cbz	r4, 8015e8c <net_if_ipv4_get_ttl+0x10>
	ret = iface->config.ip.ipv4->ttl;
 8015e88:	f894 4050 	ldrb.w	r4, [r4, #80]	; 0x50
 8015e8c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8015e90:	f7ff fd9d 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8015e94:	4620      	mov	r0, r4
 8015e96:	bd38      	pop	{r3, r4, r5, pc}

08015e98 <net_if_ipv4_addr_mask_cmp>:
{
 8015e98:	b538      	push	{r3, r4, r5, lr}
 8015e9a:	4605      	mov	r5, r0
 8015e9c:	460c      	mov	r4, r1
	net_if_lock(iface);
 8015e9e:	f7ff fd75 	bl	801598c <net_if_lock>
	ipv4 = iface->config.ip.ipv4;
 8015ea2:	68eb      	ldr	r3, [r5, #12]
	if (!ipv4) {
 8015ea4:	b1bb      	cbz	r3, 8015ed6 <net_if_ipv4_addr_mask_cmp+0x3e>
		if (!ipv4->unicast[i].is_used ||
 8015ea6:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
 8015eaa:	6821      	ldr	r1, [r4, #0]
 8015eac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		if (!ipv4->unicast[i].is_used ||
 8015eae:	f3c0 0440 	ubfx	r4, r0, #1, #1
 8015eb2:	0780      	lsls	r0, r0, #30
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
 8015eb4:	ea01 0102 	and.w	r1, r1, r2
		if (!ipv4->unicast[i].is_used ||
 8015eb8:	d507      	bpl.n	8015eca <net_if_ipv4_addr_mask_cmp+0x32>
 8015eba:	8818      	ldrh	r0, [r3, #0]
 8015ebc:	2801      	cmp	r0, #1
 8015ebe:	d10a      	bne.n	8015ed6 <net_if_ipv4_addr_mask_cmp+0x3e>
		if ((ipv4->unicast[i].address.in_addr.s_addr &
 8015ec0:	685c      	ldr	r4, [r3, #4]
 8015ec2:	4022      	ands	r2, r4
 8015ec4:	1a53      	subs	r3, r2, r1
 8015ec6:	425c      	negs	r4, r3
 8015ec8:	415c      	adcs	r4, r3
 8015eca:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8015ece:	f7ff fd7e 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
 8015ed6:	2400      	movs	r4, #0
 8015ed8:	e7f7      	b.n	8015eca <net_if_ipv4_addr_mask_cmp+0x32>

08015eda <ipv4_is_broadcast_address>:
{
 8015eda:	b570      	push	{r4, r5, r6, lr}
 8015edc:	4605      	mov	r5, r0
 8015ede:	460e      	mov	r6, r1
	net_if_lock(iface);
 8015ee0:	f7ff fd54 	bl	801598c <net_if_lock>
	ipv4 = iface->config.ip.ipv4;
 8015ee4:	68ec      	ldr	r4, [r5, #12]
	if (!ipv4) {
 8015ee6:	b934      	cbnz	r4, 8015ef6 <ipv4_is_broadcast_address+0x1c>
		ret = false;
 8015ee8:	2400      	movs	r4, #0
 8015eea:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8015eee:	f7ff fd6e 	bl	80159ce <k_mutex_unlock.isra.0>
}
 8015ef2:	4620      	mov	r0, r4
 8015ef4:	bd70      	pop	{r4, r5, r6, pc}
	if (!net_if_ipv4_addr_mask_cmp(iface, addr)) {
 8015ef6:	4631      	mov	r1, r6
 8015ef8:	4628      	mov	r0, r5
 8015efa:	f7ff ffcd 	bl	8015e98 <net_if_ipv4_addr_mask_cmp>
 8015efe:	2800      	cmp	r0, #0
 8015f00:	d0f2      	beq.n	8015ee8 <ipv4_is_broadcast_address+0xe>
	if ((UNALIGNED_GET(&addr->s_addr) & ~ipv4->netmask.s_addr) ==
 8015f02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8015f04:	6834      	ldr	r4, [r6, #0]
 8015f06:	43da      	mvns	r2, r3
 8015f08:	ea24 0403 	bic.w	r4, r4, r3
 8015f0c:	1aa3      	subs	r3, r4, r2
 8015f0e:	425c      	negs	r4, r3
 8015f10:	415c      	adcs	r4, r3
out:
 8015f12:	e7ea      	b.n	8015eea <ipv4_is_broadcast_address+0x10>

08015f14 <net_if_ipv4_get_ll>:
	return if_ipv4_get_addr(iface, addr_state, true);
 8015f14:	2201      	movs	r2, #1
 8015f16:	f7ff bd5c 	b.w	80159d2 <if_ipv4_get_addr>

08015f1a <net_if_ipv4_get_global_addr>:
	return if_ipv4_get_addr(iface, addr_state, false);
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	f7ff bd59 	b.w	80159d2 <if_ipv4_get_addr>

08015f20 <net_if_ipv4_set_netmask>:
{
 8015f20:	b538      	push	{r3, r4, r5, lr}
 8015f22:	4604      	mov	r4, r0
 8015f24:	460d      	mov	r5, r1
	net_if_lock(iface);
 8015f26:	f7ff fd31 	bl	801598c <net_if_lock>
	if (net_if_config_ipv4_get(iface, NULL) < 0) {
 8015f2a:	2100      	movs	r1, #0
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	f7ef fff9 	bl	8005f24 <net_if_config_ipv4_get>
 8015f32:	2800      	cmp	r0, #0
 8015f34:	db03      	blt.n	8015f3e <net_if_ipv4_set_netmask+0x1e>
	if (!iface->config.ip.ipv4) {
 8015f36:	68e3      	ldr	r3, [r4, #12]
 8015f38:	b10b      	cbz	r3, 8015f3e <net_if_ipv4_set_netmask+0x1e>
	net_ipaddr_copy(&iface->config.ip.ipv4->netmask, netmask);
 8015f3a:	682a      	ldr	r2, [r5, #0]
 8015f3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8015f3e:	f104 0048 	add.w	r0, r4, #72	; 0x48
}
 8015f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f46:	f7ff bd42 	b.w	80159ce <k_mutex_unlock.isra.0>

08015f4a <net_if_ipv4_set_gw>:
{
 8015f4a:	b538      	push	{r3, r4, r5, lr}
 8015f4c:	4604      	mov	r4, r0
 8015f4e:	460d      	mov	r5, r1
	net_if_lock(iface);
 8015f50:	f7ff fd1c 	bl	801598c <net_if_lock>
	if (net_if_config_ipv4_get(iface, NULL) < 0) {
 8015f54:	2100      	movs	r1, #0
 8015f56:	4620      	mov	r0, r4
 8015f58:	f7ef ffe4 	bl	8005f24 <net_if_config_ipv4_get>
 8015f5c:	2800      	cmp	r0, #0
 8015f5e:	db03      	blt.n	8015f68 <net_if_ipv4_set_gw+0x1e>
	if (!iface->config.ip.ipv4) {
 8015f60:	68e3      	ldr	r3, [r4, #12]
 8015f62:	b10b      	cbz	r3, 8015f68 <net_if_ipv4_set_gw+0x1e>
	net_ipaddr_copy(&iface->config.ip.ipv4->gw, gw);
 8015f64:	682a      	ldr	r2, [r5, #0]
 8015f66:	649a      	str	r2, [r3, #72]	; 0x48
 8015f68:	f104 0048 	add.w	r0, r4, #72	; 0x48
}
 8015f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f70:	f7ff bd2d 	b.w	80159ce <k_mutex_unlock.isra.0>

08015f74 <net_if_recv_data>:
{
 8015f74:	4603      	mov	r3, r0
 8015f76:	b510      	push	{r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
 8015f78:	f7ff fc86 	bl	8015888 <net_if_l2>
 8015f7c:	6802      	ldr	r2, [r0, #0]
 8015f7e:	4618      	mov	r0, r3
}
 8015f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_if_l2(iface)->recv(iface, pkt);
 8015f84:	4710      	bx	r2

08015f86 <net_if_queue_tx>:
{
 8015f86:	b510      	push	{r4, lr}
 8015f88:	460c      	mov	r4, r1
	uint8_t tc = net_tx_priority2tc(prio);
 8015f8a:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
 8015f8e:	f001 fcfd 	bl	801798c <net_tx_priority2tc>
		net_if_tx(net_pkt_iface(pkt), pkt);
 8015f92:	4621      	mov	r1, r4
 8015f94:	69a0      	ldr	r0, [r4, #24]
}
 8015f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_if_tx(net_pkt_iface(pkt), pkt);
 8015f9a:	f7f0 b965 	b.w	8006268 <net_if_tx.isra.0>

08015f9e <net_if_send_data>:
{
 8015f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fa0:	4606      	mov	r6, r0
 8015fa2:	460c      	mov	r4, r1
	return pkt->context;
 8015fa4:	694f      	ldr	r7, [r1, #20]
	net_if_lock(iface);
 8015fa6:	f7ff fcf1 	bl	801598c <net_if_lock>
	if (!net_if_flag_is_set(iface, NET_IF_LOWER_UP) ||
 8015faa:	2109      	movs	r1, #9
 8015fac:	4630      	mov	r0, r6
 8015fae:	f7ff fcf4 	bl	801599a <net_if_flag_is_set>
 8015fb2:	b980      	cbnz	r0, 8015fd6 <net_if_send_data+0x38>
		status = -ENETDOWN;
 8015fb4:	f06f 0572 	mvn.w	r5, #114	; 0x72
		if (context) {
 8015fb8:	b11f      	cbz	r7, 8015fc2 <net_if_send_data+0x24>
			net_context_send_cb(context, status);
 8015fba:	4629      	mov	r1, r5
 8015fbc:	4638      	mov	r0, r7
 8015fbe:	f7ff fc68 	bl	8015892 <net_context_send_cb>
		if (dst->addr) {
 8015fc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015fc4:	b12b      	cbz	r3, 8015fd2 <net_if_send_data+0x34>
			net_if_call_link_cb(iface, dst, status);
 8015fc6:	462a      	mov	r2, r5
 8015fc8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8015fcc:	4630      	mov	r0, r6
 8015fce:	f7f0 f929 	bl	8006224 <net_if_call_link_cb>
 8015fd2:	2502      	movs	r5, #2
 8015fd4:	e01e      	b.n	8016014 <net_if_send_data+0x76>
	    net_if_flag_is_set(iface, NET_IF_SUSPENDED)) {
 8015fd6:	2104      	movs	r1, #4
 8015fd8:	4630      	mov	r0, r6
 8015fda:	f7ff fcde 	bl	801599a <net_if_flag_is_set>
	if (!net_if_flag_is_set(iface, NET_IF_LOWER_UP) ||
 8015fde:	2800      	cmp	r0, #0
 8015fe0:	d1e8      	bne.n	8015fb4 <net_if_send_data+0x16>
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
 8015fe2:	2101      	movs	r1, #1
 8015fe4:	4630      	mov	r0, r6
 8015fe6:	f7ff fcd8 	bl	801599a <net_if_flag_is_set>
 8015fea:	b948      	cbnz	r0, 8016000 <net_if_send_data+0x62>
 8015fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fee:	b93b      	cbnz	r3, 8016000 <net_if_send_data+0x62>
	return net_if_get_link_addr(pkt->iface);
 8015ff0:	69a3      	ldr	r3, [r4, #24]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
 8015ff2:	681a      	ldr	r2, [r3, #0]
 8015ff4:	6912      	ldr	r2, [r2, #16]
 8015ff6:	6262      	str	r2, [r4, #36]	; 0x24
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	7d1b      	ldrb	r3, [r3, #20]
 8015ffc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return pkt->family;
 8016000:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV6) && net_pkt_family(pkt) == AF_INET6) {
 8016004:	095b      	lsrs	r3, r3, #5
 8016006:	2b02      	cmp	r3, #2
 8016008:	d00a      	beq.n	8016020 <net_if_send_data+0x82>
		net_if_queue_tx(iface, pkt);
 801600a:	2500      	movs	r5, #0
 801600c:	4621      	mov	r1, r4
 801600e:	4630      	mov	r0, r6
 8016010:	f7ff ffb9 	bl	8015f86 <net_if_queue_tx>
 8016014:	f106 0048 	add.w	r0, r6, #72	; 0x48
 8016018:	f7ff fcd9 	bl	80159ce <k_mutex_unlock.isra.0>
}
 801601c:	4628      	mov	r0, r5
 801601e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		verdict = net_ipv6_prepare_for_send(pkt);
 8016020:	4620      	mov	r0, r4
 8016022:	f002 ff72 	bl	8018f0a <net_ipv6_prepare_for_send>
	if (verdict == NET_DROP) {
 8016026:	2802      	cmp	r0, #2
		verdict = net_ipv6_prepare_for_send(pkt);
 8016028:	4605      	mov	r5, r0
	if (verdict == NET_DROP) {
 801602a:	d102      	bne.n	8016032 <net_if_send_data+0x94>
	int status = -EIO;
 801602c:	f06f 0504 	mvn.w	r5, #4
 8016030:	e7c2      	b.n	8015fb8 <net_if_send_data+0x1a>
	} else if (verdict == NET_OK) {
 8016032:	2800      	cmp	r0, #0
 8016034:	d1ee      	bne.n	8016014 <net_if_send_data+0x76>
 8016036:	e7e8      	b.n	801600a <net_if_send_data+0x6c>

08016038 <net_if_need_calc_tx_checksum>:
	return need_calc_checksum(iface, ETHERNET_HW_TX_CHKSUM_OFFLOAD);
 8016038:	2101      	movs	r1, #1
 801603a:	f7ee bd81 	b.w	8004b40 <need_calc_checksum>

0801603e <net_if_need_calc_rx_checksum>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
 801603e:	2102      	movs	r1, #2
 8016040:	f7ee bd7e 	b.w	8004b40 <need_calc_checksum>

08016044 <net_if_carrier_on>:
{
 8016044:	b510      	push	{r4, lr}
 8016046:	4604      	mov	r4, r0
	net_if_lock(iface);
 8016048:	f7ff fca0 	bl	801598c <net_if_lock>
	if (!net_if_flag_test_and_set(iface, NET_IF_LOWER_UP)) {
 801604c:	2109      	movs	r1, #9
 801604e:	6820      	ldr	r0, [r4, #0]
 8016050:	f7ff fcee 	bl	8015a30 <net_if_flag_test_and_set.isra.0>
 8016054:	b910      	cbnz	r0, 801605c <net_if_carrier_on+0x18>
		update_operational_state(iface);
 8016056:	4620      	mov	r0, r4
 8016058:	f7ef fb56 	bl	8005708 <update_operational_state>
 801605c:	f104 0048 	add.w	r0, r4, #72	; 0x48
}
 8016060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016064:	f7ff bcb3 	b.w	80159ce <k_mutex_unlock.isra.0>

08016068 <net_if_carrier_off>:
{
 8016068:	b510      	push	{r4, lr}
 801606a:	4604      	mov	r4, r0
	net_if_lock(iface);
 801606c:	f7ff fc8e 	bl	801598c <net_if_lock>
	return atomic_test_and_clear_bit(iface->if_dev->flags, value);
 8016070:	2109      	movs	r1, #9
 8016072:	6820      	ldr	r0, [r4, #0]
 8016074:	300c      	adds	r0, #12
 8016076:	f7ff fcf1 	bl	8015a5c <atomic_test_and_clear_bit>
	if (net_if_flag_test_and_clear(iface, NET_IF_LOWER_UP)) {
 801607a:	b110      	cbz	r0, 8016082 <net_if_carrier_off+0x1a>
		update_operational_state(iface);
 801607c:	4620      	mov	r0, r4
 801607e:	f7ef fb43 	bl	8005708 <update_operational_state>
	k_mutex_unlock(&iface->lock);
 8016082:	f104 0048 	add.w	r0, r4, #72	; 0x48
}
 8016086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801608a:	f7ff bca0 	b.w	80159ce <k_mutex_unlock.isra.0>

0801608e <net_timeout_set>:
#include <zephyr/sys_clock.h>

void net_timeout_set(struct net_timeout *timeout,
		     uint32_t lifetime,
		     uint32_t now)
{
 801608e:	b538      	push	{r3, r4, r5, lr}
 8016090:	4605      	mov	r5, r0
	uint64_t expire_timeout;

	timeout->timer_start = now;
 8016092:	6042      	str	r2, [r0, #4]

	/* Highly unlikely, but a zero timeout isn't correctly handled by the
	 * standard calculation.
	 */
	if (lifetime == 0U) {
 8016094:	b911      	cbnz	r1, 801609c <net_timeout_set+0xe>
		timeout->wrap_counter = 0;
 8016096:	60c1      	str	r1, [r0, #12]
	}

	expire_timeout = (uint64_t)MSEC_PER_SEC * (uint64_t)lifetime;
	timeout->wrap_counter = expire_timeout /
		(uint64_t)NET_TIMEOUT_MAX_VALUE;
	timeout->timer_timeout = expire_timeout -
 8016098:	60a9      	str	r1, [r5, #8]
	 */
	if (timeout->timer_timeout == 0U) {
		timeout->timer_timeout = NET_TIMEOUT_MAX_VALUE;
		timeout->wrap_counter -= 1;
	}
}
 801609a:	bd38      	pop	{r3, r4, r5, pc}
	expire_timeout = (uint64_t)MSEC_PER_SEC * (uint64_t)lifetime;
 801609c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	timeout->wrap_counter = expire_timeout /
 80160a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80160a4:	2300      	movs	r3, #0
	expire_timeout = (uint64_t)MSEC_PER_SEC * (uint64_t)lifetime;
 80160a6:	fba1 4104 	umull	r4, r1, r1, r4
	timeout->wrap_counter = expire_timeout /
 80160aa:	4620      	mov	r0, r4
 80160ac:	f7ea fbc2 	bl	8000834 <__aeabi_uldivmod>
 80160b0:	60e8      	str	r0, [r5, #12]
		(uint64_t)NET_TIMEOUT_MAX_VALUE *
 80160b2:	ebc0 71c0 	rsb	r1, r0, r0, lsl #31
	if (timeout->timer_timeout == 0U) {
 80160b6:	1a61      	subs	r1, r4, r1
 80160b8:	d1ee      	bne.n	8016098 <net_timeout_set+0xa>
		timeout->timer_timeout = NET_TIMEOUT_MAX_VALUE;
 80160ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
		timeout->wrap_counter -= 1;
 80160be:	3801      	subs	r0, #1
		timeout->timer_timeout = NET_TIMEOUT_MAX_VALUE;
 80160c0:	60ab      	str	r3, [r5, #8]
		timeout->wrap_counter -= 1;
 80160c2:	60e8      	str	r0, [r5, #12]
 80160c4:	e7e9      	b.n	801609a <net_timeout_set+0xc>

080160c6 <net_timeout_remaining>:
	return (int64_t)deadline;
}

uint32_t net_timeout_remaining(const struct net_timeout *timeout,
			       uint32_t now)
{
 80160c6:	b570      	push	{r4, r5, r6, lr}
	int64_t ret = timeout->timer_timeout;

	ret += timeout->wrap_counter * (uint64_t)NET_TIMEOUT_MAX_VALUE;
 80160c8:	2200      	movs	r2, #0
 80160ca:	6883      	ldr	r3, [r0, #8]
 80160cc:	68c6      	ldr	r6, [r0, #12]
 80160ce:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
	ret -= (int64_t)(int32_t)(now - timeout->timer_start);
 80160d2:	6840      	ldr	r0, [r0, #4]
	ret += timeout->wrap_counter * (uint64_t)NET_TIMEOUT_MAX_VALUE;
 80160d4:	4614      	mov	r4, r2
	ret -= (int64_t)(int32_t)(now - timeout->timer_start);
 80160d6:	1a09      	subs	r1, r1, r0
	ret += timeout->wrap_counter * (uint64_t)NET_TIMEOUT_MAX_VALUE;
 80160d8:	fbe6 3405 	umlal	r3, r4, r6, r5
	ret -= (int64_t)(int32_t)(now - timeout->timer_start);
 80160dc:	1a58      	subs	r0, r3, r1
 80160de:	eb64 71e1 	sbc.w	r1, r4, r1, asr #31
	if (ret <= 0) {
 80160e2:	2801      	cmp	r0, #1
 80160e4:	f171 0300 	sbcs.w	r3, r1, #0
 80160e8:	db05      	blt.n	80160f6 <net_timeout_remaining+0x30>
		return 0;
	}

	return (uint32_t)((uint64_t)ret / MSEC_PER_SEC);
 80160ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80160ee:	2300      	movs	r3, #0
 80160f0:	f7ea fba0 	bl	8000834 <__aeabi_uldivmod>
}
 80160f4:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 80160f6:	4610      	mov	r0, r2
 80160f8:	e7fc      	b.n	80160f4 <net_timeout_remaining+0x2e>

080160fa <net_timeout_evaluate>:

uint32_t net_timeout_evaluate(struct net_timeout *timeout,
			      uint32_t now)
{
 80160fa:	b530      	push	{r4, r5, lr}
 80160fc:	4603      	mov	r3, r0
	uint32_t last_delay;
	int32_t remains;
	bool wraps;

	/* Time since last evaluation or set. */
	elapsed = now - timeout->timer_start;
 80160fe:	6845      	ldr	r5, [r0, #4]

	/* The delay used the last time this was evaluated. */
	wraps = (timeout->wrap_counter > 0U);
 8016100:	68c0      	ldr	r0, [r0, #12]
	last_delay = wraps
		? NET_TIMEOUT_MAX_VALUE
		: timeout->timer_timeout;
 8016102:	b9f8      	cbnz	r0, 8016144 <net_timeout_evaluate+0x4a>
 8016104:	689c      	ldr	r4, [r3, #8]

	/* Time remaining until completion of the last delay. */
	remains = (int32_t)(last_delay - elapsed);
 8016106:	1a6a      	subs	r2, r5, r1
 8016108:	4422      	add	r2, r4

	/* If the deadline for the next event hasn't been reached yet just
	 * return the remaining time.
	 */
	if (remains > 0) {
 801610a:	2a00      	cmp	r2, #0
 801610c:	dc1d      	bgt.n	801614a <net_timeout_evaluate+0x50>

	/* Deadline has been reached.  If we're not wrapping we've completed
	 * the last portion of the full timeout, so return zero to indicate
	 * the timeout has completed.
	 */
	if (!wraps) {
 801610e:	b1c0      	cbz	r0, 8016142 <net_timeout_evaluate+0x48>
 8016110:	f101 4400 	add.w	r4, r1, #2147483648	; 0x80000000
	 * that's at least NET_TIMEOUT_MAX_VALUE, and can apply the
	 * reduction by decrementing the wrap count.
	 */
	timeout->timer_start = now;
	elapsed -= NET_TIMEOUT_MAX_VALUE;
	timeout->wrap_counter -= 1;
 8016114:	1e42      	subs	r2, r0, #1
	timeout->timer_start = now;
 8016116:	6059      	str	r1, [r3, #4]
 8016118:	3401      	adds	r4, #1
	timeout->wrap_counter -= 1;
 801611a:	60da      	str	r2, [r3, #12]
	 * NET_TIMEOUT_MAX_VALUE.  But if subtracting would reduce the
	 * counter to zero or go negative we need to reduce the the wrap
	 * counter once more and add the residual to the counter, so the
	 * counter remains positive.
	 */
	if (timeout->timer_timeout > elapsed) {
 801611c:	689a      	ldr	r2, [r3, #8]
 801611e:	1b29      	subs	r1, r5, r4
	elapsed -= NET_TIMEOUT_MAX_VALUE;
 8016120:	1b64      	subs	r4, r4, r5
	if (timeout->timer_timeout > elapsed) {
 8016122:	42a2      	cmp	r2, r4
		timeout->timer_timeout -= elapsed;
	} else {
		timeout->timer_timeout += NET_TIMEOUT_MAX_VALUE - elapsed;
 8016124:	bf97      	itett	ls
 8016126:	f102 4200 	addls.w	r2, r2, #2147483648	; 0x80000000
		timeout->timer_timeout -= elapsed;
 801612a:	1852      	addhi	r2, r2, r1
		timeout->wrap_counter -= 1U;
 801612c:	3802      	subls	r0, #2
		timeout->timer_timeout += NET_TIMEOUT_MAX_VALUE - elapsed;
 801612e:	f102 32ff 	addls.w	r2, r2, #4294967295
		timeout->timer_timeout -= elapsed;
 8016132:	bf8f      	iteee	hi
 8016134:	609a      	strhi	r2, [r3, #8]
		timeout->wrap_counter -= 1U;
 8016136:	60d8      	strls	r0, [r3, #12]
		timeout->timer_timeout += NET_TIMEOUT_MAX_VALUE - elapsed;
 8016138:	1852      	addls	r2, r2, r1
 801613a:	609a      	strls	r2, [r3, #8]
	}

	return (timeout->wrap_counter == 0U)
		? timeout->timer_timeout
		: NET_TIMEOUT_MAX_VALUE;
 801613c:	68da      	ldr	r2, [r3, #12]
 801613e:	b932      	cbnz	r2, 801614e <net_timeout_evaluate+0x54>
 8016140:	6898      	ldr	r0, [r3, #8]
}
 8016142:	bd30      	pop	{r4, r5, pc}
		: timeout->timer_timeout;
 8016144:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8016148:	e7dd      	b.n	8016106 <net_timeout_evaluate+0xc>
 801614a:	4610      	mov	r0, r2
 801614c:	e7f9      	b.n	8016142 <net_timeout_evaluate+0x48>
		: NET_TIMEOUT_MAX_VALUE;
 801614e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016152:	e7f6      	b.n	8016142 <net_timeout_evaluate+0x48>

08016154 <convert_port>:
{
 8016154:	b537      	push	{r0, r1, r2, r4, r5, lr}
	tmp = strtoul(buf, &endptr, 10);
 8016156:	220a      	movs	r2, #10
{
 8016158:	460d      	mov	r5, r1
	tmp = strtoul(buf, &endptr, 10);
 801615a:	a901      	add	r1, sp, #4
{
 801615c:	4604      	mov	r4, r0
	tmp = strtoul(buf, &endptr, 10);
 801615e:	f7fe fc6e 	bl	8014a3e <strtoul>
	if ((endptr == buf && tmp == 0) ||
 8016162:	9a01      	ldr	r2, [sp, #4]
	tmp = strtoul(buf, &endptr, 10);
 8016164:	4603      	mov	r3, r0
	if ((endptr == buf && tmp == 0) ||
 8016166:	42a2      	cmp	r2, r4
 8016168:	d100      	bne.n	801616c <convert_port+0x18>
 801616a:	b150      	cbz	r0, 8016182 <convert_port+0x2e>
 801616c:	7820      	ldrb	r0, [r4, #0]
 801616e:	b130      	cbz	r0, 801617e <convert_port+0x2a>
	    !(*buf != '\0' && *endptr == '\0') ||
 8016170:	7810      	ldrb	r0, [r2, #0]
 8016172:	b930      	cbnz	r0, 8016182 <convert_port+0x2e>
 8016174:	b29a      	uxth	r2, r3
 8016176:	4293      	cmp	r3, r2
 8016178:	d101      	bne.n	801617e <convert_port+0x2a>
	return true;
 801617a:	2001      	movs	r0, #1
	    ((unsigned long)(unsigned short)tmp != tmp)) {
 801617c:	802b      	strh	r3, [r5, #0]
}
 801617e:	b003      	add	sp, #12
 8016180:	bd30      	pop	{r4, r5, pc}
		return false;
 8016182:	2000      	movs	r0, #0
 8016184:	e7fb      	b.n	801617e <convert_port+0x2a>

08016186 <net_byte_to_hex>:
{
 8016186:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
 8016188:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
 801618a:	b1bb      	cbz	r3, 80161bc <net_byte_to_hex+0x36>
		if (val < 10) {
 801618c:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
 801618e:	f100 0301 	add.w	r3, r0, #1
 8016192:	bf8a      	itet	hi
 8016194:	f1a2 050a 	subhi.w	r5, r2, #10
			*ptr++ = (char) (val + '0');
 8016198:	3430      	addls	r4, #48	; 0x30
			*ptr++ = (char) (val - 10 + base);
 801619a:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
 801619c:	7004      	strb	r4, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
 801619e:	f001 010f 	and.w	r1, r1, #15
			*ptr++ = (char) (val - 10 + base);
 80161a2:	1c58      	adds	r0, r3, #1
		if (val < 10) {
 80161a4:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
 80161a6:	bf8a      	itet	hi
 80161a8:	3a0a      	subhi	r2, #10
			*ptr++ = (char) (val + '0');
 80161aa:	3130      	addls	r1, #48	; 0x30
			*ptr++ = (char) (val - 10 + base);
 80161ac:	1889      	addhi	r1, r1, r2
	*ptr = '\0';
 80161ae:	f04f 0200 	mov.w	r2, #0
			*ptr++ = (char) (val - 10 + base);
 80161b2:	bf88      	it	hi
 80161b4:	b2c9      	uxtbhi	r1, r1
	*ptr = '\0';
 80161b6:	705a      	strb	r2, [r3, #1]
 80161b8:	7019      	strb	r1, [r3, #0]
}
 80161ba:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
 80161bc:	2c00      	cmp	r4, #0
 80161be:	d1e5      	bne.n	801618c <net_byte_to_hex+0x6>
 80161c0:	4603      	mov	r3, r0
 80161c2:	e7ec      	b.n	801619e <net_byte_to_hex+0x18>

080161c4 <z_impl_net_addr_pton>:
	if (family == AF_INET) {
 80161c4:	2801      	cmp	r0, #1
{
 80161c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80161ca:	460c      	mov	r4, r1
 80161cc:	4616      	mov	r6, r2
	if (family == AF_INET) {
 80161ce:	d128      	bne.n	8016222 <z_impl_net_addr_pton+0x5e>
		len = strlen(src);
 80161d0:	4608      	mov	r0, r1
 80161d2:	f7fe fd03 	bl	8014bdc <strlen>
		for (i = 0; i < len; i++) {
 80161d6:	4623      	mov	r3, r4
 80161d8:	4420      	add	r0, r4
 80161da:	4298      	cmp	r0, r3
 80161dc:	d114      	bne.n	8016208 <z_impl_net_addr_pton+0x44>
		(void)memset(addr, 0, sizeof(struct in_addr));
 80161de:	4630      	mov	r0, r6
 80161e0:	1e75      	subs	r5, r6, #1
 80161e2:	3603      	adds	r6, #3
 80161e4:	2204      	movs	r2, #4
 80161e6:	2100      	movs	r1, #0
 80161e8:	f7fe fd50 	bl	8014c8c <memset>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
 80161ec:	4620      	mov	r0, r4
 80161ee:	220a      	movs	r2, #10
 80161f0:	a901      	add	r1, sp, #4
 80161f2:	f7fe fbb0 	bl	8014956 <strtol>
			src = ++endptr;
 80161f6:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
 80161f8:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
 80161fc:	42b5      	cmp	r5, r6
			src = ++endptr;
 80161fe:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
 8016202:	d1f3      	bne.n	80161ec <z_impl_net_addr_pton+0x28>
	return 0;
 8016204:	2000      	movs	r0, #0
 8016206:	e009      	b.n	801621c <z_impl_net_addr_pton+0x58>
			if (!(src[i] >= '0' && src[i] <= '9') &&
 8016208:	f813 2b01 	ldrb.w	r2, [r3], #1
 801620c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016210:	2909      	cmp	r1, #9
 8016212:	d9e2      	bls.n	80161da <z_impl_net_addr_pton+0x16>
 8016214:	2a2e      	cmp	r2, #46	; 0x2e
 8016216:	d0e0      	beq.n	80161da <z_impl_net_addr_pton+0x16>
				return -EINVAL;
 8016218:	f06f 0015 	mvn.w	r0, #21
}
 801621c:	b003      	add	sp, #12
 801621e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
 8016222:	2802      	cmp	r0, #2
 8016224:	d1f8      	bne.n	8016218 <z_impl_net_addr_pton+0x54>
		int expected_groups = strchr(src, '.') ? 6 : 8;
 8016226:	212e      	movs	r1, #46	; 0x2e
 8016228:	4620      	mov	r0, r4
 801622a:	f7fe fcbd 	bl	8014ba8 <strchr>
		if (*src == ':') {
 801622e:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
 8016230:	2800      	cmp	r0, #0
 8016232:	bf14      	ite	ne
 8016234:	2706      	movne	r7, #6
 8016236:	2708      	moveq	r7, #8
		if (*src == ':') {
 8016238:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
 801623a:	bf08      	it	eq
 801623c:	3401      	addeq	r4, #1
		len = strlen(src);
 801623e:	4620      	mov	r0, r4
 8016240:	f7fe fccc 	bl	8014bdc <strlen>
		for (i = 0; i < len; i++) {
 8016244:	2300      	movs	r3, #0
 8016246:	4283      	cmp	r3, r0
 8016248:	db1f      	blt.n	801628a <z_impl_net_addr_pton+0xc6>
		for (i = 0; i < expected_groups; i++) {
 801624a:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
 801624c:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
 801624e:	7823      	ldrb	r3, [r4, #0]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d0e1      	beq.n	8016218 <z_impl_net_addr_pton+0x54>
			if (*src != ':') {
 8016254:	2b3a      	cmp	r3, #58	; 0x3a
 8016256:	d02f      	beq.n	80162b8 <z_impl_net_addr_pton+0xf4>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
 8016258:	2210      	movs	r2, #16
 801625a:	2100      	movs	r1, #0
 801625c:	4620      	mov	r0, r4
 801625e:	f7fe fb7a 	bl	8014956 <strtol>
 8016262:	4681      	mov	r9, r0
 8016264:	2210      	movs	r2, #16
 8016266:	2100      	movs	r1, #0
 8016268:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801626c:	4620      	mov	r0, r4
 801626e:	f7fe fb72 	bl	8014956 <strtol>
 8016272:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
 8016276:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
 801627a:	213a      	movs	r1, #58	; 0x3a
 801627c:	4620      	mov	r0, r4
 801627e:	f7fe fc93 	bl	8014ba8 <strchr>
				if (src) {
 8016282:	4604      	mov	r4, r0
 8016284:	b178      	cbz	r0, 80162a6 <z_impl_net_addr_pton+0xe2>
			src++;
 8016286:	3401      	adds	r4, #1
 8016288:	e010      	b.n	80162ac <z_impl_net_addr_pton+0xe8>
			if (!(src[i] >= '0' && src[i] <= '9') &&
 801628a:	5ce2      	ldrb	r2, [r4, r3]
 801628c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016290:	290a      	cmp	r1, #10
 8016292:	d906      	bls.n	80162a2 <z_impl_net_addr_pton+0xde>
 8016294:	f022 0120 	bic.w	r1, r2, #32
 8016298:	3941      	subs	r1, #65	; 0x41
 801629a:	2905      	cmp	r1, #5
 801629c:	d901      	bls.n	80162a2 <z_impl_net_addr_pton+0xde>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
 801629e:	2a2e      	cmp	r2, #46	; 0x2e
 80162a0:	d1ba      	bne.n	8016218 <z_impl_net_addr_pton+0x54>
		for (i = 0; i < len; i++) {
 80162a2:	3301      	adds	r3, #1
 80162a4:	e7cf      	b.n	8016246 <z_impl_net_addr_pton+0x82>
					if (i < expected_groups - 1) {
 80162a6:	1e7b      	subs	r3, r7, #1
 80162a8:	429d      	cmp	r5, r3
 80162aa:	dbb5      	blt.n	8016218 <z_impl_net_addr_pton+0x54>
		for (i = 0; i < expected_groups; i++) {
 80162ac:	3501      	adds	r5, #1
 80162ae:	42af      	cmp	r7, r5
 80162b0:	dd16      	ble.n	80162e0 <z_impl_net_addr_pton+0x11c>
			if (!src || *src == '\0') {
 80162b2:	2c00      	cmp	r4, #0
 80162b4:	d1cb      	bne.n	801624e <z_impl_net_addr_pton+0x8a>
 80162b6:	e7af      	b.n	8016218 <z_impl_net_addr_pton+0x54>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
 80162b8:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 80162bc:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
 80162c0:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
 80162c4:	3501      	adds	r5, #1
 80162c6:	42af      	cmp	r7, r5
 80162c8:	dcf6      	bgt.n	80162b8 <z_impl_net_addr_pton+0xf4>
			tmp = strrchr(src, ':');
 80162ca:	213a      	movs	r1, #58	; 0x3a
 80162cc:	4620      	mov	r0, r4
 80162ce:	f7fe fc78 	bl	8014bc2 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
 80162d2:	4284      	cmp	r4, r0
 80162d4:	d11f      	bne.n	8016316 <z_impl_net_addr_pton+0x152>
 80162d6:	2f06      	cmp	r7, #6
 80162d8:	d001      	beq.n	80162de <z_impl_net_addr_pton+0x11a>
 80162da:	7863      	ldrb	r3, [r4, #1]
 80162dc:	b9fb      	cbnz	r3, 801631e <z_impl_net_addr_pton+0x15a>
				src++;
 80162de:	3401      	adds	r4, #1
		if (expected_groups == 6) {
 80162e0:	2f06      	cmp	r7, #6
 80162e2:	d18f      	bne.n	8016204 <z_impl_net_addr_pton+0x40>
 80162e4:	360c      	adds	r6, #12
			for (i = 0; i < 4; i++) {
 80162e6:	2500      	movs	r5, #0
				if (!src || !*src) {
 80162e8:	2c00      	cmp	r4, #0
 80162ea:	d095      	beq.n	8016218 <z_impl_net_addr_pton+0x54>
 80162ec:	7823      	ldrb	r3, [r4, #0]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d092      	beq.n	8016218 <z_impl_net_addr_pton+0x54>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
 80162f2:	220a      	movs	r2, #10
 80162f4:	2100      	movs	r1, #0
 80162f6:	4620      	mov	r0, r4
 80162f8:	f7fe fb2d 	bl	8014956 <strtol>
				src = strchr(src, '.');
 80162fc:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
 80162fe:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
 8016302:	4620      	mov	r0, r4
 8016304:	f7fe fc50 	bl	8014ba8 <strchr>
				if (src) {
 8016308:	4604      	mov	r4, r0
 801630a:	b1b0      	cbz	r0, 801633a <z_impl_net_addr_pton+0x176>
					src++;
 801630c:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
 801630e:	3501      	adds	r5, #1
 8016310:	2d04      	cmp	r5, #4
 8016312:	d1e9      	bne.n	80162e8 <z_impl_net_addr_pton+0x124>
 8016314:	e776      	b.n	8016204 <z_impl_net_addr_pton+0x40>
			if (expected_groups == 6) {
 8016316:	2f06      	cmp	r7, #6
				tmp--;
 8016318:	bf08      	it	eq
 801631a:	f100 30ff 	addeq.w	r0, r0, #4294967295
			i = expected_groups - 1;
 801631e:	1e7d      	subs	r5, r7, #1
 8016320:	3001      	adds	r0, #1
				if (*tmp == ':') {
 8016322:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
 8016326:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
 8016328:	bf08      	it	eq
 801632a:	f105 35ff 	addeq.w	r5, r5, #4294967295
				if (i < 0) {
 801632e:	2d00      	cmp	r5, #0
 8016330:	f6ff af72 	blt.w	8016218 <z_impl_net_addr_pton+0x54>
			} while (tmp-- != src);
 8016334:	4284      	cmp	r4, r0
 8016336:	d1f4      	bne.n	8016322 <z_impl_net_addr_pton+0x15e>
 8016338:	e7a5      	b.n	8016286 <z_impl_net_addr_pton+0xc2>
					if (i < 3) {
 801633a:	2d03      	cmp	r5, #3
 801633c:	f47f af6c 	bne.w	8016218 <z_impl_net_addr_pton+0x54>
 8016340:	e7e5      	b.n	801630e <z_impl_net_addr_pton+0x14a>

08016342 <parse_ipv4>:
	len = MIN(NET_IPV4_ADDR_LEN, str_len);
 8016342:	2910      	cmp	r1, #16
{
 8016344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016348:	4699      	mov	r9, r3
 801634a:	b087      	sub	sp, #28
	len = MIN(NET_IPV4_ADDR_LEN, str_len);
 801634c:	460b      	mov	r3, r1
{
 801634e:	4680      	mov	r8, r0
 8016350:	460d      	mov	r5, r1
 8016352:	4616      	mov	r6, r2
	len = MIN(NET_IPV4_ADDR_LEN, str_len);
 8016354:	bf28      	it	cs
 8016356:	2310      	movcs	r3, #16
	for (i = 0; i < len; i++) {
 8016358:	2400      	movs	r4, #0
 801635a:	42a3      	cmp	r3, r4
 801635c:	dc0e      	bgt.n	801637c <parse_ipv4+0x3a>
 801635e:	461c      	mov	r4, r3
	if (has_port) {
 8016360:	f1b9 0f00 	cmp.w	r9, #0
 8016364:	d045      	beq.n	80163f2 <parse_ipv4+0xb0>
		ptr = memchr(str, ':', len);
 8016366:	4622      	mov	r2, r4
 8016368:	213a      	movs	r1, #58	; 0x3a
 801636a:	4640      	mov	r0, r8
 801636c:	f7fe fc97 	bl	8014c9e <memchr>
		if (!ptr) {
 8016370:	4607      	mov	r7, r0
 8016372:	b948      	cbnz	r0, 8016388 <parse_ipv4+0x46>
			return false;
 8016374:	2000      	movs	r0, #0
}
 8016376:	b007      	add	sp, #28
 8016378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!str[i]) {
 801637c:	f818 2004 	ldrb.w	r2, [r8, r4]
 8016380:	2a00      	cmp	r2, #0
 8016382:	d0ed      	beq.n	8016360 <parse_ipv4+0x1e>
	for (i = 0; i < len; i++) {
 8016384:	3401      	adds	r4, #1
 8016386:	e7e8      	b.n	801635a <parse_ipv4+0x18>
		end = MIN(len, ptr - str);
 8016388:	eba0 0308 	sub.w	r3, r0, r8
 801638c:	429c      	cmp	r4, r3
 801638e:	bfa8      	it	ge
 8016390:	461c      	movge	r4, r3
	memcpy(ipaddr, str, end);
 8016392:	4641      	mov	r1, r8
 8016394:	4622      	mov	r2, r4
 8016396:	a801      	add	r0, sp, #4
	ipaddr[end] = '\0';
 8016398:	f04f 0800 	mov.w	r8, #0
	memcpy(ipaddr, str, end);
 801639c:	f7fe fc6b 	bl	8014c76 <memcpy>
	ipaddr[end] = '\0';
 80163a0:	f104 0318 	add.w	r3, r4, #24
 80163a4:	446b      	add	r3, sp
 80163a6:	f803 8c14 	strb.w	r8, [r3, #-20]
	return z_impl_net_addr_pton(family, src, dst);
 80163aa:	2001      	movs	r0, #1
 80163ac:	1d32      	adds	r2, r6, #4
 80163ae:	a901      	add	r1, sp, #4
 80163b0:	f7ff ff08 	bl	80161c4 <z_impl_net_addr_pton>
	if (ret < 0) {
 80163b4:	4540      	cmp	r0, r8
 80163b6:	dbdd      	blt.n	8016374 <parse_ipv4+0x32>
	net_sin(addr)->sin_family = AF_INET;
 80163b8:	2001      	movs	r0, #1
 80163ba:	8030      	strh	r0, [r6, #0]
	if (!has_port) {
 80163bc:	f1b9 0f00 	cmp.w	r9, #0
 80163c0:	d0d9      	beq.n	8016376 <parse_ipv4+0x34>
	memcpy(ipaddr, ptr + 1, str_len - end);
 80163c2:	1b2c      	subs	r4, r5, r4
 80163c4:	1839      	adds	r1, r7, r0
 80163c6:	a801      	add	r0, sp, #4
 80163c8:	4622      	mov	r2, r4
 80163ca:	f7fe fc54 	bl	8014c76 <memcpy>
	ipaddr[str_len - end] = '\0';
 80163ce:	f104 0318 	add.w	r3, r4, #24
	ret = convert_port(ipaddr, &port);
 80163d2:	f10d 0102 	add.w	r1, sp, #2
 80163d6:	a801      	add	r0, sp, #4
	ipaddr[str_len - end] = '\0';
 80163d8:	eb0d 0403 	add.w	r4, sp, r3
 80163dc:	f804 8c14 	strb.w	r8, [r4, #-20]
	ret = convert_port(ipaddr, &port);
 80163e0:	f7ff feb8 	bl	8016154 <convert_port>
	if (!ret) {
 80163e4:	2800      	cmp	r0, #0
 80163e6:	d0c5      	beq.n	8016374 <parse_ipv4+0x32>
	net_sin(addr)->sin_port = htons(port);
 80163e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80163ec:	ba5b      	rev16	r3, r3
 80163ee:	8073      	strh	r3, [r6, #2]
	return true;
 80163f0:	e7c1      	b.n	8016376 <parse_ipv4+0x34>
	char *ptr = NULL;
 80163f2:	464f      	mov	r7, r9
 80163f4:	e7cd      	b.n	8016392 <parse_ipv4+0x50>

080163f6 <calc_chksum>:
{
 80163f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (odd_start == CHECKSUM_BIG_ENDIAN) {
 80163fa:	f011 0601 	ands.w	r6, r1, #1
 80163fe:	d148      	bne.n	8016492 <calc_chksum+0x9c>
		sum = __bswap_16(sum_in);
 8016400:	ba40      	rev16	r0, r0
 8016402:	4633      	mov	r3, r6
 8016404:	b280      	uxth	r0, r0
	if ((((uintptr_t)data & 0x02) != 0) && (pending >= sizeof(uint16_t))) {
 8016406:	078c      	lsls	r4, r1, #30
 8016408:	d507      	bpl.n	801641a <calc_chksum+0x24>
 801640a:	2a01      	cmp	r2, #1
 801640c:	d905      	bls.n	801641a <calc_chksum+0x24>
		sum = sum + *((uint16_t *)data);
 801640e:	f831 4b02 	ldrh.w	r4, [r1], #2
		pending -= sizeof(uint16_t);
 8016412:	3a02      	subs	r2, #2
		sum = sum + *((uint16_t *)data);
 8016414:	1820      	adds	r0, r4, r0
 8016416:	f143 0300 	adc.w	r3, r3, #0
	while (pending >= sizeof(uint32_t) * 4) {
 801641a:	460d      	mov	r5, r1
 801641c:	4694      	mov	ip, r2
		uint64_t sum_a = p[i];
 801641e:	f04f 0e00 	mov.w	lr, #0
	while (pending >= sizeof(uint32_t) * 4) {
 8016422:	f1bc 0f0f 	cmp.w	ip, #15
 8016426:	f105 0510 	add.w	r5, r5, #16
 801642a:	d83d      	bhi.n	80164a8 <calc_chksum+0xb2>
 801642c:	0914      	lsrs	r4, r2, #4
 801642e:	f06f 050f 	mvn.w	r5, #15
 8016432:	fb05 2204 	mla	r2, r5, r4, r2
 8016436:	ea4f 1c04 	mov.w	ip, r4, lsl #4
 801643a:	eb01 1404 	add.w	r4, r1, r4, lsl #4
 801643e:	4617      	mov	r7, r2
	while (pending >= sizeof(uint32_t)) {
 8016440:	2f03      	cmp	r7, #3
 8016442:	d846      	bhi.n	80164d2 <calc_chksum+0xdc>
 8016444:	f06f 0503 	mvn.w	r5, #3
 8016448:	0894      	lsrs	r4, r2, #2
 801644a:	fb05 2404 	mla	r4, r5, r4, r2
		sum = sum + p[i++];
 801644e:	402a      	ands	r2, r5
	if (pending >= 2) {
 8016450:	2c01      	cmp	r4, #1
		sum = sum + p[i++];
 8016452:	4462      	add	r2, ip
 8016454:	eb01 0502 	add.w	r5, r1, r2
	if (pending >= 2) {
 8016458:	d905      	bls.n	8016466 <calc_chksum+0x70>
		sum = sum + *((uint16_t *)data);
 801645a:	5a8a      	ldrh	r2, [r1, r2]
		pending -= sizeof(uint16_t);
 801645c:	3c02      	subs	r4, #2
		data += sizeof(uint16_t);
 801645e:	3502      	adds	r5, #2
		sum = sum + *((uint16_t *)data);
 8016460:	1810      	adds	r0, r2, r0
 8016462:	f143 0300 	adc.w	r3, r3, #0
	if (pending == 1) {
 8016466:	2c01      	cmp	r4, #1
 8016468:	d106      	bne.n	8016478 <calc_chksum+0x82>
	uint16_t data16 = (uint16_t)*data;
 801646a:	782a      	ldrb	r2, [r5, #0]
	if (((uintptr_t)(data) & 1) == CHECKSUM_BIG_ENDIAN) {
 801646c:	07e9      	lsls	r1, r5, #31
		return data16 << 8;
 801646e:	bf48      	it	mi
 8016470:	0212      	lslmi	r2, r2, #8
		sum += offset_based_swap8(data);
 8016472:	1810      	adds	r0, r2, r0
 8016474:	f143 0300 	adc.w	r3, r3, #0
	while (sum >> 16) {
 8016478:	0c02      	lsrs	r2, r0, #16
 801647a:	0c19      	lsrs	r1, r3, #16
 801647c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
		sum = (sum & 0xffff) + (sum >> 16);
 8016480:	b280      	uxth	r0, r0
	while (sum >> 16) {
 8016482:	ea52 4313 	orrs.w	r3, r2, r3, lsr #16
 8016486:	d12b      	bne.n	80164e0 <calc_chksum+0xea>
	if (odd_start == CHECKSUM_BIG_ENDIAN) {
 8016488:	b90e      	cbnz	r6, 801648e <calc_chksum+0x98>
		return __bswap_16((uint16_t)sum);
 801648a:	ba40      	rev16	r0, r0
 801648c:	b280      	uxth	r0, r0
}
 801648e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sum = sum_in;
 8016492:	2300      	movs	r3, #0
	if ((((uintptr_t)data & 0x01) != 0) && (pending >= 1)) {
 8016494:	2a00      	cmp	r2, #0
 8016496:	d0b6      	beq.n	8016406 <calc_chksum+0x10>
	uint16_t data16 = (uint16_t)*data;
 8016498:	f811 4b01 	ldrb.w	r4, [r1], #1
		pending--;
 801649c:	3a01      	subs	r2, #1
		sum += offset_based_swap8(data);
 801649e:	0224      	lsls	r4, r4, #8
 80164a0:	1820      	adds	r0, r4, r0
 80164a2:	f143 0300 	adc.w	r3, r3, #0
		pending--;
 80164a6:	e7ae      	b.n	8016406 <calc_chksum+0x10>
		uint64_t sum_b = p[i + 1];
 80164a8:	e955 4704 	ldrd	r4, r7, [r5, #-16]
		pending -= sizeof(uint32_t) * 4;
 80164ac:	f1ac 0c10 	sub.w	ip, ip, #16
		sum += sum_a + sum_b;
 80164b0:	19e4      	adds	r4, r4, r7
 80164b2:	f855 7c08 	ldr.w	r7, [r5, #-8]
 80164b6:	eb4e 080e 	adc.w	r8, lr, lr
 80164ba:	19e4      	adds	r4, r4, r7
		sum_b += p[i + 3];
 80164bc:	f855 7c04 	ldr.w	r7, [r5, #-4]
		sum += sum_a + sum_b;
 80164c0:	f148 0800 	adc.w	r8, r8, #0
 80164c4:	19e4      	adds	r4, r4, r7
 80164c6:	f148 0700 	adc.w	r7, r8, #0
 80164ca:	1820      	adds	r0, r4, r0
 80164cc:	eb43 0307 	adc.w	r3, r3, r7
 80164d0:	e7a7      	b.n	8016422 <calc_chksum+0x2c>
		sum = sum + p[i++];
 80164d2:	f854 5b04 	ldr.w	r5, [r4], #4
		pending -= sizeof(uint32_t);
 80164d6:	3f04      	subs	r7, #4
		sum = sum + p[i++];
 80164d8:	1828      	adds	r0, r5, r0
 80164da:	f143 0300 	adc.w	r3, r3, #0
 80164de:	e7af      	b.n	8016440 <calc_chksum+0x4a>
		sum = (sum & 0xffff) + (sum >> 16);
 80164e0:	1880      	adds	r0, r0, r2
 80164e2:	f141 0300 	adc.w	r3, r1, #0
 80164e6:	e7c7      	b.n	8016478 <calc_chksum+0x82>

080164e8 <net_calc_chksum>:
{
 80164e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164ec:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 80164f0:	4604      	mov	r4, r0
 80164f2:	095b      	lsrs	r3, r3, #5
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
 80164f4:	2b01      	cmp	r3, #1
 80164f6:	d151      	bne.n	801659c <net_calc_chksum+0xb4>
		if (proto != IPPROTO_ICMP) {
 80164f8:	2901      	cmp	r1, #1
 80164fa:	d062      	beq.n	80165c2 <net_calc_chksum+0xda>
			sum = net_pkt_get_len(pkt) -
 80164fc:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
 80164fe:	2200      	movs	r2, #0
	while (buf) {
 8016500:	2b00      	cmp	r3, #0
 8016502:	d147      	bne.n	8016594 <net_calc_chksum+0xac>
				net_pkt_ip_hdr_len(pkt) -
 8016504:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
			len = 2 * sizeof(struct in_addr);
 8016508:	f04f 0908 	mov.w	r9, #8
				net_pkt_ipv4_opts_len(pkt) + proto;
 801650c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
			sum = net_pkt_get_len(pkt) -
 8016510:	441d      	add	r5, r3
 8016512:	1b4d      	subs	r5, r1, r5
 8016514:	4415      	add	r5, r2
 8016516:	b2ad      	uxth	r5, r5
	net_pkt_cursor_init(pkt);
 8016518:	4620      	mov	r0, r4
	backup->pos = pkt->cursor.pos;
 801651a:	e9d4 8703 	ldrd	r8, r7, [r4, #12]
 801651e:	f000 ff72 	bl	8017406 <net_pkt_cursor_init>
	return pkt->overwrite;
 8016522:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
 8016526:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 801652a:	4620      	mov	r0, r4
 801652c:	f003 0601 	and.w	r6, r3, #1
	pkt->overwrite = overwrite;
 8016530:	f043 0301 	orr.w	r3, r3, #1
 8016534:	eba1 0109 	sub.w	r1, r1, r9
 8016538:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
 801653c:	f000 ffc7 	bl	80174ce <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
 8016540:	6921      	ldr	r1, [r4, #16]
 8016542:	464a      	mov	r2, r9
 8016544:	4628      	mov	r0, r5
 8016546:	f7ff ff56 	bl	80163f6 <calc_chksum>
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
 801654a:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
	sum = calc_chksum(sum, pkt->cursor.pos, len);
 801654c:	4605      	mov	r5, r0
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
 801654e:	4620      	mov	r0, r4
 8016550:	4449      	add	r1, r9
 8016552:	f000 ffbc 	bl	80174ce <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
 8016556:	68e3      	ldr	r3, [r4, #12]
 8016558:	b163      	cbz	r3, 8016574 <net_calc_chksum+0x8c>
 801655a:	6922      	ldr	r2, [r4, #16]
 801655c:	b152      	cbz	r2, 8016574 <net_calc_chksum+0x8c>
	len = cur->buf->len - (cur->pos - cur->buf->data);
 801655e:	f8b3 9010 	ldrh.w	r9, [r3, #16]
 8016562:	68db      	ldr	r3, [r3, #12]
 8016564:	1ad2      	subs	r2, r2, r3
 8016566:	eba9 0902 	sub.w	r9, r9, r2
	while (cur->buf) {
 801656a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 801656e:	f1ba 0f00 	cmp.w	sl, #0
 8016572:	d129      	bne.n	80165c8 <net_calc_chksum+0xe0>
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8016574:	2d00      	cmp	r5, #0
 8016576:	d04b      	beq.n	8016610 <net_calc_chksum+0x128>
 8016578:	ba68      	rev16	r0, r5
 801657a:	b280      	uxth	r0, r0
 801657c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	return ~sum;
 8016580:	43c0      	mvns	r0, r0
 8016582:	f366 0300 	bfi	r3, r6, #0, #1
 8016586:	b280      	uxth	r0, r0
	pkt->cursor.pos = backup->pos;
 8016588:	e9c4 8703 	strd	r8, r7, [r4, #12]
	pkt->overwrite = overwrite;
 801658c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
}
 8016590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
 8016594:	8a18      	ldrh	r0, [r3, #16]
		buf = buf->frags;
 8016596:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 8016598:	4402      	add	r2, r0
		buf = buf->frags;
 801659a:	e7b1      	b.n	8016500 <net_calc_chksum+0x18>
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 801659c:	2b02      	cmp	r3, #2
 801659e:	d13a      	bne.n	8016616 <net_calc_chksum+0x12e>
		sum =  net_pkt_get_len(pkt) -
 80165a0:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
 80165a2:	2200      	movs	r2, #0
	while (buf) {
 80165a4:	b94b      	cbnz	r3, 80165ba <net_calc_chksum+0xd2>
 80165a6:	8f65      	ldrh	r5, [r4, #58]	; 0x3a
		len = 2 * sizeof(struct in6_addr);
 80165a8:	f04f 0920 	mov.w	r9, #32
		sum =  net_pkt_get_len(pkt) -
 80165ac:	1b49      	subs	r1, r1, r5
			net_pkt_ip_hdr_len(pkt) -
 80165ae:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
		sum =  net_pkt_get_len(pkt) -
 80165b2:	1b4d      	subs	r5, r1, r5
 80165b4:	4415      	add	r5, r2
 80165b6:	b2ad      	uxth	r5, r5
 80165b8:	e7ae      	b.n	8016518 <net_calc_chksum+0x30>
		bytes += buf->len;
 80165ba:	8a18      	ldrh	r0, [r3, #16]
		buf = buf->frags;
 80165bc:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 80165be:	4402      	add	r2, r0
		buf = buf->frags;
 80165c0:	e7f0      	b.n	80165a4 <net_calc_chksum+0xbc>
	uint16_t sum = 0U;
 80165c2:	2500      	movs	r5, #0
	size_t len = 0U;
 80165c4:	46a9      	mov	r9, r5
 80165c6:	e7a7      	b.n	8016518 <net_calc_chksum+0x30>
		sum = calc_chksum(sum, cur->pos, len);
 80165c8:	4628      	mov	r0, r5
 80165ca:	464a      	mov	r2, r9
 80165cc:	6921      	ldr	r1, [r4, #16]
 80165ce:	f7ff ff12 	bl	80163f6 <calc_chksum>
		cur->buf = cur->buf->frags;
 80165d2:	f8da 3004 	ldr.w	r3, [sl, #4]
		sum = calc_chksum(sum, cur->pos, len);
 80165d6:	4605      	mov	r5, r0
		cur->buf = cur->buf->frags;
 80165d8:	60e3      	str	r3, [r4, #12]
		if (!cur->buf || !cur->buf->len) {
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d0ca      	beq.n	8016574 <net_calc_chksum+0x8c>
 80165de:	8a1a      	ldrh	r2, [r3, #16]
 80165e0:	2a00      	cmp	r2, #0
 80165e2:	d0c7      	beq.n	8016574 <net_calc_chksum+0x8c>
		cur->pos = cur->buf->data;
 80165e4:	68da      	ldr	r2, [r3, #12]
		if (len % 2) {
 80165e6:	f019 0f01 	tst.w	r9, #1
		cur->pos = cur->buf->data;
 80165ea:	6122      	str	r2, [r4, #16]
		if (len % 2) {
 80165ec:	d00d      	beq.n	801660a <net_calc_chksum+0x122>
			sum += *cur->pos;
 80165ee:	7811      	ldrb	r1, [r2, #0]
			cur->pos++;
 80165f0:	3201      	adds	r2, #1
			sum += *cur->pos;
 80165f2:	440d      	add	r5, r1
			cur->pos++;
 80165f4:	6122      	str	r2, [r4, #16]
			len = cur->buf->len - 1;
 80165f6:	f8b3 9010 	ldrh.w	r9, [r3, #16]
			sum += *cur->pos;
 80165fa:	b2ad      	uxth	r5, r5
			len = cur->buf->len - 1;
 80165fc:	f109 39ff 	add.w	r9, r9, #4294967295
			if (sum < *cur->pos) {
 8016600:	42a9      	cmp	r1, r5
				sum++;
 8016602:	bf84      	itt	hi
 8016604:	3501      	addhi	r5, #1
 8016606:	b2ad      	uxthhi	r5, r5
			len = cur->buf->len - 1;
 8016608:	e7af      	b.n	801656a <net_calc_chksum+0x82>
			len = cur->buf->len;
 801660a:	f8b3 9010 	ldrh.w	r9, [r3, #16]
 801660e:	e7ac      	b.n	801656a <net_calc_chksum+0x82>
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8016610:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016614:	e7b2      	b.n	801657c <net_calc_chksum+0x94>
		return 0;
 8016616:	2000      	movs	r0, #0
 8016618:	e7ba      	b.n	8016590 <net_calc_chksum+0xa8>

0801661a <net_calc_chksum_ipv4>:
{
 801661a:	b508      	push	{r3, lr}
			  net_pkt_ip_hdr_len(pkt) +
 801661c:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
			  net_pkt_ipv4_opts_len(pkt));
 8016620:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
	sum = calc_chksum(0, pkt->buffer->data,
 8016624:	6883      	ldr	r3, [r0, #8]
 8016626:	2000      	movs	r0, #0
 8016628:	440a      	add	r2, r1
 801662a:	68d9      	ldr	r1, [r3, #12]
 801662c:	f7ff fee3 	bl	80163f6 <calc_chksum>
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8016630:	b120      	cbz	r0, 801663c <net_calc_chksum_ipv4+0x22>
 8016632:	ba40      	rev16	r0, r0
 8016634:	b280      	uxth	r0, r0
	return ~sum;
 8016636:	43c0      	mvns	r0, r0
}
 8016638:	b280      	uxth	r0, r0
 801663a:	bd08      	pop	{r3, pc}
	sum = (sum == 0U) ? 0xffff : htons(sum);
 801663c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016640:	e7f9      	b.n	8016636 <net_calc_chksum_ipv4+0x1c>

08016642 <net_ipaddr_parse>:
{
 8016642:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016646:	460d      	mov	r5, r1
 8016648:	b08f      	sub	sp, #60	; 0x3c
 801664a:	4617      	mov	r7, r2
	if (!str || str_len == 0) {
 801664c:	4606      	mov	r6, r0
 801664e:	b370      	cbz	r0, 80166ae <net_ipaddr_parse+0x6c>
 8016650:	2900      	cmp	r1, #0
 8016652:	f000 80a9 	beq.w	80167a8 <net_ipaddr_parse+0x166>
	if (*str == '\0') {
 8016656:	7804      	ldrb	r4, [r0, #0]
 8016658:	b354      	cbz	r4, 80166b0 <net_ipaddr_parse+0x6e>
	if (*str == '[') {
 801665a:	2c5b      	cmp	r4, #91	; 0x5b
 801665c:	d012      	beq.n	8016684 <net_ipaddr_parse+0x42>
 801665e:	4602      	mov	r2, r0
	for (count = i = 0; i < str_len && str[i]; i++) {
 8016660:	2300      	movs	r3, #0
 8016662:	1808      	adds	r0, r1, r0
 8016664:	4282      	cmp	r2, r0
 8016666:	d003      	beq.n	8016670 <net_ipaddr_parse+0x2e>
 8016668:	f812 1b01 	ldrb.w	r1, [r2], #1
 801666c:	2900      	cmp	r1, #0
 801666e:	d16b      	bne.n	8016748 <net_ipaddr_parse+0x106>
	if (count == 1) {
 8016670:	2b01      	cmp	r3, #1
 8016672:	d16d      	bne.n	8016750 <net_ipaddr_parse+0x10e>
		return parse_ipv4(str, str_len, addr, true);
 8016674:	463a      	mov	r2, r7
 8016676:	4629      	mov	r1, r5
 8016678:	4630      	mov	r0, r6
}
 801667a:	b00f      	add	sp, #60	; 0x3c
 801667c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return parse_ipv4(str, str_len, addr, true);
 8016680:	f7ff be5f 	b.w	8016342 <parse_ipv4>
	len = MIN(INET6_ADDRSTRLEN, str_len);
 8016684:	292e      	cmp	r1, #46	; 0x2e
 8016686:	460b      	mov	r3, r1
	for (i = 0; i < len; i++) {
 8016688:	f04f 0400 	mov.w	r4, #0
	len = MIN(INET6_ADDRSTRLEN, str_len);
 801668c:	bf28      	it	cs
 801668e:	232e      	movcs	r3, #46	; 0x2e
	for (i = 0; i < len; i++) {
 8016690:	3401      	adds	r4, #1
 8016692:	42a3      	cmp	r3, r4
 8016694:	dc01      	bgt.n	801669a <net_ipaddr_parse+0x58>
 8016696:	461c      	mov	r4, r3
 8016698:	e002      	b.n	80166a0 <net_ipaddr_parse+0x5e>
		if (!str[i]) {
 801669a:	5d32      	ldrb	r2, [r6, r4]
 801669c:	2a00      	cmp	r2, #0
 801669e:	d1f7      	bne.n	8016690 <net_ipaddr_parse+0x4e>
		ptr = memchr(str, ']', len);
 80166a0:	4622      	mov	r2, r4
 80166a2:	215d      	movs	r1, #93	; 0x5d
 80166a4:	4630      	mov	r0, r6
 80166a6:	f7fe fafa 	bl	8014c9e <memchr>
		if (!ptr) {
 80166aa:	4680      	mov	r8, r0
 80166ac:	b920      	cbnz	r0, 80166b8 <net_ipaddr_parse+0x76>
			return false;
 80166ae:	2400      	movs	r4, #0
}
 80166b0:	4620      	mov	r0, r4
 80166b2:	b00f      	add	sp, #60	; 0x3c
 80166b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		end = MIN(len, ptr - (str + 1));
 80166b8:	1c71      	adds	r1, r6, #1
 80166ba:	eba0 0901 	sub.w	r9, r0, r1
		memcpy(ipaddr, str + 1, end);
 80166be:	a802      	add	r0, sp, #8
		end = MIN(len, ptr - (str + 1));
 80166c0:	45a1      	cmp	r9, r4
 80166c2:	bfa8      	it	ge
 80166c4:	46a1      	movge	r9, r4
	ipaddr[end] = '\0';
 80166c6:	2400      	movs	r4, #0
		memcpy(ipaddr, str + 1, end);
 80166c8:	464a      	mov	r2, r9
 80166ca:	f7fe fad4 	bl	8014c76 <memcpy>
	ipaddr[end] = '\0';
 80166ce:	f109 0338 	add.w	r3, r9, #56	; 0x38
 80166d2:	446b      	add	r3, sp
 80166d4:	f803 4c30 	strb.w	r4, [r3, #-48]
 80166d8:	2002      	movs	r0, #2
 80166da:	1d3a      	adds	r2, r7, #4
 80166dc:	a902      	add	r1, sp, #8
 80166de:	f7ff fd71 	bl	80161c4 <z_impl_net_addr_pton>
	if (ret < 0) {
 80166e2:	42a0      	cmp	r0, r4
 80166e4:	dbe3      	blt.n	80166ae <net_ipaddr_parse+0x6c>
	net_sin6(addr)->sin6_family = AF_INET6;
 80166e6:	2302      	movs	r3, #2
	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
 80166e8:	442e      	add	r6, r5
	net_sin6(addr)->sin6_family = AF_INET6;
 80166ea:	803b      	strh	r3, [r7, #0]
	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
 80166ec:	f108 0301 	add.w	r3, r8, #1
 80166f0:	42b3      	cmp	r3, r6
 80166f2:	d257      	bcs.n	80167a4 <net_ipaddr_parse+0x162>
 80166f4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80166f8:	2a3a      	cmp	r2, #58	; 0x3a
 80166fa:	d153      	bne.n	80167a4 <net_ipaddr_parse+0x162>
		len = str_len - end - 1 - 2;
 80166fc:	3d03      	subs	r5, #3
		ptr += 2;
 80166fe:	f108 0102 	add.w	r1, r8, #2
		len = str_len - end - 1 - 2;
 8016702:	eba5 0909 	sub.w	r9, r5, r9
		for (i = 0; i < len; i++) {
 8016706:	45a1      	cmp	r9, r4
 8016708:	dc18      	bgt.n	801673c <net_ipaddr_parse+0xfa>
 801670a:	464c      	mov	r4, r9
		memcpy(ipaddr, ptr, len);
 801670c:	4622      	mov	r2, r4
 801670e:	a802      	add	r0, sp, #8
 8016710:	f7fe fab1 	bl	8014c76 <memcpy>
		ipaddr[len] = '\0';
 8016714:	f104 0338 	add.w	r3, r4, #56	; 0x38
		ret = convert_port(ipaddr, &port);
 8016718:	f10d 0106 	add.w	r1, sp, #6
 801671c:	a802      	add	r0, sp, #8
		ipaddr[len] = '\0';
 801671e:	eb0d 0403 	add.w	r4, sp, r3
 8016722:	2300      	movs	r3, #0
 8016724:	f804 3c30 	strb.w	r3, [r4, #-48]
		ret = convert_port(ipaddr, &port);
 8016728:	f7ff fd14 	bl	8016154 <convert_port>
		if (!ret) {
 801672c:	4604      	mov	r4, r0
 801672e:	2800      	cmp	r0, #0
 8016730:	d0bd      	beq.n	80166ae <net_ipaddr_parse+0x6c>
		net_sin6(addr)->sin6_port = htons(port);
 8016732:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016736:	ba5b      	rev16	r3, r3
 8016738:	807b      	strh	r3, [r7, #2]
	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
 801673a:	e7b9      	b.n	80166b0 <net_ipaddr_parse+0x6e>
			if (!ptr[i]) {
 801673c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8016740:	2a00      	cmp	r2, #0
 8016742:	d0e3      	beq.n	801670c <net_ipaddr_parse+0xca>
		for (i = 0; i < len; i++) {
 8016744:	3401      	adds	r4, #1
 8016746:	e7de      	b.n	8016706 <net_ipaddr_parse+0xc4>
		if (str[i] == ':') {
 8016748:	293a      	cmp	r1, #58	; 0x3a
			count++;
 801674a:	bf08      	it	eq
 801674c:	3301      	addeq	r3, #1
	for (count = i = 0; i < str_len && str[i]; i++) {
 801674e:	e789      	b.n	8016664 <net_ipaddr_parse+0x22>
	if (!parse_ipv4(str, str_len, addr, false)) {
 8016750:	2300      	movs	r3, #0
 8016752:	463a      	mov	r2, r7
 8016754:	4629      	mov	r1, r5
 8016756:	4630      	mov	r0, r6
 8016758:	f7ff fdf3 	bl	8016342 <parse_ipv4>
 801675c:	4604      	mov	r4, r0
 801675e:	2800      	cmp	r0, #0
 8016760:	d1a6      	bne.n	80166b0 <net_ipaddr_parse+0x6e>
	len = MIN(INET6_ADDRSTRLEN, str_len);
 8016762:	2d2e      	cmp	r5, #46	; 0x2e
	for (i = 0; i < len; i++) {
 8016764:	4680      	mov	r8, r0
	len = MIN(INET6_ADDRSTRLEN, str_len);
 8016766:	bf28      	it	cs
 8016768:	252e      	movcs	r5, #46	; 0x2e
		if (!str[i]) {
 801676a:	f816 3008 	ldrb.w	r3, [r6, r8]
 801676e:	b123      	cbz	r3, 801677a <net_ipaddr_parse+0x138>
	for (i = 0; i < len; i++) {
 8016770:	f108 0801 	add.w	r8, r8, #1
 8016774:	4545      	cmp	r5, r8
 8016776:	dcf8      	bgt.n	801676a <net_ipaddr_parse+0x128>
 8016778:	46a8      	mov	r8, r5
		memcpy(ipaddr, str, end);
 801677a:	4642      	mov	r2, r8
 801677c:	4631      	mov	r1, r6
 801677e:	a802      	add	r0, sp, #8
 8016780:	f7fe fa79 	bl	8014c76 <memcpy>
	ipaddr[end] = '\0';
 8016784:	f108 0338 	add.w	r3, r8, #56	; 0x38
 8016788:	eb0d 0803 	add.w	r8, sp, r3
 801678c:	2300      	movs	r3, #0
 801678e:	f808 3c30 	strb.w	r3, [r8, #-48]
 8016792:	2002      	movs	r0, #2
 8016794:	1d3a      	adds	r2, r7, #4
 8016796:	a902      	add	r1, sp, #8
 8016798:	f7ff fd14 	bl	80161c4 <z_impl_net_addr_pton>
	if (ret < 0) {
 801679c:	2800      	cmp	r0, #0
 801679e:	db87      	blt.n	80166b0 <net_ipaddr_parse+0x6e>
	net_sin6(addr)->sin6_family = AF_INET6;
 80167a0:	2302      	movs	r3, #2
 80167a2:	803b      	strh	r3, [r7, #0]
		return true;
 80167a4:	2401      	movs	r4, #1
		return parse_ipv6(str, str_len, addr, false);
 80167a6:	e783      	b.n	80166b0 <net_ipaddr_parse+0x6e>
		return false;
 80167a8:	460c      	mov	r4, r1
 80167aa:	e781      	b.n	80166b0 <net_ipaddr_parse+0x6e>

080167ac <k_mutex_unlock.isra.0>:
 80167ac:	f7fb bbb6 	b.w	8011f1c <z_impl_k_mutex_unlock>

080167b0 <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 80167b0:	6800      	ldr	r0, [r0, #0]
 80167b2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 80167b6:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
 80167ba:	4258      	negs	r0, r3
 80167bc:	4158      	adcs	r0, r3
 80167be:	4770      	bx	lr

080167c0 <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80167c0:	6802      	ldr	r2, [r0, #0]
{
 80167c2:	4603      	mov	r3, r0
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80167c4:	b942      	cbnz	r2, 80167d8 <net_ipv6_is_addr_unspecified+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80167c6:	6840      	ldr	r0, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80167c8:	b940      	cbnz	r0, 80167dc <net_ipv6_is_addr_unspecified+0x1c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80167ca:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80167cc:	b93a      	cbnz	r2, 80167de <net_ipv6_is_addr_unspecified+0x1e>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 80167ce:	68d8      	ldr	r0, [r3, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80167d0:	fab0 f080 	clz	r0, r0
 80167d4:	0940      	lsrs	r0, r0, #5
 80167d6:	4770      	bx	lr
 80167d8:	2000      	movs	r0, #0
 80167da:	4770      	bx	lr
 80167dc:	4610      	mov	r0, r2
}
 80167de:	4770      	bx	lr

080167e0 <context_write_data>:
{
 80167e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e4:	4680      	mov	r8, r0
 80167e6:	4615      	mov	r5, r2
	if (msghdr) {
 80167e8:	461e      	mov	r6, r3
 80167ea:	b9d3      	cbnz	r3, 8016822 <context_write_data+0x42>
}
 80167ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ret = net_pkt_write(pkt, buf, buf_len);
 80167f0:	f001 b87f 	b.w	80178f2 <net_pkt_write>
			int len = MIN(msghdr->msg_iov[i].iov_len, buf_len);
 80167f4:	68b3      	ldr	r3, [r6, #8]
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
 80167f6:	4640      	mov	r0, r8
			int len = MIN(msghdr->msg_iov[i].iov_len, buf_len);
 80167f8:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
 80167fc:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
			int len = MIN(msghdr->msg_iov[i].iov_len, buf_len);
 8016800:	6857      	ldr	r7, [r2, #4]
 8016802:	42af      	cmp	r7, r5
 8016804:	bf28      	it	cs
 8016806:	462f      	movcs	r7, r5
			ret = net_pkt_write(pkt, msghdr->msg_iov[i].iov_base,
 8016808:	463a      	mov	r2, r7
 801680a:	f001 f872 	bl	80178f2 <net_pkt_write>
			if (ret < 0) {
 801680e:	2800      	cmp	r0, #0
 8016810:	db05      	blt.n	801681e <context_write_data+0x3e>
			if (buf_len == 0) {
 8016812:	1bed      	subs	r5, r5, r7
 8016814:	d003      	beq.n	801681e <context_write_data+0x3e>
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 8016816:	3401      	adds	r4, #1
 8016818:	68f3      	ldr	r3, [r6, #12]
 801681a:	42a3      	cmp	r3, r4
 801681c:	d8ea      	bhi.n	80167f4 <context_write_data+0x14>
}
 801681e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 8016822:	2400      	movs	r4, #0
	int ret = 0;
 8016824:	4620      	mov	r0, r4
 8016826:	e7f7      	b.n	8016818 <context_write_data+0x38>

08016828 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8016828:	f7fb bafe 	b.w	8011e28 <z_impl_k_mutex_lock>

0801682c <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 801682c:	f7fb bb76 	b.w	8011f1c <z_impl_k_mutex_unlock>

08016830 <net_context_unref>:
{
 8016830:	b538      	push	{r3, r4, r5, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8016832:	f3bf 8f5b 	dmb	ish
 8016836:	4604      	mov	r4, r0
 8016838:	f100 0308 	add.w	r3, r0, #8
 801683c:	e853 0f00 	ldrex	r0, [r3]
 8016840:	1e42      	subs	r2, r0, #1
 8016842:	e843 2100 	strex	r1, r2, [r3]
 8016846:	2900      	cmp	r1, #0
 8016848:	d1f8      	bne.n	801683c <net_context_unref+0xc>
	if (old_rc != 1) {
 801684a:	2801      	cmp	r0, #1
 801684c:	f3bf 8f5b 	dmb	ish
 8016850:	d001      	beq.n	8016856 <net_context_unref+0x26>
		return old_rc - 1;
 8016852:	3801      	subs	r0, #1
}
 8016854:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_lock(&context->lock, K_FOREVER);
 8016856:	f104 050c 	add.w	r5, r4, #12
 801685a:	f04f 32ff 	mov.w	r2, #4294967295
 801685e:	f04f 33ff 	mov.w	r3, #4294967295
 8016862:	4628      	mov	r0, r5
 8016864:	f7ff ffe0 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
	if (context->conn_handler) {
 8016868:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801686a:	b118      	cbz	r0, 8016874 <net_context_unref+0x44>
			net_conn_unregister(context->conn_handler);
 801686c:	f7f0 fe2c 	bl	80074c8 <net_conn_unregister>
		context->conn_handler = NULL;
 8016870:	2300      	movs	r3, #0
 8016872:	6463      	str	r3, [r4, #68]	; 0x44
	context->flags &= ~NET_CONTEXT_IN_USE;
 8016874:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
	k_mutex_unlock(&context->lock);
 8016878:	4628      	mov	r0, r5
	context->flags &= ~NET_CONTEXT_IN_USE;
 801687a:	f023 0307 	bic.w	r3, r3, #7
 801687e:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	k_mutex_unlock(&context->lock);
 8016882:	f7ff ffd3 	bl	801682c <k_mutex_unlock.isra.0>
	return 0;
 8016886:	2000      	movs	r0, #0
 8016888:	e7e4      	b.n	8016854 <net_context_unref+0x24>

0801688a <net_context_bind>:
{
 801688a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (context->conn_handler) {
 801688c:	6c44      	ldr	r4, [r0, #68]	; 0x44
{
 801688e:	4605      	mov	r5, r0
 8016890:	460e      	mov	r6, r1
	if (context->conn_handler) {
 8016892:	2c00      	cmp	r4, #0
 8016894:	f040 809e 	bne.w	80169d4 <net_context_bind+0x14a>
	if (IS_ENABLED(CONFIG_NET_IPV6) && addr->sa_family == AF_INET6) {
 8016898:	880b      	ldrh	r3, [r1, #0]
 801689a:	2b02      	cmp	r3, #2
 801689c:	d14f      	bne.n	801693e <net_context_bind+0xb4>
		if (addrlen < sizeof(struct sockaddr_in6)) {
 801689e:	2a17      	cmp	r2, #23
		struct net_if *iface = NULL;
 80168a0:	9401      	str	r4, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
 80168a2:	f240 809a 	bls.w	80169da <net_context_bind+0x150>
		if (net_context_is_bound_to_iface(context)) {
 80168a6:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
 80168aa:	051a      	lsls	r2, r3, #20
 80168ac:	d504      	bpl.n	80168b8 <net_context_bind+0x2e>
	return net_if_get_by_index(context->iface);
 80168ae:	f990 0076 	ldrsb.w	r0, [r0, #118]	; 0x76
 80168b2:	f7ee fc0f 	bl	80050d4 <z_impl_net_if_get_by_index>
			iface = net_context_get_iface(context);
 80168b6:	9001      	str	r0, [sp, #4]
		if (net_ipv6_is_addr_mcast(&addr6->sin6_addr)) {
 80168b8:	7933      	ldrb	r3, [r6, #4]
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
 80168ba:	1d37      	adds	r7, r6, #4
		if (net_ipv6_is_addr_mcast(&addr6->sin6_addr)) {
 80168bc:	2bff      	cmp	r3, #255	; 0xff
 80168be:	d107      	bne.n	80168d0 <net_context_bind+0x46>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
 80168c0:	a901      	add	r1, sp, #4
 80168c2:	4638      	mov	r0, r7
 80168c4:	f7ef f8da 	bl	8005a7c <net_if_ipv6_maddr_lookup>
			if (!ifaddr) {
 80168c8:	2800      	cmp	r0, #0
 80168ca:	d050      	beq.n	801696e <net_context_bind+0xe4>
			ptr = &ifaddr->address.in6_addr;
 80168cc:	1d04      	adds	r4, r0, #4
 80168ce:	e00d      	b.n	80168ec <net_context_bind+0x62>
		} else if (net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
 80168d0:	4638      	mov	r0, r7
 80168d2:	f7ff ff75 	bl	80167c0 <net_ipv6_is_addr_unspecified>
			if (iface == NULL) {
 80168d6:	9b01      	ldr	r3, [sp, #4]
		} else if (net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
 80168d8:	b350      	cbz	r0, 8016930 <net_context_bind+0xa6>
			if (iface == NULL) {
 80168da:	b923      	cbnz	r3, 80168e6 <net_context_bind+0x5c>
				iface = net_if_ipv6_select_src_iface(
 80168dc:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80168e0:	f7ff faa5 	bl	8015e2e <net_if_ipv6_select_src_iface>
 80168e4:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
 80168e6:	f7ef ff7f 	bl	80067e8 <net_ipv6_unspecified_address>
 80168ea:	4604      	mov	r4, r0
		if (!iface) {
 80168ec:	9b01      	ldr	r3, [sp, #4]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d06d      	beq.n	80169ce <net_context_bind+0x144>
		k_mutex_lock(&context->lock, K_FOREVER);
 80168f2:	f105 070c 	add.w	r7, r5, #12
 80168f6:	f04f 32ff 	mov.w	r2, #4294967295
 80168fa:	f04f 33ff 	mov.w	r3, #4294967295
 80168fe:	4638      	mov	r0, r7
 8016900:	f7ff ff92 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
	context->iface = net_if_get_by_iface(iface);
 8016904:	9801      	ldr	r0, [sp, #4]
 8016906:	f7ef fcff 	bl	8006308 <net_if_get_by_iface>
 801690a:	f885 0076 	strb.w	r0, [r5, #118]	; 0x76
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
 801690e:	2002      	movs	r0, #2
		net_sin_ptr(&context->local)->sin_family = AF_INET;
 8016910:	8428      	strh	r0, [r5, #32]
		net_sin_ptr(&context->local)->sin_addr = ptr;
 8016912:	626c      	str	r4, [r5, #36]	; 0x24
		if (addr4->sin_port) {
 8016914:	8871      	ldrh	r1, [r6, #2]
 8016916:	2900      	cmp	r1, #0
 8016918:	d055      	beq.n	80169c6 <net_context_bind+0x13c>
			ret = check_used_port(AF_INET, addr4->sin_port,
 801691a:	4632      	mov	r2, r6
 801691c:	f7f0 f882 	bl	8006a24 <check_used_port>
			if (!ret) {
 8016920:	4604      	mov	r4, r0
 8016922:	b908      	cbnz	r0, 8016928 <net_context_bind+0x9e>
					addr4->sin_port;
 8016924:	8873      	ldrh	r3, [r6, #2]
				net_sin_ptr(&context->local)->sin_port =
 8016926:	846b      	strh	r3, [r5, #34]	; 0x22
		k_mutex_unlock(&context->lock);
 8016928:	4638      	mov	r0, r7
 801692a:	f7ff ff7f 	bl	801682c <k_mutex_unlock.isra.0>
		return ret;
 801692e:	e020      	b.n	8016972 <net_context_bind+0xe8>
			ifaddr = net_if_ipv6_addr_lookup(
 8016930:	b903      	cbnz	r3, 8016934 <net_context_bind+0xaa>
 8016932:	ac01      	add	r4, sp, #4
 8016934:	4621      	mov	r1, r4
 8016936:	4638      	mov	r0, r7
 8016938:	f7ee fd28 	bl	800538c <net_if_ipv6_addr_lookup>
 801693c:	e7c4      	b.n	80168c8 <net_context_bind+0x3e>
	if (IS_ENABLED(CONFIG_NET_IPV4) && addr->sa_family == AF_INET) {
 801693e:	2b01      	cmp	r3, #1
 8016940:	d14b      	bne.n	80169da <net_context_bind+0x150>
		if (addrlen < sizeof(struct sockaddr_in)) {
 8016942:	2a07      	cmp	r2, #7
		struct net_if *iface = NULL;
 8016944:	9401      	str	r4, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in)) {
 8016946:	d948      	bls.n	80169da <net_context_bind+0x150>
		if (net_context_is_bound_to_iface(context)) {
 8016948:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
 801694c:	051b      	lsls	r3, r3, #20
 801694e:	d504      	bpl.n	801695a <net_context_bind+0xd0>
	return net_if_get_by_index(context->iface);
 8016950:	f990 0076 	ldrsb.w	r0, [r0, #118]	; 0x76
 8016954:	f7ee fbbe 	bl	80050d4 <z_impl_net_if_get_by_index>
			iface = net_context_get_iface(context);
 8016958:	9001      	str	r0, [sp, #4]
		if (net_ipv4_is_addr_mcast(&addr4->sin_addr)) {
 801695a:	1d32      	adds	r2, r6, #4
 801695c:	4610      	mov	r0, r2
 801695e:	f7ff ff27 	bl	80167b0 <net_ipv4_is_addr_mcast>
 8016962:	b148      	cbz	r0, 8016978 <net_context_bind+0xee>
			maddr = net_if_ipv4_maddr_lookup(&addr4->sin_addr,
 8016964:	a901      	add	r1, sp, #4
 8016966:	4610      	mov	r0, r2
 8016968:	f7ef fc2c 	bl	80061c4 <net_if_ipv4_maddr_lookup>
			if (!maddr) {
 801696c:	bb48      	cbnz	r0, 80169c2 <net_context_bind+0x138>
				return -ENOENT;
 801696e:	f06f 0401 	mvn.w	r4, #1
}
 8016972:	4620      	mov	r0, r4
 8016974:	b003      	add	sp, #12
 8016976:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (addr4->sin_addr.s_addr == INADDR_ANY) {
 8016978:	6871      	ldr	r1, [r6, #4]
			if (iface == NULL) {
 801697a:	9b01      	ldr	r3, [sp, #4]
		} else if (addr4->sin_addr.s_addr == INADDR_ANY) {
 801697c:	b9d1      	cbnz	r1, 80169b4 <net_context_bind+0x12a>
			if (iface == NULL) {
 801697e:	b923      	cbnz	r3, 801698a <net_context_bind+0x100>
				iface = net_if_ipv4_select_src_iface(
 8016980:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8016984:	f7ef fb1a 	bl	8005fbc <net_if_ipv4_select_src_iface>
 8016988:	9001      	str	r0, [sp, #4]
			ptr = (struct in_addr *)net_ipv4_unspecified_address();
 801698a:	f7ef ff25 	bl	80067d8 <net_ipv4_unspecified_address>
 801698e:	4604      	mov	r4, r0
		if (!iface) {
 8016990:	9b01      	ldr	r3, [sp, #4]
 8016992:	b1e3      	cbz	r3, 80169ce <net_context_bind+0x144>
		k_mutex_lock(&context->lock, K_FOREVER);
 8016994:	f105 070c 	add.w	r7, r5, #12
 8016998:	f04f 32ff 	mov.w	r2, #4294967295
 801699c:	f04f 33ff 	mov.w	r3, #4294967295
 80169a0:	4638      	mov	r0, r7
 80169a2:	f7ff ff41 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
	context->iface = net_if_get_by_iface(iface);
 80169a6:	9801      	ldr	r0, [sp, #4]
 80169a8:	f7ef fcae 	bl	8006308 <net_if_get_by_iface>
 80169ac:	f885 0076 	strb.w	r0, [r5, #118]	; 0x76
		net_sin_ptr(&context->local)->sin_family = AF_INET;
 80169b0:	2001      	movs	r0, #1
 80169b2:	e7ad      	b.n	8016910 <net_context_bind+0x86>
			ifaddr = net_if_ipv4_addr_lookup(
 80169b4:	b903      	cbnz	r3, 80169b8 <net_context_bind+0x12e>
 80169b6:	ac01      	add	r4, sp, #4
 80169b8:	4621      	mov	r1, r4
 80169ba:	4610      	mov	r0, r2
 80169bc:	f7ef fb62 	bl	8006084 <net_if_ipv4_addr_lookup>
 80169c0:	e7d4      	b.n	801696c <net_context_bind+0xe2>
			ptr = &ifaddr->address.in_addr;
 80169c2:	1d04      	adds	r4, r0, #4
 80169c4:	e7e4      	b.n	8016990 <net_context_bind+0x106>
				net_sin_ptr(&context->local)->sin_port;
 80169c6:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
		ret = 0;
 80169c8:	460c      	mov	r4, r1
			addr4->sin_port =
 80169ca:	8073      	strh	r3, [r6, #2]
 80169cc:	e7ac      	b.n	8016928 <net_context_bind+0x9e>
			return -EADDRNOTAVAIL;
 80169ce:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 80169d2:	e7ce      	b.n	8016972 <net_context_bind+0xe8>
		return -EISCONN;
 80169d4:	f06f 047e 	mvn.w	r4, #126	; 0x7e
 80169d8:	e7cb      	b.n	8016972 <net_context_bind+0xe8>
	return -EINVAL;
 80169da:	f06f 0415 	mvn.w	r4, #21
 80169de:	e7c8      	b.n	8016972 <net_context_bind+0xe8>

080169e0 <bind_default>:
{
 80169e0:	b510      	push	{r4, lr}
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 80169e2:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
 80169e6:	b086      	sub	sp, #24
 80169e8:	4604      	mov	r4, r0
 80169ea:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 80169ee:	2b02      	cmp	r3, #2
 80169f0:	d117      	bne.n	8016a22 <bind_default+0x42>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
 80169f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80169f4:	bb1a      	cbnz	r2, 8016a3e <bind_default+0x5e>
		addr6.sin6_family = AF_INET6;
 80169f6:	f8ad 3000 	strh.w	r3, [sp]
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
 80169fa:	f7ef fef5 	bl	80067e8 <net_ipv6_unspecified_address>
 80169fe:	2210      	movs	r2, #16
 8016a00:	4601      	mov	r1, r0
 8016a02:	a801      	add	r0, sp, #4
 8016a04:	f7fe f937 	bl	8014c76 <memcpy>
			find_available_port(context,
 8016a08:	4669      	mov	r1, sp
 8016a0a:	4620      	mov	r0, r4
 8016a0c:	f7f0 f840 	bl	8006a90 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr6,
 8016a10:	2218      	movs	r2, #24
		addr6.sin6_port =
 8016a12:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr4,
 8016a16:	4669      	mov	r1, sp
 8016a18:	4620      	mov	r0, r4
 8016a1a:	f7ff ff36 	bl	801688a <net_context_bind>
}
 8016a1e:	b006      	add	sp, #24
 8016a20:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 8016a22:	2b01      	cmp	r3, #1
 8016a24:	d10d      	bne.n	8016a42 <bind_default+0x62>
		if (net_sin_ptr(&context->local)->sin_addr) {
 8016a26:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8016a28:	b94a      	cbnz	r2, 8016a3e <bind_default+0x5e>
			find_available_port(context,
 8016a2a:	4669      	mov	r1, sp
		addr4.sin_addr.s_addr = INADDR_ANY;
 8016a2c:	9201      	str	r2, [sp, #4]
		addr4.sin_family = AF_INET;
 8016a2e:	f8ad 3000 	strh.w	r3, [sp]
			find_available_port(context,
 8016a32:	f7f0 f82d 	bl	8006a90 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr4,
 8016a36:	2208      	movs	r2, #8
		addr4.sin_port =
 8016a38:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr4,
 8016a3c:	e7eb      	b.n	8016a16 <bind_default+0x36>
			return 0;
 8016a3e:	2000      	movs	r0, #0
 8016a40:	e7ed      	b.n	8016a1e <bind_default+0x3e>
	return -EINVAL;
 8016a42:	f06f 0015 	mvn.w	r0, #21
 8016a46:	e7ea      	b.n	8016a1e <bind_default+0x3e>

08016a48 <net_context_listen>:
{
 8016a48:	b538      	push	{r3, r4, r5, lr}
	return context->flags & NET_CONTEXT_IN_USE;
 8016a4a:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
 8016a4e:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
 8016a50:	07db      	lsls	r3, r3, #31
 8016a52:	d517      	bpl.n	8016a84 <net_context_listen+0x3c>
	k_mutex_lock(&context->lock, K_FOREVER);
 8016a54:	f100 050c 	add.w	r5, r0, #12
 8016a58:	f04f 32ff 	mov.w	r2, #4294967295
 8016a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8016a60:	4628      	mov	r0, r5
 8016a62:	f7ff fee1 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
	if (net_tcp_listen(context) >= 0) {
 8016a66:	4620      	mov	r0, r4
 8016a68:	f002 ff8a 	bl	8019980 <net_tcp_listen>
 8016a6c:	2800      	cmp	r0, #0
		k_mutex_unlock(&context->lock);
 8016a6e:	4628      	mov	r0, r5
	if (net_tcp_listen(context) >= 0) {
 8016a70:	db03      	blt.n	8016a7a <net_context_listen+0x32>
		k_mutex_unlock(&context->lock);
 8016a72:	f7ff fedb 	bl	801682c <k_mutex_unlock.isra.0>
		return 0;
 8016a76:	2000      	movs	r0, #0
}
 8016a78:	bd38      	pop	{r3, r4, r5, pc}
	k_mutex_unlock(&context->lock);
 8016a7a:	f7ff fed7 	bl	801682c <k_mutex_unlock.isra.0>
	return -EOPNOTSUPP;
 8016a7e:	f06f 005e 	mvn.w	r0, #94	; 0x5e
 8016a82:	e7f9      	b.n	8016a78 <net_context_listen+0x30>
		return -EBADF;
 8016a84:	f06f 0008 	mvn.w	r0, #8
 8016a88:	e7f6      	b.n	8016a78 <net_context_listen+0x30>

08016a8a <net_context_create_ipv4_new>:
{
 8016a8a:	b570      	push	{r4, r5, r6, lr}
 8016a8c:	460c      	mov	r4, r1
 8016a8e:	4605      	mov	r5, r0
 8016a90:	461e      	mov	r6, r3
	if (!src) {
 8016a92:	4611      	mov	r1, r2
 8016a94:	b902      	cbnz	r2, 8016a98 <net_context_create_ipv4_new+0xe>
		src = ((struct sockaddr_in_ptr *)&context->local)->sin_addr;
 8016a96:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return UNALIGNED_GET(&addr->s_addr) == 0;
 8016a98:	680b      	ldr	r3, [r1, #0]
	if (net_ipv4_is_addr_unspecified(src)
 8016a9a:	b11b      	cbz	r3, 8016aa4 <net_context_create_ipv4_new+0x1a>
	    || net_ipv4_is_addr_mcast(src)) {
 8016a9c:	4608      	mov	r0, r1
 8016a9e:	f7ff fe87 	bl	80167b0 <net_ipv4_is_addr_mcast>
 8016aa2:	b130      	cbz	r0, 8016ab2 <net_context_create_ipv4_new+0x28>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
 8016aa4:	4631      	mov	r1, r6
 8016aa6:	69a0      	ldr	r0, [r4, #24]
 8016aa8:	f7ef faa0 	bl	8005fec <net_if_ipv4_select_src_addr>
 8016aac:	6803      	ldr	r3, [r0, #0]
 8016aae:	4601      	mov	r1, r0
		if (net_ipv4_is_addr_unspecified(src)) {
 8016ab0:	b1eb      	cbz	r3, 8016aee <net_context_create_ipv4_new+0x64>
	return context->ipv4_ttl;
 8016ab2:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
	return net_ipv4_create(pkt, src, dst);
 8016ab6:	4632      	mov	r2, r6
	pkt->ip_dscp = dscp;
 8016ab8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
	pkt->ipv4_ttl = ttl;
 8016abc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 *
 * @return Decoded DSCP value.
 */
static inline uint8_t net_ipv4_get_dscp(uint8_t tos)
{
	return (tos & NET_IPV4_DSCP_MASK) >> NET_IPV4_DSCP_OFFSET;
 8016ac0:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8016ac4:	089b      	lsrs	r3, r3, #2
	pkt->ip_dscp = dscp;
 8016ac6:	f363 0005 	bfi	r0, r3, #0, #6
 8016aca:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
	pkt->ip_ecn = ecn;
 8016ace:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8016ad2:	f363 1087 	bfi	r0, r3, #6, #2
 8016ad6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8016ada:	4620      	mov	r0, r4
 *
 * @param dscp DSCP value.
 */
static inline uint8_t net_ipv4_dscp_to_priority(uint8_t dscp)
{
	return dscp >> 3;
 8016adc:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8016ae0:	095b      	lsrs	r3, r3, #5
	pkt->priority = priority;
 8016ae2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8016ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_ipv4_create(pkt, src, dst);
 8016aea:	f001 ba83 	b.w	8017ff4 <net_ipv4_create>
}
 8016aee:	f06f 0015 	mvn.w	r0, #21
 8016af2:	bd70      	pop	{r4, r5, r6, pc}

08016af4 <net_context_create_ipv6_new>:
{
 8016af4:	b570      	push	{r4, r5, r6, lr}
 8016af6:	460c      	mov	r4, r1
 8016af8:	4605      	mov	r5, r0
 8016afa:	461e      	mov	r6, r3
	if (!src) {
 8016afc:	4611      	mov	r1, r2
 8016afe:	b902      	cbnz	r2, 8016b02 <net_context_create_ipv6_new+0xe>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
 8016b00:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (net_ipv6_is_addr_unspecified(src)
 8016b02:	4608      	mov	r0, r1
 8016b04:	f7ff fe5c 	bl	80167c0 <net_ipv6_is_addr_unspecified>
 8016b08:	b910      	cbnz	r0, 8016b10 <net_context_create_ipv6_new+0x1c>
	    || net_ipv6_is_addr_mcast(src)) {
 8016b0a:	780b      	ldrb	r3, [r1, #0]
 8016b0c:	2bff      	cmp	r3, #255	; 0xff
 8016b0e:	d104      	bne.n	8016b1a <net_context_create_ipv6_new+0x26>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
 8016b10:	4631      	mov	r1, r6
 8016b12:	69a0      	ldr	r0, [r4, #24]
 8016b14:	f7ef f9be 	bl	8005e94 <net_if_ipv6_select_src_addr>
 8016b18:	4601      	mov	r1, r0

static inline uint8_t net_context_get_ipv6_hop_limit(struct net_context *context)
{
	return context->ipv6_hop_limit;
 8016b1a:	f895 3077 	ldrb.w	r3, [r5, #119]	; 0x77
	return net_ipv6_create(pkt, src, dst);
 8016b1e:	4632      	mov	r2, r6
	pkt->ip_dscp = dscp;
 8016b20:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
	pkt->ipv6_hop_limit = hop_limit;
 8016b24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return (tc & NET_IPV6_DSCP_MASK) >> NET_IPV6_DSCP_OFFSET;
 8016b28:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8016b2c:	089b      	lsrs	r3, r3, #2
	pkt->ip_dscp = dscp;
 8016b2e:	f363 0005 	bfi	r0, r3, #0, #6
 8016b32:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
	pkt->ip_ecn = ecn;
 8016b36:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8016b3a:	f363 1087 	bfi	r0, r3, #6, #2
 8016b3e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8016b42:	4620      	mov	r0, r4
 *
 * @param dscp DSCP value.
 */
static inline uint8_t net_ipv6_dscp_to_priority(uint8_t dscp)
{
	return dscp >> 3;
 8016b44:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8016b48:	095b      	lsrs	r3, r3, #5
	pkt->priority = priority;
 8016b4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8016b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_ipv6_create(pkt, src, dst);
 8016b52:	f001 bdac 	b.w	80186ae <net_ipv6_create>

08016b56 <context_sendto.constprop.0>:
static int context_sendto(struct net_context *context,
 8016b56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b5a:	468b      	mov	fp, r1
	return context->flags & NET_CONTEXT_IN_USE;
 8016b5c:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
 8016b60:	4616      	mov	r6, r2
 8016b62:	461c      	mov	r4, r3
	if (!net_context_is_used(context)) {
 8016b64:	07cd      	lsls	r5, r1, #31
static int context_sendto(struct net_context *context,
 8016b66:	4607      	mov	r7, r0
 8016b68:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8016b6c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8016b70:	e9dd 380c 	ldrd	r3, r8, [sp, #48]	; 0x30
	if (!net_context_is_used(context)) {
 8016b74:	f140 8120 	bpl.w	8016db8 <context_sendto.constprop.0+0x262>
	if (sendto && addrlen == 0 && dst_addr == NULL && buf != NULL) {
 8016b78:	b13a      	cbz	r2, 8016b8a <context_sendto.constprop.0+0x34>
 8016b7a:	b933      	cbnz	r3, 8016b8a <context_sendto.constprop.0+0x34>
 8016b7c:	b93c      	cbnz	r4, 8016b8e <context_sendto.constprop.0+0x38>
 8016b7e:	f1bb 0f00 	cmp.w	fp, #0
 8016b82:	d14e      	bne.n	8016c22 <context_sendto.constprop.0+0xcc>
		return -EDESTADDRREQ;
 8016b84:	f06f 0478 	mvn.w	r4, #120	; 0x78
 8016b88:	e07d      	b.n	8016c86 <context_sendto.constprop.0+0x130>
	if (!msghdr && !dst_addr) {
 8016b8a:	2c00      	cmp	r4, #0
 8016b8c:	d0fa      	beq.n	8016b84 <context_sendto.constprop.0+0x2e>
 8016b8e:	f04f 0a00 	mov.w	sl, #0
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8016b92:	f3c1 02c2 	ubfx	r2, r1, #3, #3
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8016b96:	2a02      	cmp	r2, #2
 8016b98:	d14a      	bne.n	8016c30 <context_sendto.constprop.0+0xda>
		if (msghdr) {
 8016b9a:	f1ba 0f00 	cmp.w	sl, #0
 8016b9e:	d042      	beq.n	8016c26 <context_sendto.constprop.0+0xd0>
			addrlen = msghdr->msg_namelen;
 8016ba0:	e9da 4300 	ldrd	r4, r3, [sl]
			if (!addr6) {
 8016ba4:	2c00      	cmp	r4, #0
 8016ba6:	d13e      	bne.n	8016c26 <context_sendto.constprop.0+0xd0>
				addr6 = net_sin6(&context->remote);
 8016ba8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
		if (net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
 8016bac:	1d25      	adds	r5, r4, #4
 8016bae:	4628      	mov	r0, r5
 8016bb0:	f7ff fe06 	bl	80167c0 <net_ipv6_is_addr_unspecified>
 8016bb4:	2800      	cmp	r0, #0
 8016bb6:	d1e5      	bne.n	8016b84 <context_sendto.constprop.0+0x2e>
		if (net_ipv6_is_addr_unspecified(
 8016bb8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8016bbc:	f7ff fe00 	bl	80167c0 <net_ipv6_is_addr_unspecified>
 8016bc0:	b140      	cbz	r0, 8016bd4 <context_sendto.constprop.0+0x7e>
				&net_sin6(&context->remote)->sin6_addr) &&
 8016bc2:	0508      	lsls	r0, r1, #20
 8016bc4:	d406      	bmi.n	8016bd4 <context_sendto.constprop.0+0x7e>
			iface = net_if_ipv6_select_src_iface(&addr6->sin6_addr);
 8016bc6:	4628      	mov	r0, r5
 8016bc8:	f7ff f931 	bl	8015e2e <net_if_ipv6_select_src_iface>
	context->iface = net_if_get_by_iface(iface);
 8016bcc:	f7ef fb9c 	bl	8006308 <net_if_get_by_iface>
 8016bd0:	f887 0076 	strb.w	r0, [r7, #118]	; 0x76
	if (msghdr && len == 0) {
 8016bd4:	f1ba 0f00 	cmp.w	sl, #0
 8016bd8:	d005      	beq.n	8016be6 <context_sendto.constprop.0+0x90>
 8016bda:	b926      	cbnz	r6, 8016be6 <context_sendto.constprop.0+0x90>
 8016bdc:	f8da 100c 	ldr.w	r1, [sl, #12]
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 8016be0:	4633      	mov	r3, r6
 8016be2:	428b      	cmp	r3, r1
 8016be4:	d13d      	bne.n	8016c62 <context_sendto.constprop.0+0x10c>
	return net_if_get_by_index(context->iface);
 8016be6:	f997 0076 	ldrsb.w	r0, [r7, #118]	; 0x76
 8016bea:	f7ee fa73 	bl	80050d4 <z_impl_net_if_get_by_index>
	if (iface && !net_if_is_up(iface)) {
 8016bee:	2800      	cmp	r0, #0
 8016bf0:	d13f      	bne.n	8016c72 <context_sendto.constprop.0+0x11c>
 8016bf2:	f997 0076 	ldrsb.w	r0, [r7, #118]	; 0x76
 8016bf6:	f7ee fa6d 	bl	80050d4 <z_impl_net_if_get_by_index>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8016bfa:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
	pkt = net_pkt_alloc_with_buffer(net_context_get_iface(context), len,
 8016bfe:	f242 7210 	movw	r2, #10000	; 0x2710
 8016c02:	2300      	movs	r3, #0
 8016c04:	e9cd 2300 	strd	r2, r3, [sp]
 8016c08:	f3c1 02c2 	ubfx	r2, r1, #3, #3
 8016c0c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8016c10:	4631      	mov	r1, r6
 8016c12:	f7f0 faa9 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (pkt) {
 8016c16:	4605      	mov	r5, r0
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	d141      	bne.n	8016ca0 <context_sendto.constprop.0+0x14a>
		return -ENOBUFS;
 8016c1c:	f06f 0468 	mvn.w	r4, #104	; 0x68
 8016c20:	e031      	b.n	8016c86 <context_sendto.constprop.0+0x130>
 8016c22:	46da      	mov	sl, fp
 8016c24:	e7b5      	b.n	8016b92 <context_sendto.constprop.0+0x3c>
		if (addrlen < sizeof(struct sockaddr_in6)) {
 8016c26:	2b17      	cmp	r3, #23
 8016c28:	d8c0      	bhi.n	8016bac <context_sendto.constprop.0+0x56>
			return -EINVAL;
 8016c2a:	f06f 0415 	mvn.w	r4, #21
 8016c2e:	e02a      	b.n	8016c86 <context_sendto.constprop.0+0x130>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8016c30:	2a01      	cmp	r2, #1
 8016c32:	d1fa      	bne.n	8016c2a <context_sendto.constprop.0+0xd4>
		if (msghdr) {
 8016c34:	f1ba 0f00 	cmp.w	sl, #0
 8016c38:	d010      	beq.n	8016c5c <context_sendto.constprop.0+0x106>
			addrlen = msghdr->msg_namelen;
 8016c3a:	e9da 4300 	ldrd	r4, r3, [sl]
			if (!addr4) {
 8016c3e:	b96c      	cbnz	r4, 8016c5c <context_sendto.constprop.0+0x106>
				addr4 = net_sin(&context->remote);
 8016c40:	f107 042c 	add.w	r4, r7, #44	; 0x2c
		if (!addr4->sin_addr.s_addr) {
 8016c44:	6863      	ldr	r3, [r4, #4]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d09c      	beq.n	8016b84 <context_sendto.constprop.0+0x2e>
		if (net_sin(&context->remote)->sin_addr.s_addr == 0U &&
 8016c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d1c1      	bne.n	8016bd4 <context_sendto.constprop.0+0x7e>
 8016c50:	0509      	lsls	r1, r1, #20
 8016c52:	d4bf      	bmi.n	8016bd4 <context_sendto.constprop.0+0x7e>
			iface = net_if_ipv4_select_src_iface(&addr4->sin_addr);
 8016c54:	1d20      	adds	r0, r4, #4
 8016c56:	f7ef f9b1 	bl	8005fbc <net_if_ipv4_select_src_iface>
 8016c5a:	e7b7      	b.n	8016bcc <context_sendto.constprop.0+0x76>
		if (addrlen < sizeof(struct sockaddr_in)) {
 8016c5c:	2b07      	cmp	r3, #7
 8016c5e:	d8f1      	bhi.n	8016c44 <context_sendto.constprop.0+0xee>
 8016c60:	e7e3      	b.n	8016c2a <context_sendto.constprop.0+0xd4>
			len += msghdr->msg_iov[i].iov_len;
 8016c62:	f8da 2008 	ldr.w	r2, [sl, #8]
 8016c66:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 8016c6a:	3301      	adds	r3, #1
			len += msghdr->msg_iov[i].iov_len;
 8016c6c:	6852      	ldr	r2, [r2, #4]
 8016c6e:	4416      	add	r6, r2
		for (i = 0; i < msghdr->msg_iovlen; i++) {
 8016c70:	e7b7      	b.n	8016be2 <context_sendto.constprop.0+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8016c72:	6803      	ldr	r3, [r0, #0]
 8016c74:	f3bf 8f5b 	dmb	ish
 8016c78:	68db      	ldr	r3, [r3, #12]
 8016c7a:	f3bf 8f5b 	dmb	ish
	return net_if_flag_is_set(iface, NET_IF_UP) &&
 8016c7e:	07da      	lsls	r2, r3, #31
 8016c80:	d405      	bmi.n	8016c8e <context_sendto.constprop.0+0x138>
		return -ENETDOWN;
 8016c82:	f06f 0472 	mvn.w	r4, #114	; 0x72
}
 8016c86:	4620      	mov	r0, r4
 8016c88:	b003      	add	sp, #12
 8016c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c8e:	6803      	ldr	r3, [r0, #0]
 8016c90:	f3bf 8f5b 	dmb	ish
 8016c94:	68db      	ldr	r3, [r3, #12]
 8016c96:	f3bf 8f5b 	dmb	ish
	if (iface && !net_if_is_up(iface)) {
 8016c9a:	05db      	lsls	r3, r3, #23
 8016c9c:	d4a9      	bmi.n	8016bf2 <context_sendto.constprop.0+0x9c>
 8016c9e:	e7f0      	b.n	8016c82 <context_sendto.constprop.0+0x12c>
	pkt->context = ctx;
 8016ca0:	6147      	str	r7, [r0, #20]
	tmp_len = net_pkt_available_payload_buffer(
 8016ca2:	f897 1072 	ldrb.w	r1, [r7, #114]	; 0x72
 8016ca6:	f000 fb62 	bl	801736e <net_pkt_available_payload_buffer>
	if (tmp_len < len) {
 8016caa:	4286      	cmp	r6, r0
 8016cac:	d906      	bls.n	8016cbc <context_sendto.constprop.0+0x166>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 8016cae:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8016cb2:	f3c3 1381 	ubfx	r3, r3, #6, #2
		if (net_context_get_type(context) == SOCK_DGRAM) {
 8016cb6:	2b02      	cmp	r3, #2
 8016cb8:	d075      	beq.n	8016da6 <context_sendto.constprop.0+0x250>
 8016cba:	4606      	mov	r6, r0
	return context->proto;
 8016cbc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
	context->send_cb = cb;
 8016cc0:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
 8016cc4:	2b11      	cmp	r3, #17
	context->user_data = user_data;
 8016cc6:	f8c7 9004 	str.w	r9, [r7, #4]
	} else if (IS_ENABLED(CONFIG_NET_UDP) &&
 8016cca:	d153      	bne.n	8016d74 <context_sendto.constprop.0+0x21e>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8016ccc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8016cd0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8016cd4:	2b02      	cmp	r3, #2
 8016cd6:	d134      	bne.n	8016d42 <context_sendto.constprop.0+0x1ec>
		ret = net_context_create_ipv6_new(context, pkt,
 8016cd8:	1d23      	adds	r3, r4, #4
 8016cda:	2200      	movs	r2, #0
 8016cdc:	4629      	mov	r1, r5
 8016cde:	4638      	mov	r0, r7
		dst_port = addr6->sin6_port;
 8016ce0:	f8b4 8002 	ldrh.w	r8, [r4, #2]
		ret = net_context_create_ipv6_new(context, pkt,
 8016ce4:	f7ff ff06 	bl	8016af4 <net_context_create_ipv6_new>
	if (ret < 0) {
 8016ce8:	2800      	cmp	r0, #0
		ret = net_context_create_ipv4_new(context, pkt,
 8016cea:	4604      	mov	r4, r0
	if (ret < 0) {
 8016cec:	db36      	blt.n	8016d5c <context_sendto.constprop.0+0x206>
	ret = bind_default(context);
 8016cee:	4638      	mov	r0, r7
 8016cf0:	f7ff fe76 	bl	80169e0 <bind_default>
	if (ret) {
 8016cf4:	4604      	mov	r4, r0
 8016cf6:	bb78      	cbnz	r0, 8016d58 <context_sendto.constprop.0+0x202>
	ret = net_udp_create(pkt,
 8016cf8:	4642      	mov	r2, r8
 8016cfa:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8016cfc:	4628      	mov	r0, r5
 8016cfe:	f003 f84f 	bl	8019da0 <net_udp_create>
	if (ret) {
 8016d02:	4604      	mov	r4, r0
 8016d04:	bb40      	cbnz	r0, 8016d58 <context_sendto.constprop.0+0x202>
	ret = context_write_data(pkt, buf, len, msg);
 8016d06:	4653      	mov	r3, sl
 8016d08:	4632      	mov	r2, r6
 8016d0a:	4659      	mov	r1, fp
 8016d0c:	4628      	mov	r0, r5
 8016d0e:	f7ff fd67 	bl	80167e0 <context_write_data>
	if (ret) {
 8016d12:	4604      	mov	r4, r0
 8016d14:	bb00      	cbnz	r0, 8016d58 <context_sendto.constprop.0+0x202>
	net_pkt_cursor_init(pkt);
 8016d16:	4628      	mov	r0, r5
 8016d18:	f000 fb75 	bl	8017406 <net_pkt_cursor_init>
 8016d1c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8016d20:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8016d24:	2b02      	cmp	r3, #2
 8016d26:	d11d      	bne.n	8016d64 <context_sendto.constprop.0+0x20e>
		net_ipv6_finalize(pkt, net_context_get_proto(context));
 8016d28:	f897 1072 	ldrb.w	r1, [r7, #114]	; 0x72
 8016d2c:	4628      	mov	r0, r5
 8016d2e:	f001 fd07 	bl	8018740 <net_ipv6_finalize>
		ret = net_send_data(pkt);
 8016d32:	4628      	mov	r0, r5
 8016d34:	f7fe fc87 	bl	8015646 <net_send_data>
	if (ret < 0) {
 8016d38:	2800      	cmp	r0, #0
		ret = net_tcp_send_data(context, cb, user_data);
 8016d3a:	4604      	mov	r4, r0
	if (ret < 0) {
 8016d3c:	db0e      	blt.n	8016d5c <context_sendto.constprop.0+0x206>
	return len;
 8016d3e:	4634      	mov	r4, r6
 8016d40:	e7a1      	b.n	8016c86 <context_sendto.constprop.0+0x130>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8016d42:	2b01      	cmp	r3, #1
 8016d44:	d132      	bne.n	8016dac <context_sendto.constprop.0+0x256>
		ret = net_context_create_ipv4_new(context, pkt,
 8016d46:	1d23      	adds	r3, r4, #4
 8016d48:	2200      	movs	r2, #0
 8016d4a:	4629      	mov	r1, r5
 8016d4c:	4638      	mov	r0, r7
		dst_port = addr4->sin_port;
 8016d4e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
		ret = net_context_create_ipv4_new(context, pkt,
 8016d52:	f7ff fe9a 	bl	8016a8a <net_context_create_ipv4_new>
 8016d56:	e7c7      	b.n	8016ce8 <context_sendto.constprop.0+0x192>
		if (ret < 0) {
 8016d58:	2c00      	cmp	r4, #0
 8016d5a:	dadc      	bge.n	8016d16 <context_sendto.constprop.0+0x1c0>
	net_pkt_unref(pkt);
 8016d5c:	4628      	mov	r0, r5
 8016d5e:	f000 fac0 	bl	80172e2 <net_pkt_unref>
	return ret;
 8016d62:	e790      	b.n	8016c86 <context_sendto.constprop.0+0x130>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8016d64:	2b01      	cmp	r3, #1
 8016d66:	d1e4      	bne.n	8016d32 <context_sendto.constprop.0+0x1dc>
		net_ipv4_finalize(pkt, net_context_get_proto(context));
 8016d68:	f897 1072 	ldrb.w	r1, [r7, #114]	; 0x72
 8016d6c:	4628      	mov	r0, r5
 8016d6e:	f001 f955 	bl	801801c <net_ipv4_finalize>
 8016d72:	e7de      	b.n	8016d32 <context_sendto.constprop.0+0x1dc>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 8016d74:	2b06      	cmp	r3, #6
 8016d76:	d11c      	bne.n	8016db2 <context_sendto.constprop.0+0x25c>
		ret = context_write_data(pkt, buf, len, msghdr);
 8016d78:	4653      	mov	r3, sl
 8016d7a:	4632      	mov	r2, r6
 8016d7c:	4659      	mov	r1, fp
 8016d7e:	4628      	mov	r0, r5
 8016d80:	f7ff fd2e 	bl	80167e0 <context_write_data>
		if (ret < 0) {
 8016d84:	1e04      	subs	r4, r0, #0
 8016d86:	dbe9      	blt.n	8016d5c <context_sendto.constprop.0+0x206>
		net_pkt_cursor_init(pkt);
 8016d88:	4628      	mov	r0, r5
 8016d8a:	f000 fb3c 	bl	8017406 <net_pkt_cursor_init>
		ret = net_tcp_queue_data(context, pkt);
 8016d8e:	4629      	mov	r1, r5
 8016d90:	4638      	mov	r0, r7
 8016d92:	f7f3 fcb1 	bl	800a6f8 <net_tcp_queue_data>
		if (ret < 0) {
 8016d96:	1e04      	subs	r4, r0, #0
 8016d98:	dbe0      	blt.n	8016d5c <context_sendto.constprop.0+0x206>
		ret = net_tcp_send_data(context, cb, user_data);
 8016d9a:	464a      	mov	r2, r9
 8016d9c:	4641      	mov	r1, r8
 8016d9e:	4638      	mov	r0, r7
 8016da0:	f002 fdf6 	bl	8019990 <net_tcp_send_data>
 8016da4:	e7c8      	b.n	8016d38 <context_sendto.constprop.0+0x1e2>
			ret = -ENOMEM;
 8016da6:	f06f 040b 	mvn.w	r4, #11
 8016daa:	e7d7      	b.n	8016d5c <context_sendto.constprop.0+0x206>
	int ret = -EINVAL;
 8016dac:	f06f 0415 	mvn.w	r4, #21
 8016db0:	e7d4      	b.n	8016d5c <context_sendto.constprop.0+0x206>
		ret = -EPROTONOSUPPORT;
 8016db2:	f06f 047a 	mvn.w	r4, #122	; 0x7a
 8016db6:	e7d1      	b.n	8016d5c <context_sendto.constprop.0+0x206>
		return -EBADF;
 8016db8:	f06f 0408 	mvn.w	r4, #8
 8016dbc:	e763      	b.n	8016c86 <context_sendto.constprop.0+0x130>

08016dbe <net_context_connect>:
{
 8016dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
 8016dc2:	f100 090c 	add.w	r9, r0, #12
{
 8016dc6:	b090      	sub	sp, #64	; 0x40
 8016dc8:	4604      	mov	r4, r0
 8016dca:	4690      	mov	r8, r2
 8016dcc:	461f      	mov	r7, r3
	k_mutex_lock(&context->lock, K_FOREVER);
 8016dce:	f04f 32ff 	mov.w	r2, #4294967295
 8016dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8016dd6:	4648      	mov	r0, r9
{
 8016dd8:	460e      	mov	r6, r1
 8016dda:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
	k_mutex_lock(&context->lock, K_FOREVER);
 8016dde:	f7ff fd23 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
 8016de2:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
	return (enum net_context_state)
 8016de6:	f3c3 0241 	ubfx	r2, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_CONNECTING) {
 8016dea:	2a01      	cmp	r2, #1
 8016dec:	f000 80ab 	beq.w	8016f46 <net_context_connect+0x188>
	if (!net_context_is_used(context)) {
 8016df0:	07d9      	lsls	r1, r3, #31
 8016df2:	f140 80ab 	bpl.w	8016f4c <net_context_connect+0x18e>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8016df6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	if (addr->sa_family != net_context_get_family(context)) {
 8016dfa:	8835      	ldrh	r5, [r6, #0]
 8016dfc:	429d      	cmp	r5, r3
 8016dfe:	f040 80ae 	bne.w	8016f5e <net_context_connect+0x1a0>
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
 8016e02:	2a03      	cmp	r2, #3
 8016e04:	f000 80a5 	beq.w	8016f52 <net_context_connect+0x194>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8016e08:	2d02      	cmp	r5, #2
 8016e0a:	d15d      	bne.n	8016ec8 <net_context_connect+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
 8016e0c:	f1b8 0f17 	cmp.w	r8, #23
 8016e10:	f240 80a5 	bls.w	8016f5e <net_context_connect+0x1a0>
		if (net_context_get_proto(context) == IPPROTO_TCP &&
 8016e14:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8016e18:	2b06      	cmp	r3, #6
 8016e1a:	d104      	bne.n	8016e26 <net_context_connect+0x68>
 8016e1c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8016e20:	2bff      	cmp	r3, #255	; 0xff
 8016e22:	f000 8099 	beq.w	8016f58 <net_context_connect+0x19a>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
 8016e26:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8016e2a:	2210      	movs	r2, #16
 8016e2c:	1d31      	adds	r1, r6, #4
 8016e2e:	4628      	mov	r0, r5
 8016e30:	f7fd ff21 	bl	8014c76 <memcpy>
		addr6->sin6_family = AF_INET6;
 8016e34:	2302      	movs	r3, #2
		addr6->sin6_port = net_sin6(addr)->sin6_port;
 8016e36:	f8b6 8002 	ldrh.w	r8, [r6, #2]
		if (!net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
 8016e3a:	4628      	mov	r0, r5
		addr6->sin6_family = AF_INET6;
 8016e3c:	85a3      	strh	r3, [r4, #44]	; 0x2c
		addr6->sin6_port = net_sin6(addr)->sin6_port;
 8016e3e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
		if (!net_ipv6_is_addr_unspecified(&addr6->sin6_addr)) {
 8016e42:	f7ff fcbd 	bl	80167c0 <net_ipv6_is_addr_unspecified>
 8016e46:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
 8016e4a:	2800      	cmp	r0, #0
 8016e4c:	d139      	bne.n	8016ec2 <net_context_connect+0x104>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
 8016e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
 8016e52:	b29b      	uxth	r3, r3
		ret = bind_default(context);
 8016e54:	4620      	mov	r0, r4
 8016e56:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
 8016e5a:	f7ff fdc1 	bl	80169e0 <bind_default>
		if (ret) {
 8016e5e:	4605      	mov	r5, r0
 8016e60:	bb40      	cbnz	r0, 8016eb4 <net_context_connect+0xf6>
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
 8016e62:	2302      	movs	r3, #2
		net_sin6(&local_addr)->sin6_port = lport =
 8016e64:	8c65      	ldrh	r5, [r4, #34]	; 0x22
		if (net_sin6_ptr(&context->local)->sin6_addr) {
 8016e66:	6a62      	ldr	r2, [r4, #36]	; 0x24
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
 8016e68:	8423      	strh	r3, [r4, #32]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
 8016e6a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		net_sin6(&local_addr)->sin6_port = lport =
 8016e6e:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
		if (net_sin6_ptr(&context->local)->sin6_addr) {
 8016e72:	b19a      	cbz	r2, 8016e9c <net_context_connect+0xde>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
 8016e74:	f10d 0c18 	add.w	ip, sp, #24
 8016e78:	f102 0e10 	add.w	lr, r2, #16
 8016e7c:	6810      	ldr	r0, [r2, #0]
 8016e7e:	3208      	adds	r2, #8
 8016e80:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016e84:	4663      	mov	r3, ip
 8016e86:	4572      	cmp	r2, lr
 8016e88:	c303      	stmia	r3!, {r0, r1}
 8016e8a:	469c      	mov	ip, r3
 8016e8c:	d1f6      	bne.n	8016e7c <net_context_connect+0xbe>
 8016e8e:	ab06      	add	r3, sp, #24
 8016e90:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8016e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016e96:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			laddr = &local_addr;
 8016e9a:	aa0a      	add	r2, sp, #40	; 0x28
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 8016e9c:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
 8016ea0:	f3c3 1381 	ubfx	r3, r3, #6, #2
	if (IS_ENABLED(CONFIG_NET_UDP) &&
 8016ea4:	2b02      	cmp	r3, #2
 8016ea6:	d13e      	bne.n	8016f26 <net_context_connect+0x168>
		if (cb) {
 8016ea8:	b11f      	cbz	r7, 8016eb2 <net_context_connect+0xf4>
			cb(context, 0, user_data);
 8016eaa:	4652      	mov	r2, sl
 8016eac:	2100      	movs	r1, #0
 8016eae:	4620      	mov	r0, r4
 8016eb0:	47b8      	blx	r7
		ret = 0;
 8016eb2:	2500      	movs	r5, #0
	k_mutex_unlock(&context->lock);
 8016eb4:	4648      	mov	r0, r9
 8016eb6:	f7ff fcb9 	bl	801682c <k_mutex_unlock.isra.0>
}
 8016eba:	4628      	mov	r0, r5
 8016ebc:	b010      	add	sp, #64	; 0x40
 8016ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
 8016ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016ec6:	e7c4      	b.n	8016e52 <net_context_connect+0x94>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8016ec8:	2d01      	cmp	r5, #1
 8016eca:	d148      	bne.n	8016f5e <net_context_connect+0x1a0>
		if (addrlen < sizeof(struct sockaddr_in)) {
 8016ecc:	f1b8 0f07 	cmp.w	r8, #7
 8016ed0:	d945      	bls.n	8016f5e <net_context_connect+0x1a0>
		memcpy(&addr4->sin_addr, &net_sin(addr)->sin_addr,
 8016ed2:	2204      	movs	r2, #4
 8016ed4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8016ed8:	18b1      	adds	r1, r6, r2
 8016eda:	f7fd fecc 	bl	8014c76 <memcpy>
		addr4->sin_port = net_sin(addr)->sin_port;
 8016ede:	f8b6 8002 	ldrh.w	r8, [r6, #2]
		if (addr4->sin_addr.s_addr) {
 8016ee2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016ee4:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
		addr4->sin_port = net_sin(addr)->sin_port;
 8016ee8:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
		addr4->sin_family = AF_INET;
 8016eec:	85a5      	strh	r5, [r4, #44]	; 0x2c
		if (addr4->sin_addr.s_addr) {
 8016eee:	b1ba      	cbz	r2, 8016f20 <net_context_connect+0x162>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
 8016ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
 8016ef4:	b29b      	uxth	r3, r3
		ret = bind_default(context);
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
 8016efc:	f7ff fd70 	bl	80169e0 <bind_default>
		if (ret) {
 8016f00:	4605      	mov	r5, r0
 8016f02:	2800      	cmp	r0, #0
 8016f04:	d1d6      	bne.n	8016eb4 <net_context_connect+0xf6>
		net_sin_ptr(&context->local)->sin_family = AF_INET;
 8016f06:	2301      	movs	r3, #1
		net_sin(&local_addr)->sin_port = lport =
 8016f08:	8c65      	ldrh	r5, [r4, #34]	; 0x22
		if (net_sin_ptr(&context->local)->sin_addr) {
 8016f0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
		net_sin_ptr(&context->local)->sin_family = AF_INET;
 8016f0c:	8423      	strh	r3, [r4, #32]
		net_sin(&local_addr)->sin_family = AF_INET;
 8016f0e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		net_sin(&local_addr)->sin_port = lport =
 8016f12:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
		if (net_sin_ptr(&context->local)->sin_addr) {
 8016f16:	2a00      	cmp	r2, #0
 8016f18:	d0c0      	beq.n	8016e9c <net_context_connect+0xde>
			net_ipaddr_copy(&net_sin(&local_addr)->sin_addr,
 8016f1a:	6813      	ldr	r3, [r2, #0]
 8016f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f1e:	e7bc      	b.n	8016e9a <net_context_connect+0xdc>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
 8016f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016f24:	e7e6      	b.n	8016ef4 <net_context_connect+0x136>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 8016f26:	2b01      	cmp	r3, #1
 8016f28:	d11c      	bne.n	8016f64 <net_context_connect+0x1a6>
		ret = net_tcp_connect(context, addr, laddr, rport, lport,
 8016f2a:	9500      	str	r5, [sp, #0]
 8016f2c:	4643      	mov	r3, r8
 8016f2e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8016f32:	e9cd 7a04 	strd	r7, sl, [sp, #16]
 8016f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f3a:	4631      	mov	r1, r6
 8016f3c:	4620      	mov	r0, r4
 8016f3e:	f7f4 fa77 	bl	800b430 <net_tcp_connect>
 8016f42:	4605      	mov	r5, r0
 8016f44:	e7b6      	b.n	8016eb4 <net_context_connect+0xf6>
		ret = -EALREADY;
 8016f46:	f06f 0577 	mvn.w	r5, #119	; 0x77
 8016f4a:	e7b3      	b.n	8016eb4 <net_context_connect+0xf6>
		ret = -EBADF;
 8016f4c:	f06f 0508 	mvn.w	r5, #8
 8016f50:	e7b0      	b.n	8016eb4 <net_context_connect+0xf6>
		ret = -EOPNOTSUPP;
 8016f52:	f06f 055e 	mvn.w	r5, #94	; 0x5e
 8016f56:	e7ad      	b.n	8016eb4 <net_context_connect+0xf6>
			ret = -EADDRNOTAVAIL;
 8016f58:	f06f 057c 	mvn.w	r5, #124	; 0x7c
 8016f5c:	e7aa      	b.n	8016eb4 <net_context_connect+0xf6>
		ret = -EINVAL;
 8016f5e:	f06f 0515 	mvn.w	r5, #21
 8016f62:	e7a7      	b.n	8016eb4 <net_context_connect+0xf6>
		ret = -ENOTSUP;
 8016f64:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8016f68:	e7a4      	b.n	8016eb4 <net_context_connect+0xf6>

08016f6a <net_context_accept>:
{
 8016f6a:	b570      	push	{r4, r5, r6, lr}
	return context->flags & NET_CONTEXT_IN_USE;
 8016f6c:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
 8016f70:	4604      	mov	r4, r0
 8016f72:	460d      	mov	r5, r1
	if (!net_context_is_used(context)) {
 8016f74:	07db      	lsls	r3, r3, #31
 8016f76:	d526      	bpl.n	8016fc6 <net_context_accept+0x5c>
	k_mutex_lock(&context->lock, K_FOREVER);
 8016f78:	f100 060c 	add.w	r6, r0, #12
 8016f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8016f80:	f04f 33ff 	mov.w	r3, #4294967295
 8016f84:	4630      	mov	r0, r6
 8016f86:	f7ff fc4f 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
		((context->flags >> NET_CONTEXT_STATE_SHIFT) &
 8016f8a:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
 8016f8e:	f3c3 0241 	ubfx	r2, r3, #1, #2
 8016f92:	2a03      	cmp	r2, #3
 8016f94:	d003      	beq.n	8016f9e <net_context_accept+0x34>
	return (enum net_sock_type)((context->flags & NET_CONTEXT_TYPE) >> 6);
 8016f96:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8016f9a:	2b01      	cmp	r3, #1
 8016f9c:	d10e      	bne.n	8016fbc <net_context_accept+0x52>
	if (net_context_get_proto(context) == IPPROTO_TCP) {
 8016f9e:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8016fa2:	2b06      	cmp	r3, #6
 8016fa4:	d10d      	bne.n	8016fc2 <net_context_accept+0x58>
		ret = net_tcp_accept(context, cb, user_data);
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	9a04      	ldr	r2, [sp, #16]
 8016faa:	4629      	mov	r1, r5
 8016fac:	f7f3 f81a 	bl	8009fe4 <net_tcp_accept>
 8016fb0:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
 8016fb2:	4630      	mov	r0, r6
 8016fb4:	f7ff fc3a 	bl	801682c <k_mutex_unlock.isra.0>
}
 8016fb8:	4620      	mov	r0, r4
 8016fba:	bd70      	pop	{r4, r5, r6, pc}
		ret = -EINVAL;
 8016fbc:	f06f 0415 	mvn.w	r4, #21
 8016fc0:	e7f7      	b.n	8016fb2 <net_context_accept+0x48>
	int ret = 0;
 8016fc2:	2400      	movs	r4, #0
 8016fc4:	e7f5      	b.n	8016fb2 <net_context_accept+0x48>
		return -EBADF;
 8016fc6:	f06f 0408 	mvn.w	r4, #8
 8016fca:	e7f5      	b.n	8016fb8 <net_context_accept+0x4e>

08016fcc <net_context_send>:
{
 8016fcc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
 8016fd0:	f100 070c 	add.w	r7, r0, #12
{
 8016fd4:	4604      	mov	r4, r0
 8016fd6:	4616      	mov	r6, r2
 8016fd8:	4698      	mov	r8, r3
	k_mutex_lock(&context->lock, K_FOREVER);
 8016fda:	4638      	mov	r0, r7
 8016fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8016fe0:	f04f 32ff 	mov.w	r2, #4294967295
{
 8016fe4:	460d      	mov	r5, r1
	k_mutex_lock(&context->lock, K_FOREVER);
 8016fe6:	f7ff fc1f 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
 8016fea:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
 8016fee:	05c3      	lsls	r3, r0, #23
 8016ff0:	d520      	bpl.n	8017034 <net_context_send+0x68>
 8016ff2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8016ff4:	b1f3      	cbz	r3, 8017034 <net_context_send+0x68>
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8016ff6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8016ffa:	2802      	cmp	r0, #2
 8016ffc:	d018      	beq.n	8017030 <net_context_send+0x64>
		addrlen = 0;
 8016ffe:	2801      	cmp	r0, #1
 8017000:	bf0c      	ite	eq
 8017002:	2308      	moveq	r3, #8
 8017004:	2300      	movne	r3, #0
	ret = context_sendto(context, buf, len, &context->remote,
 8017006:	2200      	movs	r2, #0
 8017008:	4620      	mov	r0, r4
 801700a:	9300      	str	r3, [sp, #0]
 801700c:	4629      	mov	r1, r5
 801700e:	9203      	str	r2, [sp, #12]
 8017010:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 8017014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017016:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801701a:	4632      	mov	r2, r6
 801701c:	f7ff fd9b 	bl	8016b56 <context_sendto.constprop.0>
 8017020:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
 8017022:	4638      	mov	r0, r7
 8017024:	f7ff fc02 	bl	801682c <k_mutex_unlock.isra.0>
}
 8017028:	4620      	mov	r0, r4
 801702a:	b004      	add	sp, #16
 801702c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		addrlen = sizeof(struct sockaddr_in6);
 8017030:	2318      	movs	r3, #24
 8017032:	e7e8      	b.n	8017006 <net_context_send+0x3a>
		ret = -EDESTADDRREQ;
 8017034:	f06f 0478 	mvn.w	r4, #120	; 0x78
 8017038:	e7f3      	b.n	8017022 <net_context_send+0x56>

0801703a <net_context_sendto>:
{
 801703a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
 801703e:	f100 080c 	add.w	r8, r0, #12
{
 8017042:	4604      	mov	r4, r0
 8017044:	4616      	mov	r6, r2
 8017046:	461f      	mov	r7, r3
	k_mutex_lock(&context->lock, K_FOREVER);
 8017048:	4640      	mov	r0, r8
 801704a:	f04f 32ff 	mov.w	r2, #4294967295
 801704e:	f04f 33ff 	mov.w	r3, #4294967295
{
 8017052:	460d      	mov	r5, r1
	k_mutex_lock(&context->lock, K_FOREVER);
 8017054:	f7ff fbe8 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
	ret = context_sendto(context, buf, len, dst_addr, addrlen,
 8017058:	2301      	movs	r3, #1
 801705a:	4632      	mov	r2, r6
 801705c:	4629      	mov	r1, r5
 801705e:	9303      	str	r3, [sp, #12]
 8017060:	4620      	mov	r0, r4
 8017062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017064:	9302      	str	r3, [sp, #8]
 8017066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017068:	9301      	str	r3, [sp, #4]
 801706a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801706c:	9300      	str	r3, [sp, #0]
 801706e:	463b      	mov	r3, r7
 8017070:	f7ff fd71 	bl	8016b56 <context_sendto.constprop.0>
 8017074:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
 8017076:	4640      	mov	r0, r8
 8017078:	f7ff fbd8 	bl	801682c <k_mutex_unlock.isra.0>
}
 801707c:	4620      	mov	r0, r4
 801707e:	b004      	add	sp, #16
 8017080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017084 <net_context_update_recv_wnd>:
{
 8017084:	b570      	push	{r4, r5, r6, lr}
	k_mutex_lock(&context->lock, K_FOREVER);
 8017086:	f100 060c 	add.w	r6, r0, #12
{
 801708a:	4604      	mov	r4, r0
 801708c:	460d      	mov	r5, r1
	k_mutex_lock(&context->lock, K_FOREVER);
 801708e:	f04f 32ff 	mov.w	r2, #4294967295
 8017092:	f04f 33ff 	mov.w	r3, #4294967295
 8017096:	4630      	mov	r0, r6
 8017098:	f7ff fbc6 	bl	8016828 <k_mutex_lock.constprop.0.isra.0>
	ret = net_tcp_update_recv_wnd(context, delta);
 801709c:	4629      	mov	r1, r5
 801709e:	4620      	mov	r0, r4
 80170a0:	f002 fe64 	bl	8019d6c <net_tcp_update_recv_wnd>
 80170a4:	4604      	mov	r4, r0
	k_mutex_unlock(&context->lock);
 80170a6:	4630      	mov	r0, r6
 80170a8:	f7ff fbc0 	bl	801682c <k_mutex_unlock.isra.0>
}
 80170ac:	4620      	mov	r0, r4
 80170ae:	bd70      	pop	{r4, r5, r6, pc}

080170b0 <pkt_cursor_jump>:
		pkt->cursor.pos = NULL;
	}
}

static void pkt_cursor_jump(struct net_pkt *pkt, bool write)
{
 80170b0:	b538      	push	{r3, r4, r5, lr}
 80170b2:	4604      	mov	r4, r0
 80170b4:	460d      	mov	r5, r1
	struct net_pkt_cursor *cursor = &pkt->cursor;

	cursor->buf = cursor->buf->frags;
 80170b6:	68c3      	ldr	r3, [r0, #12]
	while (cursor->buf) {
		const size_t len =
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;

		if (!len) {
			cursor->buf = cursor->buf->frags;
 80170b8:	685b      	ldr	r3, [r3, #4]
 80170ba:	60e3      	str	r3, [r4, #12]
	while (cursor->buf) {
 80170bc:	68e0      	ldr	r0, [r4, #12]
 80170be:	b130      	cbz	r0, 80170ce <pkt_cursor_jump+0x1e>
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 80170c0:	b14d      	cbz	r5, 80170d6 <pkt_cursor_jump+0x26>
	return net_buf_simple_max_len(&buf->b);
 80170c2:	300c      	adds	r0, #12
 80170c4:	f7fd ffb7 	bl	8015036 <net_buf_simple_max_len>
			cursor->buf = cursor->buf->frags;
 80170c8:	68e3      	ldr	r3, [r4, #12]
		if (!len) {
 80170ca:	2800      	cmp	r0, #0
 80170cc:	d0f4      	beq.n	80170b8 <pkt_cursor_jump+0x8>
		} else {
			break;
		}
	}

	if (cursor->buf) {
 80170ce:	68e3      	ldr	r3, [r4, #12]
 80170d0:	b91b      	cbnz	r3, 80170da <pkt_cursor_jump+0x2a>
 80170d2:	6123      	str	r3, [r4, #16]
		cursor->pos = cursor->buf->data;
	} else {
		cursor->pos = NULL;
	}
}
 80170d4:	bd38      	pop	{r3, r4, r5, pc}
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 80170d6:	8a00      	ldrh	r0, [r0, #16]
 80170d8:	e7f6      	b.n	80170c8 <pkt_cursor_jump+0x18>
		cursor->pos = cursor->buf->data;
 80170da:	68db      	ldr	r3, [r3, #12]
 80170dc:	e7f9      	b.n	80170d2 <pkt_cursor_jump+0x22>

080170de <pkt_cursor_advance>:

static void pkt_cursor_advance(struct net_pkt *pkt, bool write)
{
 80170de:	b538      	push	{r3, r4, r5, lr}
 80170e0:	4604      	mov	r4, r0
	struct net_pkt_cursor *cursor = &pkt->cursor;
	size_t len;

	if (!cursor->buf) {
 80170e2:	68c0      	ldr	r0, [r0, #12]
{
 80170e4:	460d      	mov	r5, r1
	if (!cursor->buf) {
 80170e6:	b188      	cbz	r0, 801710c <pkt_cursor_advance+0x2e>
		return;
	}

	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 80170e8:	b171      	cbz	r1, 8017108 <pkt_cursor_advance+0x2a>
 80170ea:	300c      	adds	r0, #12
 80170ec:	f7fd ffa3 	bl	8015036 <net_buf_simple_max_len>
	if ((cursor->pos - cursor->buf->data) == len) {
 80170f0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80170f4:	68d2      	ldr	r2, [r2, #12]
 80170f6:	1a9b      	subs	r3, r3, r2
 80170f8:	4283      	cmp	r3, r0
 80170fa:	d107      	bne.n	801710c <pkt_cursor_advance+0x2e>
		pkt_cursor_jump(pkt, write);
 80170fc:	4629      	mov	r1, r5
 80170fe:	4620      	mov	r0, r4
	}
}
 8017100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		pkt_cursor_jump(pkt, write);
 8017104:	f7ff bfd4 	b.w	80170b0 <pkt_cursor_jump>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 8017108:	8a00      	ldrh	r0, [r0, #16]
 801710a:	e7f1      	b.n	80170f0 <pkt_cursor_advance+0x12>
}
 801710c:	bd38      	pop	{r3, r4, r5, pc}

0801710e <pkt_cursor_update>:

static void pkt_cursor_update(struct net_pkt *pkt,
			      size_t length, bool write)
{
 801710e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017110:	4604      	mov	r4, r0
 8017112:	4616      	mov	r6, r2
 8017114:	460f      	mov	r7, r1

	if (net_pkt_is_being_overwritten(pkt)) {
		write = false;
	}

	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 8017116:	68c0      	ldr	r0, [r0, #12]
	return pkt->overwrite;
 8017118:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (net_pkt_is_being_overwritten(pkt)) {
 801711c:	07da      	lsls	r2, r3, #31
 801711e:	d415      	bmi.n	801714c <pkt_cursor_update+0x3e>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 8017120:	b1a6      	cbz	r6, 801714c <pkt_cursor_update+0x3e>
 8017122:	300c      	adds	r0, #12
 8017124:	f7fd ff87 	bl	8015036 <net_buf_simple_max_len>
 8017128:	4605      	mov	r5, r0
	if (length + (cursor->pos - cursor->buf->data) == len &&
 801712a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 801712e:	68c2      	ldr	r2, [r0, #12]
 8017130:	1a9b      	subs	r3, r3, r2
 8017132:	443b      	add	r3, r7
 8017134:	42ab      	cmp	r3, r5
 8017136:	d111      	bne.n	801715c <pkt_cursor_update+0x4e>
 8017138:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801713c:	07db      	lsls	r3, r3, #31
 801713e:	d408      	bmi.n	8017152 <pkt_cursor_update+0x44>
	    !(net_pkt_is_being_overwritten(pkt) &&
	      len < net_buf_max_len(cursor->buf))) {
		pkt_cursor_jump(pkt, write);
 8017140:	4631      	mov	r1, r6
 8017142:	4620      	mov	r0, r4
	} else {
		cursor->pos += length;
	}
}
 8017144:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		pkt_cursor_jump(pkt, write);
 8017148:	f7ff bfb2 	b.w	80170b0 <pkt_cursor_jump>
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 801714c:	8a05      	ldrh	r5, [r0, #16]
 801714e:	2600      	movs	r6, #0
 8017150:	e7eb      	b.n	801712a <pkt_cursor_update+0x1c>
 8017152:	300c      	adds	r0, #12
 8017154:	f7fd ff6f 	bl	8015036 <net_buf_simple_max_len>
	    !(net_pkt_is_being_overwritten(pkt) &&
 8017158:	42a8      	cmp	r0, r5
 801715a:	d9f1      	bls.n	8017140 <pkt_cursor_update+0x32>
		cursor->pos += length;
 801715c:	6921      	ldr	r1, [r4, #16]
 801715e:	4439      	add	r1, r7
 8017160:	6121      	str	r1, [r4, #16]
}
 8017162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017164 <pkt_estimate_headers_length.part.0>:
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 8017164:	2802      	cmp	r0, #2
 8017166:	d007      	beq.n	8017178 <pkt_estimate_headers_length.part.0+0x14>
		hdr_len += NET_IPV4H_LEN;
 8017168:	2801      	cmp	r0, #1
 801716a:	bf14      	ite	ne
 801716c:	2000      	movne	r0, #0
 801716e:	2014      	moveq	r0, #20
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 8017170:	2906      	cmp	r1, #6
 8017172:	d103      	bne.n	801717c <pkt_estimate_headers_length.part.0+0x18>
		hdr_len += NET_TCPH_LEN + NET_TCP_MAX_OPT_SIZE;
 8017174:	301c      	adds	r0, #28
 8017176:	4770      	bx	lr
		hdr_len += NET_IPV6H_LEN;
 8017178:	2028      	movs	r0, #40	; 0x28
 801717a:	e7f9      	b.n	8017170 <pkt_estimate_headers_length.part.0+0xc>
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 801717c:	2911      	cmp	r1, #17
 801717e:	d101      	bne.n	8017184 <pkt_estimate_headers_length.part.0+0x20>
		hdr_len += NET_UDPH_LEN;
 8017180:	3008      	adds	r0, #8
 8017182:	4770      	bx	lr
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
 8017184:	2901      	cmp	r1, #1
 8017186:	d001      	beq.n	801718c <pkt_estimate_headers_length.part.0+0x28>
 8017188:	293a      	cmp	r1, #58	; 0x3a
 801718a:	d100      	bne.n	801718e <pkt_estimate_headers_length.part.0+0x2a>
		hdr_len += NET_ICMPH_LEN;
 801718c:	3004      	adds	r0, #4
}
 801718e:	4770      	bx	lr

08017190 <net_pkt_get_len.isra.0>:
static inline size_t net_pkt_get_len(struct net_pkt *pkt)
 8017190:	4603      	mov	r3, r0
	size_t bytes = 0;
 8017192:	2000      	movs	r0, #0
	while (buf) {
 8017194:	b903      	cbnz	r3, 8017198 <net_pkt_get_len.isra.0+0x8>
}
 8017196:	4770      	bx	lr
		bytes += buf->len;
 8017198:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
 801719a:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 801719c:	4410      	add	r0, r2
		buf = buf->frags;
 801719e:	e7f9      	b.n	8017194 <net_pkt_get_len.isra.0+0x4>

080171a0 <net_pkt_cursor_operate>:

/* Internal function that does all operation (skip/read/write/memset) */
static int net_pkt_cursor_operate(struct net_pkt *pkt,
				  void *data, size_t length,
				  bool copy, bool write)
{
 80171a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171a4:	4604      	mov	r4, r0
 80171a6:	460f      	mov	r7, r1
 80171a8:	4616      	mov	r6, r2
 80171aa:	4699      	mov	r9, r3
 80171ac:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* We use such variable to avoid lengthy lines */
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (c_op->buf && length) {
 80171b0:	68e3      	ldr	r3, [r4, #12]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d05b      	beq.n	801726e <net_pkt_cursor_operate+0xce>
 80171b6:	b90e      	cbnz	r6, 80171bc <net_pkt_cursor_operate+0x1c>
	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
	}

	return 0;
 80171b8:	4630      	mov	r0, r6
 80171ba:	e00d      	b.n	80171d8 <net_pkt_cursor_operate+0x38>
	return pkt->overwrite;
 80171bc:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
 80171c0:	4620      	mov	r0, r4
 80171c2:	f013 0f01 	tst.w	r3, #1
 80171c6:	bf0c      	ite	eq
 80171c8:	4641      	moveq	r1, r8
 80171ca:	2100      	movne	r1, #0
 80171cc:	f7ff ff87 	bl	80170de <pkt_cursor_advance>
		if (c_op->buf == NULL) {
 80171d0:	68e0      	ldr	r0, [r4, #12]
 80171d2:	b918      	cbnz	r0, 80171dc <net_pkt_cursor_operate+0x3c>
		return -ENOBUFS;
 80171d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 80171d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (write && !net_pkt_is_being_overwritten(pkt)) {
 80171dc:	f1b8 0f00 	cmp.w	r8, #0
 80171e0:	d035      	beq.n	801724e <net_pkt_cursor_operate+0xae>
 80171e2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80171e6:	07da      	lsls	r2, r3, #31
 80171e8:	d431      	bmi.n	801724e <net_pkt_cursor_operate+0xae>
	return net_buf_simple_max_len(&buf->b);
 80171ea:	300c      	adds	r0, #12
 80171ec:	f7fd ff23 	bl	8015036 <net_buf_simple_max_len>
				(c_op->pos - c_op->buf->data);
 80171f0:	e9d4 3503 	ldrd	r3, r5, [r4, #12]
 80171f4:	68db      	ldr	r3, [r3, #12]
 80171f6:	1aed      	subs	r5, r5, r3
			d_len = net_buf_max_len(c_op->buf) -
 80171f8:	1b45      	subs	r5, r0, r5
		if (!d_len) {
 80171fa:	2d00      	cmp	r5, #0
 80171fc:	d0ea      	beq.n	80171d4 <net_pkt_cursor_operate+0x34>
		if (length < d_len) {
 80171fe:	42b5      	cmp	r5, r6
 8017200:	bf28      	it	cs
 8017202:	4635      	movcs	r5, r6
		if (copy && data) {
 8017204:	f1b9 0f00 	cmp.w	r9, #0
 8017208:	d029      	beq.n	801725e <net_pkt_cursor_operate+0xbe>
 801720a:	b147      	cbz	r7, 801721e <net_pkt_cursor_operate+0x7e>
			memcpy(write ? c_op->pos : data,
 801720c:	6920      	ldr	r0, [r4, #16]
 801720e:	f1b8 0f00 	cmp.w	r8, #0
 8017212:	d122      	bne.n	801725a <net_pkt_cursor_operate+0xba>
 8017214:	4601      	mov	r1, r0
 8017216:	4638      	mov	r0, r7
 8017218:	462a      	mov	r2, r5
 801721a:	f7fd fd2c 	bl	8014c76 <memcpy>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
 801721e:	f1b8 0f00 	cmp.w	r8, #0
 8017222:	d008      	beq.n	8017236 <net_pkt_cursor_operate+0x96>
 8017224:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8017228:	07db      	lsls	r3, r3, #31
 801722a:	d404      	bmi.n	8017236 <net_pkt_cursor_operate+0x96>
	return net_buf_simple_add(&buf->b, len);
 801722c:	68e0      	ldr	r0, [r4, #12]
 801722e:	4629      	mov	r1, r5
 8017230:	300c      	adds	r0, #12
 8017232:	f7fd fee0 	bl	8014ff6 <net_buf_simple_add>
		pkt_cursor_update(pkt, len, write);
 8017236:	4642      	mov	r2, r8
 8017238:	4629      	mov	r1, r5
 801723a:	4620      	mov	r0, r4
 801723c:	f7ff ff67 	bl	801710e <pkt_cursor_update>
		if (copy && data) {
 8017240:	f1b9 0f00 	cmp.w	r9, #0
 8017244:	d001      	beq.n	801724a <net_pkt_cursor_operate+0xaa>
 8017246:	b107      	cbz	r7, 801724a <net_pkt_cursor_operate+0xaa>
			data = (uint8_t *) data + len;
 8017248:	442f      	add	r7, r5
		length -= len;
 801724a:	1b76      	subs	r6, r6, r5
 801724c:	e7b0      	b.n	80171b0 <net_pkt_cursor_operate+0x10>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
 801724e:	8a05      	ldrh	r5, [r0, #16]
 8017250:	6923      	ldr	r3, [r4, #16]
 8017252:	68c0      	ldr	r0, [r0, #12]
 8017254:	1a1b      	subs	r3, r3, r0
 8017256:	1aed      	subs	r5, r5, r3
 8017258:	e7cf      	b.n	80171fa <net_pkt_cursor_operate+0x5a>
 801725a:	4639      	mov	r1, r7
 801725c:	e7dc      	b.n	8017218 <net_pkt_cursor_operate+0x78>
		} else if (data) {
 801725e:	2f00      	cmp	r7, #0
 8017260:	d0dd      	beq.n	801721e <net_pkt_cursor_operate+0x7e>
			memset(c_op->pos, *(int *)data, len);
 8017262:	462a      	mov	r2, r5
 8017264:	6839      	ldr	r1, [r7, #0]
 8017266:	6920      	ldr	r0, [r4, #16]
 8017268:	f7fd fd10 	bl	8014c8c <memset>
 801726c:	e7d7      	b.n	801721e <net_pkt_cursor_operate+0x7e>
	if (length) {
 801726e:	2e00      	cmp	r6, #0
 8017270:	d0a2      	beq.n	80171b8 <net_pkt_cursor_operate+0x18>
 8017272:	e7af      	b.n	80171d4 <net_pkt_cursor_operate+0x34>

08017274 <net_pkt_get_reserve_data>:
{
 8017274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017278:	4606      	mov	r6, r0
 801727a:	460f      	mov	r7, r1
 801727c:	4615      	mov	r5, r2
 801727e:	461c      	mov	r4, r3
	if (k_is_in_isr()) {
 8017280:	f004 faa1 	bl	801b7c6 <k_is_in_isr>
 8017284:	b108      	cbz	r0, 801728a <net_pkt_get_reserve_data+0x16>
		timeout = K_NO_WAIT;
 8017286:	2500      	movs	r5, #0
 8017288:	462c      	mov	r4, r5
	if (min_len > CONFIG_NET_BUF_DATA_SIZE) {
 801728a:	2f80      	cmp	r7, #128	; 0x80
 801728c:	d806      	bhi.n	801729c <net_pkt_get_reserve_data+0x28>
	return net_buf_alloc_fixed(pool, timeout);
 801728e:	462a      	mov	r2, r5
 8017290:	4623      	mov	r3, r4
 8017292:	4630      	mov	r0, r6
}
 8017294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017298:	f7fd be5c 	b.w	8014f54 <net_buf_alloc_fixed>
 801729c:	2000      	movs	r0, #0
 801729e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080172a2 <net_pkt_ref>:
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
 80172a2:	f100 0320 	add.w	r3, r0, #32
{
 80172a6:	b510      	push	{r4, lr}
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
 80172a8:	b1a8      	cbz	r0, 80172d6 <net_pkt_ref+0x34>
 80172aa:	f3bf 8f5b 	dmb	ish
 80172ae:	681a      	ldr	r2, [r3, #0]
 80172b0:	f3bf 8f5b 	dmb	ish
		if (!ref) {
 80172b4:	b17a      	cbz	r2, 80172d6 <net_pkt_ref+0x34>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
 80172b6:	1c51      	adds	r1, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80172b8:	f3bf 8f5b 	dmb	ish
 80172bc:	e853 4f00 	ldrex	r4, [r3]
 80172c0:	4294      	cmp	r4, r2
 80172c2:	d104      	bne.n	80172ce <net_pkt_ref+0x2c>
 80172c4:	e843 1c00 	strex	ip, r1, [r3]
 80172c8:	f1bc 0f00 	cmp.w	ip, #0
 80172cc:	d1f6      	bne.n	80172bc <net_pkt_ref+0x1a>
 80172ce:	f3bf 8f5b 	dmb	ish
 80172d2:	d1e9      	bne.n	80172a8 <net_pkt_ref+0x6>
}
 80172d4:	bd10      	pop	{r4, pc}
			return NULL;
 80172d6:	2000      	movs	r0, #0
 80172d8:	e7fc      	b.n	80172d4 <net_pkt_ref+0x32>

080172da <net_pkt_frag_unref>:
	if (!frag) {
 80172da:	b108      	cbz	r0, 80172e0 <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
 80172dc:	f7ed b80c 	b.w	80042f8 <net_buf_unref>
}
 80172e0:	4770      	bx	lr

080172e2 <net_pkt_unref>:
{
 80172e2:	b507      	push	{r0, r1, r2, lr}
 80172e4:	9001      	str	r0, [sp, #4]
	if (!pkt) {
 80172e6:	b318      	cbz	r0, 8017330 <net_pkt_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80172e8:	9b01      	ldr	r3, [sp, #4]
 80172ea:	f3bf 8f5b 	dmb	ish
 80172ee:	6a1b      	ldr	r3, [r3, #32]
 80172f0:	f3bf 8f5b 	dmb	ish
		if (!ref) {
 80172f4:	b1e3      	cbz	r3, 8017330 <net_pkt_unref+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80172f6:	9a01      	ldr	r2, [sp, #4]
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
 80172f8:	1e59      	subs	r1, r3, #1
 80172fa:	f3bf 8f5b 	dmb	ish
 80172fe:	3220      	adds	r2, #32
 8017300:	e852 0f00 	ldrex	r0, [r2]
 8017304:	4298      	cmp	r0, r3
 8017306:	d104      	bne.n	8017312 <net_pkt_unref+0x30>
 8017308:	e842 1c00 	strex	ip, r1, [r2]
 801730c:	f1bc 0f00 	cmp.w	ip, #0
 8017310:	d1f6      	bne.n	8017300 <net_pkt_unref+0x1e>
 8017312:	f3bf 8f5b 	dmb	ish
 8017316:	d1e7      	bne.n	80172e8 <net_pkt_unref+0x6>
	if (ref > 1) {
 8017318:	2b01      	cmp	r3, #1
 801731a:	dc09      	bgt.n	8017330 <net_pkt_unref+0x4e>
	if (pkt->frags) {
 801731c:	9b01      	ldr	r3, [sp, #4]
 801731e:	6898      	ldr	r0, [r3, #8]
 8017320:	b108      	cbz	r0, 8017326 <net_pkt_unref+0x44>
		net_pkt_frag_unref(pkt->frags);
 8017322:	f7ff ffda 	bl	80172da <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
 8017326:	9b01      	ldr	r3, [sp, #4]
 8017328:	a901      	add	r1, sp, #4
 801732a:	6858      	ldr	r0, [r3, #4]
 801732c:	f004 fa21 	bl	801b772 <k_mem_slab_free>
}
 8017330:	b003      	add	sp, #12
 8017332:	f85d fb04 	ldr.w	pc, [sp], #4

08017336 <net_pkt_frag_insert>:
{
 8017336:	b538      	push	{r3, r4, r5, lr}
 8017338:	4604      	mov	r4, r0
	net_buf_frag_last(frag)->frags = pkt->frags;
 801733a:	4608      	mov	r0, r1
{
 801733c:	460d      	mov	r5, r1
	net_buf_frag_last(frag)->frags = pkt->frags;
 801733e:	f7fd fe0e 	bl	8014f5e <net_buf_frag_last>
 8017342:	68a3      	ldr	r3, [r4, #8]
 8017344:	6043      	str	r3, [r0, #4]
	pkt->frags = frag;
 8017346:	60a5      	str	r5, [r4, #8]
}
 8017348:	bd38      	pop	{r3, r4, r5, pc}

0801734a <net_pkt_available_buffer>:
{
 801734a:	b570      	push	{r4, r5, r6, lr}
	if (!pkt) {
 801734c:	4604      	mov	r4, r0
 801734e:	b130      	cbz	r0, 801735e <net_pkt_available_buffer+0x14>
	return pkt_get_max_len(pkt) - net_pkt_get_len(pkt);
 8017350:	6885      	ldr	r5, [r0, #8]
	size_t size = 0;
 8017352:	2600      	movs	r6, #0
	while (buf) {
 8017354:	b925      	cbnz	r5, 8017360 <net_pkt_available_buffer+0x16>
	return pkt_get_max_len(pkt) - net_pkt_get_len(pkt);
 8017356:	68a0      	ldr	r0, [r4, #8]
 8017358:	f7ff ff1a 	bl	8017190 <net_pkt_get_len.isra.0>
 801735c:	1a30      	subs	r0, r6, r0
}
 801735e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_max_len(&buf->b);
 8017360:	f105 000c 	add.w	r0, r5, #12
 8017364:	f7fd fe67 	bl	8015036 <net_buf_simple_max_len>
		buf = buf->frags;
 8017368:	686d      	ldr	r5, [r5, #4]
		size += net_buf_max_len(buf);
 801736a:	4406      	add	r6, r0
		buf = buf->frags;
 801736c:	e7f2      	b.n	8017354 <net_pkt_available_buffer+0xa>

0801736e <net_pkt_available_payload_buffer>:
{
 801736e:	b538      	push	{r3, r4, r5, lr}
	if (!pkt) {
 8017370:	4605      	mov	r5, r0
 8017372:	b188      	cbz	r0, 8017398 <net_pkt_available_payload_buffer+0x2a>
	return pkt->family;
 8017374:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
	if (family == AF_UNSPEC) {
 8017378:	0958      	lsrs	r0, r3, #5
 801737a:	d001      	beq.n	8017380 <net_pkt_available_payload_buffer+0x12>
 801737c:	f7ff fef2 	bl	8017164 <pkt_estimate_headers_length.part.0>
		return  0;
 8017380:	4604      	mov	r4, r0
	len = net_pkt_get_len(pkt);
 8017382:	68a8      	ldr	r0, [r5, #8]
 8017384:	f7ff ff04 	bl	8017190 <net_pkt_get_len.isra.0>
	hdr_len = hdr_len <= len ? 0 : hdr_len - len;
 8017388:	42a0      	cmp	r0, r4
 801738a:	bf34      	ite	cc
 801738c:	1a24      	subcc	r4, r4, r0
 801738e:	2400      	movcs	r4, #0
	len = net_pkt_available_buffer(pkt) - hdr_len;
 8017390:	4628      	mov	r0, r5
 8017392:	f7ff ffda 	bl	801734a <net_pkt_available_buffer>
 8017396:	1b00      	subs	r0, r0, r4
}
 8017398:	bd38      	pop	{r3, r4, r5, pc}

0801739a <net_pkt_trim_buffer>:
{
 801739a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801739c:	4604      	mov	r4, r0
	buf = pkt->buffer;
 801739e:	6880      	ldr	r0, [r0, #8]
			buf->frags = NULL;
 80173a0:	2700      	movs	r7, #0
	prev = buf;
 80173a2:	4605      	mov	r5, r0
	while (buf) {
 80173a4:	b900      	cbnz	r0, 80173a8 <net_pkt_trim_buffer+0xe>
}
 80173a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!buf->len) {
 80173a8:	8a03      	ldrh	r3, [r0, #16]
		struct net_buf *next = buf->frags;
 80173aa:	6846      	ldr	r6, [r0, #4]
		if (!buf->len) {
 80173ac:	b93b      	cbnz	r3, 80173be <net_pkt_trim_buffer+0x24>
			if (buf == pkt->buffer) {
 80173ae:	68a3      	ldr	r3, [r4, #8]
 80173b0:	4283      	cmp	r3, r0
 80173b2:	d107      	bne.n	80173c4 <net_pkt_trim_buffer+0x2a>
				pkt->buffer = next;
 80173b4:	60a6      	str	r6, [r4, #8]
			buf->frags = NULL;
 80173b6:	6047      	str	r7, [r0, #4]
			net_buf_unref(buf);
 80173b8:	f7ec ff9e 	bl	80042f8 <net_buf_unref>
 80173bc:	4628      	mov	r0, r5
 80173be:	4605      	mov	r5, r0
 80173c0:	4630      	mov	r0, r6
 80173c2:	e7ef      	b.n	80173a4 <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
 80173c4:	686b      	ldr	r3, [r5, #4]
 80173c6:	4283      	cmp	r3, r0
				prev->frags = next;
 80173c8:	bf08      	it	eq
 80173ca:	606e      	streq	r6, [r5, #4]
 80173cc:	e7f3      	b.n	80173b6 <net_pkt_trim_buffer+0x1c>

080173ce <net_pkt_remove_tail>:
{
 80173ce:	b510      	push	{r4, lr}
	struct net_buf *buf = pkt->buffer;
 80173d0:	6884      	ldr	r4, [r0, #8]
	size_t remaining_len = net_pkt_get_len(pkt);
 80173d2:	4620      	mov	r0, r4
 80173d4:	f7ff fedc 	bl	8017190 <net_pkt_get_len.isra.0>
	if (remaining_len < length) {
 80173d8:	4288      	cmp	r0, r1
 80173da:	d311      	bcc.n	8017400 <net_pkt_remove_tail+0x32>
	remaining_len -= length;
 80173dc:	1a41      	subs	r1, r0, r1
	while (buf) {
 80173de:	b12c      	cbz	r4, 80173ec <net_pkt_remove_tail+0x1e>
		if (buf->len >= remaining_len) {
 80173e0:	8a23      	ldrh	r3, [r4, #16]
			if (buf->frags) {
 80173e2:	6860      	ldr	r0, [r4, #4]
		if (buf->len >= remaining_len) {
 80173e4:	428b      	cmp	r3, r1
 80173e6:	d308      	bcc.n	80173fa <net_pkt_remove_tail+0x2c>
			buf->len = remaining_len;
 80173e8:	8221      	strh	r1, [r4, #16]
			if (buf->frags) {
 80173ea:	b908      	cbnz	r0, 80173f0 <net_pkt_remove_tail+0x22>
	return 0;
 80173ec:	2000      	movs	r0, #0
}
 80173ee:	bd10      	pop	{r4, pc}
				net_pkt_frag_unref(buf->frags);
 80173f0:	f7ff ff73 	bl	80172da <net_pkt_frag_unref>
				buf->frags = NULL;
 80173f4:	2000      	movs	r0, #0
 80173f6:	6060      	str	r0, [r4, #4]
 80173f8:	e7f9      	b.n	80173ee <net_pkt_remove_tail+0x20>
		remaining_len -= buf->len;
 80173fa:	1ac9      	subs	r1, r1, r3
			if (buf->frags) {
 80173fc:	4604      	mov	r4, r0
 80173fe:	e7ee      	b.n	80173de <net_pkt_remove_tail+0x10>
		return -EINVAL;
 8017400:	f06f 0015 	mvn.w	r0, #21
 8017404:	e7f3      	b.n	80173ee <net_pkt_remove_tail+0x20>

08017406 <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
 8017406:	6883      	ldr	r3, [r0, #8]
 8017408:	60c3      	str	r3, [r0, #12]
	if (pkt->cursor.buf) {
 801740a:	b103      	cbz	r3, 801740e <net_pkt_cursor_init+0x8>
		pkt->cursor.pos = pkt->cursor.buf->data;
 801740c:	68db      	ldr	r3, [r3, #12]
 801740e:	6103      	str	r3, [r0, #16]
}
 8017410:	4770      	bx	lr

08017412 <pkt_alloc_on_iface>:
{
 8017412:	b510      	push	{r4, lr}
 8017414:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
 8017416:	f7ef fd9f 	bl	8006f58 <pkt_alloc>
	if (pkt) {
 801741a:	b138      	cbz	r0, 801742c <pkt_alloc_on_iface+0x1a>
	pkt->iface = iface;
 801741c:	6184      	str	r4, [r0, #24]
	if (iface) {
 801741e:	b12c      	cbz	r4, 801742c <pkt_alloc_on_iface+0x1a>
		uint8_t type = net_if_get_link_addr(iface)->type;
 8017420:	6823      	ldr	r3, [r4, #0]
 8017422:	7d5b      	ldrb	r3, [r3, #21]
		pkt->lladdr_src.type = type;
 8017424:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
		pkt->lladdr_dst.type = type;
 8017428:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
}
 801742c:	bd10      	pop	{r4, pc}

0801742e <net_pkt_append_buffer>:
{
 801742e:	b510      	push	{r4, lr}
	if (!pkt->buffer) {
 8017430:	6882      	ldr	r2, [r0, #8]
{
 8017432:	460c      	mov	r4, r1
	if (!pkt->buffer) {
 8017434:	b922      	cbnz	r2, 8017440 <net_pkt_append_buffer+0x12>
		pkt->buffer = buffer;
 8017436:	6081      	str	r1, [r0, #8]
}
 8017438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_cursor_init(pkt);
 801743c:	f7ff bfe3 	b.w	8017406 <net_pkt_cursor_init>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
 8017440:	4610      	mov	r0, r2
 8017442:	f7fd fd8c 	bl	8014f5e <net_buf_frag_last>
 8017446:	4621      	mov	r1, r4
}
 8017448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
 801744c:	f7fd bd8d 	b.w	8014f6a <net_buf_frag_insert>

08017450 <pkt_alloc_with_buffer>:
{
 8017450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017454:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8017458:	4606      	mov	r6, r0
 801745a:	468b      	mov	fp, r1
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 801745c:	4628      	mov	r0, r5
 801745e:	4621      	mov	r1, r4
{
 8017460:	4690      	mov	r8, r2
 8017462:	469a      	mov	sl, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 8017464:	f004 fcd2 	bl	801be0c <sys_clock_timeout_end_calc>
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
 8017468:	462a      	mov	r2, r5
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 801746a:	4607      	mov	r7, r0
 801746c:	4689      	mov	r9, r1
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
 801746e:	4630      	mov	r0, r6
 8017470:	4623      	mov	r3, r4
 8017472:	4659      	mov	r1, fp
 8017474:	f7ff ffcd 	bl	8017412 <pkt_alloc_on_iface>
	if (!pkt) {
 8017478:	4606      	mov	r6, r0
 801747a:	b320      	cbz	r0, 80174c6 <pkt_alloc_with_buffer+0x76>
	pkt->family = family;
 801747c:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 8017480:	f36a 1347 	bfi	r3, sl, #5, #3
 8017484:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8017488:	ea55 0304 	orrs.w	r3, r5, r4
 801748c:	d00e      	beq.n	80174ac <pkt_alloc_with_buffer+0x5c>
 801748e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8017492:	bf08      	it	eq
 8017494:	f1b5 3fff 	cmpeq.w	r5, #4294967295
 8017498:	d008      	beq.n	80174ac <pkt_alloc_with_buffer+0x5c>
		int64_t remaining = end - sys_clock_tick_get();
 801749a:	f7fb fc95 	bl	8012dc8 <sys_clock_tick_get>
 801749e:	1a3d      	subs	r5, r7, r0
 80174a0:	eb69 0401 	sbc.w	r4, r9, r1
 80174a4:	2c00      	cmp	r4, #0
 80174a6:	bfbc      	itt	lt
 80174a8:	2500      	movlt	r5, #0
 80174aa:	462c      	movlt	r4, r5
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
 80174ac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80174b0:	4641      	mov	r1, r8
 80174b2:	4630      	mov	r0, r6
 80174b4:	e9cd 5400 	strd	r5, r4, [sp]
 80174b8:	f7ef fd92 	bl	8006fe0 <net_pkt_alloc_buffer>
	if (ret) {
 80174bc:	b118      	cbz	r0, 80174c6 <pkt_alloc_with_buffer+0x76>
		net_pkt_unref(pkt);
 80174be:	4630      	mov	r0, r6
		return NULL;
 80174c0:	2600      	movs	r6, #0
		net_pkt_unref(pkt);
 80174c2:	f7ff ff0e 	bl	80172e2 <net_pkt_unref>
}
 80174c6:	4630      	mov	r0, r6
 80174c8:	b003      	add	sp, #12
 80174ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080174ce <net_pkt_skip>:

int net_pkt_skip(struct net_pkt *pkt, size_t skip)
{
	NET_DBG("pkt %p skip %zu", pkt, skip);

	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
 80174ce:	2301      	movs	r3, #1
{
 80174d0:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
 80174d2:	9300      	str	r3, [sp, #0]
 80174d4:	2300      	movs	r3, #0
{
 80174d6:	460a      	mov	r2, r1
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
 80174d8:	4619      	mov	r1, r3
 80174da:	f7ff fe61 	bl	80171a0 <net_pkt_cursor_operate>
}
 80174de:	b003      	add	sp, #12
 80174e0:	f85d fb04 	ldr.w	pc, [sp], #4

080174e4 <clone_pkt_lladdr>:
	return ret;
}

static void clone_pkt_lladdr(struct net_pkt *pkt, struct net_pkt *clone_pkt,
			     struct net_linkaddr *lladdr)
{
 80174e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t ll_addr_offset;

	if (!lladdr->addr)
 80174e6:	6813      	ldr	r3, [r2, #0]
{
 80174e8:	460f      	mov	r7, r1
 80174ea:	4616      	mov	r6, r2
	if (!lladdr->addr)
 80174ec:	b16b      	cbz	r3, 801750a <clone_pkt_lladdr+0x26>
	if (!ptr || !pkt || !pkt->buffer) {
 80174ee:	b160      	cbz	r0, 801750a <clone_pkt_lladdr+0x26>
 80174f0:	6884      	ldr	r4, [r0, #8]
 80174f2:	b154      	cbz	r4, 801750a <clone_pkt_lladdr+0x26>
	offset = 0U;
 80174f4:	2500      	movs	r5, #0
		if (buf->data <= ptr && ptr <= (buf->data + buf->len)) {
 80174f6:	68e1      	ldr	r1, [r4, #12]
 80174f8:	8a22      	ldrh	r2, [r4, #16]
 80174fa:	428b      	cmp	r3, r1
 80174fc:	d306      	bcc.n	801750c <clone_pkt_lladdr+0x28>
 80174fe:	1888      	adds	r0, r1, r2
 8017500:	4283      	cmp	r3, r0
 8017502:	d803      	bhi.n	801750c <clone_pkt_lladdr+0x28>
			ret = offset + (ptr - buf->data);
 8017504:	1a5b      	subs	r3, r3, r1
		return;

	ll_addr_offset = net_pkt_find_offset(pkt, lladdr->addr);

	if (ll_addr_offset >= 0) {
 8017506:	1959      	adds	r1, r3, r5
 8017508:	d506      	bpl.n	8017518 <clone_pkt_lladdr+0x34>
		net_pkt_cursor_init(clone_pkt);
		net_pkt_skip(clone_pkt, ll_addr_offset);
		lladdr->addr = net_pkt_cursor_get_pos(clone_pkt);
	}
}
 801750a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		offset += buf->len;
 801750c:	4415      	add	r5, r2
		buf = buf->frags;
 801750e:	6864      	ldr	r4, [r4, #4]
		offset += buf->len;
 8017510:	b2ad      	uxth	r5, r5
	while (buf) {
 8017512:	2c00      	cmp	r4, #0
 8017514:	d1ef      	bne.n	80174f6 <clone_pkt_lladdr+0x12>
 8017516:	e7f8      	b.n	801750a <clone_pkt_lladdr+0x26>
		net_pkt_cursor_init(clone_pkt);
 8017518:	4638      	mov	r0, r7
 801751a:	f7ff ff74 	bl	8017406 <net_pkt_cursor_init>
		net_pkt_skip(clone_pkt, ll_addr_offset);
 801751e:	f7ff ffd6 	bl	80174ce <net_pkt_skip>
	return pkt->cursor.pos;
 8017522:	693b      	ldr	r3, [r7, #16]
		lladdr->addr = net_pkt_cursor_get_pos(clone_pkt);
 8017524:	6033      	str	r3, [r6, #0]
 8017526:	e7f0      	b.n	801750a <clone_pkt_lladdr+0x26>

08017528 <clone_pkt_attributes>:
	ARG_UNUSED(clone_pkt);
}
#endif

static void clone_pkt_attributes(struct net_pkt *pkt, struct net_pkt *clone_pkt)
{
 8017528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return pkt->family;
 801752a:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 801752e:	4605      	mov	r5, r0
	pkt->family = family;
 8017530:	f891 2037 	ldrb.w	r2, [r1, #55]	; 0x37
 8017534:	460c      	mov	r4, r1
	return pkt->family;
 8017536:	095b      	lsrs	r3, r3, #5
	pkt->family = family;
 8017538:	f363 1247 	bfi	r2, r3, #5, #3
 801753c:	f881 2037 	strb.w	r2, [r1, #55]	; 0x37
	return pkt->context;
 8017540:	6943      	ldr	r3, [r0, #20]
	pkt->context = ctx;
 8017542:	614b      	str	r3, [r1, #20]
	return pkt->ip_hdr_len;
 8017544:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
	pkt->ip_hdr_len = len;
 8017548:	f881 3036 	strb.w	r3, [r1, #54]	; 0x36
	pkt->ip_dscp = dscp;
 801754c:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
	return pkt->ip_dscp;
 8017550:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
	pkt->ip_dscp = dscp;
 8017554:	f362 0305 	bfi	r3, r2, #0, #6
 8017558:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
	return pkt->ip_ecn;
 801755c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
	pkt->ip_ecn = ecn;
 8017560:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
	return pkt->ip_ecn;
 8017564:	099b      	lsrs	r3, r3, #6
	pkt->ip_ecn = ecn;
 8017566:	f363 1287 	bfi	r2, r3, #6, #2
 801756a:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
	return pkt->priority;
 801756e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
	pkt->captured = is_captured;
 8017572:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
	pkt->priority = priority;
 8017576:	f881 3041 	strb.w	r3, [r1, #65]	; 0x41
	return !!(pkt->captured);
 801757a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801757e:	f3c3 0380 	ubfx	r3, r3, #2, #1
	pkt->captured = is_captured;
 8017582:	f363 0282 	bfi	r2, r3, #2, #1
 8017586:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
	pkt->l2_processed = is_l2_processed;
 801758a:	b2d2      	uxtb	r2, r2
	return !!(pkt->l2_processed);
 801758c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8017590:	f3c3 1300 	ubfx	r3, r3, #4, #1
	pkt->l2_processed = is_l2_processed;
 8017594:	f363 1204 	bfi	r2, r3, #4, #1
 8017598:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
	return pkt->ll_proto_type;
 801759c:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	pkt->ll_proto_type = type;
 801759e:	868b      	strh	r3, [r1, #52]	; 0x34

	net_pkt_set_l2_bridged(clone_pkt, net_pkt_is_l2_bridged(pkt));
	net_pkt_set_l2_processed(clone_pkt, net_pkt_is_l2_processed(pkt));
	net_pkt_set_ll_proto_type(clone_pkt, net_pkt_ll_proto_type(pkt));

	if (pkt->buffer && clone_pkt->buffer) {
 80175a0:	6883      	ldr	r3, [r0, #8]
 80175a2:	b1fb      	cbz	r3, 80175e4 <clone_pkt_attributes+0xbc>
 80175a4:	688b      	ldr	r3, [r1, #8]
 80175a6:	b1eb      	cbz	r3, 80175e4 <clone_pkt_attributes+0xbc>
	return &pkt->lladdr_src;
 80175a8:	f101 0724 	add.w	r7, r1, #36	; 0x24
	return &pkt->lladdr_dst;
 80175ac:	f104 062c 	add.w	r6, r4, #44	; 0x2c
		memcpy(net_pkt_lladdr_src(clone_pkt), net_pkt_lladdr_src(pkt),
 80175b0:	f100 0124 	add.w	r1, r0, #36	; 0x24
 80175b4:	2208      	movs	r2, #8
 80175b6:	4638      	mov	r0, r7
 80175b8:	f7fd fb5d 	bl	8014c76 <memcpy>
		       sizeof(struct net_linkaddr));
		memcpy(net_pkt_lladdr_dst(clone_pkt), net_pkt_lladdr_dst(pkt),
 80175bc:	2208      	movs	r2, #8
 80175be:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 80175c2:	4630      	mov	r0, r6
 80175c4:	f7fd fb57 	bl	8014c76 <memcpy>
		 * into the fragment memory of the buffer,
		 * otherwise we have to set the ll address pointer
		 * relative to the new buffer to avoid dangling
		 * pointers into the source packet.
		 */
		if (pkt->buffer != clone_pkt->buffer) {
 80175c8:	68aa      	ldr	r2, [r5, #8]
 80175ca:	68a3      	ldr	r3, [r4, #8]
 80175cc:	429a      	cmp	r2, r3
 80175ce:	d009      	beq.n	80175e4 <clone_pkt_attributes+0xbc>
			clone_pkt_lladdr(pkt, clone_pkt, net_pkt_lladdr_src(clone_pkt));
 80175d0:	463a      	mov	r2, r7
 80175d2:	4621      	mov	r1, r4
 80175d4:	4628      	mov	r0, r5
 80175d6:	f7ff ff85 	bl	80174e4 <clone_pkt_lladdr>
			clone_pkt_lladdr(pkt, clone_pkt, net_pkt_lladdr_dst(clone_pkt));
 80175da:	4632      	mov	r2, r6
 80175dc:	4621      	mov	r1, r4
 80175de:	4628      	mov	r0, r5
 80175e0:	f7ff ff80 	bl	80174e4 <clone_pkt_lladdr>
	return pkt->family;
 80175e4:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 80175e8:	095b      	lsrs	r3, r3, #5
		}
	}

	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 80175ea:	2b01      	cmp	r3, #1
 80175ec:	d108      	bne.n	8017600 <clone_pkt_attributes+0xd8>
	return pkt->ipv4_ttl;
 80175ee:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	pkt->ipv4_ttl = ttl;
 80175f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return pkt->ipv4_opts_len;
 80175f6:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
	pkt->ipv4_opts_len = opts_len;
 80175fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		net_pkt_set_ipv6_next_hdr(clone_pkt,
					  net_pkt_ipv6_next_hdr(pkt));
	}

	clone_pkt_cb(pkt, clone_pkt);
}
 80175fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8017600:	2b02      	cmp	r3, #2
 8017602:	d1fc      	bne.n	80175fe <clone_pkt_attributes+0xd6>
	return pkt->ipv6_hop_limit;
 8017604:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	pkt->ipv6_hop_limit = hop_limit;
 8017608:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return pkt->ipv6_ext_len;
 801760c:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
	pkt->ipv6_ext_len = len;
 801760e:	8763      	strh	r3, [r4, #58]	; 0x3a
	return pkt->ipv6_ext_opt_len;
 8017610:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
	pkt->ipv6_ext_opt_len = len;
 8017614:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	return pkt->ipv6_prev_hdr_start;
 8017618:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
	pkt->ipv6_prev_hdr_start = offset;
 801761a:	87a3      	strh	r3, [r4, #60]	; 0x3c
	return pkt->ipv6_next_hdr;
 801761c:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	pkt->ipv6_next_hdr = next_hdr;
 8017620:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
 8017624:	e7eb      	b.n	80175fe <clone_pkt_attributes+0xd6>

08017626 <net_pkt_memset>:
{
 8017626:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
 8017628:	2301      	movs	r3, #1
{
 801762a:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
 801762c:	a903      	add	r1, sp, #12
 801762e:	9300      	str	r3, [sp, #0]
 8017630:	2300      	movs	r3, #0
 8017632:	f7ff fdb5 	bl	80171a0 <net_pkt_cursor_operate>
}
 8017636:	b005      	add	sp, #20
 8017638:	f85d fb04 	ldr.w	pc, [sp], #4

0801763c <net_pkt_read>:
	return net_pkt_cursor_operate(pkt, data, length, true, false);
 801763c:	2300      	movs	r3, #0
{
 801763e:	b507      	push	{r0, r1, r2, lr}
	return net_pkt_cursor_operate(pkt, data, length, true, false);
 8017640:	9300      	str	r3, [sp, #0]
 8017642:	2301      	movs	r3, #1
 8017644:	f7ff fdac 	bl	80171a0 <net_pkt_cursor_operate>
}
 8017648:	b003      	add	sp, #12
 801764a:	f85d fb04 	ldr.w	pc, [sp], #4

0801764e <net_pkt_read_be32>:
	ret = net_pkt_read(pkt, d32, sizeof(uint32_t));
 801764e:	2204      	movs	r2, #4
{
 8017650:	b513      	push	{r0, r1, r4, lr}
 8017652:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d32, sizeof(uint32_t));
 8017654:	eb0d 0102 	add.w	r1, sp, r2
 8017658:	f7ff fff0 	bl	801763c <net_pkt_read>
	*data = d32[0] << 24 | d32[1] << 16 | d32[2] << 8 | d32[3];
 801765c:	9b01      	ldr	r3, [sp, #4]
 801765e:	ba1b      	rev	r3, r3
 8017660:	6023      	str	r3, [r4, #0]
}
 8017662:	b002      	add	sp, #8
 8017664:	bd10      	pop	{r4, pc}

08017666 <net_pkt_copy>:
{
 8017666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801766a:	4606      	mov	r6, r0
 801766c:	460f      	mov	r7, r1
 801766e:	4614      	mov	r4, r2
	while (c_dst->buf && c_src->buf && length) {
 8017670:	68f3      	ldr	r3, [r6, #12]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d049      	beq.n	801770a <net_pkt_copy+0xa4>
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d046      	beq.n	801770a <net_pkt_copy+0xa4>
 801767c:	b90c      	cbnz	r4, 8017682 <net_pkt_copy+0x1c>
	return 0;
 801767e:	4620      	mov	r0, r4
 8017680:	e027      	b.n	80176d2 <net_pkt_copy+0x6c>
		pkt_cursor_advance(pkt_dst, true);
 8017682:	2101      	movs	r1, #1
 8017684:	4630      	mov	r0, r6
 8017686:	f7ff fd2a 	bl	80170de <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
 801768a:	4638      	mov	r0, r7
 801768c:	2100      	movs	r1, #0
 801768e:	f7ff fd26 	bl	80170de <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
 8017692:	68f0      	ldr	r0, [r6, #12]
 8017694:	b1d8      	cbz	r0, 80176ce <net_pkt_copy+0x68>
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	b1cb      	cbz	r3, 80176ce <net_pkt_copy+0x68>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
 801769a:	f8b3 8010 	ldrh.w	r8, [r3, #16]
 801769e:	300c      	adds	r0, #12
 80176a0:	68db      	ldr	r3, [r3, #12]
 80176a2:	693d      	ldr	r5, [r7, #16]
 80176a4:	1aed      	subs	r5, r5, r3
 80176a6:	f7fd fcc6 	bl	8015036 <net_buf_simple_max_len>
 80176aa:	4603      	mov	r3, r0
 80176ac:	eba8 0805 	sub.w	r8, r8, r5
		d_len = net_buf_max_len(c_dst->buf) - (c_dst->pos - c_dst->buf->data);
 80176b0:	e9d6 2003 	ldrd	r2, r0, [r6, #12]
		if (length < s_len && length < d_len) {
 80176b4:	45a0      	cmp	r8, r4
		d_len = net_buf_max_len(c_dst->buf) - (c_dst->pos - c_dst->buf->data);
 80176b6:	68d5      	ldr	r5, [r2, #12]
 80176b8:	eba0 0505 	sub.w	r5, r0, r5
 80176bc:	eba3 0505 	sub.w	r5, r3, r5
		if (length < s_len && length < d_len) {
 80176c0:	d901      	bls.n	80176c6 <net_pkt_copy+0x60>
 80176c2:	42a5      	cmp	r5, r4
 80176c4:	d807      	bhi.n	80176d6 <net_pkt_copy+0x70>
			if (d_len < s_len) {
 80176c6:	4545      	cmp	r5, r8
 80176c8:	bf28      	it	cs
 80176ca:	4645      	movcs	r5, r8
		if (!len) {
 80176cc:	b925      	cbnz	r5, 80176d8 <net_pkt_copy+0x72>
		return -ENOBUFS;
 80176ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 80176d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176d6:	4625      	mov	r5, r4
		memcpy(c_dst->pos, c_src->pos, len);
 80176d8:	462a      	mov	r2, r5
 80176da:	6939      	ldr	r1, [r7, #16]
 80176dc:	f7fd facb 	bl	8014c76 <memcpy>
	return pkt->overwrite;
 80176e0:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
 80176e4:	07db      	lsls	r3, r3, #31
 80176e6:	d404      	bmi.n	80176f2 <net_pkt_copy+0x8c>
	return net_buf_simple_add(&buf->b, len);
 80176e8:	68f0      	ldr	r0, [r6, #12]
 80176ea:	4629      	mov	r1, r5
 80176ec:	300c      	adds	r0, #12
 80176ee:	f7fd fc82 	bl	8014ff6 <net_buf_simple_add>
		pkt_cursor_update(pkt_dst, len, true);
 80176f2:	2201      	movs	r2, #1
 80176f4:	4629      	mov	r1, r5
 80176f6:	4630      	mov	r0, r6
		length -= len;
 80176f8:	1b64      	subs	r4, r4, r5
		pkt_cursor_update(pkt_dst, len, true);
 80176fa:	f7ff fd08 	bl	801710e <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
 80176fe:	2200      	movs	r2, #0
 8017700:	4629      	mov	r1, r5
 8017702:	4638      	mov	r0, r7
 8017704:	f7ff fd03 	bl	801710e <pkt_cursor_update>
		length -= len;
 8017708:	e7b2      	b.n	8017670 <net_pkt_copy+0xa>
	if (length) {
 801770a:	2c00      	cmp	r4, #0
 801770c:	d0b7      	beq.n	801767e <net_pkt_copy+0x18>
 801770e:	e7de      	b.n	80176ce <net_pkt_copy+0x68>

08017710 <net_pkt_remaining_data>:
size_t net_pkt_remaining_data(struct net_pkt *pkt)
{
	struct net_buf *buf;
	size_t data_length;

	if (!pkt || !pkt->cursor.buf || !pkt->cursor.pos) {
 8017710:	b170      	cbz	r0, 8017730 <net_pkt_remaining_data+0x20>
 8017712:	68c3      	ldr	r3, [r0, #12]
 8017714:	b15b      	cbz	r3, 801772e <net_pkt_remaining_data+0x1e>
 8017716:	6900      	ldr	r0, [r0, #16]
 8017718:	b150      	cbz	r0, 8017730 <net_pkt_remaining_data+0x20>
		return 0;
	}

	buf = pkt->cursor.buf;
	data_length = buf->len - (pkt->cursor.pos - buf->data);
 801771a:	68d9      	ldr	r1, [r3, #12]
 801771c:	8a1a      	ldrh	r2, [r3, #16]
 801771e:	1a40      	subs	r0, r0, r1
 8017720:	1a10      	subs	r0, r2, r0

	buf = buf->frags;
	while (buf) {
		data_length += buf->len;
		buf = buf->frags;
 8017722:	685b      	ldr	r3, [r3, #4]
	while (buf) {
 8017724:	b903      	cbnz	r3, 8017728 <net_pkt_remaining_data+0x18>
 8017726:	4770      	bx	lr
		data_length += buf->len;
 8017728:	8a1a      	ldrh	r2, [r3, #16]
 801772a:	4410      	add	r0, r2
 801772c:	e7f9      	b.n	8017722 <net_pkt_remaining_data+0x12>
		return 0;
 801772e:	4618      	mov	r0, r3
	}

	return data_length;
}
 8017730:	4770      	bx	lr

08017732 <net_pkt_update_length>:

int net_pkt_update_length(struct net_pkt *pkt, size_t length)
{
	struct net_buf *buf;

	for (buf = pkt->buffer; buf; buf = buf->frags) {
 8017732:	6883      	ldr	r3, [r0, #8]
 8017734:	b92b      	cbnz	r3, 8017742 <net_pkt_update_length+0x10>
			buf->len = length;
			length = 0;
		}
	}

	return !length ? 0 : -EINVAL;
 8017736:	2900      	cmp	r1, #0
}
 8017738:	bf14      	ite	ne
 801773a:	f06f 0015 	mvnne.w	r0, #21
 801773e:	2000      	moveq	r0, #0
 8017740:	4770      	bx	lr
		if (buf->len < length) {
 8017742:	8a1a      	ldrh	r2, [r3, #16]
 8017744:	428a      	cmp	r2, r1
			buf->len = length;
 8017746:	bf2a      	itet	cs
 8017748:	8219      	strhcs	r1, [r3, #16]
			length -= buf->len;
 801774a:	1a89      	subcc	r1, r1, r2
			length = 0;
 801774c:	2100      	movcs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
 801774e:	685b      	ldr	r3, [r3, #4]
 8017750:	e7f0      	b.n	8017734 <net_pkt_update_length+0x2>

08017752 <net_pkt_pull>:

int net_pkt_pull(struct net_pkt *pkt, size_t length)
{
 8017752:	b570      	push	{r4, r5, r6, lr}
 8017754:	4604      	mov	r4, r0
 8017756:	460d      	mov	r5, r1
	struct net_pkt_cursor *c_op = &pkt->cursor;

	while (length) {
 8017758:	b945      	cbnz	r5, 801776c <net_pkt_pull+0x1a>
		}

		length -= rem;
	}

	net_pkt_cursor_init(pkt);
 801775a:	4620      	mov	r0, r4
 801775c:	f7ff fe53 	bl	8017406 <net_pkt_cursor_init>

	if (length) {
		NET_DBG("Still some length to go %zu", length);
		return -ENOBUFS;
 8017760:	2d00      	cmp	r5, #0
	}

	return 0;
}
 8017762:	bf14      	ite	ne
 8017764:	f06f 0068 	mvnne.w	r0, #104	; 0x68
 8017768:	2000      	moveq	r0, #0
 801776a:	bd70      	pop	{r4, r5, r6, pc}
		pkt_cursor_advance(pkt, false);
 801776c:	2100      	movs	r1, #0
 801776e:	4620      	mov	r0, r4
 8017770:	f7ff fcb5 	bl	80170de <pkt_cursor_advance>
		if (!c_op->buf) {
 8017774:	68e1      	ldr	r1, [r4, #12]
 8017776:	2900      	cmp	r1, #0
 8017778:	d0ef      	beq.n	801775a <net_pkt_pull+0x8>
		left = c_op->buf->len - (c_op->pos - c_op->buf->data);
 801777a:	6922      	ldr	r2, [r4, #16]
 801777c:	68c8      	ldr	r0, [r1, #12]
 801777e:	8a0b      	ldrh	r3, [r1, #16]
 8017780:	1a12      	subs	r2, r2, r0
		if (!left) {
 8017782:	1a9a      	subs	r2, r3, r2
 8017784:	d0e9      	beq.n	801775a <net_pkt_pull+0x8>
		if (rem > length) {
 8017786:	42aa      	cmp	r2, r5
 8017788:	4616      	mov	r6, r2
 801778a:	bf28      	it	cs
 801778c:	462e      	movcs	r6, r5
		c_op->buf->len -= rem;
 801778e:	1b9b      	subs	r3, r3, r6
		if (left) {
 8017790:	1b92      	subs	r2, r2, r6
		c_op->buf->len -= rem;
 8017792:	820b      	strh	r3, [r1, #16]
		if (left) {
 8017794:	d005      	beq.n	80177a2 <net_pkt_pull+0x50>
			memmove(c_op->pos, c_op->pos+rem, left);
 8017796:	6920      	ldr	r0, [r4, #16]
 8017798:	1981      	adds	r1, r0, r6
 801779a:	f7fd fa54 	bl	8014c46 <memmove>
		length -= rem;
 801779e:	1bad      	subs	r5, r5, r6
 80177a0:	e7da      	b.n	8017758 <net_pkt_pull+0x6>
			struct net_buf *buf = pkt->buffer;
 80177a2:	68a0      	ldr	r0, [r4, #8]
			if (buf) {
 80177a4:	b120      	cbz	r0, 80177b0 <net_pkt_pull+0x5e>
				pkt->buffer = buf->frags;
 80177a6:	6843      	ldr	r3, [r0, #4]
 80177a8:	60a3      	str	r3, [r4, #8]
				buf->frags = NULL;
 80177aa:	6042      	str	r2, [r0, #4]
				net_buf_unref(buf);
 80177ac:	f7ec fda4 	bl	80042f8 <net_buf_unref>
			net_pkt_cursor_init(pkt);
 80177b0:	4620      	mov	r0, r4
 80177b2:	f7ff fe28 	bl	8017406 <net_pkt_cursor_init>
 80177b6:	e7f2      	b.n	801779e <net_pkt_pull+0x4c>

080177b8 <net_pkt_get_current_offset>:

uint16_t net_pkt_get_current_offset(struct net_pkt *pkt)
{
 80177b8:	b510      	push	{r4, lr}
	struct net_buf *buf = pkt->buffer;
	uint16_t offset;

	if (!pkt->cursor.buf || !pkt->cursor.pos) {
 80177ba:	68c2      	ldr	r2, [r0, #12]
{
 80177bc:	4603      	mov	r3, r0
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
 80177be:	b17a      	cbz	r2, 80177e0 <net_pkt_get_current_offset+0x28>
 80177c0:	6900      	ldr	r0, [r0, #16]
 80177c2:	b138      	cbz	r0, 80177d4 <net_pkt_get_current_offset+0x1c>
	struct net_buf *buf = pkt->buffer;
 80177c4:	6899      	ldr	r1, [r3, #8]
		return 0;
	}

	offset = 0U;
 80177c6:	2300      	movs	r3, #0

	while (buf != pkt->cursor.buf) {
 80177c8:	428a      	cmp	r2, r1
 80177ca:	d104      	bne.n	80177d6 <net_pkt_get_current_offset+0x1e>
		offset += buf->len;
		buf = buf->frags;
	}

	offset += pkt->cursor.pos - buf->data;
 80177cc:	68d2      	ldr	r2, [r2, #12]
 80177ce:	1a80      	subs	r0, r0, r2
 80177d0:	4418      	add	r0, r3
 80177d2:	b280      	uxth	r0, r0

	return offset;
}
 80177d4:	bd10      	pop	{r4, pc}
		offset += buf->len;
 80177d6:	8a0c      	ldrh	r4, [r1, #16]
		buf = buf->frags;
 80177d8:	6849      	ldr	r1, [r1, #4]
		offset += buf->len;
 80177da:	4423      	add	r3, r4
 80177dc:	b29b      	uxth	r3, r3
		buf = buf->frags;
 80177de:	e7f3      	b.n	80177c8 <net_pkt_get_current_offset+0x10>
		return 0;
 80177e0:	4610      	mov	r0, r2
 80177e2:	e7f7      	b.n	80177d4 <net_pkt_get_current_offset+0x1c>

080177e4 <net_pkt_clone_internal>:
{
 80177e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80177e8:	4604      	mov	r4, r0
 80177ea:	460d      	mov	r5, r1
 80177ec:	4691      	mov	r9, r2
 80177ee:	4698      	mov	r8, r3
	clone_pkt = pkt_alloc_with_buffer(slab, net_pkt_iface(pkt),
 80177f0:	f04f 0a00 	mov.w	sl, #0
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
 80177f4:	f7ff ffe0 	bl	80177b8 <net_pkt_get_current_offset>
 80177f8:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 80177fc:	4607      	mov	r7, r0
	clone_pkt = pkt_alloc_with_buffer(slab, net_pkt_iface(pkt),
 80177fe:	68a0      	ldr	r0, [r4, #8]
 8017800:	f7ff fcc6 	bl	8017190 <net_pkt_get_len.isra.0>
 8017804:	4653      	mov	r3, sl
 8017806:	4602      	mov	r2, r0
 8017808:	69a1      	ldr	r1, [r4, #24]
 801780a:	4628      	mov	r0, r5
 801780c:	f8cd a000 	str.w	sl, [sp]
 8017810:	f006 0601 	and.w	r6, r6, #1
 8017814:	e9cd 9802 	strd	r9, r8, [sp, #8]
 8017818:	f7ff fe1a 	bl	8017450 <pkt_alloc_with_buffer>
	if (!clone_pkt) {
 801781c:	4605      	mov	r5, r0
 801781e:	b1f8      	cbz	r0, 8017860 <net_pkt_clone_internal+0x7c>
	pkt->overwrite = overwrite;
 8017820:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	net_pkt_cursor_init(pkt);
 8017824:	4620      	mov	r0, r4
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
 8017826:	4621      	mov	r1, r4
 8017828:	f043 0301 	orr.w	r3, r3, #1
 801782c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	backup->pos = pkt->cursor.pos;
 8017830:	e9d4 9803 	ldrd	r9, r8, [r4, #12]
	net_pkt_cursor_init(pkt);
 8017834:	f7ff fde7 	bl	8017406 <net_pkt_cursor_init>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
 8017838:	68a0      	ldr	r0, [r4, #8]
 801783a:	f7ff fca9 	bl	8017190 <net_pkt_get_len.isra.0>
 801783e:	4602      	mov	r2, r0
 8017840:	4628      	mov	r0, r5
 8017842:	f7ff ff10 	bl	8017666 <net_pkt_copy>
 8017846:	b178      	cbz	r0, 8017868 <net_pkt_clone_internal+0x84>
		net_pkt_unref(clone_pkt);
 8017848:	4628      	mov	r0, r5
		return NULL;
 801784a:	4655      	mov	r5, sl
		net_pkt_unref(clone_pkt);
 801784c:	f7ff fd49 	bl	80172e2 <net_pkt_unref>
	pkt->overwrite = overwrite;
 8017850:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8017854:	f366 0300 	bfi	r3, r6, #0, #1
	pkt->cursor.pos = backup->pos;
 8017858:	e9c4 9803 	strd	r9, r8, [r4, #12]
	pkt->overwrite = overwrite;
 801785c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
}
 8017860:	4628      	mov	r0, r5
 8017862:	b004      	add	sp, #16
 8017864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017868:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
	clone_pkt_attributes(pkt, clone_pkt);
 801786c:	4620      	mov	r0, r4
 801786e:	4629      	mov	r1, r5
 8017870:	f043 0301 	orr.w	r3, r3, #1
 8017874:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
 8017878:	f7ff fe56 	bl	8017528 <clone_pkt_attributes>
	net_pkt_cursor_init(clone_pkt);
 801787c:	4628      	mov	r0, r5
 801787e:	f7ff fdc2 	bl	8017406 <net_pkt_cursor_init>
	if (cursor_offset) {
 8017882:	b117      	cbz	r7, 801788a <net_pkt_clone_internal+0xa6>
		net_pkt_skip(clone_pkt, cursor_offset);
 8017884:	4639      	mov	r1, r7
 8017886:	f7ff fe22 	bl	80174ce <net_pkt_skip>
 801788a:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 801788e:	f366 0300 	bfi	r3, r6, #0, #1
 8017892:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
 8017896:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801789a:	f366 0300 	bfi	r3, r6, #0, #1
	pkt->cursor.pos = backup->pos;
 801789e:	e9c4 9803 	strd	r9, r8, [r4, #12]
	pkt->overwrite = overwrite;
 80178a2:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	return clone_pkt;
 80178a6:	e7db      	b.n	8017860 <net_pkt_clone_internal+0x7c>

080178a8 <net_pkt_clone>:
	return net_pkt_clone_internal(pkt, pkt->slab, timeout);
 80178a8:	6841      	ldr	r1, [r0, #4]
 80178aa:	f7ff bf9b 	b.w	80177e4 <net_pkt_clone_internal>

080178ae <net_pkt_get_contiguous_len>:

	return len >= size;
}

size_t net_pkt_get_contiguous_len(struct net_pkt *pkt)
{
 80178ae:	b510      	push	{r4, lr}
	return pkt->overwrite;
 80178b0:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
 80178b4:	4604      	mov	r4, r0
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
 80178b6:	43c9      	mvns	r1, r1
 80178b8:	f001 0101 	and.w	r1, r1, #1
 80178bc:	f7ff fc0f 	bl	80170de <pkt_cursor_advance>

	if (pkt->cursor.buf && pkt->cursor.pos) {
 80178c0:	68e3      	ldr	r3, [r4, #12]
 80178c2:	b15b      	cbz	r3, 80178dc <net_pkt_get_contiguous_len+0x2e>
 80178c4:	6920      	ldr	r0, [r4, #16]
 80178c6:	b140      	cbz	r0, 80178da <net_pkt_get_contiguous_len+0x2c>
 80178c8:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
		size_t len;

		len = net_pkt_is_being_overwritten(pkt) ?
			pkt->cursor.buf->len : pkt->cursor.buf->size;
 80178cc:	07d2      	lsls	r2, r2, #31
 80178ce:	bf4c      	ite	mi
 80178d0:	8a1a      	ldrhmi	r2, [r3, #16]
 80178d2:	8a5a      	ldrhpl	r2, [r3, #18]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
 80178d4:	68db      	ldr	r3, [r3, #12]
 80178d6:	1ac0      	subs	r0, r0, r3
 80178d8:	1a10      	subs	r0, r2, r0
		return len;
	}

	return 0;
}
 80178da:	bd10      	pop	{r4, pc}
	return 0;
 80178dc:	4618      	mov	r0, r3
 80178de:	e7fc      	b.n	80178da <net_pkt_get_contiguous_len+0x2c>

080178e0 <net_pkt_is_contiguous>:
{
 80178e0:	b510      	push	{r4, lr}
 80178e2:	460c      	mov	r4, r1
	size_t len = net_pkt_get_contiguous_len(pkt);
 80178e4:	f7ff ffe3 	bl	80178ae <net_pkt_get_contiguous_len>
}
 80178e8:	42a0      	cmp	r0, r4
 80178ea:	bf34      	ite	cc
 80178ec:	2000      	movcc	r0, #0
 80178ee:	2001      	movcs	r0, #1
 80178f0:	bd10      	pop	{r4, pc}

080178f2 <net_pkt_write>:
{
 80178f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
 80178f4:	6903      	ldr	r3, [r0, #16]
{
 80178f6:	4604      	mov	r4, r0
 80178f8:	460e      	mov	r6, r1
 80178fa:	4615      	mov	r5, r2
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
 80178fc:	4299      	cmp	r1, r3
 80178fe:	d10a      	bne.n	8017916 <net_pkt_write+0x24>
	size_t len = net_pkt_get_contiguous_len(pkt);
 8017900:	f7ff ffd5 	bl	80178ae <net_pkt_get_contiguous_len>
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
 8017904:	42a8      	cmp	r0, r5
 8017906:	d306      	bcc.n	8017916 <net_pkt_write+0x24>
		return net_pkt_skip(pkt, length);
 8017908:	4629      	mov	r1, r5
 801790a:	4620      	mov	r0, r4
}
 801790c:	b002      	add	sp, #8
 801790e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return net_pkt_skip(pkt, length);
 8017912:	f7ff bddc 	b.w	80174ce <net_pkt_skip>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
 8017916:	2301      	movs	r3, #1
 8017918:	462a      	mov	r2, r5
 801791a:	4631      	mov	r1, r6
 801791c:	4620      	mov	r0, r4
 801791e:	9300      	str	r3, [sp, #0]
 8017920:	f7ff fc3e 	bl	80171a0 <net_pkt_cursor_operate>
}
 8017924:	b002      	add	sp, #8
 8017926:	bd70      	pop	{r4, r5, r6, pc}

08017928 <net_pkt_get_data>:

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
 8017928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
 801792a:	684e      	ldr	r6, [r1, #4]
{
 801792c:	4604      	mov	r4, r0
 801792e:	460d      	mov	r5, r1
	size_t len = net_pkt_get_contiguous_len(pkt);
 8017930:	f7ff ffbd 	bl	80178ae <net_pkt_get_contiguous_len>
		if (net_pkt_is_contiguous(pkt, access->size)) {
 8017934:	4286      	cmp	r6, r0
 8017936:	d803      	bhi.n	8017940 <net_pkt_get_data+0x18>
			access->data = pkt->cursor.pos;
 8017938:	6923      	ldr	r3, [r4, #16]
 801793a:	602b      	str	r3, [r5, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
 801793c:	6829      	ldr	r1, [r5, #0]
 801793e:	e010      	b.n	8017962 <net_pkt_get_data+0x3a>
 8017940:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
		} else if (net_pkt_is_being_overwritten(pkt)) {
 8017944:	07db      	lsls	r3, r3, #31
 8017946:	d5f9      	bpl.n	801793c <net_pkt_get_data+0x14>
			if (!access->data) {
 8017948:	6829      	ldr	r1, [r5, #0]
 801794a:	b151      	cbz	r1, 8017962 <net_pkt_get_data+0x3a>
			if (net_pkt_read(pkt, access->data, access->size)) {
 801794c:	686a      	ldr	r2, [r5, #4]
 801794e:	4620      	mov	r0, r4
	backup->pos = pkt->cursor.pos;
 8017950:	e9d4 7603 	ldrd	r7, r6, [r4, #12]
 8017954:	f7ff fe72 	bl	801763c <net_pkt_read>
	pkt->cursor.pos = backup->pos;
 8017958:	e9c4 7603 	strd	r7, r6, [r4, #12]
 801795c:	2800      	cmp	r0, #0
 801795e:	d0ed      	beq.n	801793c <net_pkt_get_data+0x14>
				return NULL;
 8017960:	2100      	movs	r1, #0
	}

	return NULL;
}
 8017962:	4608      	mov	r0, r1
 8017964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017966 <net_pkt_set_data>:
{
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
 8017966:	e9d1 1200 	ldrd	r1, r2, [r1]
 801796a:	f7ff bfc2 	b.w	80178f2 <net_pkt_write>

0801796e <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
 801796e:	4770      	bx	lr

08017970 <tc_rx_handler>:
{
 8017970:	b510      	push	{r4, lr}
 8017972:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
 8017974:	f04f 32ff 	mov.w	r2, #4294967295
 8017978:	f04f 33ff 	mov.w	r3, #4294967295
 801797c:	4620      	mov	r0, r4
 801797e:	f7fa fb0b 	bl	8011f98 <z_impl_k_queue_get>
		if (pkt == NULL) {
 8017982:	2800      	cmp	r0, #0
 8017984:	d0f6      	beq.n	8017974 <tc_rx_handler+0x4>
		net_process_rx_packet(pkt);
 8017986:	f7fd ff0d 	bl	80157a4 <net_process_rx_packet>
 801798a:	e7f3      	b.n	8017974 <tc_rx_handler+0x4>

0801798c <net_tx_priority2tc>:
}
 801798c:	2000      	movs	r0, #0
 801798e:	4770      	bx	lr

08017990 <net_tc_tx_init>:
}
 8017990:	4770      	bx	lr

08017992 <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8017992:	6802      	ldr	r2, [r0, #0]
{
 8017994:	4603      	mov	r3, r0
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8017996:	b942      	cbnz	r2, 80179aa <net_ipv6_is_addr_unspecified+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8017998:	6840      	ldr	r0, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 801799a:	b940      	cbnz	r0, 80179ae <net_ipv6_is_addr_unspecified+0x1c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 801799c:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 801799e:	b93a      	cbnz	r2, 80179b0 <net_ipv6_is_addr_unspecified+0x1e>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 80179a0:	68d8      	ldr	r0, [r3, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80179a2:	fab0 f080 	clz	r0, r0
 80179a6:	0940      	lsrs	r0, r0, #5
 80179a8:	4770      	bx	lr
 80179aa:	2000      	movs	r0, #0
 80179ac:	4770      	bx	lr
 80179ae:	4610      	mov	r0, r2
}
 80179b0:	4770      	bx	lr

080179b2 <conn_addr_cmp>:
{
 80179b2:	b538      	push	{r3, r4, r5, lr}
 80179b4:	461c      	mov	r4, r3
	return pkt->family;
 80179b6:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
	if (addr->sa_family != net_pkt_family(pkt)) {
 80179ba:	8813      	ldrh	r3, [r2, #0]
 80179bc:	0968      	lsrs	r0, r5, #5
 80179be:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80179c2:	d125      	bne.n	8017a10 <conn_addr_cmp+0x5e>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 80179c4:	2802      	cmp	r0, #2
 80179c6:	d113      	bne.n	80179f0 <conn_addr_cmp+0x3e>
	    net_pkt_family(pkt) == AF_INET6 &&
 80179c8:	2b02      	cmp	r3, #2
 80179ca:	d123      	bne.n	8017a14 <conn_addr_cmp+0x62>
			addr6 = ip_hdr->ipv6->src;
 80179cc:	6809      	ldr	r1, [r1, #0]
		if (is_remote) {
 80179ce:	b16c      	cbz	r4, 80179ec <conn_addr_cmp+0x3a>
			addr6 = ip_hdr->ipv6->src;
 80179d0:	3108      	adds	r1, #8
			    &net_sin6(addr)->sin6_addr)) {
 80179d2:	1d14      	adds	r4, r2, #4
		if (!net_ipv6_is_addr_unspecified(
 80179d4:	4620      	mov	r0, r4
 80179d6:	f7ff ffdc 	bl	8017992 <net_ipv6_is_addr_unspecified>
 80179da:	b930      	cbnz	r0, 80179ea <conn_addr_cmp+0x38>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 80179dc:	2210      	movs	r2, #16
 80179de:	4620      	mov	r0, r4
 80179e0:	f7fd f920 	bl	8014c24 <memcmp>
			if (!net_ipv6_addr_cmp_raw((uint8_t *)&net_sin6(addr)->sin6_addr,
 80179e4:	fab0 f080 	clz	r0, r0
 80179e8:	0940      	lsrs	r0, r0, #5
}
 80179ea:	bd38      	pop	{r3, r4, r5, pc}
			addr6 = ip_hdr->ipv6->dst;
 80179ec:	3118      	adds	r1, #24
 80179ee:	e7f0      	b.n	80179d2 <conn_addr_cmp+0x20>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 80179f0:	2801      	cmp	r0, #1
 80179f2:	d10f      	bne.n	8017a14 <conn_addr_cmp+0x62>
		   net_pkt_family(pkt) == AF_INET &&
 80179f4:	2b01      	cmp	r3, #1
 80179f6:	d1f8      	bne.n	80179ea <conn_addr_cmp+0x38>
			addr6 = ip_hdr->ipv6->src;
 80179f8:	680b      	ldr	r3, [r1, #0]
		if (is_remote) {
 80179fa:	b13c      	cbz	r4, 8017a0c <conn_addr_cmp+0x5a>
			addr4 = ip_hdr->ipv4->src;
 80179fc:	330c      	adds	r3, #12
		if (net_sin(addr)->sin_addr.s_addr) {
 80179fe:	6852      	ldr	r2, [r2, #4]
 8017a00:	b142      	cbz	r2, 8017a14 <conn_addr_cmp+0x62>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8017a02:	6818      	ldr	r0, [r3, #0]
			if (!net_ipv4_addr_cmp_raw((uint8_t *)&net_sin(addr)->sin_addr,
 8017a04:	1a83      	subs	r3, r0, r2
 8017a06:	4258      	negs	r0, r3
 8017a08:	4158      	adcs	r0, r3
 8017a0a:	e7ee      	b.n	80179ea <conn_addr_cmp+0x38>
			addr4 = ip_hdr->ipv4->dst;
 8017a0c:	3310      	adds	r3, #16
 8017a0e:	e7f6      	b.n	80179fe <conn_addr_cmp+0x4c>
		return false;
 8017a10:	2000      	movs	r0, #0
 8017a12:	e7ea      	b.n	80179ea <conn_addr_cmp+0x38>
	return true;
 8017a14:	2001      	movs	r0, #1
 8017a16:	e7e8      	b.n	80179ea <conn_addr_cmp+0x38>

08017a18 <dhcpv4_update_message_timeout>:
{
 8017a18:	b538      	push	{r3, r4, r5, lr}
	timeout = DHCPV4_INITIAL_RETRY_TIMEOUT << dhcpv4->attempts;
 8017a1a:	2404      	movs	r4, #4
 8017a1c:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
{
 8017a20:	4605      	mov	r5, r0
	timeout = DHCPV4_INITIAL_RETRY_TIMEOUT << dhcpv4->attempts;
 8017a22:	408c      	lsls	r4, r1
	if (timeout < DHCPV4_INITIAL_RETRY_TIMEOUT || timeout > 64) {
 8017a24:	1f23      	subs	r3, r4, #4
		timeout = 64;
 8017a26:	2b3d      	cmp	r3, #61	; 0x3d
 8017a28:	bf28      	it	cs
 8017a2a:	2440      	movcs	r4, #64	; 0x40
 8017a2c:	f7ec fb74 	bl	8004118 <z_impl_sys_rand32_get>
 8017a30:	1e61      	subs	r1, r4, #1
	timeout += (sys_rand32_get() % 3U) - 1;
 8017a32:	2403      	movs	r4, #3
	dhcpv4->attempts++;
 8017a34:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
	timeout += (sys_rand32_get() % 3U) - 1;
 8017a38:	fbb0 f4f4 	udiv	r4, r0, r4
 8017a3c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	dhcpv4->attempts++;
 8017a40:	3301      	adds	r3, #1
	timeout += (sys_rand32_get() % 3U) - 1;
 8017a42:	1b04      	subs	r4, r0, r4
	dhcpv4->attempts++;
 8017a44:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	dhcpv4_set_timeout(dhcpv4, timeout);
 8017a48:	4628      	mov	r0, r5
	timeout += (sys_rand32_get() % 3U) - 1;
 8017a4a:	440c      	add	r4, r1
	dhcpv4_set_timeout(dhcpv4, timeout);
 8017a4c:	4621      	mov	r1, r4
 8017a4e:	f7ef fee1 	bl	8007814 <dhcpv4_set_timeout>
}
 8017a52:	4620      	mov	r0, r4
 8017a54:	bd38      	pop	{r3, r4, r5, pc}

08017a56 <dhcpv4_add_option_length_value>:
{
 8017a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a58:	4615      	mov	r5, r2
 8017a5a:	f88d 1007 	strb.w	r1, [sp, #7]
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
 8017a5e:	2201      	movs	r2, #1
 8017a60:	f10d 0107 	add.w	r1, sp, #7
 8017a64:	4604      	mov	r4, r0
 8017a66:	461e      	mov	r6, r3
 8017a68:	f7ff ff43 	bl	80178f2 <net_pkt_write>
	if (net_pkt_write_u8(pkt, option) ||
 8017a6c:	b110      	cbz	r0, 8017a74 <dhcpv4_add_option_length_value+0x1e>
		return false;
 8017a6e:	2000      	movs	r0, #0
}
 8017a70:	b002      	add	sp, #8
 8017a72:	bd70      	pop	{r4, r5, r6, pc}
 8017a74:	2201      	movs	r2, #1
 8017a76:	f10d 0107 	add.w	r1, sp, #7
 8017a7a:	4620      	mov	r0, r4
 8017a7c:	f88d 5007 	strb.w	r5, [sp, #7]
 8017a80:	f7ff ff37 	bl	80178f2 <net_pkt_write>
	if (net_pkt_write_u8(pkt, option) ||
 8017a84:	2800      	cmp	r0, #0
 8017a86:	d1f2      	bne.n	8017a6e <dhcpv4_add_option_length_value+0x18>
	    net_pkt_write(pkt, value, size)) {
 8017a88:	462a      	mov	r2, r5
 8017a8a:	4631      	mov	r1, r6
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	f7ff ff30 	bl	80178f2 <net_pkt_write>
	    net_pkt_write_u8(pkt, size) ||
 8017a92:	fab0 f080 	clz	r0, r0
 8017a96:	0940      	lsrs	r0, r0, #5
 8017a98:	e7ea      	b.n	8017a70 <dhcpv4_add_option_length_value+0x1a>

08017a9a <dhcpv4_send_discover>:
{
 8017a9a:	b530      	push	{r4, r5, lr}
	iface->config.dhcpv4.xid++;
 8017a9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8017a9e:	b085      	sub	sp, #20
 8017aa0:	4604      	mov	r4, r0
	iface->config.dhcpv4.xid++;
 8017aa2:	3301      	adds	r3, #1
 8017aa4:	6243      	str	r3, [r0, #36]	; 0x24
	pkt = dhcpv4_create_message(iface, NET_DHCPV4_MSG_TYPE_DISCOVER,
 8017aa6:	f7ee fe9b 	bl	80067e0 <net_ipv4_broadcast_address>
 8017aaa:	2300      	movs	r3, #0
 8017aac:	9000      	str	r0, [sp, #0]
 8017aae:	2101      	movs	r1, #1
 8017ab0:	461a      	mov	r2, r3
 8017ab2:	4620      	mov	r0, r4
 8017ab4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017ab8:	f7ef ff36 	bl	8007928 <dhcpv4_create_message>
	if (!pkt) {
 8017abc:	4605      	mov	r5, r0
 8017abe:	b168      	cbz	r0, 8017adc <dhcpv4_send_discover+0x42>
	if (net_send_data(pkt) < 0) {
 8017ac0:	f7fd fdc1 	bl	8015646 <net_send_data>
 8017ac4:	2800      	cmp	r0, #0
 8017ac6:	db06      	blt.n	8017ad6 <dhcpv4_send_discover+0x3c>
	timeout = dhcpv4_update_message_timeout(&iface->config.dhcpv4);
 8017ac8:	f104 0010 	add.w	r0, r4, #16
}
 8017acc:	b005      	add	sp, #20
 8017ace:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	timeout = dhcpv4_update_message_timeout(&iface->config.dhcpv4);
 8017ad2:	f7ff bfa1 	b.w	8017a18 <dhcpv4_update_message_timeout>
		net_pkt_unref(pkt);
 8017ad6:	4628      	mov	r0, r5
 8017ad8:	f7ff fc03 	bl	80172e2 <net_pkt_unref>
	return iface->config.dhcpv4.xid %
 8017adc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017ade:	2309      	movs	r3, #9
 8017ae0:	fbb0 f3f3 	udiv	r3, r0, r3
 8017ae4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8017ae8:	1ac0      	subs	r0, r0, r3
			 DHCPV4_INITIAL_DELAY_MIN) +
 8017aea:	3001      	adds	r0, #1
}
 8017aec:	b005      	add	sp, #20
 8017aee:	bd30      	pop	{r4, r5, pc}

08017af0 <dhcpv4_send_request>:
{
 8017af0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017af4:	4604      	mov	r4, r0
	const struct in_addr *server_addr = net_ipv4_broadcast_address();
 8017af6:	f7ee fe73 	bl	80067e0 <net_ipv4_broadcast_address>
 8017afa:	4680      	mov	r8, r0
	iface->config.dhcpv4.xid++;
 8017afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017afe:	3301      	adds	r3, #1
 8017b00:	6263      	str	r3, [r4, #36]	; 0x24
	switch (iface->config.dhcpv4.state) {
 8017b02:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8017b06:	2b06      	cmp	r3, #6
 8017b08:	d830      	bhi.n	8017b6c <dhcpv4_send_request+0x7c>
 8017b0a:	e8df f003 	tbb	[pc, r3]
 8017b0e:	3232      	.short	0x3232
 8017b10:	2c260432 	.word	0x2c260432
 8017b14:	32          	.byte	0x32
 8017b15:	00          	.byte	0x00
		with_server_id = true;
 8017b16:	2501      	movs	r5, #1
	const struct in_addr *ciaddr = NULL;
 8017b18:	2700      	movs	r7, #0
		memcpy(&iface->config.dhcpv4.request_server_addr, &iface->config.dhcpv4.server_id,
 8017b1a:	2204      	movs	r2, #4
 8017b1c:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8017b20:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8017b24:	f7fd f8a7 	bl	8014c76 <memcpy>
	timeout = dhcpv4_update_message_timeout(&iface->config.dhcpv4);
 8017b28:	f104 0010 	add.w	r0, r4, #16
 8017b2c:	f7ff ff74 	bl	8017a18 <dhcpv4_update_message_timeout>
	pkt = dhcpv4_create_message(iface, NET_DHCPV4_MSG_TYPE_REQUEST,
 8017b30:	463b      	mov	r3, r7
	timeout = dhcpv4_update_message_timeout(&iface->config.dhcpv4);
 8017b32:	4606      	mov	r6, r0
	pkt = dhcpv4_create_message(iface, NET_DHCPV4_MSG_TYPE_REQUEST,
 8017b34:	463a      	mov	r2, r7
 8017b36:	4620      	mov	r0, r4
 8017b38:	2103      	movs	r1, #3
 8017b3a:	f8cd 8000 	str.w	r8, [sp]
 8017b3e:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8017b42:	f7ef fef1 	bl	8007928 <dhcpv4_create_message>
	if (!pkt) {
 8017b46:	4604      	mov	r4, r0
 8017b48:	b1a8      	cbz	r0, 8017b76 <dhcpv4_send_request+0x86>
	if (net_send_data(pkt) < 0) {
 8017b4a:	f7fd fd7c 	bl	8015646 <net_send_data>
 8017b4e:	2800      	cmp	r0, #0
 8017b50:	da11      	bge.n	8017b76 <dhcpv4_send_request+0x86>
		net_pkt_unref(pkt);
 8017b52:	4620      	mov	r0, r4
 8017b54:	f7ff fbc5 	bl	80172e2 <net_pkt_unref>
 8017b58:	e00d      	b.n	8017b76 <dhcpv4_send_request+0x86>
		ciaddr = &iface->config.dhcpv4.requested_ip;
 8017b5a:	f104 0738 	add.w	r7, r4, #56	; 0x38
		server_addr = &iface->config.dhcpv4.server_id;
 8017b5e:	f104 0834 	add.w	r8, r4, #52	; 0x34
	bool with_server_id = false;
 8017b62:	2500      	movs	r5, #0
		break;
 8017b64:	e7e0      	b.n	8017b28 <dhcpv4_send_request+0x38>
		ciaddr = &iface->config.dhcpv4.requested_ip;
 8017b66:	f104 0738 	add.w	r7, r4, #56	; 0x38
 8017b6a:	e7fa      	b.n	8017b62 <dhcpv4_send_request+0x72>
	switch (iface->config.dhcpv4.state) {
 8017b6c:	2500      	movs	r5, #0
 8017b6e:	462f      	mov	r7, r5
 8017b70:	e7da      	b.n	8017b28 <dhcpv4_send_request+0x38>
 8017b72:	f04f 36ff 	mov.w	r6, #4294967295
}
 8017b76:	4630      	mov	r0, r6
 8017b78:	b004      	add	sp, #16
 8017b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017b7e <net_dhcpv4_start>:
	return dhcpv4_start_internal(iface, true);
 8017b7e:	2101      	movs	r1, #1
 8017b80:	f7ef be94 	b.w	80078ac <dhcpv4_start_internal>

08017b84 <icmpv4_create>:
{
 8017b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8017b86:	2304      	movs	r3, #4
 8017b88:	2500      	movs	r5, #0
{
 8017b8a:	460f      	mov	r7, r1
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
 8017b8c:	4669      	mov	r1, sp
{
 8017b8e:	4604      	mov	r4, r0
 8017b90:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8017b92:	e9cd 5300 	strd	r5, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
 8017b96:	f7ff fec7 	bl	8017928 <net_pkt_get_data>
	if (!icmp_hdr) {
 8017b9a:	b148      	cbz	r0, 8017bb0 <icmpv4_create+0x2c>
	icmp_hdr->type   = icmp_type;
 8017b9c:	7007      	strb	r7, [r0, #0]
	return net_pkt_set_data(pkt, &icmpv4_access);
 8017b9e:	4669      	mov	r1, sp
	icmp_hdr->code   = icmp_code;
 8017ba0:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
 8017ba2:	7085      	strb	r5, [r0, #2]
 8017ba4:	70c5      	strb	r5, [r0, #3]
	return net_pkt_set_data(pkt, &icmpv4_access);
 8017ba6:	4620      	mov	r0, r4
 8017ba8:	f7ff fedd 	bl	8017966 <net_pkt_set_data>
}
 8017bac:	b003      	add	sp, #12
 8017bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
 8017bb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8017bb4:	e7fa      	b.n	8017bac <icmpv4_create+0x28>

08017bb6 <net_ipv4_is_addr_bcast>:
{
 8017bb6:	b538      	push	{r3, r4, r5, lr}
 8017bb8:	460c      	mov	r4, r1
 8017bba:	4605      	mov	r5, r0
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8017bbc:	f7ee fe10 	bl	80067e0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8017bc0:	6803      	ldr	r3, [r0, #0]
 8017bc2:	6822      	ldr	r2, [r4, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8017bc4:	429a      	cmp	r2, r3
 8017bc6:	d005      	beq.n	8017bd4 <net_ipv4_is_addr_bcast+0x1e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8017bc8:	4621      	mov	r1, r4
 8017bca:	4628      	mov	r0, r5
}
 8017bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8017bd0:	f7ee b9dc 	b.w	8005f8c <net_if_ipv4_is_addr_bcast>
}
 8017bd4:	2001      	movs	r0, #1
 8017bd6:	bd38      	pop	{r3, r4, r5, pc}

08017bd8 <icmpv4_handle_echo_request>:
{
 8017bd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return UNALIGNED_GET(&addr->s_addr) == 0;
 8017bdc:	68cb      	ldr	r3, [r1, #12]
 8017bde:	4606      	mov	r6, r0
 8017be0:	460f      	mov	r7, r1
	if (net_ipv4_is_addr_unspecified((struct in_addr *)ip_hdr->src)) {
 8017be2:	b173      	cbz	r3, 8017c02 <icmpv4_handle_echo_request+0x2a>
	payload_len = net_pkt_get_len(pkt) -
 8017be4:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
 8017be6:	2200      	movs	r2, #0
	while (buf) {
 8017be8:	b96b      	cbnz	r3, 8017c06 <icmpv4_handle_echo_request+0x2e>
	return pkt->ipv4_opts_len;
 8017bea:	f896 103a 	ldrb.w	r1, [r6, #58]	; 0x3a
		      net_pkt_ip_hdr_len(pkt) -
 8017bee:	f896 5036 	ldrb.w	r5, [r6, #54]	; 0x36
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
 8017bf2:	440d      	add	r5, r1
 8017bf4:	f5c5 457f 	rsb	r5, r5, #65280	; 0xff00
 8017bf8:	35fc      	adds	r5, #252	; 0xfc
 8017bfa:	4415      	add	r5, r2
	payload_len = net_pkt_get_len(pkt) -
 8017bfc:	b22d      	sxth	r5, r5
	if (payload_len < NET_ICMPV4_UNUSED_LEN) {
 8017bfe:	2d03      	cmp	r5, #3
 8017c00:	dc05      	bgt.n	8017c0e <icmpv4_handle_echo_request+0x36>
	return NET_DROP;
 8017c02:	2002      	movs	r0, #2
 8017c04:	e052      	b.n	8017cac <icmpv4_handle_echo_request+0xd4>
		bytes += buf->len;
 8017c06:	8a19      	ldrh	r1, [r3, #16]
		buf = buf->frags;
 8017c08:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 8017c0a:	440a      	add	r2, r1
		buf = buf->frags;
 8017c0c:	e7ec      	b.n	8017be8 <icmpv4_handle_echo_request+0x10>
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
 8017c0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8017c12:	2300      	movs	r3, #0
 8017c14:	4429      	add	r1, r5
 8017c16:	69b0      	ldr	r0, [r6, #24]
 8017c18:	e9cd 2300 	strd	r2, r3, [sp]
 8017c1c:	2301      	movs	r3, #1
 8017c1e:	461a      	mov	r2, r3
 8017c20:	f7ef faa2 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!reply) {
 8017c24:	4604      	mov	r4, r0
 8017c26:	2800      	cmp	r0, #0
 8017c28:	d0eb      	beq.n	8017c02 <icmpv4_handle_echo_request+0x2a>
	if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->dst) ||
 8017c2a:	693b      	ldr	r3, [r7, #16]
 8017c2c:	f107 0810 	add.w	r8, r7, #16
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8017c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017c34:	2be0      	cmp	r3, #224	; 0xe0
 8017c36:	d13c      	bne.n	8017cb2 <icmpv4_handle_echo_request+0xda>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
 8017c38:	4641      	mov	r1, r8
 8017c3a:	69b0      	ldr	r0, [r6, #24]
 8017c3c:	f7ee f9d6 	bl	8005fec <net_if_ipv4_select_src_addr>
 8017c40:	4680      	mov	r8, r0
	return pkt->ip_dscp;
 8017c42:	f896 2040 	ldrb.w	r2, [r6, #64]	; 0x40
	if (net_ipv4_create(reply, src, (struct in_addr *)ip_hdr->src)) {
 8017c46:	4641      	mov	r1, r8
	pkt->ip_dscp = dscp;
 8017c48:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8017c4c:	4620      	mov	r0, r4
 8017c4e:	f362 0305 	bfi	r3, r2, #0, #6
 8017c52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	return pkt->ip_ecn;
 8017c56:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	pkt->ip_ecn = ecn;
 8017c5a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
	return pkt->ip_ecn;
 8017c5e:	099b      	lsrs	r3, r3, #6
	pkt->ip_ecn = ecn;
 8017c60:	f363 1287 	bfi	r2, r3, #6, #2
 8017c64:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8017c68:	f107 020c 	add.w	r2, r7, #12
 8017c6c:	f000 f9c2 	bl	8017ff4 <net_ipv4_create>
 8017c70:	4602      	mov	r2, r0
 8017c72:	bb28      	cbnz	r0, 8017cc0 <icmpv4_handle_echo_request+0xe8>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
 8017c74:	4601      	mov	r1, r0
 8017c76:	4620      	mov	r0, r4
 8017c78:	f7ff ff84 	bl	8017b84 <icmpv4_create>
 8017c7c:	bb00      	cbnz	r0, 8017cc0 <icmpv4_handle_echo_request+0xe8>
	    net_pkt_copy(reply, pkt, payload_len)) {
 8017c7e:	462a      	mov	r2, r5
 8017c80:	4631      	mov	r1, r6
 8017c82:	4620      	mov	r0, r4
 8017c84:	f7ff fcef 	bl	8017666 <net_pkt_copy>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
 8017c88:	4605      	mov	r5, r0
 8017c8a:	b9c8      	cbnz	r0, 8017cc0 <icmpv4_handle_echo_request+0xe8>
	net_pkt_cursor_init(reply);
 8017c8c:	4620      	mov	r0, r4
 8017c8e:	f7ff fbba 	bl	8017406 <net_pkt_cursor_init>
	net_ipv4_finalize(reply, IPPROTO_ICMP);
 8017c92:	2101      	movs	r1, #1
 8017c94:	4620      	mov	r0, r4
 8017c96:	f000 f9c1 	bl	801801c <net_ipv4_finalize>
	if (net_send_data(reply) < 0) {
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	f7fd fcd3 	bl	8015646 <net_send_data>
 8017ca0:	2800      	cmp	r0, #0
 8017ca2:	db0d      	blt.n	8017cc0 <icmpv4_handle_echo_request+0xe8>
	net_pkt_unref(pkt);
 8017ca4:	4630      	mov	r0, r6
 8017ca6:	f7ff fb1c 	bl	80172e2 <net_pkt_unref>
	return NET_OK;
 8017caa:	4628      	mov	r0, r5
}
 8017cac:	b002      	add	sp, #8
 8017cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
 8017cb2:	4641      	mov	r1, r8
 8017cb4:	69b0      	ldr	r0, [r6, #24]
 8017cb6:	f7ff ff7e 	bl	8017bb6 <net_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->dst) ||
 8017cba:	2800      	cmp	r0, #0
 8017cbc:	d1bc      	bne.n	8017c38 <icmpv4_handle_echo_request+0x60>
 8017cbe:	e7c0      	b.n	8017c42 <icmpv4_handle_echo_request+0x6a>
		net_pkt_unref(reply);
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f7ff fb0e 	bl	80172e2 <net_pkt_unref>
 8017cc6:	e79c      	b.n	8017c02 <icmpv4_handle_echo_request+0x2a>

08017cc8 <net_icmpv4_finalize>:
{
 8017cc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8017cca:	2304      	movs	r3, #4
 8017ccc:	2600      	movs	r6, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
 8017cce:	4669      	mov	r1, sp
{
 8017cd0:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8017cd2:	e9cd 6300 	strd	r6, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
 8017cd6:	f7ff fe27 	bl	8017928 <net_pkt_get_data>
	if (!icmp_hdr) {
 8017cda:	4604      	mov	r4, r0
 8017cdc:	b180      	cbz	r0, 8017d00 <net_icmpv4_finalize+0x38>
	icmp_hdr->chksum = 0U;
 8017cde:	7086      	strb	r6, [r0, #2]
 8017ce0:	70c6      	strb	r6, [r0, #3]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 8017ce2:	69a8      	ldr	r0, [r5, #24]
 8017ce4:	f7fe f9a8 	bl	8016038 <net_if_need_calc_tx_checksum>
 8017ce8:	b120      	cbz	r0, 8017cf4 <net_icmpv4_finalize+0x2c>
	return net_calc_chksum(pkt, IPPROTO_ICMP);
 8017cea:	2101      	movs	r1, #1
 8017cec:	4628      	mov	r0, r5
 8017cee:	f7fe fbfb 	bl	80164e8 <net_calc_chksum>
		icmp_hdr->chksum = net_calc_chksum_icmpv4(pkt);
 8017cf2:	8060      	strh	r0, [r4, #2]
	return net_pkt_set_data(pkt, &icmpv4_access);
 8017cf4:	4669      	mov	r1, sp
 8017cf6:	4628      	mov	r0, r5
 8017cf8:	f7ff fe35 	bl	8017966 <net_pkt_set_data>
}
 8017cfc:	b002      	add	sp, #8
 8017cfe:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 8017d00:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8017d04:	e7fa      	b.n	8017cfc <net_icmpv4_finalize+0x34>

08017d06 <net_icmpv4_send_echo_request>:
{
 8017d06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d0a:	469a      	mov	sl, r3
 8017d0c:	b087      	sub	sp, #28
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8017d0e:	2300      	movs	r3, #0
 8017d10:	f04f 0904 	mov.w	r9, #4
	if (!iface->config.ip.ipv4) {
 8017d14:	68c7      	ldr	r7, [r0, #12]
{
 8017d16:	4688      	mov	r8, r1
 8017d18:	4616      	mov	r6, r2
 8017d1a:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
 8017d1e:	9d12      	ldr	r5, [sp, #72]	; 0x48
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8017d20:	e9cd 3904 	strd	r3, r9, [sp, #16]
	if (!iface->config.ip.ipv4) {
 8017d24:	2f00      	cmp	r7, #0
 8017d26:	d07f      	beq.n	8017e28 <net_icmpv4_send_echo_request+0x122>
	pkt = net_pkt_alloc_with_buffer(iface,
 8017d28:	f242 7210 	movw	r2, #10000	; 0x2710
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	eb05 0109 	add.w	r1, r5, r9
	src = &iface->config.ip.ipv4->unicast[0].address.in_addr;
 8017d32:	444f      	add	r7, r9
	pkt = net_pkt_alloc_with_buffer(iface,
 8017d34:	e9cd 2300 	strd	r2, r3, [sp]
 8017d38:	2301      	movs	r3, #1
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	f7ef fa14 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 8017d40:	4604      	mov	r4, r0
 8017d42:	2800      	cmp	r0, #0
 8017d44:	d073      	beq.n	8017e2e <net_icmpv4_send_echo_request+0x128>
	return (tos & NET_IPV4_DSCP_MASK) >> NET_IPV4_DSCP_OFFSET;
 8017d46:	ea4f 039b 	mov.w	r3, fp, lsr #2
	if (net_ipv4_create(pkt, src, dst) ||
 8017d4a:	4642      	mov	r2, r8
 8017d4c:	4639      	mov	r1, r7
	pkt->ip_dscp = dscp;
 8017d4e:	ea43 1b8b 	orr.w	fp, r3, fp, lsl #6
 8017d52:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
 8017d56:	f000 f94d 	bl	8017ff4 <net_ipv4_create>
 8017d5a:	4602      	mov	r2, r0
 8017d5c:	b140      	cbz	r0, 8017d70 <net_icmpv4_send_echo_request+0x6a>
	int ret = -ENOBUFS;
 8017d5e:	f06f 0768 	mvn.w	r7, #104	; 0x68
	net_pkt_unref(pkt);
 8017d62:	4620      	mov	r0, r4
 8017d64:	f7ff fabd 	bl	80172e2 <net_pkt_unref>
}
 8017d68:	4638      	mov	r0, r7
 8017d6a:	b007      	add	sp, #28
 8017d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    icmpv4_create(pkt, NET_ICMPV4_ECHO_REQUEST, 0)) {
 8017d70:	2108      	movs	r1, #8
 8017d72:	4620      	mov	r0, r4
 8017d74:	f7ff ff06 	bl	8017b84 <icmpv4_create>
	if (net_ipv4_create(pkt, src, dst) ||
 8017d78:	4607      	mov	r7, r0
 8017d7a:	2800      	cmp	r0, #0
 8017d7c:	d1ef      	bne.n	8017d5e <net_icmpv4_send_echo_request+0x58>
	echo_req = (struct net_icmpv4_echo_req *)net_pkt_get_data(
 8017d7e:	a904      	add	r1, sp, #16
 8017d80:	4620      	mov	r0, r4
 8017d82:	f7ff fdd1 	bl	8017928 <net_pkt_get_data>
	if (!echo_req) {
 8017d86:	2800      	cmp	r0, #0
 8017d88:	d0e9      	beq.n	8017d5e <net_icmpv4_send_echo_request+0x58>
	echo_req->sequence   = htons(sequence);
 8017d8a:	fa9a f39a 	rev16.w	r3, sl
	echo_req->identifier = htons(identifier);
 8017d8e:	ba76      	rev16	r6, r6
	net_pkt_set_data(pkt, &icmpv4_access);
 8017d90:	a904      	add	r1, sp, #16
	echo_req->sequence   = htons(sequence);
 8017d92:	8043      	strh	r3, [r0, #2]
	echo_req->identifier = htons(identifier);
 8017d94:	8006      	strh	r6, [r0, #0]
	net_pkt_set_data(pkt, &icmpv4_access);
 8017d96:	4620      	mov	r0, r4
 8017d98:	f7ff fde5 	bl	8017966 <net_pkt_set_data>
	if (data != NULL && data_size > 0) {
 8017d9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017d9e:	b1a3      	cbz	r3, 8017dca <net_icmpv4_send_echo_request+0xc4>
 8017da0:	b125      	cbz	r5, 8017dac <net_icmpv4_send_echo_request+0xa6>
		net_pkt_write(pkt, data, data_size);
 8017da2:	462a      	mov	r2, r5
 8017da4:	4619      	mov	r1, r3
 8017da6:	4620      	mov	r0, r4
 8017da8:	f7ff fda3 	bl	80178f2 <net_pkt_write>
	net_pkt_cursor_init(pkt);
 8017dac:	4620      	mov	r0, r4
 8017dae:	f7ff fb2a 	bl	8017406 <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
 8017db2:	2101      	movs	r1, #1
 8017db4:	4620      	mov	r0, r4
 8017db6:	f000 f931 	bl	801801c <net_ipv4_finalize>
	if (net_send_data(pkt) >= 0) {
 8017dba:	4620      	mov	r0, r4
 8017dbc:	f7fd fc43 	bl	8015646 <net_send_data>
 8017dc0:	2800      	cmp	r0, #0
 8017dc2:	dad1      	bge.n	8017d68 <net_icmpv4_send_echo_request+0x62>
	ret = -EIO;
 8017dc4:	f06f 0704 	mvn.w	r7, #4
 8017dc8:	e7cb      	b.n	8017d62 <net_icmpv4_send_echo_request+0x5c>
	} else if (data == NULL && data_size > 0) {
 8017dca:	2d00      	cmp	r5, #0
 8017dcc:	d0ee      	beq.n	8017dac <net_icmpv4_send_echo_request+0xa6>
		if (data_size >= sizeof(uint32_t)) {
 8017dce:	2d03      	cmp	r5, #3
 8017dd0:	d91e      	bls.n	8017e10 <net_icmpv4_send_echo_request+0x10a>
 8017dd2:	f7f8 fb57 	bl	8010484 <sys_clock_cycle_get_32>
 8017dd6:	4682      	mov	sl, r0
 8017dd8:	f7f8 fb54 	bl	8010484 <sys_clock_cycle_get_32>
 8017ddc:	4680      	mov	r8, r0
 8017dde:	f7f8 fb51 	bl	8010484 <sys_clock_cycle_get_32>
 8017de2:	4606      	mov	r6, r0
			uint32_t time_stamp = htonl(k_cycle_get_32());
 8017de4:	ea4f 2818 	mov.w	r8, r8, lsr #8
			data_size -= sizeof(time_stamp);
 8017de8:	3d04      	subs	r5, #4
 8017dea:	f7f8 fb4b 	bl	8010484 <sys_clock_cycle_get_32>
			net_pkt_write(pkt, &time_stamp, sizeof(time_stamp));
 8017dee:	464a      	mov	r2, r9
			uint32_t time_stamp = htonl(k_cycle_get_32());
 8017df0:	0603      	lsls	r3, r0, #24
 8017df2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8017df6:	0236      	lsls	r6, r6, #8
			net_pkt_write(pkt, &time_stamp, sizeof(time_stamp));
 8017df8:	a903      	add	r1, sp, #12
			uint32_t time_stamp = htonl(k_cycle_get_32());
 8017dfa:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
			net_pkt_write(pkt, &time_stamp, sizeof(time_stamp));
 8017dfe:	4620      	mov	r0, r4
			uint32_t time_stamp = htonl(k_cycle_get_32());
 8017e00:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8017e04:	ea43 0308 	orr.w	r3, r3, r8
 8017e08:	4333      	orrs	r3, r6
 8017e0a:	9303      	str	r3, [sp, #12]
			net_pkt_write(pkt, &time_stamp, sizeof(time_stamp));
 8017e0c:	f7ff fd71 	bl	80178f2 <net_pkt_write>
		for (size_t i = 0; i < data_size; i++) {
 8017e10:	2600      	movs	r6, #0
 8017e12:	42b5      	cmp	r5, r6
 8017e14:	d0ca      	beq.n	8017dac <net_icmpv4_send_echo_request+0xa6>
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
 8017e16:	2201      	movs	r2, #1
 8017e18:	a903      	add	r1, sp, #12
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	f88d 600c 	strb.w	r6, [sp, #12]
 8017e20:	3601      	adds	r6, #1
 8017e22:	f7ff fd66 	bl	80178f2 <net_pkt_write>
 8017e26:	e7f4      	b.n	8017e12 <net_icmpv4_send_echo_request+0x10c>
		return -ENETUNREACH;
 8017e28:	f06f 0771 	mvn.w	r7, #113	; 0x71
 8017e2c:	e79c      	b.n	8017d68 <net_icmpv4_send_echo_request+0x62>
		return -ENOMEM;
 8017e2e:	f06f 070b 	mvn.w	r7, #11
 8017e32:	e799      	b.n	8017d68 <net_icmpv4_send_echo_request+0x62>

08017e34 <net_icmpv4_send_error>:
{
 8017e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 8017e38:	2314      	movs	r3, #20
{
 8017e3a:	b086      	sub	sp, #24
 8017e3c:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 8017e3e:	2400      	movs	r4, #0
{
 8017e40:	4688      	mov	r8, r1
 8017e42:	4691      	mov	r9, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 8017e44:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
 8017e48:	f7ff fadd 	bl	8017406 <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(orig, &ipv4_access);
 8017e4c:	a902      	add	r1, sp, #8
 8017e4e:	4628      	mov	r0, r5
 8017e50:	f7ff fd6a 	bl	8017928 <net_pkt_get_data>
	if (!ip_hdr) {
 8017e54:	4606      	mov	r6, r0
 8017e56:	b910      	cbnz	r0, 8017e5e <net_icmpv4_send_error+0x2a>
	int err = -EIO;
 8017e58:	f06f 0604 	mvn.w	r6, #4
 8017e5c:	e00f      	b.n	8017e7e <net_icmpv4_send_error+0x4a>
	if (ip_hdr->proto == IPPROTO_ICMP) {
 8017e5e:	7a43      	ldrb	r3, [r0, #9]
 8017e60:	2b01      	cmp	r3, #1
 8017e62:	d110      	bne.n	8017e86 <net_icmpv4_send_error+0x52>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8017e64:	2304      	movs	r3, #4
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
 8017e66:	a904      	add	r1, sp, #16
 8017e68:	4628      	mov	r0, r5
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8017e6a:	9404      	str	r4, [sp, #16]
 8017e6c:	9305      	str	r3, [sp, #20]
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
 8017e6e:	f7ff fd5b 	bl	8017928 <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 8) {
 8017e72:	b110      	cbz	r0, 8017e7a <net_icmpv4_send_error+0x46>
 8017e74:	7843      	ldrb	r3, [r0, #1]
 8017e76:	2b07      	cmp	r3, #7
 8017e78:	d805      	bhi.n	8017e86 <net_icmpv4_send_error+0x52>
			err = -EINVAL;
 8017e7a:	f06f 0615 	mvn.w	r6, #21
}
 8017e7e:	4630      	mov	r0, r6
 8017e80:	b006      	add	sp, #24
 8017e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				   (struct in_addr *)ip_hdr->dst)) {
 8017e86:	f106 0a10 	add.w	sl, r6, #16
	if (net_ipv4_is_addr_bcast(net_pkt_iface(orig),
 8017e8a:	69a8      	ldr	r0, [r5, #24]
 8017e8c:	4651      	mov	r1, sl
 8017e8e:	f7ff fe92 	bl	8017bb6 <net_ipv4_is_addr_bcast>
 8017e92:	2800      	cmp	r0, #0
 8017e94:	d1e0      	bne.n	8017e58 <net_icmpv4_send_error+0x24>
	if (ip_hdr->proto == IPPROTO_UDP) {
 8017e96:	7a73      	ldrb	r3, [r6, #9]
 8017e98:	2b11      	cmp	r3, #17
 8017e9a:	d01a      	beq.n	8017ed2 <net_icmpv4_send_error+0x9e>
		copy_len = 0;
 8017e9c:	2b06      	cmp	r3, #6
 8017e9e:	bf0c      	ite	eq
 8017ea0:	2728      	moveq	r7, #40	; 0x28
 8017ea2:	2700      	movne	r7, #0
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
 8017ea4:	f242 7210 	movw	r2, #10000	; 0x2710
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	1d39      	adds	r1, r7, #4
 8017eac:	69a8      	ldr	r0, [r5, #24]
 8017eae:	e9cd 2300 	strd	r2, r3, [sp]
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	461a      	mov	r2, r3
 8017eb6:	f7ef f957 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 8017eba:	4604      	mov	r4, r0
 8017ebc:	b3a0      	cbz	r0, 8017f28 <net_icmpv4_send_error+0xf4>
	if (net_ipv4_create(pkt, (struct in_addr *)ip_hdr->dst,
 8017ebe:	f106 020c 	add.w	r2, r6, #12
 8017ec2:	4651      	mov	r1, sl
 8017ec4:	f000 f896 	bl	8017ff4 <net_ipv4_create>
 8017ec8:	b128      	cbz	r0, 8017ed6 <net_icmpv4_send_error+0xa2>
	net_pkt_unref(pkt);
 8017eca:	4620      	mov	r0, r4
 8017ecc:	f7ff fa09 	bl	80172e2 <net_pkt_unref>
 8017ed0:	e7c2      	b.n	8017e58 <net_icmpv4_send_error+0x24>
		copy_len = sizeof(struct net_ipv4_hdr) +
 8017ed2:	271c      	movs	r7, #28
 8017ed4:	e7e6      	b.n	8017ea4 <net_icmpv4_send_error+0x70>
	    icmpv4_create(pkt, type, code) ||
 8017ed6:	4641      	mov	r1, r8
 8017ed8:	464a      	mov	r2, r9
 8017eda:	4620      	mov	r0, r4
 8017edc:	f7ff fe52 	bl	8017b84 <icmpv4_create>
			    (struct in_addr *)ip_hdr->src) ||
 8017ee0:	4601      	mov	r1, r0
 8017ee2:	2800      	cmp	r0, #0
 8017ee4:	d1f1      	bne.n	8017eca <net_icmpv4_send_error+0x96>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
 8017ee6:	2204      	movs	r2, #4
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f7ff fb9c 	bl	8017626 <net_pkt_memset>
	    icmpv4_create(pkt, type, code) ||
 8017eee:	2800      	cmp	r0, #0
 8017ef0:	d1eb      	bne.n	8017eca <net_icmpv4_send_error+0x96>
	    net_pkt_copy(pkt, orig, copy_len)) {
 8017ef2:	463a      	mov	r2, r7
 8017ef4:	4629      	mov	r1, r5
 8017ef6:	4620      	mov	r0, r4
 8017ef8:	f7ff fbb5 	bl	8017666 <net_pkt_copy>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
 8017efc:	4606      	mov	r6, r0
 8017efe:	2800      	cmp	r0, #0
 8017f00:	d1e3      	bne.n	8017eca <net_icmpv4_send_error+0x96>
	net_pkt_cursor_init(pkt);
 8017f02:	4620      	mov	r0, r4
 8017f04:	f7ff fa7f 	bl	8017406 <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
 8017f08:	2101      	movs	r1, #1
 8017f0a:	4620      	mov	r0, r4
 8017f0c:	f000 f886 	bl	801801c <net_ipv4_finalize>
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
 8017f10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (net_send_data(pkt) >= 0) {
 8017f12:	4620      	mov	r0, r4
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
 8017f14:	62e3      	str	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
 8017f16:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8017f1a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if (net_send_data(pkt) >= 0) {
 8017f1e:	f7fd fb92 	bl	8015646 <net_send_data>
 8017f22:	2800      	cmp	r0, #0
 8017f24:	daab      	bge.n	8017e7e <net_icmpv4_send_error+0x4a>
 8017f26:	e7d0      	b.n	8017eca <net_icmpv4_send_error+0x96>
		err =  -ENOMEM;
 8017f28:	f06f 060b 	mvn.w	r6, #11
 8017f2c:	e7a7      	b.n	8017e7e <net_icmpv4_send_error+0x4a>

08017f2e <net_ipv4_is_addr_mcast>:
 8017f2e:	6800      	ldr	r0, [r0, #0]
 8017f30:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 8017f34:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
 8017f38:	4258      	negs	r0, r3
 8017f3a:	4158      	adcs	r0, r3
 8017f3c:	4770      	bx	lr

08017f3e <net_ipv4_is_addr_bcast>:
{
 8017f3e:	b538      	push	{r3, r4, r5, lr}
 8017f40:	460c      	mov	r4, r1
 8017f42:	4605      	mov	r5, r0
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8017f44:	f7ee fc4c 	bl	80067e0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8017f48:	6803      	ldr	r3, [r0, #0]
 8017f4a:	6822      	ldr	r2, [r4, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8017f4c:	429a      	cmp	r2, r3
 8017f4e:	d005      	beq.n	8017f5c <net_ipv4_is_addr_bcast+0x1e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8017f50:	4621      	mov	r1, r4
 8017f52:	4628      	mov	r0, r5
}
 8017f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8017f58:	f7ee b818 	b.w	8005f8c <net_if_ipv4_is_addr_bcast>
}
 8017f5c:	2001      	movs	r0, #1
 8017f5e:	bd38      	pop	{r3, r4, r5, pc}

08017f60 <net_ipv4_create_full>:
			 uint8_t tos,
			 uint16_t id,
			 uint8_t flags,
			 uint16_t offset,
			 uint8_t ttl)
{
 8017f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f64:	b085      	sub	sp, #20
 8017f66:	4617      	mov	r7, r2
 8017f68:	469b      	mov	fp, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 8017f6a:	2214      	movs	r2, #20
{
 8017f6c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 8017f70:	f04f 0800 	mov.w	r8, #0
{
 8017f74:	460e      	mov	r6, r1
	struct net_ipv4_hdr *ipv4_hdr;

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 8017f76:	a902      	add	r1, sp, #8
{
 8017f78:	4605      	mov	r5, r0
 8017f7a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8017f7e:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8017f82:	9301      	str	r3, [sp, #4]
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 8017f84:	e9cd 8202 	strd	r8, r2, [sp, #8]
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 8017f88:	f7ff fcce 	bl	8017928 <net_pkt_get_data>
	if (!ipv4_hdr) {
 8017f8c:	4604      	mov	r4, r0
 8017f8e:	b370      	cbz	r0, 8017fee <net_ipv4_create_full+0x8e>
	}

	ipv4_hdr->vhl       = 0x45;
	ipv4_hdr->tos       = tos;
	ipv4_hdr->len       = 0U;
	ipv4_hdr->id[0]     = id >> 8;
 8017f90:	9b01      	ldr	r3, [sp, #4]
	ipv4_hdr->vhl       = 0x45;
 8017f92:	2245      	movs	r2, #69	; 0x45
	ipv4_hdr->tos       = tos;
 8017f94:	f880 b001 	strb.w	fp, [r0, #1]
	ipv4_hdr->vhl       = 0x45;
 8017f98:	7002      	strb	r2, [r0, #0]
	ipv4_hdr->id[0]     = id >> 8;
 8017f9a:	0a1a      	lsrs	r2, r3, #8
	ipv4_hdr->id[1]     = id;
 8017f9c:	7143      	strb	r3, [r0, #5]
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
 8017f9e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
	ipv4_hdr->len       = 0U;
 8017fa2:	f880 8002 	strb.w	r8, [r0, #2]
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
 8017fa6:	015b      	lsls	r3, r3, #5
	ipv4_hdr->len       = 0U;
 8017fa8:	f880 8003 	strb.w	r8, [r0, #3]
	ipv4_hdr->id[0]     = id >> 8;
 8017fac:	7102      	strb	r2, [r0, #4]
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
 8017fae:	ea43 231a 	orr.w	r3, r3, sl, lsr #8
	ipv4_hdr->offset[1] = offset;
 8017fb2:	f880 a007 	strb.w	sl, [r0, #7]
	ipv4_hdr->ttl       = ttl;
 8017fb6:	f880 9008 	strb.w	r9, [r0, #8]
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
 8017fba:	7183      	strb	r3, [r0, #6]

	if (ttl == 0U) {
 8017fbc:	f1b9 0f00 	cmp.w	r9, #0
 8017fc0:	d103      	bne.n	8017fca <net_ipv4_create_full+0x6a>
		ipv4_hdr->ttl = net_if_ipv4_get_ttl(net_pkt_iface(pkt));
 8017fc2:	69a8      	ldr	r0, [r5, #24]
 8017fc4:	f7fd ff5a 	bl	8015e7c <net_if_ipv4_get_ttl>
 8017fc8:	7220      	strb	r0, [r4, #8]
	}

	ipv4_hdr->proto     = 0U;
 8017fca:	2300      	movs	r3, #0
 8017fcc:	7263      	strb	r3, [r4, #9]
	ipv4_hdr->chksum    = 0U;
 8017fce:	72a3      	strb	r3, [r4, #10]
 8017fd0:	72e3      	strb	r3, [r4, #11]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 8017fd2:	683b      	ldr	r3, [r7, #0]
 8017fd4:	6123      	str	r3, [r4, #16]
 8017fd6:	6833      	ldr	r3, [r6, #0]
 8017fd8:	60e3      	str	r3, [r4, #12]
	pkt->ip_hdr_len = len;
 8017fda:	2314      	movs	r3, #20
	net_ipv4_addr_copy_raw(ipv4_hdr->dst, (uint8_t *)dst);
	net_ipv4_addr_copy_raw(ipv4_hdr->src, (uint8_t *)src);

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv4_hdr));

	return net_pkt_set_data(pkt, &ipv4_access);
 8017fdc:	a902      	add	r1, sp, #8
 8017fde:	4628      	mov	r0, r5
 8017fe0:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8017fe4:	f7ff fcbf 	bl	8017966 <net_pkt_set_data>
}
 8017fe8:	b005      	add	sp, #20
 8017fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
 8017fee:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8017ff2:	e7f9      	b.n	8017fe8 <net_ipv4_create_full+0x88>

08017ff4 <net_ipv4_create>:

int net_ipv4_create(struct net_pkt *pkt,
		    const struct in_addr *src,
		    const struct in_addr *dst)
{
 8017ff4:	b530      	push	{r4, r5, lr}
	return pkt->ip_dscp;
 8017ff6:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
 8017ffa:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_NET_IP_DSCP_ECN)) {
		net_ipv4_set_dscp(&tos, net_pkt_ip_dscp(pkt));
		net_ipv4_set_ecn(&tos, net_pkt_ip_ecn(pkt));
	}

	return net_ipv4_create_full(pkt, src, dst, tos, 0U, 0U, 0U,
 8017ffc:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
	*tos |= (dscp << NET_IPV4_DSCP_OFFSET) & NET_IPV4_DSCP_MASK;
 8018000:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8018004:	9403      	str	r4, [sp, #12]
 8018006:	2400      	movs	r4, #0
 * @param ecn ECN value to set.
 */
static inline void net_ipv4_set_ecn(uint8_t *tos, uint8_t ecn)
{
	*tos &= ~NET_IPV4_ECN_MASK;
	*tos |= ecn & NET_IPV4_ECN_MASK;
 8018008:	009b      	lsls	r3, r3, #2
 801800a:	9400      	str	r4, [sp, #0]
 801800c:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
 8018010:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8018014:	f7ff ffa4 	bl	8017f60 <net_ipv4_create_full>
				    net_pkt_ipv4_ttl(pkt));
}
 8018018:	b005      	add	sp, #20
 801801a:	bd30      	pop	{r4, r5, pc}

0801801c <net_ipv4_finalize>:

int net_ipv4_finalize(struct net_pkt *pkt, uint8_t next_header_proto)
{
 801801c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 801801e:	2314      	movs	r3, #20
 8018020:	2500      	movs	r5, #0
{
 8018022:	460e      	mov	r6, r1
	struct net_ipv4_hdr *ipv4_hdr;

	net_pkt_set_overwrite(pkt, true);

	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 8018024:	4669      	mov	r1, sp
{
 8018026:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 8018028:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
 801802c:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 8018030:	f043 0301 	orr.w	r3, r3, #1
 8018034:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 8018038:	f7ff fc76 	bl	8017928 <net_pkt_get_data>
	if (!ipv4_hdr) {
 801803c:	4607      	mov	r7, r0
 801803e:	b340      	cbz	r0, 8018092 <net_ipv4_finalize+0x76>
					((net_pkt_ip_hdr_len(pkt) +
					  net_pkt_ipv4_opts_len(pkt)) / 4U));
		}
	}

	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
 8018040:	68a2      	ldr	r2, [r4, #8]
	size_t bytes = 0;
 8018042:	462b      	mov	r3, r5
	while (buf) {
 8018044:	b9aa      	cbnz	r2, 8018072 <net_ipv4_finalize+0x56>
 8018046:	ba5b      	rev16	r3, r3
	ipv4_hdr->proto = next_header_proto;
 8018048:	727e      	strb	r6, [r7, #9]
	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
 801804a:	807b      	strh	r3, [r7, #2]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 801804c:	69a0      	ldr	r0, [r4, #24]
 801804e:	f7fd fff3 	bl	8016038 <net_if_need_calc_tx_checksum>
 8018052:	b118      	cbz	r0, 801805c <net_ipv4_finalize+0x40>
		ipv4_hdr->chksum = net_calc_chksum_ipv4(pkt);
 8018054:	4620      	mov	r0, r4
 8018056:	f7fe fae0 	bl	801661a <net_calc_chksum_ipv4>
 801805a:	8178      	strh	r0, [r7, #10]
	}

	net_pkt_set_data(pkt, &ipv4_access);
 801805c:	4669      	mov	r1, sp
 801805e:	4620      	mov	r0, r4
 8018060:	f7ff fc81 	bl	8017966 <net_pkt_set_data>

	if (IS_ENABLED(CONFIG_NET_UDP) &&
 8018064:	2e11      	cmp	r6, #17
 8018066:	d108      	bne.n	801807a <net_ipv4_finalize+0x5e>
	    next_header_proto == IPPROTO_UDP) {
		return net_udp_finalize(pkt);
 8018068:	4620      	mov	r0, r4
 801806a:	f001 feb6 	bl	8019dda <net_udp_finalize>
	} else if (next_header_proto == IPPROTO_ICMP) {
		return net_icmpv4_finalize(pkt);
	}

	return 0;
}
 801806e:	b003      	add	sp, #12
 8018070:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
 8018072:	8a11      	ldrh	r1, [r2, #16]
		buf = buf->frags;
 8018074:	6852      	ldr	r2, [r2, #4]
		bytes += buf->len;
 8018076:	440b      	add	r3, r1
		buf = buf->frags;
 8018078:	e7e4      	b.n	8018044 <net_ipv4_finalize+0x28>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 801807a:	2e06      	cmp	r6, #6
 801807c:	d103      	bne.n	8018086 <net_ipv4_finalize+0x6a>
		return net_tcp_finalize(pkt);
 801807e:	4620      	mov	r0, r4
 8018080:	f001 fc93 	bl	80199aa <net_tcp_finalize>
 8018084:	e7f3      	b.n	801806e <net_ipv4_finalize+0x52>
	} else if (next_header_proto == IPPROTO_ICMP) {
 8018086:	2e01      	cmp	r6, #1
 8018088:	d106      	bne.n	8018098 <net_ipv4_finalize+0x7c>
		return net_icmpv4_finalize(pkt);
 801808a:	4620      	mov	r0, r4
 801808c:	f7ff fe1c 	bl	8017cc8 <net_icmpv4_finalize>
 8018090:	e7ed      	b.n	801806e <net_ipv4_finalize+0x52>
		return -ENOBUFS;
 8018092:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8018096:	e7ea      	b.n	801806e <net_ipv4_finalize+0x52>
	return 0;
 8018098:	2000      	movs	r0, #0
 801809a:	e7e8      	b.n	801806e <net_ipv4_finalize+0x52>

0801809c <net_ipv4_input>:
	return 0;
}
#endif

enum net_verdict net_ipv4_input(struct net_pkt *pkt)
{
 801809c:	b5f0      	push	{r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 801809e:	2314      	movs	r3, #20
{
 80180a0:	b091      	sub	sp, #68	; 0x44
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 80180a2:	2700      	movs	r7, #0
{
 80180a4:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 80180a6:	eb0d 0203 	add.w	r2, sp, r3
 80180aa:	9207      	str	r2, [sp, #28]
 80180ac:	2208      	movs	r2, #8
 80180ae:	9208      	str	r2, [sp, #32]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 80180b0:	aa0b      	add	r2, sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 80180b2:	e9cd 7303 	strd	r7, r3, [sp, #12]
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 80180b6:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	int real_len = net_pkt_get_len(pkt);
 80180ba:	6883      	ldr	r3, [r0, #8]
	while (buf) {
 80180bc:	b943      	cbnz	r3, 80180d0 <net_ipv4_input+0x34>
	net_pkt_cursor_backup(pkt, &hdr_start);
#endif

	net_stats_update_ipv4_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 80180be:	a903      	add	r1, sp, #12
 80180c0:	4620      	mov	r0, r4
 80180c2:	f7ff fc31 	bl	8017928 <net_pkt_get_data>
	if (!hdr) {
 80180c6:	4605      	mov	r5, r0
 80180c8:	b930      	cbnz	r0, 80180d8 <net_ipv4_input+0x3c>

	NET_DBG("IPv4 packet received from %s to %s",
		net_sprint_ipv4_addr(&hdr->src),
		net_sprint_ipv4_addr(&hdr->dst));

	switch (hdr->proto) {
 80180ca:	2002      	movs	r0, #2
	}

drop:
	net_stats_update_ipv4_drop(net_pkt_iface(pkt));
	return NET_DROP;
}
 80180cc:	b011      	add	sp, #68	; 0x44
 80180ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
 80180d0:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
 80180d2:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 80180d4:	4417      	add	r7, r2
		buf = buf->frags;
 80180d6:	e7f1      	b.n	80180bc <net_ipv4_input+0x20>
	hdr_len = (hdr->vhl & NET_IPV4_IHL_MASK) * 4U;
 80180d8:	7806      	ldrb	r6, [r0, #0]
 80180da:	f006 060f 	and.w	r6, r6, #15
 80180de:	00b6      	lsls	r6, r6, #2
	if (hdr_len < sizeof(struct net_ipv4_hdr)) {
 80180e0:	2e13      	cmp	r6, #19
 80180e2:	d9f2      	bls.n	80180ca <net_ipv4_input+0x2e>
	pkt->ip_hdr_len = len;
 80180e4:	2314      	movs	r3, #20
	opts_len = hdr_len - sizeof(struct net_ipv4_hdr);
 80180e6:	3e14      	subs	r6, #20
 80180e8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80180ec:	b2f6      	uxtb	r6, r6
	return (tos & NET_IPV4_DSCP_MASK) >> NET_IPV4_DSCP_OFFSET;
 80180ee:	7842      	ldrb	r2, [r0, #1]
	pkt->ip_dscp = dscp;
 80180f0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80180f4:	0892      	lsrs	r2, r2, #2
 80180f6:	f362 0305 	bfi	r3, r2, #0, #6
 80180fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	pkt->ip_ecn = ecn;
 80180fe:	7842      	ldrb	r2, [r0, #1]
 8018100:	f362 1387 	bfi	r3, r2, #6, #2
 8018104:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	if (hdr->ttl == 0) {
 8018108:	7a03      	ldrb	r3, [r0, #8]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d0dd      	beq.n	80180ca <net_ipv4_input+0x2e>
	pkt->ipv4_opts_len = opts_len;
 801810e:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
	pkt_len = ntohs(hdr->len);
 8018112:	8841      	ldrh	r1, [r0, #2]
 8018114:	ba49      	rev16	r1, r1
 8018116:	b289      	uxth	r1, r1
	if (real_len < pkt_len) {
 8018118:	42b9      	cmp	r1, r7
 801811a:	dcd6      	bgt.n	80180ca <net_ipv4_input+0x2e>
	} else if (real_len > pkt_len) {
 801811c:	da02      	bge.n	8018124 <net_ipv4_input+0x88>
		net_pkt_update_length(pkt, pkt_len);
 801811e:	4620      	mov	r0, r4
 8018120:	f7ff fb07 	bl	8017732 <net_pkt_update_length>
	if (net_ipv4_is_addr_mcast((struct in_addr *)hdr->src)) {
 8018124:	f105 010c 	add.w	r1, r5, #12
 8018128:	4608      	mov	r0, r1
 801812a:	f7ff ff00 	bl	8017f2e <net_ipv4_is_addr_mcast>
 801812e:	2800      	cmp	r0, #0
 8018130:	d1cb      	bne.n	80180ca <net_ipv4_input+0x2e>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->src)) {
 8018132:	69a0      	ldr	r0, [r4, #24]
 8018134:	f7ff ff03 	bl	8017f3e <net_ipv4_is_addr_bcast>
 8018138:	2800      	cmp	r0, #0
 801813a:	d1c6      	bne.n	80180ca <net_ipv4_input+0x2e>
	return UNALIGNED_GET(&addr->s_addr) == 0;
 801813c:	68eb      	ldr	r3, [r5, #12]
	if (net_ipv4_is_addr_unspecified((struct in_addr *)hdr->src) &&
 801813e:	2b00      	cmp	r3, #0
 8018140:	d046      	beq.n	80181d0 <net_ipv4_input+0x134>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 8018142:	69a0      	ldr	r0, [r4, #24]
 8018144:	f7fd ff7b 	bl	801603e <net_if_need_calc_rx_checksum>
 8018148:	2800      	cmp	r0, #0
 801814a:	d149      	bne.n	80181e0 <net_ipv4_input+0x144>
	if ((!net_ipv4_is_my_addr((struct in_addr *)hdr->dst) &&
 801814c:	f105 0710 	add.w	r7, r5, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 8018150:	2100      	movs	r1, #0
 8018152:	4638      	mov	r0, r7
 8018154:	f7ed ff96 	bl	8006084 <net_if_ipv4_addr_lookup>
	if (!ret) {
 8018158:	b980      	cbnz	r0, 801817c <net_ipv4_input+0xe0>
		ret = net_ipv4_is_addr_bcast(NULL, addr);
 801815a:	4639      	mov	r1, r7
 801815c:	f7ff feef 	bl	8017f3e <net_ipv4_is_addr_bcast>
 8018160:	b960      	cbnz	r0, 801817c <net_ipv4_input+0xe0>
	     !net_ipv4_is_addr_mcast((struct in_addr *)hdr->dst) &&
 8018162:	4638      	mov	r0, r7
 8018164:	f7ff fee3 	bl	8017f2e <net_ipv4_is_addr_mcast>
	if ((!net_ipv4_is_my_addr((struct in_addr *)hdr->dst) &&
 8018168:	b940      	cbnz	r0, 801817c <net_ipv4_input+0xe0>
	     !net_ipv4_is_addr_mcast((struct in_addr *)hdr->dst) &&
 801816a:	7a6b      	ldrb	r3, [r5, #9]
 801816c:	2b11      	cmp	r3, #17
 801816e:	d1ac      	bne.n	80180ca <net_ipv4_input+0x2e>
	       (net_ipv4_addr_cmp((struct in_addr *)hdr->dst, net_ipv4_broadcast_address()) ||
 8018170:	f7ee fb36 	bl	80067e0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8018174:	692a      	ldr	r2, [r5, #16]
 8018176:	6803      	ldr	r3, [r0, #0]
	     !(hdr->proto == IPPROTO_UDP &&
 8018178:	429a      	cmp	r2, r3
 801817a:	d1a6      	bne.n	80180ca <net_ipv4_input+0x2e>
				   net_ipv4_unspecified_address()))))) ||
 801817c:	7a6b      	ldrb	r3, [r5, #9]
 801817e:	2b06      	cmp	r3, #6
 8018180:	d105      	bne.n	801818e <net_ipv4_input+0xf2>
	     net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->dst))) {
 8018182:	4639      	mov	r1, r7
 8018184:	69a0      	ldr	r0, [r4, #24]
 8018186:	f7ff feda 	bl	8017f3e <net_ipv4_is_addr_bcast>
	    (hdr->proto == IPPROTO_TCP &&
 801818a:	2800      	cmp	r0, #0
 801818c:	d19d      	bne.n	80180ca <net_ipv4_input+0x2e>
	return net_pkt_skip(pkt, access->size);
 801818e:	9904      	ldr	r1, [sp, #16]
 8018190:	4620      	mov	r0, r4
 8018192:	f7ff f99c 	bl	80174ce <net_pkt_skip>
	if (opts_len) {
 8018196:	b12e      	cbz	r6, 80181a4 <net_ipv4_input+0x108>
		if (net_pkt_skip(pkt, opts_len)) {
 8018198:	4631      	mov	r1, r6
 801819a:	4620      	mov	r0, r4
 801819c:	f7ff f997 	bl	80174ce <net_pkt_skip>
 80181a0:	2800      	cmp	r0, #0
 80181a2:	d192      	bne.n	80180ca <net_ipv4_input+0x2e>
	net_pkt_set_ipv4_ttl(pkt, hdr->ttl);
 80181a4:	7a2b      	ldrb	r3, [r5, #8]
	pkt->family = family;
 80181a6:	2201      	movs	r2, #1
	pkt->ipv4_ttl = ttl;
 80181a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	pkt->family = family;
 80181ac:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80181b0:	f362 1347 	bfi	r3, r2, #5, #3
 80181b4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	switch (hdr->proto) {
 80181b8:	7a6b      	ldrb	r3, [r5, #9]
 80181ba:	2b06      	cmp	r3, #6
 80181bc:	d016      	beq.n	80181ec <net_ipv4_input+0x150>
 80181be:	2b11      	cmp	r3, #17
 80181c0:	d024      	beq.n	801820c <net_ipv4_input+0x170>
 80181c2:	4293      	cmp	r3, r2
 80181c4:	d181      	bne.n	80180ca <net_ipv4_input+0x2e>
		verdict = net_icmpv4_input(pkt, hdr);
 80181c6:	4629      	mov	r1, r5
 80181c8:	4620      	mov	r0, r4
 80181ca:	f7ef ffc9 	bl	8008160 <net_icmpv4_input>
		if (verdict == NET_DROP) {
 80181ce:	e77d      	b.n	80180cc <net_ipv4_input+0x30>
	    !net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->dst)) {
 80181d0:	f105 0110 	add.w	r1, r5, #16
 80181d4:	69a0      	ldr	r0, [r4, #24]
 80181d6:	f7ff feb2 	bl	8017f3e <net_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_unspecified((struct in_addr *)hdr->src) &&
 80181da:	2800      	cmp	r0, #0
 80181dc:	d1b1      	bne.n	8018142 <net_ipv4_input+0xa6>
 80181de:	e774      	b.n	80180ca <net_ipv4_input+0x2e>
	    net_calc_chksum_ipv4(pkt) != 0U) {
 80181e0:	4620      	mov	r0, r4
 80181e2:	f7fe fa1a 	bl	801661a <net_calc_chksum_ipv4>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 80181e6:	2800      	cmp	r0, #0
 80181e8:	d0b0      	beq.n	801814c <net_ipv4_input+0xb0>
 80181ea:	e76e      	b.n	80180ca <net_ipv4_input+0x2e>
		proto_hdr.tcp = net_tcp_input(pkt, &tcp_access);
 80181ec:	a909      	add	r1, sp, #36	; 0x24
 80181ee:	4620      	mov	r0, r4
 80181f0:	f001 fbfc 	bl	80199ec <net_tcp_input>
 80181f4:	9001      	str	r0, [sp, #4]
		if (proto_hdr.tcp) {
 80181f6:	2800      	cmp	r0, #0
 80181f8:	f43f af67 	beq.w	80180ca <net_ipv4_input+0x2e>
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
 80181fc:	ab01      	add	r3, sp, #4
 80181fe:	7a6a      	ldrb	r2, [r5, #9]
 8018200:	a902      	add	r1, sp, #8
 8018202:	4620      	mov	r0, r4
	ip.ipv4 = hdr;
 8018204:	9502      	str	r5, [sp, #8]
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
 8018206:	f7ef f99b 	bl	8007540 <net_conn_input>
	if (verdict != NET_DROP) {
 801820a:	e75f      	b.n	80180cc <net_ipv4_input+0x30>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
 801820c:	a907      	add	r1, sp, #28
 801820e:	4620      	mov	r0, r4
 8018210:	f001 fe2b 	bl	8019e6a <net_udp_input>
 8018214:	e7ee      	b.n	80181f4 <net_ipv4_input+0x158>

08018216 <net_ipv4_init>:
void net_ipv4_init(void)
{
	if (IS_ENABLED(CONFIG_NET_IPV4_FRAGMENT)) {
		net_ipv4_setup_fragment_buffers();
	}
}
 8018216:	4770      	bx	lr

08018218 <net_icmpv6_finalize>:
{
 8018218:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 801821a:	2304      	movs	r3, #4
 801821c:	2600      	movs	r6, #0
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 801821e:	4669      	mov	r1, sp
{
 8018220:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8018222:	e9cd 6300 	strd	r6, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 8018226:	f7ff fb7f 	bl	8017928 <net_pkt_get_data>
	if (!icmp_hdr) {
 801822a:	4604      	mov	r4, r0
 801822c:	b180      	cbz	r0, 8018250 <net_icmpv6_finalize+0x38>
	icmp_hdr->chksum = 0U;
 801822e:	7086      	strb	r6, [r0, #2]
 8018230:	70c6      	strb	r6, [r0, #3]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 8018232:	69a8      	ldr	r0, [r5, #24]
 8018234:	f7fd ff00 	bl	8016038 <net_if_need_calc_tx_checksum>
 8018238:	b120      	cbz	r0, 8018244 <net_icmpv6_finalize+0x2c>
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
 801823a:	213a      	movs	r1, #58	; 0x3a
 801823c:	4628      	mov	r0, r5
 801823e:	f7fe f953 	bl	80164e8 <net_calc_chksum>
		icmp_hdr->chksum = net_calc_chksum_icmpv6(pkt);
 8018242:	8060      	strh	r0, [r4, #2]
	return net_pkt_set_data(pkt, &icmp_access);
 8018244:	4669      	mov	r1, sp
 8018246:	4628      	mov	r0, r5
 8018248:	f7ff fb8d 	bl	8017966 <net_pkt_set_data>
}
 801824c:	b002      	add	sp, #8
 801824e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 8018250:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8018254:	e7fa      	b.n	801824c <net_icmpv6_finalize+0x34>

08018256 <net_icmpv6_create>:
{
 8018256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8018258:	2304      	movs	r3, #4
 801825a:	2500      	movs	r5, #0
{
 801825c:	460f      	mov	r7, r1
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 801825e:	4669      	mov	r1, sp
{
 8018260:	4604      	mov	r4, r0
 8018262:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8018264:	e9cd 5300 	strd	r5, r3, [sp]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 8018268:	f7ff fb5e 	bl	8017928 <net_pkt_get_data>
	if (!icmp_hdr) {
 801826c:	b148      	cbz	r0, 8018282 <net_icmpv6_create+0x2c>
	icmp_hdr->type   = icmp_type;
 801826e:	7007      	strb	r7, [r0, #0]
	return net_pkt_set_data(pkt, &icmp_access);
 8018270:	4669      	mov	r1, sp
	icmp_hdr->code   = icmp_code;
 8018272:	7046      	strb	r6, [r0, #1]
	icmp_hdr->chksum = 0U;
 8018274:	7085      	strb	r5, [r0, #2]
 8018276:	70c5      	strb	r5, [r0, #3]
	return net_pkt_set_data(pkt, &icmp_access);
 8018278:	4620      	mov	r0, r4
 801827a:	f7ff fb74 	bl	8017966 <net_pkt_set_data>
}
 801827e:	b003      	add	sp, #12
 8018280:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
 8018282:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8018286:	e7fa      	b.n	801827e <net_icmpv6_create+0x28>

08018288 <icmpv6_handle_echo_request>:
{
 8018288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		net_pkt_ipv6_ext_len(pkt) - NET_ICMPH_LEN;
 801828a:	888d      	ldrh	r5, [r1, #4]
{
 801828c:	4606      	mov	r6, r0
		net_pkt_ipv6_ext_len(pkt) - NET_ICMPH_LEN;
 801828e:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
{
 8018290:	460f      	mov	r7, r1
		net_pkt_ipv6_ext_len(pkt) - NET_ICMPH_LEN;
 8018292:	ba6d      	rev16	r5, r5
 8018294:	3d04      	subs	r5, #4
 8018296:	1aed      	subs	r5, r5, r3
	payload_len = ntohs(ip_hdr->len) -
 8018298:	b22d      	sxth	r5, r5
	if (payload_len < NET_ICMPV6_UNUSED_LEN) {
 801829a:	2d03      	cmp	r5, #3
 801829c:	dc01      	bgt.n	80182a2 <icmpv6_handle_echo_request+0x1a>
	return NET_DROP;
 801829e:	2002      	movs	r0, #2
 80182a0:	e04d      	b.n	801833e <icmpv6_handle_echo_request+0xb6>
					  PKT_WAIT_TIME);
 80182a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80182a6:	2300      	movs	r3, #0
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt), payload_len,
 80182a8:	4629      	mov	r1, r5
 80182aa:	e9cd 2300 	strd	r2, r3, [sp]
 80182ae:	233a      	movs	r3, #58	; 0x3a
 80182b0:	2202      	movs	r2, #2
 80182b2:	6980      	ldr	r0, [r0, #24]
 80182b4:	f7ee ff58 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!reply) {
 80182b8:	4604      	mov	r4, r0
 80182ba:	2800      	cmp	r0, #0
 80182bc:	d0ef      	beq.n	801829e <icmpv6_handle_echo_request+0x16>
	if (net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->dst)) {
 80182be:	7e3b      	ldrb	r3, [r7, #24]
						  (struct in6_addr *)ip_hdr->dst);
 80182c0:	f107 0118 	add.w	r1, r7, #24
	if (net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->dst)) {
 80182c4:	2bff      	cmp	r3, #255	; 0xff
 80182c6:	d103      	bne.n	80182d0 <icmpv6_handle_echo_request+0x48>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
 80182c8:	69b0      	ldr	r0, [r6, #24]
 80182ca:	f7ed fde3 	bl	8005e94 <net_if_ipv6_select_src_addr>
 80182ce:	4601      	mov	r1, r0
	net_pkt_lladdr_dst(reply)->addr = NULL;
 80182d0:	2300      	movs	r3, #0
	if (net_ipv6_create(reply, src, (struct in6_addr *)ip_hdr->src)) {
 80182d2:	4620      	mov	r0, r4
	net_pkt_lladdr_dst(reply)->addr = NULL;
 80182d4:	62e3      	str	r3, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(reply)->addr = NULL;
 80182d6:	6263      	str	r3, [r4, #36]	; 0x24
	pkt->ip_dscp = dscp;
 80182d8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	return pkt->ip_dscp;
 80182dc:	f896 2040 	ldrb.w	r2, [r6, #64]	; 0x40
	pkt->ip_dscp = dscp;
 80182e0:	f362 0305 	bfi	r3, r2, #0, #6
 80182e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	return pkt->ip_ecn;
 80182e8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	pkt->ip_ecn = ecn;
 80182ec:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
	return pkt->ip_ecn;
 80182f0:	099b      	lsrs	r3, r3, #6
	pkt->ip_ecn = ecn;
 80182f2:	f363 1287 	bfi	r2, r3, #6, #2
 80182f6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
	if (net_ipv6_create(reply, src, (struct in6_addr *)ip_hdr->src)) {
 80182fa:	f107 0208 	add.w	r2, r7, #8
 80182fe:	f000 f9d6 	bl	80186ae <net_ipv6_create>
 8018302:	4602      	mov	r2, r0
 8018304:	b9e8      	cbnz	r0, 8018342 <icmpv6_handle_echo_request+0xba>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
 8018306:	2181      	movs	r1, #129	; 0x81
 8018308:	4620      	mov	r0, r4
 801830a:	f7ff ffa4 	bl	8018256 <net_icmpv6_create>
 801830e:	b9c0      	cbnz	r0, 8018342 <icmpv6_handle_echo_request+0xba>
	    net_pkt_copy(reply, pkt, payload_len)) {
 8018310:	462a      	mov	r2, r5
 8018312:	4631      	mov	r1, r6
 8018314:	4620      	mov	r0, r4
 8018316:	f7ff f9a6 	bl	8017666 <net_pkt_copy>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
 801831a:	4605      	mov	r5, r0
 801831c:	b988      	cbnz	r0, 8018342 <icmpv6_handle_echo_request+0xba>
	net_pkt_cursor_init(reply);
 801831e:	4620      	mov	r0, r4
 8018320:	f7ff f871 	bl	8017406 <net_pkt_cursor_init>
	net_ipv6_finalize(reply, IPPROTO_ICMPV6);
 8018324:	213a      	movs	r1, #58	; 0x3a
 8018326:	4620      	mov	r0, r4
 8018328:	f000 fa0a 	bl	8018740 <net_ipv6_finalize>
	if (net_send_data(reply) < 0) {
 801832c:	4620      	mov	r0, r4
 801832e:	f7fd f98a 	bl	8015646 <net_send_data>
 8018332:	2800      	cmp	r0, #0
 8018334:	db05      	blt.n	8018342 <icmpv6_handle_echo_request+0xba>
	net_pkt_unref(pkt);
 8018336:	4630      	mov	r0, r6
 8018338:	f7fe ffd3 	bl	80172e2 <net_pkt_unref>
	return NET_OK;
 801833c:	4628      	mov	r0, r5
}
 801833e:	b003      	add	sp, #12
 8018340:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_pkt_unref(reply);
 8018342:	4620      	mov	r0, r4
 8018344:	f7fe ffcd 	bl	80172e2 <net_pkt_unref>
 8018348:	e7a9      	b.n	801829e <icmpv6_handle_echo_request+0x16>

0801834a <net_icmpv6_send_error>:
{
 801834a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801834e:	4605      	mov	r5, r0
 8018350:	b086      	sub	sp, #24
 8018352:	4699      	mov	r9, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 8018354:	2400      	movs	r4, #0
 8018356:	2328      	movs	r3, #40	; 0x28
{
 8018358:	4688      	mov	r8, r1
 801835a:	4692      	mov	sl, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 801835c:	e9cd 4302 	strd	r4, r3, [sp, #8]
	net_pkt_cursor_init(orig);
 8018360:	f7ff f851 	bl	8017406 <net_pkt_cursor_init>
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(orig, &ipv6_access);
 8018364:	a902      	add	r1, sp, #8
 8018366:	4628      	mov	r0, r5
 8018368:	f7ff fade 	bl	8017928 <net_pkt_get_data>
	if (!ip_hdr) {
 801836c:	4607      	mov	r7, r0
 801836e:	2800      	cmp	r0, #0
 8018370:	f000 80b0 	beq.w	80184d4 <net_icmpv6_send_error+0x18a>
	if (ip_hdr->nexthdr == IPPROTO_ICMPV6) {
 8018374:	7983      	ldrb	r3, [r0, #6]
 8018376:	2b3a      	cmp	r3, #58	; 0x3a
 8018378:	d118      	bne.n	80183ac <net_icmpv6_send_error+0x62>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
 801837a:	2304      	movs	r3, #4
	return net_pkt_skip(pkt, access->size);
 801837c:	9903      	ldr	r1, [sp, #12]
 801837e:	4628      	mov	r0, r5
 8018380:	9404      	str	r4, [sp, #16]
 8018382:	9305      	str	r3, [sp, #20]
 8018384:	f7ff f8a3 	bl	80174ce <net_pkt_skip>
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
 8018388:	a904      	add	r1, sp, #16
 801838a:	4628      	mov	r0, r5
 801838c:	f7ff facc 	bl	8017928 <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 128) {
 8018390:	b118      	cbz	r0, 801839a <net_icmpv6_send_error+0x50>
 8018392:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8018396:	42a3      	cmp	r3, r4
 8018398:	db05      	blt.n	80183a6 <net_icmpv6_send_error+0x5c>
			err = -EINVAL;
 801839a:	f06f 0515 	mvn.w	r5, #21
}
 801839e:	4628      	mov	r0, r5
 80183a0:	b006      	add	sp, #24
 80183a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		net_pkt_cursor_init(orig);
 80183a6:	4628      	mov	r0, r5
 80183a8:	f7ff f82d 	bl	8017406 <net_pkt_cursor_init>
	if (ip_hdr->nexthdr == IPPROTO_UDP) {
 80183ac:	79bb      	ldrb	r3, [r7, #6]
 80183ae:	2b11      	cmp	r3, #17
 80183b0:	d059      	beq.n	8018466 <net_icmpv6_send_error+0x11c>
	} else if (ip_hdr->nexthdr == IPPROTO_TCP) {
 80183b2:	2b06      	cmp	r3, #6
 80183b4:	d059      	beq.n	801846a <net_icmpv6_send_error+0x120>
		copy_len = net_pkt_get_len(orig);
 80183b6:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
 80183b8:	2000      	movs	r0, #0
	while (buf) {
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d14f      	bne.n	801845e <net_icmpv6_send_error+0x114>
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
 80183be:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80183c2:	2202      	movs	r2, #2
					PKT_WAIT_TIME);
 80183c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80183c8:	2400      	movs	r4, #0
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
 80183ca:	fb02 0101 	mla	r1, r2, r1, r0
 80183ce:	e9cd 3400 	strd	r3, r4, [sp]
 80183d2:	3104      	adds	r1, #4
 80183d4:	233a      	movs	r3, #58	; 0x3a
 80183d6:	69a8      	ldr	r0, [r5, #24]
 80183d8:	f7ee fec6 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 80183dc:	4604      	mov	r4, r0
 80183de:	2800      	cmp	r0, #0
 80183e0:	d07b      	beq.n	80184da <net_icmpv6_send_error+0x190>
	ret = net_pkt_write(pkt, net_pkt_lladdr_src(orig)->addr,
 80183e2:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80183e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80183e8:	f7ff fa83 	bl	80178f2 <net_pkt_write>
	if (ret < 0) {
 80183ec:	1e06      	subs	r6, r0, #0
 80183ee:	db31      	blt.n	8018454 <net_icmpv6_send_error+0x10a>
	net_pkt_lladdr_dst(pkt)->addr = pkt->buffer->data;
 80183f0:	68a3      	ldr	r3, [r4, #8]
	ret = net_pkt_write(pkt, net_pkt_lladdr_dst(orig)->addr,
 80183f2:	4620      	mov	r0, r4
	net_pkt_lladdr_dst(pkt)->addr = pkt->buffer->data;
 80183f4:	68db      	ldr	r3, [r3, #12]
 80183f6:	62e3      	str	r3, [r4, #44]	; 0x2c
	ret = net_pkt_write(pkt, net_pkt_lladdr_dst(orig)->addr,
 80183f8:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 80183fc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80183fe:	f7ff fa78 	bl	80178f2 <net_pkt_write>
	if (ret < 0) {
 8018402:	1e06      	subs	r6, r0, #0
 8018404:	db26      	blt.n	8018454 <net_icmpv6_send_error+0x10a>
	return net_buf_simple_pull_mem(&buf->b, len);
 8018406:	68a0      	ldr	r0, [r4, #8]
 8018408:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 801840c:	300c      	adds	r0, #12
 801840e:	f7fc fe0a 	bl	8015026 <net_buf_simple_pull_mem>
	net_pkt_lladdr_src(pkt)->addr = pkt->buffer->data;
 8018412:	68a0      	ldr	r0, [r4, #8]
 8018414:	f850 3f0c 	ldr.w	r3, [r0, #12]!
 8018418:	6263      	str	r3, [r4, #36]	; 0x24
 801841a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 801841e:	f7fc fe02 	bl	8015026 <net_buf_simple_pull_mem>
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
 8018422:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
						  (struct in6_addr *)ip_hdr->dst);
 8018426:	f107 0118 	add.w	r1, r7, #24
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
 801842a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
 801842e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8018432:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if (net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->dst)) {
 8018436:	7e3b      	ldrb	r3, [r7, #24]
 8018438:	2bff      	cmp	r3, #255	; 0xff
 801843a:	d103      	bne.n	8018444 <net_icmpv6_send_error+0xfa>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
 801843c:	69a0      	ldr	r0, [r4, #24]
 801843e:	f7ed fd29 	bl	8005e94 <net_if_ipv6_select_src_addr>
 8018442:	4601      	mov	r1, r0
	if (net_ipv6_create(pkt, src, (struct in6_addr *)ip_hdr->src) ||
 8018444:	f107 0208 	add.w	r2, r7, #8
 8018448:	4620      	mov	r0, r4
 801844a:	f000 f930 	bl	80186ae <net_ipv6_create>
 801844e:	b170      	cbz	r0, 801846e <net_icmpv6_send_error+0x124>
	int err = -EIO;
 8018450:	f06f 0604 	mvn.w	r6, #4
	net_pkt_unref(pkt);
 8018454:	4620      	mov	r0, r4
 8018456:	4635      	mov	r5, r6
 8018458:	f7fe ff43 	bl	80172e2 <net_pkt_unref>
 801845c:	e79f      	b.n	801839e <net_icmpv6_send_error+0x54>
		bytes += buf->len;
 801845e:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
 8018460:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 8018462:	4410      	add	r0, r2
		buf = buf->frags;
 8018464:	e7a9      	b.n	80183ba <net_icmpv6_send_error+0x70>
		copy_len = sizeof(struct net_ipv6_hdr) +
 8018466:	2030      	movs	r0, #48	; 0x30
 8018468:	e7a9      	b.n	80183be <net_icmpv6_send_error+0x74>
		copy_len = sizeof(struct net_ipv6_hdr) +
 801846a:	203c      	movs	r0, #60	; 0x3c
 801846c:	e7a7      	b.n	80183be <net_icmpv6_send_error+0x74>
	    net_icmpv6_create(pkt, type, code)) {
 801846e:	4641      	mov	r1, r8
 8018470:	4652      	mov	r2, sl
 8018472:	4620      	mov	r0, r4
 8018474:	f7ff feef 	bl	8018256 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, (struct in6_addr *)ip_hdr->src) ||
 8018478:	4601      	mov	r1, r0
 801847a:	2800      	cmp	r0, #0
 801847c:	d1e8      	bne.n	8018450 <net_icmpv6_send_error+0x106>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
 801847e:	f1b8 0f04 	cmp.w	r8, #4
 8018482:	d122      	bne.n	80184ca <net_icmpv6_send_error+0x180>
	uint32_t data_be32 = htonl(data);
 8018484:	fa99 f389 	rev.w	r3, r9
	return net_pkt_write(pkt, &data_be32, sizeof(uint32_t));
 8018488:	4642      	mov	r2, r8
 801848a:	a904      	add	r1, sp, #16
 801848c:	4620      	mov	r0, r4
	uint32_t data_be32 = htonl(data);
 801848e:	9304      	str	r3, [sp, #16]
	return net_pkt_write(pkt, &data_be32, sizeof(uint32_t));
 8018490:	f7ff fa2f 	bl	80178f2 <net_pkt_write>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
 8018494:	4606      	mov	r6, r0
	copy_len = net_pkt_available_buffer(pkt);
 8018496:	4620      	mov	r0, r4
 8018498:	f7fe ff57 	bl	801734a <net_pkt_available_buffer>
 801849c:	4602      	mov	r2, r0
	if (err || net_pkt_copy(pkt, orig, copy_len)) {
 801849e:	2e00      	cmp	r6, #0
 80184a0:	d1d8      	bne.n	8018454 <net_icmpv6_send_error+0x10a>
 80184a2:	4629      	mov	r1, r5
 80184a4:	4620      	mov	r0, r4
 80184a6:	f7ff f8de 	bl	8017666 <net_pkt_copy>
 80184aa:	4605      	mov	r5, r0
 80184ac:	2800      	cmp	r0, #0
 80184ae:	d1d1      	bne.n	8018454 <net_icmpv6_send_error+0x10a>
	net_pkt_cursor_init(pkt);
 80184b0:	4620      	mov	r0, r4
 80184b2:	f7fe ffa8 	bl	8017406 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 80184b6:	213a      	movs	r1, #58	; 0x3a
 80184b8:	4620      	mov	r0, r4
 80184ba:	f000 f941 	bl	8018740 <net_ipv6_finalize>
	if (net_send_data(pkt) >= 0) {
 80184be:	4620      	mov	r0, r4
 80184c0:	f7fd f8c1 	bl	8015646 <net_send_data>
 80184c4:	2800      	cmp	r0, #0
 80184c6:	dbc5      	blt.n	8018454 <net_icmpv6_send_error+0x10a>
 80184c8:	e769      	b.n	801839e <net_icmpv6_send_error+0x54>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
 80184ca:	2204      	movs	r2, #4
 80184cc:	4620      	mov	r0, r4
 80184ce:	f7ff f8aa 	bl	8017626 <net_pkt_memset>
 80184d2:	e7df      	b.n	8018494 <net_icmpv6_send_error+0x14a>
	int err = -EIO;
 80184d4:	f06f 0504 	mvn.w	r5, #4
 80184d8:	e761      	b.n	801839e <net_icmpv6_send_error+0x54>
		err = -ENOMEM;
 80184da:	f06f 050b 	mvn.w	r5, #11
 80184de:	e75e      	b.n	801839e <net_icmpv6_send_error+0x54>

080184e0 <net_icmpv6_send_echo_request>:
{
 80184e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
 80184e4:	f04f 0904 	mov.w	r9, #4
{
 80184e8:	b087      	sub	sp, #28
 80184ea:	469a      	mov	sl, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
 80184ec:	2300      	movs	r3, #0
{
 80184ee:	4604      	mov	r4, r0
 80184f0:	4688      	mov	r8, r1
 80184f2:	4616      	mov	r6, r2
 80184f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80184f6:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
 80184fa:	e9cd 3904 	strd	r3, r9, [sp, #16]
	src = net_if_ipv6_select_src_addr(iface, dst);
 80184fe:	f7ed fcc9 	bl	8005e94 <net_if_ipv6_select_src_addr>
	pkt = net_pkt_alloc_with_buffer(iface,
 8018502:	f242 7210 	movw	r2, #10000	; 0x2710
 8018506:	2300      	movs	r3, #0
	src = net_if_ipv6_select_src_addr(iface, dst);
 8018508:	4607      	mov	r7, r0
	pkt = net_pkt_alloc_with_buffer(iface,
 801850a:	eb05 0109 	add.w	r1, r5, r9
 801850e:	4620      	mov	r0, r4
 8018510:	e9cd 2300 	strd	r2, r3, [sp]
 8018514:	233a      	movs	r3, #58	; 0x3a
 8018516:	2202      	movs	r2, #2
 8018518:	f7ee fe26 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 801851c:	4604      	mov	r4, r0
 801851e:	2800      	cmp	r0, #0
 8018520:	d070      	beq.n	8018604 <net_icmpv6_send_echo_request+0x124>
	return (tc & NET_IPV6_DSCP_MASK) >> NET_IPV6_DSCP_OFFSET;
 8018522:	ea4f 039b 	mov.w	r3, fp, lsr #2
	if (net_ipv6_create(pkt, src, dst) ||
 8018526:	4642      	mov	r2, r8
 8018528:	4639      	mov	r1, r7
	pkt->ip_dscp = dscp;
 801852a:	ea43 1b8b 	orr.w	fp, r3, fp, lsl #6
 801852e:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
 8018532:	f000 f8bc 	bl	80186ae <net_ipv6_create>
 8018536:	4602      	mov	r2, r0
 8018538:	b140      	cbz	r0, 801854c <net_icmpv6_send_echo_request+0x6c>
	int ret = -ENOBUFS;
 801853a:	f06f 0768 	mvn.w	r7, #104	; 0x68
	net_pkt_unref(pkt);
 801853e:	4620      	mov	r0, r4
 8018540:	f7fe fecf 	bl	80172e2 <net_pkt_unref>
}
 8018544:	4638      	mov	r0, r7
 8018546:	b007      	add	sp, #28
 8018548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    net_icmpv6_create(pkt, NET_ICMPV6_ECHO_REQUEST, 0)) {
 801854c:	2180      	movs	r1, #128	; 0x80
 801854e:	4620      	mov	r0, r4
 8018550:	f7ff fe81 	bl	8018256 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
 8018554:	4607      	mov	r7, r0
 8018556:	2800      	cmp	r0, #0
 8018558:	d1ef      	bne.n	801853a <net_icmpv6_send_echo_request+0x5a>
	echo_req = (struct net_icmpv6_echo_req *)net_pkt_get_data(
 801855a:	a904      	add	r1, sp, #16
 801855c:	4620      	mov	r0, r4
 801855e:	f7ff f9e3 	bl	8017928 <net_pkt_get_data>
	if (!echo_req) {
 8018562:	2800      	cmp	r0, #0
 8018564:	d0e9      	beq.n	801853a <net_icmpv6_send_echo_request+0x5a>
	echo_req->sequence   = htons(sequence);
 8018566:	fa9a f39a 	rev16.w	r3, sl
	echo_req->identifier = htons(identifier);
 801856a:	ba76      	rev16	r6, r6
	net_pkt_set_data(pkt, &icmpv6_access);
 801856c:	a904      	add	r1, sp, #16
	echo_req->sequence   = htons(sequence);
 801856e:	8043      	strh	r3, [r0, #2]
	echo_req->identifier = htons(identifier);
 8018570:	8006      	strh	r6, [r0, #0]
	net_pkt_set_data(pkt, &icmpv6_access);
 8018572:	4620      	mov	r0, r4
 8018574:	f7ff f9f7 	bl	8017966 <net_pkt_set_data>
	if (data != NULL && data_size > 0) {
 8018578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801857a:	b1a3      	cbz	r3, 80185a6 <net_icmpv6_send_echo_request+0xc6>
 801857c:	b125      	cbz	r5, 8018588 <net_icmpv6_send_echo_request+0xa8>
		net_pkt_write(pkt, data, data_size);
 801857e:	462a      	mov	r2, r5
 8018580:	4619      	mov	r1, r3
 8018582:	4620      	mov	r0, r4
 8018584:	f7ff f9b5 	bl	80178f2 <net_pkt_write>
	net_pkt_cursor_init(pkt);
 8018588:	4620      	mov	r0, r4
 801858a:	f7fe ff3c 	bl	8017406 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 801858e:	213a      	movs	r1, #58	; 0x3a
 8018590:	4620      	mov	r0, r4
 8018592:	f000 f8d5 	bl	8018740 <net_ipv6_finalize>
	if (net_send_data(pkt) >= 0) {
 8018596:	4620      	mov	r0, r4
 8018598:	f7fd f855 	bl	8015646 <net_send_data>
 801859c:	2800      	cmp	r0, #0
 801859e:	dad1      	bge.n	8018544 <net_icmpv6_send_echo_request+0x64>
	ret = -EIO;
 80185a0:	f06f 0704 	mvn.w	r7, #4
 80185a4:	e7cb      	b.n	801853e <net_icmpv6_send_echo_request+0x5e>
	} else if (data == NULL && data_size > 0) {
 80185a6:	2d00      	cmp	r5, #0
 80185a8:	d0ee      	beq.n	8018588 <net_icmpv6_send_echo_request+0xa8>
		if (data_size >= sizeof(uint32_t)) {
 80185aa:	2d03      	cmp	r5, #3
 80185ac:	d91e      	bls.n	80185ec <net_icmpv6_send_echo_request+0x10c>
 80185ae:	f7f7 ff69 	bl	8010484 <sys_clock_cycle_get_32>
 80185b2:	4682      	mov	sl, r0
 80185b4:	f7f7 ff66 	bl	8010484 <sys_clock_cycle_get_32>
 80185b8:	4680      	mov	r8, r0
 80185ba:	f7f7 ff63 	bl	8010484 <sys_clock_cycle_get_32>
 80185be:	4606      	mov	r6, r0
			uint32_t time_stamp = htonl(k_cycle_get_32());
 80185c0:	ea4f 2818 	mov.w	r8, r8, lsr #8
			data_size -= sizeof(time_stamp);
 80185c4:	3d04      	subs	r5, #4
 80185c6:	f7f7 ff5d 	bl	8010484 <sys_clock_cycle_get_32>
			net_pkt_write(pkt, &time_stamp, sizeof(time_stamp));
 80185ca:	464a      	mov	r2, r9
			uint32_t time_stamp = htonl(k_cycle_get_32());
 80185cc:	0603      	lsls	r3, r0, #24
 80185ce:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80185d2:	0236      	lsls	r6, r6, #8
			net_pkt_write(pkt, &time_stamp, sizeof(time_stamp));
 80185d4:	a903      	add	r1, sp, #12
			uint32_t time_stamp = htonl(k_cycle_get_32());
 80185d6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
			net_pkt_write(pkt, &time_stamp, sizeof(time_stamp));
 80185da:	4620      	mov	r0, r4
			uint32_t time_stamp = htonl(k_cycle_get_32());
 80185dc:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 80185e0:	ea43 0308 	orr.w	r3, r3, r8
 80185e4:	4333      	orrs	r3, r6
 80185e6:	9303      	str	r3, [sp, #12]
			net_pkt_write(pkt, &time_stamp, sizeof(time_stamp));
 80185e8:	f7ff f983 	bl	80178f2 <net_pkt_write>
		for (size_t i = 0; i < data_size; i++) {
 80185ec:	2600      	movs	r6, #0
 80185ee:	42b5      	cmp	r5, r6
 80185f0:	d0ca      	beq.n	8018588 <net_icmpv6_send_echo_request+0xa8>
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
 80185f2:	2201      	movs	r2, #1
 80185f4:	a903      	add	r1, sp, #12
 80185f6:	4620      	mov	r0, r4
 80185f8:	f88d 600c 	strb.w	r6, [sp, #12]
 80185fc:	3601      	adds	r6, #1
 80185fe:	f7ff f978 	bl	80178f2 <net_pkt_write>
 8018602:	e7f4      	b.n	80185ee <net_icmpv6_send_echo_request+0x10e>
		return -ENOMEM;
 8018604:	f06f 070b 	mvn.w	r7, #11
 8018608:	e79c      	b.n	8018544 <net_icmpv6_send_echo_request+0x64>

0801860a <net_nbr_unref>:
	if (--nbr->ref) {
 801860a:	7803      	ldrb	r3, [r0, #0]
 801860c:	3b01      	subs	r3, #1
 801860e:	b2db      	uxtb	r3, r3
 8018610:	7003      	strb	r3, [r0, #0]
 8018612:	b913      	cbnz	r3, 801861a <net_nbr_unref+0x10>
	if (nbr->remove) {
 8018614:	6903      	ldr	r3, [r0, #16]
 8018616:	b103      	cbz	r3, 801861a <net_nbr_unref+0x10>
		nbr->remove(nbr);
 8018618:	4718      	bx	r3
}
 801861a:	4770      	bx	lr

0801861c <net_nbr_ref>:
	nbr->ref++;
 801861c:	7802      	ldrb	r2, [r0, #0]
 801861e:	3201      	adds	r2, #1
 8018620:	7002      	strb	r2, [r0, #0]
}
 8018622:	4770      	bx	lr

08018624 <net_nbr_get>:
{
 8018624:	b530      	push	{r4, r5, lr}
 8018626:	4601      	mov	r1, r0
	for (i = 0; i < table->nbr_count; i++) {
 8018628:	8905      	ldrh	r5, [r0, #8]
 801862a:	2200      	movs	r2, #0
 801862c:	4295      	cmp	r5, r2
 801862e:	dc01      	bgt.n	8018634 <net_nbr_get+0x10>
	return NULL;
 8018630:	2000      	movs	r0, #0
 8018632:	e00d      	b.n	8018650 <net_nbr_get+0x2c>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
 8018634:	680c      	ldr	r4, [r1, #0]
			  start->size + start->extra_data_size) * idx));
 8018636:	88a0      	ldrh	r0, [r4, #4]
 8018638:	8863      	ldrh	r3, [r4, #2]
 801863a:	4403      	add	r3, r0
 801863c:	3314      	adds	r3, #20
 801863e:	4353      	muls	r3, r2
	return (struct net_nbr *)((uint8_t *)start +
 8018640:	18e0      	adds	r0, r4, r3
		if (!nbr->ref) {
 8018642:	5ce3      	ldrb	r3, [r4, r3]
 8018644:	b92b      	cbnz	r3, 8018652 <net_nbr_get+0x2e>
			nbr->data = nbr->__nbr;
 8018646:	f100 0314 	add.w	r3, r0, #20
 801864a:	60c3      	str	r3, [r0, #12]
	nbr->ref++;
 801864c:	2301      	movs	r3, #1
 801864e:	7003      	strb	r3, [r0, #0]
}
 8018650:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
 8018652:	3201      	adds	r2, #1
 8018654:	e7ea      	b.n	801862c <net_nbr_get+0x8>

08018656 <net_ipv6_is_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8018656:	6802      	ldr	r2, [r0, #0]
{
 8018658:	4603      	mov	r3, r0
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 801865a:	b94a      	cbnz	r2, 8018670 <net_ipv6_is_addr_loopback+0x1a>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 801865c:	6840      	ldr	r0, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 801865e:	b948      	cbnz	r0, 8018674 <net_ipv6_is_addr_loopback+0x1e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8018660:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8018662:	b942      	cbnz	r2, 8018676 <net_ipv6_is_addr_loopback+0x20>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 8018664:	68d8      	ldr	r0, [r3, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8018666:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
 801866a:	4258      	negs	r0, r3
 801866c:	4158      	adcs	r0, r3
 801866e:	4770      	bx	lr
 8018670:	2000      	movs	r0, #0
 8018672:	4770      	bx	lr
 8018674:	4610      	mov	r0, r2
}
 8018676:	4770      	bx	lr

08018678 <net_ipv6_is_addr_mcast_group>:
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8018678:	884a      	ldrh	r2, [r1, #2]
 801867a:	8843      	ldrh	r3, [r0, #2]
 801867c:	429a      	cmp	r2, r3
 801867e:	d114      	bne.n	80186aa <net_ipv6_is_addr_mcast_group+0x32>
	return UNALIGNED_GET(&addr->s6_addr16[1]) == group->s6_addr16[1] &&
 8018680:	888a      	ldrh	r2, [r1, #4]
 8018682:	8883      	ldrh	r3, [r0, #4]
 8018684:	429a      	cmp	r2, r3
 8018686:	d110      	bne.n	80186aa <net_ipv6_is_addr_mcast_group+0x32>
		UNALIGNED_GET(&addr->s6_addr16[2]) == group->s6_addr16[2] &&
 8018688:	88ca      	ldrh	r2, [r1, #6]
 801868a:	88c3      	ldrh	r3, [r0, #6]
 801868c:	429a      	cmp	r2, r3
 801868e:	d10c      	bne.n	80186aa <net_ipv6_is_addr_mcast_group+0x32>
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
 8018690:	684b      	ldr	r3, [r1, #4]
 8018692:	6842      	ldr	r2, [r0, #4]
		UNALIGNED_GET(&addr->s6_addr16[3]) == group->s6_addr16[3] &&
 8018694:	4293      	cmp	r3, r2
 8018696:	d108      	bne.n	80186aa <net_ipv6_is_addr_mcast_group+0x32>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8018698:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
 801869a:	4293      	cmp	r3, r2
 801869c:	d105      	bne.n	80186aa <net_ipv6_is_addr_mcast_group+0x32>
		UNALIGNED_GET(&addr->s6_addr32[3]) == group->s6_addr32[3];
 801869e:	68c3      	ldr	r3, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 80186a0:	68c8      	ldr	r0, [r1, #12]
 80186a2:	1ac3      	subs	r3, r0, r3
 80186a4:	4258      	negs	r0, r3
 80186a6:	4158      	adcs	r0, r3
 80186a8:	4770      	bx	lr
 80186aa:	2000      	movs	r0, #0
}
 80186ac:	4770      	bx	lr

080186ae <net_ipv6_create>:
{
 80186ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 80186b2:	2328      	movs	r3, #40	; 0x28
 80186b4:	f04f 0800 	mov.w	r8, #0
{
 80186b8:	460e      	mov	r6, r1
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 80186ba:	4669      	mov	r1, sp
{
 80186bc:	4605      	mov	r5, r0
 80186be:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 80186c0:	e9cd 8300 	strd	r8, r3, [sp]
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 80186c4:	f7ff f930 	bl	8017928 <net_pkt_get_data>
	if (!ipv6_hdr) {
 80186c8:	4604      	mov	r4, r0
 80186ca:	b3b0      	cbz	r0, 801873a <net_ipv6_create+0x8c>
	return pkt->ip_dscp;
 80186cc:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
	ipv6_hdr->flow    = 0U;
 80186d0:	f880 8002 	strb.w	r8, [r0, #2]
	*tc |= (dscp << NET_IPV6_DSCP_OFFSET) & NET_IPV6_DSCP_MASK;
 80186d4:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80186d8:	f880 8003 	strb.w	r8, [r0, #3]
	ipv6_hdr->len     = 0U;
 80186dc:	f880 8004 	strb.w	r8, [r0, #4]
 * @param ecn ECN value to set.
 */
static inline void net_ipv6_set_ecn(uint8_t *tc, uint8_t ecn)
{
	*tc &= ~NET_IPV6_ECN_MASK;
	*tc |= ecn & NET_IPV6_ECN_MASK;
 80186e0:	009b      	lsls	r3, r3, #2
 80186e2:	f880 8005 	strb.w	r8, [r0, #5]
	ipv6_hdr->nexthdr = 0U;
 80186e6:	f880 8006 	strb.w	r8, [r0, #6]
 80186ea:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
	ipv6_hdr->vtc     = 0x60 | ((tc >> 4) & 0x0F);
 80186ee:	091b      	lsrs	r3, r3, #4
	ipv6_hdr->tcflow  = (tc << 4) & 0xF0;
 80186f0:	0112      	lsls	r2, r2, #4
	ipv6_hdr->vtc     = 0x60 | ((tc >> 4) & 0x0F);
 80186f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	ipv6_hdr->tcflow  = (tc << 4) & 0xF0;
 80186f6:	7042      	strb	r2, [r0, #1]
	ipv6_hdr->vtc     = 0x60 | ((tc >> 4) & 0x0F);
 80186f8:	7003      	strb	r3, [r0, #0]
	return pkt->ipv6_hop_limit;
 80186fa:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
 80186fe:	71c3      	strb	r3, [r0, #7]
	if (ipv6_hdr->hop_limit == 0U) {
 8018700:	b91b      	cbnz	r3, 801870a <net_ipv6_create+0x5c>
			net_if_ipv6_get_hop_limit(net_pkt_iface(pkt));
 8018702:	69a8      	ldr	r0, [r5, #24]
 8018704:	f7fd fb4a 	bl	8015d9c <net_if_ipv6_get_hop_limit>
		ipv6_hdr->hop_limit =
 8018708:	71e0      	strb	r0, [r4, #7]
	memcpy(dest, src, sizeof(struct in6_addr));
 801870a:	2210      	movs	r2, #16
 801870c:	4639      	mov	r1, r7
 801870e:	f104 0018 	add.w	r0, r4, #24
 8018712:	f7fc fab0 	bl	8014c76 <memcpy>
 8018716:	4631      	mov	r1, r6
 8018718:	2210      	movs	r2, #16
 801871a:	f104 0008 	add.w	r0, r4, #8
 801871e:	f7fc faaa 	bl	8014c76 <memcpy>
	pkt->ip_hdr_len = len;
 8018722:	2328      	movs	r3, #40	; 0x28
	return net_pkt_set_data(pkt, &ipv6_access);
 8018724:	4669      	mov	r1, sp
 8018726:	4628      	mov	r0, r5
 8018728:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
	pkt->ipv6_ext_len = len;
 801872c:	2300      	movs	r3, #0
 801872e:	876b      	strh	r3, [r5, #58]	; 0x3a
 8018730:	f7ff f919 	bl	8017966 <net_pkt_set_data>
}
 8018734:	b002      	add	sp, #8
 8018736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
 801873a:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801873e:	e7f9      	b.n	8018734 <net_ipv6_create+0x86>

08018740 <net_ipv6_finalize>:
{
 8018740:	b573      	push	{r0, r1, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 8018742:	2328      	movs	r3, #40	; 0x28
 8018744:	2500      	movs	r5, #0
{
 8018746:	460e      	mov	r6, r1
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 8018748:	4669      	mov	r1, sp
{
 801874a:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 801874c:	e9cd 5300 	strd	r5, r3, [sp]
	pkt->overwrite = overwrite;
 8018750:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 8018754:	f043 0301 	orr.w	r3, r3, #1
 8018758:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 801875c:	f7ff f8e4 	bl	8017928 <net_pkt_get_data>
	if (!ipv6_hdr) {
 8018760:	b918      	cbnz	r0, 801876a <net_ipv6_finalize+0x2a>
		return -ENOBUFS;
 8018762:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 8018766:	b002      	add	sp, #8
 8018768:	bd70      	pop	{r4, r5, r6, pc}
	ipv6_hdr->len = htons(net_pkt_get_len(pkt) -
 801876a:	68a2      	ldr	r2, [r4, #8]
	size_t bytes = 0;
 801876c:	462b      	mov	r3, r5
	while (buf) {
 801876e:	b9ca      	cbnz	r2, 80187a4 <net_ipv6_finalize+0x64>
 8018770:	3b28      	subs	r3, #40	; 0x28
	net_pkt_set_data(pkt, &ipv6_access);
 8018772:	4669      	mov	r1, sp
	ipv6_hdr->len = htons(net_pkt_get_len(pkt) -
 8018774:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8018778:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 801877c:	8083      	strh	r3, [r0, #4]
	return pkt->ipv6_next_hdr;
 801877e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8018782:	2bff      	cmp	r3, #255	; 0xff
 8018784:	bf08      	it	eq
 8018786:	4633      	moveq	r3, r6
 8018788:	7183      	strb	r3, [r0, #6]
	net_pkt_set_data(pkt, &ipv6_access);
 801878a:	4620      	mov	r0, r4
 801878c:	f7ff f8eb 	bl	8017966 <net_pkt_set_data>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
 8018790:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8018794:	2bff      	cmp	r3, #255	; 0xff
 8018796:	d109      	bne.n	80187ac <net_ipv6_finalize+0x6c>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
 8018798:	2e11      	cmp	r6, #17
 801879a:	d10e      	bne.n	80187ba <net_ipv6_finalize+0x7a>
		return net_udp_finalize(pkt);
 801879c:	4620      	mov	r0, r4
 801879e:	f001 fb1c 	bl	8019dda <net_udp_finalize>
 80187a2:	e7e0      	b.n	8018766 <net_ipv6_finalize+0x26>
		bytes += buf->len;
 80187a4:	8a11      	ldrh	r1, [r2, #16]
		buf = buf->frags;
 80187a6:	6852      	ldr	r2, [r2, #4]
		bytes += buf->len;
 80187a8:	440b      	add	r3, r1
		buf = buf->frags;
 80187aa:	e7e0      	b.n	801876e <net_ipv6_finalize+0x2e>
	    net_pkt_skip(pkt, net_pkt_ipv6_ext_len(pkt))) {
 80187ac:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 80187ae:	4620      	mov	r0, r4
 80187b0:	f7fe fe8d 	bl	80174ce <net_pkt_skip>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
 80187b4:	2800      	cmp	r0, #0
 80187b6:	d0ef      	beq.n	8018798 <net_ipv6_finalize+0x58>
 80187b8:	e7d3      	b.n	8018762 <net_ipv6_finalize+0x22>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 80187ba:	2e06      	cmp	r6, #6
 80187bc:	d103      	bne.n	80187c6 <net_ipv6_finalize+0x86>
		return net_tcp_finalize(pkt);
 80187be:	4620      	mov	r0, r4
 80187c0:	f001 f8f3 	bl	80199aa <net_tcp_finalize>
 80187c4:	e7cf      	b.n	8018766 <net_ipv6_finalize+0x26>
	} else if (next_header_proto == IPPROTO_ICMPV6) {
 80187c6:	2e3a      	cmp	r6, #58	; 0x3a
 80187c8:	d103      	bne.n	80187d2 <net_ipv6_finalize+0x92>
		return net_icmpv6_finalize(pkt);
 80187ca:	4620      	mov	r0, r4
 80187cc:	f7ff fd24 	bl	8018218 <net_icmpv6_finalize>
 80187d0:	e7c9      	b.n	8018766 <net_ipv6_finalize+0x26>
	return 0;
 80187d2:	2000      	movs	r0, #0
 80187d4:	e7c7      	b.n	8018766 <net_ipv6_finalize+0x26>

080187d6 <net_ipv6_init>:

void net_ipv6_init(void)
{
 80187d6:	b508      	push	{r3, lr}
	net_ipv6_nbr_init();
 80187d8:	f7f0 fde6 	bl	80093a8 <net_ipv6_nbr_init>

#if defined(CONFIG_NET_IPV6_MLD)
	net_ipv6_mld_init();
#endif
}
 80187dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_ipv6_mld_init();
 80187e0:	f7f0 be8a 	b.w	80094f8 <net_ipv6_mld_init>

080187e4 <net_ipv6_is_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80187e4:	6802      	ldr	r2, [r0, #0]
{
 80187e6:	4603      	mov	r3, r0
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80187e8:	b942      	cbnz	r2, 80187fc <net_ipv6_is_addr_unspecified+0x18>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80187ea:	6840      	ldr	r0, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80187ec:	b940      	cbnz	r0, 8018800 <net_ipv6_is_addr_unspecified+0x1c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80187ee:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80187f0:	b93a      	cbnz	r2, 8018802 <net_ipv6_is_addr_unspecified+0x1e>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 80187f2:	68d8      	ldr	r0, [r3, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80187f4:	fab0 f080 	clz	r0, r0
 80187f8:	0940      	lsrs	r0, r0, #5
 80187fa:	4770      	bx	lr
 80187fc:	2000      	movs	r0, #0
 80187fe:	4770      	bx	lr
 8018800:	4610      	mov	r0, r2
}
 8018802:	4770      	bx	lr

08018804 <net_neighbor_data_remove>:
}
 8018804:	4770      	bx	lr

08018806 <nbr_clear_ns_pending>:
	data->send_ns = 0;
 8018806:	2200      	movs	r2, #0
 8018808:	2300      	movs	r3, #0
{
 801880a:	b510      	push	{r4, lr}
 801880c:	4604      	mov	r4, r0
	data->send_ns = 0;
 801880e:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (data->pending) {
 8018812:	6800      	ldr	r0, [r0, #0]
 8018814:	b118      	cbz	r0, 801881e <nbr_clear_ns_pending+0x18>
		net_pkt_unref(data->pending);
 8018816:	f7fe fd64 	bl	80172e2 <net_pkt_unref>
		data->pending = NULL;
 801881a:	2300      	movs	r3, #0
 801881c:	6023      	str	r3, [r4, #0]
}
 801881e:	bd10      	pop	{r4, pc}

08018820 <nbr_free>:
{
 8018820:	b538      	push	{r3, r4, r5, lr}
 8018822:	4604      	mov	r4, r0
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
 8018824:	68c0      	ldr	r0, [r0, #12]
 8018826:	f7ff ffee 	bl	8018806 <nbr_clear_ns_pending>
	net_ipv6_nbr_data(nbr)->reachable = 0;
 801882a:	2100      	movs	r1, #0
	return (struct net_ipv6_nbr_data *)nbr->data;
 801882c:	68e3      	ldr	r3, [r4, #12]
 801882e:	2000      	movs	r0, #0
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 8018830:	2500      	movs	r5, #0
	net_ipv6_nbr_data(nbr)->reachable = 0;
 8018832:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8018836:	68e3      	ldr	r3, [r4, #12]
	net_nbr_unref(nbr);
 8018838:	4620      	mov	r0, r4
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 801883a:	621d      	str	r5, [r3, #32]
	net_nbr_unref(nbr);
 801883c:	f7ff fee5 	bl	801860a <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
 8018840:	4629      	mov	r1, r5
 8018842:	4620      	mov	r0, r4
}
 8018844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unlink(nbr, NULL);
 8018848:	f7ef bd8c 	b.w	8008364 <net_nbr_unlink>

0801884c <k_uptime_get>:
{
 801884c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 801884e:	f003 fadb 	bl	801be08 <z_impl_k_uptime_ticks>
 8018852:	220a      	movs	r2, #10
 8018854:	2300      	movs	r3, #0
 8018856:	f7e7 ffed 	bl	8000834 <__aeabi_uldivmod>
}
 801885a:	bd08      	pop	{r3, pc}

0801885c <set_llao>:
{
 801885c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
 801885e:	f88d 3004 	strb.w	r3, [sp, #4]
 8018862:	08d3      	lsrs	r3, r2, #3
{
 8018864:	460d      	mov	r5, r1
 8018866:	4614      	mov	r4, r2
	if (net_pkt_write(pkt, &opt_hdr,
 8018868:	a901      	add	r1, sp, #4
 801886a:	2202      	movs	r2, #2
{
 801886c:	4606      	mov	r6, r0
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
 801886e:	f88d 3005 	strb.w	r3, [sp, #5]
	if (net_pkt_write(pkt, &opt_hdr,
 8018872:	f7ff f83e 	bl	80178f2 <net_pkt_write>
 8018876:	b110      	cbz	r0, 801887e <set_llao+0x22>
		return false;
 8018878:	2000      	movs	r0, #0
}
 801887a:	b002      	add	sp, #8
 801887c:	bd70      	pop	{r4, r5, r6, pc}
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
 801887e:	6829      	ldr	r1, [r5, #0]
 8018880:	4630      	mov	r0, r6
 8018882:	792a      	ldrb	r2, [r5, #4]
 8018884:	f7ff f835 	bl	80178f2 <net_pkt_write>
			  sizeof(struct net_icmpv6_nd_opt_hdr)) ||
 8018888:	4601      	mov	r1, r0
 801888a:	2800      	cmp	r0, #0
 801888c:	d1f4      	bne.n	8018878 <set_llao+0x1c>
	    net_pkt_memset(pkt, 0, llao_len - lladdr->len - 2)) {
 801888e:	792a      	ldrb	r2, [r5, #4]
 8018890:	4630      	mov	r0, r6
 8018892:	1aa2      	subs	r2, r4, r2
 8018894:	3a02      	subs	r2, #2
 8018896:	f7fe fec6 	bl	8017626 <net_pkt_memset>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
 801889a:	fab0 f080 	clz	r0, r0
 801889e:	0940      	lsrs	r0, r0, #5
 80188a0:	e7eb      	b.n	801887a <set_llao+0x1e>

080188a2 <read_llao>:
	llstorage->len = NET_LINK_ADDR_MAX_LENGTH;
 80188a2:	2306      	movs	r3, #6
{
 80188a4:	b570      	push	{r4, r5, r6, lr}
	llstorage->len = NET_LINK_ADDR_MAX_LENGTH;
 80188a6:	7053      	strb	r3, [r2, #1]
{
 80188a8:	4615      	mov	r5, r2
	if (net_pkt_lladdr_src(pkt)->len < llstorage->len) {
 80188aa:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
 80188ae:	460c      	mov	r4, r1
	if (net_pkt_read(pkt, llstorage->addr, llstorage->len)) {
 80188b0:	1ca9      	adds	r1, r5, #2
{
 80188b2:	4606      	mov	r6, r0
	if (net_pkt_lladdr_src(pkt)->len < llstorage->len) {
 80188b4:	2b05      	cmp	r3, #5
		llstorage->len = net_pkt_lladdr_src(pkt)->len;
 80188b6:	bf98      	it	ls
 80188b8:	7053      	strbls	r3, [r2, #1]
	if (net_pkt_read(pkt, llstorage->addr, llstorage->len)) {
 80188ba:	7852      	ldrb	r2, [r2, #1]
 80188bc:	f7fe febe 	bl	801763c <net_pkt_read>
 80188c0:	b968      	cbnz	r0, 80188de <read_llao+0x3c>
	padding = len * 8U - 2 - llstorage->len;
 80188c2:	00e1      	lsls	r1, r4, #3
 80188c4:	786b      	ldrb	r3, [r5, #1]
 80188c6:	3902      	subs	r1, #2
 80188c8:	1ac9      	subs	r1, r1, r3
	if (padding) {
 80188ca:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80188ce:	d008      	beq.n	80188e2 <read_llao+0x40>
		if (net_pkt_skip(pkt, padding)) {
 80188d0:	4630      	mov	r0, r6
 80188d2:	f7fe fdfc 	bl	80174ce <net_pkt_skip>
 80188d6:	fab0 f080 	clz	r0, r0
 80188da:	0940      	lsrs	r0, r0, #5
}
 80188dc:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 80188de:	2000      	movs	r0, #0
 80188e0:	e7fc      	b.n	80188dc <read_llao+0x3a>
	return true;
 80188e2:	2001      	movs	r0, #1
 80188e4:	e7fa      	b.n	80188dc <read_llao+0x3a>

080188e6 <net_if_flag_is_set>:
	if (iface == NULL) {
 80188e6:	b140      	cbz	r0, 80188fa <net_if_flag_is_set+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80188e8:	6803      	ldr	r3, [r0, #0]
 80188ea:	f3bf 8f5b 	dmb	ish
 80188ee:	68d8      	ldr	r0, [r3, #12]
 80188f0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 80188f4:	4108      	asrs	r0, r1
 80188f6:	f000 0001 	and.w	r0, r0, #1
}
 80188fa:	4770      	bx	lr

080188fc <net_pkt_acknowledge_data.isra.0>:
	return net_pkt_skip(pkt, access->size);
 80188fc:	f7fe bde7 	b.w	80174ce <net_pkt_skip>

08018900 <net_linkaddr_set.isra.0>:
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
 8018900:	b410      	push	{r4}
	if (!lladdr_store || !new_addr) {
 8018902:	b138      	cbz	r0, 8018914 <net_linkaddr_set.isra.0+0x14>
 8018904:	b131      	cbz	r1, 8018914 <net_linkaddr_set.isra.0+0x14>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
 8018906:	2a06      	cmp	r2, #6
 8018908:	d804      	bhi.n	8018914 <net_linkaddr_set.isra.0+0x14>
	lladdr_store->len = new_len;
 801890a:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
 801890c:	3002      	adds	r0, #2

	return 0;
}
 801890e:	bc10      	pop	{r4}
	memcpy(lladdr_store->addr, new_addr, new_len);
 8018910:	f7fc b9b1 	b.w	8014c76 <memcpy>
}
 8018914:	bc10      	pop	{r4}
 8018916:	4770      	bx	lr

08018918 <net_neighbor_table_clear>:
 8018918:	4770      	bx	lr

0801891a <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
 801891a:	f7ef bff1 	b.w	8008900 <nbr_lookup.constprop.0>

0801891e <net_ipv6_send_na>:
{
 801891e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 8018922:	f04f 0a14 	mov.w	sl, #20
{
 8018926:	4699      	mov	r9, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 8018928:	2300      	movs	r3, #0
{
 801892a:	4690      	mov	r8, r2
	pkt = net_pkt_alloc_with_buffer(iface,
 801892c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
{
 8018930:	460d      	mov	r5, r1
 8018932:	4607      	mov	r7, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 8018934:	e9cd 3a02 	strd	r3, sl, [sp, #8]
	uint8_t total_len = net_if_get_link_addr(iface)->len +
 8018938:	6803      	ldr	r3, [r0, #0]
	return ROUND_UP(total_len, 8U);
 801893a:	7d1e      	ldrb	r6, [r3, #20]
	pkt = net_pkt_alloc_with_buffer(iface,
 801893c:	2300      	movs	r3, #0
	return ROUND_UP(total_len, 8U);
 801893e:	3609      	adds	r6, #9
 8018940:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
 8018944:	e9cd 2300 	strd	r2, r3, [sp]
 8018948:	eb06 010a 	add.w	r1, r6, sl
 801894c:	233a      	movs	r3, #58	; 0x3a
 801894e:	2202      	movs	r2, #2
 8018950:	f7ee fc0a 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 8018954:	4604      	mov	r4, r0
 8018956:	2800      	cmp	r0, #0
 8018958:	d04b      	beq.n	80189f2 <net_ipv6_send_na+0xd4>
	pkt->ipv6_hop_limit = hop_limit;
 801895a:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, dst) ||
 801895c:	4642      	mov	r2, r8
 801895e:	4629      	mov	r1, r5
 8018960:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8018964:	f7ff fea3 	bl	80186ae <net_ipv6_create>
 8018968:	4602      	mov	r2, r0
 801896a:	b140      	cbz	r0, 801897e <net_ipv6_send_na+0x60>
	int ret = -ENOBUFS;
 801896c:	f06f 0568 	mvn.w	r5, #104	; 0x68
	net_pkt_unref(pkt);
 8018970:	4620      	mov	r0, r4
 8018972:	f7fe fcb6 	bl	80172e2 <net_pkt_unref>
}
 8018976:	4628      	mov	r0, r5
 8018978:	b004      	add	sp, #16
 801897a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    net_icmpv6_create(pkt, NET_ICMPV6_NA, 0)) {
 801897e:	2188      	movs	r1, #136	; 0x88
 8018980:	4620      	mov	r0, r4
 8018982:	f7ff fc68 	bl	8018256 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
 8018986:	4680      	mov	r8, r0
 8018988:	2800      	cmp	r0, #0
 801898a:	d1ef      	bne.n	801896c <net_ipv6_send_na+0x4e>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
 801898c:	a902      	add	r1, sp, #8
 801898e:	4620      	mov	r0, r4
 8018990:	f7fe ffca 	bl	8017928 <net_pkt_get_data>
	if (!na_hdr) {
 8018994:	4605      	mov	r5, r0
 8018996:	2800      	cmp	r0, #0
 8018998:	d0e8      	beq.n	801896c <net_ipv6_send_na+0x4e>
	memset(na_hdr, 0, sizeof(struct net_icmpv6_na_hdr));
 801899a:	4652      	mov	r2, sl
 801899c:	4641      	mov	r1, r8
 801899e:	f7fc f975 	bl	8014c8c <memset>
	na_hdr->flags = flags;
 80189a2:	4628      	mov	r0, r5
 80189a4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	memcpy(dest, src, sizeof(struct in6_addr));
 80189a8:	2210      	movs	r2, #16
 80189aa:	4649      	mov	r1, r9
 80189ac:	f800 3b04 	strb.w	r3, [r0], #4
 80189b0:	f7fc f961 	bl	8014c76 <memcpy>
	if (net_pkt_set_data(pkt, &na_access)) {
 80189b4:	a902      	add	r1, sp, #8
 80189b6:	4620      	mov	r0, r4
 80189b8:	f7fe ffd5 	bl	8017966 <net_pkt_set_data>
 80189bc:	4605      	mov	r5, r0
 80189be:	2800      	cmp	r0, #0
 80189c0:	d1d4      	bne.n	801896c <net_ipv6_send_na+0x4e>
	return &iface->if_dev->link_addr;
 80189c2:	6839      	ldr	r1, [r7, #0]
	if (!set_llao(pkt, net_if_get_link_addr(iface),
 80189c4:	2302      	movs	r3, #2
 80189c6:	4632      	mov	r2, r6
 80189c8:	4620      	mov	r0, r4
 80189ca:	3110      	adds	r1, #16
 80189cc:	f7ff ff46 	bl	801885c <set_llao>
 80189d0:	2800      	cmp	r0, #0
 80189d2:	d0cb      	beq.n	801896c <net_ipv6_send_na+0x4e>
	net_pkt_cursor_init(pkt);
 80189d4:	4620      	mov	r0, r4
 80189d6:	f7fe fd16 	bl	8017406 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 80189da:	213a      	movs	r1, #58	; 0x3a
 80189dc:	4620      	mov	r0, r4
 80189de:	f7ff feaf 	bl	8018740 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
 80189e2:	4620      	mov	r0, r4
 80189e4:	f7fc fe2f 	bl	8015646 <net_send_data>
 80189e8:	2800      	cmp	r0, #0
 80189ea:	dac4      	bge.n	8018976 <net_ipv6_send_na+0x58>
		ret = -EINVAL;
 80189ec:	f06f 0515 	mvn.w	r5, #21
 80189f0:	e7be      	b.n	8018970 <net_ipv6_send_na+0x52>
		return -ENOMEM;
 80189f2:	f06f 050b 	mvn.w	r5, #11
 80189f6:	e7be      	b.n	8018976 <net_ipv6_send_na+0x58>

080189f8 <net_ipv6_nbr_set_reachable_timer>:
	time = net_if_ipv6_get_reachable_time(iface);
 80189f8:	6882      	ldr	r2, [r0, #8]
	if (!iface->config.ip.ipv6) {
 80189fa:	b10a      	cbz	r2, 8018a00 <net_ipv6_nbr_set_reachable_timer+0x8>
	return iface->config.ip.ipv6->reachable_time;
 80189fc:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
	ipv6_nd_restart_reachable_timer(nbr, time);
 8018a00:	2300      	movs	r3, #0
 8018a02:	4608      	mov	r0, r1
 8018a04:	f7ef bed4 	b.w	80087b0 <ipv6_nd_restart_reachable_timer>

08018a08 <handle_na_input>:
{
 8018a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 8018a0c:	2314      	movs	r3, #20
{
 8018a0e:	b08b      	sub	sp, #44	; 0x2c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 8018a10:	2500      	movs	r5, #0
{
 8018a12:	4604      	mov	r4, r0
 8018a14:	460f      	mov	r7, r1
 8018a16:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 8018a18:	e9cd 5302 	strd	r5, r3, [sp, #8]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 8018a1c:	ab01      	add	r3, sp, #4
 8018a1e:	9304      	str	r3, [sp, #16]
 8018a20:	2302      	movs	r3, #2
 8018a22:	9305      	str	r3, [sp, #20]
	uint16_t length = net_pkt_get_len(pkt);
 8018a24:	6883      	ldr	r3, [r0, #8]
	while (buf) {
 8018a26:	b94b      	cbnz	r3, 8018a3c <handle_na_input+0x34>
	if (net_if_flag_is_set(net_pkt_iface(pkt), NET_IF_IPV6_NO_ND)) {
 8018a28:	210b      	movs	r1, #11
 8018a2a:	69a0      	ldr	r0, [r4, #24]
 8018a2c:	f7ff ff5b 	bl	80188e6 <net_if_flag_is_set>
 8018a30:	4681      	mov	r9, r0
 8018a32:	b138      	cbz	r0, 8018a44 <handle_na_input+0x3c>
	return NET_DROP;
 8018a34:	2002      	movs	r0, #2
}
 8018a36:	b00b      	add	sp, #44	; 0x2c
 8018a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes += buf->len;
 8018a3c:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
 8018a3e:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 8018a40:	4415      	add	r5, r2
		buf = buf->frags;
 8018a42:	e7f0      	b.n	8018a26 <handle_na_input+0x1e>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
 8018a44:	a902      	add	r1, sp, #8
 8018a46:	4620      	mov	r0, r4
 8018a48:	f7fe ff6e 	bl	8017928 <net_pkt_get_data>
	if (!na_hdr) {
 8018a4c:	4606      	mov	r6, r0
 8018a4e:	2800      	cmp	r0, #0
 8018a50:	d0f0      	beq.n	8018a34 <handle_na_input+0x2c>
	uint16_t length = net_pkt_get_len(pkt);
 8018a52:	b2ad      	uxth	r5, r5
	if (((length < (sizeof(struct net_ipv6_hdr) +
 8018a54:	2d41      	cmp	r5, #65	; 0x41
 8018a56:	d90b      	bls.n	8018a70 <handle_na_input+0x68>
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
 8018a58:	79fb      	ldrb	r3, [r7, #7]
 8018a5a:	2bff      	cmp	r3, #255	; 0xff
 8018a5c:	d108      	bne.n	8018a70 <handle_na_input+0x68>
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
 8018a5e:	7903      	ldrb	r3, [r0, #4]
 8018a60:	2bff      	cmp	r3, #255	; 0xff
 8018a62:	d005      	beq.n	8018a70 <handle_na_input+0x68>
	     net_ipv6_is_addr_mcast((struct in6_addr *)na_hdr->tgt) ||
 8018a64:	7803      	ldrb	r3, [r0, #0]
 8018a66:	0658      	lsls	r0, r3, #25
 8018a68:	d506      	bpl.n	8018a78 <handle_na_input+0x70>
	     (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED &&
 8018a6a:	7e3b      	ldrb	r3, [r7, #24]
 8018a6c:	2bff      	cmp	r3, #255	; 0xff
 8018a6e:	d103      	bne.n	8018a78 <handle_na_input+0x70>
	      net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->dst))) &&
 8018a70:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d1dd      	bne.n	8018a34 <handle_na_input+0x2c>
	net_pkt_acknowledge_data(pkt, &na_access);
 8018a78:	9903      	ldr	r1, [sp, #12]
 8018a7a:	4620      	mov	r0, r4
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
 8018a7c:	3d2c      	subs	r5, #44	; 0x2c
	net_pkt_acknowledge_data(pkt, &na_access);
 8018a7e:	f7ff ff3d 	bl	80188fc <net_pkt_acknowledge_data.isra.0>
	pkt->ipv6_ext_opt_len = len;
 8018a82:	2314      	movs	r3, #20
	uint16_t tllao_offset = 0U;
 8018a84:	f04f 0800 	mov.w	r8, #0
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
 8018a88:	b2ad      	uxth	r5, r5
				net_pkt_get_data(pkt, &nd_access);
 8018a8a:	a904      	add	r1, sp, #16
 8018a8c:	4620      	mov	r0, r4
 8018a8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8018a92:	f7fe ff49 	bl	8017928 <net_pkt_get_data>
	while (nd_opt_hdr && nd_opt_hdr->len &&
 8018a96:	b130      	cbz	r0, 8018aa6 <handle_na_input+0x9e>
 8018a98:	7842      	ldrb	r2, [r0, #1]
 8018a9a:	b122      	cbz	r2, 8018aa6 <handle_na_input+0x9e>
	return pkt->ipv6_ext_opt_len;
 8018a9c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8018aa0:	42a9      	cmp	r1, r5
	       net_pkt_ipv6_ext_opt_len(pkt) < length) {
 8018aa2:	460b      	mov	r3, r1
	while (nd_opt_hdr && nd_opt_hdr->len &&
 8018aa4:	d313      	bcc.n	8018ace <handle_na_input+0xc6>
						  (struct in6_addr *)na_hdr->tgt);
 8018aa6:	1d35      	adds	r5, r6, #4
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
 8018aa8:	69a0      	ldr	r0, [r4, #24]
 8018aaa:	4629      	mov	r1, r5
 8018aac:	f7fd f810 	bl	8015ad0 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
 8018ab0:	b350      	cbz	r0, 8018b08 <handle_na_input+0x100>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
 8018ab2:	f990 302d 	ldrsb.w	r3, [r0, #45]	; 0x2d
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d1bc      	bne.n	8018a34 <handle_na_input+0x2c>
	if (net_ipv6_is_ll_addr(addr)) {
 8018aba:	88b2      	ldrh	r2, [r6, #4]
 8018abc:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d0b7      	beq.n	8018a34 <handle_na_input+0x2c>
	net_if_ipv6_dad_failed(iface, addr);
 8018ac4:	4629      	mov	r1, r5
 8018ac6:	69a0      	ldr	r0, [r4, #24]
 8018ac8:	f7ec ff36 	bl	8005938 <net_if_ipv6_dad_failed>
	return true;
 8018acc:	e7b2      	b.n	8018a34 <handle_na_input+0x2c>
		switch (nd_opt_hdr->type) {
 8018ace:	7800      	ldrb	r0, [r0, #0]
 8018ad0:	2802      	cmp	r0, #2
 8018ad2:	d109      	bne.n	8018ae8 <handle_na_input+0xe0>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
 8018ad4:	f8b4 803a 	ldrh.w	r8, [r4, #58]	; 0x3a
 8018ad8:	f108 0806 	add.w	r8, r8, #6
 8018adc:	4443      	add	r3, r8
 8018ade:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8018ae2:	4443      	add	r3, r8
 8018ae4:	fa1f f883 	uxth.w	r8, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
 8018ae8:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8018aec:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
 8018aee:	428b      	cmp	r3, r1
	pkt->ipv6_ext_opt_len = len;
 8018af0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8018af4:	d99e      	bls.n	8018a34 <handle_na_input+0x2c>
		net_pkt_acknowledge_data(pkt, &nd_access);
 8018af6:	9905      	ldr	r1, [sp, #20]
 8018af8:	4620      	mov	r0, r4
 8018afa:	f7ff feff 	bl	80188fc <net_pkt_acknowledge_data.isra.0>
					net_pkt_get_data(pkt, &nd_access);
 8018afe:	a904      	add	r1, sp, #16
 8018b00:	4620      	mov	r0, r4
 8018b02:	f7fe ff11 	bl	8017928 <net_pkt_get_data>
 8018b06:	e7c6      	b.n	8018a96 <handle_na_input+0x8e>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
 8018b08:	4629      	mov	r1, r5
	struct net_linkaddr_storage lladdr = { 0 };
 8018b0a:	e9cd 0006 	strd	r0, r0, [sp, #24]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
 8018b0e:	69a0      	ldr	r0, [r4, #24]
 8018b10:	f7ef fef6 	bl	8008900 <nbr_lookup.constprop.0>
	if (!nbr) {
 8018b14:	4605      	mov	r5, r0
 8018b16:	2800      	cmp	r0, #0
 8018b18:	d08c      	beq.n	8018a34 <handle_na_input+0x2c>
	if (tllao_offset) {
 8018b1a:	f1b8 0f00 	cmp.w	r8, #0
 8018b1e:	d143      	bne.n	8018ba8 <handle_na_input+0x1a0>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
 8018b20:	786b      	ldrb	r3, [r5, #1]
 8018b22:	2bff      	cmp	r3, #255	; 0xff
 8018b24:	d058      	beq.n	8018bd8 <handle_na_input+0x1d0>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
 8018b26:	7868      	ldrb	r0, [r5, #1]
 8018b28:	f7ef fc40 	bl	80083ac <net_nbr_get_lladdr>
	if (!cached_lladdr) {
 8018b2c:	4607      	mov	r7, r0
 8018b2e:	2800      	cmp	r0, #0
 8018b30:	d080      	beq.n	8018a34 <handle_na_input+0x2c>
	if (tllao_offset) {
 8018b32:	f1b8 0f00 	cmp.w	r8, #0
 8018b36:	d00a      	beq.n	8018b4e <handle_na_input+0x146>
		lladdr_changed = memcmp(lladdr.addr,
 8018b38:	7842      	ldrb	r2, [r0, #1]
 8018b3a:	1c81      	adds	r1, r0, #2
 8018b3c:	f10d 001a 	add.w	r0, sp, #26
 8018b40:	f7fc f870 	bl	8014c24 <memcmp>
 8018b44:	f1b0 0900 	subs.w	r9, r0, #0
 8018b48:	bf18      	it	ne
 8018b4a:	f04f 0901 	movne.w	r9, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
 8018b4e:	68eb      	ldr	r3, [r5, #12]
 8018b50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d155      	bne.n	8018c04 <handle_na_input+0x1fc>
		if (!tllao_offset) {
 8018b58:	f1b8 0f00 	cmp.w	r8, #0
 8018b5c:	f43f af6a 	beq.w	8018a34 <handle_na_input+0x2c>
		if (lladdr_changed) {
 8018b60:	f1b9 0f00 	cmp.w	r9, #0
 8018b64:	d008      	beq.n	8018b78 <handle_na_input+0x170>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
 8018b66:	4638      	mov	r0, r7
 8018b68:	f7ef feb6 	bl	80088d8 <dbg_update_neighbor_lladdr.constprop.0>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
 8018b6c:	787a      	ldrb	r2, [r7, #1]
 8018b6e:	f10d 011a 	add.w	r1, sp, #26
 8018b72:	4638      	mov	r0, r7
 8018b74:	f7ff fec4 	bl	8018900 <net_linkaddr_set.isra.0>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
 8018b78:	7833      	ldrb	r3, [r6, #0]
 8018b7a:	0659      	lsls	r1, r3, #25
 8018b7c:	f140 808a 	bpl.w	8018c94 <handle_na_input+0x28c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
 8018b80:	2101      	movs	r1, #1
 8018b82:	4628      	mov	r0, r5
 8018b84:	f7ef fede 	bl	8008944 <ipv6_nbr_set_state>
 8018b88:	68ea      	ldr	r2, [r5, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
 8018b8a:	2300      	movs	r3, #0
			net_ipv6_nbr_data(nbr)->reachable = 0;
 8018b8c:	2000      	movs	r0, #0
 8018b8e:	2100      	movs	r1, #0
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
 8018b90:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8018b94:	68ea      	ldr	r2, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable = 0;
 8018b96:	e9c2 0106 	strd	r0, r1, [r2, #24]
 8018b9a:	68ea      	ldr	r2, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 8018b9c:	6213      	str	r3, [r2, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
 8018b9e:	4629      	mov	r1, r5
 8018ba0:	69a0      	ldr	r0, [r4, #24]
 8018ba2:	f7ff ff29 	bl	80189f8 <net_ipv6_nbr_set_reachable_timer>
 8018ba6:	e03e      	b.n	8018c26 <handle_na_input+0x21e>
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
 8018ba8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		net_pkt_cursor_init(pkt);
 8018bac:	4620      	mov	r0, r4
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
 8018bae:	f88d 3019 	strb.w	r3, [sp, #25]
		net_pkt_cursor_init(pkt);
 8018bb2:	f7fe fc28 	bl	8017406 <net_pkt_cursor_init>
		if (net_pkt_skip(pkt, tllao_offset) ||
 8018bb6:	4641      	mov	r1, r8
 8018bb8:	4620      	mov	r0, r4
 8018bba:	f7fe fc88 	bl	80174ce <net_pkt_skip>
 8018bbe:	2800      	cmp	r0, #0
 8018bc0:	f47f af38 	bne.w	8018a34 <handle_na_input+0x2c>
		    net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
 8018bc4:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8018bc8:	f10d 011a 	add.w	r1, sp, #26
 8018bcc:	4620      	mov	r0, r4
 8018bce:	f7fe fd35 	bl	801763c <net_pkt_read>
		if (net_pkt_skip(pkt, tllao_offset) ||
 8018bd2:	2800      	cmp	r0, #0
 8018bd4:	d0a4      	beq.n	8018b20 <handle_na_input+0x118>
 8018bd6:	e72d      	b.n	8018a34 <handle_na_input+0x2c>
		if (!tllao_offset) {
 8018bd8:	f1b8 0f00 	cmp.w	r8, #0
 8018bdc:	f43f af2a 	beq.w	8018a34 <handle_na_input+0x2c>
		nbr_lladdr.len = lladdr.len;
 8018be0:	f89d 3019 	ldrb.w	r3, [sp, #25]
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
 8018be4:	aa08      	add	r2, sp, #32
 8018be6:	69a1      	ldr	r1, [r4, #24]
 8018be8:	4628      	mov	r0, r5
		nbr_lladdr.len = lladdr.len;
 8018bea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		nbr_lladdr.addr = lladdr.addr;
 8018bee:	f10d 031a 	add.w	r3, sp, #26
 8018bf2:	9308      	str	r3, [sp, #32]
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
 8018bf4:	f7ef fb5c 	bl	80082b0 <net_nbr_link>
 8018bf8:	2800      	cmp	r0, #0
 8018bfa:	d094      	beq.n	8018b26 <handle_na_input+0x11e>
			nbr_free(nbr);
 8018bfc:	4628      	mov	r0, r5
 8018bfe:	f7ff fe0f 	bl	8018820 <nbr_free>
			return false;
 8018c02:	e717      	b.n	8018a34 <handle_na_input+0x2c>
	if (!(na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE) && lladdr_changed) {
 8018c04:	7832      	ldrb	r2, [r6, #0]
 8018c06:	0692      	lsls	r2, r2, #26
 8018c08:	d425      	bmi.n	8018c56 <handle_na_input+0x24e>
 8018c0a:	f1b9 0f00 	cmp.w	r9, #0
 8018c0e:	d007      	beq.n	8018c20 <handle_na_input+0x218>
		if (net_ipv6_nbr_data(nbr)->state ==
 8018c10:	2b01      	cmp	r3, #1
 8018c12:	f47f af0f 	bne.w	8018a34 <handle_na_input+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
 8018c16:	2102      	movs	r1, #2
 8018c18:	4628      	mov	r0, r5
 8018c1a:	f7ef fe93 	bl	8008944 <ipv6_nbr_set_state>
 8018c1e:	e709      	b.n	8018a34 <handle_na_input+0x2c>
	if (na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE ||
 8018c20:	f1b8 0f00 	cmp.w	r8, #0
 8018c24:	d123      	bne.n	8018c6e <handle_na_input+0x266>
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
 8018c26:	7833      	ldrb	r3, [r6, #0]
 8018c28:	68ea      	ldr	r2, [r5, #12]
 8018c2a:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router =
 8018c2c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	pending = net_ipv6_nbr_data(nbr)->pending;
 8018c30:	68eb      	ldr	r3, [r5, #12]
 8018c32:	681e      	ldr	r6, [r3, #0]
	if (pending) {
 8018c34:	b156      	cbz	r6, 8018c4c <handle_na_input+0x244>
		if (net_send_data(pending) < 0) {
 8018c36:	4630      	mov	r0, r6
 8018c38:	f7fc fd05 	bl	8015646 <net_send_data>
 8018c3c:	2800      	cmp	r0, #0
 8018c3e:	da2e      	bge.n	8018c9e <handle_na_input+0x296>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
 8018c40:	68e8      	ldr	r0, [r5, #12]
 8018c42:	f7ff fde0 	bl	8018806 <nbr_clear_ns_pending>
		net_pkt_unref(pending);
 8018c46:	4630      	mov	r0, r6
 8018c48:	f7fe fb4b 	bl	80172e2 <net_pkt_unref>
	net_pkt_unref(pkt);
 8018c4c:	4620      	mov	r0, r4
 8018c4e:	f7fe fb48 	bl	80172e2 <net_pkt_unref>
	return NET_OK;
 8018c52:	2000      	movs	r0, #0
 8018c54:	e6ef      	b.n	8018a36 <handle_na_input+0x2e>
		if (lladdr_changed) {
 8018c56:	f1b9 0f00 	cmp.w	r9, #0
 8018c5a:	d008      	beq.n	8018c6e <handle_na_input+0x266>
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
 8018c5c:	4638      	mov	r0, r7
 8018c5e:	f7ef fe3b 	bl	80088d8 <dbg_update_neighbor_lladdr.constprop.0>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
 8018c62:	787a      	ldrb	r2, [r7, #1]
 8018c64:	f10d 011a 	add.w	r1, sp, #26
 8018c68:	4638      	mov	r0, r7
 8018c6a:	f7ff fe49 	bl	8018900 <net_linkaddr_set.isra.0>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
 8018c6e:	7833      	ldrb	r3, [r6, #0]
 8018c70:	065b      	lsls	r3, r3, #25
 8018c72:	d50c      	bpl.n	8018c8e <handle_na_input+0x286>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
 8018c74:	2101      	movs	r1, #1
 8018c76:	4628      	mov	r0, r5
 8018c78:	f7ef fe64 	bl	8008944 <ipv6_nbr_set_state>
 8018c7c:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable = 0;
 8018c7e:	2000      	movs	r0, #0
 8018c80:	2100      	movs	r1, #0
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 8018c82:	2200      	movs	r2, #0
			net_ipv6_nbr_data(nbr)->reachable = 0;
 8018c84:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8018c88:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 8018c8a:	621a      	str	r2, [r3, #32]
 8018c8c:	e787      	b.n	8018b9e <handle_na_input+0x196>
			if (lladdr_changed) {
 8018c8e:	f1b9 0f00 	cmp.w	r9, #0
 8018c92:	d0c8      	beq.n	8018c26 <handle_na_input+0x21e>
				ipv6_nbr_set_state(nbr,
 8018c94:	2102      	movs	r1, #2
 8018c96:	4628      	mov	r0, r5
 8018c98:	f7ef fe54 	bl	8008944 <ipv6_nbr_set_state>
 8018c9c:	e7c3      	b.n	8018c26 <handle_na_input+0x21e>
 8018c9e:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
 8018ca0:	2200      	movs	r2, #0
 8018ca2:	601a      	str	r2, [r3, #0]
 8018ca4:	e7cf      	b.n	8018c46 <handle_na_input+0x23e>

08018ca6 <handle_ns_input>:
{
 8018ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
 8018caa:	2314      	movs	r3, #20
{
 8018cac:	b090      	sub	sp, #64	; 0x40
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
 8018cae:	2600      	movs	r6, #0
{
 8018cb0:	4605      	mov	r5, r0
 8018cb2:	460c      	mov	r4, r1
 8018cb4:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
 8018cb6:	e9cd 6304 	strd	r6, r3, [sp, #16]
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 8018cba:	ab03      	add	r3, sp, #12
 8018cbc:	9306      	str	r3, [sp, #24]
 8018cbe:	2302      	movs	r3, #2
 8018cc0:	9307      	str	r3, [sp, #28]
	uint16_t length = net_pkt_get_len(pkt);
 8018cc2:	6883      	ldr	r3, [r0, #8]
	while (buf) {
 8018cc4:	b953      	cbnz	r3, 8018cdc <handle_ns_input+0x36>
	if (net_if_flag_is_set(net_pkt_iface(pkt), NET_IF_IPV6_NO_ND)) {
 8018cc6:	210b      	movs	r1, #11
 8018cc8:	69a8      	ldr	r0, [r5, #24]
	src_lladdr.len = 0;
 8018cca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (net_if_flag_is_set(net_pkt_iface(pkt), NET_IF_IPV6_NO_ND)) {
 8018cce:	f7ff fe0a 	bl	80188e6 <net_if_flag_is_set>
 8018cd2:	b138      	cbz	r0, 8018ce4 <handle_ns_input+0x3e>
	return NET_DROP;
 8018cd4:	2002      	movs	r0, #2
}
 8018cd6:	b010      	add	sp, #64	; 0x40
 8018cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes += buf->len;
 8018cdc:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
 8018cde:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 8018ce0:	4416      	add	r6, r2
		buf = buf->frags;
 8018ce2:	e7ef      	b.n	8018cc4 <handle_ns_input+0x1e>
	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
 8018ce4:	a904      	add	r1, sp, #16
 8018ce6:	4628      	mov	r0, r5
 8018ce8:	f7fe fe1e 	bl	8017928 <net_pkt_get_data>
	if (!ns_hdr) {
 8018cec:	4680      	mov	r8, r0
 8018cee:	2800      	cmp	r0, #0
 8018cf0:	d0f0      	beq.n	8018cd4 <handle_ns_input+0x2e>
	uint16_t length = net_pkt_get_len(pkt);
 8018cf2:	b2b6      	uxth	r6, r6
	if (((length < (sizeof(struct net_ipv6_hdr) +
 8018cf4:	2e3f      	cmp	r6, #63	; 0x3f
 8018cf6:	d902      	bls.n	8018cfe <handle_ns_input+0x58>
			  sizeof(struct net_icmpv6_ns_hdr))) ||
 8018cf8:	79e3      	ldrb	r3, [r4, #7]
 8018cfa:	2bff      	cmp	r3, #255	; 0xff
 8018cfc:	d006      	beq.n	8018d0c <handle_ns_input+0x66>
	    (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT)) &&
 8018cfe:	f898 3004 	ldrb.w	r3, [r8, #4]
 8018d02:	2bff      	cmp	r3, #255	; 0xff
 8018d04:	d102      	bne.n	8018d0c <handle_ns_input+0x66>
	    (net_ipv6_is_addr_mcast((struct in6_addr *)ns_hdr->tgt) &&
 8018d06:	787b      	ldrb	r3, [r7, #1]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d1e3      	bne.n	8018cd4 <handle_ns_input+0x2e>
	net_pkt_acknowledge_data(pkt, &ns_access);
 8018d0c:	9905      	ldr	r1, [sp, #20]
 8018d0e:	4628      	mov	r0, r5
 8018d10:	f7ff fdf4 	bl	80188fc <net_pkt_acknowledge_data.isra.0>
 8018d14:	2314      	movs	r3, #20
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
 8018d16:	3e2c      	subs	r6, #44	; 0x2c
				net_pkt_get_data(pkt, &nd_access);
 8018d18:	a906      	add	r1, sp, #24
 8018d1a:	4628      	mov	r0, r5
 8018d1c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 8018d20:	f7fe fe02 	bl	8017928 <net_pkt_get_data>
					(struct in6_addr *)ip_hdr->src)) {
 8018d24:	f104 0908 	add.w	r9, r4, #8
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
 8018d28:	b2b6      	uxth	r6, r6
				net_pkt_get_data(pkt, &nd_access);
 8018d2a:	4607      	mov	r7, r0
			src_lladdr.addr = src_lladdr_s.addr;
 8018d2c:	f10d 0a22 	add.w	sl, sp, #34	; 0x22
	while (nd_opt_hdr && nd_opt_hdr->len > 0 &&
 8018d30:	b12f      	cbz	r7, 8018d3e <handle_ns_input+0x98>
 8018d32:	787b      	ldrb	r3, [r7, #1]
 8018d34:	b11b      	cbz	r3, 8018d3e <handle_ns_input+0x98>
 8018d36:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8018d3a:	42b3      	cmp	r3, r6
 8018d3c:	d333      	bcc.n	8018da6 <handle_ns_input+0x100>
			    net_pkt_iface(pkt), (struct in6_addr *)ns_hdr->tgt);
 8018d3e:	f108 0804 	add.w	r8, r8, #4
		ifaddr = net_if_ipv6_addr_lookup_by_iface(
 8018d42:	69a8      	ldr	r0, [r5, #24]
 8018d44:	4641      	mov	r1, r8
 8018d46:	f7fc fec3 	bl	8015ad0 <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
 8018d4a:	4682      	mov	sl, r0
 8018d4c:	2800      	cmp	r0, #0
 8018d4e:	d0c1      	beq.n	8018cd4 <handle_ns_input+0x2e>
	if (net_ipv6_is_addr_unspecified((struct in6_addr *)ip_hdr->src)) {
 8018d50:	f104 0708 	add.w	r7, r4, #8
		tgt = &ifaddr->address.in6_addr;
 8018d54:	1d06      	adds	r6, r0, #4
		na_src = (struct in6_addr *)ip_hdr->dst;
 8018d56:	f104 0918 	add.w	r9, r4, #24
	if (net_ipv6_is_addr_unspecified((struct in6_addr *)ip_hdr->src)) {
 8018d5a:	4638      	mov	r0, r7
 8018d5c:	f7ff fd42 	bl	80187e4 <net_ipv6_is_addr_unspecified>
 8018d60:	4601      	mov	r1, r0
 8018d62:	2800      	cmp	r0, #0
 8018d64:	f000 809a 	beq.w	8018e9c <handle_ns_input+0x1f6>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 8018d68:	69a2      	ldr	r2, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8018d6a:	f240 23ff 	movw	r3, #767	; 0x2ff
 8018d6e:	429a      	cmp	r2, r3
 8018d70:	d1b0      	bne.n	8018cd4 <handle_ns_input+0x2e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 8018d72:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d1ad      	bne.n	8018cd4 <handle_ns_input+0x2e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8018d78:	6a22      	ldr	r2, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 8018d7a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8018d7e:	d1a9      	bne.n	8018cd4 <handle_ns_input+0x2e>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
 8018d80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018d82:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8018d84:	2aff      	cmp	r2, #255	; 0xff
 8018d86:	d1a5      	bne.n	8018cd4 <handle_ns_input+0x2e>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
 8018d88:	f99a 202d 	ldrsb.w	r2, [sl, #45]	; 0x2d
 8018d8c:	2a00      	cmp	r2, #0
 8018d8e:	d134      	bne.n	8018dfa <handle_ns_input+0x154>
	if (net_ipv6_is_ll_addr(addr)) {
 8018d90:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8018d94:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8018d98:	429a      	cmp	r2, r3
 8018d9a:	d09b      	beq.n	8018cd4 <handle_ns_input+0x2e>
	net_if_ipv6_dad_failed(iface, addr);
 8018d9c:	4631      	mov	r1, r6
 8018d9e:	69a8      	ldr	r0, [r5, #24]
 8018da0:	f7ec fdca 	bl	8005938 <net_if_ipv6_dad_failed>
 8018da4:	e796      	b.n	8018cd4 <handle_ns_input+0x2e>
		net_pkt_acknowledge_data(pkt, &nd_access);
 8018da6:	9907      	ldr	r1, [sp, #28]
 8018da8:	4628      	mov	r0, r5
 8018daa:	f7ff fda7 	bl	80188fc <net_pkt_acknowledge_data.isra.0>
		switch (nd_opt_hdr->type) {
 8018dae:	783b      	ldrb	r3, [r7, #0]
 8018db0:	2b01      	cmp	r3, #1
 8018db2:	d111      	bne.n	8018dd8 <handle_ns_input+0x132>
			if (net_ipv6_is_addr_unspecified(
 8018db4:	4648      	mov	r0, r9
 8018db6:	f7ff fd15 	bl	80187e4 <net_ipv6_is_addr_unspecified>
 8018dba:	2800      	cmp	r0, #0
 8018dbc:	d18a      	bne.n	8018cd4 <handle_ns_input+0x2e>
			if (!read_llao(pkt, nd_opt_hdr->len, &src_lladdr_s)) {
 8018dbe:	aa08      	add	r2, sp, #32
 8018dc0:	7879      	ldrb	r1, [r7, #1]
 8018dc2:	4628      	mov	r0, r5
 8018dc4:	f7ff fd6d 	bl	80188a2 <read_llao>
 8018dc8:	2800      	cmp	r0, #0
 8018dca:	d083      	beq.n	8018cd4 <handle_ns_input+0x2e>
			src_lladdr.len = src_lladdr_s.len;
 8018dcc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
			src_lladdr.addr = src_lladdr_s.addr;
 8018dd0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			src_lladdr.len = src_lladdr_s.len;
 8018dd4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	return pkt->ipv6_ext_opt_len;
 8018dd8:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
					     (nd_opt_hdr->len << 3));
 8018ddc:	787b      	ldrb	r3, [r7, #1]
		net_pkt_set_ipv6_ext_opt_len(pkt,
 8018dde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018de2:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
 8018de4:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
 8018de6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 8018dea:	f67f af73 	bls.w	8018cd4 <handle_ns_input+0x2e>
					net_pkt_get_data(pkt, &nd_access);
 8018dee:	a906      	add	r1, sp, #24
 8018df0:	4628      	mov	r0, r5
 8018df2:	f7fe fd99 	bl	8017928 <net_pkt_get_data>
 8018df6:	4607      	mov	r7, r0
 8018df8:	e79a      	b.n	8018d30 <handle_ns_input+0x8a>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
 8018dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8018dfe:	7622      	strb	r2, [r4, #24]
 8018e00:	2202      	movs	r2, #2
 8018e02:	7662      	strb	r2, [r4, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
 8018e04:	76a3      	strb	r3, [r4, #26]
 8018e06:	76e3      	strb	r3, [r4, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
 8018e08:	7723      	strb	r3, [r4, #28]
 8018e0a:	7763      	strb	r3, [r4, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
 8018e0c:	77a3      	strb	r3, [r4, #30]
 8018e0e:	77e3      	strb	r3, [r4, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
 8018e10:	f884 3020 	strb.w	r3, [r4, #32]
 8018e14:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
 8018e18:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8018e1c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
 8018e20:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8018e24:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
 8018e28:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 8018e2c:	2301      	movs	r3, #1
 8018e2e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		net_ipaddr_copy((struct in6_addr *)ip_hdr->src,
 8018e32:	ac0c      	add	r4, sp, #48	; 0x30
 8018e34:	4649      	mov	r1, r9
 8018e36:	69a8      	ldr	r0, [r5, #24]
 8018e38:	f7ed f82c 	bl	8005e94 <net_if_ipv6_select_src_addr>
 8018e3c:	4622      	mov	r2, r4
 8018e3e:	4603      	mov	r3, r0
 8018e40:	f100 0e10 	add.w	lr, r0, #16
 8018e44:	6818      	ldr	r0, [r3, #0]
 8018e46:	3308      	adds	r3, #8
 8018e48:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018e4c:	46a4      	mov	ip, r4
 8018e4e:	4573      	cmp	r3, lr
 8018e50:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018e54:	4664      	mov	r4, ip
 8018e56:	d1f5      	bne.n	8018e44 <handle_ns_input+0x19e>
 8018e58:	463c      	mov	r4, r7
 8018e5a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8018e5e:	4613      	mov	r3, r2
 8018e60:	3408      	adds	r4, #8
 8018e62:	cb03      	ldmia	r3!, {r0, r1}
 8018e64:	4563      	cmp	r3, ip
 8018e66:	f844 0c08 	str.w	r0, [r4, #-8]
 8018e6a:	f844 1c04 	str.w	r1, [r4, #-4]
 8018e6e:	461a      	mov	r2, r3
 8018e70:	d1f5      	bne.n	8018e5e <handle_ns_input+0x1b8>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
 8018e72:	2420      	movs	r4, #32
		na_src = (struct in6_addr *)ip_hdr->src;
 8018e74:	46b8      	mov	r8, r7
	if (src_lladdr.len) {
 8018e76:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8018e7a:	bb7b      	cbnz	r3, 8018edc <handle_ns_input+0x236>
	if (!net_ipv6_send_na(net_pkt_iface(pkt), na_src,
 8018e7c:	9400      	str	r4, [sp, #0]
 8018e7e:	4633      	mov	r3, r6
 8018e80:	464a      	mov	r2, r9
 8018e82:	4641      	mov	r1, r8
 8018e84:	69a8      	ldr	r0, [r5, #24]
 8018e86:	f7ff fd4a 	bl	801891e <net_ipv6_send_na>
 8018e8a:	4604      	mov	r4, r0
 8018e8c:	2800      	cmp	r0, #0
 8018e8e:	f47f af21 	bne.w	8018cd4 <handle_ns_input+0x2e>
		net_pkt_unref(pkt);
 8018e92:	4628      	mov	r0, r5
 8018e94:	f7fe fa25 	bl	80172e2 <net_pkt_unref>
		return NET_OK;
 8018e98:	4620      	mov	r0, r4
 8018e9a:	e71c      	b.n	8018cd6 <handle_ns_input+0x30>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 8018e9c:	4638      	mov	r0, r7
 8018e9e:	f7ec fa75 	bl	800538c <net_if_ipv6_addr_lookup>
	if (net_ipv6_is_my_addr((struct in6_addr *)ip_hdr->src)) {
 8018ea2:	2800      	cmp	r0, #0
 8018ea4:	f47f af16 	bne.w	8018cd4 <handle_ns_input+0x2e>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 8018ea8:	69a2      	ldr	r2, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8018eaa:	f240 23ff 	movw	r3, #767	; 0x2ff
 8018eae:	429a      	cmp	r2, r3
 8018eb0:	d109      	bne.n	8018ec6 <handle_ns_input+0x220>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 8018eb2:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 8018eb4:	b93b      	cbnz	r3, 8018ec6 <handle_ns_input+0x220>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8018eb6:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 8018eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018ebc:	d103      	bne.n	8018ec6 <handle_ns_input+0x220>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
 8018ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ec0:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8018ec2:	2bff      	cmp	r3, #255	; 0xff
 8018ec4:	d007      	beq.n	8018ed6 <handle_ns_input+0x230>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(
 8018ec6:	4649      	mov	r1, r9
 8018ec8:	69a8      	ldr	r0, [r5, #24]
 8018eca:	f7fc fe01 	bl	8015ad0 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
 8018ece:	2800      	cmp	r0, #0
 8018ed0:	f43f af00 	beq.w	8018cd4 <handle_ns_input+0x2e>
		tgt = &ifaddr->address.in6_addr;
 8018ed4:	1d06      	adds	r6, r0, #4
		na_dst = (struct in6_addr *)ip_hdr->src;
 8018ed6:	46b9      	mov	r9, r7
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
 8018ed8:	2460      	movs	r4, #96	; 0x60
 8018eda:	e7cc      	b.n	8018e76 <handle_ns_input+0x1d0>
		if (!net_ipv6_nbr_add(net_pkt_iface(pkt),
 8018edc:	2300      	movs	r3, #0
 8018ede:	aa0a      	add	r2, sp, #40	; 0x28
 8018ee0:	4639      	mov	r1, r7
 8018ee2:	69a8      	ldr	r0, [r5, #24]
 8018ee4:	9300      	str	r3, [sp, #0]
 8018ee6:	f7ef ff21 	bl	8008d2c <net_ipv6_nbr_add>
 8018eea:	2800      	cmp	r0, #0
 8018eec:	d1c6      	bne.n	8018e7c <handle_ns_input+0x1d6>
 8018eee:	e6f1      	b.n	8018cd4 <handle_ns_input+0x2e>

08018ef0 <net_ipv6_start_dad>:
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
 8018ef0:	2301      	movs	r3, #1
{
 8018ef2:	b507      	push	{r0, r1, r2, lr}
				&ifaddr->address.in6_addr, true);
 8018ef4:	3104      	adds	r1, #4
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
 8018ef6:	9301      	str	r3, [sp, #4]
 8018ef8:	2300      	movs	r3, #0
 8018efa:	9100      	str	r1, [sp, #0]
 8018efc:	461a      	mov	r2, r3
 8018efe:	4619      	mov	r1, r3
 8018f00:	f7ef fe36 	bl	8008b70 <net_ipv6_send_ns>
}
 8018f04:	b003      	add	sp, #12
 8018f06:	f85d fb04 	ldr.w	pc, [sp], #4

08018f0a <net_ipv6_prepare_for_send>:
{
 8018f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f0c:	b087      	sub	sp, #28
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 8018f0e:	2300      	movs	r3, #0
 8018f10:	2228      	movs	r2, #40	; 0x28
{
 8018f12:	4604      	mov	r4, r0
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 8018f14:	a904      	add	r1, sp, #16
	struct net_if *iface = NULL;
 8018f16:	9303      	str	r3, [sp, #12]
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 8018f18:	e9cd 3204 	strd	r3, r2, [sp, #16]
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 8018f1c:	f7fe fd04 	bl	8017928 <net_pkt_get_data>
	if (!ip_hdr) {
 8018f20:	4607      	mov	r7, r0
 8018f22:	2800      	cmp	r0, #0
 8018f24:	d063      	beq.n	8018fee <net_ipv6_prepare_for_send+0xe4>
	if ((net_pkt_lladdr_dst(pkt)->addr &&
 8018f26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018f28:	b113      	cbz	r3, 8018f30 <net_ipv6_prepare_for_send+0x26>
		return NET_OK;
 8018f2a:	2000      	movs	r0, #0
}
 8018f2c:	b007      	add	sp, #28
 8018f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
 8018f30:	7e03      	ldrb	r3, [r0, #24]
 8018f32:	2bff      	cmp	r3, #255	; 0xff
 8018f34:	d0f9      	beq.n	8018f2a <net_ipv6_prepare_for_send+0x20>
	    net_if_flag_is_set(net_pkt_iface(pkt), NET_IF_POINTOPOINT) ||
 8018f36:	2101      	movs	r1, #1
 8018f38:	69a0      	ldr	r0, [r4, #24]
 8018f3a:	f7ff fcd4 	bl	80188e6 <net_if_flag_is_set>
	    net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->dst) ||
 8018f3e:	2800      	cmp	r0, #0
 8018f40:	d1f3      	bne.n	8018f2a <net_ipv6_prepare_for_send+0x20>
	    net_if_flag_is_set(net_pkt_iface(pkt), NET_IF_IPV6_NO_ND)) {
 8018f42:	210b      	movs	r1, #11
 8018f44:	69a0      	ldr	r0, [r4, #24]
 8018f46:	f7ff fcce 	bl	80188e6 <net_if_flag_is_set>
	    net_if_flag_is_set(net_pkt_iface(pkt), NET_IF_POINTOPOINT) ||
 8018f4a:	2800      	cmp	r0, #0
 8018f4c:	d1ed      	bne.n	8018f2a <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface, (struct in6_addr *)ip_hdr->dst)) {
 8018f4e:	f107 0518 	add.w	r5, r7, #24
 8018f52:	a803      	add	r0, sp, #12
 8018f54:	4629      	mov	r1, r5
 8018f56:	f7ec febd 	bl	8005cd4 <net_if_ipv6_addr_onlink>
 8018f5a:	2800      	cmp	r0, #0
 8018f5c:	d03a      	beq.n	8018fd4 <net_ipv6_prepare_for_send+0xca>
		net_pkt_set_iface(pkt, iface);
 8018f5e:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
 8018f60:	61a3      	str	r3, [r4, #24]
	if (iface) {
 8018f62:	b12b      	cbz	r3, 8018f70 <net_ipv6_prepare_for_send+0x66>
		uint8_t type = net_if_get_link_addr(iface)->type;
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	7d5b      	ldrb	r3, [r3, #21]
		pkt->lladdr_src.type = type;
 8018f68:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		pkt->lladdr_dst.type = type;
 8018f6c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	if (!iface) {
 8018f70:	9b03      	ldr	r3, [sp, #12]
 8018f72:	b973      	cbnz	r3, 8018f92 <net_ipv6_prepare_for_send+0x88>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
 8018f74:	4629      	mov	r1, r5
 8018f76:	a803      	add	r0, sp, #12
 8018f78:	f7ec feac 	bl	8005cd4 <net_if_ipv6_addr_onlink>
 8018f7c:	2800      	cmp	r0, #0
 8018f7e:	d040      	beq.n	8019002 <net_ipv6_prepare_for_send+0xf8>
			net_pkt_set_iface(pkt, iface);
 8018f80:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
 8018f82:	61a3      	str	r3, [r4, #24]
	if (iface) {
 8018f84:	b12b      	cbz	r3, 8018f92 <net_ipv6_prepare_for_send+0x88>
		uint8_t type = net_if_get_link_addr(iface)->type;
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	7d5b      	ldrb	r3, [r3, #21]
		pkt->lladdr_src.type = type;
 8018f8a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		pkt->lladdr_dst.type = type;
 8018f8e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
 8018f92:	4629      	mov	r1, r5
 8018f94:	9803      	ldr	r0, [sp, #12]
 8018f96:	f7ef fcb3 	bl	8008900 <nbr_lookup.constprop.0>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
 8018f9a:	4606      	mov	r6, r0
 8018f9c:	2800      	cmp	r0, #0
 8018f9e:	d03a      	beq.n	8019016 <net_ipv6_prepare_for_send+0x10c>
 8018fa0:	7840      	ldrb	r0, [r0, #1]
 8018fa2:	28ff      	cmp	r0, #255	; 0xff
 8018fa4:	d037      	beq.n	8019016 <net_ipv6_prepare_for_send+0x10c>
		lladdr = net_nbr_get_lladdr(nbr->idx);
 8018fa6:	f7ef fa01 	bl	80083ac <net_nbr_get_lladdr>
		net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
 8018faa:	1c83      	adds	r3, r0, #2
 8018fac:	62e3      	str	r3, [r4, #44]	; 0x2c
		net_pkt_lladdr_dst(pkt)->len = lladdr->len;
 8018fae:	7843      	ldrb	r3, [r0, #1]
 8018fb0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
 8018fb4:	68f3      	ldr	r3, [r6, #12]
 8018fb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018fba:	2b02      	cmp	r3, #2
 8018fbc:	d1b5      	bne.n	8018f2a <net_ipv6_prepare_for_send+0x20>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
 8018fbe:	4630      	mov	r0, r6
 8018fc0:	2103      	movs	r1, #3
 8018fc2:	f7ef fcbf 	bl	8008944 <ipv6_nbr_set_state>
			ipv6_nd_restart_reachable_timer(nbr,
 8018fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8018fca:	2300      	movs	r3, #0
 8018fcc:	4630      	mov	r0, r6
 8018fce:	f7ef fbef 	bl	80087b0 <ipv6_nd_restart_reachable_timer>
 8018fd2:	e7aa      	b.n	8018f2a <net_ipv6_prepare_for_send+0x20>
	route = net_route_lookup(iface, dst);
 8018fd4:	4629      	mov	r1, r5
 8018fd6:	f7f0 faf5 	bl	80095c4 <net_route_lookup>
	if (route) {
 8018fda:	4606      	mov	r6, r0
 8018fdc:	b148      	cbz	r0, 8018ff2 <net_ipv6_prepare_for_send+0xe8>
		nexthop = net_route_get_nexthop(route);
 8018fde:	f000 fa33 	bl	8019448 <net_route_get_nexthop>
		if (!nexthop) {
 8018fe2:	4605      	mov	r5, r0
 8018fe4:	2800      	cmp	r0, #0
 8018fe6:	d1c3      	bne.n	8018f70 <net_ipv6_prepare_for_send+0x66>
			net_route_del(route);
 8018fe8:	4630      	mov	r0, r6
 8018fea:	f7f0 fb8b 	bl	8009704 <net_route_del>
		return NET_DROP;
 8018fee:	2002      	movs	r0, #2
 8018ff0:	e79c      	b.n	8018f2c <net_ipv6_prepare_for_send+0x22>
		router = net_if_ipv6_router_find_default(NULL, dst);
 8018ff2:	4629      	mov	r1, r5
 8018ff4:	f7fc feb8 	bl	8015d68 <net_if_ipv6_router_find_default>
		if (!router) {
 8018ff8:	2800      	cmp	r0, #0
 8018ffa:	d0ca      	beq.n	8018f92 <net_ipv6_prepare_for_send+0x88>
		nexthop = &router->address.in6_addr;
 8018ffc:	f100 0508 	add.w	r5, r0, #8
		if (try_route) {
 8019000:	e7b6      	b.n	8018f70 <net_ipv6_prepare_for_send+0x66>
			nbr = net_ipv6_nbr_lookup(NULL, nexthop);
 8019002:	4629      	mov	r1, r5
 8019004:	f7ff fc89 	bl	801891a <net_ipv6_nbr_lookup>
			if (nbr) {
 8019008:	b110      	cbz	r0, 8019010 <net_ipv6_prepare_for_send+0x106>
				iface = nbr->iface;
 801900a:	6883      	ldr	r3, [r0, #8]
 801900c:	9303      	str	r3, [sp, #12]
 801900e:	e7b8      	b.n	8018f82 <net_ipv6_prepare_for_send+0x78>
				iface = net_pkt_iface(pkt);
 8019010:	69a3      	ldr	r3, [r4, #24]
 8019012:	9303      	str	r3, [sp, #12]
 8019014:	e7bd      	b.n	8018f92 <net_ipv6_prepare_for_send+0x88>
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
 8019016:	2300      	movs	r3, #0
 8019018:	f107 0208 	add.w	r2, r7, #8
 801901c:	4621      	mov	r1, r4
 801901e:	e9cd 5300 	strd	r5, r3, [sp]
 8019022:	69a0      	ldr	r0, [r4, #24]
 8019024:	f7ef fda4 	bl	8008b70 <net_ipv6_send_ns>
	return NET_CONTINUE;
 8019028:	2001      	movs	r0, #1
 801902a:	e77f      	b.n	8018f2c <net_ipv6_prepare_for_send+0x22>

0801902c <net_ipv6_send_rs>:
{
 801902c:	b5f0      	push	{r4, r5, r6, r7, lr}
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
 801902e:	f240 23ff 	movw	r3, #767	; 0x2ff
 8019032:	b087      	sub	sp, #28
 8019034:	4607      	mov	r7, r0
 8019036:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
 801903a:	2600      	movs	r6, #0
 801903c:	f8ad 600a 	strh.w	r6, [sp, #10]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
 8019040:	f8ad 600c 	strh.w	r6, [sp, #12]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
 8019044:	f8ad 600e 	strh.w	r6, [sp, #14]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
 8019048:	f8ad 6010 	strh.w	r6, [sp, #16]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
 801904c:	f8ad 6012 	strh.w	r6, [sp, #18]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
 8019050:	f8ad 6014 	strh.w	r6, [sp, #20]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
 8019054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019058:	f8ad 3016 	strh.w	r3, [sp, #22]
	src = net_if_ipv6_select_src_addr(iface, &dst);
 801905c:	a902      	add	r1, sp, #8
 801905e:	f7ec ff19 	bl	8005e94 <net_if_ipv6_select_src_addr>
 8019062:	4605      	mov	r5, r0
	if (!net_ipv6_is_addr_unspecified(src)) {
 8019064:	f7ff fbbe 	bl	80187e4 <net_ipv6_is_addr_unspecified>
 8019068:	b920      	cbnz	r0, 8019074 <net_ipv6_send_rs+0x48>
	uint8_t total_len = net_if_get_link_addr(iface)->len +
 801906a:	683b      	ldr	r3, [r7, #0]
	return ROUND_UP(total_len, 8U);
 801906c:	7d1c      	ldrb	r4, [r3, #20]
 801906e:	3409      	adds	r4, #9
 8019070:	f004 06f8 	and.w	r6, r4, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
 8019074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019078:	2300      	movs	r3, #0
 801907a:	1d31      	adds	r1, r6, #4
 801907c:	4638      	mov	r0, r7
 801907e:	e9cd 2300 	strd	r2, r3, [sp]
 8019082:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8019086:	233a      	movs	r3, #58	; 0x3a
 8019088:	2202      	movs	r2, #2
 801908a:	f7ee f86d 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 801908e:	4604      	mov	r4, r0
 8019090:	2800      	cmp	r0, #0
 8019092:	d038      	beq.n	8019106 <net_ipv6_send_rs+0xda>
	pkt->ipv6_hop_limit = hop_limit;
 8019094:	23ff      	movs	r3, #255	; 0xff
	if (net_ipv6_create(pkt, src, &dst) ||
 8019096:	aa02      	add	r2, sp, #8
 8019098:	4629      	mov	r1, r5
 801909a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 801909e:	f7ff fb06 	bl	80186ae <net_ipv6_create>
 80190a2:	4602      	mov	r2, r0
 80190a4:	b138      	cbz	r0, 80190b6 <net_ipv6_send_rs+0x8a>
	int ret = -ENOBUFS;
 80190a6:	f06f 0568 	mvn.w	r5, #104	; 0x68
	net_pkt_unref(pkt);
 80190aa:	4620      	mov	r0, r4
 80190ac:	f7fe f919 	bl	80172e2 <net_pkt_unref>
}
 80190b0:	4628      	mov	r0, r5
 80190b2:	b007      	add	sp, #28
 80190b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
 80190b6:	2185      	movs	r1, #133	; 0x85
 80190b8:	4620      	mov	r0, r4
 80190ba:	f7ff f8cc 	bl	8018256 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &dst) ||
 80190be:	4601      	mov	r1, r0
 80190c0:	2800      	cmp	r0, #0
 80190c2:	d1f0      	bne.n	80190a6 <net_ipv6_send_rs+0x7a>
	    net_pkt_memset(pkt, 0, sizeof(struct net_icmpv6_rs_hdr))) {
 80190c4:	2204      	movs	r2, #4
 80190c6:	4620      	mov	r0, r4
 80190c8:	f7fe faad 	bl	8017626 <net_pkt_memset>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
 80190cc:	4605      	mov	r5, r0
 80190ce:	2800      	cmp	r0, #0
 80190d0:	d1e9      	bne.n	80190a6 <net_ipv6_send_rs+0x7a>
	if (llao_len > 0) {
 80190d2:	b976      	cbnz	r6, 80190f2 <net_ipv6_send_rs+0xc6>
	net_pkt_cursor_init(pkt);
 80190d4:	4620      	mov	r0, r4
 80190d6:	f7fe f996 	bl	8017406 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 80190da:	213a      	movs	r1, #58	; 0x3a
 80190dc:	4620      	mov	r0, r4
 80190de:	f7ff fb2f 	bl	8018740 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
 80190e2:	4620      	mov	r0, r4
 80190e4:	f7fc faaf 	bl	8015646 <net_send_data>
 80190e8:	2800      	cmp	r0, #0
 80190ea:	dae1      	bge.n	80190b0 <net_ipv6_send_rs+0x84>
		ret = -EINVAL;
 80190ec:	f06f 0515 	mvn.w	r5, #21
 80190f0:	e7db      	b.n	80190aa <net_ipv6_send_rs+0x7e>
	return &iface->if_dev->link_addr;
 80190f2:	6839      	ldr	r1, [r7, #0]
		if (!set_llao(pkt, net_if_get_link_addr(iface),
 80190f4:	2301      	movs	r3, #1
 80190f6:	4632      	mov	r2, r6
 80190f8:	4620      	mov	r0, r4
 80190fa:	3110      	adds	r1, #16
 80190fc:	f7ff fbae 	bl	801885c <set_llao>
 8019100:	2800      	cmp	r0, #0
 8019102:	d1e7      	bne.n	80190d4 <net_ipv6_send_rs+0xa8>
 8019104:	e7cf      	b.n	80190a6 <net_ipv6_send_rs+0x7a>
		return -ENOMEM;
 8019106:	f06f 050b 	mvn.w	r5, #11
 801910a:	e7d1      	b.n	80190b0 <net_ipv6_send_rs+0x84>

0801910c <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
 801910c:	f7ff bf8e 	b.w	801902c <net_ipv6_send_rs>

08019110 <net_pkt_write_be16>:
{
 8019110:	b507      	push	{r0, r1, r2, lr}
	uint16_t data_be16 = htons(data);
 8019112:	ba49      	rev16	r1, r1
	return net_pkt_write(pkt, &data_be16, sizeof(uint16_t));
 8019114:	2202      	movs	r2, #2
	uint16_t data_be16 = htons(data);
 8019116:	f8ad 1006 	strh.w	r1, [sp, #6]
	return net_pkt_write(pkt, &data_be16, sizeof(uint16_t));
 801911a:	f10d 0106 	add.w	r1, sp, #6
 801911e:	f7fe fbe8 	bl	80178f2 <net_pkt_write>
}
 8019122:	b003      	add	sp, #12
 8019124:	f85d fb04 	ldr.w	pc, [sp], #4

08019128 <mld_create>:
{
 8019128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801912a:	b089      	sub	sp, #36	; 0x24
 801912c:	461e      	mov	r6, r3
 801912e:	460c      	mov	r4, r1
 8019130:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
 8019132:	ab03      	add	r3, sp, #12
				net_pkt_get_data(pkt, &mld_access);
 8019134:	a901      	add	r1, sp, #4
{
 8019136:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
 8019138:	9301      	str	r3, [sp, #4]
 801913a:	2314      	movs	r3, #20
 801913c:	9302      	str	r3, [sp, #8]
				net_pkt_get_data(pkt, &mld_access);
 801913e:	f7fe fbf3 	bl	8017928 <net_pkt_get_data>
	if (!mld) {
 8019142:	b1c8      	cbz	r0, 8019178 <mld_create+0x50>
	mld->aux_data_len = 0U;
 8019144:	2300      	movs	r3, #0
	memcpy(dest, src, sizeof(struct in6_addr));
 8019146:	4621      	mov	r1, r4
 8019148:	2210      	movs	r2, #16
	mld->record_type = record_type;
 801914a:	7007      	strb	r7, [r0, #0]
	mld->aux_data_len = 0U;
 801914c:	7043      	strb	r3, [r0, #1]
	mld->num_sources = htons(num_sources);
 801914e:	0233      	lsls	r3, r6, #8
 8019150:	3004      	adds	r0, #4
 8019152:	f820 3c02 	strh.w	r3, [r0, #-2]
 8019156:	f7fb fd8e 	bl	8014c76 <memcpy>
	if (net_pkt_set_data(pkt, &mld_access)) {
 801915a:	a901      	add	r1, sp, #4
 801915c:	4628      	mov	r0, r5
 801915e:	f7fe fc02 	bl	8017966 <net_pkt_set_data>
 8019162:	4604      	mov	r4, r0
 8019164:	b940      	cbnz	r0, 8019178 <mld_create+0x50>
	if (num_sources > 0) {
 8019166:	b14e      	cbz	r6, 801917c <mld_create+0x54>
				  net_ipv6_unspecified_address()->s6_addr,
 8019168:	f7ed fb3e 	bl	80067e8 <net_ipv6_unspecified_address>
		if (net_pkt_write(pkt,
 801916c:	2210      	movs	r2, #16
				  net_ipv6_unspecified_address()->s6_addr,
 801916e:	4601      	mov	r1, r0
		if (net_pkt_write(pkt,
 8019170:	4628      	mov	r0, r5
 8019172:	f7fe fbbe 	bl	80178f2 <net_pkt_write>
 8019176:	b108      	cbz	r0, 801917c <mld_create+0x54>
			return -ENOBUFS;
 8019178:	f06f 0468 	mvn.w	r4, #104	; 0x68
}
 801917c:	4620      	mov	r0, r4
 801917e:	b009      	add	sp, #36	; 0x24
 8019180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019182 <mld_send>:
{
 8019182:	b510      	push	{r4, lr}
 8019184:	4604      	mov	r4, r0
	net_pkt_cursor_init(pkt);
 8019186:	f7fe f93e 	bl	8017406 <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 801918a:	213a      	movs	r1, #58	; 0x3a
 801918c:	4620      	mov	r0, r4
 801918e:	f7ff fad7 	bl	8018740 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
 8019192:	4620      	mov	r0, r4
 8019194:	f7fc fa57 	bl	8015646 <net_send_data>
 8019198:	2800      	cmp	r0, #0
 801919a:	da05      	bge.n	80191a8 <mld_send+0x26>
		net_pkt_unref(pkt);
 801919c:	4620      	mov	r0, r4
 801919e:	f7fe f8a0 	bl	80172e2 <net_pkt_unref>
		return -1;
 80191a2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80191a6:	bd10      	pop	{r4, pc}
	return 0;
 80191a8:	2000      	movs	r0, #0
 80191aa:	e7fc      	b.n	80191a6 <mld_send+0x24>

080191ac <net_if_flag_is_set>:
	if (iface == NULL) {
 80191ac:	b140      	cbz	r0, 80191c0 <net_if_flag_is_set+0x14>
 80191ae:	6803      	ldr	r3, [r0, #0]
 80191b0:	f3bf 8f5b 	dmb	ish
 80191b4:	68d8      	ldr	r0, [r3, #12]
 80191b6:	f3bf 8f5b 	dmb	ish
 80191ba:	4108      	asrs	r0, r1
 80191bc:	f000 0001 	and.w	r0, r0, #1
}
 80191c0:	4770      	bx	lr

080191c2 <mld_create_packet>:
{
 80191c2:	b570      	push	{r4, r5, r6, lr}
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
 80191c4:	f240 23ff 	movw	r3, #767	; 0x2ff
 80191c8:	b086      	sub	sp, #24
 80191ca:	4604      	mov	r4, r0
 80191cc:	460d      	mov	r5, r1
 80191ce:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
 80191d2:	2300      	movs	r3, #0
 80191d4:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
 80191d8:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
 80191dc:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
 80191e0:	f8ad 3010 	strh.w	r3, [sp, #16]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
 80191e4:	f8ad 3012 	strh.w	r3, [sp, #18]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
 80191e8:	f8ad 3014 	strh.w	r3, [sp, #20]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
 80191ec:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 80191f0:	f8ad 3016 	strh.w	r3, [sp, #22]
	pkt->ipv6_hop_limit = hop_limit;
 80191f4:	2601      	movs	r6, #1
	if (net_ipv6_create(pkt, net_if_ipv6_select_src_addr(
 80191f6:	a902      	add	r1, sp, #8
 80191f8:	f880 6039 	strb.w	r6, [r0, #57]	; 0x39
 80191fc:	6980      	ldr	r0, [r0, #24]
 80191fe:	f7ec fe49 	bl	8005e94 <net_if_ipv6_select_src_addr>
 8019202:	aa02      	add	r2, sp, #8
 8019204:	4601      	mov	r1, r0
 8019206:	4620      	mov	r0, r4
 8019208:	f7ff fa51 	bl	80186ae <net_ipv6_create>
 801920c:	b118      	cbz	r0, 8019216 <mld_create_packet+0x54>
		return -ENOBUFS;
 801920e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 8019212:	b006      	add	sp, #24
 8019214:	bd70      	pop	{r4, r5, r6, pc}
	if (net_pkt_write_u8(pkt, IPPROTO_ICMPV6) ||
 8019216:	233a      	movs	r3, #58	; 0x3a
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
 8019218:	4632      	mov	r2, r6
 801921a:	f10d 0107 	add.w	r1, sp, #7
 801921e:	4620      	mov	r0, r4
 8019220:	f88d 3007 	strb.w	r3, [sp, #7]
 8019224:	f7fe fb65 	bl	80178f2 <net_pkt_write>
 8019228:	2800      	cmp	r0, #0
 801922a:	d1f0      	bne.n	801920e <mld_create_packet+0x4c>
 801922c:	f88d 0007 	strb.w	r0, [sp, #7]
 8019230:	4632      	mov	r2, r6
 8019232:	f10d 0107 	add.w	r1, sp, #7
 8019236:	4620      	mov	r0, r4
 8019238:	f7fe fb5b 	bl	80178f2 <net_pkt_write>
 801923c:	2800      	cmp	r0, #0
 801923e:	d1e6      	bne.n	801920e <mld_create_packet+0x4c>
	if (net_pkt_write_be16(pkt, 0x0502) ||
 8019240:	f240 5102 	movw	r1, #1282	; 0x502
 8019244:	4620      	mov	r0, r4
 8019246:	f7ff ff63 	bl	8019110 <net_pkt_write_be16>
 801924a:	4601      	mov	r1, r0
 801924c:	2800      	cmp	r0, #0
 801924e:	d1de      	bne.n	801920e <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
 8019250:	4620      	mov	r0, r4
 8019252:	f7ff ff5d 	bl	8019110 <net_pkt_write_be16>
	if (net_pkt_write_be16(pkt, 0x0502) ||
 8019256:	4601      	mov	r1, r0
 8019258:	2800      	cmp	r0, #0
 801925a:	d1d8      	bne.n	801920e <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0)) {
 801925c:	4620      	mov	r0, r4
 801925e:	f7ff ff57 	bl	8019110 <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
 8019262:	4602      	mov	r2, r0
 8019264:	2800      	cmp	r0, #0
 8019266:	d1d2      	bne.n	801920e <mld_create_packet+0x4c>
	pkt->ipv6_ext_len = len;
 8019268:	2308      	movs	r3, #8
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
 801926a:	218f      	movs	r1, #143	; 0x8f
 801926c:	4620      	mov	r0, r4
 801926e:	8763      	strh	r3, [r4, #58]	; 0x3a
 8019270:	f7fe fff1 	bl	8018256 <net_icmpv6_create>
 8019274:	4601      	mov	r1, r0
 8019276:	2800      	cmp	r0, #0
 8019278:	d1c9      	bne.n	801920e <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, 0) ||
 801927a:	4620      	mov	r0, r4
 801927c:	f7ff ff48 	bl	8019110 <net_pkt_write_be16>
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
 8019280:	2800      	cmp	r0, #0
 8019282:	d1c4      	bne.n	801920e <mld_create_packet+0x4c>
	    net_pkt_write_be16(pkt, count)) {
 8019284:	4629      	mov	r1, r5
 8019286:	4620      	mov	r0, r4
 8019288:	f7ff ff42 	bl	8019110 <net_pkt_write_be16>
	    net_pkt_write_be16(pkt, 0) ||
 801928c:	2800      	cmp	r0, #0
 801928e:	d1be      	bne.n	801920e <mld_create_packet+0x4c>
	pkt->ipv6_next_hdr = next_hdr;
 8019290:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
	return 0;
 8019294:	e7bd      	b.n	8019212 <mld_create_packet+0x50>

08019296 <mld_send_generic>:
{
 8019296:	b573      	push	{r0, r1, r4, r5, r6, lr}
					PKT_WAIT_TIME);
 8019298:	2300      	movs	r3, #0
{
 801929a:	4616      	mov	r6, r2
					PKT_WAIT_TIME);
 801929c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
{
 80192a0:	460c      	mov	r4, r1
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
 80192a2:	2130      	movs	r1, #48	; 0x30
 80192a4:	e9cd 2300 	strd	r2, r3, [sp]
 80192a8:	233a      	movs	r3, #58	; 0x3a
 80192aa:	2202      	movs	r2, #2
 80192ac:	f7ed ff5c 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 80192b0:	4605      	mov	r5, r0
 80192b2:	b1d0      	cbz	r0, 80192ea <mld_send_generic+0x54>
	if (mld_create_packet(pkt, 1) ||
 80192b4:	2101      	movs	r1, #1
 80192b6:	f7ff ff84 	bl	80191c2 <mld_create_packet>
 80192ba:	b128      	cbz	r0, 80192c8 <mld_send_generic+0x32>
		ret = -ENOBUFS;
 80192bc:	f06f 0468 	mvn.w	r4, #104	; 0x68
	net_pkt_unref(pkt);
 80192c0:	4628      	mov	r0, r5
 80192c2:	f7fe f80e 	bl	80172e2 <net_pkt_unref>
	return ret;
 80192c6:	e00d      	b.n	80192e4 <mld_send_generic+0x4e>
	    mld_create(pkt, addr, mode, 1)) {
 80192c8:	2301      	movs	r3, #1
 80192ca:	4632      	mov	r2, r6
 80192cc:	4621      	mov	r1, r4
 80192ce:	4628      	mov	r0, r5
 80192d0:	f7ff ff2a 	bl	8019128 <mld_create>
	if (mld_create_packet(pkt, 1) ||
 80192d4:	2800      	cmp	r0, #0
 80192d6:	d1f1      	bne.n	80192bc <mld_send_generic+0x26>
	ret = mld_send(pkt);
 80192d8:	4628      	mov	r0, r5
 80192da:	f7ff ff52 	bl	8019182 <mld_send>
	if (ret) {
 80192de:	4604      	mov	r4, r0
 80192e0:	2800      	cmp	r0, #0
 80192e2:	d1ed      	bne.n	80192c0 <mld_send_generic+0x2a>
}
 80192e4:	4620      	mov	r0, r4
 80192e6:	b002      	add	sp, #8
 80192e8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
 80192ea:	f06f 040b 	mvn.w	r4, #11
 80192ee:	e7f9      	b.n	80192e4 <mld_send_generic+0x4e>

080192f0 <handle_mld_query>:
{
 80192f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
 80192f4:	2318      	movs	r3, #24
{
 80192f6:	b085      	sub	sp, #20
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
 80192f8:	2500      	movs	r5, #0
{
 80192fa:	4604      	mov	r4, r0
 80192fc:	460f      	mov	r7, r1
 80192fe:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
 8019300:	e9cd 5302 	strd	r5, r3, [sp, #8]
	uint16_t length = net_pkt_get_len(pkt);
 8019304:	6883      	ldr	r3, [r0, #8]
	while (buf) {
 8019306:	b963      	cbnz	r3, 8019322 <handle_mld_query+0x32>
				net_pkt_get_data(pkt, &mld_access);
 8019308:	a902      	add	r1, sp, #8
 801930a:	4620      	mov	r0, r4
 801930c:	f7fe fb0c 	bl	8017928 <net_pkt_get_data>
	if (!mld_query) {
 8019310:	4680      	mov	r8, r0
	uint16_t length = net_pkt_get_len(pkt);
 8019312:	b2ad      	uxth	r5, r5
	if (!mld_query) {
 8019314:	b948      	cbnz	r0, 801932a <handle_mld_query+0x3a>
	return NET_DROP;
 8019316:	f04f 0902 	mov.w	r9, #2
}
 801931a:	4648      	mov	r0, r9
 801931c:	b005      	add	sp, #20
 801931e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes += buf->len;
 8019322:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
 8019324:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 8019326:	4415      	add	r5, r2
		buf = buf->frags;
 8019328:	e7ed      	b.n	8019306 <handle_mld_query+0x16>
	return net_pkt_skip(pkt, access->size);
 801932a:	9903      	ldr	r1, [sp, #12]
 801932c:	4620      	mov	r0, r4
 801932e:	f7fe f8ce 	bl	80174ce <net_pkt_skip>
	mld_query->num_sources = ntohs(mld_query->num_sources);
 8019332:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8019336:	ba5a      	rev16	r2, r3
 8019338:	f8a8 2016 	strh.w	r2, [r8, #22]
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
 801933c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801933e:	3344      	adds	r3, #68	; 0x44
 8019340:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8019344:	b29b      	uxth	r3, r3
	if (length < pkt_len || pkt_len > NET_IPV6_MTU ||
 8019346:	42ab      	cmp	r3, r5
 8019348:	d8e5      	bhi.n	8019316 <handle_mld_query+0x26>
 801934a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 801934e:	d8e2      	bhi.n	8019316 <handle_mld_query+0x26>
 8019350:	79fb      	ldrb	r3, [r7, #7]
 8019352:	2b01      	cmp	r3, #1
 8019354:	d1df      	bne.n	8019316 <handle_mld_query+0x26>
	    ip_hdr->hop_limit != 1U || icmp_hdr->code != 0U) {
 8019356:	f896 9001 	ldrb.w	r9, [r6, #1]
 801935a:	f1b9 0f00 	cmp.w	r9, #0
 801935e:	d1da      	bne.n	8019316 <handle_mld_query+0x26>
				   (uint8_t *)net_ipv6_unspecified_address())) {
 8019360:	f7ed fa42 	bl	80067e8 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 8019364:	2210      	movs	r2, #16
 8019366:	4601      	mov	r1, r0
 8019368:	f108 0004 	add.w	r0, r8, #4
 801936c:	f7fb fc5a 	bl	8014c24 <memcmp>
	if (!net_ipv6_addr_cmp_raw(mld_query->mcast_address,
 8019370:	4605      	mov	r5, r0
 8019372:	2800      	cmp	r0, #0
 8019374:	d1cf      	bne.n	8019316 <handle_mld_query+0x26>
	return pkt->iface;
 8019376:	69a0      	ldr	r0, [r4, #24]
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 8019378:	6887      	ldr	r7, [r0, #8]
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
 801937a:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801937e:	07d9      	lsls	r1, r3, #31
	int i, count = 0;
 8019380:	bf48      	it	mi
 8019382:	f3c3 0540 	ubfxmi	r5, r3, #1, #1
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
 8019386:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 801938a:	07da      	lsls	r2, r3, #31
 801938c:	d502      	bpl.n	8019394 <handle_mld_query+0xa4>
 801938e:	079e      	lsls	r6, r3, #30
		count++;
 8019390:	bf48      	it	mi
 8019392:	3501      	addmi	r5, #1
					count * MLDv2_MCAST_RECORD_LEN,
 8019394:	2114      	movs	r1, #20
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
 8019396:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801939a:	2300      	movs	r3, #0
					count * MLDv2_MCAST_RECORD_LEN,
 801939c:	4369      	muls	r1, r5
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
 801939e:	e9cd 2300 	strd	r2, r3, [sp]
 80193a2:	310c      	adds	r1, #12
 80193a4:	233a      	movs	r3, #58	; 0x3a
 80193a6:	2202      	movs	r2, #2
 80193a8:	f7ed fede 	bl	8007168 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 80193ac:	4606      	mov	r6, r0
 80193ae:	b138      	cbz	r0, 80193c0 <handle_mld_query+0xd0>
	if (mld_create_packet(pkt, count)) {
 80193b0:	b2a9      	uxth	r1, r5
 80193b2:	f7ff ff06 	bl	80191c2 <mld_create_packet>
 80193b6:	4603      	mov	r3, r0
 80193b8:	b130      	cbz	r0, 80193c8 <handle_mld_query+0xd8>
	net_pkt_unref(pkt);
 80193ba:	4630      	mov	r0, r6
 80193bc:	f7fd ff91 	bl	80172e2 <net_pkt_unref>
	net_pkt_unref(pkt);
 80193c0:	4620      	mov	r0, r4
 80193c2:	f7fd ff8e 	bl	80172e2 <net_pkt_unref>
	return NET_OK;
 80193c6:	e7a8      	b.n	801931a <handle_mld_query+0x2a>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
 80193c8:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 80193cc:	07d0      	lsls	r0, r2, #31
 80193ce:	d509      	bpl.n	80193e4 <handle_mld_query+0xf4>
 80193d0:	0791      	lsls	r1, r2, #30
 80193d2:	d507      	bpl.n	80193e4 <handle_mld_query+0xf4>
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
 80193d4:	2202      	movs	r2, #2
 80193d6:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80193da:	4630      	mov	r0, r6
 80193dc:	f7ff fea4 	bl	8019128 <mld_create>
 80193e0:	2800      	cmp	r0, #0
 80193e2:	d0ea      	beq.n	80193ba <handle_mld_query+0xca>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
 80193e4:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80193e8:	07da      	lsls	r2, r3, #31
 80193ea:	d405      	bmi.n	80193f8 <handle_mld_query+0x108>
	if (!mld_send(pkt)) {
 80193ec:	4630      	mov	r0, r6
 80193ee:	f7ff fec8 	bl	8019182 <mld_send>
 80193f2:	2800      	cmp	r0, #0
 80193f4:	d1e1      	bne.n	80193ba <handle_mld_query+0xca>
 80193f6:	e7e3      	b.n	80193c0 <handle_mld_query+0xd0>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
 80193f8:	079b      	lsls	r3, r3, #30
 80193fa:	d5f7      	bpl.n	80193ec <handle_mld_query+0xfc>
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
 80193fc:	2300      	movs	r3, #0
 80193fe:	2202      	movs	r2, #2
 8019400:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8019404:	4630      	mov	r0, r6
 8019406:	f7ff fe8f 	bl	8019128 <mld_create>
 801940a:	2800      	cmp	r0, #0
 801940c:	d1ee      	bne.n	80193ec <handle_mld_query+0xfc>
 801940e:	e7d4      	b.n	80193ba <handle_mld_query+0xca>

08019410 <net_route_nexthop_remove>:
}
 8019410:	4770      	bx	lr

08019412 <sys_slist_find_and_remove.isra.0>:
	return list->head;
 8019412:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8019414:	2200      	movs	r2, #0
 8019416:	b903      	cbnz	r3, 801941a <sys_slist_find_and_remove.isra.0+0x8>
 8019418:	4770      	bx	lr
 801941a:	428b      	cmp	r3, r1
 801941c:	d10f      	bne.n	801943e <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
 801941e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8019420:	b93a      	cbnz	r2, 8019432 <sys_slist_find_and_remove.isra.0+0x20>
 8019422:	6842      	ldr	r2, [r0, #4]
	list->head = node;
 8019424:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 8019426:	4291      	cmp	r1, r2
 8019428:	d100      	bne.n	801942c <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
 801942a:	6043      	str	r3, [r0, #4]
	parent->next = child;
 801942c:	2300      	movs	r3, #0
 801942e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 8019430:	4770      	bx	lr
	parent->next = child;
 8019432:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
 8019434:	6843      	ldr	r3, [r0, #4]
 8019436:	4299      	cmp	r1, r3
	list->tail = node;
 8019438:	bf08      	it	eq
 801943a:	6042      	streq	r2, [r0, #4]
}
 801943c:	e7f6      	b.n	801942c <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
 801943e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	e7e8      	b.n	8019416 <sys_slist_find_and_remove.isra.0+0x4>

08019444 <net_route_entries_table_clear>:
 8019444:	4770      	bx	lr

08019446 <net_route_entry_remove>:
 8019446:	4770      	bx	lr

08019448 <net_route_get_nexthop>:
{
 8019448:	b510      	push	{r4, lr}
	if (!route) {
 801944a:	4604      	mov	r4, r0
 801944c:	b168      	cbz	r0, 801946a <net_route_get_nexthop+0x22>
	k_mutex_lock(&lock, K_FOREVER);
 801944e:	f04f 30ff 	mov.w	r0, #4294967295
 8019452:	f04f 31ff 	mov.w	r1, #4294967295
 8019456:	f7f0 f885 	bl	8009564 <k_mutex_lock.constprop.0.isra.0>
	return list->head;
 801945a:	6863      	ldr	r3, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
 801945c:	b14b      	cbz	r3, 8019472 <net_route_get_nexthop+0x2a>
 801945e:	685a      	ldr	r2, [r3, #4]
 8019460:	68d4      	ldr	r4, [r2, #12]
		if (ipv6_nbr_data) {
 8019462:	b124      	cbz	r4, 801946e <net_route_get_nexthop+0x26>
			addr = &ipv6_nbr_data->addr;
 8019464:	3404      	adds	r4, #4
			k_mutex_unlock(&lock);
 8019466:	f7f0 f885 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
}
 801946a:	4620      	mov	r0, r4
 801946c:	bd10      	pop	{r4, pc}
	return node->next;
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	e7f4      	b.n	801945c <net_route_get_nexthop+0x14>
	return NULL;
 8019472:	2400      	movs	r4, #0
	k_mutex_unlock(&lock);
 8019474:	f7f0 f87e 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
	return NULL;
 8019478:	e7f7      	b.n	801946a <net_route_get_nexthop+0x22>

0801947a <net_route_get_info>:
{
 801947a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801947c:	4607      	mov	r7, r0
 801947e:	460c      	mov	r4, r1
	k_mutex_lock(&lock, K_FOREVER);
 8019480:	f04f 30ff 	mov.w	r0, #4294967295
 8019484:	f04f 31ff 	mov.w	r1, #4294967295
{
 8019488:	4616      	mov	r6, r2
 801948a:	461d      	mov	r5, r3
	k_mutex_lock(&lock, K_FOREVER);
 801948c:	f7f0 f86a 	bl	8009564 <k_mutex_lock.constprop.0.isra.0>
	if (net_ipv6_nbr_lookup(iface, dst)) {
 8019490:	4621      	mov	r1, r4
 8019492:	4638      	mov	r0, r7
 8019494:	f7ff fa41 	bl	801891a <net_ipv6_nbr_lookup>
 8019498:	b120      	cbz	r0, 80194a4 <net_route_get_info+0x2a>
		*route = NULL;
 801949a:	2300      	movs	r3, #0
 801949c:	6033      	str	r3, [r6, #0]
		*nexthop = &router->address.in6_addr;
 801949e:	602c      	str	r4, [r5, #0]
		ret = true;
 80194a0:	2401      	movs	r4, #1
		goto exit;
 80194a2:	e00b      	b.n	80194bc <net_route_get_info+0x42>
	*route = net_route_lookup(iface, dst);
 80194a4:	4621      	mov	r1, r4
 80194a6:	4638      	mov	r0, r7
 80194a8:	f7f0 f88c 	bl	80095c4 <net_route_lookup>
 80194ac:	6030      	str	r0, [r6, #0]
	if (*route) {
 80194ae:	b148      	cbz	r0, 80194c4 <net_route_get_info+0x4a>
		*nexthop = net_route_get_nexthop(*route);
 80194b0:	f7ff ffca 	bl	8019448 <net_route_get_nexthop>
		if (!*nexthop) {
 80194b4:	1e04      	subs	r4, r0, #0
		*nexthop = net_route_get_nexthop(*route);
 80194b6:	6028      	str	r0, [r5, #0]
		if (!*nexthop) {
 80194b8:	bf18      	it	ne
 80194ba:	2401      	movne	r4, #1
	k_mutex_unlock(&lock);
 80194bc:	f7f0 f85a 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
}
 80194c0:	4620      	mov	r0, r4
 80194c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
 80194c4:	4621      	mov	r1, r4
 80194c6:	f7fc fc4f 	bl	8015d68 <net_if_ipv6_router_find_default>
		if (!router) {
 80194ca:	4604      	mov	r4, r0
 80194cc:	2800      	cmp	r0, #0
 80194ce:	d0f5      	beq.n	80194bc <net_route_get_info+0x42>
		*nexthop = &router->address.in6_addr;
 80194d0:	3408      	adds	r4, #8
 80194d2:	e7e4      	b.n	801949e <net_route_get_info+0x24>

080194d4 <net_route_packet>:
{
 80194d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194d6:	460d      	mov	r5, r1
 80194d8:	4604      	mov	r4, r0
	k_mutex_lock(&lock, K_FOREVER);
 80194da:	f04f 31ff 	mov.w	r1, #4294967295
 80194de:	f04f 30ff 	mov.w	r0, #4294967295
 80194e2:	f7f0 f83f 	bl	8009564 <k_mutex_lock.constprop.0.isra.0>
	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
 80194e6:	4629      	mov	r1, r5
 80194e8:	2000      	movs	r0, #0
 80194ea:	f7ff fa16 	bl	801891a <net_ipv6_nbr_lookup>
	if (!nbr) {
 80194ee:	4606      	mov	r6, r0
 80194f0:	2800      	cmp	r0, #0
 80194f2:	d03d      	beq.n	8019570 <net_route_packet+0x9c>
	lladdr = net_nbr_get_lladdr(nbr->idx);
 80194f4:	7840      	ldrb	r0, [r0, #1]
 80194f6:	f7ee ff59 	bl	80083ac <net_nbr_get_lladdr>
	if (!lladdr) {
 80194fa:	4605      	mov	r5, r0
 80194fc:	2800      	cmp	r0, #0
 80194fe:	d03a      	beq.n	8019576 <net_route_packet+0xa2>
			if (!net_pkt_lladdr_src(pkt)->addr) {
 8019500:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8019502:	b928      	cbnz	r0, 8019510 <net_route_packet+0x3c>
				err = -EINVAL;
 8019504:	f06f 0415 	mvn.w	r4, #21
	k_mutex_unlock(&lock);
 8019508:	f7f0 f834 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
}
 801950c:	4620      	mov	r0, r4
 801950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
 8019510:	1caf      	adds	r7, r5, #2
 8019512:	786a      	ldrb	r2, [r5, #1]
 8019514:	4639      	mov	r1, r7
 8019516:	f7fb fb85 	bl	8014c24 <memcmp>
 801951a:	2800      	cmp	r0, #0
 801951c:	d0f2      	beq.n	8019504 <net_route_packet+0x30>
	pkt->forwarding = forward;
 801951e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8019522:	f043 0310 	orr.w	r3, r3, #16
 8019526:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	return net_if_get_link_addr(pkt->iface);
 801952a:	69a3      	ldr	r3, [r4, #24]
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
 801952c:	681a      	ldr	r2, [r3, #0]
 801952e:	6912      	ldr	r2, [r2, #16]
 8019530:	6262      	str	r2, [r4, #36]	; 0x24
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
 8019532:	681a      	ldr	r2, [r3, #0]
 8019534:	7d52      	ldrb	r2, [r2, #21]
 8019536:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	7d1b      	ldrb	r3, [r3, #20]
	net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
 801953e:	62e7      	str	r7, [r4, #44]	; 0x2c
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
 8019540:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	net_pkt_lladdr_dst(pkt)->type = lladdr->type;
 8019544:	782b      	ldrb	r3, [r5, #0]
 8019546:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;
 801954a:	786b      	ldrb	r3, [r5, #1]
 801954c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	net_pkt_set_iface(pkt, nbr->iface);
 8019550:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
 8019552:	61a3      	str	r3, [r4, #24]
	if (iface) {
 8019554:	b12b      	cbz	r3, 8019562 <net_route_packet+0x8e>
		uint8_t type = net_if_get_link_addr(iface)->type;
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	7d5b      	ldrb	r3, [r3, #21]
		pkt->lladdr_src.type = type;
 801955a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		pkt->lladdr_dst.type = type;
 801955e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	k_mutex_unlock(&lock);
 8019562:	f7f0 f807 	bl	8009574 <k_mutex_unlock.constprop.0.isra.0>
	return net_send_data(pkt);
 8019566:	4620      	mov	r0, r4
}
 8019568:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
 801956c:	f7fc b86b 	b.w	8015646 <net_send_data>
		err = -ENOENT;
 8019570:	f06f 0401 	mvn.w	r4, #1
 8019574:	e7c8      	b.n	8019508 <net_route_packet+0x34>
		err = -ESRCH;
 8019576:	f06f 0402 	mvn.w	r4, #2
 801957a:	e7c5      	b.n	8019508 <net_route_packet+0x34>

0801957c <net_route_packet_if>:
	pkt->iface = iface;
 801957c:	6181      	str	r1, [r0, #24]
	if (iface) {
 801957e:	b129      	cbz	r1, 801958c <net_route_packet_if+0x10>
		uint8_t type = net_if_get_link_addr(iface)->type;
 8019580:	680b      	ldr	r3, [r1, #0]
 8019582:	7d5b      	ldrb	r3, [r3, #21]
		pkt->lladdr_src.type = type;
 8019584:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
		pkt->lladdr_dst.type = type;
 8019588:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pkt->forwarding = forward;
 801958c:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 8019590:	f043 0310 	orr.w	r3, r3, #16
 8019594:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
 8019598:	680b      	ldr	r3, [r1, #0]
 801959a:	691b      	ldr	r3, [r3, #16]
 801959c:	6243      	str	r3, [r0, #36]	; 0x24
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
 801959e:	680b      	ldr	r3, [r1, #0]
 80195a0:	7d5b      	ldrb	r3, [r3, #21]
 80195a2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
 80195a6:	680b      	ldr	r3, [r1, #0]
 80195a8:	7d1b      	ldrb	r3, [r3, #20]
 80195aa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	return net_send_data(pkt);
 80195ae:	f7fc b84a 	b.w	8015646 <net_send_data>

080195b2 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
 80195b2:	4603      	mov	r3, r0
	return list->head;
 80195b4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
 80195b6:	b128      	cbz	r0, 80195c4 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80195b8:	6859      	ldr	r1, [r3, #4]
	return node->next;
 80195ba:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80195bc:	4288      	cmp	r0, r1
	list->head = node;
 80195be:	601a      	str	r2, [r3, #0]
	list->tail = node;
 80195c0:	bf08      	it	eq
 80195c2:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
 80195c4:	4770      	bx	lr

080195c6 <tcp_validate_seq>:
	return (net_tcp_seq_cmp(th_seq(hdr), conn->ack) >= 0) &&
 80195c6:	684b      	ldr	r3, [r1, #4]
 80195c8:	f8d0 2228 	ldr.w	r2, [r0, #552]	; 0x228
 80195cc:	ba1b      	rev	r3, r3
	return (int32_t)(seq1 - seq2);
 80195ce:	1a99      	subs	r1, r3, r2
 80195d0:	2900      	cmp	r1, #0
		(net_tcp_seq_cmp(th_seq(hdr), conn->ack + conn->recv_win) < 0);
 80195d2:	bfa1      	itttt	ge
 80195d4:	f8b0 022e 	ldrhge.w	r0, [r0, #558]	; 0x22e
 80195d8:	1880      	addge	r0, r0, r2
 80195da:	1a18      	subge	r0, r3, r0
	return (net_tcp_seq_cmp(th_seq(hdr), conn->ack) >= 0) &&
 80195dc:	0fc0      	lsrge	r0, r0, #31
 80195de:	bfb8      	it	lt
 80195e0:	2000      	movlt	r0, #0
}
 80195e2:	4770      	bx	lr

080195e4 <tcp_derive_rto>:
{
 80195e4:	b513      	push	{r0, r1, r4, lr}
 80195e6:	4604      	mov	r4, r0
	z_impl_sys_rand_get(dst, len);
 80195e8:	2101      	movs	r1, #1
 80195ea:	f10d 0007 	add.w	r0, sp, #7
 80195ee:	f7ea fda7 	bl	8004140 <z_impl_sys_rand_get>
	gain = (uint32_t)gain8;
 80195f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	rto = (gain * rto) >> 9;
 80195f6:	22c8      	movs	r2, #200	; 0xc8
	gain += 1 << 9;
 80195f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
	rto = (gain * rto) >> 9;
 80195fc:	4353      	muls	r3, r2
 80195fe:	0a5b      	lsrs	r3, r3, #9
	conn->rto = (uint16_t)rto;
 8019600:	f8a4 3234 	strh.w	r3, [r4, #564]	; 0x234
}
 8019604:	b002      	add	sp, #8
 8019606:	bd10      	pop	{r4, pc}

08019608 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8019608:	f7f8 bc0e 	b.w	8011e28 <z_impl_k_mutex_lock>

0801960c <is_destination_local>:
{
 801960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return pkt->family;
 801960e:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 8019612:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 8019614:	095b      	lsrs	r3, r3, #5
 8019616:	2b01      	cmp	r3, #1
 8019618:	d006      	beq.n	8019628 <is_destination_local+0x1c>
 801961a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (IS_ENABLED(CONFIG_NET_IPV6) && net_pkt_family(pkt) == AF_INET6) {
 801961e:	095b      	lsrs	r3, r3, #5
 8019620:	2b02      	cmp	r3, #2
 8019622:	d01e      	beq.n	8019662 <is_destination_local+0x56>
	return false;
 8019624:	2000      	movs	r0, #0
}
 8019626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return pkt->frags->data;
 8019628:	6883      	ldr	r3, [r0, #8]
 801962a:	68de      	ldr	r6, [r3, #12]
		if (net_ipv4_is_addr_loopback(
 801962c:	7c33      	ldrb	r3, [r6, #16]
 801962e:	2b7f      	cmp	r3, #127	; 0x7f
 8019630:	d101      	bne.n	8019636 <is_destination_local+0x2a>
			return true;
 8019632:	2001      	movs	r0, #1
 8019634:	e7f7      	b.n	8019626 <is_destination_local+0x1a>
				(struct in_addr *)NET_IPV4_HDR(pkt)->dst)) {
 8019636:	f106 0710 	add.w	r7, r6, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 801963a:	2100      	movs	r1, #0
 801963c:	4638      	mov	r0, r7
 801963e:	f7ec fd21 	bl	8006084 <net_if_ipv4_addr_lookup>
	if (!ret) {
 8019642:	4605      	mov	r5, r0
 8019644:	2800      	cmp	r0, #0
 8019646:	d1f4      	bne.n	8019632 <is_destination_local+0x26>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8019648:	f7ed f8ca 	bl	80067e0 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 801964c:	6932      	ldr	r2, [r6, #16]
 801964e:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8019650:	429a      	cmp	r2, r3
 8019652:	d0ee      	beq.n	8019632 <is_destination_local+0x26>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8019654:	4639      	mov	r1, r7
 8019656:	4628      	mov	r0, r5
 8019658:	f7ec fc98 	bl	8005f8c <net_if_ipv4_is_addr_bcast>
				(struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 801965c:	2800      	cmp	r0, #0
 801965e:	d0dc      	beq.n	801961a <is_destination_local+0xe>
 8019660:	e7e7      	b.n	8019632 <is_destination_local+0x26>
 8019662:	68a3      	ldr	r3, [r4, #8]
 8019664:	68db      	ldr	r3, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8019666:	699a      	ldr	r2, [r3, #24]
				(struct in6_addr *)NET_IPV6_HDR(pkt)->dst) ||
 8019668:	f103 0018 	add.w	r0, r3, #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 801966c:	b93a      	cbnz	r2, 801967e <is_destination_local+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 801966e:	69da      	ldr	r2, [r3, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8019670:	b92a      	cbnz	r2, 801967e <is_destination_local+0x72>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8019672:	6a1a      	ldr	r2, [r3, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8019674:	b91a      	cbnz	r2, 801967e <is_destination_local+0x72>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 8019676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8019678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801967c:	d0d9      	beq.n	8019632 <is_destination_local+0x26>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 801967e:	2100      	movs	r1, #0
 8019680:	f7eb fe84 	bl	800538c <net_if_ipv6_addr_lookup>
 8019684:	3800      	subs	r0, #0
 8019686:	bf18      	it	ne
 8019688:	2001      	movne	r0, #1
 801968a:	e7cc      	b.n	8019626 <is_destination_local+0x1a>

0801968c <net_pkt_get_len.isra.0>:
static inline size_t net_pkt_get_len(struct net_pkt *pkt)
 801968c:	4603      	mov	r3, r0
	size_t bytes = 0;
 801968e:	2000      	movs	r0, #0
	while (buf) {
 8019690:	b903      	cbnz	r3, 8019694 <net_pkt_get_len.isra.0+0x8>
}
 8019692:	4770      	bx	lr
		bytes += buf->len;
 8019694:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
 8019696:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
 8019698:	4410      	add	r0, r2
		buf = buf->frags;
 801969a:	e7f9      	b.n	8019690 <net_pkt_get_len.isra.0+0x4>

0801969c <tcp_pkt_pull>:
{
 801969c:	b538      	push	{r3, r4, r5, lr}
 801969e:	4604      	mov	r4, r0
	int total = net_pkt_get_len(pkt);
 80196a0:	6880      	ldr	r0, [r0, #8]
 80196a2:	f7ff fff3 	bl	801968c <net_pkt_get_len.isra.0>
	if (len > total) {
 80196a6:	4288      	cmp	r0, r1
{
 80196a8:	460d      	mov	r5, r1
	if (len > total) {
 80196aa:	d311      	bcc.n	80196d0 <tcp_pkt_pull+0x34>
	net_pkt_cursor_init(pkt);
 80196ac:	4620      	mov	r0, r4
 80196ae:	f7fd feaa 	bl	8017406 <net_pkt_cursor_init>
	pkt->overwrite = overwrite;
 80196b2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	net_pkt_pull(pkt, len);
 80196b6:	4629      	mov	r1, r5
 80196b8:	4620      	mov	r0, r4
 80196ba:	f043 0301 	orr.w	r3, r3, #1
 80196be:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
 80196c2:	f7fe f846 	bl	8017752 <net_pkt_pull>
	net_pkt_trim_buffer(pkt);
 80196c6:	4620      	mov	r0, r4
 80196c8:	f7fd fe67 	bl	801739a <net_pkt_trim_buffer>
	int ret = 0;
 80196cc:	2000      	movs	r0, #0
}
 80196ce:	bd38      	pop	{r3, r4, r5, pc}
		ret = -EINVAL;
 80196d0:	f06f 0015 	mvn.w	r0, #21
	return ret;
 80196d4:	e7fb      	b.n	80196ce <tcp_pkt_pull+0x32>

080196d6 <net_context_get_iface.isra.0>:
 80196d6:	f7eb bcfd 	b.w	80050d4 <z_impl_net_if_get_by_index>

080196da <th_get>:
{
 80196da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t ip_len = net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt);
 80196de:	f890 8036 	ldrb.w	r8, [r0, #54]	; 0x36
	if (!net_pkt_is_contiguous(pkt, sizeof(*th))) {
 80196e2:	f04f 0a14 	mov.w	sl, #20
	size_t ip_len = net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt);
 80196e6:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
{
 80196e8:	b085      	sub	sp, #20
 80196ea:	4604      	mov	r4, r0
	size_t ip_len = net_pkt_ip_hdr_len(pkt) + net_pkt_ip_opts_len(pkt);
 80196ec:	4498      	add	r8, r3
	if (net_pkt_get_len(pkt) < (pos + len)) {
 80196ee:	eb08 0b0a 	add.w	fp, r8, sl
	net_pkt_cursor_init(pkt);
 80196f2:	4620      	mov	r0, r4
 80196f4:	f7fd fe87 	bl	8017406 <net_pkt_cursor_init>
 80196f8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
	if (net_pkt_skip(pkt, ip_len) != 0) {
 80196fc:	4641      	mov	r1, r8
 80196fe:	4620      	mov	r0, r4
 8019700:	f043 0301 	orr.w	r3, r3, #1
 8019704:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
 8019708:	f7fd fee1 	bl	80174ce <net_pkt_skip>
 801970c:	b978      	cbnz	r0, 801972e <th_get+0x54>
	if (!net_pkt_is_contiguous(pkt, sizeof(*th))) {
 801970e:	2114      	movs	r1, #20
 8019710:	4620      	mov	r0, r4
 8019712:	f7fe f8e5 	bl	80178e0 <net_pkt_is_contiguous>
 8019716:	4605      	mov	r5, r0
 8019718:	2800      	cmp	r0, #0
 801971a:	d148      	bne.n	80197ae <th_get+0xd4>
	if (net_pkt_get_len(pkt) < (pos + len)) {
 801971c:	68a0      	ldr	r0, [r4, #8]
	struct net_buf *buf, *first = pkt->cursor.buf, *second = first->frags;
 801971e:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (net_pkt_get_len(pkt) < (pos + len)) {
 8019722:	f7ff ffb3 	bl	801968c <net_pkt_get_len.isra.0>
 8019726:	4558      	cmp	r0, fp
	struct net_buf *buf, *first = pkt->cursor.buf, *second = first->frags;
 8019728:	f8d9 7004 	ldr.w	r7, [r9, #4]
	if (net_pkt_get_len(pkt) < (pos + len)) {
 801972c:	d201      	bcs.n	8019732 <th_get+0x58>
	struct tcphdr *th = NULL;
 801972e:	2000      	movs	r0, #0
	return th;
 8019730:	e03e      	b.n	80197b0 <th_get+0xd6>
	buf = net_pkt_get_frag(pkt, len, TCP_PKT_ALLOC_TIMEOUT);
 8019732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019736:	2300      	movs	r3, #0
 8019738:	2114      	movs	r1, #20
 801973a:	4620      	mov	r0, r4
 801973c:	f7ed fbe6 	bl	8006f0c <net_pkt_get_frag>
	if (!buf || buf->size < len) {
 8019740:	4606      	mov	r6, r0
 8019742:	2800      	cmp	r0, #0
 8019744:	d0f3      	beq.n	801972e <th_get+0x54>
 8019746:	8a41      	ldrh	r1, [r0, #18]
 8019748:	2913      	cmp	r1, #19
 801974a:	d934      	bls.n	80197b6 <th_get+0xdc>
	net_buf_linearize(buf->data, buf->size, pkt->frags, pos, len);
 801974c:	4605      	mov	r5, r0
 801974e:	f8cd a000 	str.w	sl, [sp]
 8019752:	4643      	mov	r3, r8
 8019754:	68a2      	ldr	r2, [r4, #8]
 8019756:	f855 0f0c 	ldr.w	r0, [r5, #12]!
 801975a:	f7fb fc22 	bl	8014fa2 <net_buf_linearize>
	return net_buf_simple_add(&buf->b, len);
 801975e:	2114      	movs	r1, #20
 8019760:	4628      	mov	r0, r5
 8019762:	f7fb fc48 	bl	8014ff6 <net_buf_simple_add>
	len1 = first->len - (pkt->cursor.pos - pkt->cursor.buf->data);
 8019766:	f8b9 2010 	ldrh.w	r2, [r9, #16]
 801976a:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 801976e:	68c9      	ldr	r1, [r1, #12]
 8019770:	1a5b      	subs	r3, r3, r1
 8019772:	1ad3      	subs	r3, r2, r3
	len2 = len - len1;
 8019774:	f1c3 0514 	rsb	r5, r3, #20
	first->len -= len1;
 8019778:	1ad3      	subs	r3, r2, r3
 801977a:	f8a9 3010 	strh.w	r3, [r9, #16]
	while (len2) {
 801977e:	b91d      	cbnz	r5, 8019788 <th_get+0xae>
	buf->frags = second;
 8019780:	6077      	str	r7, [r6, #4]
	first->frags = buf;
 8019782:	f8c9 6004 	str.w	r6, [r9, #4]
	return ret;
 8019786:	e7b4      	b.n	80196f2 <th_get+0x18>
		size_t pull_len = MIN(second->len, len2);
 8019788:	8a39      	ldrh	r1, [r7, #16]
	return net_buf_simple_pull(&buf->b, len);
 801978a:	f107 000c 	add.w	r0, r7, #12
 801978e:	42a9      	cmp	r1, r5
 8019790:	bf28      	it	cs
 8019792:	4629      	movcs	r1, r5
		len2 -= pull_len;
 8019794:	1a6d      	subs	r5, r5, r1
 8019796:	f7fb fc3e 	bl	8015016 <net_buf_simple_pull>
		if (second->len == 0) {
 801979a:	8a3a      	ldrh	r2, [r7, #16]
		next = second->frags;
 801979c:	687b      	ldr	r3, [r7, #4]
		if (second->len == 0) {
 801979e:	b922      	cbnz	r2, 80197aa <th_get+0xd0>
			net_buf_unref(second);
 80197a0:	4638      	mov	r0, r7
 80197a2:	9303      	str	r3, [sp, #12]
 80197a4:	f7ea fda8 	bl	80042f8 <net_buf_unref>
 80197a8:	9b03      	ldr	r3, [sp, #12]
{
 80197aa:	461f      	mov	r7, r3
 80197ac:	e7e7      	b.n	801977e <th_get+0xa4>
	return pkt->cursor.pos;
 80197ae:	6920      	ldr	r0, [r4, #16]
}
 80197b0:	b005      	add	sp, #20
 80197b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			net_buf_unref(buf);
 80197b6:	f7ea fd9f 	bl	80042f8 <net_buf_unref>
	struct tcphdr *th = NULL;
 80197ba:	4628      	mov	r0, r5
 80197bc:	e7f8      	b.n	80197b0 <th_get+0xd6>

080197be <tcp_endpoint_set>:
{
 80197be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return pkt->family;
 80197c0:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
 80197c4:	4604      	mov	r4, r0
 80197c6:	4615      	mov	r5, r2
 80197c8:	4608      	mov	r0, r1
 80197ca:	095b      	lsrs	r3, r3, #5
	switch (net_pkt_family(pkt)) {
 80197cc:	2b01      	cmp	r3, #1
 80197ce:	d004      	beq.n	80197da <tcp_endpoint_set+0x1c>
 80197d0:	2b02      	cmp	r3, #2
 80197d2:	d01f      	beq.n	8019814 <tcp_endpoint_set+0x56>
 80197d4:	f06f 0015 	mvn.w	r0, #21
}
 80197d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return pkt->frags->data;
 80197da:	688b      	ldr	r3, [r1, #8]
 80197dc:	68de      	ldr	r6, [r3, #12]
			th = th_get(pkt);
 80197de:	f7ff ff7c 	bl	80196da <th_get>
			if (!th) {
 80197e2:	4607      	mov	r7, r0
 80197e4:	b910      	cbnz	r0, 80197ec <tcp_endpoint_set+0x2e>
				return -ENOBUFS;
 80197e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80197ea:	e7f5      	b.n	80197d8 <tcp_endpoint_set+0x1a>
			memset(ep, 0, sizeof(*ep));
 80197ec:	2218      	movs	r2, #24
 80197ee:	2100      	movs	r1, #0
 80197f0:	4620      	mov	r0, r4
 80197f2:	f7fb fa4b 	bl	8014c8c <memset>
			ep->sin.sin_port = src == TCP_EP_SRC ? th_sport(th) :
 80197f6:	2d01      	cmp	r5, #1
 80197f8:	bf0c      	ite	eq
 80197fa:	883b      	ldrheq	r3, [r7, #0]
							       th_dport(th);
 80197fc:	887b      	ldrhne	r3, [r7, #2]
			net_ipv4_addr_copy_raw((uint8_t *)&ep->sin.sin_addr,
 80197fe:	2d01      	cmp	r5, #1
 8019800:	bf0c      	ite	eq
 8019802:	360c      	addeq	r6, #12
 8019804:	3610      	addne	r6, #16
			ep->sin.sin_port = src == TCP_EP_SRC ? th_sport(th) :
 8019806:	8063      	strh	r3, [r4, #2]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 8019808:	6833      	ldr	r3, [r6, #0]
 801980a:	6063      	str	r3, [r4, #4]
			ep->sa.sa_family = AF_INET;
 801980c:	2301      	movs	r3, #1
	int ret = 0;
 801980e:	2000      	movs	r0, #0
			ep->sa.sa_family = AF_INET6;
 8019810:	8023      	strh	r3, [r4, #0]
		break;
 8019812:	e7e1      	b.n	80197d8 <tcp_endpoint_set+0x1a>
 8019814:	688b      	ldr	r3, [r1, #8]
 8019816:	68de      	ldr	r6, [r3, #12]
			th = th_get(pkt);
 8019818:	f7ff ff5f 	bl	80196da <th_get>
			if (!th) {
 801981c:	4607      	mov	r7, r0
 801981e:	2800      	cmp	r0, #0
 8019820:	d0e1      	beq.n	80197e6 <tcp_endpoint_set+0x28>
			memset(ep, 0, sizeof(*ep));
 8019822:	2100      	movs	r1, #0
 8019824:	2218      	movs	r2, #24
 8019826:	4620      	mov	r0, r4
 8019828:	f7fb fa30 	bl	8014c8c <memset>
			ep->sin6.sin6_port = src == TCP_EP_SRC ? th_sport(th) :
 801982c:	2d01      	cmp	r5, #1
			net_ipv6_addr_copy_raw((uint8_t *)&ep->sin6.sin6_addr,
 801982e:	f104 0004 	add.w	r0, r4, #4
	memcpy(dest, src, sizeof(struct in6_addr));
 8019832:	f04f 0210 	mov.w	r2, #16
			ep->sin6.sin6_port = src == TCP_EP_SRC ? th_sport(th) :
 8019836:	bf0c      	ite	eq
 8019838:	883b      	ldrheq	r3, [r7, #0]
								 th_dport(th);
 801983a:	887b      	ldrhne	r3, [r7, #2]
			net_ipv6_addr_copy_raw((uint8_t *)&ep->sin6.sin6_addr,
 801983c:	2d01      	cmp	r5, #1
			ep->sin6.sin6_port = src == TCP_EP_SRC ? th_sport(th) :
 801983e:	8063      	strh	r3, [r4, #2]
			net_ipv6_addr_copy_raw((uint8_t *)&ep->sin6.sin6_addr,
 8019840:	bf0c      	ite	eq
 8019842:	f106 0108 	addeq.w	r1, r6, #8
 8019846:	f106 0118 	addne.w	r1, r6, #24
 801984a:	f7fb fa14 	bl	8014c76 <memcpy>
			ep->sa.sa_family = AF_INET6;
 801984e:	2302      	movs	r3, #2
 8019850:	e7dd      	b.n	801980e <tcp_endpoint_set+0x50>

08019852 <tcp_endpoint_cmp>:
{
 8019852:	b510      	push	{r4, lr}
 8019854:	b086      	sub	sp, #24
 8019856:	4604      	mov	r4, r0
	if (tcp_endpoint_set(&ep_tmp, pkt, which) < 0) {
 8019858:	4668      	mov	r0, sp
 801985a:	f7ff ffb0 	bl	80197be <tcp_endpoint_set>
 801985e:	2800      	cmp	r0, #0
 8019860:	db0d      	blt.n	801987e <tcp_endpoint_cmp+0x2c>
	return (af == AF_INET) ? sizeof(struct sockaddr_in) :
 8019862:	8823      	ldrh	r3, [r4, #0]
	return !memcmp(ep, &ep_tmp, tcp_endpoint_len(ep->sa.sa_family));
 8019864:	4669      	mov	r1, sp
 8019866:	4620      	mov	r0, r4
	return (af == AF_INET) ? sizeof(struct sockaddr_in) :
 8019868:	2b01      	cmp	r3, #1
	return !memcmp(ep, &ep_tmp, tcp_endpoint_len(ep->sa.sa_family));
 801986a:	bf0c      	ite	eq
 801986c:	2208      	moveq	r2, #8
 801986e:	2218      	movne	r2, #24
 8019870:	f7fb f9d8 	bl	8014c24 <memcmp>
 8019874:	fab0 f080 	clz	r0, r0
 8019878:	0940      	lsrs	r0, r0, #5
}
 801987a:	b006      	add	sp, #24
 801987c:	bd10      	pop	{r4, pc}
		return false;
 801987e:	2000      	movs	r0, #0
 8019880:	e7fb      	b.n	801987a <tcp_endpoint_cmp+0x28>

08019882 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 8019882:	f7f8 bb4b 	b.w	8011f1c <z_impl_k_mutex_unlock>

08019886 <tcp_cleanup_recv_queue>:
{
 8019886:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&conn->lock, K_FOREVER);
 8019888:	f1a0 0598 	sub.w	r5, r0, #152	; 0x98
{
 801988c:	4604      	mov	r4, r0
	k_mutex_lock(&conn->lock, K_FOREVER);
 801988e:	f04f 32ff 	mov.w	r2, #4294967295
 8019892:	f04f 33ff 	mov.w	r3, #4294967295
 8019896:	4628      	mov	r0, r5
 8019898:	f7ff feb6 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	net_buf_unref(conn->queue_recv_data->buffer);
 801989c:	f854 3cb4 	ldr.w	r3, [r4, #-180]
 80198a0:	6898      	ldr	r0, [r3, #8]
 80198a2:	f7ea fd29 	bl	80042f8 <net_buf_unref>
	conn->queue_recv_data->buffer = NULL;
 80198a6:	f854 3cb4 	ldr.w	r3, [r4, #-180]
 80198aa:	2200      	movs	r2, #0
	k_mutex_unlock(&conn->lock);
 80198ac:	4628      	mov	r0, r5
	conn->queue_recv_data->buffer = NULL;
 80198ae:	609a      	str	r2, [r3, #8]
}
 80198b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&conn->lock);
 80198b4:	f7ff bfe5 	b.w	8019882 <k_mutex_unlock.isra.0>

080198b8 <atomic_inc.isra.0>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80198b8:	f3bf 8f5b 	dmb	ish
 80198bc:	e850 3f00 	ldrex	r3, [r0]
 80198c0:	3301      	adds	r3, #1
 80198c2:	e840 3200 	strex	r2, r3, [r0]
 80198c6:	2a00      	cmp	r2, #0
 80198c8:	d1f8      	bne.n	80198bc <atomic_inc.isra.0+0x4>
 80198ca:	f3bf 8f5b 	dmb	ish
}
 80198ce:	4770      	bx	lr

080198d0 <tcp_conn_close.isra.0>:
static int tcp_conn_close(struct tcp *conn, int status)
 80198d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	k_mutex_lock(&conn->lock, K_FOREVER);
 80198d2:	f100 0628 	add.w	r6, r0, #40	; 0x28
static int tcp_conn_close(struct tcp *conn, int status)
 80198d6:	4604      	mov	r4, r0
	k_mutex_lock(&conn->lock, K_FOREVER);
 80198d8:	f04f 32ff 	mov.w	r2, #4294967295
 80198dc:	f04f 33ff 	mov.w	r3, #4294967295
 80198e0:	4630      	mov	r0, r6
static int tcp_conn_close(struct tcp *conn, int status)
 80198e2:	460d      	mov	r5, r1
	k_mutex_lock(&conn->lock, K_FOREVER);
 80198e4:	f7ff fe90 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	conn_state(conn, TCP_CLOSED);
 80198e8:	230b      	movs	r3, #11
	k_mutex_unlock(&conn->lock);
 80198ea:	4630      	mov	r0, r6
	conn_state(conn, TCP_CLOSED);
 80198ec:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
	k_mutex_unlock(&conn->lock);
 80198f0:	f7ff ffc7 	bl	8019882 <k_mutex_unlock.isra.0>
	if (conn->in_connect) {
 80198f4:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
 80198f8:	f013 0302 	ands.w	r3, r3, #2
 80198fc:	d00d      	beq.n	801991a <tcp_conn_close.isra.0+0x4a>
		if (conn->connect_cb) {
 80198fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019900:	b12b      	cbz	r3, 801990e <tcp_conn_close.isra.0+0x3e>
			conn->connect_cb(conn->context, status, conn->context->user_data);
 8019902:	6860      	ldr	r0, [r4, #4]
 8019904:	4629      	mov	r1, r5
 8019906:	6842      	ldr	r2, [r0, #4]
 8019908:	4798      	blx	r3
			conn->connect_cb = NULL;
 801990a:	2300      	movs	r3, #0
 801990c:	6263      	str	r3, [r4, #36]	; 0x24
	return tcp_conn_unref(conn);
 801990e:	4620      	mov	r0, r4
}
 8019910:	b002      	add	sp, #8
 8019912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return tcp_conn_unref(conn);
 8019916:	f7f0 b9dd 	b.w	8009cd4 <tcp_conn_unref.isra.0>
	} else if (conn->context->recv_cb) {
 801991a:	6860      	ldr	r0, [r4, #4]
 801991c:	6c86      	ldr	r6, [r0, #72]	; 0x48
 801991e:	2e00      	cmp	r6, #0
 8019920:	d0f5      	beq.n	801990e <tcp_conn_close.isra.0+0x3e>
		conn->context->recv_cb(conn->context, NULL, NULL, NULL,
 8019922:	6962      	ldr	r2, [r4, #20]
 8019924:	4619      	mov	r1, r3
 8019926:	e9cd 5200 	strd	r5, r2, [sp]
 801992a:	461a      	mov	r2, r3
 801992c:	47b0      	blx	r6
 801992e:	e7ee      	b.n	801990e <tcp_conn_close.isra.0+0x3e>

08019930 <tcp_send_process>:
{
 8019930:	b570      	push	{r4, r5, r6, lr}
	k_mutex_lock(&conn->lock, K_FOREVER);
 8019932:	f1a0 0468 	sub.w	r4, r0, #104	; 0x68
	struct tcp *conn = CONTAINER_OF(dwork, struct tcp, send_timer);
 8019936:	f1a0 0690 	sub.w	r6, r0, #144	; 0x90
	k_mutex_lock(&conn->lock, K_FOREVER);
 801993a:	f04f 32ff 	mov.w	r2, #4294967295
 801993e:	f04f 33ff 	mov.w	r3, #4294967295
 8019942:	4620      	mov	r0, r4
 8019944:	f7ff fe60 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	unref = tcp_send_process_no_lock(conn);
 8019948:	4630      	mov	r0, r6
 801994a:	f7f0 f8c9 	bl	8009ae0 <tcp_send_process_no_lock>
 801994e:	4605      	mov	r5, r0
	k_mutex_unlock(&conn->lock);
 8019950:	4620      	mov	r0, r4
 8019952:	f7ff ff96 	bl	8019882 <k_mutex_unlock.isra.0>
	if (unref) {
 8019956:	b135      	cbz	r5, 8019966 <tcp_send_process+0x36>
		tcp_conn_close(conn, -ETIMEDOUT);
 8019958:	4630      	mov	r0, r6
 801995a:	f06f 0173 	mvn.w	r1, #115	; 0x73
}
 801995e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		tcp_conn_close(conn, -ETIMEDOUT);
 8019962:	f7ff bfb5 	b.w	80198d0 <tcp_conn_close.isra.0>
}
 8019966:	bd70      	pop	{r4, r5, r6, pc}

08019968 <tcp_timewait_timeout>:
	(void)tcp_conn_close(conn, -ETIMEDOUT);
 8019968:	f06f 0173 	mvn.w	r1, #115	; 0x73
 801996c:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8019970:	f7ff bfae 	b.w	80198d0 <tcp_conn_close.isra.0>

08019974 <tcp_fin_timeout>:
	(void)tcp_conn_close(conn, -ETIMEDOUT);
 8019974:	f06f 0173 	mvn.w	r1, #115	; 0x73
 8019978:	f5a0 70d8 	sub.w	r0, r0, #432	; 0x1b0
 801997c:	f7ff bfa8 	b.w	80198d0 <tcp_conn_close.isra.0>

08019980 <net_tcp_listen>:
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
 8019980:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
 8019984:	f043 0306 	orr.w	r3, r3, #6
 8019988:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
}
 801998c:	2000      	movs	r0, #0
 801998e:	4770      	bx	lr

08019990 <net_tcp_send_data>:
{
 8019990:	b508      	push	{r3, lr}
	if (cb) {
 8019992:	460b      	mov	r3, r1
 8019994:	b109      	cbz	r1, 801999a <net_tcp_send_data+0xa>
		cb(context, 0, user_data);
 8019996:	2100      	movs	r1, #0
 8019998:	4798      	blx	r3
}
 801999a:	2000      	movs	r0, #0
 801999c:	bd08      	pop	{r3, pc}

0801999e <net_tcp_recv>:
	struct tcp *conn = context->tcp;
 801999e:	6d43      	ldr	r3, [r0, #84]	; 0x54
	context->recv_cb = cb;
 80199a0:	6481      	str	r1, [r0, #72]	; 0x48
	if (conn) {
 80199a2:	b103      	cbz	r3, 80199a6 <net_tcp_recv+0x8>
		conn->recv_user_data = user_data;
 80199a4:	615a      	str	r2, [r3, #20]
}
 80199a6:	2000      	movs	r0, #0
 80199a8:	4770      	bx	lr

080199aa <net_tcp_finalize>:
{
 80199aa:	b530      	push	{r4, r5, lr}
 80199ac:	b089      	sub	sp, #36	; 0x24
 80199ae:	4605      	mov	r5, r0
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 80199b0:	ab03      	add	r3, sp, #12
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
 80199b2:	a901      	add	r1, sp, #4
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 80199b4:	9301      	str	r3, [sp, #4]
 80199b6:	2314      	movs	r3, #20
 80199b8:	9302      	str	r3, [sp, #8]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
 80199ba:	f7fd ffb5 	bl	8017928 <net_pkt_get_data>
	if (!tcp_hdr) {
 80199be:	4604      	mov	r4, r0
 80199c0:	b188      	cbz	r0, 80199e6 <net_tcp_finalize+0x3c>
	tcp_hdr->chksum = 0U;
 80199c2:	2300      	movs	r3, #0
 80199c4:	7403      	strb	r3, [r0, #16]
 80199c6:	7443      	strb	r3, [r0, #17]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 80199c8:	69a8      	ldr	r0, [r5, #24]
 80199ca:	f7fc fb35 	bl	8016038 <net_if_need_calc_tx_checksum>
 80199ce:	b120      	cbz	r0, 80199da <net_tcp_finalize+0x30>
	return net_calc_chksum(pkt, IPPROTO_TCP);
 80199d0:	2106      	movs	r1, #6
 80199d2:	4628      	mov	r0, r5
 80199d4:	f7fc fd88 	bl	80164e8 <net_calc_chksum>
		tcp_hdr->chksum = net_calc_chksum_tcp(pkt);
 80199d8:	8220      	strh	r0, [r4, #16]
	return net_pkt_set_data(pkt, &tcp_access);
 80199da:	a901      	add	r1, sp, #4
 80199dc:	4628      	mov	r0, r5
 80199de:	f7fd ffc2 	bl	8017966 <net_pkt_set_data>
}
 80199e2:	b009      	add	sp, #36	; 0x24
 80199e4:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
 80199e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80199ea:	e7fa      	b.n	80199e2 <net_tcp_finalize+0x38>

080199ec <net_tcp_input>:
{
 80199ec:	b570      	push	{r4, r5, r6, lr}
 80199ee:	4604      	mov	r4, r0
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 80199f0:	6980      	ldr	r0, [r0, #24]
{
 80199f2:	460e      	mov	r6, r1
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 80199f4:	f7fc fb23 	bl	801603e <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
 80199f8:	b940      	cbnz	r0, 8019a0c <net_tcp_input+0x20>
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, tcp_access);
 80199fa:	4631      	mov	r1, r6
 80199fc:	4620      	mov	r0, r4
 80199fe:	f7fd ff93 	bl	8017928 <net_pkt_get_data>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
 8019a02:	4605      	mov	r5, r0
 8019a04:	b948      	cbnz	r0, 8019a1a <net_tcp_input+0x2e>
	return NULL;
 8019a06:	2500      	movs	r5, #0
}
 8019a08:	4628      	mov	r0, r5
 8019a0a:	bd70      	pop	{r4, r5, r6, pc}
 8019a0c:	2106      	movs	r1, #6
 8019a0e:	4620      	mov	r0, r4
 8019a10:	f7fc fd6a 	bl	80164e8 <net_calc_chksum>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 8019a14:	2800      	cmp	r0, #0
 8019a16:	d0f0      	beq.n	80199fa <net_tcp_input+0xe>
 8019a18:	e7f5      	b.n	8019a06 <net_tcp_input+0x1a>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
 8019a1a:	4631      	mov	r1, r6
 8019a1c:	4620      	mov	r0, r4
 8019a1e:	f7fd ffa2 	bl	8017966 <net_pkt_set_data>
 8019a22:	2800      	cmp	r0, #0
 8019a24:	d0f0      	beq.n	8019a08 <net_tcp_input+0x1c>
drop:
 8019a26:	e7ee      	b.n	8019a06 <net_tcp_input+0x1a>

08019a28 <net_tcp_get_supported_mss>:
{
 8019a28:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(conn->context);
 8019a2a:	6842      	ldr	r2, [r0, #4]
	return ((context->flags & NET_CONTEXT_FAMILY) >> 3);
 8019a2c:	f8b2 3074 	ldrh.w	r3, [r2, #116]	; 0x74
 8019a30:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	if (family == AF_INET) {
 8019a34:	2b01      	cmp	r3, #1
 8019a36:	d111      	bne.n	8019a5c <net_tcp_get_supported_mss+0x34>
		struct net_if *iface = net_context_get_iface(conn->context);
 8019a38:	f992 0076 	ldrsb.w	r0, [r2, #118]	; 0x76
 8019a3c:	f7ff fe4b 	bl	80196d6 <net_context_get_iface.isra.0>
		if (iface && net_if_get_mtu(iface) >= NET_IPV4TCPH_LEN) {
 8019a40:	b148      	cbz	r0, 8019a56 <net_tcp_get_supported_mss+0x2e>
	return iface->if_dev->mtu;
 8019a42:	6803      	ldr	r3, [r0, #0]
 8019a44:	8b18      	ldrh	r0, [r3, #24]
 8019a46:	2827      	cmp	r0, #39	; 0x27
 8019a48:	d905      	bls.n	8019a56 <net_tcp_get_supported_mss+0x2e>
			mss = NET_IPV4_MTU - NET_IPV4TCPH_LEN;
 8019a4a:	3828      	subs	r0, #40	; 0x28
 8019a4c:	bf08      	it	eq
 8019a4e:	f44f 7006 	moveq.w	r0, #536	; 0x218
		return mss;
 8019a52:	b280      	uxth	r0, r0
}
 8019a54:	bd08      	pop	{r3, pc}
			mss = NET_IPV4_MTU - NET_IPV4TCPH_LEN;
 8019a56:	f44f 7006 	mov.w	r0, #536	; 0x218
		return mss;
 8019a5a:	e7fa      	b.n	8019a52 <net_tcp_get_supported_mss+0x2a>
	else if (family == AF_INET6) {
 8019a5c:	2b02      	cmp	r3, #2
 8019a5e:	d111      	bne.n	8019a84 <net_tcp_get_supported_mss+0x5c>
		struct net_if *iface = net_context_get_iface(conn->context);
 8019a60:	f992 0076 	ldrsb.w	r0, [r2, #118]	; 0x76
 8019a64:	f7ff fe37 	bl	80196d6 <net_context_get_iface.isra.0>
		if (iface && net_if_get_mtu(iface) >= NET_IPV6TCPH_LEN) {
 8019a68:	b148      	cbz	r0, 8019a7e <net_tcp_get_supported_mss+0x56>
 8019a6a:	6803      	ldr	r3, [r0, #0]
 8019a6c:	8b18      	ldrh	r0, [r3, #24]
 8019a6e:	283b      	cmp	r0, #59	; 0x3b
 8019a70:	d905      	bls.n	8019a7e <net_tcp_get_supported_mss+0x56>
			mss = NET_IPV6_MTU - NET_IPV6TCPH_LEN;
 8019a72:	383c      	subs	r0, #60	; 0x3c
 8019a74:	f240 43c4 	movw	r3, #1220	; 0x4c4
 8019a78:	bf08      	it	eq
 8019a7a:	4618      	moveq	r0, r3
 8019a7c:	e7e9      	b.n	8019a52 <net_tcp_get_supported_mss+0x2a>
 8019a7e:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8019a82:	e7e6      	b.n	8019a52 <net_tcp_get_supported_mss+0x2a>
	return 0;
 8019a84:	2000      	movs	r0, #0
 8019a86:	e7e5      	b.n	8019a54 <net_tcp_get_supported_mss+0x2c>

08019a88 <tcp_out>:
	(void)tcp_out_ext(conn, flags, NULL /* no data */, conn->seq);
 8019a88:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
 8019a8c:	2200      	movs	r2, #0
 8019a8e:	f7f0 bb3b 	b.w	800a108 <tcp_out_ext>

08019a92 <tcp_send_ack>:
{
 8019a92:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&conn->lock, K_FOREVER);
 8019a94:	f5a0 74ac 	sub.w	r4, r0, #344	; 0x158
 8019a98:	f5a0 75c0 	sub.w	r5, r0, #384	; 0x180
 8019a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8019aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8019aa4:	4620      	mov	r0, r4
 8019aa6:	f7ff fdaf 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	tcp_out(conn, ACK);
 8019aaa:	4628      	mov	r0, r5
 8019aac:	2110      	movs	r1, #16
 8019aae:	f7ff ffeb 	bl	8019a88 <tcp_out>
	k_mutex_unlock(&conn->lock);
 8019ab2:	4620      	mov	r0, r4
}
 8019ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&conn->lock);
 8019ab8:	f7ff bee3 	b.w	8019882 <k_mutex_unlock.isra.0>

08019abc <tcp_send_data>:
{
 8019abc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	len = MIN3(conn->send_data_total - conn->unacked_len,
 8019ac0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
{
 8019ac4:	4604      	mov	r4, r0
	len = MIN3(conn->send_data_total - conn->unacked_len,
 8019ac6:	f8d0 6210 	ldr.w	r6, [r0, #528]	; 0x210
 8019aca:	f8b0 5232 	ldrh.w	r5, [r0, #562]	; 0x232
 8019ace:	1af6      	subs	r6, r6, r3
 8019ad0:	1aed      	subs	r5, r5, r3
 8019ad2:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8019ad6:	07da      	lsls	r2, r3, #31
 8019ad8:	bf4c      	ite	mi
 8019ada:	f8b0 7084 	ldrhmi.w	r7, [r0, #132]	; 0x84
 8019ade:	f44f 7706 	movpl.w	r7, #536	; 0x218
 8019ae2:	f7ff ffa1 	bl	8019a28 <net_tcp_get_supported_mss>
 8019ae6:	42b8      	cmp	r0, r7
 8019ae8:	dd17      	ble.n	8019b1a <tcp_send_data+0x5e>
 8019aea:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8019aee:	07db      	lsls	r3, r3, #31
 8019af0:	f140 80b7 	bpl.w	8019c62 <tcp_send_data+0x1a6>
 8019af4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8019af8:	429d      	cmp	r5, r3
 8019afa:	f2c0 80b6 	blt.w	8019c6a <tcp_send_data+0x1ae>
 8019afe:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8019b02:	4620      	mov	r0, r4
 8019b04:	f7ff ff90 	bl	8019a28 <net_tcp_get_supported_mss>
 8019b08:	42a8      	cmp	r0, r5
 8019b0a:	dd13      	ble.n	8019b34 <tcp_send_data+0x78>
 8019b0c:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8019b10:	07dd      	lsls	r5, r3, #31
 8019b12:	d513      	bpl.n	8019b3c <tcp_send_data+0x80>
 8019b14:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8019b18:	e0ac      	b.n	8019c74 <tcp_send_data+0x1b8>
 8019b1a:	4620      	mov	r0, r4
 8019b1c:	f7ff ff84 	bl	8019a28 <net_tcp_get_supported_mss>
 8019b20:	4285      	cmp	r5, r0
 8019b22:	f2c0 80a2 	blt.w	8019c6a <tcp_send_data+0x1ae>
 8019b26:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8019b2a:	07df      	lsls	r7, r3, #31
 8019b2c:	d4e7      	bmi.n	8019afe <tcp_send_data+0x42>
 8019b2e:	f44f 7506 	mov.w	r5, #536	; 0x218
 8019b32:	e7e6      	b.n	8019b02 <tcp_send_data+0x46>
 8019b34:	4620      	mov	r0, r4
 8019b36:	f7ff ff77 	bl	8019a28 <net_tcp_get_supported_mss>
 8019b3a:	e09b      	b.n	8019c74 <tcp_send_data+0x1b8>
 8019b3c:	f44f 7006 	mov.w	r0, #536	; 0x218
 8019b40:	e098      	b.n	8019c74 <tcp_send_data+0x1b8>
 8019b42:	f8b4 5232 	ldrh.w	r5, [r4, #562]	; 0x232
 8019b46:	1aed      	subs	r5, r5, r3
 8019b48:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8019b4c:	07d8      	lsls	r0, r3, #31
 8019b4e:	4620      	mov	r0, r4
 8019b50:	bf4c      	ite	mi
 8019b52:	f8b4 6084 	ldrhmi.w	r6, [r4, #132]	; 0x84
 8019b56:	f44f 7606 	movpl.w	r6, #536	; 0x218
 8019b5a:	f7ff ff65 	bl	8019a28 <net_tcp_get_supported_mss>
 8019b5e:	42b0      	cmp	r0, r6
 8019b60:	dd15      	ble.n	8019b8e <tcp_send_data+0xd2>
 8019b62:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8019b66:	07d9      	lsls	r1, r3, #31
 8019b68:	d572      	bpl.n	8019c50 <tcp_send_data+0x194>
 8019b6a:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8019b6e:	429d      	cmp	r5, r3
 8019b70:	db71      	blt.n	8019c56 <tcp_send_data+0x19a>
 8019b72:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8019b76:	4620      	mov	r0, r4
 8019b78:	f7ff ff56 	bl	8019a28 <net_tcp_get_supported_mss>
 8019b7c:	42a8      	cmp	r0, r5
 8019b7e:	dd12      	ble.n	8019ba6 <tcp_send_data+0xea>
 8019b80:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8019b84:	07db      	lsls	r3, r3, #31
 8019b86:	d513      	bpl.n	8019bb0 <tcp_send_data+0xf4>
 8019b88:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8019b8c:	e07a      	b.n	8019c84 <tcp_send_data+0x1c8>
 8019b8e:	4620      	mov	r0, r4
 8019b90:	f7ff ff4a 	bl	8019a28 <net_tcp_get_supported_mss>
 8019b94:	4285      	cmp	r5, r0
 8019b96:	db5e      	blt.n	8019c56 <tcp_send_data+0x19a>
 8019b98:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8019b9c:	07da      	lsls	r2, r3, #31
 8019b9e:	d4e8      	bmi.n	8019b72 <tcp_send_data+0xb6>
 8019ba0:	f44f 7506 	mov.w	r5, #536	; 0x218
 8019ba4:	e7e7      	b.n	8019b76 <tcp_send_data+0xba>
 8019ba6:	4620      	mov	r0, r4
 8019ba8:	f7ff ff3e 	bl	8019a28 <net_tcp_get_supported_mss>
 8019bac:	4605      	mov	r5, r0
 8019bae:	e069      	b.n	8019c84 <tcp_send_data+0x1c8>
 8019bb0:	f44f 7506 	mov.w	r5, #536	; 0x218
 8019bb4:	6863      	ldr	r3, [r4, #4]
	pkt = tcp_pkt_alloc(conn, len);
 8019bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019bba:	2100      	movs	r1, #0
 8019bbc:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
 8019bc0:	2306      	movs	r3, #6
 8019bc2:	e9cd 0100 	strd	r0, r1, [sp]
 8019bc6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
 8019bca:	4629      	mov	r1, r5
 8019bcc:	6920      	ldr	r0, [r4, #16]
 8019bce:	f7ed facb 	bl	8007168 <net_pkt_alloc_with_buffer>
 8019bd2:	4606      	mov	r6, r0
	if (!pkt) {
 8019bd4:	b1f0      	cbz	r0, 8019c14 <tcp_send_data+0x158>
	ret = tcp_pkt_peek(pkt, conn->send_data, conn->unacked_len, len);
 8019bd6:	68a7      	ldr	r7, [r4, #8]
 8019bd8:	f8d4 8218 	ldr.w	r8, [r4, #536]	; 0x218
	net_pkt_cursor_init(to);
 8019bdc:	f7fd fc13 	bl	8017406 <net_pkt_cursor_init>
	net_pkt_cursor_init(from);
 8019be0:	4638      	mov	r0, r7
 8019be2:	f7fd fc10 	bl	8017406 <net_pkt_cursor_init>
	if (pos) {
 8019be6:	f1b8 0f00 	cmp.w	r8, #0
 8019bea:	d009      	beq.n	8019c00 <tcp_send_data+0x144>
	pkt->overwrite = overwrite;
 8019bec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
		net_pkt_skip(from, pos);
 8019bf0:	4641      	mov	r1, r8
 8019bf2:	4638      	mov	r0, r7
 8019bf4:	f043 0301 	orr.w	r3, r3, #1
 8019bf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8019bfc:	f7fd fc67 	bl	80174ce <net_pkt_skip>
	return net_pkt_copy(to, from, len);
 8019c00:	462a      	mov	r2, r5
 8019c02:	4639      	mov	r1, r7
 8019c04:	4630      	mov	r0, r6
 8019c06:	f7fd fd2e 	bl	8017666 <net_pkt_copy>
	if (ret < 0) {
 8019c0a:	2800      	cmp	r0, #0
 8019c0c:	da05      	bge.n	8019c1a <tcp_send_data+0x15e>
		tcp_pkt_unref(pkt);
 8019c0e:	4630      	mov	r0, r6
 8019c10:	f7fd fb67 	bl	80172e2 <net_pkt_unref>
		ret = -ENOBUFS;
 8019c14:	f06f 0768 	mvn.w	r7, #104	; 0x68
	return ret;
 8019c18:	e013      	b.n	8019c42 <tcp_send_data+0x186>
	ret = tcp_out_ext(conn, PSH | ACK, pkt, conn->seq + conn->unacked_len);
 8019c1a:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8019c1e:	2118      	movs	r1, #24
 8019c20:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8019c24:	4620      	mov	r0, r4
 8019c26:	4413      	add	r3, r2
 8019c28:	4632      	mov	r2, r6
 8019c2a:	f7f0 fa6d 	bl	800a108 <tcp_out_ext>
	if (ret == 0) {
 8019c2e:	4607      	mov	r7, r0
 8019c30:	b920      	cbnz	r0, 8019c3c <tcp_send_data+0x180>
		conn->unacked_len += len;
 8019c32:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8019c36:	4428      	add	r0, r5
 8019c38:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
	tcp_pkt_unref(pkt);
 8019c3c:	4630      	mov	r0, r6
 8019c3e:	f7fd fb50 	bl	80172e2 <net_pkt_unref>
}
 8019c42:	4638      	mov	r0, r7
 8019c44:	b002      	add	sp, #8
 8019c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = -ENODATA;
 8019c4a:	f06f 073c 	mvn.w	r7, #60	; 0x3c
 8019c4e:	e7f8      	b.n	8019c42 <tcp_send_data+0x186>
	len = MIN3(conn->send_data_total - conn->unacked_len,
 8019c50:	f5b5 7f06 	cmp.w	r5, #536	; 0x218
 8019c54:	daa4      	bge.n	8019ba0 <tcp_send_data+0xe4>
 8019c56:	f8b4 5232 	ldrh.w	r5, [r4, #562]	; 0x232
 8019c5a:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8019c5e:	1a2d      	subs	r5, r5, r0
 8019c60:	e010      	b.n	8019c84 <tcp_send_data+0x1c8>
 8019c62:	f5b5 7f06 	cmp.w	r5, #536	; 0x218
 8019c66:	f6bf af62 	bge.w	8019b2e <tcp_send_data+0x72>
 8019c6a:	f8b4 0232 	ldrh.w	r0, [r4, #562]	; 0x232
 8019c6e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8019c72:	1ac0      	subs	r0, r0, r3
 8019c74:	4286      	cmp	r6, r0
 8019c76:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8019c7a:	f4bf af62 	bcs.w	8019b42 <tcp_send_data+0x86>
 8019c7e:	f8d4 5210 	ldr.w	r5, [r4, #528]	; 0x210
 8019c82:	1aed      	subs	r5, r5, r3
	if (len == 0) {
 8019c84:	2d00      	cmp	r5, #0
 8019c86:	d0e0      	beq.n	8019c4a <tcp_send_data+0x18e>
	pkt = tcp_pkt_alloc(conn, len);
 8019c88:	dc94      	bgt.n	8019bb4 <tcp_send_data+0xf8>
 8019c8a:	2100      	movs	r1, #0
 8019c8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019c90:	f7ed f996 	bl	8006fc0 <net_pkt_alloc>
 8019c94:	e79d      	b.n	8019bd2 <tcp_send_data+0x116>

08019c96 <tcp_short_window>:
{
 8019c96:	b538      	push	{r3, r4, r5, lr}
	int32_t threshold = MIN(conn_mss(conn), conn->recv_win_max / 2);
 8019c98:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
{
 8019c9c:	4604      	mov	r4, r0
	int32_t threshold = MIN(conn_mss(conn), conn->recv_win_max / 2);
 8019c9e:	07d8      	lsls	r0, r3, #31
 8019ca0:	4620      	mov	r0, r4
 8019ca2:	bf4c      	ite	mi
 8019ca4:	f8b4 5084 	ldrhmi.w	r5, [r4, #132]	; 0x84
 8019ca8:	f44f 7506 	movpl.w	r5, #536	; 0x218
 8019cac:	f7ff febc 	bl	8019a28 <net_tcp_get_supported_mss>
 8019cb0:	42a8      	cmp	r0, r5
 8019cb2:	dd26      	ble.n	8019d02 <tcp_short_window+0x6c>
 8019cb4:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8019cb8:	07d9      	lsls	r1, r3, #31
 8019cba:	d527      	bpl.n	8019d0c <tcp_short_window+0x76>
 8019cbc:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8019cc0:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8019cc4:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8019cc8:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8019ccc:	da12      	bge.n	8019cf4 <tcp_short_window+0x5e>
 8019cce:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8019cd2:	4620      	mov	r0, r4
 8019cd4:	07da      	lsls	r2, r3, #31
 8019cd6:	bf4c      	ite	mi
 8019cd8:	f8b4 5084 	ldrhmi.w	r5, [r4, #132]	; 0x84
 8019cdc:	f44f 7506 	movpl.w	r5, #536	; 0x218
 8019ce0:	f7ff fea2 	bl	8019a28 <net_tcp_get_supported_mss>
 8019ce4:	42a8      	cmp	r0, r5
 8019ce6:	dd14      	ble.n	8019d12 <tcp_short_window+0x7c>
 8019ce8:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8019cec:	07db      	lsls	r3, r3, #31
 8019cee:	d514      	bpl.n	8019d1a <tcp_short_window+0x84>
 8019cf0:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
	if (conn->recv_win > threshold) {
 8019cf4:	f8b4 322e 	ldrh.w	r3, [r4, #558]	; 0x22e
}
 8019cf8:	4283      	cmp	r3, r0
 8019cfa:	bfcc      	ite	gt
 8019cfc:	2000      	movgt	r0, #0
 8019cfe:	2001      	movle	r0, #1
 8019d00:	bd38      	pop	{r3, r4, r5, pc}
	int32_t threshold = MIN(conn_mss(conn), conn->recv_win_max / 2);
 8019d02:	4620      	mov	r0, r4
 8019d04:	f7ff fe90 	bl	8019a28 <net_tcp_get_supported_mss>
 8019d08:	4603      	mov	r3, r0
 8019d0a:	e7d9      	b.n	8019cc0 <tcp_short_window+0x2a>
 8019d0c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8019d10:	e7d6      	b.n	8019cc0 <tcp_short_window+0x2a>
 8019d12:	4620      	mov	r0, r4
 8019d14:	f7ff fe88 	bl	8019a28 <net_tcp_get_supported_mss>
 8019d18:	e7ec      	b.n	8019cf4 <tcp_short_window+0x5e>
 8019d1a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8019d1e:	e7e9      	b.n	8019cf4 <tcp_short_window+0x5e>

08019d20 <tcp_update_recv_wnd>:
{
 8019d20:	b570      	push	{r4, r5, r6, lr}
	new_win = conn->recv_win + delta;
 8019d22:	f8b0 522e 	ldrh.w	r5, [r0, #558]	; 0x22e
{
 8019d26:	4604      	mov	r4, r0
	if (new_win < 0) {
 8019d28:	1869      	adds	r1, r5, r1
 8019d2a:	d41d      	bmi.n	8019d68 <tcp_update_recv_wnd+0x48>
	} else if (new_win > conn->recv_win_max) {
 8019d2c:	f8b0 522c 	ldrh.w	r5, [r0, #556]	; 0x22c
 8019d30:	428d      	cmp	r5, r1
 8019d32:	bfa8      	it	ge
 8019d34:	460d      	movge	r5, r1
	short_win_before = tcp_short_window(conn);
 8019d36:	4620      	mov	r0, r4
 8019d38:	f7ff ffad 	bl	8019c96 <tcp_short_window>
 8019d3c:	4606      	mov	r6, r0
	conn->recv_win = new_win;
 8019d3e:	f8a4 522e 	strh.w	r5, [r4, #558]	; 0x22e
	short_win_after = tcp_short_window(conn);
 8019d42:	4620      	mov	r0, r4
 8019d44:	f7ff ffa7 	bl	8019c96 <tcp_short_window>
	if (short_win_before && !short_win_after &&
 8019d48:	b166      	cbz	r6, 8019d64 <tcp_update_recv_wnd+0x44>
 8019d4a:	b958      	cbnz	r0, 8019d64 <tcp_update_recv_wnd+0x44>
 8019d4c:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 8019d50:	2b04      	cmp	r3, #4
 8019d52:	d107      	bne.n	8019d64 <tcp_update_recv_wnd+0x44>
		k_work_cancel_delayable(&conn->ack_timer);
 8019d54:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8019d58:	f001 fee2 	bl	801bb20 <k_work_cancel_delayable>
		tcp_out(conn, ACK);
 8019d5c:	2110      	movs	r1, #16
 8019d5e:	4620      	mov	r0, r4
 8019d60:	f7ff fe92 	bl	8019a88 <tcp_out>
}
 8019d64:	2000      	movs	r0, #0
 8019d66:	bd70      	pop	{r4, r5, r6, pc}
		new_win = 0;
 8019d68:	2500      	movs	r5, #0
 8019d6a:	e7e4      	b.n	8019d36 <tcp_update_recv_wnd+0x16>

08019d6c <net_tcp_update_recv_wnd>:
{
 8019d6c:	b570      	push	{r4, r5, r6, lr}
	struct tcp *conn = context->tcp;
 8019d6e:	6d44      	ldr	r4, [r0, #84]	; 0x54
{
 8019d70:	4605      	mov	r5, r0
 8019d72:	460e      	mov	r6, r1
	if (!conn) {
 8019d74:	b18c      	cbz	r4, 8019d9a <net_tcp_update_recv_wnd+0x2e>
	k_mutex_lock(&conn->lock, K_FOREVER);
 8019d76:	3428      	adds	r4, #40	; 0x28
 8019d78:	f04f 32ff 	mov.w	r2, #4294967295
 8019d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8019d80:	4620      	mov	r0, r4
 8019d82:	f7ff fc41 	bl	8019608 <k_mutex_lock.constprop.0.isra.0>
	ret = tcp_update_recv_wnd((struct tcp *)context->tcp, delta);
 8019d86:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8019d88:	4631      	mov	r1, r6
 8019d8a:	f7ff ffc9 	bl	8019d20 <tcp_update_recv_wnd>
 8019d8e:	4605      	mov	r5, r0
	k_mutex_unlock(&conn->lock);
 8019d90:	4620      	mov	r0, r4
 8019d92:	f7ff fd76 	bl	8019882 <k_mutex_unlock.isra.0>
}
 8019d96:	4628      	mov	r0, r5
 8019d98:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTOTYPE;
 8019d9a:	f06f 056a 	mvn.w	r5, #106	; 0x6a
 8019d9e:	e7fa      	b.n	8019d96 <net_tcp_update_recv_wnd+0x2a>

08019da0 <net_udp_create>:
#include "net_stats.h"

#define PKT_WAIT_TIME K_SECONDS(1)

int net_udp_create(struct net_pkt *pkt, uint16_t src_port, uint16_t dst_port)
{
 8019da0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8019da2:	2308      	movs	r3, #8
{
 8019da4:	460e      	mov	r6, r1
 8019da6:	4604      	mov	r4, r0
 8019da8:	4615      	mov	r5, r2
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 8019daa:	eb0d 0103 	add.w	r1, sp, r3
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8019dae:	f8cd d008 	str.w	sp, [sp, #8]
 8019db2:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 8019db4:	f7fd fdb8 	bl	8017928 <net_pkt_get_data>
	if (!udp_hdr) {
 8019db8:	b160      	cbz	r0, 8019dd4 <net_udp_create+0x34>
		return -ENOBUFS;
	}

	udp_hdr->src_port = src_port;
	udp_hdr->dst_port = dst_port;
	udp_hdr->len      = 0U;
 8019dba:	2300      	movs	r3, #0
	udp_hdr->src_port = src_port;
 8019dbc:	8006      	strh	r6, [r0, #0]
	udp_hdr->dst_port = dst_port;
 8019dbe:	8045      	strh	r5, [r0, #2]
	udp_hdr->chksum   = 0U;

	return net_pkt_set_data(pkt, &udp_access);
 8019dc0:	a902      	add	r1, sp, #8
	udp_hdr->len      = 0U;
 8019dc2:	7103      	strb	r3, [r0, #4]
 8019dc4:	7143      	strb	r3, [r0, #5]
	udp_hdr->chksum   = 0U;
 8019dc6:	7183      	strb	r3, [r0, #6]
 8019dc8:	71c3      	strb	r3, [r0, #7]
	return net_pkt_set_data(pkt, &udp_access);
 8019dca:	4620      	mov	r0, r4
 8019dcc:	f7fd fdcb 	bl	8017966 <net_pkt_set_data>
}
 8019dd0:	b004      	add	sp, #16
 8019dd2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 8019dd4:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8019dd8:	e7fa      	b.n	8019dd0 <net_udp_create+0x30>

08019dda <net_udp_finalize>:

int net_udp_finalize(struct net_pkt *pkt)
{
 8019dda:	b530      	push	{r4, r5, lr}
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8019ddc:	2308      	movs	r3, #8
{
 8019dde:	b085      	sub	sp, #20
 8019de0:	4604      	mov	r4, r0
	struct net_udp_hdr *udp_hdr;
	uint16_t length = 0;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 8019de2:	eb0d 0103 	add.w	r1, sp, r3
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8019de6:	f8cd d008 	str.w	sp, [sp, #8]
 8019dea:	9303      	str	r3, [sp, #12]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 8019dec:	f7fd fd9c 	bl	8017928 <net_pkt_get_data>
	if (!udp_hdr) {
 8019df0:	4605      	mov	r5, r0
 8019df2:	b308      	cbz	r0, 8019e38 <net_udp_finalize+0x5e>
		return -ENOBUFS;
	}

	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
 8019df4:	68a2      	ldr	r2, [r4, #8]
	size_t bytes = 0;
 8019df6:	2300      	movs	r3, #0
	while (buf) {
 8019df8:	b9d2      	cbnz	r2, 8019e30 <net_udp_finalize+0x56>
 8019dfa:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8019dfe:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8019e00:	440a      	add	r2, r1
 8019e02:	1a9b      	subs	r3, r3, r2
		 net_pkt_ip_opts_len(pkt);

	udp_hdr->len = htons(length);
 8019e04:	ba5b      	rev16	r3, r3
 8019e06:	80ab      	strh	r3, [r5, #4]

	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 8019e08:	69a0      	ldr	r0, [r4, #24]
 8019e0a:	f7fc f915 	bl	8016038 <net_if_need_calc_tx_checksum>
 8019e0e:	b148      	cbz	r0, 8019e24 <net_udp_finalize+0x4a>
	uint16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
 8019e10:	2111      	movs	r1, #17
 8019e12:	4620      	mov	r0, r4
 8019e14:	f7fc fb68 	bl	80164e8 <net_calc_chksum>
	return chksum == 0U ? 0xffff : chksum;
 8019e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019e1c:	2800      	cmp	r0, #0
 8019e1e:	bf18      	it	ne
 8019e20:	4603      	movne	r3, r0
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
 8019e22:	80eb      	strh	r3, [r5, #6]
	}

	return net_pkt_set_data(pkt, &udp_access);
 8019e24:	a902      	add	r1, sp, #8
 8019e26:	4620      	mov	r0, r4
 8019e28:	f7fd fd9d 	bl	8017966 <net_pkt_set_data>
}
 8019e2c:	b005      	add	sp, #20
 8019e2e:	bd30      	pop	{r4, r5, pc}
		bytes += buf->len;
 8019e30:	8a11      	ldrh	r1, [r2, #16]
		buf = buf->frags;
 8019e32:	6852      	ldr	r2, [r2, #4]
		bytes += buf->len;
 8019e34:	440b      	add	r3, r1
		buf = buf->frags;
 8019e36:	e7df      	b.n	8019df8 <net_udp_finalize+0x1e>
		return -ENOBUFS;
 8019e38:	f06f 0068 	mvn.w	r0, #104	; 0x68
 8019e3c:	e7f6      	b.n	8019e2c <net_udp_finalize+0x52>

08019e3e <net_udp_register>:
		     uint16_t local_port,
		     struct net_context *context,
		     net_conn_cb_t cb,
		     void *user_data,
		     struct net_conn_handle **handle)
{
 8019e3e:	b510      	push	{r4, lr}
 8019e40:	b086      	sub	sp, #24
	return net_conn_register(IPPROTO_UDP, family, remote_addr, local_addr,
 8019e42:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019e44:	9405      	str	r4, [sp, #20]
 8019e46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019e48:	9404      	str	r4, [sp, #16]
 8019e4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019e4c:	9403      	str	r4, [sp, #12]
 8019e4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019e50:	9402      	str	r4, [sp, #8]
 8019e52:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8019e56:	e9cd 3400 	strd	r3, r4, [sp]
 8019e5a:	4613      	mov	r3, r2
 8019e5c:	460a      	mov	r2, r1
 8019e5e:	4601      	mov	r1, r0
 8019e60:	2011      	movs	r0, #17
 8019e62:	f7ed fa15 	bl	8007290 <net_conn_register>
				 remote_port, local_port, context, cb,
				 user_data, handle);
}
 8019e66:	b006      	add	sp, #24
 8019e68:	bd10      	pop	{r4, pc}

08019e6a <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
 8019e6a:	b570      	push	{r4, r5, r6, lr}
 8019e6c:	4604      	mov	r4, r0
 8019e6e:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
 8019e70:	f7fd fd5a 	bl	8017928 <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
 8019e74:	4605      	mov	r5, r0
 8019e76:	b910      	cbnz	r0, 8019e7e <net_udp_input+0x14>
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
 8019e78:	2500      	movs	r5, #0
}
 8019e7a:	4628      	mov	r0, r5
 8019e7c:	bd70      	pop	{r4, r5, r6, pc}
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
 8019e7e:	4631      	mov	r1, r6
 8019e80:	4620      	mov	r0, r4
 8019e82:	f7fd fd70 	bl	8017966 <net_pkt_set_data>
 8019e86:	4603      	mov	r3, r0
 8019e88:	2800      	cmp	r0, #0
 8019e8a:	d1f5      	bne.n	8019e78 <net_udp_input+0xe>
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
 8019e8c:	88aa      	ldrh	r2, [r5, #4]
 8019e8e:	68a1      	ldr	r1, [r4, #8]
 8019e90:	ba52      	rev16	r2, r2
 8019e92:	b292      	uxth	r2, r2
	while (buf) {
 8019e94:	b999      	cbnz	r1, 8019ebe <net_udp_input+0x54>
				    net_pkt_ip_hdr_len(pkt) -
 8019e96:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
				    net_pkt_ip_opts_len(pkt))) {
 8019e9a:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
				    net_pkt_ip_hdr_len(pkt) -
 8019e9c:	4408      	add	r0, r1
 8019e9e:	1a1b      	subs	r3, r3, r0
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
 8019ea0:	429a      	cmp	r2, r3
 8019ea2:	d1e9      	bne.n	8019e78 <net_udp_input+0xe>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
 8019ea4:	69a0      	ldr	r0, [r4, #24]
 8019ea6:	f7fc f8ca 	bl	801603e <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
 8019eaa:	2800      	cmp	r0, #0
 8019eac:	d0e5      	beq.n	8019e7a <net_udp_input+0x10>
		if (!udp_hdr->chksum) {
 8019eae:	88eb      	ldrh	r3, [r5, #6]
 8019eb0:	b94b      	cbnz	r3, 8019ec6 <net_udp_input+0x5c>
	return pkt->family;
 8019eb2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
			if (IS_ENABLED(CONFIG_NET_UDP_MISSING_CHECKSUM) &&
 8019eb6:	095b      	lsrs	r3, r3, #5
 8019eb8:	2b01      	cmp	r3, #1
 8019eba:	d0de      	beq.n	8019e7a <net_udp_input+0x10>
 8019ebc:	e7dc      	b.n	8019e78 <net_udp_input+0xe>
		bytes += buf->len;
 8019ebe:	8a08      	ldrh	r0, [r1, #16]
		buf = buf->frags;
 8019ec0:	6849      	ldr	r1, [r1, #4]
		bytes += buf->len;
 8019ec2:	4403      	add	r3, r0
		buf = buf->frags;
 8019ec4:	e7e6      	b.n	8019e94 <net_udp_input+0x2a>
	return net_calc_chksum(pkt, IPPROTO_UDP);
 8019ec6:	2111      	movs	r1, #17
 8019ec8:	4620      	mov	r0, r4
 8019eca:	f7fc fb0d 	bl	80164e8 <net_calc_chksum>
		if (net_calc_verify_chksum_udp(pkt) != 0U) {
 8019ece:	2800      	cmp	r0, #0
 8019ed0:	d0d3      	beq.n	8019e7a <net_udp_input+0x10>
 8019ed2:	e7d1      	b.n	8019e78 <net_udp_input+0xe>

08019ed4 <is_pkt_part_of_slab>:
	size_t last_offset = (slab->num_blocks - 1) * slab->block_size;
 8019ed4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
	if ((ptr < slab->buffer) || (ptr > slab->buffer + last_offset)) {
 8019ed8:	6900      	ldr	r0, [r0, #16]
 8019eda:	4288      	cmp	r0, r1
 8019edc:	d80d      	bhi.n	8019efa <is_pkt_part_of_slab+0x26>
	size_t last_offset = (slab->num_blocks - 1) * slab->block_size;
 8019ede:	3b01      	subs	r3, #1
	if ((ptr < slab->buffer) || (ptr > slab->buffer + last_offset)) {
 8019ee0:	fb02 0303 	mla	r3, r2, r3, r0
 8019ee4:	4299      	cmp	r1, r3
 8019ee6:	d808      	bhi.n	8019efa <is_pkt_part_of_slab+0x26>
	ptr_offset = ptr - slab->buffer;
 8019ee8:	1a09      	subs	r1, r1, r0
	if (ptr_offset % slab->block_size != 0) {
 8019eea:	fbb1 f0f2 	udiv	r0, r1, r2
 8019eee:	fb02 1110 	mls	r1, r2, r0, r1
 8019ef2:	fab1 f081 	clz	r0, r1
 8019ef6:	0940      	lsrs	r0, r0, #5
 8019ef8:	4770      	bx	lr
		return false;
 8019efa:	2000      	movs	r0, #0
}
 8019efc:	4770      	bx	lr

08019efe <cmd_net_tcp>:
}
 8019efe:	2000      	movs	r0, #0
 8019f00:	4770      	bx	lr

08019f02 <net_if_get_by_index>:
 8019f02:	f7eb b8e7 	b.w	80050d4 <z_impl_net_if_get_by_index>

08019f06 <cmd_net_vlan_add>:
 8019f06:	f7f1 bced 	b.w	800b8e4 <cmd_net_vlan>

08019f0a <cmd_net_vlan_del>:
 8019f0a:	f7f1 bceb 	b.w	800b8e4 <cmd_net_vlan>

08019f0e <cmd_net_stats_iface>:
 8019f0e:	f7f1 bd21 	b.w	800b954 <cmd_net_stats_all>

08019f12 <cmd_net_stats>:
 8019f12:	f7f1 bd1f 	b.w	800b954 <cmd_net_stats_all>

08019f16 <cmd_net_gptp>:
 8019f16:	f7f1 bd67 	b.w	800b9e8 <cmd_net_gptp_port>

08019f1a <cmd_net_capture_setup>:
 8019f1a:	f7f1 bd81 	b.w	800ba20 <cmd_net_capture>

08019f1e <cmd_net_capture_cleanup>:
 8019f1e:	f7f1 bd7f 	b.w	800ba20 <cmd_net_capture>

08019f22 <cmd_net_capture_enable>:
 8019f22:	f7f1 bd7d 	b.w	800ba20 <cmd_net_capture>

08019f26 <cmd_net_capture_disable>:
 8019f26:	f7f1 bd7b 	b.w	800ba20 <cmd_net_capture>

08019f2a <net_addr_pton>:
 8019f2a:	f7fc b94b 	b.w	80161c4 <z_impl_net_addr_pton>

08019f2e <cmd_net_udp>:
 8019f2e:	2000      	movs	r0, #0
 8019f30:	4770      	bx	lr

08019f32 <net_if_flag_is_set>:
	if (iface == NULL) {
 8019f32:	b140      	cbz	r0, 8019f46 <net_if_flag_is_set+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8019f34:	6803      	ldr	r3, [r0, #0]
 8019f36:	f3bf 8f5b 	dmb	ish
 8019f3a:	68d8      	ldr	r0, [r3, #12]
 8019f3c:	f3bf 8f5b 	dmb	ish
 8019f40:	4108      	asrs	r0, r1
 8019f42:	f000 0001 	and.w	r0, r0, #1
}
 8019f46:	4770      	bx	lr

08019f48 <net_if_is_up>:
{
 8019f48:	b508      	push	{r3, lr}
	return net_if_flag_is_set(iface, NET_IF_UP) &&
 8019f4a:	2100      	movs	r1, #0
{
 8019f4c:	4602      	mov	r2, r0
	return net_if_flag_is_set(iface, NET_IF_UP) &&
 8019f4e:	f7ff fff0 	bl	8019f32 <net_if_flag_is_set>
 8019f52:	b118      	cbz	r0, 8019f5c <net_if_is_up+0x14>
	       net_if_flag_is_set(iface, NET_IF_RUNNING);
 8019f54:	2108      	movs	r1, #8
 8019f56:	4610      	mov	r0, r2
 8019f58:	f7ff ffeb 	bl	8019f32 <net_if_flag_is_set>
}
 8019f5c:	f000 0001 	and.w	r0, r0, #1
 8019f60:	bd08      	pop	{r3, pc}

08019f62 <net_shell_init>:

	(void)cmd_net_events_on(shell_backend_uart_get_ptr(), 1, argv);
#endif

	return 0;
}
 8019f62:	2000      	movs	r0, #0
 8019f64:	4770      	bx	lr

08019f66 <net_if_flag_is_set>:
	if (iface == NULL) {
 8019f66:	b140      	cbz	r0, 8019f7a <net_if_flag_is_set+0x14>
 8019f68:	6803      	ldr	r3, [r0, #0]
 8019f6a:	f3bf 8f5b 	dmb	ish
 8019f6e:	68d8      	ldr	r0, [r3, #12]
 8019f70:	f3bf 8f5b 	dmb	ish
 8019f74:	4108      	asrs	r0, r1
 8019f76:	f000 0001 	and.w	r0, r0, #1
}
 8019f7a:	4770      	bx	lr

08019f7c <iface_find_cb>:
{
 8019f7c:	b510      	push	{r4, lr}
	if (*iface_to_use == NULL &&
 8019f7e:	680b      	ldr	r3, [r1, #0]
{
 8019f80:	4604      	mov	r4, r0
 8019f82:	460a      	mov	r2, r1
	if (*iface_to_use == NULL &&
 8019f84:	b923      	cbnz	r3, 8019f90 <iface_find_cb+0x14>
	    !net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
 8019f86:	2103      	movs	r1, #3
 8019f88:	f7ff ffed 	bl	8019f66 <net_if_flag_is_set>
	if (*iface_to_use == NULL &&
 8019f8c:	b900      	cbnz	r0, 8019f90 <iface_find_cb+0x14>
		*iface_to_use = iface;
 8019f8e:	6014      	str	r4, [r2, #0]
}
 8019f90:	bd10      	pop	{r4, pc}

08019f92 <dns_msg_pack_qname>:
	return (uint16_t)strlen(str);
}

int dns_msg_pack_qname(uint16_t *len, uint8_t *buf, uint16_t size,
		       const char *domain_name)
{
 8019f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f96:	4607      	mov	r7, r0
 8019f98:	460e      	mov	r6, r1
 8019f9a:	4690      	mov	r8, r2
	if (str == NULL) {
 8019f9c:	461c      	mov	r4, r3
 8019f9e:	b91b      	cbnz	r3, 8019fa8 <dns_msg_pack_qname+0x16>
	lb_index = 1U;
	lb_size = 0U;

	dn_size = dns_strlen(domain_name);
	if (dn_size == 0U) {
		return -EINVAL;
 8019fa0:	f06f 0015 	mvn.w	r0, #21
	}

	*len = lb_index;

	return 0;
}
 8019fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (uint16_t)strlen(str);
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f7fa fe17 	bl	8014bdc <strlen>
 8019fae:	b280      	uxth	r0, r0
	if (dn_size == 0U) {
 8019fb0:	2800      	cmp	r0, #0
 8019fb2:	d0f5      	beq.n	8019fa0 <dns_msg_pack_qname+0xe>
 8019fb4:	1e63      	subs	r3, r4, #1
	lb_size = 0U;
 8019fb6:	2400      	movs	r4, #0
 8019fb8:	1c72      	adds	r2, r6, #1
	lb_index = 1U;
 8019fba:	2501      	movs	r5, #1
	lb_start = 0U;
 8019fbc:	46a4      	mov	ip, r4
		if (lb_index >= size) {
 8019fbe:	45a8      	cmp	r8, r5
 8019fc0:	d91b      	bls.n	8019ffa <dns_msg_pack_qname+0x68>
		switch (domain_name[i]) {
 8019fc2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8019fc6:	b1a1      	cbz	r1, 8019ff2 <dns_msg_pack_qname+0x60>
 8019fc8:	292e      	cmp	r1, #46	; 0x2e
			lb_size += 1U;
 8019fca:	bf11      	iteee	ne
 8019fcc:	3401      	addne	r4, #1
			buf[lb_start] = lb_size;
 8019fce:	f806 400c 	strbeq.w	r4, [r6, ip]
			break;
 8019fd2:	46ac      	moveq	ip, r5
			lb_size = 0U;
 8019fd4:	2400      	moveq	r4, #0
			lb_size += 1U;
 8019fd6:	bf1c      	itt	ne
 8019fd8:	b2a4      	uxthne	r4, r4
			buf[lb_index] = domain_name[i];
 8019fda:	7011      	strbne	r1, [r2, #0]
		lb_index += 1U;
 8019fdc:	1c69      	adds	r1, r5, #1
	for (i = 0U; i < dn_size + 1; i++) {
 8019fde:	42a8      	cmp	r0, r5
 8019fe0:	f102 0201 	add.w	r2, r2, #1
		lb_index += 1U;
 8019fe4:	b289      	uxth	r1, r1
	for (i = 0U; i < dn_size + 1; i++) {
 8019fe6:	d202      	bcs.n	8019fee <dns_msg_pack_qname+0x5c>
	return 0;
 8019fe8:	2000      	movs	r0, #0
	*len = lb_index;
 8019fea:	8039      	strh	r1, [r7, #0]
	return 0;
 8019fec:	e7da      	b.n	8019fa4 <dns_msg_pack_qname+0x12>
		lb_index += 1U;
 8019fee:	460d      	mov	r5, r1
 8019ff0:	e7e5      	b.n	8019fbe <dns_msg_pack_qname+0x2c>
			buf[lb_start] = lb_size;
 8019ff2:	f806 400c 	strb.w	r4, [r6, ip]
			buf[lb_index] = 0U;
 8019ff6:	7011      	strb	r1, [r2, #0]
			break;
 8019ff8:	e7f0      	b.n	8019fdc <dns_msg_pack_qname+0x4a>
			return -ENOMEM;
 8019ffa:	f06f 000b 	mvn.w	r0, #11
 8019ffe:	e7d1      	b.n	8019fa4 <dns_msg_pack_qname+0x12>

0801a000 <dns_unpack_answer>:
	return i;
}

int dns_unpack_answer(struct dns_msg_t *dns_msg, int dname_ptr, uint32_t *ttl,
		      enum dns_rr_type *type)
{
 801a000:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t rem_size;
	uint16_t pos;
	uint16_t len;
	uint8_t *answer;

	answer = dns_msg->msg + dns_msg->answer_offset;
 801a002:	89c7      	ldrh	r7, [r0, #14]
	int i = 0;
 801a004:	2400      	movs	r4, #0
	answer = dns_msg->msg + dns_msg->answer_offset;
 801a006:	6806      	ldr	r6, [r0, #0]

	dname_len = skip_fqdn(answer,
			      dns_msg->msg_size - dns_msg->answer_offset);
 801a008:	8a01      	ldrh	r1, [r0, #16]
	answer = dns_msg->msg + dns_msg->answer_offset;
 801a00a:	443e      	add	r6, r7
	dname_len = skip_fqdn(answer,
 801a00c:	1bcf      	subs	r7, r1, r7
		if (i >= buf_sz) {
 801a00e:	42a7      	cmp	r7, r4
 801a010:	dd2b      	ble.n	801a06a <dns_unpack_answer+0x6a>
		if (answer[i] == 0) {
 801a012:	5d35      	ldrb	r5, [r6, r4]
 801a014:	bb25      	cbnz	r5, 801a060 <dns_unpack_answer+0x60>
			i += 1;
 801a016:	3401      	adds	r4, #1
	 *
	 * So, answer size >= 12
	 *
	 * See RFC-1035 4.1.3. Resource record format
	 */
	rem_size = dns_msg->msg_size - dname_len;
 801a018:	b2a7      	uxth	r7, r4
 801a01a:	1bc9      	subs	r1, r1, r7
	if (rem_size < 2 + 2 + 4 + 2) {
 801a01c:	b289      	uxth	r1, r1
 801a01e:	2909      	cmp	r1, #9
 801a020:	d923      	bls.n	801a06a <dns_unpack_answer+0x6a>
	}

	/* Only DNS_CLASS_IN answers. If mDNS is enabled, strip away the
	 * Cache-Flush bit (highest one).
	 */
	if ((dns_answer_class(dname_len, answer) &
 801a022:	1931      	adds	r1, r6, r4
 801a024:	884d      	ldrh	r5, [r1, #2]
 801a026:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801a02a:	d11e      	bne.n	801a06a <dns_unpack_answer+0x6a>
	return ntohs(UNALIGNED_GET((uint16_t *)(answer + dname_size + 2)));
}

static inline int dns_answer_ttl(uint16_t dname_size, uint8_t *answer)
{
	return ntohl(UNALIGNED_GET((uint32_t *)(answer + dname_size + 4)));
 801a02c:	684d      	ldr	r5, [r1, #4]
 801a02e:	ba2d      	rev	r5, r5
							!= DNS_CLASS_IN) {
		return -EINVAL;
	}

	/* TTL value */
	*ttl = dns_answer_ttl(dname_len, answer);
 801a030:	6015      	str	r5, [r2, #0]
}

static inline int dns_answer_rdlength(uint16_t dname_size,
					     uint8_t *answer)
{
	return ntohs(UNALIGNED_GET((uint16_t *)(answer + dname_size + 8)));
 801a032:	890d      	ldrh	r5, [r1, #8]
	pos = dns_msg->answer_offset + dname_len +
		DNS_COMMON_UINT_SIZE + /* class length */
		DNS_COMMON_UINT_SIZE + /* type length */
		DNS_TTL_LEN +
		DNS_RDLENGTH_LEN;
	*type = dns_answer_type(dname_len, answer);
 801a034:	5b31      	ldrh	r1, [r6, r4]
	pos = dns_msg->answer_offset + dname_len +
 801a036:	89c2      	ldrh	r2, [r0, #14]
 801a038:	ba6d      	rev16	r5, r5
	*type = dns_answer_type(dname_len, answer);
 801a03a:	ba49      	rev16	r1, r1
	pos = dns_msg->answer_offset + dname_len +
 801a03c:	320a      	adds	r2, #10
	*type = dns_answer_type(dname_len, answer);
 801a03e:	b2c9      	uxtb	r1, r1
	pos = dns_msg->answer_offset + dname_len +
 801a040:	443a      	add	r2, r7

	switch (*type) {
 801a042:	2905      	cmp	r1, #5
	*type = dns_answer_type(dname_len, answer);
 801a044:	7019      	strb	r1, [r3, #0]
	pos = dns_msg->answer_offset + dname_len +
 801a046:	b292      	uxth	r2, r2
	switch (*type) {
 801a048:	d018      	beq.n	801a07c <dns_unpack_answer+0x7c>
 801a04a:	291c      	cmp	r1, #28
 801a04c:	d001      	beq.n	801a052 <dns_unpack_answer+0x52>
 801a04e:	2901      	cmp	r1, #1
 801a050:	d10b      	bne.n	801a06a <dns_unpack_answer+0x6a>
	dns_msg->response_type = type;
 801a052:	f06f 0314 	mvn.w	r3, #20
 801a056:	6043      	str	r3, [r0, #4]
	dns_msg->response_position = pos;
 801a058:	8102      	strh	r2, [r0, #8]
	dns_msg->response_length = len;
 801a05a:	8145      	strh	r5, [r0, #10]
		return 0;

	case DNS_RR_TYPE_CNAME:
		set_dns_msg_response(dns_msg, DNS_RESPONSE_CNAME_NO_IP,
				     pos, len);
		return 0;
 801a05c:	2000      	movs	r0, #0
		/* malformed dns answer */
		return -EINVAL;
	}

	return 0;
}
 801a05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (answer[i] >= 0xc0) {
 801a060:	2dbf      	cmp	r5, #191	; 0xbf
 801a062:	d905      	bls.n	801a070 <dns_unpack_answer+0x70>
			i += 2;
 801a064:	3402      	adds	r4, #2
			if (i > buf_sz) {
 801a066:	42a7      	cmp	r7, r4
 801a068:	dad6      	bge.n	801a018 <dns_unpack_answer+0x18>
 801a06a:	f06f 0015 	mvn.w	r0, #21
 801a06e:	e7f6      	b.n	801a05e <dns_unpack_answer+0x5e>
		} else if (answer[i] < DNS_LABEL_MAX_SIZE) {
 801a070:	2d3e      	cmp	r5, #62	; 0x3e
 801a072:	d8fa      	bhi.n	801a06a <dns_unpack_answer+0x6a>
			i += answer[i] + 1;
 801a074:	3501      	adds	r5, #1
 801a076:	fa54 f485 	uxtab	r4, r4, r5
		if (i >= buf_sz) {
 801a07a:	e7c8      	b.n	801a00e <dns_unpack_answer+0xe>
	dns_msg->response_type = type;
 801a07c:	f06f 0312 	mvn.w	r3, #18
 801a080:	e7e9      	b.n	801a056 <dns_unpack_answer+0x56>

0801a082 <dns_unpack_response_header>:
	int rc;

	dns_header = msg->msg;
	size = msg->msg_size;

	if (size < DNS_MSG_HEADER_SIZE) {
 801a082:	8a03      	ldrh	r3, [r0, #16]
	dns_header = msg->msg;
 801a084:	6802      	ldr	r2, [r0, #0]
	if (size < DNS_MSG_HEADER_SIZE) {
 801a086:	2b0b      	cmp	r3, #11
 801a088:	d921      	bls.n	801a0ce <dns_unpack_response_header+0x4c>
	return ntohs(UNALIGNED_GET((uint16_t *)(header)));
 801a08a:	8813      	ldrh	r3, [r2, #0]
 801a08c:	ba5b      	rev16	r3, r3
 801a08e:	b29b      	uxth	r3, r3
		return -ENOMEM;
	}

	if (dns_unpack_header_id(dns_header) != src_id) {
 801a090:	4299      	cmp	r1, r3
 801a092:	d11f      	bne.n	801a0d4 <dns_unpack_response_header+0x52>
	return ((*(header + 2)) & 0x80) ? 1 : 0;
 801a094:	7893      	ldrb	r3, [r2, #2]
		return -EINVAL;
	}

	if (dns_header_qr(dns_header) != DNS_RESPONSE) {
 801a096:	09d8      	lsrs	r0, r3, #7
 801a098:	d01c      	beq.n	801a0d4 <dns_unpack_response_header+0x52>
	return ((*(header + 2)) & 0x70) >> 1;
 801a09a:	105b      	asrs	r3, r3, #1
		return -EINVAL;
	}

	if (dns_header_opcode(dns_header) != DNS_QUERY) {
 801a09c:	f013 0f38 	tst.w	r3, #56	; 0x38
 801a0a0:	d118      	bne.n	801a0d4 <dns_unpack_response_header+0x52>
	return ((*(header + 3)) & 0x70) >> 4;
 801a0a2:	78d3      	ldrb	r3, [r2, #3]
		return -EINVAL;
	}

	if (dns_header_z(dns_header) != 0) {
 801a0a4:	f013 0f70 	tst.w	r3, #112	; 0x70
 801a0a8:	f3c3 1002 	ubfx	r0, r3, #4, #3
 801a0ac:	d112      	bne.n	801a0d4 <dns_unpack_response_header+0x52>
		return -EINVAL;
	}

	rc = dns_header_rcode(dns_header);
	switch (rc) {
 801a0ae:	f013 030f 	ands.w	r3, r3, #15
 801a0b2:	d001      	beq.n	801a0b8 <dns_unpack_response_header+0x36>
	return ((*(header + 3)) & 0x0F);
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	4770      	bx	lr
	return ntohs(UNALIGNED_GET((uint16_t *)(header + 6)));
 801a0b8:	88d3      	ldrh	r3, [r2, #6]
	ancount = dns_unpack_header_ancount(dns_header);

	/* For mDNS (when src_id == 0) the query count is 0 so accept
	 * the packet in that case.
	 */
	if ((qdcount < 1 && src_id > 0) || ancount < 1) {
 801a0ba:	8892      	ldrh	r2, [r2, #4]
 801a0bc:	ba5b      	rev16	r3, r3
 801a0be:	b29b      	uxth	r3, r3
 801a0c0:	b902      	cbnz	r2, 801a0c4 <dns_unpack_response_header+0x42>
 801a0c2:	b939      	cbnz	r1, 801a0d4 <dns_unpack_response_header+0x52>
		return -EINVAL;
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	bf08      	it	eq
 801a0c8:	f06f 0015 	mvneq.w	r0, #21
 801a0cc:	4770      	bx	lr
		return -ENOMEM;
 801a0ce:	f06f 000b 	mvn.w	r0, #11
 801a0d2:	4770      	bx	lr
		return -EINVAL;
 801a0d4:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	return 0;
}
 801a0d8:	4770      	bx	lr

0801a0da <dns_msg_pack_query>:
}

int dns_msg_pack_query(uint8_t *buf, uint16_t *len, uint16_t size,
		       uint8_t *qname, uint16_t qname_len, uint16_t id,
		       enum dns_rr_type qtype)
{
 801a0da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0de:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801a0e2:	460f      	mov	r7, r1
 801a0e4:	4604      	mov	r4, r0
 801a0e6:	4619      	mov	r1, r3
	uint16_t msg_size;
	uint16_t offset;
	int rc;

	msg_size = DNS_MSG_HEADER_SIZE + DNS_QTYPE_LEN + DNS_QCLASS_LEN;
	if (msg_size + qname_len > size) {
 801a0e8:	f106 0810 	add.w	r8, r6, #16
 801a0ec:	4590      	cmp	r8, r2
 801a0ee:	dc2a      	bgt.n	801a146 <dns_msg_pack_query+0x6c>
	if (size < DNS_MSG_HEADER_SIZE) {
 801a0f0:	2a0b      	cmp	r2, #11
 801a0f2:	d928      	bls.n	801a146 <dns_msg_pack_query+0x6c>
	UNALIGNED_PUT(htons(id), (uint16_t *)(buf));
 801a0f4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801a0f8:	ba5b      	rev16	r3, r3
 801a0fa:	8003      	strh	r3, [r0, #0]
	*(buf + offset) = DNS_FLAGS1;		/* QR, Opcode, AA, TC and RD */
 801a0fc:	f04f 0901 	mov.w	r9, #1
	*(buf + offset + 1) = DNS_FLAGS2;	/* RA, Z and RCODE */
 801a100:	2500      	movs	r5, #0
	*(buf + offset) = DNS_FLAGS1;		/* QR, Opcode, AA, TC and RD */
 801a102:	f880 9002 	strb.w	r9, [r0, #2]
	*(buf + offset + 1) = DNS_FLAGS2;	/* RA, Z and RCODE */
 801a106:	70c5      	strb	r5, [r0, #3]
	UNALIGNED_PUT(htons(1), (uint16_t *)(buf + offset));
 801a108:	7105      	strb	r5, [r0, #4]
 801a10a:	f880 9005 	strb.w	r9, [r0, #5]
	UNALIGNED_PUT(0, (uint32_t *)(buf + offset));
 801a10e:	7185      	strb	r5, [r0, #6]
 801a110:	71c5      	strb	r5, [r0, #7]
 801a112:	7205      	strb	r5, [r0, #8]
 801a114:	7245      	strb	r5, [r0, #9]
	UNALIGNED_PUT(0, (uint16_t *)(buf + offset));
 801a116:	7285      	strb	r5, [r0, #10]
 801a118:	72c5      	strb	r5, [r0, #11]
	if (rc != 0) {
		return rc;
	}

	offset = DNS_MSG_HEADER_SIZE;
	memcpy(buf + offset, qname, qname_len);
 801a11a:	4632      	mov	r2, r6
 801a11c:	300c      	adds	r0, #12
 801a11e:	f7fa fdaa 	bl	8014c76 <memcpy>

	offset += qname_len;
 801a122:	f106 030c 	add.w	r3, r6, #12

	/* QType */
	UNALIGNED_PUT(htons(qtype), (uint16_t *)(buf + offset + 0));
 801a126:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 801a12a:	b29b      	uxth	r3, r3
 801a12c:	0212      	lsls	r2, r2, #8
 801a12e:	52e2      	strh	r2, [r4, r3]
	offset += DNS_QTYPE_LEN;
 801a130:	360e      	adds	r6, #14

	/* QClass */
	UNALIGNED_PUT(htons(DNS_CLASS_IN), (uint16_t *)(buf + offset));
 801a132:	b2b6      	uxth	r6, r6
 801a134:	55a5      	strb	r5, [r4, r6]
 801a136:	4434      	add	r4, r6
 801a138:	f884 9001 	strb.w	r9, [r4, #1]

	*len = offset + DNS_QCLASS_LEN;

	return 0;
 801a13c:	4628      	mov	r0, r5
	*len = offset + DNS_QCLASS_LEN;
 801a13e:	f8a7 8000 	strh.w	r8, [r7]
}
 801a142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOMEM;
 801a146:	f06f 000b 	mvn.w	r0, #11
 801a14a:	e7fa      	b.n	801a142 <dns_msg_pack_query+0x68>

0801a14c <dns_unpack_response_query>:

	return -ENOMEM;
}

int dns_unpack_response_query(struct dns_msg_t *dns_msg)
{
 801a14c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int offset;
	int rc;

	dns_msg->query_offset = DNS_MSG_HEADER_SIZE;
	dns_query = dns_msg->msg + dns_msg->query_offset;
	remaining_size = dns_msg->msg_size - dns_msg->query_offset;
 801a14e:	8a05      	ldrh	r5, [r0, #16]
	dns_msg->query_offset = DNS_MSG_HEADER_SIZE;
 801a150:	230c      	movs	r3, #12
	dns_query = dns_msg->msg + dns_msg->query_offset;
 801a152:	6801      	ldr	r1, [r0, #0]

	rc = dns_find_null(&qname_size, dns_query, remaining_size);
 801a154:	f1a5 040c 	sub.w	r4, r5, #12
	dns_msg->query_offset = DNS_MSG_HEADER_SIZE;
 801a158:	8183      	strh	r3, [r0, #12]
	rc = dns_find_null(&qname_size, dns_query, remaining_size);
 801a15a:	f101 060b 	add.w	r6, r1, #11
	*qname_size = 0;
 801a15e:	2300      	movs	r3, #0
	rc = dns_find_null(&qname_size, dns_query, remaining_size);
 801a160:	b2a4      	uxth	r4, r4
	while (*qname_size < size) {
 801a162:	429c      	cmp	r4, r3
 801a164:	dc02      	bgt.n	801a16c <dns_unpack_response_query+0x20>
	return -ENOMEM;
 801a166:	f06f 000b 	mvn.w	r0, #11
 801a16a:	e01c      	b.n	801a1a6 <dns_unpack_response_query+0x5a>
		if (buf[(*qname_size)++] == 0x00) {
 801a16c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 801a170:	1c5a      	adds	r2, r3, #1
 801a172:	b127      	cbz	r7, 801a17e <dns_unpack_response_query+0x32>
 801a174:	4613      	mov	r3, r2
 801a176:	e7f4      	b.n	801a162 <dns_unpack_response_query+0x16>
	}

	buf = dns_query + qname_size;
	if (dns_unpack_query_qtype(buf) != DNS_RR_TYPE_A &&
	    dns_unpack_query_qtype(buf) != DNS_RR_TYPE_AAAA) {
		return -EINVAL;
 801a178:	f06f 0015 	mvn.w	r0, #21
 801a17c:	e013      	b.n	801a1a6 <dns_unpack_response_query+0x5a>
	offset += DNS_QTYPE_LEN + DNS_QCLASS_LEN;
 801a17e:	f103 0411 	add.w	r4, r3, #17
	if (offset >= dns_msg->msg_size) {
 801a182:	42a5      	cmp	r5, r4
 801a184:	ddef      	ble.n	801a166 <dns_unpack_response_query+0x1a>
	buf = dns_query + qname_size;
 801a186:	330d      	adds	r3, #13
 801a188:	18cc      	adds	r4, r1, r3
	return ntohs(UNALIGNED_GET((uint16_t *)(question + 0)));
 801a18a:	5acb      	ldrh	r3, [r1, r3]
 801a18c:	ba5b      	rev16	r3, r3
 801a18e:	b29b      	uxth	r3, r3
	if (dns_unpack_query_qtype(buf) != DNS_RR_TYPE_A &&
 801a190:	2b01      	cmp	r3, #1
 801a192:	d001      	beq.n	801a198 <dns_unpack_response_query+0x4c>
 801a194:	2b1c      	cmp	r3, #28
 801a196:	d1ef      	bne.n	801a178 <dns_unpack_response_query+0x2c>
	}

	if (dns_unpack_query_qclass(buf) != DNS_CLASS_IN) {
 801a198:	8863      	ldrh	r3, [r4, #2]
 801a19a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a19e:	d1eb      	bne.n	801a178 <dns_unpack_response_query+0x2c>
		return -EINVAL;
	}

	dns_msg->answer_offset = dns_msg->query_offset + qname_size +
				 DNS_QTYPE_LEN + DNS_QCLASS_LEN;
 801a1a0:	3210      	adds	r2, #16
	dns_msg->answer_offset = dns_msg->query_offset + qname_size +
 801a1a2:	81c2      	strh	r2, [r0, #14]

	return 0;
 801a1a4:	2000      	movs	r0, #0
}
 801a1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a1a8 <dns_copy_qname>:

int dns_copy_qname(uint8_t *buf, uint16_t *len, uint16_t size,
		   struct dns_msg_t *dns_msg, uint16_t pos)
{
 801a1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1ac:	4607      	mov	r7, r0
	uint16_t msg_size = dns_msg->msg_size;
 801a1ae:	f8b3 a010 	ldrh.w	sl, [r3, #16]
	uint8_t *msg = dns_msg->msg;
 801a1b2:	f8d3 8000 	ldr.w	r8, [r3]
{
 801a1b6:	460e      	mov	r6, r1
	uint16_t lb_size;
	int rc = -EINVAL;

	*len = 0U;
 801a1b8:	2300      	movs	r3, #0
{
 801a1ba:	4691      	mov	r9, r2
 801a1bc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	*len = 0U;
 801a1c0:	800b      	strh	r3, [r1, #0]

	while (1) {
		if (pos >= msg_size) {
 801a1c2:	4554      	cmp	r4, sl
 801a1c4:	d225      	bcs.n	801a212 <dns_copy_qname+0x6a>
			rc = -ENOMEM;
			break;
		}

		lb_size = msg[pos];
 801a1c6:	f818 2004 	ldrb.w	r2, [r8, r4]
 801a1ca:	eb08 0104 	add.w	r1, r8, r4

		/* pointer */
		if (lb_size > DNS_LABEL_MAX_SIZE) {
 801a1ce:	2a3f      	cmp	r2, #63	; 0x3f
		lb_size = msg[pos];
 801a1d0:	4615      	mov	r5, r2
		if (lb_size > DNS_LABEL_MAX_SIZE) {
 801a1d2:	d908      	bls.n	801a1e6 <dns_copy_qname+0x3e>
			uint8_t mask = DNS_LABEL_MAX_SIZE;

			if (pos + 1 >= msg_size) {
 801a1d4:	3401      	adds	r4, #1
 801a1d6:	4554      	cmp	r4, sl
 801a1d8:	da1b      	bge.n	801a212 <dns_copy_qname+0x6a>
				rc = -ENOMEM;
				break;
			}

			/* See: RFC 1035, 4.1.4. Message compression */
			pos = ((msg[pos] & mask) << 8) + msg[pos + 1];
 801a1da:	784c      	ldrb	r4, [r1, #1]
 801a1dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801a1e0:	eb04 2402 	add.w	r4, r4, r2, lsl #8

			continue;
 801a1e4:	e7ed      	b.n	801a1c2 <dns_copy_qname+0x1a>
		}

		/* validate that the label (i.e. size + elements),
		 * fits the current msg buffer
		 */
		if (DNS_LABEL_LEN_SIZE + lb_size > size - *len) {
 801a1e6:	8830      	ldrh	r0, [r6, #0]
 801a1e8:	eba9 0300 	sub.w	r3, r9, r0
 801a1ec:	429a      	cmp	r2, r3
 801a1ee:	da10      	bge.n	801a212 <dns_copy_qname+0x6a>
			rc = -ENOMEM;
			break;
		}

		/* copy the lb_size value and label elements */
		memcpy(buf + *len, msg + pos, DNS_LABEL_LEN_SIZE + lb_size);
 801a1f0:	3201      	adds	r2, #1
 801a1f2:	4438      	add	r0, r7
 801a1f4:	f7fa fd3f 	bl	8014c76 <memcpy>
		/* update destination buffer len */
		*len += DNS_LABEL_LEN_SIZE + lb_size;
 801a1f8:	8833      	ldrh	r3, [r6, #0]
 801a1fa:	3401      	adds	r4, #1
 801a1fc:	3301      	adds	r3, #1
		/* update msg ptr position */
		pos += DNS_LABEL_LEN_SIZE + lb_size;
 801a1fe:	fa15 f484 	uxtah	r4, r5, r4
		*len += DNS_LABEL_LEN_SIZE + lb_size;
 801a202:	442b      	add	r3, r5
		pos += DNS_LABEL_LEN_SIZE + lb_size;
 801a204:	b2a4      	uxth	r4, r4
		*len += DNS_LABEL_LEN_SIZE + lb_size;
 801a206:	8033      	strh	r3, [r6, #0]

		/* The domain name terminates with the zero length octet
		 * for the null label of the root
		 */
		if (lb_size == 0U) {
 801a208:	2d00      	cmp	r5, #0
 801a20a:	d1da      	bne.n	801a1c2 <dns_copy_qname+0x1a>
			rc = 0;
 801a20c:	4628      	mov	r0, r5
			break;
		}
	}

	return rc;
}
 801a20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rc = -ENOMEM;
 801a212:	f06f 000b 	mvn.w	r0, #11
	return rc;
 801a216:	e7fa      	b.n	801a20e <dns_copy_qname+0x66>

0801a218 <net_ipv4_is_addr_mcast>:
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 801a218:	6800      	ldr	r0, [r0, #0]
 801a21a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 801a21e:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
 801a222:	4258      	negs	r0, r3
 801a224:	4158      	adcs	r0, r3
 801a226:	4770      	bx	lr

0801a228 <invoke_query_callback>:
	if (pending_query->query != NULL && pending_query->cb != NULL)  {
 801a228:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801a22a:	b123      	cbz	r3, 801a236 <invoke_query_callback+0xe>
 801a22c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801a22e:	b113      	cbz	r3, 801a236 <invoke_query_callback+0xe>
		pending_query->cb(status, info, pending_query->user_data);
 801a230:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801a232:	b240      	sxtb	r0, r0
 801a234:	4718      	bx	r3
}
 801a236:	4770      	bx	lr

0801a238 <get_slot_by_id>:
{
 801a238:	4603      	mov	r3, r0
 801a23a:	4610      	mov	r0, r2
		if (check_query_active(&ctx->queries[i], false) &&
 801a23c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801a23e:	b162      	cbz	r2, 801a25a <get_slot_by_id+0x22>
 801a240:	f8b3 208e 	ldrh.w	r2, [r3, #142]	; 0x8e
 801a244:	428a      	cmp	r2, r1
 801a246:	d108      	bne.n	801a25a <get_slot_by_id+0x22>
		    ctx->queries[i].id == dns_id &&
 801a248:	b148      	cbz	r0, 801a25e <get_slot_by_id+0x26>
		    (query_hash == 0 ||
 801a24a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 801a24e:	4283      	cmp	r3, r0
 801a250:	bf14      	ite	ne
 801a252:	f06f 0001 	mvnne.w	r0, #1
 801a256:	2000      	moveq	r0, #0
 801a258:	4770      	bx	lr
	return -ENOENT;
 801a25a:	f06f 0001 	mvn.w	r0, #1
}
 801a25e:	4770      	bx	lr

0801a260 <k_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
 801a260:	f7f7 bde2 	b.w	8011e28 <z_impl_k_mutex_lock>

0801a264 <release_query>:
{
 801a264:	b510      	push	{r4, lr}
 801a266:	4604      	mov	r4, r0
	int busy = k_work_cancel_delayable(&pending_query->timer);
 801a268:	f001 fc5a 	bl	801bb20 <k_work_cancel_delayable>
	if (busy == 0) {
 801a26c:	b908      	cbnz	r0, 801a272 <release_query+0xe>
		pending_query->cb = NULL;
 801a26e:	6360      	str	r0, [r4, #52]	; 0x34
}
 801a270:	bd10      	pop	{r4, pc}
		pending_query->query = NULL;
 801a272:	2300      	movs	r3, #0
 801a274:	64a3      	str	r3, [r4, #72]	; 0x48
}
 801a276:	e7fb      	b.n	801a270 <release_query+0xc>

0801a278 <dns_server_exists>:
{
 801a278:	b508      	push	{r3, lr}
		if (IS_ENABLED(CONFIG_NET_IPV4) && (addr->sa_family == AF_INET) &&
 801a27a:	880a      	ldrh	r2, [r1, #0]
{
 801a27c:	460b      	mov	r3, r1
		if (IS_ENABLED(CONFIG_NET_IPV4) && (addr->sa_family == AF_INET) &&
 801a27e:	2a01      	cmp	r2, #1
 801a280:	d108      	bne.n	801a294 <dns_server_exists+0x1c>
 801a282:	8802      	ldrh	r2, [r0, #0]
 801a284:	2a01      	cmp	r2, #1
 801a286:	d113      	bne.n	801a2b0 <dns_server_exists+0x38>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 801a288:	6840      	ldr	r0, [r0, #4]
 801a28a:	684b      	ldr	r3, [r1, #4]
			if (net_ipv4_addr_cmp(&net_sin(addr)->sin_addr,
 801a28c:	1ac3      	subs	r3, r0, r3
 801a28e:	4258      	negs	r0, r3
 801a290:	4158      	adcs	r0, r3
}
 801a292:	bd08      	pop	{r3, pc}
		if (IS_ENABLED(CONFIG_NET_IPV6) && (addr->sa_family == AF_INET6) &&
 801a294:	2a02      	cmp	r2, #2
 801a296:	d10b      	bne.n	801a2b0 <dns_server_exists+0x38>
 801a298:	8802      	ldrh	r2, [r0, #0]
 801a29a:	2a02      	cmp	r2, #2
 801a29c:	d108      	bne.n	801a2b0 <dns_server_exists+0x38>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 801a29e:	1d01      	adds	r1, r0, #4
 801a2a0:	2210      	movs	r2, #16
 801a2a2:	1d18      	adds	r0, r3, #4
 801a2a4:	f7fa fcbe 	bl	8014c24 <memcmp>
			if (net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
 801a2a8:	fab0 f080 	clz	r0, r0
 801a2ac:	0940      	lsrs	r0, r0, #5
 801a2ae:	e7f0      	b.n	801a292 <dns_server_exists+0x1a>
	return false;
 801a2b0:	2000      	movs	r0, #0
 801a2b2:	e7ee      	b.n	801a292 <dns_server_exists+0x1a>

0801a2b4 <dns_postprocess_server>:
{
 801a2b4:	b538      	push	{r3, r4, r5, lr}
	struct sockaddr *addr = &ctx->servers[idx].dns_server;
 801a2b6:	014c      	lsls	r4, r1, #5
{
 801a2b8:	4602      	mov	r2, r0
	struct sockaddr *addr = &ctx->servers[idx].dns_server;
 801a2ba:	eb00 1141 	add.w	r1, r0, r1, lsl #5
	if (addr->sa_family == AF_INET) {
 801a2be:	5b03      	ldrh	r3, [r0, r4]
 801a2c0:	2b01      	cmp	r3, #1
 801a2c2:	d125      	bne.n	801a310 <dns_postprocess_server+0x5c>
		if (net_ipv4_is_addr_mcast(&net_sin(addr)->sin_addr) &&
 801a2c4:	1d0d      	adds	r5, r1, #4
 801a2c6:	4628      	mov	r0, r5
 801a2c8:	f7ff ffa6 	bl	801a218 <net_ipv4_is_addr_mcast>
 801a2cc:	b138      	cbz	r0, 801a2de <dns_postprocess_server+0x2a>
 801a2ce:	79cb      	ldrb	r3, [r1, #7]
 801a2d0:	2bfb      	cmp	r3, #251	; 0xfb
 801a2d2:	d104      	bne.n	801a2de <dns_postprocess_server+0x2a>
		ctx->servers[idx].is_mdns = server_is_mdns(AF_INET6, addr);
 801a2d4:	7f0b      	ldrb	r3, [r1, #28]
 801a2d6:	f043 0301 	orr.w	r3, r3, #1
 801a2da:	770b      	strb	r3, [r1, #28]
		if (!ctx->servers[idx].is_mdns) {
 801a2dc:	e012      	b.n	801a304 <dns_postprocess_server+0x50>
		ctx->servers[idx].is_mdns = server_is_mdns(AF_INET, addr);
 801a2de:	1913      	adds	r3, r2, r4
 801a2e0:	7f18      	ldrb	r0, [r3, #28]
 801a2e2:	f36f 0000 	bfc	r0, #0, #1
 801a2e6:	7718      	strb	r0, [r3, #28]
		if (net_ipv4_is_addr_mcast(&net_sin(addr)->sin_addr) &&
 801a2e8:	4628      	mov	r0, r5
 801a2ea:	f7ff ff95 	bl	801a218 <net_ipv4_is_addr_mcast>
 801a2ee:	b120      	cbz	r0, 801a2fa <dns_postprocess_server+0x46>
 801a2f0:	79c8      	ldrb	r0, [r1, #7]
 801a2f2:	f1a0 05fc 	sub.w	r5, r0, #252	; 0xfc
 801a2f6:	4268      	negs	r0, r5
 801a2f8:	4168      	adcs	r0, r5
			ctx->servers[idx].is_llmnr =
 801a2fa:	4422      	add	r2, r4
 801a2fc:	7f13      	ldrb	r3, [r2, #28]
 801a2fe:	f360 0341 	bfi	r3, r0, #1, #1
 801a302:	7713      	strb	r3, [r2, #28]
		if (net_sin6(addr)->sin6_port == 0U) {
 801a304:	884b      	ldrh	r3, [r1, #2]
 801a306:	b913      	cbnz	r3, 801a30e <dns_postprocess_server+0x5a>
				net_sin6(addr)->sin6_port = htons(53);
 801a308:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 801a30c:	804b      	strh	r3, [r1, #2]
}
 801a30e:	bd38      	pop	{r3, r4, r5, pc}
		if (net_ipv6_is_addr_mcast(&net_sin6(addr)->sin6_addr) &&
 801a310:	790b      	ldrb	r3, [r1, #4]
 801a312:	2bff      	cmp	r3, #255	; 0xff
 801a314:	d102      	bne.n	801a31c <dns_postprocess_server+0x68>
 801a316:	7ccb      	ldrb	r3, [r1, #19]
 801a318:	2bfb      	cmp	r3, #251	; 0xfb
 801a31a:	d0db      	beq.n	801a2d4 <dns_postprocess_server+0x20>
		ctx->servers[idx].is_mdns = server_is_mdns(AF_INET6, addr);
 801a31c:	1913      	adds	r3, r2, r4
 801a31e:	7f18      	ldrb	r0, [r3, #28]
 801a320:	f36f 0000 	bfc	r0, #0, #1
 801a324:	7718      	strb	r0, [r3, #28]
		if (net_ipv6_is_addr_mcast(&net_sin6(addr)->sin6_addr) &&
 801a326:	790b      	ldrb	r3, [r1, #4]
 801a328:	2bff      	cmp	r3, #255	; 0xff
 801a32a:	d006      	beq.n	801a33a <dns_postprocess_server+0x86>
		return false;
 801a32c:	2300      	movs	r3, #0
			ctx->servers[idx].is_llmnr =
 801a32e:	4422      	add	r2, r4
 801a330:	7f10      	ldrb	r0, [r2, #28]
 801a332:	f363 0041 	bfi	r0, r3, #1, #1
 801a336:	7710      	strb	r0, [r2, #28]
 801a338:	e7e4      	b.n	801a304 <dns_postprocess_server+0x50>
		if (net_ipv6_is_addr_mcast(&net_sin6(addr)->sin6_addr) &&
 801a33a:	7ccb      	ldrb	r3, [r1, #19]
 801a33c:	1ed8      	subs	r0, r3, #3
 801a33e:	4243      	negs	r3, r0
 801a340:	4143      	adcs	r3, r0
 801a342:	e7f4      	b.n	801a32e <dns_postprocess_server+0x7a>

0801a344 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 801a344:	f7f7 bdea 	b.w	8011f1c <z_impl_k_mutex_unlock>

0801a348 <dns_resolve_cancel_with_hash.constprop.0>:
static int dns_resolve_cancel_with_hash(struct dns_resolve_context *ctx,
 801a348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	k_mutex_lock(&ctx->lock, K_FOREVER);
 801a34a:	f100 0620 	add.w	r6, r0, #32
static int dns_resolve_cancel_with_hash(struct dns_resolve_context *ctx,
 801a34e:	4604      	mov	r4, r0
	k_mutex_lock(&ctx->lock, K_FOREVER);
 801a350:	f04f 33ff 	mov.w	r3, #4294967295
static int dns_resolve_cancel_with_hash(struct dns_resolve_context *ctx,
 801a354:	4617      	mov	r7, r2
	k_mutex_lock(&ctx->lock, K_FOREVER);
 801a356:	4630      	mov	r0, r6
 801a358:	f04f 32ff 	mov.w	r2, #4294967295
static int dns_resolve_cancel_with_hash(struct dns_resolve_context *ctx,
 801a35c:	460d      	mov	r5, r1
	k_mutex_lock(&ctx->lock, K_FOREVER);
 801a35e:	f7ff ff7f 	bl	801a260 <k_mutex_lock>
	if (ctx->state == DNS_RESOLVE_CONTEXT_DEACTIVATING) {
 801a362:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 801a366:	2b01      	cmp	r3, #1
 801a368:	d013      	beq.n	801a392 <dns_resolve_cancel_with_hash.constprop.0+0x4a>
	i = get_slot_by_id(ctx, dns_id, query_hash);
 801a36a:	463a      	mov	r2, r7
 801a36c:	4629      	mov	r1, r5
 801a36e:	4620      	mov	r0, r4
 801a370:	f7ff ff62 	bl	801a238 <get_slot_by_id>
	if (i < 0) {
 801a374:	2800      	cmp	r0, #0
 801a376:	db12      	blt.n	801a39e <dns_resolve_cancel_with_hash.constprop.0+0x56>
	invoke_query_callback(DNS_EAI_CANCELED, NULL, &ctx->queries[slot]);
 801a378:	2258      	movs	r2, #88	; 0x58
 801a37a:	2100      	movs	r1, #0
 801a37c:	fb02 4400 	mla	r4, r2, r0, r4
 801a380:	f06f 0064 	mvn.w	r0, #100	; 0x64
 801a384:	3440      	adds	r4, #64	; 0x40
 801a386:	4622      	mov	r2, r4
 801a388:	f7ff ff4e 	bl	801a228 <invoke_query_callback>
	release_query(&ctx->queries[slot]);
 801a38c:	4620      	mov	r0, r4
 801a38e:	f7ff ff69 	bl	801a264 <release_query>
	int ret = 0;
 801a392:	2400      	movs	r4, #0
	k_mutex_unlock(&ctx->lock);
 801a394:	4630      	mov	r0, r6
 801a396:	f7ff ffd5 	bl	801a344 <k_mutex_unlock.isra.0>
}
 801a39a:	4620      	mov	r0, r4
 801a39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = -ENOENT;
 801a39e:	f06f 0401 	mvn.w	r4, #1
 801a3a2:	e7f7      	b.n	801a394 <dns_resolve_cancel_with_hash.constprop.0+0x4c>

0801a3a4 <query_timeout>:
{
 801a3a4:	b510      	push	{r4, lr}
 801a3a6:	4604      	mov	r4, r0
	ret = k_mutex_lock(&pending_query->ctx->lock, K_NO_WAIT);
 801a3a8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	3020      	adds	r0, #32
 801a3b0:	f7ff ff56 	bl	801a260 <k_mutex_lock>
	if (ret != 0) {
 801a3b4:	b130      	cbz	r0, 801a3c4 <query_timeout+0x20>
		k_work_reschedule(dwork, K_MSEC(10));
 801a3b6:	4620      	mov	r0, r4
 801a3b8:	2264      	movs	r2, #100	; 0x64
 801a3ba:	2300      	movs	r3, #0
}
 801a3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(dwork, K_MSEC(10));
 801a3c0:	f7f8 b82c 	b.w	801241c <k_work_reschedule>
	(void)dns_resolve_cancel_with_hash(pending_query->ctx,
 801a3c4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 801a3c8:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801a3cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a3ce:	f7ff ffbb 	bl	801a348 <dns_resolve_cancel_with_hash.constprop.0>
	k_mutex_unlock(&pending_query->ctx->lock);
 801a3d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 801a3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&pending_query->ctx->lock);
 801a3d8:	3020      	adds	r0, #32
 801a3da:	f7ff bfb3 	b.w	801a344 <k_mutex_unlock.isra.0>

0801a3de <dns_resolve_init>:
{
 801a3de:	b570      	push	{r4, r5, r6, lr}
 801a3e0:	460d      	mov	r5, r1
 801a3e2:	4616      	mov	r6, r2
	if (!ctx) {
 801a3e4:	4604      	mov	r4, r0
 801a3e6:	b188      	cbz	r0, 801a40c <dns_resolve_init+0x2e>
	(void)memset(ctx, 0, sizeof(*ctx));
 801a3e8:	22a0      	movs	r2, #160	; 0xa0
 801a3ea:	2100      	movs	r1, #0
 801a3ec:	f7fa fc4e 	bl	8014c8c <memset>
	return z_impl_k_mutex_init(mutex);
 801a3f0:	f104 0020 	add.w	r0, r4, #32
 801a3f4:	f001 fa19 	bl	801b82a <z_impl_k_mutex_init>
	ctx->state = DNS_RESOLVE_CONTEXT_INACTIVE;
 801a3f8:	2302      	movs	r3, #2
	return dns_resolve_init_locked(ctx, servers, servers_sa);
 801a3fa:	4632      	mov	r2, r6
 801a3fc:	4629      	mov	r1, r5
 801a3fe:	4620      	mov	r0, r4
	ctx->state = DNS_RESOLVE_CONTEXT_INACTIVE;
 801a400:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
}
 801a404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_resolve_init_locked(ctx, servers, servers_sa);
 801a408:	f7f4 b86e 	b.w	800e4e8 <dns_resolve_init_locked>
}
 801a40c:	f06f 0001 	mvn.w	r0, #1
 801a410:	bd70      	pop	{r4, r5, r6, pc}

0801a412 <dns_resolve_cancel>:
	return dns_resolve_cancel_with_hash(ctx, dns_id, query_hash,
 801a412:	2200      	movs	r2, #0
 801a414:	f7ff bf98 	b.w	801a348 <dns_resolve_cancel_with_hash.constprop.0>

0801a418 <dns_resolve_reconfigure>:
{
 801a418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a41c:	460e      	mov	r6, r1
 801a41e:	b086      	sub	sp, #24
 801a420:	4617      	mov	r7, r2
	if (!ctx) {
 801a422:	4604      	mov	r4, r0
 801a424:	2800      	cmp	r0, #0
 801a426:	d03d      	beq.n	801a4a4 <dns_resolve_reconfigure+0x8c>
	k_mutex_lock(&ctx->lock, K_FOREVER);
 801a428:	f100 0820 	add.w	r8, r0, #32
 801a42c:	f04f 32ff 	mov.w	r2, #4294967295
 801a430:	f04f 33ff 	mov.w	r3, #4294967295
 801a434:	4640      	mov	r0, r8
 801a436:	f7ff ff13 	bl	801a260 <k_mutex_lock>
	if (servers) {
 801a43a:	b946      	cbnz	r6, 801a44e <dns_resolve_reconfigure+0x36>
	if (servers_sa) {
 801a43c:	bb37      	cbnz	r7, 801a48c <dns_resolve_reconfigure+0x74>
		err = 0;
 801a43e:	2500      	movs	r5, #0
	k_mutex_unlock(&ctx->lock);
 801a440:	4640      	mov	r0, r8
 801a442:	f7ff ff7f 	bl	801a344 <k_mutex_unlock.isra.0>
}
 801a446:	4628      	mov	r0, r5
 801a448:	b006      	add	sp, #24
 801a44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (int i = 0; i < SERVER_COUNT && servers[i]; i++) {
 801a44e:	6835      	ldr	r5, [r6, #0]
 801a450:	2d00      	cmp	r5, #0
 801a452:	d0f3      	beq.n	801a43c <dns_resolve_reconfigure+0x24>
			if (!net_ipaddr_parse(servers[i], strlen(servers[i]), &addr)) {
 801a454:	4628      	mov	r0, r5
 801a456:	f7fa fbc1 	bl	8014bdc <strlen>
 801a45a:	466a      	mov	r2, sp
 801a45c:	4601      	mov	r1, r0
 801a45e:	4628      	mov	r0, r5
 801a460:	f7fc f8ef 	bl	8016642 <net_ipaddr_parse>
 801a464:	2800      	cmp	r0, #0
 801a466:	d0e9      	beq.n	801a43c <dns_resolve_reconfigure+0x24>
			if (!dns_server_exists(ctx, &addr)) {
 801a468:	4669      	mov	r1, sp
 801a46a:	4620      	mov	r0, r4
 801a46c:	f7ff ff04 	bl	801a278 <dns_server_exists>
 801a470:	2800      	cmp	r0, #0
 801a472:	d1e3      	bne.n	801a43c <dns_resolve_reconfigure+0x24>
	if (ctx->state == DNS_RESOLVE_CONTEXT_DEACTIVATING) {
 801a474:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
 801a478:	2901      	cmp	r1, #1
 801a47a:	d010      	beq.n	801a49e <dns_resolve_reconfigure+0x86>
	if (ctx->state == DNS_RESOLVE_CONTEXT_ACTIVE) {
 801a47c:	b1a9      	cbz	r1, 801a4aa <dns_resolve_reconfigure+0x92>
	err = dns_resolve_init_locked(ctx, servers, servers_sa);
 801a47e:	463a      	mov	r2, r7
 801a480:	4631      	mov	r1, r6
 801a482:	4620      	mov	r0, r4
 801a484:	f7f4 f830 	bl	800e4e8 <dns_resolve_init_locked>
 801a488:	4605      	mov	r5, r0
 801a48a:	e7d9      	b.n	801a440 <dns_resolve_reconfigure+0x28>
		for (int i = 0; i < SERVER_COUNT && servers_sa[i]; i++) {
 801a48c:	6839      	ldr	r1, [r7, #0]
 801a48e:	2900      	cmp	r1, #0
 801a490:	d0d5      	beq.n	801a43e <dns_resolve_reconfigure+0x26>
			if (!dns_server_exists(ctx, servers_sa[i])) {
 801a492:	4620      	mov	r0, r4
 801a494:	f7ff fef0 	bl	801a278 <dns_server_exists>
 801a498:	2800      	cmp	r0, #0
 801a49a:	d0eb      	beq.n	801a474 <dns_resolve_reconfigure+0x5c>
 801a49c:	e7cf      	b.n	801a43e <dns_resolve_reconfigure+0x26>
		err = -EBUSY;
 801a49e:	f06f 050f 	mvn.w	r5, #15
 801a4a2:	e7cd      	b.n	801a440 <dns_resolve_reconfigure+0x28>
		return -ENOENT;
 801a4a4:	f06f 0501 	mvn.w	r5, #1
 801a4a8:	e7cd      	b.n	801a446 <dns_resolve_reconfigure+0x2e>
		if (ctx->queries[i].cb && ctx->queries[i].query) {
 801a4aa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801a4ac:	b163      	cbz	r3, 801a4c8 <dns_resolve_reconfigure+0xb0>
 801a4ae:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 801a4b2:	b14b      	cbz	r3, 801a4c8 <dns_resolve_reconfigure+0xb0>
	invoke_query_callback(DNS_EAI_CANCELED, NULL, &ctx->queries[slot]);
 801a4b4:	f104 0540 	add.w	r5, r4, #64	; 0x40
 801a4b8:	f06f 0064 	mvn.w	r0, #100	; 0x64
 801a4bc:	462a      	mov	r2, r5
 801a4be:	f7ff feb3 	bl	801a228 <invoke_query_callback>
	release_query(&ctx->queries[slot]);
 801a4c2:	4628      	mov	r0, r5
 801a4c4:	f7ff fece 	bl	801a264 <release_query>
		err = dns_resolve_close_locked(ctx);
 801a4c8:	4620      	mov	r0, r4
 801a4ca:	f7f4 f885 	bl	800e5d8 <dns_resolve_close_locked>
		if (err) {
 801a4ce:	4605      	mov	r5, r0
 801a4d0:	2800      	cmp	r0, #0
 801a4d2:	d0d4      	beq.n	801a47e <dns_resolve_reconfigure+0x66>
 801a4d4:	e7b4      	b.n	801a440 <dns_resolve_reconfigure+0x28>

0801a4d6 <stm32_exti_init>:
{
 801a4d6:	b508      	push	{r3, lr}
	DT_FOREACH_PROP_ELEM(DT_NODELABEL(exti),
 801a4d8:	2206      	movs	r2, #6
 801a4da:	2101      	movs	r1, #1
 801a4dc:	2000      	movs	r0, #0
 801a4de:	f7f4 fc1f 	bl	800ed20 <stm32_fill_irq_table>
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	2006      	movs	r0, #6
 801a4e6:	4611      	mov	r1, r2
 801a4e8:	f7e9 fa80 	bl	80039ec <z_arm_irq_priority_set>
 801a4ec:	2101      	movs	r1, #1
 801a4ee:	2207      	movs	r2, #7
 801a4f0:	4608      	mov	r0, r1
 801a4f2:	f7f4 fc15 	bl	800ed20 <stm32_fill_irq_table>
 801a4f6:	2200      	movs	r2, #0
 801a4f8:	2007      	movs	r0, #7
 801a4fa:	4611      	mov	r1, r2
 801a4fc:	f7e9 fa76 	bl	80039ec <z_arm_irq_priority_set>
 801a500:	2208      	movs	r2, #8
 801a502:	2101      	movs	r1, #1
 801a504:	2002      	movs	r0, #2
 801a506:	f7f4 fc0b 	bl	800ed20 <stm32_fill_irq_table>
 801a50a:	2200      	movs	r2, #0
 801a50c:	2008      	movs	r0, #8
 801a50e:	4611      	mov	r1, r2
 801a510:	f7e9 fa6c 	bl	80039ec <z_arm_irq_priority_set>
 801a514:	2209      	movs	r2, #9
 801a516:	2101      	movs	r1, #1
 801a518:	2003      	movs	r0, #3
 801a51a:	f7f4 fc01 	bl	800ed20 <stm32_fill_irq_table>
 801a51e:	2200      	movs	r2, #0
 801a520:	2009      	movs	r0, #9
 801a522:	4611      	mov	r1, r2
 801a524:	f7e9 fa62 	bl	80039ec <z_arm_irq_priority_set>
 801a528:	220a      	movs	r2, #10
 801a52a:	2101      	movs	r1, #1
 801a52c:	2004      	movs	r0, #4
 801a52e:	f7f4 fbf7 	bl	800ed20 <stm32_fill_irq_table>
 801a532:	2200      	movs	r2, #0
 801a534:	200a      	movs	r0, #10
 801a536:	4611      	mov	r1, r2
 801a538:	f7e9 fa58 	bl	80039ec <z_arm_irq_priority_set>
 801a53c:	2105      	movs	r1, #5
 801a53e:	2217      	movs	r2, #23
 801a540:	4608      	mov	r0, r1
 801a542:	f7f4 fbed 	bl	800ed20 <stm32_fill_irq_table>
 801a546:	2200      	movs	r2, #0
 801a548:	2017      	movs	r0, #23
 801a54a:	4611      	mov	r1, r2
 801a54c:	f7e9 fa4e 	bl	80039ec <z_arm_irq_priority_set>
 801a550:	2228      	movs	r2, #40	; 0x28
 801a552:	2106      	movs	r1, #6
 801a554:	200a      	movs	r0, #10
 801a556:	f7f4 fbe3 	bl	800ed20 <stm32_fill_irq_table>
 801a55a:	2200      	movs	r2, #0
 801a55c:	2028      	movs	r0, #40	; 0x28
 801a55e:	4611      	mov	r1, r2
 801a560:	f7e9 fa44 	bl	80039ec <z_arm_irq_priority_set>
}
 801a564:	2000      	movs	r0, #0
 801a566:	bd08      	pop	{r3, pc}

0801a568 <stm32_exti_disable>:
	if (line < 32) {
 801a568:	281f      	cmp	r0, #31
 801a56a:	dc0a      	bgt.n	801a582 <stm32_exti_disable+0x1a>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 801a56c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
		LL_EXTI_DisableIT_0_31(BIT((uint32_t)line));
 801a570:	2201      	movs	r2, #1
 801a572:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801a576:	fa02 f000 	lsl.w	r0, r2, r0
 801a57a:	ea23 0000 	bic.w	r0, r3, r0
 801a57e:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
}
 801a582:	4770      	bx	lr

0801a584 <stm32_exti_trigger>:
	switch (trigger) {
 801a584:	2903      	cmp	r1, #3
 801a586:	d810      	bhi.n	801a5aa <stm32_exti_trigger+0x26>
 801a588:	e8df f001 	tbb	[pc, r1]
 801a58c:	26191002 	.word	0x26191002
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 801a590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
		LL_EXTI_DisableRisingTrig_0_31(BIT((uint32_t)line));
 801a594:	2201      	movs	r2, #1
 801a596:	6819      	ldr	r1, [r3, #0]
 801a598:	fa02 f000 	lsl.w	r0, r2, r0
 801a59c:	ea21 0100 	bic.w	r1, r1, r0
 801a5a0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 801a5a2:	685a      	ldr	r2, [r3, #4]
 801a5a4:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 801a5a8:	6058      	str	r0, [r3, #4]
}
 801a5aa:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 801a5ac:	2301      	movs	r3, #1
 801a5ae:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 801a5b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a5b6:	681a      	ldr	r2, [r3, #0]
 801a5b8:	4302      	orrs	r2, r0
 801a5ba:	601a      	str	r2, [r3, #0]
 801a5bc:	e7f1      	b.n	801a5a2 <stm32_exti_trigger+0x1e>
		LL_EXTI_EnableFallingTrig_0_31(BIT((uint32_t)line));
 801a5be:	2301      	movs	r3, #1
 801a5c0:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 801a5c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a5c8:	685a      	ldr	r2, [r3, #4]
 801a5ca:	4302      	orrs	r2, r0
 801a5cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 801a5ce:	681a      	ldr	r2, [r3, #0]
 801a5d0:	ea22 0000 	bic.w	r0, r2, r0
 801a5d4:	6018      	str	r0, [r3, #0]
}
 801a5d6:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(BIT((uint32_t)line));
 801a5d8:	2301      	movs	r3, #1
 801a5da:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 801a5de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801a5e2:	681a      	ldr	r2, [r3, #0]
 801a5e4:	4302      	orrs	r2, r0
 801a5e6:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 801a5e8:	685a      	ldr	r2, [r3, #4]
 801a5ea:	4310      	orrs	r0, r2
 801a5ec:	e7dc      	b.n	801a5a8 <stm32_exti_trigger+0x24>

0801a5ee <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 801a5ee:	680b      	ldr	r3, [r1, #0]
 801a5f0:	f1a3 02d4 	sub.w	r2, r3, #212	; 0xd4
 801a5f4:	2a20      	cmp	r2, #32
 801a5f6:	d809      	bhi.n	801a60c <stm32_clock_control_on+0x1e>
	sys_set_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a5f8:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 801a5fc:	6849      	ldr	r1, [r1, #4]
	return 0;
 801a5fe:	2000      	movs	r0, #0
	sys_set_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a600:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 801a604:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | mask;
 801a606:	430a      	orrs	r2, r1
 801a608:	601a      	str	r2, [r3, #0]
	return 0;
 801a60a:	4770      	bx	lr
		return -ENOTSUP;
 801a60c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801a610:	4770      	bx	lr

0801a612 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 801a612:	680b      	ldr	r3, [r1, #0]
 801a614:	f1a3 02d4 	sub.w	r2, r3, #212	; 0xd4
 801a618:	2a20      	cmp	r2, #32
 801a61a:	d80a      	bhi.n	801a632 <stm32_clock_control_off+0x20>
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a61c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
	*(volatile uint32_t *)addr = temp & ~mask;
 801a620:	6849      	ldr	r1, [r1, #4]
	return 0;
 801a622:	2000      	movs	r0, #0
	sys_clear_bits(STM32H7_BUS_CLK_REG + pclken->bus, pclken->enr);
 801a624:	f503 3311 	add.w	r3, r3, #148480	; 0x24400
	uint32_t temp = *(volatile uint32_t *)addr;
 801a628:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp & ~mask;
 801a62a:	ea22 0201 	bic.w	r2, r2, r1
 801a62e:	601a      	str	r2, [r3, #0]
	return 0;
 801a630:	4770      	bx	lr
		return -ENOTSUP;
 801a632:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801a636:	4770      	bx	lr

0801a638 <pool_filling_work_handler>:
{
 801a638:	b510      	push	{r4, lr}
 801a63a:	4604      	mov	r4, r0
	if (start_pool_filling(false) != 0) {
 801a63c:	f7f4 fd7a 	bl	800f134 <start_pool_filling.constprop.0>
 801a640:	b120      	cbz	r0, 801a64c <pool_filling_work_handler+0x14>
		k_work_submit(work);
 801a642:	4620      	mov	r0, r4
}
 801a644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_submit(work);
 801a648:	f7f7 be50 	b.w	80122ec <k_work_submit>
}
 801a64c:	bd10      	pop	{r4, pc}

0801a64e <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a64e:	6843      	ldr	r3, [r0, #4]
}
 801a650:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a652:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 801a654:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 801a656:	600b      	str	r3, [r1, #0]
}
 801a658:	4770      	bx	lr

0801a65a <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a65a:	6843      	ldr	r3, [r0, #4]
 801a65c:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 801a65e:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 801a660:	4042      	eors	r2, r0
 801a662:	400a      	ands	r2, r1
 801a664:	4042      	eors	r2, r0
}
 801a666:	2000      	movs	r0, #0
  WRITE_REG(GPIOx->ODR, PortValue);
 801a668:	615a      	str	r2, [r3, #20]
 801a66a:	4770      	bx	lr

0801a66c <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a66c:	6843      	ldr	r3, [r0, #4]
}
 801a66e:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a670:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 801a672:	6199      	str	r1, [r3, #24]
}
 801a674:	4770      	bx	lr

0801a676 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a676:	6843      	ldr	r3, [r0, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 801a678:	0409      	lsls	r1, r1, #16
}
 801a67a:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a67c:	685b      	ldr	r3, [r3, #4]
 801a67e:	6199      	str	r1, [r3, #24]
}
 801a680:	4770      	bx	lr

0801a682 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a682:	6843      	ldr	r3, [r0, #4]
}
 801a684:	2000      	movs	r0, #0
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a686:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 801a688:	6953      	ldr	r3, [r2, #20]
 801a68a:	404b      	eors	r3, r1
 801a68c:	6153      	str	r3, [r2, #20]
}
 801a68e:	4770      	bx	lr

0801a690 <gpio_stm32_manage_callback>:
{
 801a690:	b530      	push	{r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 801a692:	6903      	ldr	r3, [r0, #16]
	return list->head;
 801a694:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 801a696:	b310      	cbz	r0, 801a6de <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801a698:	2400      	movs	r4, #0
 801a69a:	4281      	cmp	r1, r0
 801a69c:	d11b      	bne.n	801a6d6 <gpio_stm32_manage_callback+0x46>
	return node->next;
 801a69e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 801a6a0:	b95c      	cbnz	r4, 801a6ba <gpio_stm32_manage_callback+0x2a>
 801a6a2:	68dc      	ldr	r4, [r3, #12]
	list->head = node;
 801a6a4:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 801a6a6:	42a1      	cmp	r1, r4
 801a6a8:	d100      	bne.n	801a6ac <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 801a6aa:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 801a6ac:	2000      	movs	r0, #0
 801a6ae:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 801a6b0:	b94a      	cbnz	r2, 801a6c6 <gpio_stm32_manage_callback+0x36>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 801a6b2:	2000      	movs	r0, #0
}
 801a6b4:	bd30      	pop	{r4, r5, pc}
 801a6b6:	4628      	mov	r0, r5
 801a6b8:	e7ef      	b.n	801a69a <gpio_stm32_manage_callback+0xa>
 801a6ba:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 801a6bc:	68d8      	ldr	r0, [r3, #12]
 801a6be:	4281      	cmp	r1, r0
	list->tail = node;
 801a6c0:	bf08      	it	eq
 801a6c2:	60dc      	streq	r4, [r3, #12]
}
 801a6c4:	e7f2      	b.n	801a6ac <gpio_stm32_manage_callback+0x1c>
	return list->head;
 801a6c6:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 801a6c8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 801a6ca:	68d8      	ldr	r0, [r3, #12]
	list->head = node;
 801a6cc:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 801a6ce:	2800      	cmp	r0, #0
 801a6d0:	d1ef      	bne.n	801a6b2 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 801a6d2:	60d9      	str	r1, [r3, #12]
	return gpio_manage_callback(&data->cb, callback, set);
 801a6d4:	e7ee      	b.n	801a6b4 <gpio_stm32_manage_callback+0x24>
	return node->next;
 801a6d6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801a6d8:	4604      	mov	r4, r0
 801a6da:	2d00      	cmp	r5, #0
 801a6dc:	d1eb      	bne.n	801a6b6 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 801a6de:	2a00      	cmp	r2, #0
 801a6e0:	d1f1      	bne.n	801a6c6 <gpio_stm32_manage_callback+0x36>
				return -EINVAL;
 801a6e2:	f06f 0015 	mvn.w	r0, #21
 801a6e6:	e7e5      	b.n	801a6b4 <gpio_stm32_manage_callback+0x24>

0801a6e8 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 801a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a6ec:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 801a6ee:	2001      	movs	r0, #1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 801a6f0:	f3c2 1680 	ubfx	r6, r2, #6, #1
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 801a6f4:	f3c2 1cc1 	ubfx	ip, r2, #7, #2
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801a6f8:	6867      	ldr	r7, [r4, #4]
	pinval = 1 << pin;
 801a6fa:	4088      	lsls	r0, r1
 801a6fc:	408e      	lsls	r6, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 801a6fe:	f002 0530 	and.w	r5, r2, #48	; 0x30
 801a702:	ea27 0700 	bic.w	r7, r7, r0
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 801a706:	f3c2 2241 	ubfx	r2, r2, #9, #2
	if (mode == STM32_MODER_ALT_MODE) {
 801a70a:	2d20      	cmp	r5, #32
 801a70c:	ea46 0607 	orr.w	r6, r6, r7
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801a710:	fa00 f701 	lsl.w	r7, r0, r1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801a714:	6066      	str	r6, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801a716:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 801a71a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 801a71e:	fb07 fc0c 	mul.w	ip, r7, ip
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 801a722:	fb07 f202 	mul.w	r2, r7, r2
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801a726:	ea6f 060e 	mvn.w	r6, lr
 801a72a:	ea28 080e 	bic.w	r8, r8, lr
 801a72e:	ea4c 0c08 	orr.w	ip, ip, r8
 801a732:	f8c4 c008 	str.w	ip, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 801a736:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801a73a:	ea2c 0c0e 	bic.w	ip, ip, lr
 801a73e:	ea42 020c 	orr.w	r2, r2, ip
 801a742:	60e2      	str	r2, [r4, #12]
 801a744:	d10d      	bne.n	801a762 <gpio_stm32_configure_raw.isra.0+0x7a>
		if (pin < 8) {
 801a746:	2907      	cmp	r1, #7
 801a748:	dc13      	bgt.n	801a772 <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 801a74a:	fa07 f201 	lsl.w	r2, r7, r1
 801a74e:	6a20      	ldr	r0, [r4, #32]
 801a750:	fa02 f101 	lsl.w	r1, r2, r1
 801a754:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
 801a758:	4359      	muls	r1, r3
 801a75a:	ea20 0202 	bic.w	r2, r0, r2
 801a75e:	4311      	orrs	r1, r2
 801a760:	6221      	str	r1, [r4, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 801a762:	6823      	ldr	r3, [r4, #0]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 801a764:	092d      	lsrs	r5, r5, #4
 801a766:	401e      	ands	r6, r3
 801a768:	437d      	muls	r5, r7
 801a76a:	4335      	orrs	r5, r6
 801a76c:	6025      	str	r5, [r4, #0]
}
 801a76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 801a772:	0a02      	lsrs	r2, r0, #8
 801a774:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a776:	4352      	muls	r2, r2
 801a778:	4352      	muls	r2, r2
 801a77a:	ebc2 1002 	rsb	r0, r2, r2, lsl #4
 801a77e:	4353      	muls	r3, r2
 801a780:	ea21 0100 	bic.w	r1, r1, r0
 801a784:	430b      	orrs	r3, r1
 801a786:	6263      	str	r3, [r4, #36]	; 0x24
}
 801a788:	e7eb      	b.n	801a762 <gpio_stm32_configure_raw.isra.0+0x7a>

0801a78a <gpio_stm32_config>:
{
 801a78a:	b538      	push	{r3, r4, r5, lr}
 801a78c:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 801a78e:	0390      	lsls	r0, r2, #14
{
 801a790:	460d      	mov	r5, r1
 801a792:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 801a794:	d519      	bpl.n	801a7ca <gpio_stm32_config+0x40>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 801a796:	0791      	lsls	r1, r2, #30
 801a798:	d510      	bpl.n	801a7bc <gpio_stm32_config+0x32>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 801a79a:	075a      	lsls	r2, r3, #29
 801a79c:	d531      	bpl.n	801a802 <gpio_stm32_config+0x78>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 801a79e:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 801a7a0:	06d8      	lsls	r0, r3, #27
 801a7a2:	d50d      	bpl.n	801a7c0 <gpio_stm32_config+0x36>
			*pincfg |= STM32_PINCFG_PULL_UP;
 801a7a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 801a7a8:	0319      	lsls	r1, r3, #12
 801a7aa:	d41f      	bmi.n	801a7ec <gpio_stm32_config+0x62>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 801a7ac:	0358      	lsls	r0, r3, #13
 801a7ae:	d516      	bpl.n	801a7de <gpio_stm32_config+0x54>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 801a7b0:	2101      	movs	r1, #1
 801a7b2:	4620      	mov	r0, r4
 801a7b4:	40a9      	lsls	r1, r5
 801a7b6:	f7ff ff5e 	bl	801a676 <gpio_stm32_port_clear_bits_raw>
 801a7ba:	e010      	b.n	801a7de <gpio_stm32_config+0x54>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 801a7bc:	2210      	movs	r2, #16
 801a7be:	e7ef      	b.n	801a7a0 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 801a7c0:	0699      	lsls	r1, r3, #26
 801a7c2:	d5f1      	bpl.n	801a7a8 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 801a7c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 801a7c8:	e7ee      	b.n	801a7a8 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 801a7ca:	03d0      	lsls	r0, r2, #15
 801a7cc:	d514      	bpl.n	801a7f8 <gpio_stm32_config+0x6e>
		if ((flags & GPIO_PULL_UP) != 0) {
 801a7ce:	06d1      	lsls	r1, r2, #27
 801a7d0:	d414      	bmi.n	801a7fc <gpio_stm32_config+0x72>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 801a7d2:	f012 0f20 	tst.w	r2, #32
 801a7d6:	bf14      	ite	ne
 801a7d8:	f44f 6280 	movne.w	r2, #1024	; 0x400
 801a7dc:	2200      	moveq	r2, #0
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 801a7de:	6860      	ldr	r0, [r4, #4]
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	4629      	mov	r1, r5
 801a7e4:	f7ff ff80 	bl	801a6e8 <gpio_stm32_configure_raw.isra.0>
	return 0;
 801a7e8:	2000      	movs	r0, #0
}
 801a7ea:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a7ec:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801a7ee:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a7f0:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801a7f2:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 801a7f4:	618b      	str	r3, [r1, #24]
	return 0;
 801a7f6:	e7f2      	b.n	801a7de <gpio_stm32_config+0x54>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 801a7f8:	2230      	movs	r2, #48	; 0x30
 801a7fa:	e7f0      	b.n	801a7de <gpio_stm32_config+0x54>
			*pincfg |= STM32_PINCFG_PULL_UP;
 801a7fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a800:	e7ed      	b.n	801a7de <gpio_stm32_config+0x54>
				return -ENOTSUP;
 801a802:	f06f 0085 	mvn.w	r0, #133	; 0x85
 801a806:	e7f0      	b.n	801a7ea <gpio_stm32_config+0x60>

0801a808 <gpio_stm32_isr>:
{
 801a808:	460b      	mov	r3, r1
 801a80a:	b570      	push	{r4, r5, r6, lr}
 801a80c:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 801a80e:	b169      	cbz	r1, 801a82c <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 801a810:	2501      	movs	r5, #1
 801a812:	685e      	ldr	r6, [r3, #4]
	return node->next;
 801a814:	680c      	ldr	r4, [r1, #0]
 801a816:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 801a818:	688a      	ldr	r2, [r1, #8]
 801a81a:	402a      	ands	r2, r5
 801a81c:	d002      	beq.n	801a824 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 801a81e:	684b      	ldr	r3, [r1, #4]
 801a820:	4630      	mov	r0, r6
 801a822:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 801a824:	b114      	cbz	r4, 801a82c <gpio_stm32_isr+0x24>
 801a826:	4621      	mov	r1, r4
 801a828:	6824      	ldr	r4, [r4, #0]
 801a82a:	e7f5      	b.n	801a818 <gpio_stm32_isr+0x10>
}
 801a82c:	bd70      	pop	{r4, r5, r6, pc}

0801a82e <gpio_stm32_configure>:
{
 801a82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a830:	461f      	mov	r7, r3
 801a832:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 801a834:	6840      	ldr	r0, [r0, #4]
{
 801a836:	460e      	mov	r6, r1
 801a838:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 801a83a:	f7ff ff55 	bl	801a6e8 <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 801a83e:	2f11      	cmp	r7, #17
 801a840:	d107      	bne.n	801a852 <gpio_stm32_configure+0x24>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801a842:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 801a844:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801a846:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 801a84a:	d504      	bpl.n	801a856 <gpio_stm32_configure+0x28>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801a84c:	6863      	ldr	r3, [r4, #4]
 801a84e:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 801a850:	6199      	str	r1, [r3, #24]
}
 801a852:	2000      	movs	r0, #0
 801a854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 801a856:	4620      	mov	r0, r4
 801a858:	f7ff ff0d 	bl	801a676 <gpio_stm32_port_clear_bits_raw>
 801a85c:	e7f9      	b.n	801a852 <gpio_stm32_configure+0x24>

0801a85e <z_impl_hwinfo_get_supported_reset_cause>:

int z_impl_hwinfo_get_supported_reset_cause(uint32_t *supported)
{
	*supported = (RESET_PIN
 801a85e:	23df      	movs	r3, #223	; 0xdf
 801a860:	6003      	str	r3, [r0, #0]
		      | RESET_LOW_POWER_WAKE
		      | RESET_POR
		      | RESET_BROWNOUT);

	return 0;
}
 801a862:	2000      	movs	r0, #0
 801a864:	4770      	bx	lr

0801a866 <clock_control_on>:
 801a866:	6883      	ldr	r3, [r0, #8]
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	4718      	bx	r3

0801a86c <eth_stm32_hal_get_capabilities>:
#if defined(CONFIG_ETH_STM32_HW_CHECKSUM)
		| ETHERNET_HW_RX_CHKSUM_OFFLOAD
		| ETHERNET_HW_TX_CHKSUM_OFFLOAD
#endif
		;
}
 801a86c:	2030      	movs	r0, #48	; 0x30
 801a86e:	4770      	bx	lr

0801a870 <eth0_irq_config>:
#endif /* CONFIG_NET_STATISTICS_ETHERNET */
};

static void eth0_irq_config(void)
{
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority), eth_isr,
 801a870:	2200      	movs	r2, #0
 801a872:	203d      	movs	r0, #61	; 0x3d
{
 801a874:	b508      	push	{r3, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority), eth_isr,
 801a876:	4611      	mov	r1, r2
 801a878:	f7e9 f8b8 	bl	80039ec <z_arm_irq_priority_set>
		    DEVICE_DT_INST_GET(0), 0);
	irq_enable(DT_INST_IRQN(0));
 801a87c:	203d      	movs	r0, #61	; 0x3d
}
 801a87e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(DT_INST_IRQN(0));
 801a882:	f7e9 b881 	b.w	8003988 <arch_irq_enable>

0801a886 <eth_isr>:
	heth = &dev_data->heth;
 801a886:	6900      	ldr	r0, [r0, #16]
	HAL_ETH_IRQHandler(heth);
 801a888:	300c      	adds	r0, #12
 801a88a:	f000 bbf1 	b.w	801b070 <HAL_ETH_IRQHandler>

0801a88e <eth_stm32_hal_set_config>:
{
 801a88e:	b570      	push	{r4, r5, r6, lr}
 801a890:	460d      	mov	r5, r1
	dev_data = dev->data;
 801a892:	6904      	ldr	r4, [r0, #16]
{
 801a894:	4611      	mov	r1, r2
	switch (type) {
 801a896:	2d03      	cmp	r5, #3
 801a898:	d114      	bne.n	801a8c4 <eth_stm32_hal_set_config+0x36>
		memcpy(dev_data->mac_addr, config->mac_address.addr, 6);
 801a89a:	1d26      	adds	r6, r4, #4
 801a89c:	2206      	movs	r2, #6
 801a89e:	4630      	mov	r0, r6
 801a8a0:	f7fa f9e9 	bl	8014c76 <memcpy>
		heth->Instance->MACA0HR = (dev_data->mac_addr[5] << 8) |
 801a8a4:	68e3      	ldr	r3, [r4, #12]
 801a8a6:	8922      	ldrh	r2, [r4, #8]
	return net_if_set_link_addr_locked(iface, addr, len, type);
 801a8a8:	4631      	mov	r1, r6
 801a8aa:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
		heth->Instance->MACA0LR = (dev_data->mac_addr[3] << 24) |
 801a8ae:	6862      	ldr	r2, [r4, #4]
 801a8b0:	68e3      	ldr	r3, [r4, #12]
 801a8b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 801a8b6:	462b      	mov	r3, r5
 801a8b8:	2206      	movs	r2, #6
 801a8ba:	6820      	ldr	r0, [r4, #0]
 801a8bc:	f7fb f8e9 	bl	8015a92 <net_if_set_link_addr_locked>
		ret = 0;
 801a8c0:	2000      	movs	r0, #0
}
 801a8c2:	bd70      	pop	{r4, r5, r6, pc}
	int ret = -ENOTSUP;
 801a8c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return ret;
 801a8c8:	e7fb      	b.n	801a8c2 <eth_stm32_hal_set_config+0x34>

0801a8ca <HAL_ETH_TxCpltCallback>:
	z_impl_k_sem_give(sem);
 801a8ca:	30e0      	adds	r0, #224	; 0xe0
 801a8cc:	f7f7 bb98 	b.w	8012000 <z_impl_k_sem_give>

0801a8d0 <HAL_ETH_ErrorCallback>:
}
 801a8d0:	4770      	bx	lr

0801a8d2 <HAL_ETH_RxCpltCallback>:
 801a8d2:	30c8      	adds	r0, #200	; 0xc8
 801a8d4:	f7f7 bb94 	b.w	8012000 <z_impl_k_sem_give>

0801a8d8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 801a8d8:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 801a8da:	6803      	ldr	r3, [r0, #0]
	while (*state < &config->states[config->state_cnt]) {
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 801a8dc:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 801a8de:	7905      	ldrb	r5, [r0, #4]
 801a8e0:	6804      	ldr	r4, [r0, #0]
 801a8e2:	6813      	ldr	r3, [r2, #0]
 801a8e4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a8e8:	42a3      	cmp	r3, r4
 801a8ea:	d302      	bcc.n	801a8f2 <pinctrl_lookup_state+0x1a>
	}

	return -ENOENT;
 801a8ec:	f06f 0001 	mvn.w	r0, #1
}
 801a8f0:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 801a8f2:	795c      	ldrb	r4, [r3, #5]
 801a8f4:	428c      	cmp	r4, r1
 801a8f6:	d001      	beq.n	801a8fc <pinctrl_lookup_state+0x24>
		(*state)++;
 801a8f8:	3308      	adds	r3, #8
 801a8fa:	e7ef      	b.n	801a8dc <pinctrl_lookup_state+0x4>
			return 0;
 801a8fc:	2000      	movs	r0, #0
 801a8fe:	e7f7      	b.n	801a8f0 <pinctrl_lookup_state+0x18>

0801a900 <reset_stm32_status>:
static int reset_stm32_status(const struct device *dev, uint32_t id,
			      uint8_t *status)
{
	const struct reset_stm32_config *config = dev->config;

	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801a900:	6843      	ldr	r3, [r0, #4]
 801a902:	f3c1 104b 	ubfx	r0, r1, #5, #12
 801a906:	f001 011f 	and.w	r1, r1, #31
 801a90a:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
 801a90c:	58c0      	ldr	r0, [r0, r3]
	return temp & (1 << bit);
 801a90e:	2301      	movs	r3, #1
 801a910:	fa03 f101 	lsl.w	r1, r3, r1
 801a914:	4201      	tst	r1, r0
				 STM32_RESET_REG_BIT(id));

	return 0;
}
 801a916:	f04f 0000 	mov.w	r0, #0
	*status = !!sys_test_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801a91a:	bf08      	it	eq
 801a91c:	2300      	moveq	r3, #0
 801a91e:	7013      	strb	r3, [r2, #0]
}
 801a920:	4770      	bx	lr

0801a922 <reset_stm32_line_assert>:

static int reset_stm32_line_assert(const struct device *dev, uint32_t id)
{
 801a922:	b510      	push	{r4, lr}
	const struct reset_stm32_config *config = dev->config;

	sys_set_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801a924:	6843      	ldr	r3, [r0, #4]
 801a926:	f3c1 104b 	ubfx	r0, r1, #5, #12
 801a92a:	f001 011f 	and.w	r1, r1, #31
 801a92e:	681a      	ldr	r2, [r3, #0]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 801a930:	2301      	movs	r3, #1
	uint32_t temp = *(volatile uint32_t *)addr;
 801a932:	5884      	ldr	r4, [r0, r2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 801a934:	fa03 f101 	lsl.w	r1, r3, r1
 801a938:	4321      	orrs	r1, r4
 801a93a:	5081      	str	r1, [r0, r2]
		    STM32_RESET_REG_BIT(id));

	return 0;
}
 801a93c:	2000      	movs	r0, #0
 801a93e:	bd10      	pop	{r4, pc}

0801a940 <reset_stm32_line_deassert>:

static int reset_stm32_line_deassert(const struct device *dev, uint32_t id)
{
 801a940:	b510      	push	{r4, lr}

#if DT_INST_PROP(0, set_bit_to_deassert)
	sys_set_bit(config->base + STM32_RESET_CLR_OFFSET(id),
		    STM32_RESET_REG_BIT(id));
#else
	sys_clear_bit(config->base + STM32_RESET_SET_OFFSET(id),
 801a942:	6843      	ldr	r3, [r0, #4]
 801a944:	f3c1 144b 	ubfx	r4, r1, #5, #12
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 801a948:	2201      	movs	r2, #1
 801a94a:	f001 011f 	and.w	r1, r1, #31
 801a94e:	6818      	ldr	r0, [r3, #0]
 801a950:	fa02 f101 	lsl.w	r1, r2, r1
	uint32_t temp = *(volatile uint32_t *)addr;
 801a954:	5823      	ldr	r3, [r4, r0]
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
 801a956:	ea23 0101 	bic.w	r1, r3, r1
 801a95a:	5021      	str	r1, [r4, r0]
		      STM32_RESET_REG_BIT(id));
#endif

	return 0;
}
 801a95c:	2000      	movs	r0, #0
 801a95e:	bd10      	pop	{r4, pc}

0801a960 <reset_stm32_line_toggle>:

static int reset_stm32_line_toggle(const struct device *dev, uint32_t id)
{
 801a960:	b538      	push	{r3, r4, r5, lr}
 801a962:	4604      	mov	r4, r0
 801a964:	460d      	mov	r5, r1
	reset_stm32_line_assert(dev, id);
 801a966:	f7ff ffdc 	bl	801a922 <reset_stm32_line_assert>
	reset_stm32_line_deassert(dev, id);
 801a96a:	4629      	mov	r1, r5
 801a96c:	4620      	mov	r0, r4
 801a96e:	f7ff ffe7 	bl	801a940 <reset_stm32_line_deassert>

	return 0;
}
 801a972:	2000      	movs	r0, #0
 801a974:	bd38      	pop	{r3, r4, r5, pc}

0801a976 <uart_stm32_poll_in>:
	const struct uart_stm32_config *config = dev->config;
 801a976:	6843      	ldr	r3, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 801a978:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801a97a:	69d0      	ldr	r0, [r2, #28]
 801a97c:	0700      	lsls	r0, r0, #28
 801a97e:	d501      	bpl.n	801a984 <uart_stm32_poll_in+0xe>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801a980:	2008      	movs	r0, #8
 801a982:	6210      	str	r0, [r2, #32]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 801a984:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 801a986:	69da      	ldr	r2, [r3, #28]
 801a988:	0692      	lsls	r2, r2, #26
 801a98a:	d503      	bpl.n	801a994 <uart_stm32_poll_in+0x1e>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 801a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return 0;
 801a98e:	2000      	movs	r0, #0
 801a990:	700b      	strb	r3, [r1, #0]
 801a992:	4770      	bx	lr
		return -1;
 801a994:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a998:	4770      	bx	lr

0801a99a <uart_stm32_irq_tx_enable>:
	LL_USART_EnableIT_TC(config->usart);
 801a99a:	6843      	ldr	r3, [r0, #4]
 801a99c:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a99e:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 801a9a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9a6:	e842 3100 	strex	r1, r3, [r2]
 801a9aa:	2900      	cmp	r1, #0
 801a9ac:	d1f7      	bne.n	801a99e <uart_stm32_irq_tx_enable+0x4>
}
 801a9ae:	4770      	bx	lr

0801a9b0 <uart_stm32_irq_tx_disable>:
	LL_USART_DisableIT_TC(config->usart);
 801a9b0:	6843      	ldr	r3, [r0, #4]
 801a9b2:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9b4:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 801a9b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9bc:	e842 3100 	strex	r1, r3, [r2]
 801a9c0:	2900      	cmp	r1, #0
 801a9c2:	d1f7      	bne.n	801a9b4 <uart_stm32_irq_tx_disable+0x4>
}
 801a9c4:	4770      	bx	lr

0801a9c6 <uart_stm32_irq_rx_enable>:
	LL_USART_EnableIT_RXNE(config->usart);
 801a9c6:	6843      	ldr	r3, [r0, #4]
 801a9c8:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9ca:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a9ce:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9d2:	e842 3100 	strex	r1, r3, [r2]
 801a9d6:	2900      	cmp	r1, #0
 801a9d8:	d1f7      	bne.n	801a9ca <uart_stm32_irq_rx_enable+0x4>
}
 801a9da:	4770      	bx	lr

0801a9dc <uart_stm32_irq_rx_disable>:
	LL_USART_DisableIT_RXNE(config->usart);
 801a9dc:	6843      	ldr	r3, [r0, #4]
 801a9de:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9e0:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a9e4:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9e8:	e842 3100 	strex	r1, r3, [r2]
 801a9ec:	2900      	cmp	r1, #0
 801a9ee:	d1f7      	bne.n	801a9e0 <uart_stm32_irq_rx_disable+0x4>
}
 801a9f0:	4770      	bx	lr

0801a9f2 <uart_stm32_irq_update>:
}
 801a9f2:	2001      	movs	r0, #1
 801a9f4:	4770      	bx	lr

0801a9f6 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = dev->data;
 801a9f6:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 801a9f8:	e9c3 1204 	strd	r1, r2, [r3, #16]
}
 801a9fc:	4770      	bx	lr

0801a9fe <uart_stm32_isr>:
	struct uart_stm32_data *data = dev->data;
 801a9fe:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 801aa00:	6913      	ldr	r3, [r2, #16]
 801aa02:	b10b      	cbz	r3, 801aa08 <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 801aa04:	6951      	ldr	r1, [r2, #20]
 801aa06:	4718      	bx	r3
}
 801aa08:	4770      	bx	lr

0801aa0a <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	2027      	movs	r0, #39	; 0x27
 801aa0e:	b508      	push	{r3, lr}
 801aa10:	4611      	mov	r1, r2
 801aa12:	f7e8 ffeb 	bl	80039ec <z_arm_irq_priority_set>
 801aa16:	2027      	movs	r0, #39	; 0x27
 801aa18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801aa1c:	f7e8 bfb4 	b.w	8003988 <arch_irq_enable>

0801aa20 <uart_stm32_set_baudrate>:
{
 801aa20:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 801aa22:	6903      	ldr	r3, [r0, #16]
{
 801aa24:	460c      	mov	r4, r1
	const struct uart_stm32_config *config = dev->config;
 801aa26:	6845      	ldr	r5, [r0, #4]
		if (clock_control_get_rate(data->clock,
 801aa28:	6858      	ldr	r0, [r3, #4]
					   (clock_control_subsys_t)&config->pclken[0],
 801aa2a:	6869      	ldr	r1, [r5, #4]
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 801aa2c:	6883      	ldr	r3, [r0, #8]
 801aa2e:	68db      	ldr	r3, [r3, #12]
 801aa30:	b18b      	cbz	r3, 801aa56 <uart_stm32_set_baudrate+0x36>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 801aa32:	aa01      	add	r2, sp, #4
 801aa34:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 801aa36:	2800      	cmp	r0, #0
 801aa38:	db0d      	blt.n	801aa56 <uart_stm32_set_baudrate+0x36>
		LL_USART_SetOverSampling(config->usart,
 801aa3a:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 801aa3c:	6813      	ldr	r3, [r2, #0]
 801aa3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801aa42:	6013      	str	r3, [r2, #0]
  else if (BaudRate == 0U)
 801aa44:	b13c      	cbz	r4, 801aa56 <uart_stm32_set_baudrate+0x36>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 801aa46:	9b01      	ldr	r3, [sp, #4]
		LL_USART_SetBaudRate(config->usart,
 801aa48:	682a      	ldr	r2, [r5, #0]
 801aa4a:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 801aa4e:	fbb3 f3f4 	udiv	r3, r3, r4
 801aa52:	b29b      	uxth	r3, r3
 801aa54:	60d3      	str	r3, [r2, #12]
}
 801aa56:	b003      	add	sp, #12
 801aa58:	bd30      	pop	{r4, r5, pc}

0801aa5a <uart_stm32_irq_tx_complete>:
	return LL_USART_IsActiveFlag_TC(config->usart);
 801aa5a:	6843      	ldr	r3, [r0, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 801aa5e:	69d8      	ldr	r0, [r3, #28]
}
 801aa60:	f3c0 1080 	ubfx	r0, r0, #6, #1
 801aa64:	4770      	bx	lr

0801aa66 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 801aa66:	6903      	ldr	r3, [r0, #16]
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 801aa6c:	6843      	ldr	r3, [r0, #4]
 801aa6e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 801aa76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aa7a:	d035      	beq.n	801aae8 <uart_stm32_config_get+0x82>
		return UART_CFG_PARITY_NONE;
 801aa7c:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 801aa80:	f1dc 0300 	rsbs	r3, ip, #0
 801aa84:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 801aa88:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 801aa8a:	6843      	ldr	r3, [r0, #4]
 801aa8c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 801aa8e:	685b      	ldr	r3, [r3, #4]
 801aa90:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 801aa94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801aa98:	d028      	beq.n	801aaec <uart_stm32_config_get+0x86>
 801aa9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801aa9e:	d027      	beq.n	801aaf0 <uart_stm32_config_get+0x8a>
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	bf14      	ite	ne
 801aaa4:	2303      	movne	r3, #3
 801aaa6:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 801aaa8:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 801aaaa:	6843      	ldr	r3, [r0, #4]
 801aaac:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 801aaae:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801aab0:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 801aab2:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801aab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (db) {
 801aaba:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 801aabe:	d019      	beq.n	801aaf4 <uart_stm32_config_get+0x8e>
 801aac0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 801aac4:	d11b      	bne.n	801aafe <uart_stm32_config_get+0x98>
			return UART_CFG_DATA_BITS_6;
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	bf0c      	ite	eq
 801aaca:	2302      	moveq	r3, #2
 801aacc:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 801aace:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 801aad0:	6843      	ldr	r3, [r0, #4]
}
 801aad2:	2000      	movs	r0, #0
	return LL_USART_GetHWFlowCtrl(config->usart);
 801aad4:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 801aad6:	689b      	ldr	r3, [r3, #8]
 801aad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 801aadc:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801aae0:	4253      	negs	r3, r2
 801aae2:	4153      	adcs	r3, r2
 801aae4:	71cb      	strb	r3, [r1, #7]
}
 801aae6:	4770      	bx	lr
	switch (parity) {
 801aae8:	2302      	movs	r3, #2
 801aaea:	e7cd      	b.n	801aa88 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 801aaec:	2300      	movs	r3, #0
 801aaee:	e7db      	b.n	801aaa8 <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 801aaf0:	2302      	movs	r3, #2
 801aaf2:	e7d9      	b.n	801aaa8 <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_9;
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	bf14      	ite	ne
 801aaf8:	2303      	movne	r3, #3
 801aafa:	2304      	moveq	r3, #4
 801aafc:	e7e7      	b.n	801aace <uart_stm32_config_get+0x68>
			return UART_CFG_DATA_BITS_8;
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	bf14      	ite	ne
 801ab02:	2302      	movne	r3, #2
 801ab04:	2303      	moveq	r3, #3
 801ab06:	e7e2      	b.n	801aace <uart_stm32_config_get+0x68>

0801ab08 <uart_stm32_irq_tx_ready>:
	return LL_USART_IsActiveFlag_TXE(config->usart) &&
 801ab08:	6843      	ldr	r3, [r0, #4]
 801ab0a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 801ab0c:	69d8      	ldr	r0, [r3, #28]
 801ab0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ab12:	d002      	beq.n	801ab1a <uart_stm32_irq_tx_ready+0x12>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 801ab14:	6818      	ldr	r0, [r3, #0]
 801ab16:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
 801ab1a:	4770      	bx	lr

0801ab1c <uart_stm32_fifo_fill>:
{
 801ab1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
 801ab1e:	6845      	ldr	r5, [r0, #4]
	if (!LL_USART_IsActiveFlag_TXE(config->usart)) {
 801ab20:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 801ab22:	69d8      	ldr	r0, [r3, #28]
 801ab24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ab28:	d018      	beq.n	801ab5c <uart_stm32_fifo_fill+0x40>
	__asm__ volatile(
 801ab2a:	f04f 0310 	mov.w	r3, #16
 801ab2e:	f3ef 8611 	mrs	r6, BASEPRI
 801ab32:	f383 8812 	msr	BASEPRI_MAX, r3
 801ab36:	f3bf 8f6f 	isb	sy
	while ((size - num_tx > 0) &&
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	b2d8      	uxtb	r0, r3
 801ab3e:	1a14      	subs	r4, r2, r0
 801ab40:	2c00      	cmp	r4, #0
 801ab42:	dd07      	ble.n	801ab54 <uart_stm32_fifo_fill+0x38>
	       LL_USART_IsActiveFlag_TXE(config->usart)) {
 801ab44:	682c      	ldr	r4, [r5, #0]
 801ab46:	3301      	adds	r3, #1
 801ab48:	69e7      	ldr	r7, [r4, #28]
 801ab4a:	063f      	lsls	r7, r7, #24
 801ab4c:	d502      	bpl.n	801ab54 <uart_stm32_fifo_fill+0x38>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 801ab4e:	5c08      	ldrb	r0, [r1, r0]
 801ab50:	62a0      	str	r0, [r4, #40]	; 0x28
}
 801ab52:	e7f3      	b.n	801ab3c <uart_stm32_fifo_fill+0x20>
	__asm__ volatile(
 801ab54:	f386 8811 	msr	BASEPRI, r6
 801ab58:	f3bf 8f6f 	isb	sy
}
 801ab5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ab5e <uart_stm32_poll_out>:
{
 801ab5e:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 801ab60:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 801ab62:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 801ab64:	69d3      	ldr	r3, [r2, #28]
 801ab66:	061b      	lsls	r3, r3, #24
 801ab68:	d5fc      	bpl.n	801ab64 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 801ab6a:	f04f 0210 	mov.w	r2, #16
 801ab6e:	f3ef 8311 	mrs	r3, BASEPRI
 801ab72:	f382 8812 	msr	BASEPRI_MAX, r2
 801ab76:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 801ab7a:	6802      	ldr	r2, [r0, #0]
 801ab7c:	69d4      	ldr	r4, [r2, #28]
 801ab7e:	0624      	lsls	r4, r4, #24
 801ab80:	d404      	bmi.n	801ab8c <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 801ab82:	f383 8811 	msr	BASEPRI, r3
 801ab86:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 801ab8a:	e7ea      	b.n	801ab62 <uart_stm32_poll_out+0x4>
  USARTx->TDR = Value;
 801ab8c:	6291      	str	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 801ab8e:	f383 8811 	msr	BASEPRI, r3
 801ab92:	f3bf 8f6f 	isb	sy
}
 801ab96:	bd10      	pop	{r4, pc}

0801ab98 <uart_stm32_irq_is_pending>:
	return ((LL_USART_IsActiveFlag_RXNE(config->usart) &&
 801ab98:	6843      	ldr	r3, [r0, #4]
 801ab9a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 801ab9c:	69da      	ldr	r2, [r3, #28]
 801ab9e:	0691      	lsls	r1, r2, #26
 801aba0:	d502      	bpl.n	801aba8 <uart_stm32_irq_is_pending+0x10>
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 801aba2:	681a      	ldr	r2, [r3, #0]
 801aba4:	0692      	lsls	r2, r2, #26
 801aba6:	d407      	bmi.n	801abb8 <uart_stm32_irq_is_pending+0x20>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 801aba8:	69d8      	ldr	r0, [r3, #28]
 801abaa:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 801abae:	d004      	beq.n	801abba <uart_stm32_irq_is_pending+0x22>
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 801abb0:	6818      	ldr	r0, [r3, #0]
 801abb2:	f3c0 1080 	ubfx	r0, r0, #6, #1
 801abb6:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 801abb8:	2001      	movs	r0, #1
}
 801abba:	4770      	bx	lr

0801abbc <uart_stm32_irq_rx_ready>:
	return LL_USART_IsActiveFlag_RXNE(config->usart);
 801abbc:	6843      	ldr	r3, [r0, #4]
 801abbe:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 801abc0:	69d8      	ldr	r0, [r3, #28]
}
 801abc2:	f3c0 1040 	ubfx	r0, r0, #5, #1
 801abc6:	4770      	bx	lr

0801abc8 <uart_stm32_fifo_read>:
{
 801abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	while ((size - num_rx > 0) &&
 801abca:	2300      	movs	r3, #0
	const struct uart_stm32_config *config = dev->config;
 801abcc:	6844      	ldr	r4, [r0, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801abce:	2608      	movs	r6, #8
	while ((size - num_rx > 0) &&
 801abd0:	b2d8      	uxtb	r0, r3
 801abd2:	1a15      	subs	r5, r2, r0
 801abd4:	2d00      	cmp	r5, #0
 801abd6:	dd0c      	ble.n	801abf2 <uart_stm32_fifo_read+0x2a>
	       LL_USART_IsActiveFlag_RXNE(config->usart)) {
 801abd8:	6825      	ldr	r5, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 801abda:	69ef      	ldr	r7, [r5, #28]
 801abdc:	06bf      	lsls	r7, r7, #26
 801abde:	d508      	bpl.n	801abf2 <uart_stm32_fifo_read+0x2a>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 801abe0:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 801abe2:	540d      	strb	r5, [r1, r0]
		if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 801abe4:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801abe6:	69c5      	ldr	r5, [r0, #28]
 801abe8:	072d      	lsls	r5, r5, #28
 801abea:	d500      	bpl.n	801abee <uart_stm32_fifo_read+0x26>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801abec:	6206      	str	r6, [r0, #32]
 801abee:	3301      	adds	r3, #1
 801abf0:	e7ee      	b.n	801abd0 <uart_stm32_fifo_read+0x8>
}
 801abf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801abf4 <uart_stm32_err_check>:
	const struct uart_stm32_config *config = dev->config;
 801abf4:	6842      	ldr	r2, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 801abf6:	6813      	ldr	r3, [r2, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801abf8:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 801abfa:	69d9      	ldr	r1, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 801abfc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 801ac00:	07c9      	lsls	r1, r1, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 801ac02:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_PARITY;
 801ac04:	bf48      	it	mi
 801ac06:	f040 0002 	orrmi.w	r0, r0, #2
 801ac0a:	0789      	lsls	r1, r1, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 801ac0c:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_FRAMING;
 801ac0e:	bf48      	it	mi
 801ac10:	f040 0004 	orrmi.w	r0, r0, #4
 801ac14:	0749      	lsls	r1, r1, #29
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 801ac16:	69d9      	ldr	r1, [r3, #28]
		err |= UART_ERROR_NOISE;
 801ac18:	bf48      	it	mi
 801ac1a:	f040 0020 	orrmi.w	r0, r0, #32
 801ac1e:	05c9      	lsls	r1, r1, #23
 801ac20:	d504      	bpl.n	801ac2c <uart_stm32_err_check+0x38>
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 801ac22:	f44f 7180 	mov.w	r1, #256	; 0x100
		err |= UART_BREAK;
 801ac26:	f040 0008 	orr.w	r0, r0, #8
 801ac2a:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 801ac2c:	07c1      	lsls	r1, r0, #31
 801ac2e:	d502      	bpl.n	801ac36 <uart_stm32_err_check+0x42>
		LL_USART_ClearFlag_ORE(config->usart);
 801ac30:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801ac32:	2108      	movs	r1, #8
 801ac34:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 801ac36:	0783      	lsls	r3, r0, #30
 801ac38:	d502      	bpl.n	801ac40 <uart_stm32_err_check+0x4c>
		LL_USART_ClearFlag_PE(config->usart);
 801ac3a:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 801ac3c:	2101      	movs	r1, #1
 801ac3e:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 801ac40:	0741      	lsls	r1, r0, #29
 801ac42:	d502      	bpl.n	801ac4a <uart_stm32_err_check+0x56>
		LL_USART_ClearFlag_FE(config->usart);
 801ac44:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 801ac46:	2102      	movs	r1, #2
 801ac48:	6219      	str	r1, [r3, #32]
	if (err & UART_ERROR_NOISE) {
 801ac4a:	0683      	lsls	r3, r0, #26
 801ac4c:	d502      	bpl.n	801ac54 <uart_stm32_err_check+0x60>
		LL_USART_ClearFlag_NE(config->usart);
 801ac4e:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 801ac50:	2204      	movs	r2, #4
 801ac52:	621a      	str	r2, [r3, #32]
}
 801ac54:	4770      	bx	lr

0801ac56 <ETH_SetMACConfig>:
{
 801ac56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac5a:	680a      	ldr	r2, [r1, #0]
 801ac5c:	b085      	sub	sp, #20
 801ac5e:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 801ac60:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 801ac62:	ea43 0b02 	orr.w	fp, r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 801ac66:	7c0b      	ldrb	r3, [r1, #16]
               ((uint32_t)macconf->ChecksumOffload << 27) |
 801ac68:	f891 8004 	ldrb.w	r8, [r1, #4]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 801ac6c:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 801ac6e:	f891 e00c 	ldrb.w	lr, [r1, #12]
               ((uint32_t)macconf->Support2KPacket  << 22) |
 801ac72:	f891 c00d 	ldrb.w	ip, [r1, #13]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 801ac76:	bf0c      	ite	eq
 801ac78:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 801ac7c:	2300      	movne	r3, #0
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 801ac7e:	7b8e      	ldrb	r6, [r1, #14]
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 801ac80:	9300      	str	r3, [sp, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 801ac82:	7c4b      	ldrb	r3, [r1, #17]
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 801ac84:	7bcd      	ldrb	r5, [r1, #15]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 801ac86:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->JumboPacket << 16) |
 801ac88:	7c8c      	ldrb	r4, [r1, #18]
               ((uint32_t)macconf->LoopbackMode << 12) |
 801ac8a:	f891 a01c 	ldrb.w	sl, [r1, #28]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 801ac8e:	bf0c      	ite	eq
 801ac90:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 801ac94:	2300      	movne	r3, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 801ac96:	f891 901d 	ldrb.w	r9, [r1, #29]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 801ac9a:	9301      	str	r3, [sp, #4]
 801ac9c:	694b      	ldr	r3, [r1, #20]
 801ac9e:	ea4b 0b03 	orr.w	fp, fp, r3
 801aca2:	698b      	ldr	r3, [r1, #24]
 801aca4:	ea4b 0b03 	orr.w	fp, fp, r3
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 801aca8:	7f8b      	ldrb	r3, [r1, #30]
 801acaa:	2b00      	cmp	r3, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 801acac:	ea4b 0b07 	orr.w	fp, fp, r7
 801acb0:	6acf      	ldr	r7, [r1, #44]	; 0x2c
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 801acb2:	bf0c      	ite	eq
 801acb4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801acb8:	2300      	movne	r3, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 801acba:	ea4b 0707 	orr.w	r7, fp, r7
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 801acbe:	9302      	str	r3, [sp, #8]
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 801acc0:	7fcb      	ldrb	r3, [r1, #31]
 801acc2:	9303      	str	r3, [sp, #12]
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 801acc4:	f891 3020 	ldrb.w	r3, [r1, #32]
 801acc8:	2b00      	cmp	r3, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 801acca:	6803      	ldr	r3, [r0, #0]
 801accc:	681b      	ldr	r3, [r3, #0]
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 801acce:	bf0c      	ite	eq
 801acd0:	f44f 7280 	moveq.w	r2, #256	; 0x100
 801acd4:	2200      	movne	r2, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 801acd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801acda:	f423 037b 	bic.w	r3, r3, #16449536	; 0xfb0000
 801acde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801ace2:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 801ace6:	431f      	orrs	r7, r3
 801ace8:	ea47 67c8 	orr.w	r7, r7, r8, lsl #27
 801acec:	ea47 57ce 	orr.w	r7, r7, lr, lsl #23
 801acf0:	ea47 578c 	orr.w	r7, r7, ip, lsl #22
 801acf4:	ea47 5346 	orr.w	r3, r7, r6, lsl #21
 801acf8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 801acfc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801ad00:	9c03      	ldr	r4, [sp, #12]
 801ad02:	ea43 330a 	orr.w	r3, r3, sl, lsl #12
 801ad06:	ea43 23c9 	orr.w	r3, r3, r9, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 801ad0a:	f891 9028 	ldrb.w	r9, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 801ad0e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 801ad12:	9c00      	ldr	r4, [sp, #0]
 801ad14:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
 801ad18:	4323      	orrs	r3, r4
 801ad1a:	9c01      	ldr	r4, [sp, #4]
 801ad1c:	4323      	orrs	r3, r4
 801ad1e:	9c02      	ldr	r4, [sp, #8]
 801ad20:	4323      	orrs	r3, r4
 801ad22:	431a      	orrs	r2, r3
 801ad24:	6803      	ldr	r3, [r0, #0]
 801ad26:	601a      	str	r2, [r3, #0]
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 801ad28:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 801ad2c:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 801ad2e:	2b00      	cmp	r3, #0
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 801ad30:	6bce      	ldr	r6, [r1, #60]	; 0x3c
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 801ad32:	6853      	ldr	r3, [r2, #4]
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 801ad34:	f891 c038 	ldrb.w	ip, [r1, #56]	; 0x38
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 801ad38:	bf08      	it	eq
 801ad3a:	f44f 3480 	moveq.w	r4, #65536	; 0x10000
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 801ad3e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 801ad42:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 801ad46:	f891 5031 	ldrb.w	r5, [r1, #49]	; 0x31
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 801ad4a:	bf18      	it	ne
 801ad4c:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 801ad4e:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 801ad52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801ad56:	f023 0307 	bic.w	r3, r3, #7
 801ad5a:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 801ad5e:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801ad60:	4333      	orrs	r3, r6
 801ad62:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 801ad66:	ea43 4387 	orr.w	r3, r3, r7, lsl #18
 801ad6a:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 801ad6e:	4323      	orrs	r3, r4
 801ad70:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 801ad72:	6802      	ldr	r2, [r0, #0]
 801ad74:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801ad76:	68d3      	ldr	r3, [r2, #12]
 801ad78:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 801ad7c:	f023 0301 	bic.w	r3, r3, #1
 801ad80:	4323      	orrs	r3, r4
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 801ad82:	f891 4040 	ldrb.w	r4, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 801ad86:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 801ad8a:	60d3      	str	r3, [r2, #12]
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 801ad8c:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 801ad90:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 801ad92:	2b00      	cmp	r3, #0
               (macconf->PauseTime << 16));
 801ad94:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 801ad96:	6f13      	ldr	r3, [r2, #112]	; 0x70
               macconf->PauseLowThreshold |
 801ad98:	6d0d      	ldr	r5, [r1, #80]	; 0x50
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 801ad9a:	bf08      	it	eq
 801ad9c:	2480      	moveq	r4, #128	; 0x80
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 801ad9e:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 801ada2:	f891 7054 	ldrb.w	r7, [r1, #84]	; 0x54
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 801ada6:	bf18      	it	ne
 801ada8:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 801adaa:	041b      	lsls	r3, r3, #16
 801adac:	0c1b      	lsrs	r3, r3, #16
 801adae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 801adb2:	432b      	orrs	r3, r5
 801adb4:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 801adb8:	4323      	orrs	r3, r4
 801adba:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 801adbc:	6804      	ldr	r4, [r0, #0]
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 801adbe:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 801adc2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 801adc6:	f022 0203 	bic.w	r2, r2, #3
 801adca:	4313      	orrs	r3, r2
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 801adcc:	f891 2055 	ldrb.w	r2, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 801add0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 801add4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 801add8:	6802      	ldr	r2, [r0, #0]
 801adda:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 801addc:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 801ade0:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 801ade4:	4323      	orrs	r3, r4
 801ade6:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  macregval = (macconf->ReceiveQueueMode |
 801adea:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 801adec:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 801adf0:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 801adf2:	2b00      	cmp	r3, #0
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 801adf4:	f891 0061 	ldrb.w	r0, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 801adf8:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 801adfc:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 801ae00:	bf08      	it	eq
 801ae02:	2440      	moveq	r4, #64	; 0x40
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 801ae04:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 801ae08:	bf18      	it	ne
 801ae0a:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 801ae0c:	432b      	orrs	r3, r5
 801ae0e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 801ae12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801ae16:	4323      	orrs	r3, r4
 801ae18:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 801ae1c:	b005      	add	sp, #20
 801ae1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae22 <ETH_UpdateDescriptor>:
{
 801ae22:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t *buff = NULL;
 801ae26:	2300      	movs	r3, #0
  descidx = heth->RxDescList.RxBuildDescIdx;
 801ae28:	6e87      	ldr	r7, [r0, #104]	; 0x68
{
 801ae2a:	4604      	mov	r4, r0
  desccount = heth->RxDescList.RxBuildDescCnt;
 801ae2c:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
  uint8_t *buff = NULL;
 801ae2e:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801ae30:	f107 0312 	add.w	r3, r7, #18
  uint8_t allocStatus = 1U;
 801ae34:	f04f 0801 	mov.w	r8, #1
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 801ae38:	f04f 4901 	mov.w	r9, #2164260864	; 0x81000000
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801ae3c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 801ae40:	f04f 4a41 	mov.w	sl, #3238002688	; 0xc1000000
  while ((desccount > 0U) && (allocStatus != 0U))
 801ae44:	b116      	cbz	r6, 801ae4c <ETH_UpdateDescriptor+0x2a>
 801ae46:	f1b8 0f00 	cmp.w	r8, #0
 801ae4a:	d10d      	bne.n	801ae68 <ETH_UpdateDescriptor+0x46>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 801ae4c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801ae4e:	42b3      	cmp	r3, r6
 801ae50:	d007      	beq.n	801ae62 <ETH_UpdateDescriptor+0x40>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 801ae52:	6823      	ldr	r3, [r4, #0]
 801ae54:	2200      	movs	r2, #0
 801ae56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ae5a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 801ae5e:	e9c4 761a 	strd	r7, r6, [r4, #104]	; 0x68
}
 801ae62:	b002      	add	sp, #8
 801ae64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 801ae68:	692b      	ldr	r3, [r5, #16]
 801ae6a:	b933      	cbnz	r3, 801ae7a <ETH_UpdateDescriptor+0x58>
      HAL_ETH_RxAllocateCallback(&buff);
 801ae6c:	a801      	add	r0, sp, #4
 801ae6e:	f7f4 fefd 	bl	800fc6c <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 801ae72:	9b01      	ldr	r3, [sp, #4]
 801ae74:	b1ab      	cbz	r3, 801aea2 <ETH_UpdateDescriptor+0x80>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 801ae76:	612b      	str	r3, [r5, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 801ae78:	602b      	str	r3, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801ae7a:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 801ae7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ae80:	b163      	cbz	r3, 801ae9c <ETH_UpdateDescriptor+0x7a>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 801ae82:	f8c5 a00c 	str.w	sl, [r5, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 801ae86:	1c7b      	adds	r3, r7, #1
      desccount--;
 801ae88:	3e01      	subs	r6, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 801ae8a:	2b03      	cmp	r3, #3
 801ae8c:	bf88      	it	hi
 801ae8e:	1efb      	subhi	r3, r7, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801ae90:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 801ae94:	461f      	mov	r7, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801ae96:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
      desccount--;
 801ae9a:	e7d3      	b.n	801ae44 <ETH_UpdateDescriptor+0x22>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 801ae9c:	f8c5 900c 	str.w	r9, [r5, #12]
 801aea0:	e7f1      	b.n	801ae86 <ETH_UpdateDescriptor+0x64>
        allocStatus = 0U;
 801aea2:	4698      	mov	r8, r3
 801aea4:	e7ce      	b.n	801ae44 <ETH_UpdateDescriptor+0x22>

0801aea6 <HAL_ETH_MspInit>:
}
 801aea6:	4770      	bx	lr

0801aea8 <HAL_ETH_Transmit_IT>:
{
 801aea8:	b510      	push	{r4, lr}
 801aeaa:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 801aeac:	b939      	cbnz	r1, 801aebe <HAL_ETH_Transmit_IT+0x16>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801aeae:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801aeb2:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801aeb6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_ERROR;
 801aeba:	2001      	movs	r0, #1
 801aebc:	e021      	b.n	801af02 <HAL_ETH_Transmit_IT+0x5a>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 801aebe:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 801aec2:	2a23      	cmp	r2, #35	; 0x23
 801aec4:	d1f9      	bne.n	801aeba <HAL_ETH_Transmit_IT+0x12>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 801aec6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 801aec8:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 801aeca:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 801aecc:	f7f5 fc1a 	bl	8010704 <ETH_Prepare_Tx_Descriptors>
 801aed0:	b120      	cbz	r0, 801aedc <HAL_ETH_Transmit_IT+0x34>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801aed2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 801aed6:	f043 0302 	orr.w	r3, r3, #2
 801aeda:	e7ec      	b.n	801aeb6 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 801aedc:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 801aee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    return HAL_OK;
 801aee2:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 801aee4:	1c5a      	adds	r2, r3, #1
 801aee6:	2a03      	cmp	r2, #3
 801aee8:	bf8a      	itet	hi
 801aeea:	3b03      	subhi	r3, #3
 801aeec:	62a2      	strls	r2, [r4, #40]	; 0x28
 801aeee:	62a3      	strhi	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 801aef0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801aef2:	6823      	ldr	r3, [r4, #0]
 801aef4:	3206      	adds	r2, #6
 801aef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aefa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801aefe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 801af02:	bd10      	pop	{r4, pc}

0801af04 <HAL_ETH_ReadData>:
{
 801af04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af08:	b085      	sub	sp, #20
 801af0a:	4604      	mov	r4, r0
  if (pAppBuff == NULL)
 801af0c:	9100      	str	r1, [sp, #0]
 801af0e:	b949      	cbnz	r1, 801af24 <HAL_ETH_ReadData+0x20>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801af10:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801af14:	f043 0301 	orr.w	r3, r3, #1
 801af18:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 801af1c:	2001      	movs	r0, #1
}
 801af1e:	b005      	add	sp, #20
 801af20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (heth->gState != HAL_ETH_STATE_STARTED)
 801af24:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801af28:	2b23      	cmp	r3, #35	; 0x23
 801af2a:	d1f7      	bne.n	801af1c <HAL_ETH_ReadData+0x18>
  descidx = heth->RxDescList.RxDescIdx;
 801af2c:	f8d0 a05c 	ldr.w	sl, [r0, #92]	; 0x5c
  uint8_t rxdataready = 0U;
 801af30:	2700      	movs	r7, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801af32:	f100 0180 	add.w	r1, r0, #128	; 0x80
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801af36:	f10a 0312 	add.w	r3, sl, #18
  uint32_t desccnt = 0U;
 801af3a:	46b8      	mov	r8, r7
      dmarxdesc->BackupAddr0 = 0;
 801af3c:	46bb      	mov	fp, r7
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801af3e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801af42:	307c      	adds	r0, #124	; 0x7c
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 801af44:	f850 3c10 	ldr.w	r3, [r0, #-16]
 801af48:	f1c3 0304 	rsb	r3, r3, #4
 801af4c:	9301      	str	r3, [sp, #4]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801af4e:	68eb      	ldr	r3, [r5, #12]
 801af50:	2b00      	cmp	r3, #0
 801af52:	db03      	blt.n	801af5c <HAL_ETH_ReadData+0x58>
 801af54:	9b01      	ldr	r3, [sp, #4]
 801af56:	4598      	cmp	r8, r3
 801af58:	d000      	beq.n	801af5c <HAL_ETH_ReadData+0x58>
         && (rxdataready == 0U))
 801af5a:	b187      	cbz	r7, 801af7e <HAL_ETH_ReadData+0x7a>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 801af5c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801af5e:	4443      	add	r3, r8
 801af60:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 801af62:	b113      	cbz	r3, 801af6a <HAL_ETH_ReadData+0x66>
    ETH_UpdateDescriptor(heth);
 801af64:	4620      	mov	r0, r4
 801af66:	f7ff ff5c 	bl	801ae22 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 801af6a:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 801af6e:	2f00      	cmp	r7, #0
 801af70:	d0d4      	beq.n	801af1c <HAL_ETH_ReadData+0x18>
    *pAppBuff = heth->RxDescList.pRxStart;
 801af72:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 801af74:	2000      	movs	r0, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 801af76:	9a00      	ldr	r2, [sp, #0]
 801af78:	6013      	str	r3, [r2, #0]
    heth->RxDescList.pRxStart = NULL;
 801af7a:	67e0      	str	r0, [r4, #124]	; 0x7c
    return HAL_OK;
 801af7c:	e7cf      	b.n	801af1e <HAL_ETH_ReadData+0x1a>
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 801af7e:	68eb      	ldr	r3, [r5, #12]
 801af80:	f10a 0601 	add.w	r6, sl, #1
 801af84:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 801af88:	d101      	bne.n	801af8e <HAL_ETH_ReadData+0x8a>
 801af8a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801af8c:	b1d3      	cbz	r3, 801afc4 <HAL_ETH_ReadData+0xc0>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 801af8e:	68eb      	ldr	r3, [r5, #12]
 801af90:	009a      	lsls	r2, r3, #2
        heth->RxDescList.RxDataLength = 0;
 801af92:	bf48      	it	mi
 801af94:	e9c4 bb18 	strdmi	fp, fp, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 801af98:	68eb      	ldr	r3, [r5, #12]
 801af9a:	00db      	lsls	r3, r3, #3
 801af9c:	d41e      	bmi.n	801afdc <HAL_ETH_ReadData+0xd8>
      bufflength = heth->Init.RxBuffLen;
 801af9e:	f8d4 9014 	ldr.w	r9, [r4, #20]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801afa2:	fa1f f389 	uxth.w	r3, r9
 801afa6:	692a      	ldr	r2, [r5, #16]
 801afa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801afac:	f7f4 fe7a 	bl	800fca4 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 801afb0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801afb2:	3301      	adds	r3, #1
 801afb4:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 801afb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 801afb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
      heth->RxDescList.RxDataLength += bufflength;
 801afbc:	444b      	add	r3, r9
 801afbe:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 801afc0:	f8c5 b010 	str.w	fp, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 801afc4:	2e03      	cmp	r6, #3
    desccnt++;
 801afc6:	f108 0801 	add.w	r8, r8, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 801afca:	bf88      	it	hi
 801afcc:	f1aa 0603 	subhi.w	r6, sl, #3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801afd0:	f106 0312 	add.w	r3, r6, #18
    desccnt++;
 801afd4:	46b2      	mov	sl, r6
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801afd6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    desccnt++;
 801afda:	e7b8      	b.n	801af4e <HAL_ETH_ReadData+0x4a>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 801afdc:	68eb      	ldr	r3, [r5, #12]
 801afde:	f3c3 090e 	ubfx	r9, r3, #0, #15
 801afe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801afe4:	eba9 0903 	sub.w	r9, r9, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 801afe8:	68eb      	ldr	r3, [r5, #12]
 801afea:	6723      	str	r3, [r4, #112]	; 0x70
        if (READ_BIT(dmarxdesc->DESC1, ETH_DMARXNDESCWBF_TSA) != (uint32_t)RESET)
 801afec:	686b      	ldr	r3, [r5, #4]
 801afee:	045f      	lsls	r7, r3, #17
 801aff0:	d50e      	bpl.n	801b010 <HAL_ETH_ReadData+0x10c>
          INCR_RX_DESC_INDEX(descidx_temp, 1U);
 801aff2:	2e03      	cmp	r6, #3
 801aff4:	4633      	mov	r3, r6
 801aff6:	bf88      	it	hi
 801aff8:	f1aa 0303 	subhi.w	r3, sl, #3
          dmarxdesc_temp = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx_temp];
 801affc:	3312      	adds	r3, #18
 801affe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
          if (READ_BIT(dmarxdesc_temp->DESC3, ETH_DMARXNDESCWBF_CTXT) != (uint32_t)RESET)
 801b002:	68da      	ldr	r2, [r3, #12]
 801b004:	0052      	lsls	r2, r2, #1
 801b006:	d503      	bpl.n	801b010 <HAL_ETH_ReadData+0x10c>
            heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc_temp->DESC1;
 801b008:	685a      	ldr	r2, [r3, #4]
 801b00a:	67a2      	str	r2, [r4, #120]	; 0x78
            heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc_temp->DESC0;
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	6763      	str	r3, [r4, #116]	; 0x74
        rxdataready = 1;
 801b010:	2701      	movs	r7, #1
 801b012:	e7c6      	b.n	801afa2 <HAL_ETH_ReadData+0x9e>

0801b014 <HAL_ETH_ReleaseTxPacket>:
{
 801b014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b018:	4605      	mov	r5, r0
  uint8_t pktTxStatus = 1U;
 801b01a:	2701      	movs	r7, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 801b01c:	f04f 0918 	mov.w	r9, #24
 801b020:	f04f 0a00 	mov.w	sl, #0
  uint32_t idx =       dmatxdesclist->releaseIndex;
 801b024:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 801b028:	b106      	cbz	r6, 801b02c <HAL_ETH_ReleaseTxPacket+0x18>
 801b02a:	b917      	cbnz	r7, 801b032 <HAL_ETH_ReleaseTxPacket+0x1e>
}
 801b02c:	2000      	movs	r0, #0
 801b02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numOfBuf--;
 801b032:	eb05 0884 	add.w	r8, r5, r4, lsl #2
 801b036:	3e01      	subs	r6, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 801b038:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 801b03c:	b138      	cbz	r0, 801b04e <HAL_ETH_ReleaseTxPacket+0x3a>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 801b03e:	68eb      	ldr	r3, [r5, #12]
 801b040:	fb09 3304 	mla	r3, r9, r4, r3
 801b044:	68db      	ldr	r3, [r3, #12]
 801b046:	2b00      	cmp	r3, #0
 801b048:	da05      	bge.n	801b056 <HAL_ETH_ReleaseTxPacket+0x42>
        pktTxStatus = 0U;
 801b04a:	2700      	movs	r7, #0
 801b04c:	e7ec      	b.n	801b028 <HAL_ETH_ReleaseTxPacket+0x14>
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 801b04e:	3401      	adds	r4, #1
 801b050:	f004 0403 	and.w	r4, r4, #3
    if (pktInUse != 0U)
 801b054:	e7e8      	b.n	801b028 <HAL_ETH_ReleaseTxPacket+0x14>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 801b056:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 801b058:	f7f4 fe3c 	bl	800fcd4 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 801b05c:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 801b060:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->releaseIndex = idx;
 801b064:	e9c5 6410 	strd	r6, r4, [r5, #64]	; 0x40
 801b068:	e7de      	b.n	801b028 <HAL_ETH_ReleaseTxPacket+0x14>

0801b06a <HAL_ETH_PMTCallback>:
 801b06a:	4770      	bx	lr

0801b06c <HAL_ETH_EEECallback>:
 801b06c:	4770      	bx	lr

0801b06e <HAL_ETH_WakeUpCallback>:
 801b06e:	4770      	bx	lr

0801b070 <HAL_ETH_IRQHandler>:
{
 801b070:	b510      	push	{r4, lr}
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 801b072:	6803      	ldr	r3, [r0, #0]
{
 801b074:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 801b076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b07a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 801b07e:	0652      	lsls	r2, r2, #25
 801b080:	d509      	bpl.n	801b096 <HAL_ETH_IRQHandler+0x26>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 801b082:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 801b086:	0651      	lsls	r1, r2, #25
 801b088:	d505      	bpl.n	801b096 <HAL_ETH_IRQHandler+0x26>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 801b08a:	f248 0240 	movw	r2, #32832	; 0x8040
 801b08e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
      HAL_ETH_RxCpltCallback(heth);
 801b092:	f7ff fc1e 	bl	801a8d2 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 801b096:	6823      	ldr	r3, [r4, #0]
 801b098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b09c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 801b0a0:	07d2      	lsls	r2, r2, #31
 801b0a2:	d50a      	bpl.n	801b0ba <HAL_ETH_IRQHandler+0x4a>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 801b0a4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 801b0a8:	07d0      	lsls	r0, r2, #31
 801b0aa:	d506      	bpl.n	801b0ba <HAL_ETH_IRQHandler+0x4a>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 801b0ac:	f248 0201 	movw	r2, #32769	; 0x8001
      HAL_ETH_TxCpltCallback(heth);
 801b0b0:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 801b0b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
      HAL_ETH_TxCpltCallback(heth);
 801b0b6:	f7ff fc08 	bl	801a8ca <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 801b0ba:	6823      	ldr	r3, [r4, #0]
 801b0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b0c0:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 801b0c4:	0451      	lsls	r1, r2, #17
 801b0c6:	d524      	bpl.n	801b112 <HAL_ETH_IRQHandler+0xa2>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 801b0c8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 801b0cc:	0452      	lsls	r2, r2, #17
 801b0ce:	d520      	bpl.n	801b112 <HAL_ETH_IRQHandler+0xa2>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 801b0d0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 801b0d4:	f042 0208 	orr.w	r2, r2, #8
 801b0d8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 801b0dc:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 801b0e0:	f412 5f80 	tst.w	r2, #4096	; 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 801b0e4:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 801b0e8:	d05c      	beq.n	801b1a4 <HAL_ETH_IRQHandler+0x134>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 801b0ea:	f422 626f 	bic.w	r2, r2, #3824	; 0xef0
 801b0ee:	f022 020d 	bic.w	r2, r2, #13
 801b0f2:	04d2      	lsls	r2, r2, #19
 801b0f4:	0cd2      	lsrs	r2, r2, #19
 801b0f6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 801b0fa:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 801b0fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801b102:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 801b106:	23e0      	movs	r3, #224	; 0xe0
 801b108:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      HAL_ETH_ErrorCallback(heth);
 801b10c:	4620      	mov	r0, r4
 801b10e:	f7ff fbdf 	bl	801a8d0 <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 801b112:	6822      	ldr	r2, [r4, #0]
 801b114:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 801b118:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
 801b11c:	d012      	beq.n	801b144 <HAL_ETH_IRQHandler+0xd4>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 801b11e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    HAL_ETH_ErrorCallback(heth);
 801b122:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 801b124:	f043 0310 	orr.w	r3, r3, #16
 801b128:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 801b12c:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
 801b130:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 801b134:	23e0      	movs	r3, #224	; 0xe0
 801b136:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    HAL_ETH_ErrorCallback(heth);
 801b13a:	f7ff fbc9 	bl	801a8d0 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 801b13e:	2300      	movs	r3, #0
 801b140:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 801b144:	6823      	ldr	r3, [r4, #0]
 801b146:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801b14a:	06d0      	lsls	r0, r2, #27
 801b14c:	d50b      	bpl.n	801b166 <HAL_ETH_IRQHandler+0xf6>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 801b14e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 801b152:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 801b154:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b158:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 801b15c:	f7ff ff85 	bl	801b06a <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 801b160:	2300      	movs	r3, #0
 801b162:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 801b166:	6823      	ldr	r3, [r4, #0]
 801b168:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801b16c:	0691      	lsls	r1, r2, #26
 801b16e:	d50b      	bpl.n	801b188 <HAL_ETH_IRQHandler+0x118>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 801b170:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 801b174:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 801b176:	f003 030f 	and.w	r3, r3, #15
 801b17a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    HAL_ETH_EEECallback(heth);
 801b17e:	f7ff ff75 	bl	801b06c <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 801b182:	2300      	movs	r3, #0
 801b184:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 801b188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801b18c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 801b190:	0252      	lsls	r2, r2, #9
 801b192:	d506      	bpl.n	801b1a2 <HAL_ETH_IRQHandler+0x132>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 801b194:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    HAL_ETH_WakeUpCallback(heth);
 801b198:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 801b19a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    HAL_ETH_WakeUpCallback(heth);
 801b19e:	f7ff ff66 	bl	801b06e <HAL_ETH_WakeUpCallback>
}
 801b1a2:	bd10      	pop	{r4, pc}
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 801b1a4:	f402 42cd 	and.w	r2, r2, #26240	; 0x6680
 801b1a8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 801b1ac:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 801b1b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 801b1b4:	e7aa      	b.n	801b10c <HAL_ETH_IRQHandler+0x9c>

0801b1b6 <HAL_ETH_ReadPHYRegister>:
{
 801b1b6:	b570      	push	{r4, r5, r6, lr}
 801b1b8:	461e      	mov	r6, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 801b1ba:	6803      	ldr	r3, [r0, #0]
{
 801b1bc:	4605      	mov	r5, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 801b1be:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 801b1c2:	07c0      	lsls	r0, r0, #31
 801b1c4:	d501      	bpl.n	801b1ca <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 801b1c6:	2001      	movs	r0, #1
}
 801b1c8:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 801b1ca:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 801b1ce:	f024 7478 	bic.w	r4, r4, #65011712	; 0x3e00000
 801b1d2:	ea44 5141 	orr.w	r1, r4, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 801b1d6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 801b1da:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 801b1de:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 801b1e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  tickstart = HAL_GetTick();
 801b1e6:	f7f8 fb3d 	bl	8013864 <HAL_GetTick>
 801b1ea:	4604      	mov	r4, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 801b1ec:	682a      	ldr	r2, [r5, #0]
 801b1ee:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
 801b1f2:	f010 0001 	ands.w	r0, r0, #1
 801b1f6:	d104      	bne.n	801b202 <HAL_ETH_ReadPHYRegister+0x4c>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 801b1f8:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 801b1fc:	b29b      	uxth	r3, r3
 801b1fe:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 801b200:	e7e2      	b.n	801b1c8 <HAL_ETH_ReadPHYRegister+0x12>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 801b202:	f7f8 fb2f 	bl	8013864 <HAL_GetTick>
 801b206:	1b00      	subs	r0, r0, r4
 801b208:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801b20c:	d9ee      	bls.n	801b1ec <HAL_ETH_ReadPHYRegister+0x36>
 801b20e:	e7da      	b.n	801b1c6 <HAL_ETH_ReadPHYRegister+0x10>

0801b210 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 801b210:	2900      	cmp	r1, #0
 801b212:	f000 80e7 	beq.w	801b3e4 <HAL_ETH_GetMACConfig+0x1d4>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 801b216:	6803      	ldr	r3, [r0, #0]
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	f003 030c 	and.w	r3, r3, #12
 801b21e:	62cb      	str	r3, [r1, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 801b220:	6803      	ldr	r3, [r0, #0]
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b228:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 801b22c:	6803      	ldr	r3, [r0, #0]
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b234:	624b      	str	r3, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 801b236:	6803      	ldr	r3, [r0, #0]
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 801b23e:	f3c3 2300 	ubfx	r3, r3, #8, #1
 801b242:	f881 3020 	strb.w	r3, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 801b246:	6803      	ldr	r3, [r0, #0]
 801b248:	681b      	ldr	r3, [r3, #0]
                                        ? ENABLE : DISABLE;
 801b24a:	f3c3 2340 	ubfx	r3, r3, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 801b24e:	77cb      	strb	r3, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 801b250:	6803      	ldr	r3, [r0, #0]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 801b258:	f3c3 2380 	ubfx	r3, r3, #10, #1
 801b25c:	778b      	strb	r3, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 801b25e:	6803      	ldr	r3, [r0, #0]
 801b260:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 801b262:	f3c3 23c0 	ubfx	r3, r3, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 801b266:	774b      	strb	r3, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 801b268:	6803      	ldr	r3, [r0, #0]
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 801b270:	770b      	strb	r3, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 801b272:	6803      	ldr	r3, [r0, #0]
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b27a:	618b      	str	r3, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 801b27c:	6803      	ldr	r3, [r0, #0]
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b284:	614b      	str	r3, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 801b286:	6803      	ldr	r3, [r0, #0]
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	f3c3 4300 	ubfx	r3, r3, #16, #1
 801b28e:	748b      	strb	r3, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 801b290:	6803      	ldr	r3, [r0, #0]
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	f483 3300 	eor.w	r3, r3, #131072	; 0x20000
 801b298:	f3c3 4340 	ubfx	r3, r3, #17, #1
 801b29c:	744b      	strb	r3, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 801b29e:	6803      	ldr	r3, [r0, #0]
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	f483 2300 	eor.w	r3, r3, #524288	; 0x80000
 801b2a6:	f3c3 43c0 	ubfx	r3, r3, #19, #1
 801b2aa:	740b      	strb	r3, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 801b2ac:	6803      	ldr	r3, [r0, #0]
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	f3c3 5300 	ubfx	r3, r3, #20, #1
 801b2b4:	73cb      	strb	r3, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 801b2b6:	6803      	ldr	r3, [r0, #0]
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	f3c3 5340 	ubfx	r3, r3, #21, #1
 801b2be:	738b      	strb	r3, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 801b2c0:	6803      	ldr	r3, [r0, #0]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	f3c3 5380 	ubfx	r3, r3, #22, #1
 801b2c8:	734b      	strb	r3, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 801b2ca:	6803      	ldr	r3, [r0, #0]
 801b2cc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 801b2ce:	f3c3 53c0 	ubfx	r3, r3, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 801b2d2:	730b      	strb	r3, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 801b2d4:	6803      	ldr	r3, [r0, #0]
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801b2dc:	608b      	str	r3, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 801b2de:	6803      	ldr	r3, [r0, #0]
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	f3c3 63c0 	ubfx	r3, r3, #27, #1
 801b2e6:	710b      	strb	r3, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 801b2e8:	6803      	ldr	r3, [r0, #0]
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801b2f0:	600b      	str	r3, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 801b2f2:	6803      	ldr	r3, [r0, #0]
 801b2f4:	685b      	ldr	r3, [r3, #4]
 801b2f6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b2fa:	634b      	str	r3, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 801b2fc:	6803      	ldr	r3, [r0, #0]
 801b2fe:	685b      	ldr	r3, [r3, #4]
 801b300:	f483 3380 	eor.w	r3, r3, #65536	; 0x10000
 801b304:	f3c3 4300 	ubfx	r3, r3, #16, #1
 801b308:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 801b30c:	6803      	ldr	r3, [r0, #0]
 801b30e:	685b      	ldr	r3, [r3, #4]
 801b310:	f3c3 4340 	ubfx	r3, r3, #17, #1
 801b314:	f881 3031 	strb.w	r3, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 801b318:	6803      	ldr	r3, [r0, #0]
 801b31a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 801b31c:	f3c3 4380 	ubfx	r3, r3, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 801b320:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 801b324:	6803      	ldr	r3, [r0, #0]
 801b326:	685b      	ldr	r3, [r3, #4]
                                    ? ENABLE : DISABLE;
 801b328:	f3c3 6300 	ubfx	r3, r3, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 801b32c:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 801b330:	6803      	ldr	r3, [r0, #0]
 801b332:	685b      	ldr	r3, [r3, #4]
 801b334:	f3c3 6344 	ubfx	r3, r3, #25, #5
 801b338:	63cb      	str	r3, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 801b33a:	6803      	ldr	r3, [r0, #0]
 801b33c:	68db      	ldr	r3, [r3, #12]
 801b33e:	f3c3 2300 	ubfx	r3, r3, #8, #1
 801b342:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 801b346:	6803      	ldr	r3, [r0, #0]
 801b348:	68db      	ldr	r3, [r3, #12]
 801b34a:	f003 030f 	and.w	r3, r3, #15
 801b34e:	644b      	str	r3, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 801b350:	6803      	ldr	r3, [r0, #0]
 801b352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b354:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b358:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 801b35c:	6803      	ldr	r3, [r0, #0]
 801b35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b360:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 801b364:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801b368:	f881 304c 	strb.w	r3, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 801b36c:	6803      	ldr	r3, [r0, #0]
 801b36e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b374:	650b      	str	r3, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 801b376:	6803      	ldr	r3, [r0, #0]
 801b378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b37a:	0c1b      	lsrs	r3, r3, #16
 801b37c:	648b      	str	r3, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 801b37e:	6803      	ldr	r3, [r0, #0]
 801b380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b384:	f003 0301 	and.w	r3, r3, #1
 801b388:	f881 3056 	strb.w	r3, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 801b38c:	6803      	ldr	r3, [r0, #0]
 801b38e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
                                      ? ENABLE : DISABLE;
 801b392:	f3c3 0340 	ubfx	r3, r3, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 801b396:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 801b39a:	6803      	ldr	r3, [r0, #0]
 801b39c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 801b3a0:	f003 0372 	and.w	r3, r3, #114	; 0x72
 801b3a4:	658b      	str	r3, [r1, #88]	; 0x58
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 801b3a6:	6803      	ldr	r3, [r0, #0]
 801b3a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 801b3ac:	f003 0323 	and.w	r3, r3, #35	; 0x23
 801b3b0:	65cb      	str	r3, [r1, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 801b3b2:	6803      	ldr	r3, [r0, #0]
 801b3b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 801b3b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 801b3bc:	f881 3062 	strb.w	r3, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 801b3c0:	6803      	ldr	r3, [r0, #0]
 801b3c2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 801b3c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b3ca:	f881 3061 	strb.w	r3, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 801b3ce:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 801b3d0:	2000      	movs	r0, #0
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 801b3d2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 801b3d6:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 801b3da:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 801b3de:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
  return HAL_OK;
 801b3e2:	4770      	bx	lr
    return HAL_ERROR;
 801b3e4:	2001      	movs	r0, #1
}
 801b3e6:	4770      	bx	lr

0801b3e8 <HAL_ETH_SetMACConfig>:
{
 801b3e8:	b508      	push	{r3, lr}
  if (macconf == NULL)
 801b3ea:	b139      	cbz	r1, 801b3fc <HAL_ETH_SetMACConfig+0x14>
  if (heth->gState == HAL_ETH_STATE_READY)
 801b3ec:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801b3f0:	2b10      	cmp	r3, #16
 801b3f2:	d103      	bne.n	801b3fc <HAL_ETH_SetMACConfig+0x14>
    ETH_SetMACConfig(heth, macconf);
 801b3f4:	f7ff fc2f 	bl	801ac56 <ETH_SetMACConfig>
    return HAL_OK;
 801b3f8:	2000      	movs	r0, #0
}
 801b3fa:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 801b3fc:	2001      	movs	r0, #1
 801b3fe:	e7fc      	b.n	801b3fa <HAL_ETH_SetMACConfig+0x12>

0801b400 <HAL_ETH_GetMACFilterConfig>:
  if (pFilterConfig == NULL)
 801b400:	2900      	cmp	r1, #0
 801b402:	d039      	beq.n	801b478 <HAL_ETH_GetMACFilterConfig+0x78>
  pFilterConfig->PromiscuousMode = ((READ_BIT(heth->Instance->MACPFR, ETH_MACPFR_PR)) > 0U) ? ENABLE : DISABLE;
 801b404:	6803      	ldr	r3, [r0, #0]
 801b406:	689b      	ldr	r3, [r3, #8]
 801b408:	f003 0301 	and.w	r3, r3, #1
 801b40c:	700b      	strb	r3, [r1, #0]
  pFilterConfig->HashUnicast = ((READ_BIT(heth->Instance->MACPFR, ETH_MACPFR_HUC) >> 1) > 0U) ? ENABLE : DISABLE;
 801b40e:	6803      	ldr	r3, [r0, #0]
 801b410:	689b      	ldr	r3, [r3, #8]
 801b412:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b416:	70cb      	strb	r3, [r1, #3]
  pFilterConfig->HashMulticast = ((READ_BIT(heth->Instance->MACPFR, ETH_MACPFR_HMC) >> 2) > 0U) ? ENABLE : DISABLE;
 801b418:	6803      	ldr	r3, [r0, #0]
 801b41a:	689b      	ldr	r3, [r3, #8]
 801b41c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b420:	710b      	strb	r3, [r1, #4]
  pFilterConfig->DestAddrInverseFiltering = ((READ_BIT(heth->Instance->MACPFR,
 801b422:	6803      	ldr	r3, [r0, #0]
 801b424:	689b      	ldr	r3, [r3, #8]
                                                       ETH_MACPFR_DAIF) >> 3) > 0U) ? ENABLE : DISABLE;
 801b426:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  pFilterConfig->DestAddrInverseFiltering = ((READ_BIT(heth->Instance->MACPFR,
 801b42a:	720b      	strb	r3, [r1, #8]
  pFilterConfig->PassAllMulticast = ((READ_BIT(heth->Instance->MACPFR, ETH_MACPFR_PM) >> 4) > 0U) ? ENABLE : DISABLE;
 801b42c:	6803      	ldr	r3, [r0, #0]
 801b42e:	689b      	ldr	r3, [r3, #8]
 801b430:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b434:	714b      	strb	r3, [r1, #5]
  pFilterConfig->BroadcastFilter = ((READ_BIT(heth->Instance->MACPFR, ETH_MACPFR_DBF) >> 5) == 0U) ? ENABLE : DISABLE;
 801b436:	6803      	ldr	r3, [r0, #0]
 801b438:	689b      	ldr	r3, [r3, #8]
 801b43a:	f083 0320 	eor.w	r3, r3, #32
 801b43e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b442:	724b      	strb	r3, [r1, #9]
  pFilterConfig->ControlPacketsFilter = READ_BIT(heth->Instance->MACPFR, ETH_MACPFR_PCF);
 801b444:	6803      	ldr	r3, [r0, #0]
 801b446:	689b      	ldr	r3, [r3, #8]
 801b448:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b44c:	60cb      	str	r3, [r1, #12]
  pFilterConfig->SrcAddrInverseFiltering = ((READ_BIT(heth->Instance->MACPFR,
 801b44e:	6803      	ldr	r3, [r0, #0]
 801b450:	689b      	ldr	r3, [r3, #8]
                                                      ETH_MACPFR_SAIF) >> 8) > 0U) ? ENABLE : DISABLE;
 801b452:	f3c3 2300 	ubfx	r3, r3, #8, #1
  pFilterConfig->SrcAddrInverseFiltering = ((READ_BIT(heth->Instance->MACPFR,
 801b456:	71cb      	strb	r3, [r1, #7]
  pFilterConfig->SrcAddrFiltering = ((READ_BIT(heth->Instance->MACPFR, ETH_MACPFR_SAF) >> 9) > 0U) ? ENABLE : DISABLE;
 801b458:	6803      	ldr	r3, [r0, #0]
 801b45a:	689b      	ldr	r3, [r3, #8]
 801b45c:	f3c3 2340 	ubfx	r3, r3, #9, #1
 801b460:	718b      	strb	r3, [r1, #6]
  pFilterConfig->HachOrPerfectFilter = ((READ_BIT(heth->Instance->MACPFR, ETH_MACPFR_HPF) >> 10) > 0U)
 801b462:	6803      	ldr	r3, [r0, #0]
 801b464:	689b      	ldr	r3, [r3, #8]
                                       ? ENABLE : DISABLE;
 801b466:	f3c3 2380 	ubfx	r3, r3, #10, #1
  pFilterConfig->HachOrPerfectFilter = ((READ_BIT(heth->Instance->MACPFR, ETH_MACPFR_HPF) >> 10) > 0U)
 801b46a:	708b      	strb	r3, [r1, #2]
  pFilterConfig->ReceiveAllMode = ((READ_BIT(heth->Instance->MACPFR, ETH_MACPFR_RA) >> 31) > 0U) ? ENABLE : DISABLE;
 801b46c:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 801b46e:	2000      	movs	r0, #0
  pFilterConfig->ReceiveAllMode = ((READ_BIT(heth->Instance->MACPFR, ETH_MACPFR_RA) >> 31) > 0U) ? ENABLE : DISABLE;
 801b470:	689b      	ldr	r3, [r3, #8]
 801b472:	0fdb      	lsrs	r3, r3, #31
 801b474:	704b      	strb	r3, [r1, #1]
  return HAL_OK;
 801b476:	4770      	bx	lr
    return HAL_ERROR;
 801b478:	2001      	movs	r0, #1
}
 801b47a:	4770      	bx	lr

0801b47c <HAL_ETH_GetState>:
  return heth->gState;
 801b47c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 801b480:	4770      	bx	lr

0801b482 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 801b482:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 801b486:	4770      	bx	lr

0801b488 <mbedtls_md5_init>:
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 801b488:	2258      	movs	r2, #88	; 0x58
 801b48a:	2100      	movs	r1, #0
 801b48c:	f7f9 bbfe 	b.w	8014c8c <memset>

0801b490 <mbedtls_md5_free>:
    if( ctx == NULL )
 801b490:	b110      	cbz	r0, 801b498 <mbedtls_md5_free+0x8>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 801b492:	2158      	movs	r1, #88	; 0x58
 801b494:	f7f5 bd32 	b.w	8010efc <mbedtls_platform_zeroize>
}
 801b498:	4770      	bx	lr

0801b49a <mbedtls_md5_update>:
{
 801b49a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b49e:	4605      	mov	r5, r0
 801b4a0:	460e      	mov	r6, r1
    if( ilen == 0 )
 801b4a2:	4614      	mov	r4, r2
 801b4a4:	b912      	cbnz	r2, 801b4ac <mbedtls_md5_update+0x12>
    return( 0 );
 801b4a6:	2000      	movs	r0, #0
}
 801b4a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
 801b4ac:	6803      	ldr	r3, [r0, #0]
 801b4ae:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
 801b4b2:	18d3      	adds	r3, r2, r3
 801b4b4:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
 801b4b6:	bf22      	ittt	cs
 801b4b8:	6843      	ldrcs	r3, [r0, #4]
 801b4ba:	3301      	addcs	r3, #1
 801b4bc:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
 801b4be:	b1a7      	cbz	r7, 801b4ea <mbedtls_md5_update+0x50>
    fill = 64 - left;
 801b4c0:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 801b4c4:	454a      	cmp	r2, r9
 801b4c6:	d310      	bcc.n	801b4ea <mbedtls_md5_update+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 801b4c8:	f100 0818 	add.w	r8, r0, #24
 801b4cc:	464a      	mov	r2, r9
 801b4ce:	eb08 0007 	add.w	r0, r8, r7
 801b4d2:	f7f9 fbd0 	bl	8014c76 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 801b4d6:	4641      	mov	r1, r8
 801b4d8:	4628      	mov	r0, r5
 801b4da:	f7f5 fd19 	bl	8010f10 <mbedtls_internal_md5_process>
 801b4de:	2800      	cmp	r0, #0
 801b4e0:	d1e2      	bne.n	801b4a8 <mbedtls_md5_update+0xe>
        ilen  -= fill;
 801b4e2:	443c      	add	r4, r7
        input += fill;
 801b4e4:	444e      	add	r6, r9
        left = 0;
 801b4e6:	4607      	mov	r7, r0
        ilen  -= fill;
 801b4e8:	3c40      	subs	r4, #64	; 0x40
        left = 0;
 801b4ea:	4426      	add	r6, r4
 801b4ec:	e005      	b.n	801b4fa <mbedtls_md5_update+0x60>
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 801b4ee:	4628      	mov	r0, r5
 801b4f0:	f7f5 fd0e 	bl	8010f10 <mbedtls_internal_md5_process>
 801b4f4:	2800      	cmp	r0, #0
 801b4f6:	d1d7      	bne.n	801b4a8 <mbedtls_md5_update+0xe>
        ilen  -= 64;
 801b4f8:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 801b4fa:	2c3f      	cmp	r4, #63	; 0x3f
 801b4fc:	eba6 0104 	sub.w	r1, r6, r4
 801b500:	d8f5      	bhi.n	801b4ee <mbedtls_md5_update+0x54>
    if( ilen > 0 )
 801b502:	2c00      	cmp	r4, #0
 801b504:	d0cf      	beq.n	801b4a6 <mbedtls_md5_update+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 801b506:	f105 0018 	add.w	r0, r5, #24
 801b50a:	4622      	mov	r2, r4
 801b50c:	4438      	add	r0, r7
 801b50e:	f7f9 fbb2 	bl	8014c76 <memcpy>
 801b512:	e7c8      	b.n	801b4a6 <mbedtls_md5_update+0xc>

0801b514 <mbedtls_md5_finish>:
{
 801b514:	b570      	push	{r4, r5, r6, lr}
    used = ctx->total[0] & 0x3F;
 801b516:	6803      	ldr	r3, [r0, #0]
{
 801b518:	460d      	mov	r5, r1
        memset( ctx->buffer + used, 0, 56 - used );
 801b51a:	f100 0618 	add.w	r6, r0, #24
    ctx->buffer[used++] = 0x80;
 801b51e:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
 801b520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
{
 801b524:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
 801b526:	1c5a      	adds	r2, r3, #1
 801b528:	4403      	add	r3, r0
    if( used <= 56 )
 801b52a:	2a38      	cmp	r2, #56	; 0x38
        memset( ctx->buffer + used, 0, 56 - used );
 801b52c:	eb06 0002 	add.w	r0, r6, r2
    ctx->buffer[used++] = 0x80;
 801b530:	7619      	strb	r1, [r3, #24]
    if( used <= 56 )
 801b532:	d836      	bhi.n	801b5a2 <mbedtls_md5_finish+0x8e>
        memset( ctx->buffer + used, 0, 56 - used );
 801b534:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801b538:	2100      	movs	r1, #0
        memset( ctx->buffer, 0, 56 );
 801b53a:	f7f9 fba7 	bl	8014c8c <memset>
    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 801b53e:	4620      	mov	r0, r4
         | ( ctx->total[1] <<  3 );
 801b540:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
 801b544:	0f5a      	lsrs	r2, r3, #29
    low  = ( ctx->total[0] <<  3 );
 801b546:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 801b548:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 801b54c:	4631      	mov	r1, r6
    MBEDTLS_PUT_UINT32_LE( high, ctx->buffer, 60 );
 801b54e:	e9c4 3214 	strd	r3, r2, [r4, #80]	; 0x50
    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 801b552:	f7f5 fcdd 	bl	8010f10 <mbedtls_internal_md5_process>
 801b556:	bb18      	cbnz	r0, 801b5a0 <mbedtls_md5_finish+0x8c>
    MBEDTLS_PUT_UINT32_LE( ctx->state[0], output,  0 );
 801b558:	68a3      	ldr	r3, [r4, #8]
 801b55a:	702b      	strb	r3, [r5, #0]
 801b55c:	68a3      	ldr	r3, [r4, #8]
 801b55e:	0a1b      	lsrs	r3, r3, #8
 801b560:	706b      	strb	r3, [r5, #1]
 801b562:	8963      	ldrh	r3, [r4, #10]
 801b564:	70ab      	strb	r3, [r5, #2]
 801b566:	7ae3      	ldrb	r3, [r4, #11]
 801b568:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_LE( ctx->state[1], output,  4 );
 801b56a:	68e3      	ldr	r3, [r4, #12]
 801b56c:	712b      	strb	r3, [r5, #4]
 801b56e:	68e3      	ldr	r3, [r4, #12]
 801b570:	0a1b      	lsrs	r3, r3, #8
 801b572:	716b      	strb	r3, [r5, #5]
 801b574:	89e3      	ldrh	r3, [r4, #14]
 801b576:	71ab      	strb	r3, [r5, #6]
 801b578:	7be3      	ldrb	r3, [r4, #15]
 801b57a:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_LE( ctx->state[2], output,  8 );
 801b57c:	6923      	ldr	r3, [r4, #16]
 801b57e:	722b      	strb	r3, [r5, #8]
 801b580:	6923      	ldr	r3, [r4, #16]
 801b582:	0a1b      	lsrs	r3, r3, #8
 801b584:	726b      	strb	r3, [r5, #9]
 801b586:	8a63      	ldrh	r3, [r4, #18]
 801b588:	72ab      	strb	r3, [r5, #10]
 801b58a:	7ce3      	ldrb	r3, [r4, #19]
 801b58c:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_LE( ctx->state[3], output, 12 );
 801b58e:	6963      	ldr	r3, [r4, #20]
 801b590:	732b      	strb	r3, [r5, #12]
 801b592:	6963      	ldr	r3, [r4, #20]
 801b594:	0a1b      	lsrs	r3, r3, #8
 801b596:	736b      	strb	r3, [r5, #13]
 801b598:	8ae3      	ldrh	r3, [r4, #22]
 801b59a:	73ab      	strb	r3, [r5, #14]
 801b59c:	7de3      	ldrb	r3, [r4, #23]
 801b59e:	73eb      	strb	r3, [r5, #15]
}
 801b5a0:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 801b5a2:	2100      	movs	r1, #0
 801b5a4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 801b5a8:	f7f9 fb70 	bl	8014c8c <memset>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 801b5ac:	4631      	mov	r1, r6
 801b5ae:	4620      	mov	r0, r4
 801b5b0:	f7f5 fcae 	bl	8010f10 <mbedtls_internal_md5_process>
 801b5b4:	2800      	cmp	r0, #0
 801b5b6:	d1f3      	bne.n	801b5a0 <mbedtls_md5_finish+0x8c>
        memset( ctx->buffer, 0, 56 );
 801b5b8:	4601      	mov	r1, r0
 801b5ba:	2238      	movs	r2, #56	; 0x38
 801b5bc:	4630      	mov	r0, r6
 801b5be:	e7bc      	b.n	801b53a <mbedtls_md5_finish+0x26>

0801b5c0 <_mbedtls_init>:
#if defined(CONFIG_MBEDTLS_DEBUG_LEVEL)
	mbedtls_debug_set_threshold(CONFIG_MBEDTLS_DEBUG_LEVEL);
#endif

	return 0;
}
 801b5c0:	2000      	movs	r0, #0
 801b5c2:	4770      	bx	lr

0801b5c4 <z_device_state_init>:
}
 801b5c4:	4770      	bx	lr

0801b5c6 <z_device_is_ready>:
	if (dev == NULL) {
 801b5c6:	b140      	cbz	r0, 801b5da <z_device_is_ready+0x14>
	return dev->state->initialized && (dev->state->init_res == 0U);
 801b5c8:	68c3      	ldr	r3, [r0, #12]
 801b5ca:	7858      	ldrb	r0, [r3, #1]
 801b5cc:	f010 0001 	ands.w	r0, r0, #1
 801b5d0:	bf1e      	ittt	ne
 801b5d2:	7818      	ldrbne	r0, [r3, #0]
 801b5d4:	fab0 f080 	clzne	r0, r0
 801b5d8:	0940      	lsrne	r0, r0, #5
}
 801b5da:	4770      	bx	lr

0801b5dc <device_required_foreach>:

int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
 801b5dc:	b470      	push	{r4, r5, r6}
 801b5de:	6940      	ldr	r0, [r0, #20]
 801b5e0:	460d      	mov	r5, r1
 801b5e2:	4613      	mov	r3, r2
	if (rv != NULL) {
 801b5e4:	b960      	cbnz	r0, 801b600 <device_required_foreach+0x24>
	size_t handle_count = 0;
 801b5e6:	4601      	mov	r1, r0
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);

	return device_visitor(handles, handle_count, visitor_cb, context);
 801b5e8:	462a      	mov	r2, r5
}
 801b5ea:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
 801b5ec:	f7f6 b864 	b.w	80116b8 <device_visitor>
			++i;
 801b5f0:	3101      	adds	r1, #1
		while ((rv[i] != DEVICE_HANDLE_ENDS) &&
 801b5f2:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
 801b5f6:	4434      	add	r4, r6
 801b5f8:	b2a4      	uxth	r4, r4
 801b5fa:	4294      	cmp	r4, r2
 801b5fc:	d9f8      	bls.n	801b5f0 <device_required_foreach+0x14>
 801b5fe:	e7f3      	b.n	801b5e8 <device_required_foreach+0xc>
		size_t i = 0;
 801b600:	2100      	movs	r1, #0
		while ((rv[i] != DEVICE_HANDLE_ENDS) &&
 801b602:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801b606:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801b60a:	e7f2      	b.n	801b5f2 <device_required_foreach+0x16>

0801b60c <arch_system_halt>:
	__asm__ volatile(
 801b60c:	f04f 0210 	mov.w	r2, #16
 801b610:	f3ef 8311 	mrs	r3, BASEPRI
 801b614:	f382 8812 	msr	BASEPRI_MAX, r2
 801b618:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 801b61c:	e7fe      	b.n	801b61c <arch_system_halt+0x10>

0801b61e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 801b61e:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 801b620:	f7ff fff4 	bl	801b60c <arch_system_halt>

0801b624 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 801b624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b626:	4605      	mov	r5, r0
 801b628:	460e      	mov	r6, r1
 801b62a:	f04f 0310 	mov.w	r3, #16
 801b62e:	f3ef 8711 	mrs	r7, BASEPRI
 801b632:	f383 8812 	msr	BASEPRI_MAX, r3
 801b636:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 801b63a:	f7f7 f9dd 	bl	80129f8 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 801b63e:	4631      	mov	r1, r6
 801b640:	4604      	mov	r4, r0
 801b642:	4628      	mov	r0, r5
 801b644:	f7ff ffeb 	bl	801b61e <k_sys_fatal_error_handler>
	__asm__ volatile(
 801b648:	f387 8811 	msr	BASEPRI, r7
 801b64c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 801b650:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 801b652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b656:	f7e8 bc3d 	b.w	8003ed4 <z_impl_k_thread_abort>

0801b65a <z_early_memset>:
	(void) memset(dst, c, n);
 801b65a:	f7f9 bb17 	b.w	8014c8c <memset>

0801b65e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 801b65e:	f7f9 bb0a 	b.w	8014c76 <memcpy>

0801b662 <k_heap_init>:
{
 801b662:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
 801b664:	f100 040c 	add.w	r4, r0, #12
 801b668:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 801b66c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 801b66e:	f7f7 bf8c 	b.w	801358a <sys_heap_init>

0801b672 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 801b672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b676:	b085      	sub	sp, #20
 801b678:	4607      	mov	r7, r0
 801b67a:	4688      	mov	r8, r1
 801b67c:	4691      	mov	r9, r2
 801b67e:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 801b682:	4650      	mov	r0, sl
 801b684:	4621      	mov	r1, r4
 801b686:	f000 fbc1 	bl	801be0c <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
 801b68a:	f1b4 3fff 	cmp.w	r4, #4294967295
 801b68e:	bf08      	it	eq
 801b690:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 801b694:	4605      	mov	r5, r0
 801b696:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
 801b698:	bf04      	itt	eq
 801b69a:	f04f 35ff 	moveq.w	r5, #4294967295
 801b69e:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
 801b6a2:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
 801b6a6:	f04f 0310 	mov.w	r3, #16
 801b6aa:	f3ef 8411 	mrs	r4, BASEPRI
 801b6ae:	f383 8812 	msr	BASEPRI_MAX, r3
 801b6b2:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 801b6b6:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 801b6ba:	464a      	mov	r2, r9
 801b6bc:	4641      	mov	r1, r8
 801b6be:	4638      	mov	r0, r7
 801b6c0:	f7f7 fee6 	bl	8013490 <sys_heap_aligned_alloc>
 801b6c4:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
 801b6c6:	f7f7 fb7f 	bl	8012dc8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 801b6ca:	9b03      	ldr	r3, [sp, #12]
 801b6cc:	b13b      	cbz	r3, 801b6de <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
 801b6ce:	f384 8811 	msr	BASEPRI, r4
 801b6d2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	b005      	add	sp, #20
 801b6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
 801b6de:	1a28      	subs	r0, r5, r0
 801b6e0:	eb66 0101 	sbc.w	r1, r6, r1
 801b6e4:	2801      	cmp	r0, #1
 801b6e6:	f171 0200 	sbcs.w	r2, r1, #0
 801b6ea:	dbf0      	blt.n	801b6ce <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 801b6ec:	465a      	mov	r2, fp
 801b6ee:	e9cd 0100 	strd	r0, r1, [sp]
 801b6f2:	4621      	mov	r1, r4
 801b6f4:	4650      	mov	r0, sl
 801b6f6:	f7f7 f823 	bl	8012740 <z_pend_curr>
	__asm__ volatile(
 801b6fa:	f04f 0310 	mov.w	r3, #16
 801b6fe:	f3ef 8411 	mrs	r4, BASEPRI
 801b702:	f383 8812 	msr	BASEPRI_MAX, r3
 801b706:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
 801b70a:	e7d6      	b.n	801b6ba <k_heap_aligned_alloc+0x48>

0801b70c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
 801b70c:	b538      	push	{r3, r4, r5, lr}
 801b70e:	4604      	mov	r4, r0
 801b710:	f04f 0310 	mov.w	r3, #16
 801b714:	f3ef 8511 	mrs	r5, BASEPRI
 801b718:	f383 8812 	msr	BASEPRI_MAX, r3
 801b71c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
 801b720:	f7f7 fe6c 	bl	80133fc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
 801b724:	f104 000c 	add.w	r0, r4, #12
 801b728:	f000 fb16 	bl	801bd58 <z_unpend_all>
 801b72c:	b130      	cbz	r0, 801b73c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
 801b72e:	4629      	mov	r1, r5
 801b730:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 801b734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
 801b738:	f7f6 becc 	b.w	80124d4 <z_reschedule>
	__asm__ volatile(
 801b73c:	f385 8811 	msr	BASEPRI, r5
 801b740:	f3bf 8f6f 	isb	sy
}
 801b744:	bd38      	pop	{r3, r4, r5, pc}

0801b746 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 801b746:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801b74a:	4313      	orrs	r3, r2
 801b74c:	f013 0303 	ands.w	r3, r3, #3
 801b750:	d10c      	bne.n	801b76c <create_free_list+0x26>
	slab->free_list = NULL;
 801b752:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 801b754:	6881      	ldr	r1, [r0, #8]
 801b756:	4299      	cmp	r1, r3
 801b758:	d801      	bhi.n	801b75e <create_free_list+0x18>
	return 0;
 801b75a:	2000      	movs	r0, #0
 801b75c:	4770      	bx	lr
		*(char **)p = slab->free_list;
 801b75e:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 801b760:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
 801b762:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
 801b764:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
 801b766:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
 801b768:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 801b76a:	e7f3      	b.n	801b754 <create_free_list+0xe>
		return -EINVAL;
 801b76c:	f06f 0015 	mvn.w	r0, #21
}
 801b770:	4770      	bx	lr

0801b772 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 801b772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b774:	4604      	mov	r4, r0
 801b776:	460d      	mov	r5, r1
	__asm__ volatile(
 801b778:	f04f 0310 	mov.w	r3, #16
 801b77c:	f3ef 8611 	mrs	r6, BASEPRI
 801b780:	f383 8812 	msr	BASEPRI_MAX, r3
 801b784:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 801b788:	6947      	ldr	r7, [r0, #20]
 801b78a:	b97f      	cbnz	r7, 801b7ac <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 801b78c:	f000 facc 	bl	801bd28 <z_unpend_first_thread>

		if (pending_thread != NULL) {
 801b790:	b160      	cbz	r0, 801b7ac <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 801b792:	682a      	ldr	r2, [r5, #0]
 801b794:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 801b798:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
 801b79a:	f000 fa50 	bl	801bc3e <z_ready_thread>
			z_reschedule(&slab->lock, key);
 801b79e:	4631      	mov	r1, r6
 801b7a0:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 801b7a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
 801b7a8:	f7f6 be94 	b.w	80124d4 <z_reschedule>
	**(char ***) mem = slab->free_list;
 801b7ac:	682b      	ldr	r3, [r5, #0]
 801b7ae:	6962      	ldr	r2, [r4, #20]
 801b7b0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 801b7b2:	682b      	ldr	r3, [r5, #0]
 801b7b4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
 801b7b6:	69a3      	ldr	r3, [r4, #24]
 801b7b8:	3b01      	subs	r3, #1
 801b7ba:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 801b7bc:	f386 8811 	msr	BASEPRI, r6
 801b7c0:	f3bf 8f6f 	isb	sy
}
 801b7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b7c6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b7c6:	f3ef 8005 	mrs	r0, IPSR
}
 801b7ca:	3800      	subs	r0, #0
 801b7cc:	bf18      	it	ne
 801b7ce:	2001      	movne	r0, #1
 801b7d0:	4770      	bx	lr

0801b7d2 <k_thread_name_get>:
}
 801b7d2:	3078      	adds	r0, #120	; 0x78
 801b7d4:	4770      	bx	lr

0801b7d6 <z_impl_k_thread_start>:
	z_sched_start(thread);
 801b7d6:	f7f6 bf65 	b.w	80126a4 <z_sched_start>

0801b7da <z_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_stack_space_get(const uint8_t *stack_start, size_t size, size_t *unused_ptr)
{
	size_t unused = 0;
 801b7da:	2300      	movs	r3, #0
{
 801b7dc:	b510      	push	{r4, lr}
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
 801b7de:	428b      	cmp	r3, r1
 801b7e0:	d102      	bne.n	801b7e8 <z_stack_space_get+0xe>
	}

	*unused_ptr = unused;

	return 0;
}
 801b7e2:	2000      	movs	r0, #0
	*unused_ptr = unused;
 801b7e4:	6013      	str	r3, [r2, #0]
}
 801b7e6:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
 801b7e8:	5cc4      	ldrb	r4, [r0, r3]
 801b7ea:	2caa      	cmp	r4, #170	; 0xaa
 801b7ec:	d1f9      	bne.n	801b7e2 <z_stack_space_get+0x8>
			unused++;
 801b7ee:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
 801b7f0:	e7f5      	b.n	801b7de <z_stack_space_get+0x4>

0801b7f2 <z_impl_k_thread_stack_space_get>:

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
 801b7f2:	460a      	mov	r2, r1
	return z_stack_space_get((const uint8_t *)thread->stack_info.start,
 801b7f4:	e9d0 0127 	ldrd	r0, r1, [r0, #156]	; 0x9c
 801b7f8:	f7ff bfef 	b.w	801b7da <z_stack_space_get>

0801b7fc <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
 801b7fc:	f04f 7041 	mov.w	r0, #50593792	; 0x3040000
 801b800:	4770      	bx	lr

0801b802 <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
 801b802:	b508      	push	{r3, lr}
	__asm__ volatile(
 801b804:	f04f 0210 	mov.w	r2, #16
 801b808:	f3ef 8311 	mrs	r3, BASEPRI
 801b80c:	f382 8812 	msr	BASEPRI_MAX, r2
 801b810:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 801b814:	f7e8 f8aa 	bl	800396c <arch_cpu_idle>
 801b818:	e7f4      	b.n	801b804 <idle+0x2>

0801b81a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 801b81a:	f990 300e 	ldrsb.w	r3, [r0, #14]
 801b81e:	428b      	cmp	r3, r1
 801b820:	d001      	beq.n	801b826 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 801b822:	f7f6 bfab 	b.w	801277c <z_set_prio>
}
 801b826:	2000      	movs	r0, #0
 801b828:	4770      	bx	lr

0801b82a <z_impl_k_mutex_init>:
{
 801b82a:	4603      	mov	r3, r0
	mutex->owner = NULL;
 801b82c:	2000      	movs	r0, #0
 801b82e:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
 801b832:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
 801b836:	4770      	bx	lr

0801b838 <queue_insert>:
{
 801b838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b83c:	4699      	mov	r9, r3
 801b83e:	4604      	mov	r4, r0
 801b840:	460d      	mov	r5, r1
 801b842:	4690      	mov	r8, r2
 801b844:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 801b848:	f100 0608 	add.w	r6, r0, #8
 801b84c:	f04f 0210 	mov.w	r2, #16
 801b850:	f3ef 8711 	mrs	r7, BASEPRI
 801b854:	f382 8812 	msr	BASEPRI_MAX, r2
 801b858:	f3bf 8f6f 	isb	sy
	if (is_append) {
 801b85c:	b103      	cbz	r3, 801b860 <queue_insert+0x28>
	return list->tail;
 801b85e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 801b860:	4630      	mov	r0, r6
 801b862:	f000 fa61 	bl	801bd28 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
 801b866:	b160      	cbz	r0, 801b882 <queue_insert+0x4a>
 801b868:	2400      	movs	r4, #0
 801b86a:	f8c0 8014 	str.w	r8, [r0, #20]
 801b86e:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
	z_ready_thread(thread);
 801b872:	f000 f9e4 	bl	801bc3e <z_ready_thread>
	z_reschedule(&queue->lock, key);
 801b876:	4630      	mov	r0, r6
 801b878:	4639      	mov	r1, r7
 801b87a:	f7f6 fe2b 	bl	80124d4 <z_reschedule>
	return 0;
 801b87e:	2000      	movs	r0, #0
 801b880:	e00c      	b.n	801b89c <queue_insert+0x64>
	if (alloc) {
 801b882:	f1b9 0f00 	cmp.w	r9, #0
 801b886:	d01b      	beq.n	801b8c0 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
 801b888:	2108      	movs	r1, #8
 801b88a:	f7f7 fb53 	bl	8012f34 <z_thread_aligned_alloc>
		if (anode == NULL) {
 801b88e:	b938      	cbnz	r0, 801b8a0 <queue_insert+0x68>
	__asm__ volatile(
 801b890:	f387 8811 	msr	BASEPRI, r7
 801b894:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 801b898:	f06f 000b 	mvn.w	r0, #11
}
 801b89c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
 801b8a0:	2301      	movs	r3, #1
		anode->data = data;
 801b8a2:	f8c0 8004 	str.w	r8, [r0, #4]
 801b8a6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801b8a8:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 801b8aa:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
 801b8ae:	b95d      	cbnz	r5, 801b8c8 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
 801b8b0:	6823      	ldr	r3, [r4, #0]
 801b8b2:	4313      	orrs	r3, r2
 801b8b4:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 801b8b6:	6863      	ldr	r3, [r4, #4]
	list->head = node;
 801b8b8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
 801b8ba:	b973      	cbnz	r3, 801b8da <queue_insert+0xa2>
	list->tail = node;
 801b8bc:	6060      	str	r0, [r4, #4]
}
 801b8be:	e00c      	b.n	801b8da <queue_insert+0xa2>
}
 801b8c0:	4640      	mov	r0, r8
	node->next_and_flags = flags;
 801b8c2:	f8c8 9000 	str.w	r9, [r8]
}
 801b8c6:	e7ef      	b.n	801b8a8 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 801b8c8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 801b8ca:	f033 0303 	bics.w	r3, r3, #3
 801b8ce:	d110      	bne.n	801b8f2 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
 801b8d0:	6002      	str	r2, [r0, #0]
	return list->tail;
 801b8d2:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 801b8d4:	b93a      	cbnz	r2, 801b8e6 <queue_insert+0xae>
	list->head = node;
 801b8d6:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
 801b8da:	2104      	movs	r1, #4
 801b8dc:	f104 0010 	add.w	r0, r4, #16
 801b8e0:	f000 fc1a 	bl	801c118 <z_handle_obj_poll_events>
 801b8e4:	e7c7      	b.n	801b876 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801b8e6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 801b8e8:	f003 0303 	and.w	r3, r3, #3
 801b8ec:	4303      	orrs	r3, r0
 801b8ee:	6013      	str	r3, [r2, #0]
 801b8f0:	e7e4      	b.n	801b8bc <queue_insert+0x84>
 801b8f2:	4313      	orrs	r3, r2
 801b8f4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801b8f6:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
 801b8f8:	f003 0303 	and.w	r3, r3, #3
 801b8fc:	4303      	orrs	r3, r0
 801b8fe:	602b      	str	r3, [r5, #0]
}
 801b900:	e7eb      	b.n	801b8da <queue_insert+0xa2>

0801b902 <z_queue_node_peek>:
{
 801b902:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
 801b904:	4604      	mov	r4, r0
 801b906:	b130      	cbz	r0, 801b916 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801b908:	6802      	ldr	r2, [r0, #0]
 801b90a:	0793      	lsls	r3, r2, #30
 801b90c:	d003      	beq.n	801b916 <z_queue_node_peek+0x14>
		ret = anode->data;
 801b90e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 801b910:	b109      	cbz	r1, 801b916 <z_queue_node_peek+0x14>
			k_free(anode);
 801b912:	f000 fc1c 	bl	801c14e <k_free>
}
 801b916:	4620      	mov	r0, r4
 801b918:	bd10      	pop	{r4, pc}

0801b91a <z_impl_k_queue_init>:
	list->head = NULL;
 801b91a:	2300      	movs	r3, #0
	list->tail = NULL;
 801b91c:	e9c0 3300 	strd	r3, r3, [r0]
 801b920:	f100 0308 	add.w	r3, r0, #8
 801b924:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
 801b928:	f100 0310 	add.w	r3, r0, #16
 801b92c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
 801b930:	4770      	bx	lr

0801b932 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
 801b932:	2301      	movs	r3, #1
{
 801b934:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
 801b936:	9300      	str	r3, [sp, #0]
 801b938:	2300      	movs	r3, #0
{
 801b93a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
 801b93c:	4619      	mov	r1, r3
 801b93e:	f7ff ff7b 	bl	801b838 <queue_insert>
}
 801b942:	b003      	add	sp, #12
 801b944:	f85d fb04 	ldr.w	pc, [sp], #4

0801b948 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
 801b948:	2300      	movs	r3, #0
{
 801b94a:	b507      	push	{r0, r1, r2, lr}
 801b94c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
 801b94e:	4619      	mov	r1, r3
 801b950:	9300      	str	r3, [sp, #0]
 801b952:	f7ff ff71 	bl	801b838 <queue_insert>
}
 801b956:	b003      	add	sp, #12
 801b958:	f85d fb04 	ldr.w	pc, [sp], #4

0801b95c <k_queue_unique_append>:

	return ret;
}

bool k_queue_unique_append(struct k_queue *queue, void *data)
{
 801b95c:	b508      	push	{r3, lr}
	return list->head;
 801b95e:	6803      	ldr	r3, [r0, #0]
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, unique_append, queue);

	sys_sfnode_t *test;

	SYS_SFLIST_FOR_EACH_NODE(&queue->data_q, test) {
 801b960:	b91b      	cbnz	r3, 801b96a <k_queue_unique_append+0xe>

			return false;
		}
	}

	k_queue_append(queue, data);
 801b962:	f7ff ffe6 	bl	801b932 <k_queue_append>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, unique_append, queue, true);

	return true;
 801b966:	2001      	movs	r0, #1
}
 801b968:	bd08      	pop	{r3, pc}
		if (test == (sys_sfnode_t *) data) {
 801b96a:	428b      	cmp	r3, r1
 801b96c:	d003      	beq.n	801b976 <k_queue_unique_append+0x1a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	f023 0303 	bic.w	r3, r3, #3
 801b974:	e7f4      	b.n	801b960 <k_queue_unique_append+0x4>
			return false;
 801b976:	2000      	movs	r0, #0
 801b978:	e7f6      	b.n	801b968 <k_queue_unique_append+0xc>

0801b97a <z_impl_k_queue_peek_head>:

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
 801b97a:	2100      	movs	r1, #0
 801b97c:	6800      	ldr	r0, [r0, #0]
 801b97e:	f7ff bfc0 	b.w	801b902 <z_queue_node_peek>

0801b982 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 801b982:	b15a      	cbz	r2, 801b99c <z_impl_k_sem_init+0x1a>
 801b984:	428a      	cmp	r2, r1
 801b986:	d309      	bcc.n	801b99c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
 801b988:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 801b98c:	e9c0 1202 	strd	r1, r2, [r0, #8]
 801b990:	e9c0 0000 	strd	r0, r0, [r0]
 801b994:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
 801b998:	2000      	movs	r0, #0
 801b99a:	4770      	bx	lr
		return -EINVAL;
 801b99c:	f06f 0015 	mvn.w	r0, #21
}
 801b9a0:	4770      	bx	lr

0801b9a2 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
 801b9a2:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
 801b9a4:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 801b9a6:	408b      	lsls	r3, r1
 801b9a8:	ea22 0303 	bic.w	r3, r2, r3
 801b9ac:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 801b9ae:	fa22 f001 	lsr.w	r0, r2, r1
}
 801b9b2:	f000 0001 	and.w	r0, r0, #1
 801b9b6:	4770      	bx	lr

0801b9b8 <unschedule_locked>:
{
 801b9b8:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 801b9ba:	2103      	movs	r1, #3
{
 801b9bc:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 801b9be:	300c      	adds	r0, #12
 801b9c0:	f7ff ffef 	bl	801b9a2 <flag_test_and_clear>
 801b9c4:	b130      	cbz	r0, 801b9d4 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
 801b9c6:	f104 0010 	add.w	r0, r4, #16
 801b9ca:	f000 f9f3 	bl	801bdb4 <z_abort_timeout>
 801b9ce:	fab0 f080 	clz	r0, r0
 801b9d2:	0940      	lsrs	r0, r0, #5
}
 801b9d4:	bd10      	pop	{r4, pc}

0801b9d6 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 801b9d6:	b120      	cbz	r0, 801b9e2 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 801b9d8:	2200      	movs	r2, #0
 801b9da:	30c0      	adds	r0, #192	; 0xc0
 801b9dc:	4611      	mov	r1, r2
 801b9de:	f000 b9cb 	b.w	801bd78 <z_sched_wake>
}
 801b9e2:	4770      	bx	lr

0801b9e4 <cancel_async_locked>:
{
 801b9e4:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
 801b9e6:	68c3      	ldr	r3, [r0, #12]
{
 801b9e8:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 801b9ea:	f3c3 0640 	ubfx	r6, r3, #1, #1
 801b9ee:	079b      	lsls	r3, r3, #30
 801b9f0:	d416      	bmi.n	801ba20 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
 801b9f2:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
 801b9f4:	2102      	movs	r1, #2
 801b9f6:	300c      	adds	r0, #12
 801b9f8:	f7ff ffd3 	bl	801b9a2 <flag_test_and_clear>
 801b9fc:	b180      	cbz	r0, 801ba20 <cancel_async_locked+0x3c>
	return list->head;
 801b9fe:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801ba02:	b16a      	cbz	r2, 801ba20 <cancel_async_locked+0x3c>
 801ba04:	4294      	cmp	r4, r2
 801ba06:	d11d      	bne.n	801ba44 <cancel_async_locked+0x60>
	return node->next;
 801ba08:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 801ba0a:	b99e      	cbnz	r6, 801ba34 <cancel_async_locked+0x50>
 801ba0c:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
	list->head = node;
 801ba10:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
Z_GENLIST_REMOVE(slist, snode)
 801ba14:	429c      	cmp	r4, r3
 801ba16:	d101      	bne.n	801ba1c <cancel_async_locked+0x38>
	list->tail = node;
 801ba18:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
	parent->next = child;
 801ba1c:	2300      	movs	r3, #0
 801ba1e:	6023      	str	r3, [r4, #0]
	return *flagp;
 801ba20:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
 801ba22:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
 801ba26:	bf1e      	ittt	ne
 801ba28:	f043 0302 	orrne.w	r3, r3, #2
	return flags_get(&work->flags) & K_WORK_MASK;
 801ba2c:	f003 000f 	andne.w	r0, r3, #15
	*flagp |= BIT(bit);
 801ba30:	60e3      	strne	r3, [r4, #12]
}
 801ba32:	bd70      	pop	{r4, r5, r6, pc}
 801ba34:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 801ba36:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
 801ba3a:	4294      	cmp	r4, r2
	list->tail = node;
 801ba3c:	bf08      	it	eq
 801ba3e:	f8c5 60bc 	streq.w	r6, [r5, #188]	; 0xbc
}
 801ba42:	e7eb      	b.n	801ba1c <cancel_async_locked+0x38>
	return node->next;
 801ba44:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801ba46:	6812      	ldr	r2, [r2, #0]
 801ba48:	e7db      	b.n	801ba02 <cancel_async_locked+0x1e>

0801ba4a <work_timeout>:
{
 801ba4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ba4c:	4604      	mov	r4, r0
	__asm__ volatile(
 801ba4e:	f04f 0310 	mov.w	r3, #16
 801ba52:	f3ef 8511 	mrs	r5, BASEPRI
 801ba56:	f383 8812 	msr	BASEPRI_MAX, r3
 801ba5a:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
 801ba5e:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 801ba60:	f1a0 0610 	sub.w	r6, r0, #16
 801ba64:	2103      	movs	r1, #3
 801ba66:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
 801ba68:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 801ba6a:	f7ff ff9a 	bl	801b9a2 <flag_test_and_clear>
 801ba6e:	b128      	cbz	r0, 801ba7c <work_timeout+0x32>
		queue = dw->queue;
 801ba70:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
 801ba72:	a901      	add	r1, sp, #4
 801ba74:	4630      	mov	r0, r6
		queue = dw->queue;
 801ba76:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 801ba78:	f7f6 fbe8 	bl	801224c <submit_to_queue_locked>
	__asm__ volatile(
 801ba7c:	f385 8811 	msr	BASEPRI, r5
 801ba80:	f3bf 8f6f 	isb	sy
}
 801ba84:	b002      	add	sp, #8
 801ba86:	bd70      	pop	{r4, r5, r6, pc}

0801ba88 <k_work_init>:
{
 801ba88:	b538      	push	{r3, r4, r5, lr}
 801ba8a:	4604      	mov	r4, r0
 801ba8c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 801ba8e:	2210      	movs	r2, #16
 801ba90:	2100      	movs	r1, #0
 801ba92:	f7f9 f8fb 	bl	8014c8c <memset>
 801ba96:	6065      	str	r5, [r4, #4]
}
 801ba98:	bd38      	pop	{r3, r4, r5, pc}

0801ba9a <k_work_busy_get>:
	__asm__ volatile(
 801ba9a:	f04f 0210 	mov.w	r2, #16
 801ba9e:	f3ef 8311 	mrs	r3, BASEPRI
 801baa2:	f382 8812 	msr	BASEPRI_MAX, r2
 801baa6:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
 801baaa:	68c0      	ldr	r0, [r0, #12]
 801baac:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
 801bab0:	f383 8811 	msr	BASEPRI, r3
 801bab4:	f3bf 8f6f 	isb	sy
}
 801bab8:	4770      	bx	lr

0801baba <z_work_submit_to_queue>:
{
 801baba:	b513      	push	{r0, r1, r4, lr}
 801babc:	9001      	str	r0, [sp, #4]
 801babe:	4608      	mov	r0, r1
	__asm__ volatile(
 801bac0:	f04f 0310 	mov.w	r3, #16
 801bac4:	f3ef 8411 	mrs	r4, BASEPRI
 801bac8:	f383 8812 	msr	BASEPRI_MAX, r3
 801bacc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 801bad0:	a901      	add	r1, sp, #4
 801bad2:	f7f6 fbbb 	bl	801224c <submit_to_queue_locked>
	__asm__ volatile(
 801bad6:	f384 8811 	msr	BASEPRI, r4
 801bada:	f3bf 8f6f 	isb	sy
}
 801bade:	b002      	add	sp, #8
 801bae0:	bd10      	pop	{r4, pc}

0801bae2 <k_work_submit_to_queue>:
{
 801bae2:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
 801bae4:	f7ff ffe9 	bl	801baba <z_work_submit_to_queue>
	if (ret > 0) {
 801bae8:	1e04      	subs	r4, r0, #0
 801baea:	dd09      	ble.n	801bb00 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
 801baec:	f04f 0310 	mov.w	r3, #16
 801baf0:	f3ef 8011 	mrs	r0, BASEPRI
 801baf4:	f383 8812 	msr	BASEPRI_MAX, r3
 801baf8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 801bafc:	f000 f883 	bl	801bc06 <z_reschedule_irqlock>
}
 801bb00:	4620      	mov	r0, r4
 801bb02:	bd10      	pop	{r4, pc}

0801bb04 <k_work_init_delayable>:
{
 801bb04:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
 801bb06:	2230      	movs	r2, #48	; 0x30
{
 801bb08:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 801bb0a:	2100      	movs	r1, #0
{
 801bb0c:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
 801bb0e:	f7f9 f8bd 	bl	8014c8c <memset>
 801bb12:	f44f 7380 	mov.w	r3, #256	; 0x100
 801bb16:	6065      	str	r5, [r4, #4]
 801bb18:	60e3      	str	r3, [r4, #12]
}
 801bb1a:	bd38      	pop	{r3, r4, r5, pc}

0801bb1c <k_work_delayable_busy_get>:
 801bb1c:	f7ff bfbd 	b.w	801ba9a <k_work_busy_get>

0801bb20 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
 801bb20:	b538      	push	{r3, r4, r5, lr}
 801bb22:	4604      	mov	r4, r0
 801bb24:	f04f 0310 	mov.w	r3, #16
 801bb28:	f3ef 8511 	mrs	r5, BASEPRI
 801bb2c:	f383 8812 	msr	BASEPRI_MAX, r3
 801bb30:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
 801bb34:	f7ff ff40 	bl	801b9b8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
 801bb38:	4620      	mov	r0, r4
 801bb3a:	f7ff ff53 	bl	801b9e4 <cancel_async_locked>
	__asm__ volatile(
 801bb3e:	f385 8811 	msr	BASEPRI, r5
 801bb42:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
 801bb46:	bd38      	pop	{r3, r4, r5, pc}

0801bb48 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
 801bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb4a:	4604      	mov	r4, r0
 801bb4c:	460d      	mov	r5, r1
	__asm__ volatile(
 801bb4e:	f04f 0310 	mov.w	r3, #16
 801bb52:	f3ef 8711 	mrs	r7, BASEPRI
 801bb56:	f383 8812 	msr	BASEPRI_MAX, r3
 801bb5a:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
 801bb5e:	68c3      	ldr	r3, [r0, #12]
 801bb60:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	bf14      	ite	ne
 801bb68:	2601      	movne	r6, #1
 801bb6a:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
 801bb6c:	d009      	beq.n	801bb82 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
 801bb6e:	f7ff ff23 	bl	801b9b8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
 801bb72:	4620      	mov	r0, r4
 801bb74:	f7ff ff36 	bl	801b9e4 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
 801bb78:	4629      	mov	r1, r5
 801bb7a:	4620      	mov	r0, r4
 801bb7c:	f7f6 fb48 	bl	8012210 <cancel_sync_locked>
 801bb80:	4603      	mov	r3, r0
	__asm__ volatile(
 801bb82:	f387 8811 	msr	BASEPRI, r7
 801bb86:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
 801bb8a:	b13b      	cbz	r3, 801bb9c <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
 801bb8c:	f04f 32ff 	mov.w	r2, #4294967295
 801bb90:	f04f 33ff 	mov.w	r3, #4294967295
 801bb94:	f105 0008 	add.w	r0, r5, #8
 801bb98:	f7f6 fa58 	bl	801204c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
 801bb9c:	4630      	mov	r0, r6
 801bb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bba0 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 801bba0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 801bba4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 801bba6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801bba8:	2300      	movs	r3, #0
	node->prev = NULL;
 801bbaa:	e9c0 3300 	strd	r3, r3, [r0]
}
 801bbae:	4770      	bx	lr

0801bbb0 <unpend_thread_no_timeout>:
{
 801bbb0:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 801bbb2:	f7ff fff5 	bl	801bba0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 801bbb6:	7b43      	ldrb	r3, [r0, #13]
 801bbb8:	f023 0302 	bic.w	r3, r3, #2
 801bbbc:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 801bbbe:	2300      	movs	r3, #0
 801bbc0:	6083      	str	r3, [r0, #8]
}
 801bbc2:	bd08      	pop	{r3, pc}

0801bbc4 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 801bbc4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 801bbc8:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 801bbcc:	4283      	cmp	r3, r0
		return b2 - b1;
 801bbce:	bf14      	ite	ne
 801bbd0:	1ac0      	subne	r0, r0, r3
	return 0;
 801bbd2:	2000      	moveq	r0, #0
}
 801bbd4:	4770      	bx	lr

0801bbd6 <z_unpend_thread>:
{
 801bbd6:	4601      	mov	r1, r0
 801bbd8:	b510      	push	{r4, lr}
	__asm__ volatile(
 801bbda:	f04f 0310 	mov.w	r3, #16
 801bbde:	f3ef 8411 	mrs	r4, BASEPRI
 801bbe2:	f383 8812 	msr	BASEPRI_MAX, r3
 801bbe6:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
 801bbea:	6883      	ldr	r3, [r0, #8]
 801bbec:	b10b      	cbz	r3, 801bbf2 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
 801bbee:	f7ff ffdf 	bl	801bbb0 <unpend_thread_no_timeout>
	__asm__ volatile(
 801bbf2:	f384 8811 	msr	BASEPRI, r4
 801bbf6:	f3bf 8f6f 	isb	sy
 801bbfa:	f101 0018 	add.w	r0, r1, #24
}
 801bbfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc02:	f000 b8d7 	b.w	801bdb4 <z_abort_timeout>

0801bc06 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 801bc06:	4603      	mov	r3, r0
 801bc08:	b920      	cbnz	r0, 801bc14 <z_reschedule_irqlock+0xe>
 801bc0a:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 801bc0e:	b90a      	cbnz	r2, 801bc14 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 801bc10:	f7e7 bf2a 	b.w	8003a68 <arch_swap>
 801bc14:	f383 8811 	msr	BASEPRI, r3
 801bc18:	f3bf 8f6f 	isb	sy
}
 801bc1c:	4770      	bx	lr

0801bc1e <z_reschedule_unlocked>:
	__asm__ volatile(
 801bc1e:	f04f 0310 	mov.w	r3, #16
 801bc22:	f3ef 8011 	mrs	r0, BASEPRI
 801bc26:	f383 8812 	msr	BASEPRI_MAX, r3
 801bc2a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 801bc2e:	f7ff bfea 	b.w	801bc06 <z_reschedule_irqlock>

0801bc32 <z_priq_dumb_best>:
{
 801bc32:	4603      	mov	r3, r0
	return list->head == list;
 801bc34:	6800      	ldr	r0, [r0, #0]
}
 801bc36:	4283      	cmp	r3, r0
 801bc38:	bf08      	it	eq
 801bc3a:	2000      	moveq	r0, #0
 801bc3c:	4770      	bx	lr

0801bc3e <z_ready_thread>:
{
 801bc3e:	b510      	push	{r4, lr}
 801bc40:	f04f 0310 	mov.w	r3, #16
 801bc44:	f3ef 8411 	mrs	r4, BASEPRI
 801bc48:	f383 8812 	msr	BASEPRI_MAX, r3
 801bc4c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 801bc50:	f7f6 fcf2 	bl	8012638 <ready_thread>
	__asm__ volatile(
 801bc54:	f384 8811 	msr	BASEPRI, r4
 801bc58:	f3bf 8f6f 	isb	sy
}
 801bc5c:	bd10      	pop	{r4, pc}

0801bc5e <z_sched_wake_thread>:
{
 801bc5e:	b538      	push	{r3, r4, r5, lr}
 801bc60:	4604      	mov	r4, r0
	__asm__ volatile(
 801bc62:	f04f 0310 	mov.w	r3, #16
 801bc66:	f3ef 8511 	mrs	r5, BASEPRI
 801bc6a:	f383 8812 	msr	BASEPRI_MAX, r3
 801bc6e:	f3bf 8f6f 	isb	sy
		if (!killed) {
 801bc72:	7b43      	ldrb	r3, [r0, #13]
 801bc74:	f013 0f28 	tst.w	r3, #40	; 0x28
 801bc78:	d10b      	bne.n	801bc92 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
 801bc7a:	6883      	ldr	r3, [r0, #8]
 801bc7c:	b10b      	cbz	r3, 801bc82 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
 801bc7e:	f7ff ff97 	bl	801bbb0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 801bc82:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
 801bc84:	b951      	cbnz	r1, 801bc9c <z_sched_wake_thread+0x3e>
 801bc86:	f023 0304 	bic.w	r3, r3, #4
			ready_thread(thread);
 801bc8a:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 801bc8c:	7363      	strb	r3, [r4, #13]
 801bc8e:	f7f6 fcd3 	bl	8012638 <ready_thread>
	__asm__ volatile(
 801bc92:	f385 8811 	msr	BASEPRI, r5
 801bc96:	f3bf 8f6f 	isb	sy
}
 801bc9a:	bd38      	pop	{r3, r4, r5, pc}
 801bc9c:	f023 0314 	bic.w	r3, r3, #20
 801bca0:	e7f3      	b.n	801bc8a <z_sched_wake_thread+0x2c>

0801bca2 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
 801bca2:	2101      	movs	r1, #1
 801bca4:	3818      	subs	r0, #24
 801bca6:	f7ff bfda 	b.w	801bc5e <z_sched_wake_thread>

0801bcaa <add_to_waitq_locked>:
{
 801bcaa:	b538      	push	{r3, r4, r5, lr}
 801bcac:	4604      	mov	r4, r0
 801bcae:	460d      	mov	r5, r1
	unready_thread(thread);
 801bcb0:	f7f6 fd16 	bl	80126e0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 801bcb4:	7b63      	ldrb	r3, [r4, #13]
 801bcb6:	f043 0302 	orr.w	r3, r3, #2
 801bcba:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 801bcbc:	b195      	cbz	r5, 801bce4 <add_to_waitq_locked+0x3a>
		thread->base.pended_on = wait_q;
 801bcbe:	60a5      	str	r5, [r4, #8]
 801bcc0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801bcc2:	429d      	cmp	r5, r3
 801bcc4:	d015      	beq.n	801bcf2 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801bcc6:	b1a3      	cbz	r3, 801bcf2 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 801bcc8:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 801bccc:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 801bcd0:	4291      	cmp	r1, r2
 801bcd2:	d008      	beq.n	801bce6 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 801bcd4:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 801bcd6:	2a00      	cmp	r2, #0
 801bcd8:	dd05      	ble.n	801bce6 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 801bcda:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 801bcdc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 801bce0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 801bce2:	605c      	str	r4, [r3, #4]
}
 801bce4:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 801bce6:	686a      	ldr	r2, [r5, #4]
 801bce8:	4293      	cmp	r3, r2
 801bcea:	d002      	beq.n	801bcf2 <add_to_waitq_locked+0x48>
 801bcec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d1ec      	bne.n	801bccc <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 801bcf2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 801bcf4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 801bcf8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 801bcfa:	606c      	str	r4, [r5, #4]
}
 801bcfc:	e7f2      	b.n	801bce4 <add_to_waitq_locked+0x3a>

0801bcfe <z_unpend1_no_timeout>:
{
 801bcfe:	b510      	push	{r4, lr}
	__asm__ volatile(
 801bd00:	f04f 0310 	mov.w	r3, #16
 801bd04:	f3ef 8411 	mrs	r4, BASEPRI
 801bd08:	f383 8812 	msr	BASEPRI_MAX, r3
 801bd0c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 801bd10:	f7ff ff8f 	bl	801bc32 <z_priq_dumb_best>
		if (thread != NULL) {
 801bd14:	4601      	mov	r1, r0
 801bd16:	b108      	cbz	r0, 801bd1c <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 801bd18:	f7ff ff4a 	bl	801bbb0 <unpend_thread_no_timeout>
	__asm__ volatile(
 801bd1c:	f384 8811 	msr	BASEPRI, r4
 801bd20:	f3bf 8f6f 	isb	sy
}
 801bd24:	4608      	mov	r0, r1
 801bd26:	bd10      	pop	{r4, pc}

0801bd28 <z_unpend_first_thread>:
{
 801bd28:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 801bd2a:	f04f 0310 	mov.w	r3, #16
 801bd2e:	f3ef 8511 	mrs	r5, BASEPRI
 801bd32:	f383 8812 	msr	BASEPRI_MAX, r3
 801bd36:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 801bd3a:	f7ff ff7a 	bl	801bc32 <z_priq_dumb_best>
		if (thread != NULL) {
 801bd3e:	4604      	mov	r4, r0
 801bd40:	b120      	cbz	r0, 801bd4c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 801bd42:	f7ff ff35 	bl	801bbb0 <unpend_thread_no_timeout>
 801bd46:	3018      	adds	r0, #24
 801bd48:	f000 f834 	bl	801bdb4 <z_abort_timeout>
	__asm__ volatile(
 801bd4c:	f385 8811 	msr	BASEPRI, r5
 801bd50:	f3bf 8f6f 	isb	sy
}
 801bd54:	4620      	mov	r0, r4
 801bd56:	bd38      	pop	{r3, r4, r5, pc}

0801bd58 <z_unpend_all>:
{
 801bd58:	b538      	push	{r3, r4, r5, lr}
 801bd5a:	4605      	mov	r5, r0
	int need_sched = 0;
 801bd5c:	2000      	movs	r0, #0
	return list->head == list;
 801bd5e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801bd60:	42a5      	cmp	r5, r4
 801bd62:	d000      	beq.n	801bd66 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 801bd64:	b904      	cbnz	r4, 801bd68 <z_unpend_all+0x10>
}
 801bd66:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
 801bd68:	4620      	mov	r0, r4
 801bd6a:	f7ff ff34 	bl	801bbd6 <z_unpend_thread>
		z_ready_thread(thread);
 801bd6e:	4620      	mov	r0, r4
 801bd70:	f7ff ff65 	bl	801bc3e <z_ready_thread>
		need_sched = 1;
 801bd74:	2001      	movs	r0, #1
 801bd76:	e7f2      	b.n	801bd5e <z_unpend_all+0x6>

0801bd78 <z_sched_wake>:
{
 801bd78:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 801bd7a:	f04f 0310 	mov.w	r3, #16
 801bd7e:	f3ef 8511 	mrs	r5, BASEPRI
 801bd82:	f383 8812 	msr	BASEPRI_MAX, r3
 801bd86:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 801bd8a:	f7ff ff52 	bl	801bc32 <z_priq_dumb_best>
		if (thread != NULL) {
 801bd8e:	4604      	mov	r4, r0
 801bd90:	b158      	cbz	r0, 801bdaa <z_sched_wake+0x32>
 801bd92:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
 801bd96:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
 801bd98:	f7ff ff0a 	bl	801bbb0 <unpend_thread_no_timeout>
 801bd9c:	3018      	adds	r0, #24
 801bd9e:	f000 f809 	bl	801bdb4 <z_abort_timeout>
			ready_thread(thread);
 801bda2:	4620      	mov	r0, r4
 801bda4:	f7f6 fc48 	bl	8012638 <ready_thread>
			ret = true;
 801bda8:	2001      	movs	r0, #1
	__asm__ volatile(
 801bdaa:	f385 8811 	msr	BASEPRI, r5
 801bdae:	f3bf 8f6f 	isb	sy
}
 801bdb2:	bd38      	pop	{r3, r4, r5, pc}

0801bdb4 <z_abort_timeout>:
{
 801bdb4:	b510      	push	{r4, lr}
	__asm__ volatile(
 801bdb6:	f04f 0210 	mov.w	r2, #16
 801bdba:	f3ef 8411 	mrs	r4, BASEPRI
 801bdbe:	f382 8812 	msr	BASEPRI_MAX, r2
 801bdc2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 801bdc6:	6803      	ldr	r3, [r0, #0]
 801bdc8:	b13b      	cbz	r3, 801bdda <z_abort_timeout+0x26>
			remove_timeout(to);
 801bdca:	f7f6 fedf 	bl	8012b8c <remove_timeout>
			ret = 0;
 801bdce:	2000      	movs	r0, #0
	__asm__ volatile(
 801bdd0:	f384 8811 	msr	BASEPRI, r4
 801bdd4:	f3bf 8f6f 	isb	sy
}
 801bdd8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 801bdda:	f06f 0015 	mvn.w	r0, #21
 801bdde:	e7f7      	b.n	801bdd0 <z_abort_timeout+0x1c>

0801bde0 <z_timeout_remaining>:
{
 801bde0:	b510      	push	{r4, lr}
	__asm__ volatile(
 801bde2:	f04f 0310 	mov.w	r3, #16
 801bde6:	f3ef 8411 	mrs	r4, BASEPRI
 801bdea:	f383 8812 	msr	BASEPRI_MAX, r3
 801bdee:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
 801bdf2:	f7f6 fee7 	bl	8012bc4 <timeout_rem>
	__asm__ volatile(
 801bdf6:	f384 8811 	msr	BASEPRI, r4
 801bdfa:	f3bf 8f6f 	isb	sy
}
 801bdfe:	bd10      	pop	{r4, pc}

0801be00 <sys_clock_tick_get_32>:
{
 801be00:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 801be02:	f7f6 ffe1 	bl	8012dc8 <sys_clock_tick_get>
}
 801be06:	bd08      	pop	{r3, pc}

0801be08 <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 801be08:	f7f6 bfde 	b.w	8012dc8 <sys_clock_tick_get>

0801be0c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 801be0c:	f1b1 3fff 	cmp.w	r1, #4294967295
 801be10:	bf08      	it	eq
 801be12:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 801be16:	b538      	push	{r3, r4, r5, lr}
 801be18:	4605      	mov	r5, r0
 801be1a:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 801be1c:	d01d      	beq.n	801be5a <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 801be1e:	ea51 0300 	orrs.w	r3, r1, r0
 801be22:	d103      	bne.n	801be2c <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 801be24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
 801be28:	f7f6 bfce 	b.w	8012dc8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 801be2c:	f06f 0301 	mvn.w	r3, #1
 801be30:	1a18      	subs	r0, r3, r0
 801be32:	f04f 33ff 	mov.w	r3, #4294967295
 801be36:	eb63 0101 	sbc.w	r1, r3, r1
 801be3a:	2900      	cmp	r1, #0
 801be3c:	da0c      	bge.n	801be58 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
 801be3e:	f7f6 ffc3 	bl	8012dc8 <sys_clock_tick_get>
 801be42:	2d01      	cmp	r5, #1
 801be44:	4622      	mov	r2, r4
 801be46:	462b      	mov	r3, r5
 801be48:	f174 0400 	sbcs.w	r4, r4, #0
 801be4c:	bfbc      	itt	lt
 801be4e:	2301      	movlt	r3, #1
 801be50:	2200      	movlt	r2, #0
 801be52:	1818      	adds	r0, r3, r0
 801be54:	eb41 0102 	adc.w	r1, r1, r2
}
 801be58:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
 801be5a:	f04f 30ff 	mov.w	r0, #4294967295
 801be5e:	4601      	mov	r1, r0
 801be60:	e7fa      	b.n	801be58 <sys_clock_timeout_end_calc+0x4c>

0801be62 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 801be62:	b510      	push	{r4, lr}
 801be64:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
 801be66:	f7ff ffa5 	bl	801bdb4 <z_abort_timeout>

	if (inactive) {
 801be6a:	b9b0      	cbnz	r0, 801be9a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 801be6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801be6e:	b10b      	cbz	r3, 801be74 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 801be70:	4620      	mov	r0, r4
 801be72:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 801be74:	f104 0018 	add.w	r0, r4, #24
 801be78:	f7ff ff41 	bl	801bcfe <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 801be7c:	b168      	cbz	r0, 801be9a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 801be7e:	f7ff fede 	bl	801bc3e <z_ready_thread>
	__asm__ volatile(
 801be82:	f04f 0310 	mov.w	r3, #16
 801be86:	f3ef 8011 	mrs	r0, BASEPRI
 801be8a:	f383 8812 	msr	BASEPRI_MAX, r3
 801be8e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 801be92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 801be96:	f7ff beb6 	b.w	801bc06 <z_reschedule_irqlock>
 801be9a:	bd10      	pop	{r4, pc}

0801be9c <add_event>:
{
 801be9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be9e:	460d      	mov	r5, r1
 801bea0:	4604      	mov	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 801bea2:	e9d0 1300 	ldrd	r1, r3, [r0]
 801bea6:	4288      	cmp	r0, r1
 801bea8:	d00d      	beq.n	801bec6 <add_event+0x2a>
	if ((pending == NULL) ||
 801beaa:	b163      	cbz	r3, 801bec6 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 801beac:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 801beae:	b100      	cbz	r0, 801beb2 <add_event+0x16>
 801beb0:	3860      	subs	r0, #96	; 0x60
 801beb2:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 801beb6:	4639      	mov	r1, r7
 801beb8:	f7ff fe84 	bl	801bbc4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 801bebc:	2800      	cmp	r0, #0
 801bebe:	dc02      	bgt.n	801bec6 <add_event+0x2a>
	return list->head == list;
 801bec0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801bec2:	42b4      	cmp	r4, r6
 801bec4:	d109      	bne.n	801beda <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
 801bec6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
 801bec8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
 801becc:	601d      	str	r5, [r3, #0]
	list->tail = node;
 801bece:	6065      	str	r5, [r4, #4]
}
 801bed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 801bed2:	6863      	ldr	r3, [r4, #4]
 801bed4:	42b3      	cmp	r3, r6
 801bed6:	d0f6      	beq.n	801bec6 <add_event+0x2a>
 801bed8:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 801beda:	2e00      	cmp	r6, #0
 801bedc:	d0f3      	beq.n	801bec6 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
 801bede:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 801bee0:	b101      	cbz	r1, 801bee4 <add_event+0x48>
 801bee2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 801bee4:	4638      	mov	r0, r7
 801bee6:	f7ff fe6d 	bl	801bbc4 <z_sched_prio_cmp>
 801beea:	2800      	cmp	r0, #0
 801beec:	ddf1      	ble.n	801bed2 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
 801beee:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 801bef0:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
 801bef4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 801bef6:	6075      	str	r5, [r6, #4]
			return;
 801bef8:	e7ea      	b.n	801bed0 <add_event+0x34>

0801befa <register_events>:
{
 801befa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 801befe:	2500      	movs	r5, #0
{
 801bf00:	468b      	mov	fp, r1
 801bf02:	4614      	mov	r4, r2
 801bf04:	461f      	mov	r7, r3
 801bf06:	4682      	mov	sl, r0
	int events_registered = 0;
 801bf08:	462e      	mov	r6, r5
	event->poller = NULL;
 801bf0a:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
 801bf0c:	455d      	cmp	r5, fp
 801bf0e:	db02      	blt.n	801bf16 <register_events+0x1c>
}
 801bf10:	4630      	mov	r0, r6
 801bf12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf16:	f04f 0310 	mov.w	r3, #16
 801bf1a:	f3ef 8911 	mrs	r9, BASEPRI
 801bf1e:	f383 8812 	msr	BASEPRI_MAX, r3
 801bf22:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 801bf26:	f89a 300d 	ldrb.w	r3, [sl, #13]
 801bf2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bf2e:	3b01      	subs	r3, #1
 801bf30:	2b07      	cmp	r3, #7
 801bf32:	d80f      	bhi.n	801bf54 <register_events+0x5a>
 801bf34:	e8df f003 	tbb	[pc, r3]
 801bf38:	0a0e041e 	.word	0x0a0e041e
 801bf3c:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
 801bf40:	f8da 3010 	ldr.w	r3, [sl, #16]
 801bf44:	689b      	ldr	r3, [r3, #8]
 801bf46:	b12b      	cbz	r3, 801bf54 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 801bf48:	2302      	movs	r3, #2
 801bf4a:	e020      	b.n	801bf8e <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
 801bf4c:	f8da 3010 	ldr.w	r3, [sl, #16]
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	bb8b      	cbnz	r3, 801bfb8 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
 801bf54:	bb47      	cbnz	r7, 801bfa8 <register_events+0xae>
 801bf56:	7823      	ldrb	r3, [r4, #0]
 801bf58:	b333      	cbz	r3, 801bfa8 <register_events+0xae>
	switch (event->type) {
 801bf5a:	f89a 300d 	ldrb.w	r3, [sl, #13]
 801bf5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bf62:	3b01      	subs	r3, #1
 801bf64:	2b07      	cmp	r3, #7
 801bf66:	d830      	bhi.n	801bfca <register_events+0xd0>
 801bf68:	e8df f003 	tbb	[pc, r3]
 801bf6c:	282f2833 	.word	0x282f2833
 801bf70:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
 801bf74:	f8da 3010 	ldr.w	r3, [sl, #16]
 801bf78:	689b      	ldr	r3, [r3, #8]
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d0ea      	beq.n	801bf54 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
 801bf7e:	2301      	movs	r3, #1
 801bf80:	e005      	b.n	801bf8e <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
 801bf82:	f8da 3010 	ldr.w	r3, [sl, #16]
 801bf86:	6a1b      	ldr	r3, [r3, #32]
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d0e3      	beq.n	801bf54 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 801bf8c:	2310      	movs	r3, #16
	event->state |= state;
 801bf8e:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
 801bf92:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
 801bf96:	f3c2 3186 	ubfx	r1, r2, #14, #7
 801bf9a:	430b      	orrs	r3, r1
 801bf9c:	f363 3294 	bfi	r2, r3, #14, #7
 801bfa0:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
 801bfa4:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
 801bfa8:	f389 8811 	msr	BASEPRI, r9
 801bfac:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 801bfb0:	3501      	adds	r5, #1
 801bfb2:	f10a 0a14 	add.w	sl, sl, #20
 801bfb6:	e7a9      	b.n	801bf0c <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 801bfb8:	2304      	movs	r3, #4
 801bfba:	e7e8      	b.n	801bf8e <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
 801bfbc:	f8da 0010 	ldr.w	r0, [sl, #16]
 801bfc0:	4622      	mov	r2, r4
 801bfc2:	4651      	mov	r1, sl
 801bfc4:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
 801bfc6:	f7ff ff69 	bl	801be9c <add_event>
			events_registered += 1;
 801bfca:	3601      	adds	r6, #1
	event->poller = poller;
 801bfcc:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
 801bfd0:	e7ea      	b.n	801bfa8 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
 801bfd2:	4622      	mov	r2, r4
 801bfd4:	4651      	mov	r1, sl
 801bfd6:	f8da 0010 	ldr.w	r0, [sl, #16]
 801bfda:	e7f4      	b.n	801bfc6 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
 801bfdc:	f8da 0010 	ldr.w	r0, [sl, #16]
 801bfe0:	4622      	mov	r2, r4
 801bfe2:	4651      	mov	r1, sl
 801bfe4:	3024      	adds	r0, #36	; 0x24
 801bfe6:	e7ee      	b.n	801bfc6 <register_events+0xcc>

0801bfe8 <signal_poll_event>:
{
 801bfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
 801bfec:	6884      	ldr	r4, [r0, #8]
{
 801bfee:	4605      	mov	r5, r0
 801bff0:	460e      	mov	r6, r1
	if (poller != NULL) {
 801bff2:	b144      	cbz	r4, 801c006 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
 801bff4:	7863      	ldrb	r3, [r4, #1]
 801bff6:	2b01      	cmp	r3, #1
 801bff8:	d136      	bne.n	801c068 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
 801bffa:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 801bffe:	f013 0302 	ands.w	r3, r3, #2
 801c002:	d10a      	bne.n	801c01a <signal_poll_event+0x32>
		poller->is_polling = false;
 801c004:	7023      	strb	r3, [r4, #0]
	event->state |= state;
 801c006:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
 801c008:	2000      	movs	r0, #0
	event->state |= state;
 801c00a:	f3c3 3186 	ubfx	r1, r3, #14, #7
	event->poller = NULL;
 801c00e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
 801c010:	430e      	orrs	r6, r1
 801c012:	f366 3394 	bfi	r3, r6, #14, #7
 801c016:	60eb      	str	r3, [r5, #12]
	return retcode;
 801c018:	e00b      	b.n	801c032 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
 801c01a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 801c01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c022:	bf08      	it	eq
 801c024:	f112 0f02 	cmneq.w	r2, #2
 801c028:	d105      	bne.n	801c036 <signal_poll_event+0x4e>
		poller->is_polling = false;
 801c02a:	2300      	movs	r3, #0
		return -EAGAIN;
 801c02c:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
 801c030:	7023      	strb	r3, [r4, #0]
}
 801c032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 801c036:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
 801c03a:	4640      	mov	r0, r8
 801c03c:	f7ff fdcb 	bl	801bbd6 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 801c040:	2e08      	cmp	r6, #8
 801c042:	bf0c      	ite	eq
 801c044:	f06f 0303 	mvneq.w	r3, #3
 801c048:	2300      	movne	r3, #0
 801c04a:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 801c04c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 801c050:	06db      	lsls	r3, r3, #27
 801c052:	d102      	bne.n	801c05a <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
 801c054:	f854 7c48 	ldr.w	r7, [r4, #-72]
 801c058:	b10f      	cbz	r7, 801c05e <signal_poll_event+0x76>
		poller->is_polling = false;
 801c05a:	2300      	movs	r3, #0
 801c05c:	e7d2      	b.n	801c004 <signal_poll_event+0x1c>
	z_ready_thread(thread);
 801c05e:	4640      	mov	r0, r8
 801c060:	f7ff fded 	bl	801bc3e <z_ready_thread>
		poller->is_polling = false;
 801c064:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
 801c066:	e7ce      	b.n	801c006 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
 801c068:	2b02      	cmp	r3, #2
 801c06a:	d1f6      	bne.n	801c05a <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 801c06c:	7823      	ldrb	r3, [r4, #0]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d0c9      	beq.n	801c006 <signal_poll_event+0x1e>
 801c072:	f854 7c04 	ldr.w	r7, [r4, #-4]
 801c076:	2f00      	cmp	r7, #0
 801c078:	d0f4      	beq.n	801c064 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
 801c07a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 801c07e:	f1a4 0914 	sub.w	r9, r4, #20
 801c082:	f104 0014 	add.w	r0, r4, #20
 801c086:	f7ff fe95 	bl	801bdb4 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
 801c08a:	4649      	mov	r1, r9
 801c08c:	4638      	mov	r0, r7
		twork->poll_result = 0;
 801c08e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
 801c092:	f7ff fd12 	bl	801baba <z_work_submit_to_queue>
		poller->is_polling = false;
 801c096:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
 801c09a:	e7b4      	b.n	801c006 <signal_poll_event+0x1e>

0801c09c <clear_event_registrations>:
	while (num_events--) {
 801c09c:	2314      	movs	r3, #20
{
 801c09e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0a0:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
 801c0a4:	2400      	movs	r4, #0
 801c0a6:	2601      	movs	r6, #1
	while (num_events--) {
 801c0a8:	b901      	cbnz	r1, 801c0ac <clear_event_registrations+0x10>
}
 801c0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
 801c0ac:	f810 3c07 	ldrb.w	r3, [r0, #-7]
 801c0b0:	f1a0 0714 	sub.w	r7, r0, #20
	event->poller = NULL;
 801c0b4:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
 801c0b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c0bc:	2b08      	cmp	r3, #8
 801c0be:	d80d      	bhi.n	801c0dc <clear_event_registrations+0x40>
 801c0c0:	fa06 f303 	lsl.w	r3, r6, r3
 801c0c4:	f413 7f8b 	tst.w	r3, #278	; 0x116
 801c0c8:	d008      	beq.n	801c0dc <clear_event_registrations+0x40>
	return node->next != NULL;
 801c0ca:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 801c0ce:	b12b      	cbz	r3, 801c0dc <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
 801c0d0:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
 801c0d4:	602b      	str	r3, [r5, #0]
	next->prev = prev;
 801c0d6:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
 801c0d8:	e940 4405 	strd	r4, r4, [r0, #-20]
 801c0dc:	f382 8811 	msr	BASEPRI, r2
 801c0e0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 801c0e4:	f04f 0310 	mov.w	r3, #16
 801c0e8:	f3ef 8211 	mrs	r2, BASEPRI
 801c0ec:	f383 8812 	msr	BASEPRI_MAX, r3
 801c0f0:	f3bf 8f6f 	isb	sy
 801c0f4:	3901      	subs	r1, #1
 801c0f6:	4638      	mov	r0, r7
 801c0f8:	e7d6      	b.n	801c0a8 <clear_event_registrations+0xc>

0801c0fa <k_poll_event_init>:
	event->type = type;
 801c0fa:	0552      	lsls	r2, r2, #21
 801c0fc:	0209      	lsls	r1, r1, #8
 801c0fe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801c102:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
 801c106:	430a      	orrs	r2, r1
 801c108:	7b01      	ldrb	r1, [r0, #12]
{
 801c10a:	b510      	push	{r4, lr}
	event->type = type;
 801c10c:	430a      	orrs	r2, r1
	event->poller = NULL;
 801c10e:	2400      	movs	r4, #0
	event->obj = obj;
 801c110:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
 801c114:	6084      	str	r4, [r0, #8]
}
 801c116:	bd10      	pop	{r4, pc}

0801c118 <z_handle_obj_poll_events>:
{
 801c118:	4603      	mov	r3, r0
	return list->head == list;
 801c11a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 801c11c:	4283      	cmp	r3, r0
 801c11e:	d008      	beq.n	801c132 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
 801c120:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 801c124:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 801c126:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801c128:	2300      	movs	r3, #0
	node->prev = NULL;
 801c12a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
 801c12e:	f7ff bf5b 	b.w	801bfe8 <signal_poll_event>
}
 801c132:	4770      	bx	lr

0801c134 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
 801c134:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
 801c136:	e9c0 0000 	strd	r0, r0, [r0]
 801c13a:	6083      	str	r3, [r0, #8]
}
 801c13c:	4770      	bx	lr

0801c13e <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
 801c13e:	2300      	movs	r3, #0
 801c140:	6083      	str	r3, [r0, #8]
}
 801c142:	4770      	bx	lr

0801c144 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
 801c144:	6883      	ldr	r3, [r0, #8]
 801c146:	600b      	str	r3, [r1, #0]
	*result = sig->result;
 801c148:	68c3      	ldr	r3, [r0, #12]
 801c14a:	6013      	str	r3, [r2, #0]
}
 801c14c:	4770      	bx	lr

0801c14e <k_free>:
	if (ptr != NULL) {
 801c14e:	b120      	cbz	r0, 801c15a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
 801c150:	1f01      	subs	r1, r0, #4
 801c152:	f850 0c04 	ldr.w	r0, [r0, #-4]
 801c156:	f7ff bad9 	b.w	801b70c <k_heap_free>
}
 801c15a:	4770      	bx	lr
